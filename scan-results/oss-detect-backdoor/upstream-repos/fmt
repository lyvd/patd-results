{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gtest/gtest.h"
                },
                "region": {
                  "startLine": 11394,
                  "startColumn": 29,
                  "endLine": 11394,
                  "endColumn": 56,
                  "snippet": {
                    "text": "// call AddGlobalTestEnvironment() there, as relying on initialization\n// of global variables makes the code harder to read and may cause\n// problems when you register multiple environments from different\n// translation units and the environments have dependencies among them\n// (remember that the compiler doesn't guarantee the order in which\n// global variables from different translation units are initialized).\ninline Environment* AddGlobalTestEnvironment(Environment* env) {\n",
                    "rendered": {
                      "text": "// call AddGlobalTestEnvironment() there, as relying on initialization\n// of global variables makes the code harder to read and may cause\n// problems when you register multiple environments from different\n// translation units and the environments have dependencies among them\n// (remember that the compiler doesn't guarantee the order in which\n// global variables from different translation units are initialized).\ninline Environment* AddGlobalTestEnvironment(Environment* env) {\n",
                      "markdown": "`// call AddGlobalTestEnvironment() there, as relying on initialization\n// of global variables makes the code harder to read and may cause\n// problems when you register multiple environments from different\n// translation units and the environments have dependencies among them\n// (remember that the compiler doesn't guarantee the order in which\n// global variables from different translation units are initialized).\ninline Environment* AddGlobalTestEnvironment(Environment* env) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gtest/gtest.h"
                },
                "region": {
                  "startLine": 2361,
                  "startColumn": 20,
                  "endLine": 2361,
                  "endColumn": 29,
                  "snippet": {
                    "text": "#elif defined(__BORLANDC__) || defined(__SunOS_5_8) || defined(__SunOS_5_9)\n  // Environment variables which we programmatically clear will be set to the\n  // empty string rather than unset (NULL).  Handle that case.\n  const char* const env = getenv(name);\n  return (env != nullptr && env[0] != '\\0') ? env : nullptr;\n#else\n  return getenv(name);\n",
                    "rendered": {
                      "text": "#elif defined(__BORLANDC__) || defined(__SunOS_5_8) || defined(__SunOS_5_9)\n  // Environment variables which we programmatically clear will be set to the\n  // empty string rather than unset (NULL).  Handle that case.\n  const char* const env = getenv(name);\n  return (env != nullptr && env[0] != '\\0') ? env : nullptr;\n#else\n  return getenv(name);\n",
                      "markdown": "`#elif defined(__BORLANDC__) || defined(__SunOS_5_8) || defined(__SunOS_5_9)\n  // Environment variables which we programmatically clear will be set to the\n  // empty string rather than unset (NULL).  Handle that case.\n  const char* const env = getenv(name);\n  return (env != nullptr && env[0] != '\\0') ? env : nullptr;\n#else\n  return getenv(name);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gtest/gtest.h"
                },
                "region": {
                  "startLine": 349,
                  "startColumn": 8,
                  "endLine": 349,
                  "endColumn": 31,
                  "snippet": {
                    "text": "//   GetInjectableArgvs() - returns the command line as a vector of strings.\n//\n// Environment variable utilities:\n//   GetEnv()             - gets the value of an environment variable.\n//   BoolFromGTestEnv()   - parses a bool environment variable.\n//   Int32FromGTestEnv()  - parses an int32_t environment variable.\n//   StringFromGTestEnv() - parses a string environment variable.\n",
                    "rendered": {
                      "text": "//   GetInjectableArgvs() - returns the command line as a vector of strings.\n//\n// Environment variable utilities:\n//   GetEnv()             - gets the value of an environment variable.\n//   BoolFromGTestEnv()   - parses a bool environment variable.\n//   Int32FromGTestEnv()  - parses an int32_t environment variable.\n//   StringFromGTestEnv() - parses a string environment variable.\n",
                      "markdown": "`//   GetInjectableArgvs() - returns the command line as a vector of strings.\n//\n// Environment variable utilities:\n//   GetEnv()             - gets the value of an environment variable.\n//   BoolFromGTestEnv()   - parses a bool environment variable.\n//   Int32FromGTestEnv()  - parses an int32_t environment variable.\n//   StringFromGTestEnv() - parses a string environment variable.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gtest/gtest.h"
                },
                "region": {
                  "startLine": 10773,
                  "startColumn": 19,
                  "endLine": 10773,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  // Returns the name of the parameter type, or NULL if this is not a\n  // type-parameterized test suite.\n  const char* type_param() const {\n    if (type_param_.get() != nullptr) return type_param_->c_str();\n    return nullptr;\n  }\n\n",
                    "rendered": {
                      "text": "  // Returns the name of the parameter type, or NULL if this is not a\n  // type-parameterized test suite.\n  const char* type_param() const {\n    if (type_param_.get() != nullptr) return type_param_->c_str();\n    return nullptr;\n  }\n\n",
                      "markdown": "`  // Returns the name of the parameter type, or NULL if this is not a\n  // type-parameterized test suite.\n  const char* type_param() const {\n    if (type_param_.get() != nullptr) return type_param_->c_str();\n    return nullptr;\n  }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gtest/gtest.h"
                },
                "region": {
                  "startLine": 10635,
                  "startColumn": 20,
                  "endLine": 10635,
                  "endColumn": 25,
                  "snippet": {
                    "text": "  // Returns the text representation of the value parameter, or NULL if this\n  // is not a value-parameterized test.\n  const char* value_param() const {\n    if (value_param_.get() != nullptr) return value_param_->c_str();\n    return nullptr;\n  }\n\n",
                    "rendered": {
                      "text": "  // Returns the text representation of the value parameter, or NULL if this\n  // is not a value-parameterized test.\n  const char* value_param() const {\n    if (value_param_.get() != nullptr) return value_param_->c_str();\n    return nullptr;\n  }\n\n",
                      "markdown": "`  // Returns the text representation of the value parameter, or NULL if this\n  // is not a value-parameterized test.\n  const char* value_param() const {\n    if (value_param_.get() != nullptr) return value_param_->c_str();\n    return nullptr;\n  }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gtest/gtest.h"
                },
                "region": {
                  "startLine": 10628,
                  "startColumn": 19,
                  "endLine": 10628,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  // Returns the name of the parameter type, or NULL if this is not a typed\n  // or a type-parameterized test.\n  const char* type_param() const {\n    if (type_param_.get() != nullptr) return type_param_->c_str();\n    return nullptr;\n  }\n\n",
                    "rendered": {
                      "text": "  // Returns the name of the parameter type, or NULL if this is not a typed\n  // or a type-parameterized test.\n  const char* type_param() const {\n    if (type_param_.get() != nullptr) return type_param_->c_str();\n    return nullptr;\n  }\n\n",
                      "markdown": "`  // Returns the name of the parameter type, or NULL if this is not a typed\n  // or a type-parameterized test.\n  const char* type_param() const {\n    if (type_param_.get() != nullptr) return type_param_->c_str();\n    return nullptr;\n  }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gtest/gtest.h"
                },
                "region": {
                  "startLine": 9903,
                  "startColumn": 16,
                  "endLine": 9903,
                  "endColumn": 21,
                  "snippet": {
                    "text": " private:\n  // Appends the contents of message to message_.\n  void AppendMessage(const Message& a_message) {\n    if (message_.get() == nullptr) message_.reset(new ::std::string);\n    message_->append(a_message.GetString().c_str());\n  }\n\n",
                    "rendered": {
                      "text": " private:\n  // Appends the contents of message to message_.\n  void AppendMessage(const Message& a_message) {\n    if (message_.get() == nullptr) message_.reset(new ::std::string);\n    message_->append(a_message.GetString().c_str());\n  }\n\n",
                      "markdown": "` private:\n  // Appends the contents of message to message_.\n  void AppendMessage(const Message& a_message) {\n    if (message_.get() == nullptr) message_.reset(new ::std::string);\n    message_->append(a_message.GetString().c_str());\n  }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gtest/gtest.h"
                },
                "region": {
                  "startLine": 9881,
                  "startColumn": 19,
                  "endLine": 9881,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  // assertion's expectation). When nothing has been streamed into the\n  // object, returns an empty string.\n  const char* message() const {\n    return message_.get() != nullptr ? message_->c_str() : \"\";\n  }\n  // Deprecated; please use message() instead.\n  const char* failure_message() const { return message(); }\n",
                    "rendered": {
                      "text": "  // assertion's expectation). When nothing has been streamed into the\n  // object, returns an empty string.\n  const char* message() const {\n    return message_.get() != nullptr ? message_->c_str() : \"\";\n  }\n  // Deprecated; please use message() instead.\n  const char* failure_message() const { return message(); }\n",
                      "markdown": "`  // assertion's expectation). When nothing has been streamed into the\n  // object, returns an empty string.\n  const char* message() const {\n    return message_.get() != nullptr ? message_->c_str() : \"\";\n  }\n  // Deprecated; please use message() instead.\n  const char* failure_message() const { return message(); }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gtest/gtest.h"
                },
                "region": {
                  "startLine": 8821,
                  "startColumn": 69,
                  "endLine": 8821,
                  "endColumn": 74,
                  "snippet": {
                    "text": "      return new IteratorImpl(*this);\n    }\n\n    const ParamType* Current() const override { return current_value_.get(); }\n\n    bool Equals(const ParamIteratorInterface<ParamType>& other) const override {\n      // Having the same base generator guarantees that the other\n",
                    "rendered": {
                      "text": "      return new IteratorImpl(*this);\n    }\n\n    const ParamType* Current() const override { return current_value_.get(); }\n\n    bool Equals(const ParamIteratorInterface<ParamType>& other) const override {\n      // Having the same base generator guarantees that the other\n",
                      "markdown": "`      return new IteratorImpl(*this);\n    }\n\n    const ParamType* Current() const override { return current_value_.get(); }\n\n    bool Equals(const ParamIteratorInterface<ParamType>& other) const override {\n      // Having the same base generator guarantees that the other\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gtest/gtest.h"
                },
                "region": {
                  "startLine": 8291,
                  "startColumn": 19,
                  "endLine": 8291,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    // responsible for not calling Current() on an out-of-range iterator.\n    const T* Current() const override {\n      if (value_.get() == nullptr) value_.reset(new T(*iterator_));\n      return value_.get();\n    }\n    bool Equals(const ParamIteratorInterface<T>& other) const override {\n      // Having the same base generator guarantees that the other\n",
                    "rendered": {
                      "text": "    // responsible for not calling Current() on an out-of-range iterator.\n    const T* Current() const override {\n      if (value_.get() == nullptr) value_.reset(new T(*iterator_));\n      return value_.get();\n    }\n    bool Equals(const ParamIteratorInterface<T>& other) const override {\n      // Having the same base generator guarantees that the other\n",
                      "markdown": "`    // responsible for not calling Current() on an out-of-range iterator.\n    const T* Current() const override {\n      if (value_.get() == nullptr) value_.reset(new T(*iterator_));\n      return value_.get();\n    }\n    bool Equals(const ParamIteratorInterface<T>& other) const override {\n      // Having the same base generator guarantees that the other\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gtest/gtest.h"
                },
                "region": {
                  "startLine": 8290,
                  "startColumn": 16,
                  "endLine": 8290,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    // detect that fact. The client code, on the other hand, is\n    // responsible for not calling Current() on an out-of-range iterator.\n    const T* Current() const override {\n      if (value_.get() == nullptr) value_.reset(new T(*iterator_));\n      return value_.get();\n    }\n    bool Equals(const ParamIteratorInterface<T>& other) const override {\n",
                    "rendered": {
                      "text": "    // detect that fact. The client code, on the other hand, is\n    // responsible for not calling Current() on an out-of-range iterator.\n    const T* Current() const override {\n      if (value_.get() == nullptr) value_.reset(new T(*iterator_));\n      return value_.get();\n    }\n    bool Equals(const ParamIteratorInterface<T>& other) const override {\n",
                      "markdown": "`    // detect that fact. The client code, on the other hand, is\n    // responsible for not calling Current() on an out-of-range iterator.\n    const T* Current() const override {\n      if (value_.get() == nullptr) value_.reset(new T(*iterator_));\n      return value_.get();\n    }\n    bool Equals(const ParamIteratorInterface<T>& other) const override {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gtest/gtest.h"
                },
                "region": {
                  "startLine": 8107,
                  "startColumn": 37,
                  "endLine": 8107,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    return ParamIterator(clone);\n  }\n  bool operator==(const ParamIterator& other) const {\n    return impl_.get() == other.impl_.get() || impl_->Equals(*other.impl_);\n  }\n  bool operator!=(const ParamIterator& other) const {\n    return !(*this == other);\n",
                    "rendered": {
                      "text": "    return ParamIterator(clone);\n  }\n  bool operator==(const ParamIterator& other) const {\n    return impl_.get() == other.impl_.get() || impl_->Equals(*other.impl_);\n  }\n  bool operator!=(const ParamIterator& other) const {\n    return !(*this == other);\n",
                      "markdown": "`    return ParamIterator(clone);\n  }\n  bool operator==(const ParamIterator& other) const {\n    return impl_.get() == other.impl_.get() || impl_->Equals(*other.impl_);\n  }\n  bool operator!=(const ParamIterator& other) const {\n    return !(*this == other);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gtest/gtest.h"
                },
                "region": {
                  "startLine": 8107,
                  "startColumn": 16,
                  "endLine": 8107,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    return ParamIterator(clone);\n  }\n  bool operator==(const ParamIterator& other) const {\n    return impl_.get() == other.impl_.get() || impl_->Equals(*other.impl_);\n  }\n  bool operator!=(const ParamIterator& other) const {\n    return !(*this == other);\n",
                    "rendered": {
                      "text": "    return ParamIterator(clone);\n  }\n  bool operator==(const ParamIterator& other) const {\n    return impl_.get() == other.impl_.get() || impl_->Equals(*other.impl_);\n  }\n  bool operator!=(const ParamIterator& other) const {\n    return !(*this == other);\n",
                      "markdown": "`    return ParamIterator(clone);\n  }\n  bool operator==(const ParamIterator& other) const {\n    return impl_.get() == other.impl_.get() || impl_->Equals(*other.impl_);\n  }\n  bool operator!=(const ParamIterator& other) const {\n    return !(*this == other);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gtest/gtest.h"
                },
                "region": {
                  "startLine": 5678,
                  "startColumn": 44,
                  "endLine": 5678,
                  "endColumn": 49,
                  "snippet": {
                    "text": "  if (ptr == nullptr) {\n    *os << \"(nullptr)\";\n  } else {\n    *os << \"(ptr = \" << (VoidifyPointer)(ptr.get()) << \", value = \";\n    UniversalPrinter<T>::Print(*ptr, os);\n    *os << \")\";\n  }\n",
                    "rendered": {
                      "text": "  if (ptr == nullptr) {\n    *os << \"(nullptr)\";\n  } else {\n    *os << \"(ptr = \" << (VoidifyPointer)(ptr.get()) << \", value = \";\n    UniversalPrinter<T>::Print(*ptr, os);\n    *os << \")\";\n  }\n",
                      "markdown": "`  if (ptr == nullptr) {\n    *os << \"(nullptr)\";\n  } else {\n    *os << \"(ptr = \" << (VoidifyPointer)(ptr.get()) << \", value = \";\n    UniversalPrinter<T>::Print(*ptr, os);\n    *os << \")\";\n  }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gtest/gtest.h"
                },
                "region": {
                  "startLine": 5668,
                  "startColumn": 38,
                  "endLine": 5668,
                  "endColumn": 43,
                  "snippet": {
                    "text": "    *os << \"(nullptr)\";\n  } else {\n    // We can't print the value. Just print the pointer..\n    *os << \"(\" << (VoidifyPointer)(ptr.get()) << \")\";\n  }\n}\ntemplate <typename T, typename Ptr,\n",
                    "rendered": {
                      "text": "    *os << \"(nullptr)\";\n  } else {\n    // We can't print the value. Just print the pointer..\n    *os << \"(\" << (VoidifyPointer)(ptr.get()) << \")\";\n  }\n}\ntemplate <typename T, typename Ptr,\n",
                      "markdown": "`    *os << \"(nullptr)\";\n  } else {\n    // We can't print the value. Just print the pointer..\n    *os << \"(\" << (VoidifyPointer)(ptr.get()) << \")\";\n  }\n}\ntemplate <typename T, typename Ptr,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gtest/gtest.h"
                },
                "region": {
                  "startLine": 5654,
                  "startColumn": 33,
                  "endLine": 5654,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\ntemplate <typename T>\nvoid PrintTo(std::reference_wrapper<T> ref, ::std::ostream* os) {\n  UniversalPrinter<T&>::Print(ref.get(), os);\n}\n\ninline const void* VoidifyPointer(const void* p) { return p; }\n",
                    "rendered": {
                      "text": "\ntemplate <typename T>\nvoid PrintTo(std::reference_wrapper<T> ref, ::std::ostream* os) {\n  UniversalPrinter<T&>::Print(ref.get(), os);\n}\n\ninline const void* VoidifyPointer(const void* p) { return p; }\n",
                      "markdown": "`\ntemplate <typename T>\nvoid PrintTo(std::reference_wrapper<T> ref, ::std::ostream* os) {\n  UniversalPrinter<T&>::Print(ref.get(), os);\n}\n\ninline const void* VoidifyPointer(const void* p) { return p; }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gtest/gtest.h"
                },
                "region": {
                  "startLine": 1801,
                  "startColumn": 22,
                  "endLine": 1801,
                  "endColumn": 27,
                  "snippet": {
                    "text": "//   // Thread 1\n//   EXPECT_EQ(100, tl.get());  // In thread 1, tl has the original value.\n//   tl.set(200);\n//   EXPECT_EQ(200, tl.get());\n//\n// The template type argument T must have a public copy constructor.\n// In addition, the default ThreadLocal constructor requires T to have\n",
                    "rendered": {
                      "text": "//   // Thread 1\n//   EXPECT_EQ(100, tl.get());  // In thread 1, tl has the original value.\n//   tl.set(200);\n//   EXPECT_EQ(200, tl.get());\n//\n// The template type argument T must have a public copy constructor.\n// In addition, the default ThreadLocal constructor requires T to have\n",
                      "markdown": "`//   // Thread 1\n//   EXPECT_EQ(100, tl.get());  // In thread 1, tl has the original value.\n//   tl.set(200);\n//   EXPECT_EQ(200, tl.get());\n//\n// The template type argument T must have a public copy constructor.\n// In addition, the default ThreadLocal constructor requires T to have\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gtest/gtest.h"
                },
                "region": {
                  "startLine": 1799,
                  "startColumn": 22,
                  "endLine": 1799,
                  "endColumn": 27,
                  "snippet": {
                    "text": "//   EXPECT_EQ(150, tl.get());\n//\n//   // Thread 1\n//   EXPECT_EQ(100, tl.get());  // In thread 1, tl has the original value.\n//   tl.set(200);\n//   EXPECT_EQ(200, tl.get());\n//\n",
                    "rendered": {
                      "text": "//   EXPECT_EQ(150, tl.get());\n//\n//   // Thread 1\n//   EXPECT_EQ(100, tl.get());  // In thread 1, tl has the original value.\n//   tl.set(200);\n//   EXPECT_EQ(200, tl.get());\n//\n",
                      "markdown": "`//   EXPECT_EQ(150, tl.get());\n//\n//   // Thread 1\n//   EXPECT_EQ(100, tl.get());  // In thread 1, tl has the original value.\n//   tl.set(200);\n//   EXPECT_EQ(200, tl.get());\n//\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gtest/gtest.h"
                },
                "region": {
                  "startLine": 1796,
                  "startColumn": 22,
                  "endLine": 1796,
                  "endColumn": 27,
                  "snippet": {
                    "text": "//\n//   // Thread 2\n//   tl.set(150);  // Changes the value for thread 2 only.\n//   EXPECT_EQ(150, tl.get());\n//\n//   // Thread 1\n//   EXPECT_EQ(100, tl.get());  // In thread 1, tl has the original value.\n",
                    "rendered": {
                      "text": "//\n//   // Thread 2\n//   tl.set(150);  // Changes the value for thread 2 only.\n//   EXPECT_EQ(150, tl.get());\n//\n//   // Thread 1\n//   EXPECT_EQ(100, tl.get());  // In thread 1, tl has the original value.\n",
                      "markdown": "`//\n//   // Thread 2\n//   tl.set(150);  // Changes the value for thread 2 only.\n//   EXPECT_EQ(150, tl.get());\n//\n//   // Thread 1\n//   EXPECT_EQ(100, tl.get());  // In thread 1, tl has the original value.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gtest/gtest.h"
                },
                "region": {
                  "startLine": 10411,
                  "startColumn": 62,
                  "endLine": 10412,
                  "snippet": {
                    "text": "\n  // Often a user misspells SetUp() as Setup() and spends a long time\n  // wondering why it is never called by Google Test.  The declaration of\n  // the following method is solely for catching such an error at\n  // compile time:\n  //\n  //   - The return type is deliberately chosen to be not void, so it\n  //   will be a conflict if void Setup() is declared in the user's\n",
                    "rendered": {
                      "text": "\n  // Often a user misspells SetUp() as Setup() and spends a long time\n  // wondering why it is never called by Google Test.  The declaration of\n  // the following method is solely for catching such an error at\n  // compile time:\n  //\n  //   - The return type is deliberately chosen to be not void, so it\n  //   will be a conflict if void Setup() is declared in the user's\n",
                      "markdown": "`\n  // Often a user misspells SetUp() as Setup() and spends a long time\n  // wondering why it is never called by Google Test.  The declaration of\n  // the following method is solely for catching such an error at\n  // compile time:\n  //\n  //   - The return type is deliberately chosen to be not void, so it\n  //   will be a conflict if void Setup() is declared in the user's\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gtest/gtest.h"
                },
                "region": {
                  "startLine": 10000,
                  "startColumn": 52,
                  "endLine": 10000,
                  "endColumn": 56,
                  "snippet": {
                    "text": "//\n// We also define the EXPECT_* variations.\n//\n// For now we only support predicates whose arity is at most 5.\n// Please email googletestframework@googlegroups.com if you need\n// support for higher arities.\n\n",
                    "rendered": {
                      "text": "//\n// We also define the EXPECT_* variations.\n//\n// For now we only support predicates whose arity is at most 5.\n// Please email googletestframework@googlegroups.com if you need\n// support for higher arities.\n\n",
                      "markdown": "`//\n// We also define the EXPECT_* variations.\n//\n// For now we only support predicates whose arity is at most 5.\n// Please email googletestframework@googlegroups.com if you need\n// support for higher arities.\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gtest/gtest.h"
                },
                "region": {
                  "startLine": 8664,
                  "startColumn": 12,
                  "endLine": 8664,
                  "endColumn": 16,
                  "snippet": {
                    "text": "          ReportInvalidTestSuiteType(test_suite_name, code_location);\n          posix::Abort();\n        } else {\n          // At this point we are sure that the object we found is of the same\n          // type we are looking for, so we downcast it to that type\n          // without further checks.\n          typed_test_info = CheckedDowncastToActualType<\n",
                    "rendered": {
                      "text": "          ReportInvalidTestSuiteType(test_suite_name, code_location);\n          posix::Abort();\n        } else {\n          // At this point we are sure that the object we found is of the same\n          // type we are looking for, so we downcast it to that type\n          // without further checks.\n          typed_test_info = CheckedDowncastToActualType<\n",
                      "markdown": "`          ReportInvalidTestSuiteType(test_suite_name, code_location);\n          posix::Abort();\n        } else {\n          // At this point we are sure that the object we found is of the same\n          // type we are looking for, so we downcast it to that type\n          // without further checks.\n          typed_test_info = CheckedDowncastToActualType<\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gtest/gtest.h"
                },
                "region": {
                  "startLine": 4165,
                  "startColumn": 65,
                  "endLine": 4165,
                  "endColumn": 69,
                  "snippet": {
                    "text": "    std::string test_name = StripTrailingSpaces(\n        GetPrefixUntilComma(test_names));\n    if (!state->TestExists(test_name)) {\n      fprintf(stderr, \"Failed to get code location for test %s.%s at %s.\",\n              case_name, test_name.c_str(),\n              FormatFileLocation(code_location.file.c_str(),\n                                 code_location.line).c_str());\n",
                    "rendered": {
                      "text": "    std::string test_name = StripTrailingSpaces(\n        GetPrefixUntilComma(test_names));\n    if (!state->TestExists(test_name)) {\n      fprintf(stderr, \"Failed to get code location for test %s.%s at %s.\",\n              case_name, test_name.c_str(),\n              FormatFileLocation(code_location.file.c_str(),\n                                 code_location.line).c_str());\n",
                      "markdown": "`    std::string test_name = StripTrailingSpaces(\n        GetPrefixUntilComma(test_names));\n    if (!state->TestExists(test_name)) {\n      fprintf(stderr, \"Failed to get code location for test %s.%s at %s.\",\n              case_name, test_name.c_str(),\n              FormatFileLocation(code_location.file.c_str(),\n                                 code_location.line).c_str());\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gtest/gtest.h"
                },
                "region": {
                  "startLine": 3909,
                  "startColumn": 47,
                  "endLine": 3909,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\n    GTEST_CHECK_(!test_case_fp || !test_suite_fp)\n        << \"Test can not provide both SetUpTestSuite and SetUpTestCase, please \"\n           \"make sure there is only one present at \"\n        << filename << \":\" << line_num;\n\n    return test_case_fp != nullptr ? test_case_fp : test_suite_fp;\n",
                    "rendered": {
                      "text": "\n    GTEST_CHECK_(!test_case_fp || !test_suite_fp)\n        << \"Test can not provide both SetUpTestSuite and SetUpTestCase, please \"\n           \"make sure there is only one present at \"\n        << filename << \":\" << line_num;\n\n    return test_case_fp != nullptr ? test_case_fp : test_suite_fp;\n",
                      "markdown": "`\n    GTEST_CHECK_(!test_case_fp || !test_suite_fp)\n        << \"Test can not provide both SetUpTestSuite and SetUpTestCase, please \"\n           \"make sure there is only one present at \"\n        << filename << \":\" << line_num;\n\n    return test_case_fp != nullptr ? test_case_fp : test_suite_fp;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gtest/gtest.h"
                },
                "region": {
                  "startLine": 2317,
                  "startColumn": 41,
                  "endLine": 2317,
                  "endColumn": 45,
                  "snippet": {
                    "text": "GTEST_DISABLE_MSC_DEPRECATED_PUSH_()\n\n// ChDir(), FReopen(), FDOpen(), Read(), Write(), Close(), and\n// StrError() aren't needed on Windows CE at this time and thus not\n// defined there.\n\n#if !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_WINDOWS_PHONE && \\\n",
                    "rendered": {
                      "text": "GTEST_DISABLE_MSC_DEPRECATED_PUSH_()\n\n// ChDir(), FReopen(), FDOpen(), Read(), Write(), Close(), and\n// StrError() aren't needed on Windows CE at this time and thus not\n// defined there.\n\n#if !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_WINDOWS_PHONE && \\\n",
                      "markdown": "`GTEST_DISABLE_MSC_DEPRECATED_PUSH_()\n\n// ChDir(), FReopen(), FDOpen(), Read(), Write(), Close(), and\n// StrError() aren't needed on Windows CE at this time and thus not\n// defined there.\n\n#if !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_WINDOWS_PHONE && \\\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gtest/gtest.h"
                },
                "region": {
                  "startLine": 2258,
                  "startColumn": 60,
                  "endLine": 2258,
                  "endColumn": 64,
                  "snippet": {
                    "text": "\n# if GTEST_OS_WINDOWS_MOBILE\ninline int FileNo(FILE* file) { return reinterpret_cast<int>(_fileno(file)); }\n// Stat(), RmDir(), and IsDir() are not needed on Windows CE at this\n// time and thus not defined there.\n# else\ninline int FileNo(FILE* file) { return _fileno(file); }\n",
                    "rendered": {
                      "text": "\n# if GTEST_OS_WINDOWS_MOBILE\ninline int FileNo(FILE* file) { return reinterpret_cast<int>(_fileno(file)); }\n// Stat(), RmDir(), and IsDir() are not needed on Windows CE at this\n// time and thus not defined there.\n# else\ninline int FileNo(FILE* file) { return _fileno(file); }\n",
                      "markdown": "`\n# if GTEST_OS_WINDOWS_MOBILE\ninline int FileNo(FILE* file) { return reinterpret_cast<int>(_fileno(file)); }\n// Stat(), RmDir(), and IsDir() are not needed on Windows CE at this\n// time and thus not defined there.\n# else\ninline int FileNo(FILE* file) { return _fileno(file); }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gtest/gtest.h"
                },
                "region": {
                  "startLine": 10508,
                  "startColumn": 13,
                  "endLine": 10508,
                  "endColumn": 19,
                  "snippet": {
                    "text": "  // Returns the elapsed time, in milliseconds.\n  TimeInMillis elapsed_time() const { return elapsed_time_; }\n\n  // Gets the time of the test case start, in ms from the start of the\n  // UNIX epoch.\n  TimeInMillis start_timestamp() const { return start_timestamp_; }\n\n",
                    "rendered": {
                      "text": "  // Returns the elapsed time, in milliseconds.\n  TimeInMillis elapsed_time() const { return elapsed_time_; }\n\n  // Gets the time of the test case start, in ms from the start of the\n  // UNIX epoch.\n  TimeInMillis start_timestamp() const { return start_timestamp_; }\n\n",
                      "markdown": "`  // Returns the elapsed time, in milliseconds.\n  TimeInMillis elapsed_time() const { return elapsed_time_; }\n\n  // Gets the time of the test case start, in ms from the start of the\n  // UNIX epoch.\n  TimeInMillis start_timestamp() const { return start_timestamp_; }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gtest/gtest.h"
                },
                "region": {
                  "startLine": 10471,
                  "startColumn": 50,
                  "endLine": 10471,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\n// The result of a single Test.  This includes a list of\n// TestPartResults, a list of TestProperties, a count of how many\n// death tests there are in the Test, and how much time it took to run\n// the Test.\n//\n// TestResult is not copyable.\n",
                    "rendered": {
                      "text": "\n// The result of a single Test.  This includes a list of\n// TestPartResults, a list of TestProperties, a count of how many\n// death tests there are in the Test, and how much time it took to run\n// the Test.\n//\n// TestResult is not copyable.\n",
                      "markdown": "`\n// The result of a single Test.  This includes a list of\n// TestPartResults, a list of TestProperties, a count of how many\n// death tests there are in the Test, and how much time it took to run\n// the Test.\n//\n// TestResult is not copyable.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gtest/gtest.h"
                },
                "region": {
                  "startLine": 10409,
                  "startColumn": 64,
                  "endLine": 10410,
                  "snippet": {
                    "text": "\n  const std::unique_ptr<GTEST_FLAG_SAVER_> gtest_flag_saver_;\n\n  // Often a user misspells SetUp() as Setup() and spends a long time\n  // wondering why it is never called by Google Test.  The declaration of\n  // the following method is solely for catching such an error at\n  // compile time:\n  //\n",
                    "rendered": {
                      "text": "\n  const std::unique_ptr<GTEST_FLAG_SAVER_> gtest_flag_saver_;\n\n  // Often a user misspells SetUp() as Setup() and spends a long time\n  // wondering why it is never called by Google Test.  The declaration of\n  // the following method is solely for catching such an error at\n  // compile time:\n  //\n",
                      "markdown": "`\n  const std::unique_ptr<GTEST_FLAG_SAVER_> gtest_flag_saver_;\n\n  // Often a user misspells SetUp() as Setup() and spends a long time\n  // wondering why it is never called by Google Test.  The declaration of\n  // the following method is solely for catching such an error at\n  // compile time:\n  //\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gtest/gtest.h"
                },
                "region": {
                  "startLine": 10304,
                  "startColumn": 11,
                  "endLine": 10304,
                  "endColumn": 17,
                  "snippet": {
                    "text": "// explicitly derive from Test - the TEST macro automatically does\n// this for you.\n//\n// The only time you derive from Test is when defining a test fixture\n// to be used in a TEST_F.  For example:\n//\n//   class FooTest : public testing::Test {\n",
                    "rendered": {
                      "text": "// explicitly derive from Test - the TEST macro automatically does\n// this for you.\n//\n// The only time you derive from Test is when defining a test fixture\n// to be used in a TEST_F.  For example:\n//\n//   class FooTest : public testing::Test {\n",
                      "markdown": "`// explicitly derive from Test - the TEST macro automatically does\n// this for you.\n//\n// The only time you derive from Test is when defining a test fixture\n// to be used in a TEST_F.  For example:\n//\n//   class FooTest : public testing::Test {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gtest/gtest.h"
                },
                "region": {
                  "startLine": 3410,
                  "startColumn": 7,
                  "endLine": 3410,
                  "endColumn": 13,
                  "snippet": {
                    "text": "template <typename Head_>\nstruct Types<Head_> {\n  using Head = Head_;\n  using Tail = None;\n};\n\n// Helper metafunctions to tell apart a single type from types\n",
                    "rendered": {
                      "text": "template <typename Head_>\nstruct Types<Head_> {\n  using Head = Head_;\n  using Tail = None;\n};\n\n// Helper metafunctions to tell apart a single type from types\n",
                      "markdown": "`template <typename Head_>\nstruct Types<Head_> {\n  using Head = Head_;\n  using Tail = None;\n};\n\n// Helper metafunctions to tell apart a single type from types\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gtest/gtest.h"
                },
                "region": {
                  "startLine": 3409,
                  "startColumn": 7,
                  "endLine": 3409,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\ntemplate <typename Head_>\nstruct Types<Head_> {\n  using Head = Head_;\n  using Tail = None;\n};\n\n",
                    "rendered": {
                      "text": "\ntemplate <typename Head_>\nstruct Types<Head_> {\n  using Head = Head_;\n  using Tail = None;\n};\n\n",
                      "markdown": "`\ntemplate <typename Head_>\nstruct Types<Head_> {\n  using Head = Head_;\n  using Tail = None;\n};\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gtest/gtest.h"
                },
                "region": {
                  "startLine": 3404,
                  "startColumn": 7,
                  "endLine": 3404,
                  "endColumn": 13,
                  "snippet": {
                    "text": "template <typename Head_, typename... Tail_>\nstruct Types {\n  using Head = Head_;\n  using Tail = Types<Tail_...>;\n};\n\ntemplate <typename Head_>\n",
                    "rendered": {
                      "text": "template <typename Head_, typename... Tail_>\nstruct Types {\n  using Head = Head_;\n  using Tail = Types<Tail_...>;\n};\n\ntemplate <typename Head_>\n",
                      "markdown": "`template <typename Head_, typename... Tail_>\nstruct Types {\n  using Head = Head_;\n  using Tail = Types<Tail_...>;\n};\n\ntemplate <typename Head_>\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gtest/gtest.h"
                },
                "region": {
                  "startLine": 3403,
                  "startColumn": 7,
                  "endLine": 3403,
                  "endColumn": 13,
                  "snippet": {
                    "text": "// Tuple-like type lists\ntemplate <typename Head_, typename... Tail_>\nstruct Types {\n  using Head = Head_;\n  using Tail = Types<Tail_...>;\n};\n\n",
                    "rendered": {
                      "text": "// Tuple-like type lists\ntemplate <typename Head_, typename... Tail_>\nstruct Types {\n  using Head = Head_;\n  using Tail = Types<Tail_...>;\n};\n\n",
                      "markdown": "`// Tuple-like type lists\ntemplate <typename Head_, typename... Tail_>\nstruct Types {\n  using Head = Head_;\n  using Tail = Types<Tail_...>;\n};\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gtest/gtest.h"
                },
                "region": {
                  "startLine": 3397,
                  "startColumn": 7,
                  "endLine": 3397,
                  "endColumn": 13,
                  "snippet": {
                    "text": "template <GTEST_TEMPLATE_ Head_>\nstruct Templates<Head_> {\n  using Head = TemplateSel<Head_>;\n  using Tail = None;\n};\n\n// Tuple-like type lists\n",
                    "rendered": {
                      "text": "template <GTEST_TEMPLATE_ Head_>\nstruct Templates<Head_> {\n  using Head = TemplateSel<Head_>;\n  using Tail = None;\n};\n\n// Tuple-like type lists\n",
                      "markdown": "`template <GTEST_TEMPLATE_ Head_>\nstruct Templates<Head_> {\n  using Head = TemplateSel<Head_>;\n  using Tail = None;\n};\n\n// Tuple-like type lists\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gtest/gtest.h"
                },
                "region": {
                  "startLine": 3396,
                  "startColumn": 7,
                  "endLine": 3396,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\ntemplate <GTEST_TEMPLATE_ Head_>\nstruct Templates<Head_> {\n  using Head = TemplateSel<Head_>;\n  using Tail = None;\n};\n\n",
                    "rendered": {
                      "text": "\ntemplate <GTEST_TEMPLATE_ Head_>\nstruct Templates<Head_> {\n  using Head = TemplateSel<Head_>;\n  using Tail = None;\n};\n\n",
                      "markdown": "`\ntemplate <GTEST_TEMPLATE_ Head_>\nstruct Templates<Head_> {\n  using Head = TemplateSel<Head_>;\n  using Tail = None;\n};\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gtest/gtest.h"
                },
                "region": {
                  "startLine": 3391,
                  "startColumn": 7,
                  "endLine": 3391,
                  "endColumn": 13,
                  "snippet": {
                    "text": "template <GTEST_TEMPLATE_ Head_, GTEST_TEMPLATE_... Tail_>\nstruct Templates {\n  using Head = TemplateSel<Head_>;\n  using Tail = Templates<Tail_...>;\n};\n\ntemplate <GTEST_TEMPLATE_ Head_>\n",
                    "rendered": {
                      "text": "template <GTEST_TEMPLATE_ Head_, GTEST_TEMPLATE_... Tail_>\nstruct Templates {\n  using Head = TemplateSel<Head_>;\n  using Tail = Templates<Tail_...>;\n};\n\ntemplate <GTEST_TEMPLATE_ Head_>\n",
                      "markdown": "`template <GTEST_TEMPLATE_ Head_, GTEST_TEMPLATE_... Tail_>\nstruct Templates {\n  using Head = TemplateSel<Head_>;\n  using Tail = Templates<Tail_...>;\n};\n\ntemplate <GTEST_TEMPLATE_ Head_>\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gtest/gtest.h"
                },
                "region": {
                  "startLine": 3390,
                  "startColumn": 7,
                  "endLine": 3390,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\ntemplate <GTEST_TEMPLATE_ Head_, GTEST_TEMPLATE_... Tail_>\nstruct Templates {\n  using Head = TemplateSel<Head_>;\n  using Tail = Templates<Tail_...>;\n};\n\n",
                    "rendered": {
                      "text": "\ntemplate <GTEST_TEMPLATE_ Head_, GTEST_TEMPLATE_... Tail_>\nstruct Templates {\n  using Head = TemplateSel<Head_>;\n  using Tail = Templates<Tail_...>;\n};\n\n",
                      "markdown": "`\ntemplate <GTEST_TEMPLATE_ Head_, GTEST_TEMPLATE_... Tail_>\nstruct Templates {\n  using Head = TemplateSel<Head_>;\n  using Tail = Templates<Tail_...>;\n};\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gtest/gtest.h"
                },
                "region": {
                  "startLine": 2362,
                  "startColumn": 45,
                  "endLine": 2362,
                  "endColumn": 50,
                  "snippet": {
                    "text": "  // Environment variables which we programmatically clear will be set to the\n  // empty string rather than unset (NULL).  Handle that case.\n  const char* const env = getenv(name);\n  return (env != nullptr && env[0] != '\\0') ? env : nullptr;\n#else\n  return getenv(name);\n#endif\n",
                    "rendered": {
                      "text": "  // Environment variables which we programmatically clear will be set to the\n  // empty string rather than unset (NULL).  Handle that case.\n  const char* const env = getenv(name);\n  return (env != nullptr && env[0] != '\\0') ? env : nullptr;\n#else\n  return getenv(name);\n#endif\n",
                      "markdown": "`  // Environment variables which we programmatically clear will be set to the\n  // empty string rather than unset (NULL).  Handle that case.\n  const char* const env = getenv(name);\n  return (env != nullptr && env[0] != '\\0') ? env : nullptr;\n#else\n  return getenv(name);\n#endif\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gtest/gtest.h"
                },
                "region": {
                  "startLine": 2361,
                  "startColumn": 19,
                  "endLine": 2361,
                  "endColumn": 24,
                  "snippet": {
                    "text": "#elif defined(__BORLANDC__) || defined(__SunOS_5_8) || defined(__SunOS_5_9)\n  // Environment variables which we programmatically clear will be set to the\n  // empty string rather than unset (NULL).  Handle that case.\n  const char* const env = getenv(name);\n  return (env != nullptr && env[0] != '\\0') ? env : nullptr;\n#else\n  return getenv(name);\n",
                    "rendered": {
                      "text": "#elif defined(__BORLANDC__) || defined(__SunOS_5_8) || defined(__SunOS_5_9)\n  // Environment variables which we programmatically clear will be set to the\n  // empty string rather than unset (NULL).  Handle that case.\n  const char* const env = getenv(name);\n  return (env != nullptr && env[0] != '\\0') ? env : nullptr;\n#else\n  return getenv(name);\n",
                      "markdown": "`#elif defined(__BORLANDC__) || defined(__SunOS_5_8) || defined(__SunOS_5_9)\n  // Environment variables which we programmatically clear will be set to the\n  // empty string rather than unset (NULL).  Handle that case.\n  const char* const env = getenv(name);\n  return (env != nullptr && env[0] != '\\0') ? env : nullptr;\n#else\n  return getenv(name);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gtest/gtest.h"
                },
                "region": {
                  "startLine": 2317,
                  "startColumn": 49,
                  "endLine": 2317,
                  "endColumn": 55,
                  "snippet": {
                    "text": "GTEST_DISABLE_MSC_DEPRECATED_PUSH_()\n\n// ChDir(), FReopen(), FDOpen(), Read(), Write(), Close(), and\n// StrError() aren't needed on Windows CE at this time and thus not\n// defined there.\n\n#if !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_WINDOWS_PHONE && \\\n",
                    "rendered": {
                      "text": "GTEST_DISABLE_MSC_DEPRECATED_PUSH_()\n\n// ChDir(), FReopen(), FDOpen(), Read(), Write(), Close(), and\n// StrError() aren't needed on Windows CE at this time and thus not\n// defined there.\n\n#if !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_WINDOWS_PHONE && \\\n",
                      "markdown": "`GTEST_DISABLE_MSC_DEPRECATED_PUSH_()\n\n// ChDir(), FReopen(), FDOpen(), Read(), Write(), Close(), and\n// StrError() aren't needed on Windows CE at this time and thus not\n// defined there.\n\n#if !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_WINDOWS_PHONE && \\\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gtest/gtest.h"
                },
                "region": {
                  "startLine": 2259,
                  "startColumn": 2,
                  "endLine": 2259,
                  "endColumn": 8,
                  "snippet": {
                    "text": "# if GTEST_OS_WINDOWS_MOBILE\ninline int FileNo(FILE* file) { return reinterpret_cast<int>(_fileno(file)); }\n// Stat(), RmDir(), and IsDir() are not needed on Windows CE at this\n// time and thus not defined there.\n# else\ninline int FileNo(FILE* file) { return _fileno(file); }\ninline int Stat(const char* path, StatStruct* buf) { return _stat(path, buf); }\n",
                    "rendered": {
                      "text": "# if GTEST_OS_WINDOWS_MOBILE\ninline int FileNo(FILE* file) { return reinterpret_cast<int>(_fileno(file)); }\n// Stat(), RmDir(), and IsDir() are not needed on Windows CE at this\n// time and thus not defined there.\n# else\ninline int FileNo(FILE* file) { return _fileno(file); }\ninline int Stat(const char* path, StatStruct* buf) { return _stat(path, buf); }\n",
                      "markdown": "`# if GTEST_OS_WINDOWS_MOBILE\ninline int FileNo(FILE* file) { return reinterpret_cast<int>(_fileno(file)); }\n// Stat(), RmDir(), and IsDir() are not needed on Windows CE at this\n// time and thus not defined there.\n# else\ninline int FileNo(FILE* file) { return _fileno(file); }\ninline int Stat(const char* path, StatStruct* buf) { return _stat(path, buf); }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gtest/gtest.h"
                },
                "region": {
                  "startLine": 1419,
                  "startColumn": 16,
                  "endLine": 1419,
                  "endColumn": 22,
                  "snippet": {
                    "text": "// Google Test's own constructs.  Don't use it in user tests, either\n// directly or indirectly.\ninline void SleepMilliseconds(int n) {\n  const timespec time = {\n    0,                  // 0 seconds.\n    n * 1000L * 1000L,  // And n ms.\n  };\n",
                    "rendered": {
                      "text": "// Google Test's own constructs.  Don't use it in user tests, either\n// directly or indirectly.\ninline void SleepMilliseconds(int n) {\n  const timespec time = {\n    0,                  // 0 seconds.\n    n * 1000L * 1000L,  // And n ms.\n  };\n",
                      "markdown": "`// Google Test's own constructs.  Don't use it in user tests, either\n// directly or indirectly.\ninline void SleepMilliseconds(int n) {\n  const timespec time = {\n    0,                  // 0 seconds.\n    n * 1000L * 1000L,  // And n ms.\n  };\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock/gmock.h"
                },
                "region": {
                  "startLine": 9992,
                  "startColumn": 68,
                  "endLine": 9992,
                  "endColumn": 73,
                  "snippet": {
                    "text": "         << \":\\n\";\n    for (size_t i = 0; i < count; i++) {\n      TypedExpectation<F>* const expectation =\n          static_cast<TypedExpectation<F>*>(untyped_expectations_[i].get());\n      *why << \"\\n\";\n      expectation->DescribeLocationTo(why);\n      if (count > 1) {\n",
                    "rendered": {
                      "text": "         << \":\\n\";\n    for (size_t i = 0; i < count; i++) {\n      TypedExpectation<F>* const expectation =\n          static_cast<TypedExpectation<F>*>(untyped_expectations_[i].get());\n      *why << \"\\n\";\n      expectation->DescribeLocationTo(why);\n      if (count > 1) {\n",
                      "markdown": "`         << \":\\n\";\n    for (size_t i = 0; i < count; i++) {\n      TypedExpectation<F>* const expectation =\n          static_cast<TypedExpectation<F>*>(untyped_expectations_[i].get());\n      *why << \"\\n\";\n      expectation->DescribeLocationTo(why);\n      if (count > 1) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock/gmock.h"
                },
                "region": {
                  "startLine": 9855,
                  "startColumn": 65,
                  "endLine": 9855,
                  "endColumn": 70,
                  "snippet": {
                    "text": "    untyped_expectations_.push_back(untyped_expectation);\n\n    // Adds this expectation into the implicit sequence if there is one.\n    Sequence* const implicit_sequence = g_gmock_implicit_sequence.get();\n    if (implicit_sequence != nullptr) {\n      implicit_sequence->AddExpectation(Expectation(untyped_expectation));\n    }\n",
                    "rendered": {
                      "text": "    untyped_expectations_.push_back(untyped_expectation);\n\n    // Adds this expectation into the implicit sequence if there is one.\n    Sequence* const implicit_sequence = g_gmock_implicit_sequence.get();\n    if (implicit_sequence != nullptr) {\n      implicit_sequence->AddExpectation(Expectation(untyped_expectation));\n    }\n",
                      "markdown": "`    untyped_expectations_.push_back(untyped_expectation);\n\n    // Adds this expectation into the implicit sequence if there is one.\n    Sequence* const implicit_sequence = g_gmock_implicit_sequence.get();\n    if (implicit_sequence != nullptr) {\n      implicit_sequence->AddExpectation(Expectation(untyped_expectation));\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock/gmock.h"
                },
                "region": {
                  "startLine": 8769,
                  "startColumn": 64,
                  "endLine": 8769,
                  "endColumn": 69,
                  "snippet": {
                    "text": "  class Less {\n   public:\n    bool operator()(const Expectation& lhs, const Expectation& rhs) const {\n      return lhs.expectation_base_.get() < rhs.expectation_base_.get();\n    }\n  };\n\n",
                    "rendered": {
                      "text": "  class Less {\n   public:\n    bool operator()(const Expectation& lhs, const Expectation& rhs) const {\n      return lhs.expectation_base_.get() < rhs.expectation_base_.get();\n    }\n  };\n\n",
                      "markdown": "`  class Less {\n   public:\n    bool operator()(const Expectation& lhs, const Expectation& rhs) const {\n      return lhs.expectation_base_.get() < rhs.expectation_base_.get();\n    }\n  };\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock/gmock.h"
                },
                "region": {
                  "startLine": 8769,
                  "startColumn": 34,
                  "endLine": 8769,
                  "endColumn": 39,
                  "snippet": {
                    "text": "  class Less {\n   public:\n    bool operator()(const Expectation& lhs, const Expectation& rhs) const {\n      return lhs.expectation_base_.get() < rhs.expectation_base_.get();\n    }\n  };\n\n",
                    "rendered": {
                      "text": "  class Less {\n   public:\n    bool operator()(const Expectation& lhs, const Expectation& rhs) const {\n      return lhs.expectation_base_.get() < rhs.expectation_base_.get();\n    }\n  };\n\n",
                      "markdown": "`  class Less {\n   public:\n    bool operator()(const Expectation& lhs, const Expectation& rhs) const {\n      return lhs.expectation_base_.get() < rhs.expectation_base_.get();\n    }\n  };\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock/gmock.h"
                },
                "region": {
                  "startLine": 404,
                  "startColumn": 10,
                  "endLine": 404,
                  "endColumn": 15,
                  "snippet": {
                    "text": "// The following default implementation is for the smart pointer case.\ntemplate <typename Pointer>\ninline const typename Pointer::element_type* GetRawPointer(const Pointer& p) {\n  return p.get();\n}\n// This overloaded version is for the raw pointer case.\ntemplate <typename Element>\n",
                    "rendered": {
                      "text": "// The following default implementation is for the smart pointer case.\ntemplate <typename Pointer>\ninline const typename Pointer::element_type* GetRawPointer(const Pointer& p) {\n  return p.get();\n}\n// This overloaded version is for the raw pointer case.\ntemplate <typename Element>\n",
                      "markdown": "`// The following default implementation is for the smart pointer case.\ntemplate <typename Pointer>\ninline const typename Pointer::element_type* GetRawPointer(const Pointer& p) {\n  return p.get();\n}\n// This overloaded version is for the raw pointer case.\ntemplate <typename Element>\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock/gmock.h"
                },
                "region": {
                  "startLine": 9911,
                  "startColumn": 44,
                  "endLine": 9911,
                  "endColumn": 53,
                  "snippet": {
                    "text": "  // method in the middle and mess up the state.\n  //\n  // However, performing the action has to be left out of the critical\n  // section.  The reason is that we have no control on what the\n  // action does (it can invoke an arbitrary user function or even a\n  // mock function) and excessive locking could cause a dead lock.\n  const ExpectationBase* UntypedFindMatchingExpectation(\n",
                    "rendered": {
                      "text": "  // method in the middle and mess up the state.\n  //\n  // However, performing the action has to be left out of the critical\n  // section.  The reason is that we have no control on what the\n  // action does (it can invoke an arbitrary user function or even a\n  // mock function) and excessive locking could cause a dead lock.\n  const ExpectationBase* UntypedFindMatchingExpectation(\n",
                      "markdown": "`  // method in the middle and mess up the state.\n  //\n  // However, performing the action has to be left out of the critical\n  // section.  The reason is that we have no control on what the\n  // action does (it can invoke an arbitrary user function or even a\n  // mock function) and excessive locking could cause a dead lock.\n  const ExpectationBase* UntypedFindMatchingExpectation(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock/gmock.h"
                },
                "region": {
                  "startLine": 8537,
                  "startColumn": 32,
                  "endLine": 8537,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n  // Implements the .With() clause.\n  OnCallSpec& With(const Matcher<const ArgumentTuple&>& m) {\n    // Makes sure this is called at most once.\n    ExpectSpecProperty(last_clause_ < kWith,\n                       \".With() cannot appear \"\n                       \"more than once in an ON_CALL().\");\n",
                    "rendered": {
                      "text": "\n  // Implements the .With() clause.\n  OnCallSpec& With(const Matcher<const ArgumentTuple&>& m) {\n    // Makes sure this is called at most once.\n    ExpectSpecProperty(last_clause_ < kWith,\n                       \".With() cannot appear \"\n                       \"more than once in an ON_CALL().\");\n",
                      "markdown": "`\n  // Implements the .With() clause.\n  OnCallSpec& With(const Matcher<const ArgumentTuple&>& m) {\n    // Makes sure this is called at most once.\n    ExpectSpecProperty(last_clause_ < kWith,\n                       \".With() cannot appear \"\n                       \"more than once in an ON_CALL().\");\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock/gmock.h"
                },
                "region": {
                  "startLine": 8342,
                  "startColumn": 57,
                  "endLine": 8342,
                  "endColumn": 61,
                  "snippet": {
                    "text": "// The reason we don't use more fine-grained protection is: when a\n// mock function Foo() is called, it needs to consult its expectations\n// to see which one should be picked.  If another thread is allowed to\n// call a mock function (either Foo() or a different one) at the same\n// time, it could affect the \"retired\" attributes of Foo()'s\n// expectations when InSequence() is used, and thus affect which\n// expectation gets picked.  Therefore, we sequence all mock function\n",
                    "rendered": {
                      "text": "// The reason we don't use more fine-grained protection is: when a\n// mock function Foo() is called, it needs to consult its expectations\n// to see which one should be picked.  If another thread is allowed to\n// call a mock function (either Foo() or a different one) at the same\n// time, it could affect the \"retired\" attributes of Foo()'s\n// expectations when InSequence() is used, and thus affect which\n// expectation gets picked.  Therefore, we sequence all mock function\n",
                      "markdown": "`// The reason we don't use more fine-grained protection is: when a\n// mock function Foo() is called, it needs to consult its expectations\n// to see which one should be picked.  If another thread is allowed to\n// call a mock function (either Foo() or a different one) at the same\n// time, it could affect the \"retired\" attributes of Foo()'s\n// expectations when InSequence() is used, and thus affect which\n// expectation gets picked.  Therefore, we sequence all mock function\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock/gmock.h"
                },
                "region": {
                  "startLine": 5539,
                  "startColumn": 20,
                  "endLine": 5539,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n  // Describes what this matcher does.\n  void DescribeTo(::std::ostream* os) const override {\n    *os << \"contains at least one element that \";\n    this->inner_matcher_.DescribeTo(os);\n  }\n\n",
                    "rendered": {
                      "text": "\n  // Describes what this matcher does.\n  void DescribeTo(::std::ostream* os) const override {\n    *os << \"contains at least one element that \";\n    this->inner_matcher_.DescribeTo(os);\n  }\n\n",
                      "markdown": "`\n  // Describes what this matcher does.\n  void DescribeTo(::std::ostream* os) const override {\n    *os << \"contains at least one element that \";\n    this->inner_matcher_.DescribeTo(os);\n  }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock/gmock.h"
                },
                "region": {
                  "startLine": 5461,
                  "startColumn": 27,
                  "endLine": 5461,
                  "endColumn": 31,
                  "snippet": {
                    "text": "            UniversalPrint(*left, listener->stream());\n            *listener << \", \";\n            UniversalPrint(*right, listener->stream());\n            *listener << \") at index #\" << i << \" don't match\";\n            PrintIfNotEmpty(inner_listener.str(), listener->stream());\n            return false;\n          }\n",
                    "rendered": {
                      "text": "            UniversalPrint(*left, listener->stream());\n            *listener << \", \";\n            UniversalPrint(*right, listener->stream());\n            *listener << \") at index #\" << i << \" don't match\";\n            PrintIfNotEmpty(inner_listener.str(), listener->stream());\n            return false;\n          }\n",
                      "markdown": "`            UniversalPrint(*left, listener->stream());\n            *listener << \", \";\n            UniversalPrint(*right, listener->stream());\n            *listener << \") at index #\" << i << \" don't match\";\n            PrintIfNotEmpty(inner_listener.str(), listener->stream());\n            return false;\n          }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock/gmock.h"
                },
                "region": {
                  "startLine": 5429,
                  "startColumn": 44,
                  "endLine": 5429,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    }\n    void DescribeNegationTo(::std::ostream* os) const override {\n      *os << \"doesn't contain exactly \" << rhs_.size()\n          << \" values, or contains a value x at some index i\"\n          << \" where x and the i-th value of \";\n      UniversalPrint(rhs_, os);\n      *os << \" \";\n",
                    "rendered": {
                      "text": "    }\n    void DescribeNegationTo(::std::ostream* os) const override {\n      *os << \"doesn't contain exactly \" << rhs_.size()\n          << \" values, or contains a value x at some index i\"\n          << \" where x and the i-th value of \";\n      UniversalPrint(rhs_, os);\n      *os << \" \";\n",
                      "markdown": "`    }\n    void DescribeNegationTo(::std::ostream* os) const override {\n      *os << \"doesn't contain exactly \" << rhs_.size()\n          << \" values, or contains a value x at some index i\"\n          << \" where x and the i-th value of \";\n      UniversalPrint(rhs_, os);\n      *os << \" \";\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock/gmock.h"
                },
                "region": {
                  "startLine": 4176,
                  "startColumn": 49,
                  "endLine": 4176,
                  "endColumn": 53,
                  "snippet": {
                    "text": " public:\n  VariadicMatcher(const Args&... matchers)  // NOLINT\n      : matchers_(matchers...) {\n    static_assert(sizeof...(Args) > 0, \"Must have at least one matcher.\");\n  }\n\n  VariadicMatcher(const VariadicMatcher&) = default;\n",
                    "rendered": {
                      "text": " public:\n  VariadicMatcher(const Args&... matchers)  // NOLINT\n      : matchers_(matchers...) {\n    static_assert(sizeof...(Args) > 0, \"Must have at least one matcher.\");\n  }\n\n  VariadicMatcher(const VariadicMatcher&) = default;\n",
                      "markdown": "` public:\n  VariadicMatcher(const Args&... matchers)  // NOLINT\n      : matchers_(matchers...) {\n    static_assert(sizeof...(Args) > 0, \"Must have at least one matcher.\");\n  }\n\n  VariadicMatcher(const VariadicMatcher&) = default;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock/gmock.h"
                },
                "region": {
                  "startLine": 1752,
                  "startColumn": 37,
                  "endLine": 1752,
                  "endColumn": 41,
                  "snippet": {
                    "text": " public:\n  explicit ReturnRoundRobinAction(std::vector<T> values) {\n    GTEST_CHECK_(!values.empty())\n        << \"ReturnRoundRobin requires at least one element.\";\n    state_->values = std::move(values);\n  }\n\n",
                    "rendered": {
                      "text": " public:\n  explicit ReturnRoundRobinAction(std::vector<T> values) {\n    GTEST_CHECK_(!values.empty())\n        << \"ReturnRoundRobin requires at least one element.\";\n    state_->values = std::move(values);\n  }\n\n",
                      "markdown": "` public:\n  explicit ReturnRoundRobinAction(std::vector<T> values) {\n    GTEST_CHECK_(!values.empty())\n        << \"ReturnRoundRobin requires at least one element.\";\n    state_->values = std::move(values);\n  }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock/gmock.h"
                },
                "region": {
                  "startLine": 344,
                  "startColumn": 49,
                  "endLine": 344,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n#endif  // GOOGLEMOCK_INCLUDE_GMOCK_INTERNAL_CUSTOM_GMOCK_PORT_H_\n\n// For MS Visual C++, check the compiler version. At least VS 2015 is\n// required to compile Google Mock.\n#if defined(_MSC_VER) && _MSC_VER < 1900\n# error \"At least Visual C++ 2015 (14.0) is required to compile Google Mock.\"\n",
                    "rendered": {
                      "text": "\n#endif  // GOOGLEMOCK_INCLUDE_GMOCK_INTERNAL_CUSTOM_GMOCK_PORT_H_\n\n// For MS Visual C++, check the compiler version. At least VS 2015 is\n// required to compile Google Mock.\n#if defined(_MSC_VER) && _MSC_VER < 1900\n# error \"At least Visual C++ 2015 (14.0) is required to compile Google Mock.\"\n",
                      "markdown": "`\n#endif  // GOOGLEMOCK_INCLUDE_GMOCK_INTERNAL_CUSTOM_GMOCK_PORT_H_\n\n// For MS Visual C++, check the compiler version. At least VS 2015 is\n// required to compile Google Mock.\n#if defined(_MSC_VER) && _MSC_VER < 1900\n# error \"At least Visual C++ 2015 (14.0) is required to compile Google Mock.\"\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock/gmock.h"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 21,
                  "endLine": 168,
                  "endColumn": 30,
                  "snippet": {
                    "text": "// a new action, you should also consider implementing ActionInterface\n// or using MakePolymorphicAction() instead, especially if you need to\n// use the action a lot.  While these approaches require more work,\n// they give you more control on the types of the mock function\n// arguments and the action parameters, which in general leads to\n// better compiler error messages that pay off in the long run.  They\n// also allow overloading actions based on parameter types (as opposed\n",
                    "rendered": {
                      "text": "// a new action, you should also consider implementing ActionInterface\n// or using MakePolymorphicAction() instead, especially if you need to\n// use the action a lot.  While these approaches require more work,\n// they give you more control on the types of the mock function\n// arguments and the action parameters, which in general leads to\n// better compiler error messages that pay off in the long run.  They\n// also allow overloading actions based on parameter types (as opposed\n",
                      "markdown": "`// a new action, you should also consider implementing ActionInterface\n// or using MakePolymorphicAction() instead, especially if you need to\n// use the action a lot.  While these approaches require more work,\n// they give you more control on the types of the mock function\n// arguments and the action parameters, which in general leads to\n// better compiler error messages that pay off in the long run.  They\n// also allow overloading actions based on parameter types (as opposed\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock/gmock.h"
                },
                "region": {
                  "startLine": 9905,
                  "startColumn": 30,
                  "endLine": 9905,
                  "endColumn": 36,
                  "snippet": {
                    "text": "  // is_excessive is modified to indicate whether the call exceeds the\n  // expected number.\n  //\n  // Critical section: We must find the matching expectation and the\n  // corresponding action that needs to be taken in an ATOMIC\n  // transaction.  Otherwise another thread may call this mock\n  // method in the middle and mess up the state.\n",
                    "rendered": {
                      "text": "  // is_excessive is modified to indicate whether the call exceeds the\n  // expected number.\n  //\n  // Critical section: We must find the matching expectation and the\n  // corresponding action that needs to be taken in an ATOMIC\n  // transaction.  Otherwise another thread may call this mock\n  // method in the middle and mess up the state.\n",
                      "markdown": "`  // is_excessive is modified to indicate whether the call exceeds the\n  // expected number.\n  //\n  // Critical section: We must find the matching expectation and the\n  // corresponding action that needs to be taken in an ATOMIC\n  // transaction.  Otherwise another thread may call this mock\n  // method in the middle and mess up the state.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock/gmock.h"
                },
                "region": {
                  "startLine": 8626,
                  "startColumn": 46,
                  "endLine": 8626,
                  "endColumn": 52,
                  "snippet": {
                    "text": "  // Returns whether the mock was created as a naggy mock (default)\n  static bool IsNaggy(void* mock_obj)\n      GTEST_LOCK_EXCLUDED_(internal::g_gmock_mutex);\n  // Returns whether the mock was created as a nice mock\n  static bool IsNice(void* mock_obj)\n      GTEST_LOCK_EXCLUDED_(internal::g_gmock_mutex);\n  // Returns whether the mock was created as a strict mock\n",
                    "rendered": {
                      "text": "  // Returns whether the mock was created as a naggy mock (default)\n  static bool IsNaggy(void* mock_obj)\n      GTEST_LOCK_EXCLUDED_(internal::g_gmock_mutex);\n  // Returns whether the mock was created as a nice mock\n  static bool IsNice(void* mock_obj)\n      GTEST_LOCK_EXCLUDED_(internal::g_gmock_mutex);\n  // Returns whether the mock was created as a strict mock\n",
                      "markdown": "`  // Returns whether the mock was created as a naggy mock (default)\n  static bool IsNaggy(void* mock_obj)\n      GTEST_LOCK_EXCLUDED_(internal::g_gmock_mutex);\n  // Returns whether the mock was created as a nice mock\n  static bool IsNice(void* mock_obj)\n      GTEST_LOCK_EXCLUDED_(internal::g_gmock_mutex);\n  // Returns whether the mock was created as a strict mock\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock/gmock.h"
                },
                "region": {
                  "startLine": 4520,
                  "startColumn": 37,
                  "endLine": 4520,
                  "endColumn": 43,
                  "snippet": {
                    "text": "        }\n\n        if (listener->IsInterested()) {\n          *listener << \"which is \" << diff << \" from \" << expected_;\n        }\n        return false;\n      } else {\n",
                    "rendered": {
                      "text": "        }\n\n        if (listener->IsInterested()) {\n          *listener << \"which is \" << diff << \" from \" << expected_;\n        }\n        return false;\n      } else {\n",
                      "markdown": "`        }\n\n        if (listener->IsInterested()) {\n          *listener << \"which is \" << diff << \" from \" << expected_;\n        }\n        return false;\n      } else {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock/gmock.h"
                },
                "region": {
                  "startLine": 4514,
                  "startColumn": 23,
                  "endLine": 4514,
                  "endColumn": 29,
                  "snippet": {
                    "text": "          return true;\n        }\n\n        const FloatType diff = value - expected_;\n        if (::std::fabs(diff) <= max_abs_error_) {\n          return true;\n        }\n",
                    "rendered": {
                      "text": "          return true;\n        }\n\n        const FloatType diff = value - expected_;\n        if (::std::fabs(diff) <= max_abs_error_) {\n          return true;\n        }\n",
                      "markdown": "`          return true;\n        }\n\n        const FloatType diff = value - expected_;\n        if (::std::fabs(diff) <= max_abs_error_) {\n          return true;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/api.md"
                },
                "region": {
                  "startLine": 534,
                  "startColumn": 4,
                  "endLine": 534,
                  "endColumn": 8,
                  "snippet": {
                    "text": "`FMT_COMPILE` macro or the `_cf` user-defined literal defined in\nnamespace `fmt::literals`. Format strings marked with `FMT_COMPILE`\nor `_cf` are parsed, checked and converted into efficient formatting\ncode at compile-time. This supports arguments of built-in and string\ntypes as well as user-defined types with `format` functions taking\nthe format context type as a template parameter in their `formatter`\nspecializations. For example:\n",
                    "rendered": {
                      "text": "`FMT_COMPILE` macro or the `_cf` user-defined literal defined in\nnamespace `fmt::literals`. Format strings marked with `FMT_COMPILE`\nor `_cf` are parsed, checked and converted into efficient formatting\ncode at compile-time. This supports arguments of built-in and string\ntypes as well as user-defined types with `format` functions taking\nthe format context type as a template parameter in their `formatter`\nspecializations. For example:\n",
                      "markdown": "``FMT_COMPILE` macro or the `_cf` user-defined literal defined in\nnamespace `fmt::literals`. Format strings marked with `FMT_COMPILE`\nor `_cf` are parsed, checked and converted into efficient formatting\ncode at compile-time. This supports arguments of built-in and string\ntypes as well as user-defined types with `format` functions taking\nthe format context type as a template parameter in their `formatter`\nspecializations. For example:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/api.md"
                },
                "region": {
                  "startLine": 282,
                  "startColumn": 56,
                  "endLine": 282,
                  "endColumn": 60,
                  "snippet": {
                    "text": "\n::: arg(const Char*, const T&)\n\nNamed arguments are not supported in compile-time checks at the moment.\n\n### Type Erasure\n\n",
                    "rendered": {
                      "text": "\n::: arg(const Char*, const T&)\n\nNamed arguments are not supported in compile-time checks at the moment.\n\n### Type Erasure\n\n",
                      "markdown": "`\n::: arg(const Char*, const T&)\n\nNamed arguments are not supported in compile-time checks at the moment.\n\n### Type Erasure\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/api.md"
                },
                "region": {
                  "startLine": 214,
                  "startColumn": 20,
                  "endLine": 214,
                  "endColumn": 24,
                  "snippet": {
                    "text": "        -> format_context::iterator;\n    };\n\nIt is recommended to at least support fill, align and width that apply\nto the whole object and have the same semantics as in standard\nformatters.\n\n",
                    "rendered": {
                      "text": "        -> format_context::iterator;\n    };\n\nIt is recommended to at least support fill, align and width that apply\nto the whole object and have the same semantics as in standard\nformatters.\n\n",
                      "markdown": "`        -> format_context::iterator;\n    };\n\nIt is recommended to at least support fill, align and width that apply\nto the whole object and have the same semantics as in standard\nformatters.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/api.md"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 55,
                  "endLine": 106,
                  "endColumn": 64,
                  "snippet": {
                    "text": "      fmt::print(\"{}\\n\", kevin_namespacy::film::se7en); // Output: 7\n    }\n\nUsing specialization is more complex but gives you full control over\nparsing and formatting. To use this method specialize the `formatter`\nstruct template for your type and implement `parse` and `format`\nmethods.\n",
                    "rendered": {
                      "text": "      fmt::print(\"{}\\n\", kevin_namespacy::film::se7en); // Output: 7\n    }\n\nUsing specialization is more complex but gives you full control over\nparsing and formatting. To use this method specialize the `formatter`\nstruct template for your type and implement `parse` and `format`\nmethods.\n",
                      "markdown": "`      fmt::print(\"{}\\n\", kevin_namespacy::film::se7en); // Output: 7\n    }\n\nUsing specialization is more complex but gives you full control over\nparsing and formatting. To use this method specialize the `formatter`\nstruct template for your type and implement `parse` and `format`\nmethods.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/api.md"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 33,
                  "endLine": 47,
                  "endColumn": 37,
                  "snippet": {
                    "text": "surrounded by braces `{}`. The fields are replaced with formatted arguments\nin the resulting string. [`fmt::format_string`](#format_string) is a format\nstring which can be implicitly constructed from a string literal or a\n`constexpr` string and is checked at compile time in C++20. To pass a runtime\nformat string wrap it in [`fmt::runtime`](#runtime).\n\n*args* is an argument list representing objects to be formatted.\n",
                    "rendered": {
                      "text": "surrounded by braces `{}`. The fields are replaced with formatted arguments\nin the resulting string. [`fmt::format_string`](#format_string) is a format\nstring which can be implicitly constructed from a string literal or a\n`constexpr` string and is checked at compile time in C++20. To pass a runtime\nformat string wrap it in [`fmt::runtime`](#runtime).\n\n*args* is an argument list representing objects to be formatted.\n",
                      "markdown": "`surrounded by braces `{}`. The fields are replaced with formatted arguments\nin the resulting string. [`fmt::format_string`](#format_string) is a format\nstring which can be implicitly constructed from a string literal or a\n`constexpr` string and is checked at compile time in C++20. To pass a runtime\nformat string wrap it in [`fmt::runtime`](#runtime).\n\n*args* is an argument list representing objects to be formatted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/api.md"
                },
                "region": {
                  "startLine": 455,
                  "startColumn": 11,
                  "endLine": 455,
                  "endColumn": 17,
                  "snippet": {
                    "text": "::: join(std::initializer_list<T>, string_view)\n\n<a id=\"chrono-api\"></a>\n## Date and Time Formatting\n\n`fmt/chrono.h` provides formatters for\n\n",
                    "rendered": {
                      "text": "::: join(std::initializer_list<T>, string_view)\n\n<a id=\"chrono-api\"></a>\n## Date and Time Formatting\n\n`fmt/chrono.h` provides formatters for\n\n",
                      "markdown": "`::: join(std::initializer_list<T>, string_view)\n\n<a id=\"chrono-api\"></a>\n## Date and Time Formatting\n\n`fmt/chrono.h` provides formatters for\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/api.md"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 76,
                  "endLine": 78,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nThe {fmt} library provides formatters for many standard C++ types.\nSee [`fmt/ranges.h`](#ranges-api) for ranges and tuples including standard\ncontainers such as `std::vector`, [`fmt/chrono.h`](#chrono-api) for date and\ntime formatting and [`fmt/std.h`](#std-api) for other standard library types.\n\nThere are two ways to make a user-defined type formattable: providing a\n`format_as` function or specializing the `formatter` struct template.\n",
                    "rendered": {
                      "text": "\nThe {fmt} library provides formatters for many standard C++ types.\nSee [`fmt/ranges.h`](#ranges-api) for ranges and tuples including standard\ncontainers such as `std::vector`, [`fmt/chrono.h`](#chrono-api) for date and\ntime formatting and [`fmt/std.h`](#std-api) for other standard library types.\n\nThere are two ways to make a user-defined type formattable: providing a\n`format_as` function or specializing the `formatter` struct template.\n",
                      "markdown": "`\nThe {fmt} library provides formatters for many standard C++ types.\nSee [`fmt/ranges.h`](#ranges-api) for ranges and tuples including standard\ncontainers such as `std::vector`, [`fmt/chrono.h`](#chrono-api) for date and\ntime formatting and [`fmt/std.h`](#std-api) for other standard library types.\n\nThere are two ways to make a user-defined type formattable: providing a\n`format_as` function or specializing the `formatter` struct template.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/api.md"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 44,
                  "endLine": 47,
                  "endColumn": 50,
                  "snippet": {
                    "text": "surrounded by braces `{}`. The fields are replaced with formatted arguments\nin the resulting string. [`fmt::format_string`](#format_string) is a format\nstring which can be implicitly constructed from a string literal or a\n`constexpr` string and is checked at compile time in C++20. To pass a runtime\nformat string wrap it in [`fmt::runtime`](#runtime).\n\n*args* is an argument list representing objects to be formatted.\n",
                    "rendered": {
                      "text": "surrounded by braces `{}`. The fields are replaced with formatted arguments\nin the resulting string. [`fmt::format_string`](#format_string) is a format\nstring which can be implicitly constructed from a string literal or a\n`constexpr` string and is checked at compile time in C++20. To pass a runtime\nformat string wrap it in [`fmt::runtime`](#runtime).\n\n*args* is an argument list representing objects to be formatted.\n",
                      "markdown": "`surrounded by braces `{}`. The fields are replaced with formatted arguments\nin the resulting string. [`fmt::format_string`](#format_string) is a format\nstring which can be implicitly constructed from a string literal or a\n`constexpr` string and is checked at compile time in C++20. To pass a runtime\nformat string wrap it in [`fmt::runtime`](#runtime).\n\n*args* is an argument list representing objects to be formatted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/api.md"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 41,
                  "endLine": 10,
                  "endColumn": 47,
                  "snippet": {
                    "text": "- [`fmt/format.h`](#format-api): `fmt::format` and other formatting functions\n  as well as locale support\n- [`fmt/ranges.h`](#ranges-api): formatting of ranges and tuples\n- [`fmt/chrono.h`](#chrono-api): date and time formatting\n- [`fmt/std.h`](#std-api): formatters for standard library types\n- [`fmt/compile.h`](#compile-api): format string compilation\n- [`fmt/color.h`](#color-api): terminal colors and text styles\n",
                    "rendered": {
                      "text": "- [`fmt/format.h`](#format-api): `fmt::format` and other formatting functions\n  as well as locale support\n- [`fmt/ranges.h`](#ranges-api): formatting of ranges and tuples\n- [`fmt/chrono.h`](#chrono-api): date and time formatting\n- [`fmt/std.h`](#std-api): formatters for standard library types\n- [`fmt/compile.h`](#compile-api): format string compilation\n- [`fmt/color.h`](#color-api): terminal colors and text styles\n",
                      "markdown": "`- [`fmt/format.h`](#format-api): `fmt::format` and other formatting functions\n  as well as locale support\n- [`fmt/ranges.h`](#ranges-api): formatting of ranges and tuples\n- [`fmt/chrono.h`](#chrono-api): date and time formatting\n- [`fmt/std.h`](#std-api): formatters for standard library types\n- [`fmt/compile.h`](#compile-api): format string compilation\n- [`fmt/color.h`](#color-api): terminal colors and text styles\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/ChangeLog-old.md"
                },
                "region": {
                  "startLine": 3181,
                  "startColumn": 1,
                  "endLine": 3181,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n  Apart from a more natural syntax, this also improves performance as\n  there is no need to construct temporary formatter objects and\n  control arguments\\' lifetimes. Because the wrapper functions are\n  very lightweight, this doesn\\'t cause code bloat even in pre-C++11\n  mode.\n\n",
                    "rendered": {
                      "text": "\n  Apart from a more natural syntax, this also improves performance as\n  there is no need to construct temporary formatter objects and\n  control arguments\\' lifetimes. Because the wrapper functions are\n  very lightweight, this doesn\\'t cause code bloat even in pre-C++11\n  mode.\n\n",
                      "markdown": "`\n  Apart from a more natural syntax, this also improves performance as\n  there is no need to construct temporary formatter objects and\n  control arguments\\' lifetimes. Because the wrapper functions are\n  very lightweight, this doesn\\'t cause code bloat even in pre-C++11\n  mode.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/ChangeLog-old.md"
                },
                "region": {
                  "startLine": 2771,
                  "startColumn": 62,
                  "endLine": 2772,
                  "snippet": {
                    "text": "- Dependency on pthreads introduced by Google Test is now optional\n  (https://github.com/fmtlib/fmt/issues/185).\n\n- New CMake options `FMT_DOC`, `FMT_INSTALL` and `FMT_TEST` to control\n  generation of `doc`, `install` and `test` targets respectively, on\n  by default (https://github.com/fmtlib/fmt/issues/197,\n  https://github.com/fmtlib/fmt/issues/198,\n  https://github.com/fmtlib/fmt/issues/200). Thanks @maddinat0r.\n",
                    "rendered": {
                      "text": "- Dependency on pthreads introduced by Google Test is now optional\n  (https://github.com/fmtlib/fmt/issues/185).\n\n- New CMake options `FMT_DOC`, `FMT_INSTALL` and `FMT_TEST` to control\n  generation of `doc`, `install` and `test` targets respectively, on\n  by default (https://github.com/fmtlib/fmt/issues/197,\n  https://github.com/fmtlib/fmt/issues/198,\n  https://github.com/fmtlib/fmt/issues/200). Thanks @maddinat0r.\n",
                      "markdown": "`- Dependency on pthreads introduced by Google Test is now optional\n  (https://github.com/fmtlib/fmt/issues/185).\n\n- New CMake options `FMT_DOC`, `FMT_INSTALL` and `FMT_TEST` to control\n  generation of `doc`, `install` and `test` targets respectively, on\n  by default (https://github.com/fmtlib/fmt/issues/197,\n  https://github.com/fmtlib/fmt/issues/198,\n  https://github.com/fmtlib/fmt/issues/200). Thanks @maddinat0r.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/ChangeLog-old.md"
                },
                "region": {
                  "startLine": 2471,
                  "startColumn": 36,
                  "endLine": 2471,
                  "endColumn": 40,
                  "snippet": {
                    "text": "  but works via a proxy header which will be removed in the next major\n  version.\n\n  The documentation is now available at <https://fmt.dev>.\n\n- Added support for\n  [strftime](http://en.cppreference.com/w/cpp/chrono/c/strftime)-like\n",
                    "rendered": {
                      "text": "  but works via a proxy header which will be removed in the next major\n  version.\n\n  The documentation is now available at <https://fmt.dev>.\n\n- Added support for\n  [strftime](http://en.cppreference.com/w/cpp/chrono/c/strftime)-like\n",
                      "markdown": "`  but works via a proxy header which will be removed in the next major\n  version.\n\n  The documentation is now available at <https://fmt.dev>.\n\n- Added support for\n  [strftime](http://en.cppreference.com/w/cpp/chrono/c/strftime)-like\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/ChangeLog-old.md"
                },
                "region": {
                  "startLine": 1933,
                  "startColumn": 67,
                  "endLine": 1934,
                  "snippet": {
                    "text": "          handler.on_error(\"invalid type specifier\");\n\n  Compile-time checks require relaxed `constexpr` (C++14 feature)\n  support. If the latter is not available, checks will be performed at\n  runtime.\n\n- Separated format string parsing and formatting in the extension API\n  to enable compile-time format string processing. For example\n",
                    "rendered": {
                      "text": "          handler.on_error(\"invalid type specifier\");\n\n  Compile-time checks require relaxed `constexpr` (C++14 feature)\n  support. If the latter is not available, checks will be performed at\n  runtime.\n\n- Separated format string parsing and formatting in the extension API\n  to enable compile-time format string processing. For example\n",
                      "markdown": "`          handler.on_error(\"invalid type specifier\");\n\n  Compile-time checks require relaxed `constexpr` (C++14 feature)\n  support. If the latter is not available, checks will be performed at\n  runtime.\n\n- Separated format string parsing and formatting in the extension API\n  to enable compile-time format string processing. For example\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/ChangeLog-old.md"
                },
                "region": {
                  "startLine": 608,
                  "startColumn": 36,
                  "endLine": 608,
                  "endColumn": 45,
                  "snippet": {
                    "text": "- Fixed handling of `operator<<` overloads that use `copyfmt`\n  (https://github.com/fmtlib/fmt/issues/1666).\n\n- Added the `FMT_OS` CMake option to control inclusion of OS-specific\n  APIs in the fmt target. This can be useful for embedded platforms\n  (https://github.com/fmtlib/fmt/issues/1654,\n  https://github.com/fmtlib/fmt/pull/1656). Thanks @kwesolowski.\n",
                    "rendered": {
                      "text": "- Fixed handling of `operator<<` overloads that use `copyfmt`\n  (https://github.com/fmtlib/fmt/issues/1666).\n\n- Added the `FMT_OS` CMake option to control inclusion of OS-specific\n  APIs in the fmt target. This can be useful for embedded platforms\n  (https://github.com/fmtlib/fmt/issues/1654,\n  https://github.com/fmtlib/fmt/pull/1656). Thanks @kwesolowski.\n",
                      "markdown": "`- Fixed handling of `operator<<` overloads that use `copyfmt`\n  (https://github.com/fmtlib/fmt/issues/1666).\n\n- Added the `FMT_OS` CMake option to control inclusion of OS-specific\n  APIs in the fmt target. This can be useful for embedded platforms\n  (https://github.com/fmtlib/fmt/issues/1654,\n  https://github.com/fmtlib/fmt/pull/1656). Thanks @kwesolowski.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/ChangeLog-old.md"
                },
                "region": {
                  "startLine": 333,
                  "startColumn": 48,
                  "endLine": 333,
                  "endColumn": 57,
                  "snippet": {
                    "text": "  (https://github.com/fmtlib/fmt/issues/1778,\n  https://github.com/fmtlib/fmt/pull/1781). Thanks @kammce.\n\n- Added the `FMT_USE_INLINE_NAMESPACES` macro to control usage of\n  inline namespaces\n  (https://github.com/fmtlib/fmt/pull/1945). Thanks @darklukee.\n\n",
                    "rendered": {
                      "text": "  (https://github.com/fmtlib/fmt/issues/1778,\n  https://github.com/fmtlib/fmt/pull/1781). Thanks @kammce.\n\n- Added the `FMT_USE_INLINE_NAMESPACES` macro to control usage of\n  inline namespaces\n  (https://github.com/fmtlib/fmt/pull/1945). Thanks @darklukee.\n\n",
                      "markdown": "`  (https://github.com/fmtlib/fmt/issues/1778,\n  https://github.com/fmtlib/fmt/pull/1781). Thanks @kammce.\n\n- Added the `FMT_USE_INLINE_NAMESPACES` macro to control usage of\n  inline namespaces\n  (https://github.com/fmtlib/fmt/pull/1945). Thanks @darklukee.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/ChangeLog-old.md"
                },
                "region": {
                  "startLine": 327,
                  "startColumn": 22,
                  "endLine": 327,
                  "endColumn": 26,
                  "snippet": {
                    "text": "  Thanks @leolchat, @pepsiman, @Klaim, @ravijanjam, @francesco-st and @udnaan.\n\n- Added the `FMT_REDUCE_INT_INSTANTIATIONS` CMake option that reduces\n  the binary code size at the cost of some integer formatting\n  performance. This can be useful for extremely memory-constrained\n  embedded systems\n  (https://github.com/fmtlib/fmt/issues/1778,\n",
                    "rendered": {
                      "text": "  Thanks @leolchat, @pepsiman, @Klaim, @ravijanjam, @francesco-st and @udnaan.\n\n- Added the `FMT_REDUCE_INT_INSTANTIATIONS` CMake option that reduces\n  the binary code size at the cost of some integer formatting\n  performance. This can be useful for extremely memory-constrained\n  embedded systems\n  (https://github.com/fmtlib/fmt/issues/1778,\n",
                      "markdown": "`  Thanks @leolchat, @pepsiman, @Klaim, @ravijanjam, @francesco-st and @udnaan.\n\n- Added the `FMT_REDUCE_INT_INSTANTIATIONS` CMake option that reduces\n  the binary code size at the cost of some integer formatting\n  performance. This can be useful for extremely memory-constrained\n  embedded systems\n  (https://github.com/fmtlib/fmt/issues/1778,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/ChangeLog-old.md"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 47,
                  "endLine": 52,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\n  ![](https://user-images.githubusercontent.com/576385/95684665-11719600-0ba8-11eb-8e5b-972ff4e49428.png)\n\n  It is possible to get even better performance at the cost of larger\n  binary size by compiling with the `FMT_USE_FULL_CACHE_DRAGONBOX`\n  macro set to 1.\n\n",
                    "rendered": {
                      "text": "\n  ![](https://user-images.githubusercontent.com/576385/95684665-11719600-0ba8-11eb-8e5b-972ff4e49428.png)\n\n  It is possible to get even better performance at the cost of larger\n  binary size by compiling with the `FMT_USE_FULL_CACHE_DRAGONBOX`\n  macro set to 1.\n\n",
                      "markdown": "`\n  ![](https://user-images.githubusercontent.com/576385/95684665-11719600-0ba8-11eb-8e5b-972ff4e49428.png)\n\n  It is possible to get even better performance at the cost of larger\n  binary size by compiling with the `FMT_USE_FULL_CACHE_DRAGONBOX`\n  macro set to 1.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/ChangeLog-old.md"
                },
                "region": {
                  "startLine": 2858,
                  "startColumn": 1,
                  "endLine": 2858,
                  "endColumn": 6,
                  "snippet": {
                    "text": "  https://fmt.dev/2.0.0/usage.html#building-the-documentation)\n  section to the documentation.\n- Documentation build script is now compatible with Python 3 and newer\n  pip versions. (https://github.com/fmtlib/fmt/pull/189,\n  https://github.com/fmtlib/fmt/issues/209).\n  Thanks @JodiTheTigger and @xentec.\n- Documentation fixes and improvements\n",
                    "rendered": {
                      "text": "  https://fmt.dev/2.0.0/usage.html#building-the-documentation)\n  section to the documentation.\n- Documentation build script is now compatible with Python 3 and newer\n  pip versions. (https://github.com/fmtlib/fmt/pull/189,\n  https://github.com/fmtlib/fmt/issues/209).\n  Thanks @JodiTheTigger and @xentec.\n- Documentation fixes and improvements\n",
                      "markdown": "`  https://fmt.dev/2.0.0/usage.html#building-the-documentation)\n  section to the documentation.\n- Documentation build script is now compatible with Python 3 and newer\n  pip versions. (https://github.com/fmtlib/fmt/pull/189,\n  https://github.com/fmtlib/fmt/issues/209).\n  Thanks @JodiTheTigger and @xentec.\n- Documentation fixes and improvements\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/ChangeLog-old.md"
                },
                "region": {
                  "startLine": 2857,
                  "startColumn": 21,
                  "endLine": 2857,
                  "endColumn": 29,
                  "snippet": {
                    "text": "- Added [Building thedocumentation](\n  https://fmt.dev/2.0.0/usage.html#building-the-documentation)\n  section to the documentation.\n- Documentation build script is now compatible with Python 3 and newer\n  pip versions. (https://github.com/fmtlib/fmt/pull/189,\n  https://github.com/fmtlib/fmt/issues/209).\n  Thanks @JodiTheTigger and @xentec.\n",
                    "rendered": {
                      "text": "- Added [Building thedocumentation](\n  https://fmt.dev/2.0.0/usage.html#building-the-documentation)\n  section to the documentation.\n- Documentation build script is now compatible with Python 3 and newer\n  pip versions. (https://github.com/fmtlib/fmt/pull/189,\n  https://github.com/fmtlib/fmt/issues/209).\n  Thanks @JodiTheTigger and @xentec.\n",
                      "markdown": "`- Added [Building thedocumentation](\n  https://fmt.dev/2.0.0/usage.html#building-the-documentation)\n  section to the documentation.\n- Documentation build script is now compatible with Python 3 and newer\n  pip versions. (https://github.com/fmtlib/fmt/pull/189,\n  https://github.com/fmtlib/fmt/issues/209).\n  Thanks @JodiTheTigger and @xentec.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/ChangeLog-old.md"
                },
                "region": {
                  "startLine": 2834,
                  "startColumn": 12,
                  "endLine": 2834,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  [Ubuntu](https://launchpad.net/ubuntu/+source/cppformat) 15.10 and\n  later (https://github.com/fmtlib/fmt/issues/155):\n\n      $ sudo apt-get install libcppformat1-dev\n\n  Thanks @jackyf.\n\n",
                    "rendered": {
                      "text": "  [Ubuntu](https://launchpad.net/ubuntu/+source/cppformat) 15.10 and\n  later (https://github.com/fmtlib/fmt/issues/155):\n\n      $ sudo apt-get install libcppformat1-dev\n\n  Thanks @jackyf.\n\n",
                      "markdown": "`  [Ubuntu](https://launchpad.net/ubuntu/+source/cppformat) 15.10 and\n  later (https://github.com/fmtlib/fmt/issues/155):\n\n      $ sudo apt-get install libcppformat1-dev\n\n  Thanks @jackyf.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/ChangeLog-old.md"
                },
                "region": {
                  "startLine": 2647,
                  "startColumn": 16,
                  "endLine": 2647,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n# 2.0.1 - 2016-03-13\n\n- Improved CMake find and package support\n  (https://github.com/fmtlib/fmt/issues/264). Thanks @niosHD.\n- Fix compile error with Android NDK and mingw32\n  (https://github.com/fmtlib/fmt/issues/241). Thanks @Gachapen.\n",
                    "rendered": {
                      "text": "\n# 2.0.1 - 2016-03-13\n\n- Improved CMake find and package support\n  (https://github.com/fmtlib/fmt/issues/264). Thanks @niosHD.\n- Fix compile error with Android NDK and mingw32\n  (https://github.com/fmtlib/fmt/issues/241). Thanks @Gachapen.\n",
                      "markdown": "`\n# 2.0.1 - 2016-03-13\n\n- Improved CMake find and package support\n  (https://github.com/fmtlib/fmt/issues/264). Thanks @niosHD.\n- Fix compile error with Android NDK and mingw32\n  (https://github.com/fmtlib/fmt/issues/241). Thanks @Gachapen.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/ChangeLog-old.md"
                },
                "region": {
                  "startLine": 2548,
                  "startColumn": 17,
                  "endLine": 2549,
                  "snippet": {
                    "text": "  https://github.com/fmtlib/fmt/pull/312).\n  Thanks @dean0x7d and @speth.\n\n- Reduced compile time\n  (https://github.com/fmtlib/fmt/pull/243,\n  https://github.com/fmtlib/fmt/pull/249,\n  https://github.com/fmtlib/fmt/issues/317):\n\n",
                    "rendered": {
                      "text": "  https://github.com/fmtlib/fmt/pull/312).\n  Thanks @dean0x7d and @speth.\n\n- Reduced compile time\n  (https://github.com/fmtlib/fmt/pull/243,\n  https://github.com/fmtlib/fmt/pull/249,\n  https://github.com/fmtlib/fmt/issues/317):\n\n",
                      "markdown": "`  https://github.com/fmtlib/fmt/pull/312).\n  Thanks @dean0x7d and @speth.\n\n- Reduced compile time\n  (https://github.com/fmtlib/fmt/pull/243,\n  https://github.com/fmtlib/fmt/pull/249,\n  https://github.com/fmtlib/fmt/issues/317):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/ChangeLog-old.md"
                },
                "region": {
                  "startLine": 2475,
                  "startColumn": 11,
                  "endLine": 2476,
                  "snippet": {
                    "text": "\n- Added support for\n  [strftime](http://en.cppreference.com/w/cpp/chrono/c/strftime)-like\n  [date and time\n  formatting](https://fmt.dev/3.0.0/api.html#date-and-time-formatting)\n  (https://github.com/fmtlib/fmt/issues/283):\n\n  ```c++\n",
                    "rendered": {
                      "text": "\n- Added support for\n  [strftime](http://en.cppreference.com/w/cpp/chrono/c/strftime)-like\n  [date and time\n  formatting](https://fmt.dev/3.0.0/api.html#date-and-time-formatting)\n  (https://github.com/fmtlib/fmt/issues/283):\n\n  ```c++\n",
                      "markdown": "`\n- Added support for\n  [strftime](http://en.cppreference.com/w/cpp/chrono/c/strftime)-like\n  [date and time\n  formatting](https://fmt.dev/3.0.0/api.html#date-and-time-formatting)\n  (https://github.com/fmtlib/fmt/issues/283):\n\n  ```c++\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/ChangeLog-old.md"
                },
                "region": {
                  "startLine": 2458,
                  "startColumn": 61,
                  "endLine": 2458,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\n# 3.0.0 - 2016-05-07\n\n- The project has been renamed from C++ Format (cppformat) to fmt for\n  consistency with the used namespace and macro prefix\n  (https://github.com/fmtlib/fmt/issues/307). Library headers\n  are now located in the `fmt` directory:\n",
                    "rendered": {
                      "text": "\n# 3.0.0 - 2016-05-07\n\n- The project has been renamed from C++ Format (cppformat) to fmt for\n  consistency with the used namespace and macro prefix\n  (https://github.com/fmtlib/fmt/issues/307). Library headers\n  are now located in the `fmt` directory:\n",
                      "markdown": "`\n# 3.0.0 - 2016-05-07\n\n- The project has been renamed from C++ Format (cppformat) to fmt for\n  consistency with the used namespace and macro prefix\n  (https://github.com/fmtlib/fmt/issues/307). Library headers\n  are now located in the `fmt` directory:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/ChangeLog-old.md"
                },
                "region": {
                  "startLine": 2429,
                  "startColumn": 41,
                  "endLine": 2430,
                  "snippet": {
                    "text": "  (https://github.com/fmtlib/fmt/issues/353).\n- Fixed handling of `unsigned char` strings\n  (https://github.com/fmtlib/fmt/issues/373).\n- Corrected buffer growth when formatting time\n  (https://github.com/fmtlib/fmt/issues/367).\n- Removed warnings under MSVC and clang\n  (https://github.com/fmtlib/fmt/issues/318,\n  https://github.com/fmtlib/fmt/issues/250, also merged\n",
                    "rendered": {
                      "text": "  (https://github.com/fmtlib/fmt/issues/353).\n- Fixed handling of `unsigned char` strings\n  (https://github.com/fmtlib/fmt/issues/373).\n- Corrected buffer growth when formatting time\n  (https://github.com/fmtlib/fmt/issues/367).\n- Removed warnings under MSVC and clang\n  (https://github.com/fmtlib/fmt/issues/318,\n  https://github.com/fmtlib/fmt/issues/250, also merged\n",
                      "markdown": "`  (https://github.com/fmtlib/fmt/issues/353).\n- Fixed handling of `unsigned char` strings\n  (https://github.com/fmtlib/fmt/issues/373).\n- Corrected buffer growth when formatting time\n  (https://github.com/fmtlib/fmt/issues/367).\n- Removed warnings under MSVC and clang\n  (https://github.com/fmtlib/fmt/issues/318,\n  https://github.com/fmtlib/fmt/issues/250, also merged\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/ChangeLog-old.md"
                },
                "region": {
                  "startLine": 2127,
                  "startColumn": 56,
                  "endLine": 2127,
                  "endColumn": 61,
                  "snippet": {
                    "text": "  (https://github.com/fmtlib/fmt/pull/397). Thanks @chronoxor.\n\n- Moved `fmt/*.h` to `include/fmt/*.h` to prevent irrelevant files and\n  directories appearing on the include search paths when fmt is used\n  as a subproject and moved source files to the `src` directory.\n\n- Added qmake project file `support/fmt.pro`\n",
                    "rendered": {
                      "text": "  (https://github.com/fmtlib/fmt/pull/397). Thanks @chronoxor.\n\n- Moved `fmt/*.h` to `include/fmt/*.h` to prevent irrelevant files and\n  directories appearing on the include search paths when fmt is used\n  as a subproject and moved source files to the `src` directory.\n\n- Added qmake project file `support/fmt.pro`\n",
                      "markdown": "`  (https://github.com/fmtlib/fmt/pull/397). Thanks @chronoxor.\n\n- Moved `fmt/*.h` to `include/fmt/*.h` to prevent irrelevant files and\n  directories appearing on the include search paths when fmt is used\n  as a subproject and moved source files to the `src` directory.\n\n- Added qmake project file `support/fmt.pro`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/ChangeLog-old.md"
                },
                "region": {
                  "startLine": 2062,
                  "startColumn": 32,
                  "endLine": 2062,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\n  Thanks @Remotion.\n\n- Implemented `wchar_t` date and time formatting\n  (https://github.com/fmtlib/fmt/pull/712):\n\n  ```c++\n",
                    "rendered": {
                      "text": "\n  Thanks @Remotion.\n\n- Implemented `wchar_t` date and time formatting\n  (https://github.com/fmtlib/fmt/pull/712):\n\n  ```c++\n",
                      "markdown": "`\n  Thanks @Remotion.\n\n- Implemented `wchar_t` date and time formatting\n  (https://github.com/fmtlib/fmt/pull/712):\n\n  ```c++\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/ChangeLog-old.md"
                },
                "region": {
                  "startLine": 2016,
                  "startColumn": 14,
                  "endLine": 2016,
                  "endColumn": 20,
                  "snippet": {
                    "text": "  fmt::print(\"The answer is {}.\", 42);\n  ```\n\n  See [Compile time and code\n  bloat](https://github.com/fmtlib/fmt#compile-time-and-code-bloat).\n\n- Added the [make_format_args](\n",
                    "rendered": {
                      "text": "  fmt::print(\"The answer is {}.\", 42);\n  ```\n\n  See [Compile time and code\n  bloat](https://github.com/fmtlib/fmt#compile-time-and-code-bloat).\n\n- Added the [make_format_args](\n",
                      "markdown": "`  fmt::print(\"The answer is {}.\", 42);\n  ```\n\n  See [Compile time and code\n  bloat](https://github.com/fmtlib/fmt#compile-time-and-code-bloat).\n\n- Added the [make_format_args](\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/ChangeLog-old.md"
                },
                "region": {
                  "startLine": 1942,
                  "startColumn": 11,
                  "endLine": 1942,
                  "endColumn": 16,
                  "snippet": {
                    "text": "  ```c++\n  struct Answer {};\n\n  namespace fmt {\n  template <>\n  struct formatter<Answer> {\n    constexpr auto parse(parse_context& ctx) {\n",
                    "rendered": {
                      "text": "  ```c++\n  struct Answer {};\n\n  namespace fmt {\n  template <>\n  struct formatter<Answer> {\n    constexpr auto parse(parse_context& ctx) {\n",
                      "markdown": "`  ```c++\n  struct Answer {};\n\n  namespace fmt {\n  template <>\n  struct formatter<Answer> {\n    constexpr auto parse(parse_context& ctx) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/ChangeLog-old.md"
                },
                "region": {
                  "startLine": 1831,
                  "startColumn": 39,
                  "endLine": 1831,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\n  ```c++\n  #define FMT_EXTENDED_COLORS\n  #define FMT_HEADER_ONLY // or compile fmt with FMT_EXTENDED_COLORS defined\n  #include <fmt/format.h>\n\n  fmt::print(fmt::color::steel_blue, \"Some beautiful text\");\n",
                    "rendered": {
                      "text": "\n  ```c++\n  #define FMT_EXTENDED_COLORS\n  #define FMT_HEADER_ONLY // or compile fmt with FMT_EXTENDED_COLORS defined\n  #include <fmt/format.h>\n\n  fmt::print(fmt::color::steel_blue, \"Some beautiful text\");\n",
                      "markdown": "`\n  ```c++\n  #define FMT_EXTENDED_COLORS\n  #define FMT_HEADER_ONLY // or compile fmt with FMT_EXTENDED_COLORS defined\n  #include <fmt/format.h>\n\n  fmt::print(fmt::color::steel_blue, \"Some beautiful text\");\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/ChangeLog-old.md"
                },
                "region": {
                  "startLine": 1787,
                  "startColumn": 1,
                  "endLine": 1787,
                  "endColumn": 7,
                  "snippet": {
                    "text": "  https://github.com/fmtlib/fmt/pull/819). Thanks @MikePopoloski.\n\n- Reduced executable size overhead for embedded targets using newlib\n  nano by making locale dependency optional\n  (https://github.com/fmtlib/fmt/pull/839). Thanks @teajay-fr.\n\n- Keep `noexcept` specifier when exceptions are disabled\n",
                    "rendered": {
                      "text": "  https://github.com/fmtlib/fmt/pull/819). Thanks @MikePopoloski.\n\n- Reduced executable size overhead for embedded targets using newlib\n  nano by making locale dependency optional\n  (https://github.com/fmtlib/fmt/pull/839). Thanks @teajay-fr.\n\n- Keep `noexcept` specifier when exceptions are disabled\n",
                      "markdown": "`  https://github.com/fmtlib/fmt/pull/819). Thanks @MikePopoloski.\n\n- Reduced executable size overhead for embedded targets using newlib\n  nano by making locale dependency optional\n  (https://github.com/fmtlib/fmt/pull/839). Thanks @teajay-fr.\n\n- Keep `noexcept` specifier when exceptions are disabled\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/ChangeLog-old.md"
                },
                "region": {
                  "startLine": 1057,
                  "startColumn": 34,
                  "endLine": 1058,
                  "snippet": {
                    "text": "  [package](https://github.com/conda-forge/fmt-feedstock)\n  (https://github.com/fmtlib/fmt/pull/1410):\n\n      conda install -c conda-forge fmt\n\n  Thanks @tdegeus.\n\n- Added a CUDA test (https://github.com/fmtlib/fmt/pull/1285,\n",
                    "rendered": {
                      "text": "  [package](https://github.com/conda-forge/fmt-feedstock)\n  (https://github.com/fmtlib/fmt/pull/1410):\n\n      conda install -c conda-forge fmt\n\n  Thanks @tdegeus.\n\n- Added a CUDA test (https://github.com/fmtlib/fmt/pull/1285,\n",
                      "markdown": "`  [package](https://github.com/conda-forge/fmt-feedstock)\n  (https://github.com/fmtlib/fmt/pull/1410):\n\n      conda install -c conda-forge fmt\n\n  Thanks @tdegeus.\n\n- Added a CUDA test (https://github.com/fmtlib/fmt/pull/1285,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/ChangeLog-old.md"
                },
                "region": {
                  "startLine": 967,
                  "startColumn": 14,
                  "endLine": 967,
                  "endColumn": 20,
                  "snippet": {
                    "text": "  the output from different threads doesn\\'t interleave\n  (https://github.com/fmtlib/fmt/pull/1351). Thanks @tankiJong.\n\n- Made compile time in the header-only mode \\~20% faster by reducing\n  the number of template instantiations. `wchar_t` overload of\n  `vprint` was moved from `fmt/core.h` to `fmt/format.h`.\n\n",
                    "rendered": {
                      "text": "  the output from different threads doesn\\'t interleave\n  (https://github.com/fmtlib/fmt/pull/1351). Thanks @tankiJong.\n\n- Made compile time in the header-only mode \\~20% faster by reducing\n  the number of template instantiations. `wchar_t` overload of\n  `vprint` was moved from `fmt/core.h` to `fmt/format.h`.\n\n",
                      "markdown": "`  the output from different threads doesn\\'t interleave\n  (https://github.com/fmtlib/fmt/pull/1351). Thanks @tankiJong.\n\n- Made compile time in the header-only mode \\~20% faster by reducing\n  the number of template instantiations. `wchar_t` overload of\n  `vprint` was moved from `fmt/core.h` to `fmt/format.h`.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/ChangeLog-old.md"
                },
                "region": {
                  "startLine": 927,
                  "startColumn": 3,
                  "endLine": 927,
                  "endColumn": 8,
                  "snippet": {
                    "text": "  | ostrstream    | 1,195.74  | 1.13x   |\n  | sprintf       | 995.08    | 1.35x   |\n  | doubleconv    | 99.10     | 13.59x  |\n  | fmt           | 88.34     | 15.24x  |\n\n  ![](https://user-images.githubusercontent.com/576385/69767160-cdaca400-112f-11ea-9fc5-347c9f83caad.png)\n\n",
                    "rendered": {
                      "text": "  | ostrstream    | 1,195.74  | 1.13x   |\n  | sprintf       | 995.08    | 1.35x   |\n  | doubleconv    | 99.10     | 13.59x  |\n  | fmt           | 88.34     | 15.24x  |\n\n  ![](https://user-images.githubusercontent.com/576385/69767160-cdaca400-112f-11ea-9fc5-347c9f83caad.png)\n\n",
                      "markdown": "`  | ostrstream    | 1,195.74  | 1.13x   |\n  | sprintf       | 995.08    | 1.35x   |\n  | doubleconv    | 99.10     | 13.59x  |\n  | fmt           | 88.34     | 15.24x  |\n\n  ![](https://user-images.githubusercontent.com/576385/69767160-cdaca400-112f-11ea-9fc5-347c9f83caad.png)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/ChangeLog-old.md"
                },
                "region": {
                  "startLine": 921,
                  "startColumn": 19,
                  "endLine": 921,
                  "endColumn": 25,
                  "snippet": {
                    "text": "  than `printf` and 10% faster than double-conversion on\n  [dtoa-benchmark](https://github.com/fmtlib/dtoa-benchmark):\n\n  | Function      | Time (ns) | Speedup |\n  | ------------- | --------: | ------: |\n  | ostringstream | 1,346.30  | 1.00x   |\n  | ostrstream    | 1,195.74  | 1.13x   |\n",
                    "rendered": {
                      "text": "  than `printf` and 10% faster than double-conversion on\n  [dtoa-benchmark](https://github.com/fmtlib/dtoa-benchmark):\n\n  | Function      | Time (ns) | Speedup |\n  | ------------- | --------: | ------: |\n  | ostringstream | 1,346.30  | 1.00x   |\n  | ostrstream    | 1,195.74  | 1.13x   |\n",
                      "markdown": "`  than `printf` and 10% faster than double-conversion on\n  [dtoa-benchmark](https://github.com/fmtlib/dtoa-benchmark):\n\n  | Function      | Time (ns) | Speedup |\n  | ------------- | --------: | ------: |\n  | ostringstream | 1,346.30  | 1.00x   |\n  | ostrstream    | 1,195.74  | 1.13x   |\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/ChangeLog-old.md"
                },
                "region": {
                  "startLine": 609,
                  "startColumn": 13,
                  "endLine": 609,
                  "endColumn": 18,
                  "snippet": {
                    "text": "  (https://github.com/fmtlib/fmt/issues/1666).\n\n- Added the `FMT_OS` CMake option to control inclusion of OS-specific\n  APIs in the fmt target. This can be useful for embedded platforms\n  (https://github.com/fmtlib/fmt/issues/1654,\n  https://github.com/fmtlib/fmt/pull/1656). Thanks @kwesolowski.\n\n",
                    "rendered": {
                      "text": "  (https://github.com/fmtlib/fmt/issues/1666).\n\n- Added the `FMT_OS` CMake option to control inclusion of OS-specific\n  APIs in the fmt target. This can be useful for embedded platforms\n  (https://github.com/fmtlib/fmt/issues/1654,\n  https://github.com/fmtlib/fmt/pull/1656). Thanks @kwesolowski.\n\n",
                      "markdown": "`  (https://github.com/fmtlib/fmt/issues/1666).\n\n- Added the `FMT_OS` CMake option to control inclusion of OS-specific\n  APIs in the fmt target. This can be useful for embedded platforms\n  (https://github.com/fmtlib/fmt/issues/1654,\n  https://github.com/fmtlib/fmt/pull/1656). Thanks @kwesolowski.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/ChangeLog-old.md"
                },
                "region": {
                  "startLine": 473,
                  "startColumn": 32,
                  "endLine": 473,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      c++ -c test.cc -I include -std=c++17  0.24s user 0.06s system 98% cpu 0.301 total\n\n  It is still recommended to use `fmt/core.h` instead of\n  `fmt/format.h` but the compile time difference is now smaller.\n  Thanks @alex3d for the suggestion.\n\n- Named arguments are now stored on stack (no dynamic memory\n",
                    "rendered": {
                      "text": "      c++ -c test.cc -I include -std=c++17  0.24s user 0.06s system 98% cpu 0.301 total\n\n  It is still recommended to use `fmt/core.h` instead of\n  `fmt/format.h` but the compile time difference is now smaller.\n  Thanks @alex3d for the suggestion.\n\n- Named arguments are now stored on stack (no dynamic memory\n",
                      "markdown": "`      c++ -c test.cc -I include -std=c++17  0.24s user 0.06s system 98% cpu 0.301 total\n\n  It is still recommended to use `fmt/core.h` instead of\n  `fmt/format.h` but the compile time difference is now smaller.\n  Thanks @alex3d for the suggestion.\n\n- Named arguments are now stored on stack (no dynamic memory\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/ChangeLog-old.md"
                },
                "region": {
                  "startLine": 469,
                  "startColumn": 7,
                  "endLine": 469,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n  After (default):\n\n      % time c++ -c test.cc -I include -std=c++17\n      c++ -c test.cc -I include -std=c++17  0.24s user 0.06s system 98% cpu 0.301 total\n\n  It is still recommended to use `fmt/core.h` instead of\n",
                    "rendered": {
                      "text": "\n  After (default):\n\n      % time c++ -c test.cc -I include -std=c++17\n      c++ -c test.cc -I include -std=c++17  0.24s user 0.06s system 98% cpu 0.301 total\n\n  It is still recommended to use `fmt/core.h` instead of\n",
                      "markdown": "`\n  After (default):\n\n      % time c++ -c test.cc -I include -std=c++17\n      c++ -c test.cc -I include -std=c++17  0.24s user 0.06s system 98% cpu 0.301 total\n\n  It is still recommended to use `fmt/core.h` instead of\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/ChangeLog-old.md"
                },
                "region": {
                  "startLine": 464,
                  "startColumn": 7,
                  "endLine": 464,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n  Before (default):\n\n      % time c++ -c test.cc -I include -std=c++17\n      c++ -c test.cc -I include -std=c++17  0.53s user 0.06s system 98% cpu 0.601 total\n\n  After (default):\n",
                    "rendered": {
                      "text": "\n  Before (default):\n\n      % time c++ -c test.cc -I include -std=c++17\n      c++ -c test.cc -I include -std=c++17  0.53s user 0.06s system 98% cpu 0.601 total\n\n  After (default):\n",
                      "markdown": "`\n  Before (default):\n\n      % time c++ -c test.cc -I include -std=c++17\n      c++ -c test.cc -I include -std=c++17  0.53s user 0.06s system 98% cpu 0.601 total\n\n  After (default):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/ChangeLog-old.md"
                },
                "region": {
                  "startLine": 459,
                  "startColumn": 7,
                  "endLine": 459,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n  After (`-O2`):\n\n      % time c++ -c test.cc -I include -std=c++17 -O2\n      c++ -c test.cc -I include -std=c++17 -O2  0.26s user 0.04s system 98% cpu 0.303 total\n\n  Before (default):\n",
                    "rendered": {
                      "text": "\n  After (`-O2`):\n\n      % time c++ -c test.cc -I include -std=c++17 -O2\n      c++ -c test.cc -I include -std=c++17 -O2  0.26s user 0.04s system 98% cpu 0.303 total\n\n  Before (default):\n",
                      "markdown": "`\n  After (`-O2`):\n\n      % time c++ -c test.cc -I include -std=c++17 -O2\n      c++ -c test.cc -I include -std=c++17 -O2  0.26s user 0.04s system 98% cpu 0.303 total\n\n  Before (default):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/ChangeLog-old.md"
                },
                "region": {
                  "startLine": 454,
                  "startColumn": 7,
                  "endLine": 454,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n  Before (`-O2`):\n\n      % time c++ -c test.cc -I include -std=c++17 -O2\n      c++ -c test.cc -I include -std=c++17 -O2  2.22s user 0.08s system 99% cpu 2.311 total\n\n  After (`-O2`):\n",
                    "rendered": {
                      "text": "\n  Before (`-O2`):\n\n      % time c++ -c test.cc -I include -std=c++17 -O2\n      c++ -c test.cc -I include -std=c++17 -O2  2.22s user 0.08s system 99% cpu 2.311 total\n\n  After (`-O2`):\n",
                      "markdown": "`\n  Before (`-O2`):\n\n      % time c++ -c test.cc -I include -std=c++17 -O2\n      c++ -c test.cc -I include -std=c++17 -O2  2.22s user 0.08s system 99% cpu 2.311 total\n\n  After (`-O2`):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/ChangeLog-old.md"
                },
                "region": {
                  "startLine": 448,
                  "startColumn": 33,
                  "endLine": 448,
                  "endColumn": 39,
                  "snippet": {
                    "text": "- Applied extern templates to improve compile times when using the\n  core API and `fmt/format.h`\n  (https://github.com/fmtlib/fmt/issues/1452). For example,\n  on macOS with clang the compile time of a test translation unit\n  dropped from 2.3s to 0.3s with `-O2` and from 0.6s to 0.3s with the\n  default settings (`-O0`).\n\n",
                    "rendered": {
                      "text": "- Applied extern templates to improve compile times when using the\n  core API and `fmt/format.h`\n  (https://github.com/fmtlib/fmt/issues/1452). For example,\n  on macOS with clang the compile time of a test translation unit\n  dropped from 2.3s to 0.3s with `-O2` and from 0.6s to 0.3s with the\n  default settings (`-O0`).\n\n",
                      "markdown": "`- Applied extern templates to improve compile times when using the\n  core API and `fmt/format.h`\n  (https://github.com/fmtlib/fmt/issues/1452). For example,\n  on macOS with clang the compile time of a test translation unit\n  dropped from 2.3s to 0.3s with `-O2` and from 0.6s to 0.3s with the\n  default settings (`-O0`).\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/ChangeLog-old.md"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 19,
                  "endLine": 84,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n  int main() {\n    auto now = std::chrono::system_clock::now();\n    fmt::print(\"The time is {:%H:%M:%S}.\\n\", now);\n  }\n  ```\n\n",
                    "rendered": {
                      "text": "\n  int main() {\n    auto now = std::chrono::system_clock::now();\n    fmt::print(\"The time is {:%H:%M:%S}.\\n\", now);\n  }\n  ```\n\n",
                      "markdown": "`\n  int main() {\n    auto now = std::chrono::system_clock::now();\n    fmt::print(\"The time is {:%H:%M:%S}.\\n\", now);\n  }\n  ```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/syntax.md"
                },
                "region": {
                  "startLine": 703,
                  "startColumn": 32,
                  "endLine": 703,
                  "endColumn": 38,
                  "snippet": {
                    "text": "</table>\n\nSpecifiers that have a calendaric component such as `'d'` (the day of month)\nare valid only for `std::tm` and time points but not durations.\n\nThe available padding modifiers (*padding_modifier*) are:\n\n",
                    "rendered": {
                      "text": "</table>\n\nSpecifiers that have a calendaric component such as `'d'` (the day of month)\nare valid only for `std::tm` and time points but not durations.\n\nThe available padding modifiers (*padding_modifier*) are:\n\n",
                      "markdown": "`</table>\n\nSpecifiers that have a calendaric component such as `'d'` (the day of month)\nare valid only for `std::tm` and time points but not durations.\n\nThe available padding modifiers (*padding_modifier*) are:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/syntax.md"
                },
                "region": {
                  "startLine": 692,
                  "startColumn": 38,
                  "endLine": 692,
                  "endColumn": 44,
                  "snippet": {
                    "text": "<tr>\n  <td><code>'Z'</code></td>\n  <td>\n    The time zone abbreviation. If the time zone abbreviation is not available,\n    an exception of type <code>format_error</code> is thrown.\n  </td>\n</tr>\n",
                    "rendered": {
                      "text": "<tr>\n  <td><code>'Z'</code></td>\n  <td>\n    The time zone abbreviation. If the time zone abbreviation is not available,\n    an exception of type <code>format_error</code> is thrown.\n  </td>\n</tr>\n",
                      "markdown": "`<tr>\n  <td><code>'Z'</code></td>\n  <td>\n    The time zone abbreviation. If the time zone abbreviation is not available,\n    an exception of type <code>format_error</code> is thrown.\n  </td>\n</tr>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/syntax.md"
                },
                "region": {
                  "startLine": 692,
                  "startColumn": 7,
                  "endLine": 692,
                  "endColumn": 13,
                  "snippet": {
                    "text": "<tr>\n  <td><code>'Z'</code></td>\n  <td>\n    The time zone abbreviation. If the time zone abbreviation is not available,\n    an exception of type <code>format_error</code> is thrown.\n  </td>\n</tr>\n",
                    "rendered": {
                      "text": "<tr>\n  <td><code>'Z'</code></td>\n  <td>\n    The time zone abbreviation. If the time zone abbreviation is not available,\n    an exception of type <code>format_error</code> is thrown.\n  </td>\n</tr>\n",
                      "markdown": "`<tr>\n  <td><code>'Z'</code></td>\n  <td>\n    The time zone abbreviation. If the time zone abbreviation is not available,\n    an exception of type <code>format_error</code> is thrown.\n  </td>\n</tr>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/syntax.md"
                },
                "region": {
                  "startLine": 657,
                  "startColumn": 52,
                  "endLine": 657,
                  "endColumn": 58,
                  "snippet": {
                    "text": "  <td><code>'X'</code></td>\n  <td>\n    The time representation, e.g. \"10:04:00\". The modified command\n    <code>%EX</code> produces the locale's alternate time representation.\n  </td>\n</tr>\n<tr>\n",
                    "rendered": {
                      "text": "  <td><code>'X'</code></td>\n  <td>\n    The time representation, e.g. \"10:04:00\". The modified command\n    <code>%EX</code> produces the locale's alternate time representation.\n  </td>\n</tr>\n<tr>\n",
                      "markdown": "`  <td><code>'X'</code></td>\n  <td>\n    The time representation, e.g. \"10:04:00\". The modified command\n    <code>%EX</code> produces the locale's alternate time representation.\n  </td>\n</tr>\n<tr>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/syntax.md"
                },
                "region": {
                  "startLine": 656,
                  "startColumn": 7,
                  "endLine": 656,
                  "endColumn": 13,
                  "snippet": {
                    "text": "<tr>\n  <td><code>'X'</code></td>\n  <td>\n    The time representation, e.g. \"10:04:00\". The modified command\n    <code>%EX</code> produces the locale's alternate time representation.\n  </td>\n</tr>\n",
                    "rendered": {
                      "text": "<tr>\n  <td><code>'X'</code></td>\n  <td>\n    The time representation, e.g. \"10:04:00\". The modified command\n    <code>%EX</code> produces the locale's alternate time representation.\n  </td>\n</tr>\n",
                      "markdown": "`<tr>\n  <td><code>'X'</code></td>\n  <td>\n    The time representation, e.g. \"10:04:00\". The modified command\n    <code>%EX</code> produces the locale's alternate time representation.\n  </td>\n</tr>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/syntax.md"
                },
                "region": {
                  "startLine": 463,
                  "startColumn": 3,
                  "endLine": 463,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  <td>\n    The date and time representation, e.g. \"Sat Nov 12 22:04:00 1955\". The\n    modified command <code>%Ec</code> produces the locale's alternate date and\n    time representation.\n  </td>\n</tr>\n<tr>\n",
                    "rendered": {
                      "text": "  <td>\n    The date and time representation, e.g. \"Sat Nov 12 22:04:00 1955\". The\n    modified command <code>%Ec</code> produces the locale's alternate date and\n    time representation.\n  </td>\n</tr>\n<tr>\n",
                      "markdown": "`  <td>\n    The date and time representation, e.g. \"Sat Nov 12 22:04:00 1955\". The\n    modified command <code>%Ec</code> produces the locale's alternate date and\n    time representation.\n  </td>\n</tr>\n<tr>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/syntax.md"
                },
                "region": {
                  "startLine": 461,
                  "startColumn": 16,
                  "endLine": 461,
                  "endColumn": 22,
                  "snippet": {
                    "text": "<tr>\n  <td><code>'c'</code></td>\n  <td>\n    The date and time representation, e.g. \"Sat Nov 12 22:04:00 1955\". The\n    modified command <code>%Ec</code> produces the locale's alternate date and\n    time representation.\n  </td>\n",
                    "rendered": {
                      "text": "<tr>\n  <td><code>'c'</code></td>\n  <td>\n    The date and time representation, e.g. \"Sat Nov 12 22:04:00 1955\". The\n    modified command <code>%Ec</code> produces the locale's alternate date and\n    time representation.\n  </td>\n",
                      "markdown": "`<tr>\n  <td><code>'c'</code></td>\n  <td>\n    The date and time representation, e.g. \"Sat Nov 12 22:04:00 1955\". The\n    modified command <code>%Ec</code> produces the locale's alternate date and\n    time representation.\n  </td>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/syntax.md"
                },
                "region": {
                  "startLine": 399,
                  "startColumn": 45,
                  "endLine": 399,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\n## Chrono Format Specifications\n\nFormat specifications for chrono duration and time point types as well as\n`std::tm` have the following syntax:\n\n<a id=\"chrono-format-spec\"></a>\n",
                    "rendered": {
                      "text": "\n## Chrono Format Specifications\n\nFormat specifications for chrono duration and time point types as well as\n`std::tm` have the following syntax:\n\n<a id=\"chrono-format-spec\"></a>\n",
                      "markdown": "`\n## Chrono Format Specifications\n\nFormat specifications for chrono duration and time point types as well as\n`std::tm` have the following syntax:\n\n<a id=\"chrono-format-spec\"></a>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/std-test.cc"
                },
                "region": {
                  "startLine": 399,
                  "startColumn": 41,
                  "endLine": 399,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\nTEST(std_test, format_shared_ptr) {\n  std::shared_ptr<int> sp(new int(1));\n  EXPECT_EQ(fmt::format(\"{}\", fmt::ptr(sp.get())),\n            fmt::format(\"{}\", fmt::ptr(sp)));\n}\n\n",
                    "rendered": {
                      "text": "\nTEST(std_test, format_shared_ptr) {\n  std::shared_ptr<int> sp(new int(1));\n  EXPECT_EQ(fmt::format(\"{}\", fmt::ptr(sp.get())),\n            fmt::format(\"{}\", fmt::ptr(sp)));\n}\n\n",
                      "markdown": "`\nTEST(std_test, format_shared_ptr) {\n  std::shared_ptr<int> sp(new int(1));\n  EXPECT_EQ(fmt::format(\"{}\", fmt::ptr(sp.get())),\n            fmt::format(\"{}\", fmt::ptr(sp)));\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/std-test.cc"
                },
                "region": {
                  "startLine": 393,
                  "startColumn": 43,
                  "endLine": 393,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    void operator()(int* p) const { delete p; }\n  };\n  std::unique_ptr<int, custom_deleter> upcd(new int(1));\n  EXPECT_EQ(fmt::format(\"{}\", fmt::ptr(upcd.get())),\n            fmt::format(\"{}\", fmt::ptr(upcd)));\n}\n\n",
                    "rendered": {
                      "text": "    void operator()(int* p) const { delete p; }\n  };\n  std::unique_ptr<int, custom_deleter> upcd(new int(1));\n  EXPECT_EQ(fmt::format(\"{}\", fmt::ptr(upcd.get())),\n            fmt::format(\"{}\", fmt::ptr(upcd)));\n}\n\n",
                      "markdown": "`    void operator()(int* p) const { delete p; }\n  };\n  std::unique_ptr<int, custom_deleter> upcd(new int(1));\n  EXPECT_EQ(fmt::format(\"{}\", fmt::ptr(upcd.get())),\n            fmt::format(\"{}\", fmt::ptr(upcd)));\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/std-test.cc"
                },
                "region": {
                  "startLine": 387,
                  "startColumn": 41,
                  "endLine": 387,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\nTEST(std_test, format_unique_ptr) {\n  std::unique_ptr<int> up(new int(1));\n  EXPECT_EQ(fmt::format(\"{}\", fmt::ptr(up.get())),\n            fmt::format(\"{}\", fmt::ptr(up)));\n  struct custom_deleter {\n    void operator()(int* p) const { delete p; }\n",
                    "rendered": {
                      "text": "\nTEST(std_test, format_unique_ptr) {\n  std::unique_ptr<int> up(new int(1));\n  EXPECT_EQ(fmt::format(\"{}\", fmt::ptr(up.get())),\n            fmt::format(\"{}\", fmt::ptr(up)));\n  struct custom_deleter {\n    void operator()(int* p) const { delete p; }\n",
                      "markdown": "`\nTEST(std_test, format_unique_ptr) {\n  std::unique_ptr<int> up(new int(1));\n  EXPECT_EQ(fmt::format(\"{}\", fmt::ptr(up.get())),\n            fmt::format(\"{}\", fmt::ptr(up)));\n  struct custom_deleter {\n    void operator()(int* p) const { delete p; }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/std-test.cc"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 15,
                  "endLine": 220,
                  "snippet": {
                    "text": "    return formatter<string_view>::format(str, ctx);\n  }\n};\n}  // namespace fmt\n\nTEST(std_test, variant) {\n#ifdef __cpp_lib_variant\n  EXPECT_EQ(fmt::format(\"{}\", std::monostate{}), \"monostate\");\n",
                    "rendered": {
                      "text": "    return formatter<string_view>::format(str, ctx);\n  }\n};\n}  // namespace fmt\n\nTEST(std_test, variant) {\n#ifdef __cpp_lib_variant\n  EXPECT_EQ(fmt::format(\"{}\", std::monostate{}), \"monostate\");\n",
                      "markdown": "`    return formatter<string_view>::format(str, ctx);\n  }\n};\n}  // namespace fmt\n\nTEST(std_test, variant) {\n#ifdef __cpp_lib_variant\n  EXPECT_EQ(fmt::format(\"{}\", std::monostate{}), \"monostate\");\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/std-test.cc"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 9,
                  "endLine": 211,
                  "endColumn": 14,
                  "snippet": {
                    "text": "  throws_on_move(const throws_on_move&) = default;\n};\n\nnamespace fmt {\ntemplate <> struct formatter<throws_on_move> : formatter<string_view> {\n  auto format(const throws_on_move&, format_context& ctx) const\n      -> decltype(ctx.out()) {\n",
                    "rendered": {
                      "text": "  throws_on_move(const throws_on_move&) = default;\n};\n\nnamespace fmt {\ntemplate <> struct formatter<throws_on_move> : formatter<string_view> {\n  auto format(const throws_on_move&, format_context& ctx) const\n      -> decltype(ctx.out()) {\n",
                      "markdown": "`  throws_on_move(const throws_on_move&) = default;\n};\n\nnamespace fmt {\ntemplate <> struct formatter<throws_on_move> : formatter<string_view> {\n  auto format(const throws_on_move&, format_context& ctx) const\n      -> decltype(ctx.out()) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/Vagrantfile"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 11,
                  "endLine": 14,
                  "snippet": {
                    "text": "  end\n\n  config.vm.provision \"shell\", inline: <<-SHELL\n    apt-get update\n    apt-get install -y g++ make wget git\n    wget -q https://github.com/Kitware/CMake/releases/download/v3.26.0/cmake-3.26.0-Linux-x86_64.tar.gz\n    tar xzf cmake-3.26.0-Linux-x86_64.tar.gz\n    ln -s `pwd`/cmake-3.26.0-Linux-x86_64/bin/cmake /usr/local/bin\n",
                    "rendered": {
                      "text": "  end\n\n  config.vm.provision \"shell\", inline: <<-SHELL\n    apt-get update\n    apt-get install -y g++ make wget git\n    wget -q https://github.com/Kitware/CMake/releases/download/v3.26.0/cmake-3.26.0-Linux-x86_64.tar.gz\n    tar xzf cmake-3.26.0-Linux-x86_64.tar.gz\n    ln -s `pwd`/cmake-3.26.0-Linux-x86_64/bin/cmake /usr/local/bin\n",
                      "markdown": "`  end\n\n  config.vm.provision \"shell\", inline: <<-SHELL\n    apt-get update\n    apt-get install -y g++ make wget git\n    wget -q https://github.com/Kitware/CMake/releases/download/v3.26.0/cmake-3.26.0-Linux-x86_64.tar.gz\n    tar xzf cmake-3.26.0-Linux-x86_64.tar.gz\n    ln -s `pwd`/cmake-3.26.0-Linux-x86_64/bin/cmake /usr/local/bin\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/Vagrantfile"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 3,
                  "endLine": 16,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    apt-get update\n    apt-get install -y g++ make wget git\n    wget -q https://github.com/Kitware/CMake/releases/download/v3.26.0/cmake-3.26.0-Linux-x86_64.tar.gz\n    tar xzf cmake-3.26.0-Linux-x86_64.tar.gz\n    ln -s `pwd`/cmake-3.26.0-Linux-x86_64/bin/cmake /usr/local/bin\n  SHELL\nend\n",
                    "rendered": {
                      "text": "    apt-get update\n    apt-get install -y g++ make wget git\n    wget -q https://github.com/Kitware/CMake/releases/download/v3.26.0/cmake-3.26.0-Linux-x86_64.tar.gz\n    tar xzf cmake-3.26.0-Linux-x86_64.tar.gz\n    ln -s `pwd`/cmake-3.26.0-Linux-x86_64/bin/cmake /usr/local/bin\n  SHELL\nend\n",
                      "markdown": "`    apt-get update\n    apt-get install -y g++ make wget git\n    wget -q https://github.com/Kitware/CMake/releases/download/v3.26.0/cmake-3.26.0-Linux-x86_64.tar.gz\n    tar xzf cmake-3.26.0-Linux-x86_64.tar.gz\n    ln -s `pwd`/cmake-3.26.0-Linux-x86_64/bin/cmake /usr/local/bin\n  SHELL\nend\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/Vagrantfile"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 3,
                  "endLine": 15,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  config.vm.provision \"shell\", inline: <<-SHELL\n    apt-get update\n    apt-get install -y g++ make wget git\n    wget -q https://github.com/Kitware/CMake/releases/download/v3.26.0/cmake-3.26.0-Linux-x86_64.tar.gz\n    tar xzf cmake-3.26.0-Linux-x86_64.tar.gz\n    ln -s `pwd`/cmake-3.26.0-Linux-x86_64/bin/cmake /usr/local/bin\n  SHELL\n",
                    "rendered": {
                      "text": "  config.vm.provision \"shell\", inline: <<-SHELL\n    apt-get update\n    apt-get install -y g++ make wget git\n    wget -q https://github.com/Kitware/CMake/releases/download/v3.26.0/cmake-3.26.0-Linux-x86_64.tar.gz\n    tar xzf cmake-3.26.0-Linux-x86_64.tar.gz\n    ln -s `pwd`/cmake-3.26.0-Linux-x86_64/bin/cmake /usr/local/bin\n  SHELL\n",
                      "markdown": "`  config.vm.provision \"shell\", inline: <<-SHELL\n    apt-get update\n    apt-get install -y g++ make wget git\n    wget -q https://github.com/Kitware/CMake/releases/download/v3.26.0/cmake-3.26.0-Linux-x86_64.tar.gz\n    tar xzf cmake-3.26.0-Linux-x86_64.tar.gz\n    ln -s `pwd`/cmake-3.26.0-Linux-x86_64/bin/cmake /usr/local/bin\n  SHELL\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/Vagrantfile"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 31,
                  "endLine": 14,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n  config.vm.provision \"shell\", inline: <<-SHELL\n    apt-get update\n    apt-get install -y g++ make wget git\n    wget -q https://github.com/Kitware/CMake/releases/download/v3.26.0/cmake-3.26.0-Linux-x86_64.tar.gz\n    tar xzf cmake-3.26.0-Linux-x86_64.tar.gz\n    ln -s `pwd`/cmake-3.26.0-Linux-x86_64/bin/cmake /usr/local/bin\n",
                    "rendered": {
                      "text": "\n  config.vm.provision \"shell\", inline: <<-SHELL\n    apt-get update\n    apt-get install -y g++ make wget git\n    wget -q https://github.com/Kitware/CMake/releases/download/v3.26.0/cmake-3.26.0-Linux-x86_64.tar.gz\n    tar xzf cmake-3.26.0-Linux-x86_64.tar.gz\n    ln -s `pwd`/cmake-3.26.0-Linux-x86_64/bin/cmake /usr/local/bin\n",
                      "markdown": "`\n  config.vm.provision \"shell\", inline: <<-SHELL\n    apt-get update\n    apt-get install -y g++ make wget git\n    wget -q https://github.com/Kitware/CMake/releases/download/v3.26.0/cmake-3.26.0-Linux-x86_64.tar.gz\n    tar xzf cmake-3.26.0-Linux-x86_64.tar.gz\n    ln -s `pwd`/cmake-3.26.0-Linux-x86_64/bin/cmake /usr/local/bin\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/Vagrantfile"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 3,
                  "endLine": 14,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n  config.vm.provision \"shell\", inline: <<-SHELL\n    apt-get update\n    apt-get install -y g++ make wget git\n    wget -q https://github.com/Kitware/CMake/releases/download/v3.26.0/cmake-3.26.0-Linux-x86_64.tar.gz\n    tar xzf cmake-3.26.0-Linux-x86_64.tar.gz\n    ln -s `pwd`/cmake-3.26.0-Linux-x86_64/bin/cmake /usr/local/bin\n",
                    "rendered": {
                      "text": "\n  config.vm.provision \"shell\", inline: <<-SHELL\n    apt-get update\n    apt-get install -y g++ make wget git\n    wget -q https://github.com/Kitware/CMake/releases/download/v3.26.0/cmake-3.26.0-Linux-x86_64.tar.gz\n    tar xzf cmake-3.26.0-Linux-x86_64.tar.gz\n    ln -s `pwd`/cmake-3.26.0-Linux-x86_64/bin/cmake /usr/local/bin\n",
                      "markdown": "`\n  config.vm.provision \"shell\", inline: <<-SHELL\n    apt-get update\n    apt-get install -y g++ make wget git\n    wget -q https://github.com/Kitware/CMake/releases/download/v3.26.0/cmake-3.26.0-Linux-x86_64.tar.gz\n    tar xzf cmake-3.26.0-Linux-x86_64.tar.gz\n    ln -s `pwd`/cmake-3.26.0-Linux-x86_64/bin/cmake /usr/local/bin\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/Vagrantfile"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 3,
                  "endLine": 13,
                  "endColumn": 12,
                  "snippet": {
                    "text": "  end\n\n  config.vm.provision \"shell\", inline: <<-SHELL\n    apt-get update\n    apt-get install -y g++ make wget git\n    wget -q https://github.com/Kitware/CMake/releases/download/v3.26.0/cmake-3.26.0-Linux-x86_64.tar.gz\n    tar xzf cmake-3.26.0-Linux-x86_64.tar.gz\n",
                    "rendered": {
                      "text": "  end\n\n  config.vm.provision \"shell\", inline: <<-SHELL\n    apt-get update\n    apt-get install -y g++ make wget git\n    wget -q https://github.com/Kitware/CMake/releases/download/v3.26.0/cmake-3.26.0-Linux-x86_64.tar.gz\n    tar xzf cmake-3.26.0-Linux-x86_64.tar.gz\n",
                      "markdown": "`  end\n\n  config.vm.provision \"shell\", inline: <<-SHELL\n    apt-get update\n    apt-get install -y g++ make wget git\n    wget -q https://github.com/Kitware/CMake/releases/download/v3.26.0/cmake-3.26.0-Linux-x86_64.tar.gz\n    tar xzf cmake-3.26.0-Linux-x86_64.tar.gz\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/Vagrantfile"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 11,
                  "endLine": 1,
                  "endColumn": 17,
                  "snippet": {
                    "text": "# -*- mode: ruby -*-\n# vi: set ft=ruby :\n\n# A vagrant config for testing against gcc-4.8.\n",
                    "rendered": {
                      "text": "# -*- mode: ruby -*-\n# vi: set ft=ruby :\n\n# A vagrant config for testing against gcc-4.8.\n",
                      "markdown": "`# -*- mode: ruby -*-\n# vi: set ft=ruby :\n\n# A vagrant config for testing against gcc-4.8.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 14220,
                  "startColumn": 46,
                  "endLine": 14220,
                  "endColumn": 51,
                  "snippet": {
                    "text": "// of this object.\nInSequence::~InSequence() {\n  if (sequence_created_) {\n    delete internal::g_gmock_implicit_sequence.get();\n    internal::g_gmock_implicit_sequence.set(nullptr);\n  }\n}\n",
                    "rendered": {
                      "text": "// of this object.\nInSequence::~InSequence() {\n  if (sequence_created_) {\n    delete internal::g_gmock_implicit_sequence.get();\n    internal::g_gmock_implicit_sequence.set(nullptr);\n  }\n}\n",
                      "markdown": "`// of this object.\nInSequence::~InSequence() {\n  if (sequence_created_) {\n    delete internal::g_gmock_implicit_sequence.get();\n    internal::g_gmock_implicit_sequence.set(nullptr);\n  }\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 14208,
                  "startColumn": 41,
                  "endLine": 14208,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n// Creates the implicit sequence if there isn't one.\nInSequence::InSequence() {\n  if (internal::g_gmock_implicit_sequence.get() == nullptr) {\n    internal::g_gmock_implicit_sequence.set(new Sequence);\n    sequence_created_ = true;\n  } else {\n",
                    "rendered": {
                      "text": "\n// Creates the implicit sequence if there isn't one.\nInSequence::InSequence() {\n  if (internal::g_gmock_implicit_sequence.get() == nullptr) {\n    internal::g_gmock_implicit_sequence.set(new Sequence);\n    sequence_created_ = true;\n  } else {\n",
                      "markdown": "`\n// Creates the implicit sequence if there isn't one.\nInSequence::InSequence() {\n  if (internal::g_gmock_implicit_sequence.get() == nullptr) {\n    internal::g_gmock_implicit_sequence.set(new Sequence);\n    sequence_created_ = true;\n  } else {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 13482,
                  "startColumn": 58,
                  "endLine": 13482,
                  "endColumn": 63,
                  "snippet": {
                    "text": "    for (ExpectationSet::const_iterator it =\n             exp->immediate_prerequisites_.begin();\n         it != exp->immediate_prerequisites_.end(); ++it) {\n      const ExpectationBase* next = it->expectation_base().get();\n\n      if (next->IsSatisfied()) {\n        // If *it is satisfied and has a call count of 0, some of its\n",
                    "rendered": {
                      "text": "    for (ExpectationSet::const_iterator it =\n             exp->immediate_prerequisites_.begin();\n         it != exp->immediate_prerequisites_.end(); ++it) {\n      const ExpectationBase* next = it->expectation_base().get();\n\n      if (next->IsSatisfied()) {\n        // If *it is satisfied and has a call count of 0, some of its\n",
                      "markdown": "`    for (ExpectationSet::const_iterator it =\n             exp->immediate_prerequisites_.begin();\n         it != exp->immediate_prerequisites_.end(); ++it) {\n      const ExpectationBase* next = it->expectation_base().get();\n\n      if (next->IsSatisfied()) {\n        // If *it is satisfied and has a call count of 0, some of its\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 13462,
                  "startColumn": 58,
                  "endLine": 13462,
                  "endColumn": 63,
                  "snippet": {
                    "text": "    for (ExpectationSet::const_iterator it =\n             exp->immediate_prerequisites_.begin();\n         it != exp->immediate_prerequisites_.end(); ++it) {\n      const ExpectationBase* next = it->expectation_base().get();\n      if (!next->IsSatisfied()) return false;\n      expectations.push_back(next);\n    }\n",
                    "rendered": {
                      "text": "    for (ExpectationSet::const_iterator it =\n             exp->immediate_prerequisites_.begin();\n         it != exp->immediate_prerequisites_.end(); ++it) {\n      const ExpectationBase* next = it->expectation_base().get();\n      if (!next->IsSatisfied()) return false;\n      expectations.push_back(next);\n    }\n",
                      "markdown": "`    for (ExpectationSet::const_iterator it =\n             exp->immediate_prerequisites_.begin();\n         it != exp->immediate_prerequisites_.end(); ++it) {\n      const ExpectationBase* next = it->expectation_base().get();\n      if (!next->IsSatisfied()) return false;\n      expectations.push_back(next);\n    }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 13440,
                  "startColumn": 52,
                  "endLine": 13440,
                  "endColumn": 57,
                  "snippet": {
                    "text": "    for (ExpectationSet::const_iterator it =\n             exp->immediate_prerequisites_.begin();\n         it != exp->immediate_prerequisites_.end(); ++it) {\n      ExpectationBase* next = it->expectation_base().get();\n      if (!next->is_retired()) {\n        next->Retire();\n        expectations.push_back(next);\n",
                    "rendered": {
                      "text": "    for (ExpectationSet::const_iterator it =\n             exp->immediate_prerequisites_.begin();\n         it != exp->immediate_prerequisites_.end(); ++it) {\n      ExpectationBase* next = it->expectation_base().get();\n      if (!next->is_retired()) {\n        next->Retire();\n        expectations.push_back(next);\n",
                      "markdown": "`    for (ExpectationSet::const_iterator it =\n             exp->immediate_prerequisites_.begin();\n         it != exp->immediate_prerequisites_.end(); ++it) {\n      ExpectationBase* next = it->expectation_base().get();\n      if (!next->is_retired()) {\n        next->Retire();\n        expectations.push_back(next);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 10895,
                  "startColumn": 28,
                  "endLine": 10895,
                  "endColumn": 33,
                  "snippet": {
                    "text": "                      thread_local_instance->NewValueForCurrentThread())))\n              .first;\n    }\n    return value_pos->second.get();\n  }\n\n  static void OnThreadLocalDestroyed(\n",
                    "rendered": {
                      "text": "                      thread_local_instance->NewValueForCurrentThread())))\n              .first;\n    }\n    return value_pos->second.get();\n  }\n\n  static void OnThreadLocalDestroyed(\n",
                      "markdown": "`                      thread_local_instance->NewValueForCurrentThread())))\n              .first;\n    }\n    return value_pos->second.get();\n  }\n\n  static void OnThreadLocalDestroyed(\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 10855,
                  "startColumn": 44,
                  "endLine": 10855,
                  "endColumn": 49,
                  "snippet": {
                    "text": "}\n\nvoid ThreadWithParamBase::Join() {\n  GTEST_CHECK_(::WaitForSingleObject(thread_.Get(), INFINITE) == WAIT_OBJECT_0)\n      << \"Failed to join the thread with error \" << ::GetLastError() << \".\";\n}\n\n",
                    "rendered": {
                      "text": "}\n\nvoid ThreadWithParamBase::Join() {\n  GTEST_CHECK_(::WaitForSingleObject(thread_.Get(), INFINITE) == WAIT_OBJECT_0)\n      << \"Failed to join the thread with error \" << ::GetLastError() << \".\";\n}\n\n",
                      "markdown": "`}\n\nvoid ThreadWithParamBase::Join() {\n  GTEST_CHECK_(::WaitForSingleObject(thread_.Get(), INFINITE) == WAIT_OBJECT_0)\n      << \"Failed to join the thread with error \" << ::GetLastError() << \".\";\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 10667,
                  "startColumn": 34,
                  "endLine": 10667,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\nvoid Notification::WaitForNotification() {\n  GTEST_CHECK_(\n      ::WaitForSingleObject(event_.Get(), INFINITE) == WAIT_OBJECT_0);\n}\n\nMutex::Mutex()\n",
                    "rendered": {
                      "text": "\nvoid Notification::WaitForNotification() {\n  GTEST_CHECK_(\n      ::WaitForSingleObject(event_.Get(), INFINITE) == WAIT_OBJECT_0);\n}\n\nMutex::Mutex()\n",
                      "markdown": "`\nvoid Notification::WaitForNotification() {\n  GTEST_CHECK_(\n      ::WaitForSingleObject(event_.Get(), INFINITE) == WAIT_OBJECT_0);\n}\n\nMutex::Mutex()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 10662,
                  "startColumn": 32,
                  "endLine": 10662,
                  "endColumn": 37,
                  "snippet": {
                    "text": "}\n\nvoid Notification::Notify() {\n  GTEST_CHECK_(::SetEvent(event_.Get()) != FALSE);\n}\n\nvoid Notification::WaitForNotification() {\n",
                    "rendered": {
                      "text": "}\n\nvoid Notification::Notify() {\n  GTEST_CHECK_(::SetEvent(event_.Get()) != FALSE);\n}\n\nvoid Notification::WaitForNotification() {\n",
                      "markdown": "`}\n\nvoid Notification::Notify() {\n  GTEST_CHECK_(::SetEvent(event_.Get()) != FALSE);\n}\n\nvoid Notification::WaitForNotification() {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 10658,
                  "startColumn": 21,
                  "endLine": 10658,
                  "endColumn": 26,
                  "snippet": {
                    "text": "                           TRUE,        // Do not reset automatically.\n                           FALSE,       // Initially unset.\n                           nullptr)) {  // Anonymous event.\n  GTEST_CHECK_(event_.Get() != nullptr);\n}\n\nvoid Notification::Notify() {\n",
                    "rendered": {
                      "text": "                           TRUE,        // Do not reset automatically.\n                           FALSE,       // Initially unset.\n                           nullptr)) {  // Anonymous event.\n  GTEST_CHECK_(event_.Get() != nullptr);\n}\n\nvoid Notification::Notify() {\n",
                      "markdown": "`                           TRUE,        // Do not reset automatically.\n                           FALSE,       // Initially unset.\n                           nullptr)) {  // Anonymous event.\n  GTEST_CHECK_(event_.Get() != nullptr);\n}\n\nvoid Notification::Notify() {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 9787,
                  "startColumn": 46,
                  "endLine": 9787,
                  "endColumn": 51,
                  "snippet": {
                    "text": "  const HANDLE event_handle = reinterpret_cast<HANDLE>(event_handle_as_size_t);\n  HANDLE dup_event_handle;\n\n  if (!::DuplicateHandle(parent_process_handle.Get(), event_handle,\n                         ::GetCurrentProcess(), &dup_event_handle,\n                         0x0,\n                         FALSE,\n",
                    "rendered": {
                      "text": "  const HANDLE event_handle = reinterpret_cast<HANDLE>(event_handle_as_size_t);\n  HANDLE dup_event_handle;\n\n  if (!::DuplicateHandle(parent_process_handle.Get(), event_handle,\n                         ::GetCurrentProcess(), &dup_event_handle,\n                         0x0,\n                         FALSE,\n",
                      "markdown": "`  const HANDLE event_handle = reinterpret_cast<HANDLE>(event_handle_as_size_t);\n  HANDLE dup_event_handle;\n\n  if (!::DuplicateHandle(parent_process_handle.Get(), event_handle,\n                         ::GetCurrentProcess(), &dup_event_handle,\n                         0x0,\n                         FALSE,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 9772,
                  "startColumn": 46,
                  "endLine": 9772,
                  "endColumn": 51,
                  "snippet": {
                    "text": "  // The newly initialized handle is accessible only in the parent\n  // process. To obtain one accessible within the child, we need to use\n  // DuplicateHandle.\n  if (!::DuplicateHandle(parent_process_handle.Get(), write_handle,\n                         ::GetCurrentProcess(), &dup_write_handle,\n                         0x0,    // Requested privileges ignored since\n                                 // DUPLICATE_SAME_ACCESS is used.\n",
                    "rendered": {
                      "text": "  // The newly initialized handle is accessible only in the parent\n  // process. To obtain one accessible within the child, we need to use\n  // DuplicateHandle.\n  if (!::DuplicateHandle(parent_process_handle.Get(), write_handle,\n                         ::GetCurrentProcess(), &dup_write_handle,\n                         0x0,    // Requested privileges ignored since\n                                 // DUPLICATE_SAME_ACCESS is used.\n",
                      "markdown": "`  // The newly initialized handle is accessible only in the parent\n  // process. To obtain one accessible within the child, we need to use\n  // DuplicateHandle.\n  if (!::DuplicateHandle(parent_process_handle.Get(), write_handle,\n                         ::GetCurrentProcess(), &dup_write_handle,\n                         0x0,    // Requested privileges ignored since\n                                 // DUPLICATE_SAME_ACCESS is used.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 9758,
                  "startColumn": 27,
                  "endLine": 9758,
                  "endColumn": 32,
                  "snippet": {
                    "text": "  AutoHandle parent_process_handle(::OpenProcess(PROCESS_DUP_HANDLE,\n                                                   FALSE,  // Non-inheritable.\n                                                   parent_process_id));\n  if (parent_process_handle.Get() == INVALID_HANDLE_VALUE) {\n    DeathTestAbort(\"Unable to open parent process \" +\n                   StreamableToString(parent_process_id));\n  }\n",
                    "rendered": {
                      "text": "  AutoHandle parent_process_handle(::OpenProcess(PROCESS_DUP_HANDLE,\n                                                   FALSE,  // Non-inheritable.\n                                                   parent_process_id));\n  if (parent_process_handle.Get() == INVALID_HANDLE_VALUE) {\n    DeathTestAbort(\"Unable to open parent process \" +\n                   StreamableToString(parent_process_id));\n  }\n",
                      "markdown": "`  AutoHandle parent_process_handle(::OpenProcess(PROCESS_DUP_HANDLE,\n                                                   FALSE,  // Non-inheritable.\n                                                   parent_process_id));\n  if (parent_process_handle.Get() == INVALID_HANDLE_VALUE) {\n    DeathTestAbort(\"Unable to open parent process \" +\n                   StreamableToString(parent_process_id));\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 9001,
                  "startColumn": 69,
                  "endLine": 9001,
                  "endColumn": 74,
                  "snippet": {
                    "text": "      // Windows platforms.\n      // See http://msdn.microsoft.com/en-us/library/tcxf1dw6.aspx.\n      \"|\" + StreamableToString(reinterpret_cast<size_t>(write_handle)) +\n      \"|\" + StreamableToString(reinterpret_cast<size_t>(event_handle_.Get()));\n\n  char executable_path[_MAX_PATH + 1];  // NOLINT\n  GTEST_DEATH_TEST_CHECK_(_MAX_PATH + 1 != ::GetModuleFileNameA(nullptr,\n",
                    "rendered": {
                      "text": "      // Windows platforms.\n      // See http://msdn.microsoft.com/en-us/library/tcxf1dw6.aspx.\n      \"|\" + StreamableToString(reinterpret_cast<size_t>(write_handle)) +\n      \"|\" + StreamableToString(reinterpret_cast<size_t>(event_handle_.Get()));\n\n  char executable_path[_MAX_PATH + 1];  // NOLINT\n  GTEST_DEATH_TEST_CHECK_(_MAX_PATH + 1 != ::GetModuleFileNameA(nullptr,\n",
                      "markdown": "`      // Windows platforms.\n      // See http://msdn.microsoft.com/en-us/library/tcxf1dw6.aspx.\n      \"|\" + StreamableToString(reinterpret_cast<size_t>(write_handle)) +\n      \"|\" + StreamableToString(reinterpret_cast<size_t>(event_handle_.Get()));\n\n  char executable_path[_MAX_PATH + 1];  // NOLINT\n  GTEST_DEATH_TEST_CHECK_(_MAX_PATH + 1 != ::GetModuleFileNameA(nullptr,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 8988,
                  "startColumn": 39,
                  "endLine": 8988,
                  "endColumn": 44,
                  "snippet": {
                    "text": "      TRUE,       // The event will automatically reset to non-signaled state.\n      FALSE,      // The initial state is non-signalled.\n      nullptr));  // The even is unnamed.\n  GTEST_DEATH_TEST_CHECK_(event_handle_.Get() != nullptr);\n  const std::string filter_flag = std::string(\"--\") + GTEST_FLAG_PREFIX_ +\n                                  kFilterFlag + \"=\" + info->test_suite_name() +\n                                  \".\" + info->name();\n",
                    "rendered": {
                      "text": "      TRUE,       // The event will automatically reset to non-signaled state.\n      FALSE,      // The initial state is non-signalled.\n      nullptr));  // The even is unnamed.\n  GTEST_DEATH_TEST_CHECK_(event_handle_.Get() != nullptr);\n  const std::string filter_flag = std::string(\"--\") + GTEST_FLAG_PREFIX_ +\n                                  kFilterFlag + \"=\" + info->test_suite_name() +\n                                  \".\" + info->name();\n",
                      "markdown": "`      TRUE,       // The event will automatically reset to non-signaled state.\n      FALSE,      // The initial state is non-signalled.\n      nullptr));  // The even is unnamed.\n  GTEST_DEATH_TEST_CHECK_(event_handle_.Get() != nullptr);\n  const std::string filter_flag = std::string(\"--\") + GTEST_FLAG_PREFIX_ +\n                                  kFilterFlag + \"=\" + info->test_suite_name() +\n                                  \".\" + info->name();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 8946,
                  "startColumn": 40,
                  "endLine": 8946,
                  "endColumn": 45,
                  "snippet": {
                    "text": "                                             INFINITE));\n  DWORD status_code;\n  GTEST_DEATH_TEST_CHECK_(\n      ::GetExitCodeProcess(child_handle_.Get(), &status_code) != FALSE);\n  child_handle_.Reset();\n  set_status(static_cast<int>(status_code));\n  return status();\n",
                    "rendered": {
                      "text": "                                             INFINITE));\n  DWORD status_code;\n  GTEST_DEATH_TEST_CHECK_(\n      ::GetExitCodeProcess(child_handle_.Get(), &status_code) != FALSE);\n  child_handle_.Reset();\n  set_status(static_cast<int>(status_code));\n  return status();\n",
                      "markdown": "`                                             INFINITE));\n  DWORD status_code;\n  GTEST_DEATH_TEST_CHECK_(\n      ::GetExitCodeProcess(child_handle_.Get(), &status_code) != FALSE);\n  child_handle_.Reset();\n  set_status(static_cast<int>(status_code));\n  return status();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 8942,
                  "startColumn": 58,
                  "endLine": 8942,
                  "endColumn": 63,
                  "snippet": {
                    "text": "  // whether previous calls to WaitForMultipleObjects synchronized on this\n  // handle or not.\n  GTEST_DEATH_TEST_CHECK_(\n      WAIT_OBJECT_0 == ::WaitForSingleObject(child_handle_.Get(),\n                                             INFINITE));\n  DWORD status_code;\n  GTEST_DEATH_TEST_CHECK_(\n",
                    "rendered": {
                      "text": "  // whether previous calls to WaitForMultipleObjects synchronized on this\n  // handle or not.\n  GTEST_DEATH_TEST_CHECK_(\n      WAIT_OBJECT_0 == ::WaitForSingleObject(child_handle_.Get(),\n                                             INFINITE));\n  DWORD status_code;\n  GTEST_DEATH_TEST_CHECK_(\n",
                      "markdown": "`  // whether previous calls to WaitForMultipleObjects synchronized on this\n  // handle or not.\n  GTEST_DEATH_TEST_CHECK_(\n      WAIT_OBJECT_0 == ::WaitForSingleObject(child_handle_.Get(),\n                                             INFINITE));\n  DWORD status_code;\n  GTEST_DEATH_TEST_CHECK_(\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 8918,
                  "startColumn": 69,
                  "endLine": 8918,
                  "endColumn": 74,
                  "snippet": {
                    "text": "\n  // Wait until the child either signals that it has acquired the write end\n  // of the pipe or it dies.\n  const HANDLE wait_handles[2] = { child_handle_.Get(), event_handle_.Get() };\n  switch (::WaitForMultipleObjects(2,\n                                   wait_handles,\n                                   FALSE,  // Waits for any of the handles.\n",
                    "rendered": {
                      "text": "\n  // Wait until the child either signals that it has acquired the write end\n  // of the pipe or it dies.\n  const HANDLE wait_handles[2] = { child_handle_.Get(), event_handle_.Get() };\n  switch (::WaitForMultipleObjects(2,\n                                   wait_handles,\n                                   FALSE,  // Waits for any of the handles.\n",
                      "markdown": "`\n  // Wait until the child either signals that it has acquired the write end\n  // of the pipe or it dies.\n  const HANDLE wait_handles[2] = { child_handle_.Get(), event_handle_.Get() };\n  switch (::WaitForMultipleObjects(2,\n                                   wait_handles,\n                                   FALSE,  // Waits for any of the handles.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 8918,
                  "startColumn": 48,
                  "endLine": 8918,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n  // Wait until the child either signals that it has acquired the write end\n  // of the pipe or it dies.\n  const HANDLE wait_handles[2] = { child_handle_.Get(), event_handle_.Get() };\n  switch (::WaitForMultipleObjects(2,\n                                   wait_handles,\n                                   FALSE,  // Waits for any of the handles.\n",
                    "rendered": {
                      "text": "\n  // Wait until the child either signals that it has acquired the write end\n  // of the pipe or it dies.\n  const HANDLE wait_handles[2] = { child_handle_.Get(), event_handle_.Get() };\n  switch (::WaitForMultipleObjects(2,\n                                   wait_handles,\n                                   FALSE,  // Waits for any of the handles.\n",
                      "markdown": "`\n  // Wait until the child either signals that it has acquired the write end\n  // of the pipe or it dies.\n  const HANDLE wait_handles[2] = { child_handle_.Get(), event_handle_.Get() };\n  switch (::WaitForMultipleObjects(2,\n                                   wait_handles,\n                                   FALSE,  // Waits for any of the handles.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 7261,
                  "startColumn": 36,
                  "endLine": 7261,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n#if GTEST_HAS_DEATH_TEST\n  in_subprocess_for_death_test =\n      (internal_run_death_test_flag_.get() != nullptr);\n# if defined(GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_)\n  if (in_subprocess_for_death_test) {\n    GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_();\n",
                    "rendered": {
                      "text": "\n#if GTEST_HAS_DEATH_TEST\n  in_subprocess_for_death_test =\n      (internal_run_death_test_flag_.get() != nullptr);\n# if defined(GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_)\n  if (in_subprocess_for_death_test) {\n    GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_();\n",
                      "markdown": "`\n#if GTEST_HAS_DEATH_TEST\n  in_subprocess_for_death_test =\n      (internal_run_death_test_flag_.get() != nullptr);\n# if defined(GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_)\n  if (in_subprocess_for_death_test) {\n    GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 7068,
                  "startColumn": 35,
                  "endLine": 7068,
                  "endColumn": 40,
                  "snippet": {
                    "text": "// Disables event forwarding if the control is currently in a death test\n// subprocess. Must not be called before InitGoogleTest.\nvoid UnitTestImpl::SuppressTestEventsIfInSubprocess() {\n  if (internal_run_death_test_flag_.get() != nullptr)\n    listeners()->SuppressEventForwarding();\n}\n#endif  // GTEST_HAS_DEATH_TEST\n",
                    "rendered": {
                      "text": "// Disables event forwarding if the control is currently in a death test\n// subprocess. Must not be called before InitGoogleTest.\nvoid UnitTestImpl::SuppressTestEventsIfInSubprocess() {\n  if (internal_run_death_test_flag_.get() != nullptr)\n    listeners()->SuppressEventForwarding();\n}\n#endif  // GTEST_HAS_DEATH_TEST\n",
                      "markdown": "`// Disables event forwarding if the control is currently in a death test\n// subprocess. Must not be called before InitGoogleTest.\nvoid UnitTestImpl::SuppressTestEventsIfInSubprocess() {\n  if (internal_run_death_test_flag_.get() != nullptr)\n    listeners()->SuppressEventForwarding();\n}\n#endif  // GTEST_HAS_DEATH_TEST\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 2695,
                  "startColumn": 14,
                  "endLine": 2695,
                  "endColumn": 19,
                  "snippet": {
                    "text": "// Returns the assertion's negation. Used with EXPECT/ASSERT_FALSE.\nAssertionResult AssertionResult::operator!() const {\n  AssertionResult negation(!success_);\n  if (message_.get() != nullptr) negation << *message_;\n  return negation;\n}\n\n",
                    "rendered": {
                      "text": "// Returns the assertion's negation. Used with EXPECT/ASSERT_FALSE.\nAssertionResult AssertionResult::operator!() const {\n  AssertionResult negation(!success_);\n  if (message_.get() != nullptr) negation << *message_;\n  return negation;\n}\n\n",
                      "markdown": "`// Returns the assertion's negation. Used with EXPECT/ASSERT_FALSE.\nAssertionResult AssertionResult::operator!() const {\n  AssertionResult negation(!success_);\n  if (message_.get() != nullptr) negation << *message_;\n  return negation;\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 2681,
                  "startColumn": 29,
                  "endLine": 2681,
                  "endColumn": 34,
                  "snippet": {
                    "text": "// Used in EXPECT_TRUE/FALSE(assertion_result).\nAssertionResult::AssertionResult(const AssertionResult& other)\n    : success_(other.success_),\n      message_(other.message_.get() != nullptr\n                   ? new ::std::string(*other.message_)\n                   : static_cast< ::std::string*>(nullptr)) {}\n\n",
                    "rendered": {
                      "text": "// Used in EXPECT_TRUE/FALSE(assertion_result).\nAssertionResult::AssertionResult(const AssertionResult& other)\n    : success_(other.success_),\n      message_(other.message_.get() != nullptr\n                   ? new ::std::string(*other.message_)\n                   : static_cast< ::std::string*>(nullptr)) {}\n\n",
                      "markdown": "`// Used in EXPECT_TRUE/FALSE(assertion_result).\nAssertionResult::AssertionResult(const AssertionResult& other)\n    : success_(other.success_),\n      message_(other.message_.get() != nullptr\n                   ? new ::std::string(*other.message_)\n                   : static_cast< ::std::string*>(nullptr)) {}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 2674,
                  "startColumn": 43,
                  "endLine": 2674,
                  "endColumn": 48,
                  "snippet": {
                    "text": "// Gets the text streamed to this object so far as an std::string.\n// Each '\\0' character in the buffer is replaced with \"\\\\0\".\nstd::string Message::GetString() const {\n  return internal::StringStreamToString(ss_.get());\n}\n\n// AssertionResult constructors.\n",
                    "rendered": {
                      "text": "// Gets the text streamed to this object so far as an std::string.\n// Each '\\0' character in the buffer is replaced with \"\\\\0\".\nstd::string Message::GetString() const {\n  return internal::StringStreamToString(ss_.get());\n}\n\n// AssertionResult constructors.\n",
                      "markdown": "`// Gets the text streamed to this object so far as an std::string.\n// Each '\\0' character in the buffer is replaced with \"\\\\0\".\nstd::string Message::GetString() const {\n  return internal::StringStreamToString(ss_.get());\n}\n\n// AssertionResult constructors.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 2435,
                  "startColumn": 46,
                  "endLine": 2435,
                  "endColumn": 51,
                  "snippet": {
                    "text": "// Returns the test part result reporter for the current thread.\nTestPartResultReporterInterface*\nUnitTestImpl::GetTestPartResultReporterForCurrentThread() {\n  return per_thread_test_part_result_reporter_.get();\n}\n\n// Sets the test part result reporter for the current thread.\n",
                    "rendered": {
                      "text": "// Returns the test part result reporter for the current thread.\nTestPartResultReporterInterface*\nUnitTestImpl::GetTestPartResultReporterForCurrentThread() {\n  return per_thread_test_part_result_reporter_.get();\n}\n\n// Sets the test part result reporter for the current thread.\n",
                      "markdown": "`// Returns the test part result reporter for the current thread.\nTestPartResultReporterInterface*\nUnitTestImpl::GetTestPartResultReporterForCurrentThread() {\n  return per_thread_test_part_result_reporter_.get();\n}\n\n// Sets the test part result reporter for the current thread.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 1191,
                  "startColumn": 30,
                  "endLine": 1191,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n  // Returns a pointer to the current death test factory.\n  internal::DeathTestFactory* death_test_factory() {\n    return death_test_factory_.get();\n  }\n\n  void SuppressTestEventsIfInSubprocess();\n",
                    "rendered": {
                      "text": "\n  // Returns a pointer to the current death test factory.\n  internal::DeathTestFactory* death_test_factory() {\n    return death_test_factory_.get();\n  }\n\n  void SuppressTestEventsIfInSubprocess();\n",
                      "markdown": "`\n  // Returns a pointer to the current death test factory.\n  internal::DeathTestFactory* death_test_factory() {\n    return death_test_factory_.get();\n  }\n\n  void SuppressTestEventsIfInSubprocess();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 1186,
                  "startColumn": 40,
                  "endLine": 1186,
                  "endColumn": 45,
                  "snippet": {
                    "text": "  // This information is useful only in a death test child process.\n  // Must not be called before a call to InitGoogleTest.\n  const InternalRunDeathTestFlag* internal_run_death_test_flag() const {\n    return internal_run_death_test_flag_.get();\n  }\n\n  // Returns a pointer to the current death test factory.\n",
                    "rendered": {
                      "text": "  // This information is useful only in a death test child process.\n  // Must not be called before a call to InitGoogleTest.\n  const InternalRunDeathTestFlag* internal_run_death_test_flag() const {\n    return internal_run_death_test_flag_.get();\n  }\n\n  // Returns a pointer to the current death test factory.\n",
                      "markdown": "`  // This information is useful only in a death test child process.\n  // Must not be called before a call to InitGoogleTest.\n  const InternalRunDeathTestFlag* internal_run_death_test_flag() const {\n    return internal_run_death_test_flag_.get();\n  }\n\n  // Returns a pointer to the current death test factory.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 1174,
                  "startColumn": 29,
                  "endLine": 1174,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    return *(gtest_trace_stack_.pointer());\n  }\n  const std::vector<TraceInfo>& gtest_trace_stack() const {\n    return gtest_trace_stack_.get();\n  }\n\n#if GTEST_HAS_DEATH_TEST\n",
                    "rendered": {
                      "text": "    return *(gtest_trace_stack_.pointer());\n  }\n  const std::vector<TraceInfo>& gtest_trace_stack() const {\n    return gtest_trace_stack_.get();\n  }\n\n#if GTEST_HAS_DEATH_TEST\n",
                      "markdown": "`    return *(gtest_trace_stack_.pointer());\n  }\n  const std::vector<TraceInfo>& gtest_trace_stack() const {\n    return gtest_trace_stack_.get();\n  }\n\n#if GTEST_HAS_DEATH_TEST\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 11712,
                  "startColumn": 30,
                  "endLine": 11712,
                  "endColumn": 46,
                  "snippet": {
                    "text": "// and if it is set we prepend \"xml:\" to its value, if it not set we return \"\"\nstd::string OutputFlagAlsoCheckEnvVar(){\n  std::string default_value_for_output_flag = \"\";\n  const char* xml_output_file_env = posix::GetEnv(\"XML_OUTPUT_FILE\");\n  if (nullptr != xml_output_file_env) {\n    default_value_for_output_flag = std::string(\"xml:\") + xml_output_file_env;\n  }\n",
                    "rendered": {
                      "text": "// and if it is set we prepend \"xml:\" to its value, if it not set we return \"\"\nstd::string OutputFlagAlsoCheckEnvVar(){\n  std::string default_value_for_output_flag = \"\";\n  const char* xml_output_file_env = posix::GetEnv(\"XML_OUTPUT_FILE\");\n  if (nullptr != xml_output_file_env) {\n    default_value_for_output_flag = std::string(\"xml:\") + xml_output_file_env;\n  }\n",
                      "markdown": "`// and if it is set we prepend \"xml:\" to its value, if it not set we return \"\"\nstd::string OutputFlagAlsoCheckEnvVar(){\n  std::string default_value_for_output_flag = \"\";\n  const char* xml_output_file_env = posix::GetEnv(\"XML_OUTPUT_FILE\");\n  if (nullptr != xml_output_file_env) {\n    default_value_for_output_flag = std::string(\"xml:\") + xml_output_file_env;\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 11616,
                  "startColumn": 9,
                  "endLine": 11616,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    env_var << ToUpper(full_flag.c_str()[i]);\n  }\n\n  return env_var.GetString();\n}\n\n// Parses 'str' for a 32-bit signed integer.  If successful, writes\n",
                    "rendered": {
                      "text": "    env_var << ToUpper(full_flag.c_str()[i]);\n  }\n\n  return env_var.GetString();\n}\n\n// Parses 'str' for a 32-bit signed integer.  If successful, writes\n",
                      "markdown": "`    env_var << ToUpper(full_flag.c_str()[i]);\n  }\n\n  return env_var.GetString();\n}\n\n// Parses 'str' for a 32-bit signed integer.  If successful, writes\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 9533,
                  "startColumn": 38,
                  "endLine": 9533,
                  "endColumn": 64,
                  "snippet": {
                    "text": "// a thread-safe manner and instructs it to run the death test.  The\n// implementation uses fork(2) + exec.  On systems where clone(2) is\n// available, it is used instead, being slightly more thread-safe.  On QNX,\n// fork supports only single-threaded environments, so this function uses\n// spawn(2) there instead.  The function dies with an error message if\n// anything goes wrong.\nstatic pid_t ExecDeathTestSpawnChild(char* const* argv, int close_fd) {\n",
                    "rendered": {
                      "text": "// a thread-safe manner and instructs it to run the death test.  The\n// implementation uses fork(2) + exec.  On systems where clone(2) is\n// available, it is used instead, being slightly more thread-safe.  On QNX,\n// fork supports only single-threaded environments, so this function uses\n// spawn(2) there instead.  The function dies with an error message if\n// anything goes wrong.\nstatic pid_t ExecDeathTestSpawnChild(char* const* argv, int close_fd) {\n",
                      "markdown": "`// a thread-safe manner and instructs it to run the death test.  The\n// implementation uses fork(2) + exec.  On systems where clone(2) is\n// available, it is used instead, being slightly more thread-safe.  On QNX,\n// fork supports only single-threaded environments, so this function uses\n// spawn(2) there instead.  The function dies with an error message if\n// anything goes wrong.\nstatic pid_t ExecDeathTestSpawnChild(char* const* argv, int close_fd) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 6309,
                  "startColumn": 10,
                  "endLine": 6309,
                  "endColumn": 26,
                  "snippet": {
                    "text": "  }\n\n  // If there was a test failure outside of one of the test suites (like in a\n  // test environment) include that in the output.\n  if (unit_test.ad_hoc_test_result().Failed()) {\n    OutputJsonTestSuiteForTestResult(stream, unit_test.ad_hoc_test_result());\n  }\n",
                    "rendered": {
                      "text": "  }\n\n  // If there was a test failure outside of one of the test suites (like in a\n  // test environment) include that in the output.\n  if (unit_test.ad_hoc_test_result().Failed()) {\n    OutputJsonTestSuiteForTestResult(stream, unit_test.ad_hoc_test_result());\n  }\n",
                      "markdown": "`  }\n\n  // If there was a test failure outside of one of the test suites (like in a\n  // test environment) include that in the output.\n  if (unit_test.ad_hoc_test_result().Failed()) {\n    OutputJsonTestSuiteForTestResult(stream, unit_test.ad_hoc_test_result());\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 5852,
                  "startColumn": 10,
                  "endLine": 5852,
                  "endColumn": 26,
                  "snippet": {
                    "text": "  }\n\n  // If there was a test failure outside of one of the test suites (like in a\n  // test environment) include that in the output.\n  if (unit_test.ad_hoc_test_result().Failed()) {\n    OutputXmlTestSuiteForTestResult(stream, unit_test.ad_hoc_test_result());\n  }\n",
                    "rendered": {
                      "text": "  }\n\n  // If there was a test failure outside of one of the test suites (like in a\n  // test environment) include that in the output.\n  if (unit_test.ad_hoc_test_result().Failed()) {\n    OutputXmlTestSuiteForTestResult(stream, unit_test.ad_hoc_test_result());\n  }\n",
                      "markdown": "`  }\n\n  // If there was a test failure outside of one of the test suites (like in a\n  // test environment) include that in the output.\n  if (unit_test.ad_hoc_test_result().Failed()) {\n    OutputXmlTestSuiteForTestResult(stream, unit_test.ad_hoc_test_result());\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 1739,
                  "startColumn": 29,
                  "endLine": 1739,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\nGTEST_DEFINE_string_(\n    filter,\n    internal::StringFromGTestEnv(\"filter\", GetDefaultFilter()),\n    \"A colon-separated list of glob (not regex) patterns \"\n    \"for filtering the tests to run, optionally followed by a \"\n    \"'-' and a : separated list of negative patterns (tests to \"\n",
                    "rendered": {
                      "text": "\nGTEST_DEFINE_string_(\n    filter,\n    internal::StringFromGTestEnv(\"filter\", GetDefaultFilter()),\n    \"A colon-separated list of glob (not regex) patterns \"\n    \"for filtering the tests to run, optionally followed by a \"\n    \"'-' and a : separated list of negative patterns (tests to \"\n",
                      "markdown": "`\nGTEST_DEFINE_string_(\n    filter,\n    internal::StringFromGTestEnv(\"filter\", GetDefaultFilter()),\n    \"A colon-separated list of glob (not regex) patterns \"\n    \"for filtering the tests to run, optionally followed by a \"\n    \"'-' and a : separated list of negative patterns (tests to \"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 1711,
                  "startColumn": 38,
                  "endLine": 1711,
                  "endColumn": 58,
                  "snippet": {
                    "text": "}\n\nGTEST_DEFINE_bool_(\n    fail_fast, internal::BoolFromGTestEnv(\"fail_fast\", GetDefaultFailFast()),\n    \"True if and only if a test failure should stop further test execution.\");\n\nGTEST_DEFINE_bool_(\n",
                    "rendered": {
                      "text": "}\n\nGTEST_DEFINE_bool_(\n    fail_fast, internal::BoolFromGTestEnv(\"fail_fast\", GetDefaultFailFast()),\n    \"True if and only if a test failure should stop further test execution.\");\n\nGTEST_DEFINE_bool_(\n",
                      "markdown": "`}\n\nGTEST_DEFINE_bool_(\n    fail_fast, internal::BoolFromGTestEnv(\"fail_fast\", GetDefaultFailFast()),\n    \"True if and only if a test failure should stop further test execution.\");\n\nGTEST_DEFINE_bool_(\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 13959,
                  "startColumn": 26,
                  "endLine": 13959,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    if (leaked_count > 0) {\n      std::cout << \"\\nERROR: \" << leaked_count << \" leaked mock \"\n                << (leaked_count == 1 ? \"object\" : \"objects\")\n                << \" found at program exit. Expectations on a mock object are \"\n                   \"verified when the object is destructed. Leaking a mock \"\n                   \"means that its expectations aren't verified, which is \"\n                   \"usually a test bug. If you really intend to leak a mock, \"\n",
                    "rendered": {
                      "text": "    if (leaked_count > 0) {\n      std::cout << \"\\nERROR: \" << leaked_count << \" leaked mock \"\n                << (leaked_count == 1 ? \"object\" : \"objects\")\n                << \" found at program exit. Expectations on a mock object are \"\n                   \"verified when the object is destructed. Leaking a mock \"\n                   \"means that its expectations aren't verified, which is \"\n                   \"usually a test bug. If you really intend to leak a mock, \"\n",
                      "markdown": "`    if (leaked_count > 0) {\n      std::cout << \"\\nERROR: \" << leaked_count << \" leaked mock \"\n                << (leaked_count == 1 ? \"object\" : \"objects\")\n                << \" found at program exit. Expectations on a mock object are \"\n                   \"verified when the object is destructed. Leaking a mock \"\n                   \"means that its expectations aren't verified, which is \"\n                   \"usually a test bug. If you really intend to leak a mock, \"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 13223,
                  "startColumn": 17,
                  "endLine": 13223,
                  "endColumn": 21,
                  "snippet": {
                    "text": "}\n\n// Checks that all matchers match at least one element, and that all\n// elements match at least one matcher. This enables faster matching\n// and better error reporting.\n// Returns false, writing an explanation to 'listener', if and only\n// if the success criteria are not met.\n",
                    "rendered": {
                      "text": "}\n\n// Checks that all matchers match at least one element, and that all\n// elements match at least one matcher. This enables faster matching\n// and better error reporting.\n// Returns false, writing an explanation to 'listener', if and only\n// if the success criteria are not met.\n",
                      "markdown": "`}\n\n// Checks that all matchers match at least one element, and that all\n// elements match at least one matcher. This enables faster matching\n// and better error reporting.\n// Returns false, writing an explanation to 'listener', if and only\n// if the success criteria are not met.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 13222,
                  "startColumn": 33,
                  "endLine": 13222,
                  "endColumn": 37,
                  "snippet": {
                    "text": "  }\n}\n\n// Checks that all matchers match at least one element, and that all\n// elements match at least one matcher. This enables faster matching\n// and better error reporting.\n// Returns false, writing an explanation to 'listener', if and only\n",
                    "rendered": {
                      "text": "  }\n}\n\n// Checks that all matchers match at least one element, and that all\n// elements match at least one matcher. This enables faster matching\n// and better error reporting.\n// Returns false, writing an explanation to 'listener', if and only\n",
                      "markdown": "`  }\n}\n\n// Checks that all matchers match at least one element, and that all\n// elements match at least one matcher. This enables faster matching\n// and better error reporting.\n// Returns false, writing an explanation to 'listener', if and only\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 13033,
                  "startColumn": 24,
                  "endLine": 13033,
                  "endColumn": 28,
                  "snippet": {
                    "text": "  // to right nodes and are marked to eliminate cycles from the search.\n  //\n  // Left nodes will only be explored at most once because they\n  // are accessible from at most one right node in the residual flow\n  // graph.\n  //\n  // Note that left_[ilhs] is the only element of left_ that TryAugment will\n",
                    "rendered": {
                      "text": "  // to right nodes and are marked to eliminate cycles from the search.\n  //\n  // Left nodes will only be explored at most once because they\n  // are accessible from at most one right node in the residual flow\n  // graph.\n  //\n  // Note that left_[ilhs] is the only element of left_ that TryAugment will\n",
                      "markdown": "`  // to right nodes and are marked to eliminate cycles from the search.\n  //\n  // Left nodes will only be explored at most once because they\n  // are accessible from at most one right node in the residual flow\n  // graph.\n  //\n  // Note that left_[ilhs] is the only element of left_ that TryAugment will\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 13032,
                  "startColumn": 37,
                  "endLine": 13032,
                  "endColumn": 41,
                  "snippet": {
                    "text": "  // flow was added to the network. The 'seen' vector elements correspond\n  // to right nodes and are marked to eliminate cycles from the search.\n  //\n  // Left nodes will only be explored at most once because they\n  // are accessible from at most one right node in the residual flow\n  // graph.\n  //\n",
                    "rendered": {
                      "text": "  // flow was added to the network. The 'seen' vector elements correspond\n  // to right nodes and are marked to eliminate cycles from the search.\n  //\n  // Left nodes will only be explored at most once because they\n  // are accessible from at most one right node in the residual flow\n  // graph.\n  //\n",
                      "markdown": "`  // flow was added to the network. The 'seen' vector elements correspond\n  // to right nodes and are marked to eliminate cycles from the search.\n  //\n  // Left nodes will only be explored at most once because they\n  // are accessible from at most one right node in the residual flow\n  // graph.\n  //\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 13006,
                  "startColumn": 32,
                  "endLine": 13006,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    // node once.\n    for (size_t ilhs = 0; ilhs < graph_->LhsSize(); ++ilhs) {\n      // Reset the path-marking vector and try to find a path from\n      // source to sink starting at the left_[ilhs] node.\n      GTEST_CHECK_(left_[ilhs] == kUnused)\n          << \"ilhs: \" << ilhs << \", left_[ilhs]: \" << left_[ilhs];\n      // 'seen' initialized to 'graph_->RhsSize()' copies of 0.\n",
                    "rendered": {
                      "text": "    // node once.\n    for (size_t ilhs = 0; ilhs < graph_->LhsSize(); ++ilhs) {\n      // Reset the path-marking vector and try to find a path from\n      // source to sink starting at the left_[ilhs] node.\n      GTEST_CHECK_(left_[ilhs] == kUnused)\n          << \"ilhs: \" << ilhs << \", left_[ilhs]: \" << left_[ilhs];\n      // 'seen' initialized to 'graph_->RhsSize()' copies of 0.\n",
                      "markdown": "`    // node once.\n    for (size_t ilhs = 0; ilhs < graph_->LhsSize(); ++ilhs) {\n      // Reset the path-marking vector and try to find a path from\n      // source to sink starting at the left_[ilhs] node.\n      GTEST_CHECK_(left_[ilhs] == kUnused)\n          << \"ilhs: \" << ilhs << \", left_[ilhs]: \" << left_[ilhs];\n      // 'seen' initialized to 'graph_->RhsSize()' copies of 0.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 13002,
                  "startColumn": 64,
                  "endLine": 13002,
                  "endColumn": 68,
                  "snippet": {
                    "text": "    // Since the source-to-left edge can only carry one flow unit (or,\n    // each element can be matched to only one matcher), there is no need\n    // to visit the left nodes more than once looking for augmented paths.\n    // The flow is known to be possible or impossible by looking at the\n    // node once.\n    for (size_t ilhs = 0; ilhs < graph_->LhsSize(); ++ilhs) {\n      // Reset the path-marking vector and try to find a path from\n",
                    "rendered": {
                      "text": "    // Since the source-to-left edge can only carry one flow unit (or,\n    // each element can be matched to only one matcher), there is no need\n    // to visit the left nodes more than once looking for augmented paths.\n    // The flow is known to be possible or impossible by looking at the\n    // node once.\n    for (size_t ilhs = 0; ilhs < graph_->LhsSize(); ++ilhs) {\n      // Reset the path-marking vector and try to find a path from\n",
                      "markdown": "`    // Since the source-to-left edge can only carry one flow unit (or,\n    // each element can be matched to only one matcher), there is no need\n    // to visit the left nodes more than once looking for augmented paths.\n    // The flow is known to be possible or impossible by looking at the\n    // node once.\n    for (size_t ilhs = 0; ilhs < graph_->LhsSize(); ++ilhs) {\n      // Reset the path-marking vector and try to find a path from\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 12952,
                  "startColumn": 62,
                  "endLine": 12952,
                  "endColumn": 66,
                  "snippet": {
                    "text": "// respect to r1 and \"redoing\" them with respect to r2.\n//\n// It bears repeating that the flow graph and residual flow graph are\n// never represented explicitly, but can be derived by looking at the\n// information in 'graph' and in left_.\n//\n// As an optimization, there is a second vector<int> called right_ which\n",
                    "rendered": {
                      "text": "// respect to r1 and \"redoing\" them with respect to r2.\n//\n// It bears repeating that the flow graph and residual flow graph are\n// never represented explicitly, but can be derived by looking at the\n// information in 'graph' and in left_.\n//\n// As an optimization, there is a second vector<int> called right_ which\n",
                      "markdown": "`// respect to r1 and \"redoing\" them with respect to r2.\n//\n// It bears repeating that the flow graph and residual flow graph are\n// never represented explicitly, but can be derived by looking at the\n// information in 'graph' and in left_.\n//\n// As an optimization, there is a second vector<int> called right_ which\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 12651,
                  "startColumn": 36,
                  "endLine": 12651,
                  "endColumn": 40,
                  "snippet": {
                    "text": "// Creates a cardinality that allows at least n calls.\nGTEST_API_ Cardinality AtLeast(int n) { return Between(n, INT_MAX); }\n\n// Creates a cardinality that allows at most n calls.\nGTEST_API_ Cardinality AtMost(int n) { return Between(0, n); }\n\n// Creates a cardinality that allows any number of calls.\n",
                    "rendered": {
                      "text": "// Creates a cardinality that allows at least n calls.\nGTEST_API_ Cardinality AtLeast(int n) { return Between(n, INT_MAX); }\n\n// Creates a cardinality that allows at most n calls.\nGTEST_API_ Cardinality AtMost(int n) { return Between(0, n); }\n\n// Creates a cardinality that allows any number of calls.\n",
                      "markdown": "`// Creates a cardinality that allows at least n calls.\nGTEST_API_ Cardinality AtLeast(int n) { return Between(n, INT_MAX); }\n\n// Creates a cardinality that allows at most n calls.\nGTEST_API_ Cardinality AtMost(int n) { return Between(0, n); }\n\n// Creates a cardinality that allows any number of calls.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 12648,
                  "startColumn": 36,
                  "endLine": 12648,
                  "endColumn": 40,
                  "snippet": {
                    "text": "  }\n}\n\n// Creates a cardinality that allows at least n calls.\nGTEST_API_ Cardinality AtLeast(int n) { return Between(n, INT_MAX); }\n\n// Creates a cardinality that allows at most n calls.\n",
                    "rendered": {
                      "text": "  }\n}\n\n// Creates a cardinality that allows at least n calls.\nGTEST_API_ Cardinality AtLeast(int n) { return Between(n, INT_MAX); }\n\n// Creates a cardinality that allows at most n calls.\n",
                      "markdown": "`  }\n}\n\n// Creates a cardinality that allows at least n calls.\nGTEST_API_ Cardinality AtLeast(int n) { return Between(n, INT_MAX); }\n\n// Creates a cardinality that allows at most n calls.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 12629,
                  "startColumn": 18,
                  "endLine": 12629,
                  "endColumn": 22,
                  "snippet": {
                    "text": "  } else if (min_ == max_) {\n    *os << \"called \" << FormatTimes(min_);\n  } else if (max_ == INT_MAX) {\n    *os << \"called at least \" << FormatTimes(min_);\n  } else {\n    // 0 < min_ < max_ < INT_MAX\n    *os << \"called between \" << min_ << \" and \" << max_ << \" times\";\n",
                    "rendered": {
                      "text": "  } else if (min_ == max_) {\n    *os << \"called \" << FormatTimes(min_);\n  } else if (max_ == INT_MAX) {\n    *os << \"called at least \" << FormatTimes(min_);\n  } else {\n    // 0 < min_ < max_ < INT_MAX\n    *os << \"called between \" << min_ << \" and \" << max_ << \" times\";\n",
                      "markdown": "`  } else if (min_ == max_) {\n    *os << \"called \" << FormatTimes(min_);\n  } else if (max_ == INT_MAX) {\n    *os << \"called at least \" << FormatTimes(min_);\n  } else {\n    // 0 < min_ < max_ < INT_MAX\n    *os << \"called between \" << min_ << \" and \" << max_ << \" times\";\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 12624,
                  "startColumn": 20,
                  "endLine": 12624,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    } else if (max_ == INT_MAX) {\n      *os << \"called any number of times\";\n    } else {\n      *os << \"called at most \" << FormatTimes(max_);\n    }\n  } else if (min_ == max_) {\n    *os << \"called \" << FormatTimes(min_);\n",
                    "rendered": {
                      "text": "    } else if (max_ == INT_MAX) {\n      *os << \"called any number of times\";\n    } else {\n      *os << \"called at most \" << FormatTimes(max_);\n    }\n  } else if (min_ == max_) {\n    *os << \"called \" << FormatTimes(min_);\n",
                      "markdown": "`    } else if (max_ == INT_MAX) {\n      *os << \"called any number of times\";\n    } else {\n      *os << \"called at most \" << FormatTimes(max_);\n    }\n  } else if (min_ == max_) {\n    *os << \"called \" << FormatTimes(min_);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 12329,
                  "startColumn": 29,
                  "endLine": 12329,
                  "endColumn": 33,
                  "snippet": {
                    "text": "  array_.push_back(result);\n}\n\n// Returns the TestPartResult at the given index (0-based).\nconst TestPartResult& TestPartResultArray::GetTestPartResult(int index) const {\n  if (index < 0 || index >= size()) {\n    printf(\"\\nInvalid index (%d) into TestPartResultArray.\\n\", index);\n",
                    "rendered": {
                      "text": "  array_.push_back(result);\n}\n\n// Returns the TestPartResult at the given index (0-based).\nconst TestPartResult& TestPartResultArray::GetTestPartResult(int index) const {\n  if (index < 0 || index >= size()) {\n    printf(\"\\nInvalid index (%d) into TestPartResultArray.\\n\", index);\n",
                      "markdown": "`  array_.push_back(result);\n}\n\n// Returns the TestPartResult at the given index (0-based).\nconst TestPartResult& TestPartResultArray::GetTestPartResult(int index) const {\n  if (index < 0 || index >= size()) {\n    printf(\"\\nInvalid index (%d) into TestPartResultArray.\\n\", index);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 12123,
                  "startColumn": 61,
                  "endLine": 12123,
                  "endColumn": 65,
                  "snippet": {
                    "text": "  UniversalPrintCharArray(begin, len, os);\n}\n\n// Prints a (const) wchar_t array of 'len' elements, starting at address\n// 'begin'.\nvoid UniversalPrintArray(const wchar_t* begin, size_t len, ostream* os) {\n  UniversalPrintCharArray(begin, len, os);\n",
                    "rendered": {
                      "text": "  UniversalPrintCharArray(begin, len, os);\n}\n\n// Prints a (const) wchar_t array of 'len' elements, starting at address\n// 'begin'.\nvoid UniversalPrintArray(const wchar_t* begin, size_t len, ostream* os) {\n  UniversalPrintCharArray(begin, len, os);\n",
                      "markdown": "`  UniversalPrintCharArray(begin, len, os);\n}\n\n// Prints a (const) wchar_t array of 'len' elements, starting at address\n// 'begin'.\nvoid UniversalPrintArray(const wchar_t* begin, size_t len, ostream* os) {\n  UniversalPrintCharArray(begin, len, os);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 12117,
                  "startColumn": 62,
                  "endLine": 12117,
                  "endColumn": 66,
                  "snippet": {
                    "text": "  UniversalPrintCharArray(begin, len, os);\n}\n\n// Prints a (const) char32_t array of 'len' elements, starting at address\n// 'begin'.\nvoid UniversalPrintArray(const char32_t* begin, size_t len, ostream* os) {\n  UniversalPrintCharArray(begin, len, os);\n",
                    "rendered": {
                      "text": "  UniversalPrintCharArray(begin, len, os);\n}\n\n// Prints a (const) char32_t array of 'len' elements, starting at address\n// 'begin'.\nvoid UniversalPrintArray(const char32_t* begin, size_t len, ostream* os) {\n  UniversalPrintCharArray(begin, len, os);\n",
                      "markdown": "`  UniversalPrintCharArray(begin, len, os);\n}\n\n// Prints a (const) char32_t array of 'len' elements, starting at address\n// 'begin'.\nvoid UniversalPrintArray(const char32_t* begin, size_t len, ostream* os) {\n  UniversalPrintCharArray(begin, len, os);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 12111,
                  "startColumn": 62,
                  "endLine": 12111,
                  "endColumn": 66,
                  "snippet": {
                    "text": "}\n#endif\n\n// Prints a (const) char16_t array of 'len' elements, starting at address\n// 'begin'.\nvoid UniversalPrintArray(const char16_t* begin, size_t len, ostream* os) {\n  UniversalPrintCharArray(begin, len, os);\n",
                    "rendered": {
                      "text": "}\n#endif\n\n// Prints a (const) char16_t array of 'len' elements, starting at address\n// 'begin'.\nvoid UniversalPrintArray(const char16_t* begin, size_t len, ostream* os) {\n  UniversalPrintCharArray(begin, len, os);\n",
                      "markdown": "`}\n#endif\n\n// Prints a (const) char16_t array of 'len' elements, starting at address\n// 'begin'.\nvoid UniversalPrintArray(const char16_t* begin, size_t len, ostream* os) {\n  UniversalPrintCharArray(begin, len, os);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 12104,
                  "startColumn": 61,
                  "endLine": 12104,
                  "endColumn": 65,
                  "snippet": {
                    "text": "}\n\n#ifdef __cpp_char8_t\n// Prints a (const) char8_t array of 'len' elements, starting at address\n// 'begin'.\nvoid UniversalPrintArray(const char8_t* begin, size_t len, ostream* os) {\n  UniversalPrintCharArray(begin, len, os);\n",
                    "rendered": {
                      "text": "}\n\n#ifdef __cpp_char8_t\n// Prints a (const) char8_t array of 'len' elements, starting at address\n// 'begin'.\nvoid UniversalPrintArray(const char8_t* begin, size_t len, ostream* os) {\n  UniversalPrintCharArray(begin, len, os);\n",
                      "markdown": "`}\n\n#ifdef __cpp_char8_t\n// Prints a (const) char8_t array of 'len' elements, starting at address\n// 'begin'.\nvoid UniversalPrintArray(const char8_t* begin, size_t len, ostream* os) {\n  UniversalPrintCharArray(begin, len, os);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 12098,
                  "startColumn": 58,
                  "endLine": 12098,
                  "endColumn": 62,
                  "snippet": {
                    "text": "  *os << \" (no terminating NUL)\";\n}\n\n// Prints a (const) char array of 'len' elements, starting at address 'begin'.\nvoid UniversalPrintArray(const char* begin, size_t len, ostream* os) {\n  UniversalPrintCharArray(begin, len, os);\n}\n",
                    "rendered": {
                      "text": "  *os << \" (no terminating NUL)\";\n}\n\n// Prints a (const) char array of 'len' elements, starting at address 'begin'.\nvoid UniversalPrintArray(const char* begin, size_t len, ostream* os) {\n  UniversalPrintCharArray(begin, len, os);\n}\n",
                      "markdown": "`  *os << \" (no terminating NUL)\";\n}\n\n// Prints a (const) char array of 'len' elements, starting at address 'begin'.\nvoid UniversalPrintArray(const char* begin, size_t len, ostream* os) {\n  UniversalPrintCharArray(begin, len, os);\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 12069,
                  "startColumn": 66,
                  "endLine": 12069,
                  "endColumn": 70,
                  "snippet": {
                    "text": "  return print_format;\n}\n\n// Prints a (const) char/wchar_t array of 'len' elements, starting at address\n// 'begin'.  CharType must be either char or wchar_t.\ntemplate <typename CharType>\nGTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_\n",
                    "rendered": {
                      "text": "  return print_format;\n}\n\n// Prints a (const) char/wchar_t array of 'len' elements, starting at address\n// 'begin'.  CharType must be either char or wchar_t.\ntemplate <typename CharType>\nGTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_\n",
                      "markdown": "`  return print_format;\n}\n\n// Prints a (const) char/wchar_t array of 'len' elements, starting at address\n// 'begin'.  CharType must be either char or wchar_t.\ntemplate <typename CharType>\nGTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 12038,
                  "startColumn": 19,
                  "endLine": 12038,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n// Prints the given array of characters to the ostream.  CharType must be either\n// char, char8_t, char16_t, char32_t, or wchar_t.\n// The array starts at begin, the length is len, it may include '\\0' characters\n// and may not be NUL-terminated.\ntemplate <typename CharType>\nGTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_\n",
                    "rendered": {
                      "text": "\n// Prints the given array of characters to the ostream.  CharType must be either\n// char, char8_t, char16_t, char32_t, or wchar_t.\n// The array starts at begin, the length is len, it may include '\\0' characters\n// and may not be NUL-terminated.\ntemplate <typename CharType>\nGTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_\n",
                      "markdown": "`\n// Prints the given array of characters to the ostream.  CharType must be either\n// char, char8_t, char16_t, char32_t, or wchar_t.\n// The array starts at begin, the length is len, it may include '\\0' characters\n// and may not be NUL-terminated.\ntemplate <typename CharType>\nGTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 11706,
                  "startColumn": 39,
                  "endLine": 11706,
                  "endColumn": 43,
                  "snippet": {
                    "text": "// set, we look for XML_OUTPUT_FILE, which is set by the Bazel build\n// system.  The value of XML_OUTPUT_FILE is a filename without the\n// \"xml:\" prefix of GTEST_OUTPUT.\n// Note that this is meant to be called at the call site so it does\n// not check that the flag is 'output'\n// In essence this checks an env variable called XML_OUTPUT_FILE\n// and if it is set we prepend \"xml:\" to its value, if it not set we return \"\"\n",
                    "rendered": {
                      "text": "// set, we look for XML_OUTPUT_FILE, which is set by the Bazel build\n// system.  The value of XML_OUTPUT_FILE is a filename without the\n// \"xml:\" prefix of GTEST_OUTPUT.\n// Note that this is meant to be called at the call site so it does\n// not check that the flag is 'output'\n// In essence this checks an env variable called XML_OUTPUT_FILE\n// and if it is set we prepend \"xml:\" to its value, if it not set we return \"\"\n",
                      "markdown": "`// set, we look for XML_OUTPUT_FILE, which is set by the Bazel build\n// system.  The value of XML_OUTPUT_FILE is a filename without the\n// \"xml:\" prefix of GTEST_OUTPUT.\n// Note that this is meant to be called at the call site so it does\n// not check that the flag is 'output'\n// In essence this checks an env variable called XML_OUTPUT_FILE\n// and if it is set we prepend \"xml:\" to its value, if it not set we return \"\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 11500,
                  "startColumn": 45,
                  "endLine": 11500,
                  "endColumn": 49,
                  "snippet": {
                    "text": "                          CapturedStream** stream) {\n  if (*stream != nullptr) {\n    GTEST_LOG_(FATAL) << \"Only one \" << stream_name\n                      << \" capturer can exist at a time.\";\n  }\n  *stream = new CapturedStream(fd);\n}\n",
                    "rendered": {
                      "text": "                          CapturedStream** stream) {\n  if (*stream != nullptr) {\n    GTEST_LOG_(FATAL) << \"Only one \" << stream_name\n                      << \" capturer can exist at a time.\";\n  }\n  *stream = new CapturedStream(fd);\n}\n",
                      "markdown": "`                          CapturedStream** stream) {\n  if (*stream != nullptr) {\n    GTEST_LOG_(FATAL) << \"Only one \" << stream_name\n                      << \" capturer can exist at a time.\";\n  }\n  *stream = new CapturedStream(fd);\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 11228,
                  "startColumn": 31,
                  "endLine": 11228,
                  "endColumn": 35,
                  "snippet": {
                    "text": "  for (size_t i = 0; i <= max_count; ++i) {\n    // We know that the atom matches each of the first i characters in str.\n    if (i >= min_count && MatchRegexAtHead(regex, str + i)) {\n      // We have enough matches at the head, and the tail matches too.\n      // Since we only care about *whether* the pattern matches str\n      // (as opposed to *how* it matches), there is no need to find a\n      // greedy match.\n",
                    "rendered": {
                      "text": "  for (size_t i = 0; i <= max_count; ++i) {\n    // We know that the atom matches each of the first i characters in str.\n    if (i >= min_count && MatchRegexAtHead(regex, str + i)) {\n      // We have enough matches at the head, and the tail matches too.\n      // Since we only care about *whether* the pattern matches str\n      // (as opposed to *how* it matches), there is no need to find a\n      // greedy match.\n",
                      "markdown": "`  for (size_t i = 0; i <= max_count; ++i) {\n    // We know that the atom matches each of the first i characters in str.\n    if (i >= min_count && MatchRegexAtHead(regex, str + i)) {\n      // We have enough matches at the head, and the tail matches too.\n      // Since we only care about *whether* the pattern matches str\n      // (as opposed to *how* it matches), there is no need to find a\n      // greedy match.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 11190,
                  "startColumn": 45,
                  "endLine": 11190,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        is_valid = false;\n      } else if (ch == '$' && regex[i + 1] != '\\0') {\n        ADD_FAILURE() << FormatRegexSyntaxError(regex, i)\n                      << \"'$' can only appear at the end.\";\n        is_valid = false;\n      } else if (IsInSet(ch, \"()[]{}|\")) {\n        ADD_FAILURE() << FormatRegexSyntaxError(regex, i)\n",
                    "rendered": {
                      "text": "        is_valid = false;\n      } else if (ch == '$' && regex[i + 1] != '\\0') {\n        ADD_FAILURE() << FormatRegexSyntaxError(regex, i)\n                      << \"'$' can only appear at the end.\";\n        is_valid = false;\n      } else if (IsInSet(ch, \"()[]{}|\")) {\n        ADD_FAILURE() << FormatRegexSyntaxError(regex, i)\n",
                      "markdown": "`        is_valid = false;\n      } else if (ch == '$' && regex[i + 1] != '\\0') {\n        ADD_FAILURE() << FormatRegexSyntaxError(regex, i)\n                      << \"'$' can only appear at the end.\";\n        is_valid = false;\n      } else if (IsInSet(ch, \"()[]{}|\")) {\n        ADD_FAILURE() << FormatRegexSyntaxError(regex, i)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 11186,
                  "startColumn": 45,
                  "endLine": 11186,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\n      if (ch == '^' && i > 0) {\n        ADD_FAILURE() << FormatRegexSyntaxError(regex, i)\n                      << \"'^' can only appear at the beginning.\";\n        is_valid = false;\n      } else if (ch == '$' && regex[i + 1] != '\\0') {\n        ADD_FAILURE() << FormatRegexSyntaxError(regex, i)\n",
                    "rendered": {
                      "text": "\n      if (ch == '^' && i > 0) {\n        ADD_FAILURE() << FormatRegexSyntaxError(regex, i)\n                      << \"'^' can only appear at the beginning.\";\n        is_valid = false;\n      } else if (ch == '$' && regex[i + 1] != '\\0') {\n        ADD_FAILURE() << FormatRegexSyntaxError(regex, i)\n",
                      "markdown": "`\n      if (ch == '^' && i > 0) {\n        ADD_FAILURE() << FormatRegexSyntaxError(regex, i)\n                      << \"'^' can only appear at the beginning.\";\n        is_valid = false;\n      } else if (ch == '$' && regex[i + 1] != '\\0') {\n        ADD_FAILURE() << FormatRegexSyntaxError(regex, i)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 11171,
                  "startColumn": 44,
                  "endLine": 11171,
                  "endColumn": 48,
                  "snippet": {
                    "text": "      i++;\n      if (regex[i] == '\\0') {\n        ADD_FAILURE() << FormatRegexSyntaxError(regex, i - 1)\n                      << \"'\\\\' cannot appear at the end.\";\n        return false;\n      }\n\n",
                    "rendered": {
                      "text": "      i++;\n      if (regex[i] == '\\0') {\n        ADD_FAILURE() << FormatRegexSyntaxError(regex, i - 1)\n                      << \"'\\\\' cannot appear at the end.\";\n        return false;\n      }\n\n",
                      "markdown": "`      i++;\n      if (regex[i] == '\\0') {\n        ADD_FAILURE() << FormatRegexSyntaxError(regex, i - 1)\n                      << \"'\\\\' cannot appear at the end.\";\n        return false;\n      }\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 11150,
                  "startColumn": 36,
                  "endLine": 11150,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n// Helper function used by ValidateRegex() to format error messages.\nstatic std::string FormatRegexSyntaxError(const char* regex, int index) {\n  return (Message() << \"Syntax error at index \" << index\n          << \" in simple regular expression \\\"\" << regex << \"\\\": \").GetString();\n}\n\n",
                    "rendered": {
                      "text": "\n// Helper function used by ValidateRegex() to format error messages.\nstatic std::string FormatRegexSyntaxError(const char* regex, int index) {\n  return (Message() << \"Syntax error at index \" << index\n          << \" in simple regular expression \\\"\" << regex << \"\\\": \").GetString();\n}\n\n",
                      "markdown": "`\n// Helper function used by ValidateRegex() to format error messages.\nstatic std::string FormatRegexSyntaxError(const char* regex, int index) {\n  return (Message() << \"Syntax error at index \" << index\n          << \" in simple regular expression \\\"\" << regex << \"\\\": \").GetString();\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 11084,
                  "startColumn": 48,
                  "endLine": 11084,
                  "endColumn": 52,
                  "snippet": {
                    "text": "  // not be properly initialized can may cause trouble when it's\n  // freed.\n  //\n  // Some implementation of POSIX regex (e.g. on at least some\n  // versions of Cygwin) doesn't accept the empty string as a valid\n  // regex.  We change it to an equivalent form \"()\" to be safe.\n  if (is_valid_) {\n",
                    "rendered": {
                      "text": "  // not be properly initialized can may cause trouble when it's\n  // freed.\n  //\n  // Some implementation of POSIX regex (e.g. on at least some\n  // versions of Cygwin) doesn't accept the empty string as a valid\n  // regex.  We change it to an equivalent form \"()\" to be safe.\n  if (is_valid_) {\n",
                      "markdown": "`  // not be properly initialized can may cause trouble when it's\n  // freed.\n  //\n  // Some implementation of POSIX regex (e.g. on at least some\n  // versions of Cygwin) doesn't accept the empty string as a valid\n  // regex.  We change it to an equivalent form \"()\" to be safe.\n  if (is_valid_) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 10917,
                  "startColumn": 45,
                  "endLine": 10917,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        if (value_pos != thread_local_values.end()) {\n          value_holders.push_back(value_pos->second);\n          thread_local_values.erase(value_pos);\n          // This 'if' can only be successful at most once, so theoretically we\n          // could break out of the loop here, but we don't bother doing so.\n        }\n      }\n",
                    "rendered": {
                      "text": "        if (value_pos != thread_local_values.end()) {\n          value_holders.push_back(value_pos->second);\n          thread_local_values.erase(value_pos);\n          // This 'if' can only be successful at most once, so theoretically we\n          // could break out of the loop here, but we don't bother doing so.\n        }\n      }\n",
                      "markdown": "`        if (value_pos != thread_local_values.end()) {\n          value_holders.push_back(value_pos->second);\n          thread_local_values.erase(value_pos);\n          // This 'if' can only be successful at most once, so theoretically we\n          // could break out of the loop here, but we don't bother doing so.\n        }\n      }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 10150,
                  "startColumn": 11,
                  "endLine": 10150,
                  "endColumn": 15,
                  "snippet": {
                    "text": "// that does not already exist.\n// Examples: 'dir/foo_test.xml' or 'dir/foo_test_1.xml'.\n// There could be a race condition if two or more processes are calling this\n// function at the same time -- they could both pick the same filename.\nFilePath FilePath::GenerateUniqueFileName(const FilePath& directory,\n                                          const FilePath& base_name,\n                                          const char* extension) {\n",
                    "rendered": {
                      "text": "// that does not already exist.\n// Examples: 'dir/foo_test.xml' or 'dir/foo_test_1.xml'.\n// There could be a race condition if two or more processes are calling this\n// function at the same time -- they could both pick the same filename.\nFilePath FilePath::GenerateUniqueFileName(const FilePath& directory,\n                                          const FilePath& base_name,\n                                          const char* extension) {\n",
                      "markdown": "`// that does not already exist.\n// Examples: 'dir/foo_test.xml' or 'dir/foo_test_1.xml'.\n// There could be a race condition if two or more processes are calling this\n// function at the same time -- they could both pick the same filename.\nFilePath FilePath::GenerateUniqueFileName(const FilePath& directory,\n                                          const FilePath& base_name,\n                                          const char* extension) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 9942,
                  "startColumn": 57,
                  "endLine": 9942,
                  "endColumn": 61,
                  "snippet": {
                    "text": "const char kAlternatePathSeparatorString[] = \"/\";\n# if GTEST_OS_WINDOWS_MOBILE\n// Windows CE doesn't have a current directory. You should not use\n// the current directory in tests on Windows CE, but this at least\n// provides a reasonable fallback.\nconst char kCurrentDirectoryString[] = \"\\\\\";\n// Windows CE doesn't define INVALID_FILE_ATTRIBUTES\n",
                    "rendered": {
                      "text": "const char kAlternatePathSeparatorString[] = \"/\";\n# if GTEST_OS_WINDOWS_MOBILE\n// Windows CE doesn't have a current directory. You should not use\n// the current directory in tests on Windows CE, but this at least\n// provides a reasonable fallback.\nconst char kCurrentDirectoryString[] = \"\\\\\";\n// Windows CE doesn't define INVALID_FILE_ATTRIBUTES\n",
                      "markdown": "`const char kAlternatePathSeparatorString[] = \"/\";\n# if GTEST_OS_WINDOWS_MOBILE\n// Windows CE doesn't have a current directory. You should not use\n// the current directory in tests on Windows CE, but this at least\n// provides a reasonable fallback.\nconst char kCurrentDirectoryString[] = \"\\\\\";\n// Windows CE doesn't define INVALID_FILE_ATTRIBUTES\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 9483,
                  "startColumn": 59,
                  "endLine": 9483,
                  "endColumn": 63,
                  "snippet": {
                    "text": "  // We can safely call execv() as it's almost a direct system call. We\n  // cannot use execvp() as it's a libc function and thus potentially\n  // unsafe.  Since execv() doesn't search the PATH, the user must\n  // invoke the test program via a valid path that contains at least\n  // one path separator.\n  execv(args->argv[0], args->argv);\n  DeathTestAbort(std::string(\"execv(\") + args->argv[0] + \", ...) in \" +\n",
                    "rendered": {
                      "text": "  // We can safely call execv() as it's almost a direct system call. We\n  // cannot use execvp() as it's a libc function and thus potentially\n  // unsafe.  Since execv() doesn't search the PATH, the user must\n  // invoke the test program via a valid path that contains at least\n  // one path separator.\n  execv(args->argv[0], args->argv);\n  DeathTestAbort(std::string(\"execv(\") + args->argv[0] + \", ...) in \" +\n",
                      "markdown": "`  // We can safely call execv() as it's almost a direct system call. We\n  // cannot use execvp() as it's a libc function and thus potentially\n  // unsafe.  Since execv() doesn't search the PATH, the user must\n  // invoke the test program via a valid path that contains at least\n  // one path separator.\n  execv(args->argv[0], args->argv);\n  DeathTestAbort(std::string(\"execv(\") + args->argv[0] + \", ...) in \" +\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 8775,
                  "startColumn": 3,
                  "endLine": 8775,
                  "endColumn": 7,
                  "snippet": {
                    "text": "      break;\n    }\n    ret += output.substr(at, line_end + 1 - at);\n    at = line_end + 1;\n  }\n  return ret;\n}\n",
                    "rendered": {
                      "text": "      break;\n    }\n    ret += output.substr(at, line_end + 1 - at);\n    at = line_end + 1;\n  }\n  return ret;\n}\n",
                      "markdown": "`      break;\n    }\n    ret += output.substr(at, line_end + 1 - at);\n    at = line_end + 1;\n  }\n  return ret;\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 8767,
                  "startColumn": 13,
                  "endLine": 8767,
                  "endColumn": 17,
                  "snippet": {
                    "text": "// much easier.\nstatic ::std::string FormatDeathTestOutput(const ::std::string& output) {\n  ::std::string ret;\n  for (size_t at = 0; ; ) {\n    const size_t line_end = output.find('\\n', at);\n    ret += \"[  DEATH   ] \";\n    if (line_end == ::std::string::npos) {\n",
                    "rendered": {
                      "text": "// much easier.\nstatic ::std::string FormatDeathTestOutput(const ::std::string& output) {\n  ::std::string ret;\n  for (size_t at = 0; ; ) {\n    const size_t line_end = output.find('\\n', at);\n    ret += \"[  DEATH   ] \";\n    if (line_end == ::std::string::npos) {\n",
                      "markdown": "`// much easier.\nstatic ::std::string FormatDeathTestOutput(const ::std::string& output) {\n  ::std::string ret;\n  for (size_t at = 0; ; ) {\n    const size_t line_end = output.find('\\n', at);\n    ret += \"[  DEATH   ] \";\n    if (line_end == ::std::string::npos) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 8508,
                  "startColumn": 11,
                  "endLine": 8508,
                  "endColumn": 20,
                  "snippet": {
                    "text": "// code; LIVED means that process lived beyond the end of the test code;\n// RETURNED means that the test statement attempted to execute a return\n// statement, which is not allowed; THREW means that the test statement\n// returned control by throwing an exception.  IN_PROGRESS means the test\n// has not yet concluded.\nenum DeathTestOutcome { IN_PROGRESS, DIED, LIVED, RETURNED, THREW };\n\n",
                    "rendered": {
                      "text": "// code; LIVED means that process lived beyond the end of the test code;\n// RETURNED means that the test statement attempted to execute a return\n// statement, which is not allowed; THREW means that the test statement\n// returned control by throwing an exception.  IN_PROGRESS means the test\n// has not yet concluded.\nenum DeathTestOutcome { IN_PROGRESS, DIED, LIVED, RETURNED, THREW };\n\n",
                      "markdown": "`// code; LIVED means that process lived beyond the end of the test code;\n// RETURNED means that the test statement attempted to execute a return\n// statement, which is not allowed; THREW means that the test statement\n// returned control by throwing an exception.  IN_PROGRESS means the test\n// has not yet concluded.\nenum DeathTestOutcome { IN_PROGRESS, DIED, LIVED, RETURNED, THREW };\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 8327,
                  "startColumn": 18,
                  "endLine": 8327,
                  "endColumn": 22,
                  "snippet": {
                    "text": "//\n// This is defined in internal/gtest-port.h as \"fast\", but can be overridden by\n// a definition in internal/custom/gtest-port.h. The recommended value, which is\n// used internally at Google, is \"threadsafe\".\nstatic const char kDefaultDeathTestStyle[] = GTEST_DEFAULT_DEATH_TEST_STYLE;\n\nGTEST_DEFINE_string_(\n",
                    "rendered": {
                      "text": "//\n// This is defined in internal/gtest-port.h as \"fast\", but can be overridden by\n// a definition in internal/custom/gtest-port.h. The recommended value, which is\n// used internally at Google, is \"threadsafe\".\nstatic const char kDefaultDeathTestStyle[] = GTEST_DEFAULT_DEATH_TEST_STYLE;\n\nGTEST_DEFINE_string_(\n",
                      "markdown": "`//\n// This is defined in internal/gtest-port.h as \"fast\", but can be overridden by\n// a definition in internal/custom/gtest-port.h. The recommended value, which is\n// used internally at Google, is \"threadsafe\".\nstatic const char kDefaultDeathTestStyle[] = GTEST_DEFAULT_DEATH_TEST_STYLE;\n\nGTEST_DEFINE_string_(\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 8090,
                  "startColumn": 31,
                  "endLine": 8090,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n  if (g_help_flag) {\n    // We print the help here instead of in RUN_ALL_TESTS(), as the\n    // latter may not be called at all if the user is using Google\n    // Test with another testing framework.\n    PrintColorEncoded(kColorEncodedHelpMessage);\n  }\n",
                    "rendered": {
                      "text": "\n  if (g_help_flag) {\n    // We print the help here instead of in RUN_ALL_TESTS(), as the\n    // latter may not be called at all if the user is using Google\n    // Test with another testing framework.\n    PrintColorEncoded(kColorEncodedHelpMessage);\n  }\n",
                      "markdown": "`\n  if (g_help_flag) {\n    // We print the help here instead of in RUN_ALL_TESTS(), as the\n    // latter may not be called at all if the user is using Google\n    // Test with another testing framework.\n    PrintColorEncoded(kColorEncodedHelpMessage);\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 7901,
                  "startColumn": 36,
                  "endLine": 7901,
                  "endColumn": 45,
                  "snippet": {
                    "text": "static const char kColorEncodedHelpMessage[] =\n    \"This program contains tests written using \" GTEST_NAME_\n    \". You can use the\\n\"\n    \"following command line flags to control its behavior:\\n\"\n    \"\\n\"\n    \"Test Selection:\\n\"\n    \"  @G--\" GTEST_FLAG_PREFIX_\n",
                    "rendered": {
                      "text": "static const char kColorEncodedHelpMessage[] =\n    \"This program contains tests written using \" GTEST_NAME_\n    \". You can use the\\n\"\n    \"following command line flags to control its behavior:\\n\"\n    \"\\n\"\n    \"Test Selection:\\n\"\n    \"  @G--\" GTEST_FLAG_PREFIX_\n",
                      "markdown": "`static const char kColorEncodedHelpMessage[] =\n    \"This program contains tests written using \" GTEST_NAME_\n    \". You can use the\\n\"\n    \"following command line flags to control its behavior:\\n\"\n    \"\\n\"\n    \"Test Selection:\\n\"\n    \"  @G--\" GTEST_FLAG_PREFIX_\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 7868,
                  "startColumn": 54,
                  "endLine": 7868,
                  "endColumn": 58,
                  "snippet": {
                    "text": "  GTestColor color = GTestColor::kDefault;  // The current color.\n\n  // Conceptually, we split the string into segments divided by escape\n  // sequences.  Then we print one segment at a time.  At the end of\n  // each iteration, the str pointer advances to the beginning of the\n  // next segment.\n  for (;;) {\n",
                    "rendered": {
                      "text": "  GTestColor color = GTestColor::kDefault;  // The current color.\n\n  // Conceptually, we split the string into segments divided by escape\n  // sequences.  Then we print one segment at a time.  At the end of\n  // each iteration, the str pointer advances to the beginning of the\n  // next segment.\n  for (;;) {\n",
                      "markdown": "`  GTestColor color = GTestColor::kDefault;  // The current color.\n\n  // Conceptually, we split the string into segments divided by escape\n  // sequences.  Then we print one segment at a time.  At the end of\n  // each iteration, the str pointer advances to the beginning of the\n  // next segment.\n  for (;;) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 7868,
                  "startColumn": 42,
                  "endLine": 7868,
                  "endColumn": 46,
                  "snippet": {
                    "text": "  GTestColor color = GTestColor::kDefault;  // The current color.\n\n  // Conceptually, we split the string into segments divided by escape\n  // sequences.  Then we print one segment at a time.  At the end of\n  // each iteration, the str pointer advances to the beginning of the\n  // next segment.\n  for (;;) {\n",
                    "rendered": {
                      "text": "  GTestColor color = GTestColor::kDefault;  // The current color.\n\n  // Conceptually, we split the string into segments divided by escape\n  // sequences.  Then we print one segment at a time.  At the end of\n  // each iteration, the str pointer advances to the beginning of the\n  // next segment.\n  for (;;) {\n",
                      "markdown": "`  GTestColor color = GTestColor::kDefault;  // The current color.\n\n  // Conceptually, we split the string into segments divided by escape\n  // sequences.  Then we print one segment at a time.  At the end of\n  // each iteration, the str pointer advances to the beginning of the\n  // next segment.\n  for (;;) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 7856,
                  "startColumn": 41,
                  "endLine": 7856,
                  "endColumn": 50,
                  "snippet": {
                    "text": "}\n\n// Prints a string containing code-encoded text.  The following escape\n// sequences can be used in the string to control the text color:\n//\n//   @@    prints a single '@' character.\n//   @R    changes the color to red.\n",
                    "rendered": {
                      "text": "}\n\n// Prints a string containing code-encoded text.  The following escape\n// sequences can be used in the string to control the text color:\n//\n//   @@    prints a single '@' character.\n//   @R    changes the color to red.\n",
                      "markdown": "`}\n\n// Prints a string containing code-encoded text.  The following escape\n// sequences can be used in the string to control the text color:\n//\n//   @@    prints a single '@' character.\n//   @R    changes the color to red.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 7590,
                  "startColumn": 10,
                  "endLine": 7590,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n// Prints the names of the tests matching the user-specified filter flag.\nvoid UnitTestImpl::ListTestsMatchingFilter() {\n  // Print at most this many characters for each type/value parameter.\n  const int kMaxParamLength = 250;\n\n  for (auto* test_suite : test_suites_) {\n",
                    "rendered": {
                      "text": "\n// Prints the names of the tests matching the user-specified filter flag.\nvoid UnitTestImpl::ListTestsMatchingFilter() {\n  // Print at most this many characters for each type/value parameter.\n  const int kMaxParamLength = 250;\n\n  for (auto* test_suite : test_suites_) {\n",
                      "markdown": "`\n// Prints the names of the tests matching the user-specified filter flag.\nvoid UnitTestImpl::ListTestsMatchingFilter() {\n  // Print at most this many characters for each type/value parameter.\n  const int kMaxParamLength = 250;\n\n  for (auto* test_suite : test_suites_) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 7416,
                  "startColumn": 55,
                  "endLine": 7416,
                  "endColumn": 59,
                  "snippet": {
                    "text": "}\n\n// Reads the GTEST_SHARD_STATUS_FILE environment variable, and creates the file\n// if the variable is present. If a file already exists at this location, this\n// function will write over it. If the variable is present, but the file cannot\n// be created, prints an error and exits.\nvoid WriteToShardStatusFileIfNeeded() {\n",
                    "rendered": {
                      "text": "}\n\n// Reads the GTEST_SHARD_STATUS_FILE environment variable, and creates the file\n// if the variable is present. If a file already exists at this location, this\n// function will write over it. If the variable is present, but the file cannot\n// be created, prints an error and exits.\nvoid WriteToShardStatusFileIfNeeded() {\n",
                      "markdown": "`}\n\n// Reads the GTEST_SHARD_STATUS_FILE environment variable, and creates the file\n// if the variable is present. If a file already exists at this location, this\n// function will write over it. If the variable is present, but the file cannot\n// be created, prints an error and exits.\nvoid WriteToShardStatusFileIfNeeded() {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 7320,
                  "startColumn": 39,
                  "endLine": 7320,
                  "endColumn": 43,
                  "snippet": {
                    "text": "    // Tells the unit test event listeners that the tests are about to start.\n    repeater->OnTestIterationStart(*parent_, i);\n\n    // Runs each test suite if there is at least one test to run.\n    if (has_tests_to_run) {\n      // Sets up all environments beforehand.\n      repeater->OnEnvironmentsSetUpStart(*parent_);\n",
                    "rendered": {
                      "text": "    // Tells the unit test event listeners that the tests are about to start.\n    repeater->OnTestIterationStart(*parent_, i);\n\n    // Runs each test suite if there is at least one test to run.\n    if (has_tests_to_run) {\n      // Sets up all environments beforehand.\n      repeater->OnEnvironmentsSetUpStart(*parent_);\n",
                      "markdown": "`    // Tells the unit test event listeners that the tests are about to start.\n    repeater->OnTestIterationStart(*parent_, i);\n\n    // Runs each test suite if there is at least one test to run.\n    if (has_tests_to_run) {\n      // Sets up all environments beforehand.\n      repeater->OnEnvironmentsSetUpStart(*parent_);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 7288,
                  "startColumn": 24,
                  "endLine": 7288,
                  "endColumn": 28,
                  "snippet": {
                    "text": "  random_seed_ = GTEST_FLAG(shuffle) ?\n      GetRandomSeedFromFlag(GTEST_FLAG(random_seed)) : 0;\n\n  // True if and only if at least one test has failed.\n  bool failed = false;\n\n  TestEventListener* repeater = listeners()->repeater();\n",
                    "rendered": {
                      "text": "  random_seed_ = GTEST_FLAG(shuffle) ?\n      GetRandomSeedFromFlag(GTEST_FLAG(random_seed)) : 0;\n\n  // True if and only if at least one test has failed.\n  bool failed = false;\n\n  TestEventListener* repeater = listeners()->repeater();\n",
                      "markdown": "`  random_seed_ = GTEST_FLAG(shuffle) ?\n      GetRandomSeedFromFlag(GTEST_FLAG(random_seed)) : 0;\n\n  // True if and only if at least one test has failed.\n  bool failed = false;\n\n  TestEventListener* repeater = listeners()->repeater();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 7065,
                  "startColumn": 35,
                  "endLine": 7065,
                  "endColumn": 44,
                  "snippet": {
                    "text": "}\n\n#if GTEST_HAS_DEATH_TEST\n// Disables event forwarding if the control is currently in a death test\n// subprocess. Must not be called before InitGoogleTest.\nvoid UnitTestImpl::SuppressTestEventsIfInSubprocess() {\n  if (internal_run_death_test_flag_.get() != nullptr)\n",
                    "rendered": {
                      "text": "}\n\n#if GTEST_HAS_DEATH_TEST\n// Disables event forwarding if the control is currently in a death test\n// subprocess. Must not be called before InitGoogleTest.\nvoid UnitTestImpl::SuppressTestEventsIfInSubprocess() {\n  if (internal_run_death_test_flag_.get() != nullptr)\n",
                      "markdown": "`}\n\n#if GTEST_HAS_DEATH_TEST\n// Disables event forwarding if the control is currently in a death test\n// subprocess. Must not be called before InitGoogleTest.\nvoid UnitTestImpl::SuppressTestEventsIfInSubprocess() {\n  if (internal_run_death_test_flag_.get() != nullptr)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 6966,
                  "startColumn": 31,
                  "endLine": 6966,
                  "endColumn": 35,
                  "snippet": {
                    "text": "  return impl_->current_test_info();\n}\n\n// Returns the random seed used at the start of the current test run.\nint UnitTest::random_seed() const { return impl_->random_seed(); }\n\n// Returns ParameterizedTestSuiteRegistry object used to keep track of\n",
                    "rendered": {
                      "text": "  return impl_->current_test_info();\n}\n\n// Returns the random seed used at the start of the current test run.\nint UnitTest::random_seed() const { return impl_->random_seed(); }\n\n// Returns ParameterizedTestSuiteRegistry object used to keep track of\n",
                      "markdown": "`  return impl_->current_test_info();\n}\n\n// Returns the random seed used at the start of the current test run.\nint UnitTest::random_seed() const { return impl_->random_seed(); }\n\n// Returns ParameterizedTestSuiteRegistry object used to keep track of\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 6866,
                  "startColumn": 16,
                  "endLine": 6866,
                  "endColumn": 20,
                  "snippet": {
                    "text": "  //\n  // This allows a test runner to set TEST_PREMATURE_EXIT_FILE before\n  // running a Google-Test-based test program and check the existence\n  // of the file at the end of the test execution to see if it has\n  // exited prematurely.\n\n  // If we are in the child process of a death test, don't\n",
                    "rendered": {
                      "text": "  //\n  // This allows a test runner to set TEST_PREMATURE_EXIT_FILE before\n  // running a Google-Test-based test program and check the existence\n  // of the file at the end of the test execution to see if it has\n  // exited prematurely.\n\n  // If we are in the child process of a death test, don't\n",
                      "markdown": "`  //\n  // This allows a test runner to set TEST_PREMATURE_EXIT_FILE before\n  // running a Google-Test-based test program and check the existence\n  // of the file at the end of the test execution to see if it has\n  // exited prematurely.\n\n  // If we are in the child process of a death test, don't\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 6857,
                  "startColumn": 35,
                  "endLine": 6857,
                  "endColumn": 44,
                  "snippet": {
                    "text": "      internal::GTEST_FLAG(internal_run_death_test).length() > 0;\n\n  // Google Test implements this protocol for catching that a test\n  // program exits before returning control to Google Test:\n  //\n  //   1. Upon start, Google Test creates a file whose absolute path\n  //      is specified by the environment variable\n",
                    "rendered": {
                      "text": "      internal::GTEST_FLAG(internal_run_death_test).length() > 0;\n\n  // Google Test implements this protocol for catching that a test\n  // program exits before returning control to Google Test:\n  //\n  //   1. Upon start, Google Test creates a file whose absolute path\n  //      is specified by the environment variable\n",
                      "markdown": "`      internal::GTEST_FLAG(internal_run_death_test).length() > 0;\n\n  // Google Test implements this protocol for catching that a test\n  // program exits before returning control to Google Test:\n  //\n  //   1. Upon start, Google Test creates a file whose absolute path\n  //      is specified by the environment variable\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 6643,
                  "startColumn": 50,
                  "endLine": 6643,
                  "endColumn": 54,
                  "snippet": {
                    "text": "  return impl()->total_test_suite_count();\n}\n\n// Gets the number of all test suites that contain at least one test\n// that should run.\nint UnitTest::test_suite_to_run_count() const {\n  return impl()->test_suite_to_run_count();\n",
                    "rendered": {
                      "text": "  return impl()->total_test_suite_count();\n}\n\n// Gets the number of all test suites that contain at least one test\n// that should run.\nint UnitTest::test_suite_to_run_count() const {\n  return impl()->test_suite_to_run_count();\n",
                      "markdown": "`  return impl()->total_test_suite_count();\n}\n\n// Gets the number of all test suites that contain at least one test\n// that should run.\nint UnitTest::test_suite_to_run_count() const {\n  return impl()->test_suite_to_run_count();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 5447,
                  "startColumn": 59,
                  "endLine": 5447,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\n  // Produces a string representing the test properties in a result as space\n  // delimited XML attributes based on the property key=\"value\" pairs.\n  // When the std::string is not empty, it includes a space at the beginning,\n  // to delimit this attribute from prior attributes.\n  static std::string TestPropertiesAsXmlAttributes(const TestResult& result);\n\n",
                    "rendered": {
                      "text": "\n  // Produces a string representing the test properties in a result as space\n  // delimited XML attributes based on the property key=\"value\" pairs.\n  // When the std::string is not empty, it includes a space at the beginning,\n  // to delimit this attribute from prior attributes.\n  static std::string TestPropertiesAsXmlAttributes(const TestResult& result);\n\n",
                      "markdown": "`\n  // Produces a string representing the test properties in a result as space\n  // delimited XML attributes based on the property key=\"value\" pairs.\n  // When the std::string is not empty, it includes a space at the beginning,\n  // to delimit this attribute from prior attributes.\n  static std::string TestPropertiesAsXmlAttributes(const TestResult& result);\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 4127,
                  "startColumn": 44,
                  "endLine": 4127,
                  "endColumn": 48,
                  "snippet": {
                    "text": "  // the debugger when the exception is thrown. On most platforms, once the\n  // control enters the catch block, the exception origin information is\n  // lost and the debugger will stop the program at the point of the\n  // re-throw in this function -- instead of at the point of the original\n  // throw statement in the code under test.  For this reason, we perform\n  // the check early, sacrificing the ability to affect Google Test's\n  // exception handling in the method where the exception is thrown.\n",
                    "rendered": {
                      "text": "  // the debugger when the exception is thrown. On most platforms, once the\n  // control enters the catch block, the exception origin information is\n  // lost and the debugger will stop the program at the point of the\n  // re-throw in this function -- instead of at the point of the original\n  // throw statement in the code under test.  For this reason, we perform\n  // the check early, sacrificing the ability to affect Google Test's\n  // exception handling in the method where the exception is thrown.\n",
                      "markdown": "`  // the debugger when the exception is thrown. On most platforms, once the\n  // control enters the catch block, the exception origin information is\n  // lost and the debugger will stop the program at the point of the\n  // re-throw in this function -- instead of at the point of the original\n  // throw statement in the code under test.  For this reason, we perform\n  // the check early, sacrificing the ability to affect Google Test's\n  // exception handling in the method where the exception is thrown.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 4126,
                  "startColumn": 48,
                  "endLine": 4126,
                  "endColumn": 52,
                  "snippet": {
                    "text": "  // However, the purpose of this flag is to allow the program to drop into\n  // the debugger when the exception is thrown. On most platforms, once the\n  // control enters the catch block, the exception origin information is\n  // lost and the debugger will stop the program at the point of the\n  // re-throw in this function -- instead of at the point of the original\n  // throw statement in the code under test.  For this reason, we perform\n  // the check early, sacrificing the ability to affect Google Test's\n",
                    "rendered": {
                      "text": "  // However, the purpose of this flag is to allow the program to drop into\n  // the debugger when the exception is thrown. On most platforms, once the\n  // control enters the catch block, the exception origin information is\n  // lost and the debugger will stop the program at the point of the\n  // re-throw in this function -- instead of at the point of the original\n  // throw statement in the code under test.  For this reason, we perform\n  // the check early, sacrificing the ability to affect Google Test's\n",
                      "markdown": "`  // However, the purpose of this flag is to allow the program to drop into\n  // the debugger when the exception is thrown. On most platforms, once the\n  // control enters the catch block, the exception origin information is\n  // lost and the debugger will stop the program at the point of the\n  // re-throw in this function -- instead of at the point of the original\n  // throw statement in the code under test.  For this reason, we perform\n  // the check early, sacrificing the ability to affect Google Test's\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 4125,
                  "startColumn": 4,
                  "endLine": 4125,
                  "endColumn": 13,
                  "snippet": {
                    "text": "  //\n  // However, the purpose of this flag is to allow the program to drop into\n  // the debugger when the exception is thrown. On most platforms, once the\n  // control enters the catch block, the exception origin information is\n  // lost and the debugger will stop the program at the point of the\n  // re-throw in this function -- instead of at the point of the original\n  // throw statement in the code under test.  For this reason, we perform\n",
                    "rendered": {
                      "text": "  //\n  // However, the purpose of this flag is to allow the program to drop into\n  // the debugger when the exception is thrown. On most platforms, once the\n  // control enters the catch block, the exception origin information is\n  // lost and the debugger will stop the program at the point of the\n  // re-throw in this function -- instead of at the point of the original\n  // throw statement in the code under test.  For this reason, we perform\n",
                      "markdown": "`  //\n  // However, the purpose of this flag is to allow the program to drop into\n  // the debugger when the exception is thrown. On most platforms, once the\n  // control enters the catch block, the exception origin information is\n  // lost and the debugger will stop the program at the point of the\n  // re-throw in this function -- instead of at the point of the original\n  // throw statement in the code under test.  For this reason, we perform\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 2459,
                  "startColumn": 50,
                  "endLine": 2459,
                  "endColumn": 54,
                  "snippet": {
                    "text": "  return static_cast<int>(test_suites_.size());\n}\n\n// Gets the number of all test suites that contain at least one test\n// that should run.\nint UnitTestImpl::test_suite_to_run_count() const {\n  return CountIf(test_suites_, ShouldRunTestSuite);\n",
                    "rendered": {
                      "text": "  return static_cast<int>(test_suites_.size());\n}\n\n// Gets the number of all test suites that contain at least one test\n// that should run.\nint UnitTestImpl::test_suite_to_run_count() const {\n  return CountIf(test_suites_, ShouldRunTestSuite);\n",
                      "markdown": "`  return static_cast<int>(test_suites_.size());\n}\n\n// Gets the number of all test suites that contain at least one test\n// that should run.\nint UnitTestImpl::test_suite_to_run_count() const {\n  return CountIf(test_suites_, ShouldRunTestSuite);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 2224,
                  "startColumn": 25,
                  "endLine": 2224,
                  "endColumn": 29,
                  "snippet": {
                    "text": "                                        const std::string& test_name) {\n  const std::string& full_name = test_suite_name + \".\" + test_name.c_str();\n\n  // Split --gtest_filter at '-', if there is one, to separate into\n  // positive filter and negative filter portions\n  const char* const p = GTEST_FLAG(filter).c_str();\n  const char* const dash = strchr(p, '-');\n",
                    "rendered": {
                      "text": "                                        const std::string& test_name) {\n  const std::string& full_name = test_suite_name + \".\" + test_name.c_str();\n\n  // Split --gtest_filter at '-', if there is one, to separate into\n  // positive filter and negative filter portions\n  const char* const p = GTEST_FLAG(filter).c_str();\n  const char* const dash = strchr(p, '-');\n",
                      "markdown": "`                                        const std::string& test_name) {\n  const std::string& full_name = test_suite_name + \".\" + test_name.c_str();\n\n  // Split --gtest_filter at '-', if there is one, to separate into\n  // positive filter and negative filter portions\n  const char* const p = GTEST_FLAG(filter).c_str();\n  const char* const dash = strchr(p, '-');\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 1968,
                  "startColumn": 20,
                  "endLine": 1968,
                  "endColumn": 28,
                  "snippet": {
                    "text": "  const char kMissingInstantiation[] =  //\n      \" is defined via TEST_P, but never instantiated. None of the test cases \"\n      \"will run. Either no INSTANTIATE_TEST_SUITE_P is provided or the only \"\n      \"ones provided expand to nothing.\"\n      \"\\n\\n\"\n      \"Ideally, TEST_P definitions should only ever be included as part of \"\n      \"binaries that intend to use them. (As opposed to, for example, being \"\n",
                    "rendered": {
                      "text": "  const char kMissingInstantiation[] =  //\n      \" is defined via TEST_P, but never instantiated. None of the test cases \"\n      \"will run. Either no INSTANTIATE_TEST_SUITE_P is provided or the only \"\n      \"ones provided expand to nothing.\"\n      \"\\n\\n\"\n      \"Ideally, TEST_P definitions should only ever be included as part of \"\n      \"binaries that intend to use them. (As opposed to, for example, being \"\n",
                      "markdown": "`  const char kMissingInstantiation[] =  //\n      \" is defined via TEST_P, but never instantiated. None of the test cases \"\n      \"will run. Either no INSTANTIATE_TEST_SUITE_P is provided or the only \"\n      \"ones provided expand to nothing.\"\n      \"\\n\\n\"\n      \"Ideally, TEST_P definitions should only ever be included as part of \"\n      \"binaries that intend to use them. (As opposed to, for example, being \"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 1922,
                  "startColumn": 20,
                  "endLine": 1922,
                  "endColumn": 24,
                  "snippet": {
                    "text": "constexpr bool kErrorOnUninstantiatedParameterizedTest = true;\nconstexpr bool kErrorOnUninstantiatedTypeParameterizedTest = true;\n\n// A test that fails at a given file/line location with a given message.\nclass FailureTest : public Test {\n public:\n  explicit FailureTest(const CodeLocation& loc, std::string error_message,\n",
                    "rendered": {
                      "text": "constexpr bool kErrorOnUninstantiatedParameterizedTest = true;\nconstexpr bool kErrorOnUninstantiatedTypeParameterizedTest = true;\n\n// A test that fails at a given file/line location with a given message.\nclass FailureTest : public Test {\n public:\n  explicit FailureTest(const CodeLocation& loc, std::string error_message,\n",
                      "markdown": "`constexpr bool kErrorOnUninstantiatedParameterizedTest = true;\nconstexpr bool kErrorOnUninstantiatedTypeParameterizedTest = true;\n\n// A test that fails at a given file/line location with a given message.\nclass FailureTest : public Test {\n public:\n  explicit FailureTest(const CodeLocation& loc, std::string error_message,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 1918,
                  "startColumn": 48,
                  "endLine": 1918,
                  "endColumn": 52,
                  "snippet": {
                    "text": "// to creates test cases for it, a synthetic test case is\n// inserted to report ether an error or a log message.\n//\n// This configuration bit will likely be removed at some point.\nconstexpr bool kErrorOnUninstantiatedParameterizedTest = true;\nconstexpr bool kErrorOnUninstantiatedTypeParameterizedTest = true;\n\n",
                    "rendered": {
                      "text": "// to creates test cases for it, a synthetic test case is\n// inserted to report ether an error or a log message.\n//\n// This configuration bit will likely be removed at some point.\nconstexpr bool kErrorOnUninstantiatedParameterizedTest = true;\nconstexpr bool kErrorOnUninstantiatedTypeParameterizedTest = true;\n\n",
                      "markdown": "`// to creates test cases for it, a synthetic test case is\n// inserted to report ether an error or a log message.\n//\n// This configuration bit will likely be removed at some point.\nconstexpr bool kErrorOnUninstantiatedParameterizedTest = true;\nconstexpr bool kErrorOnUninstantiatedTypeParameterizedTest = true;\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 1883,
                  "startColumn": 50,
                  "endLine": 1883,
                  "endColumn": 54,
                  "snippet": {
                    "text": "  return test_suite->should_run() && test_suite->Failed();\n}\n\n// Returns true if and only if test_suite contains at least one test that\n// should run.\nstatic bool ShouldRunTestSuite(const TestSuite* test_suite) {\n  return test_suite->should_run();\n",
                    "rendered": {
                      "text": "  return test_suite->should_run() && test_suite->Failed();\n}\n\n// Returns true if and only if test_suite contains at least one test that\n// should run.\nstatic bool ShouldRunTestSuite(const TestSuite* test_suite) {\n  return test_suite->should_run();\n",
                      "markdown": "`  return test_suite->should_run() && test_suite->Failed();\n}\n\n// Returns true if and only if test_suite contains at least one test that\n// should run.\nstatic bool ShouldRunTestSuite(const TestSuite* test_suite) {\n  return test_suite->should_run();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 1591,
                  "startColumn": 11,
                  "endLine": 1591,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  // Sends the given message and a newline to the socket.\n  void SendLn(const std::string& message) { socket_writer_->SendLn(message); }\n\n  // Called at the start of streaming to notify the receiver what\n  // protocol we are using.\n  void Start() { SendLn(\"gtest_streaming_protocol_version=1.0\"); }\n\n",
                    "rendered": {
                      "text": "  // Sends the given message and a newline to the socket.\n  void SendLn(const std::string& message) { socket_writer_->SendLn(message); }\n\n  // Called at the start of streaming to notify the receiver what\n  // protocol we are using.\n  void Start() { SendLn(\"gtest_streaming_protocol_version=1.0\"); }\n\n",
                      "markdown": "`  // Sends the given message and a newline to the socket.\n  void SendLn(const std::string& message) { socket_writer_->SendLn(message); }\n\n  // Called at the start of streaming to notify the receiver what\n  // protocol we are using.\n  void Start() { SendLn(\"gtest_streaming_protocol_version=1.0\"); }\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 1350,
                  "startColumn": 46,
                  "endLine": 1350,
                  "endColumn": 50,
                  "snippet": {
                    "text": "  // A per-thread stack of traces created by the SCOPED_TRACE() macro.\n  internal::ThreadLocal<std::vector<TraceInfo> > gtest_trace_stack_;\n\n  // The value of GTEST_FLAG(catch_exceptions) at the moment RunAllTests()\n  // starts.\n  bool catch_exceptions_;\n\n",
                    "rendered": {
                      "text": "  // A per-thread stack of traces created by the SCOPED_TRACE() macro.\n  internal::ThreadLocal<std::vector<TraceInfo> > gtest_trace_stack_;\n\n  // The value of GTEST_FLAG(catch_exceptions) at the moment RunAllTests()\n  // starts.\n  bool catch_exceptions_;\n\n",
                      "markdown": "`  // A per-thread stack of traces created by the SCOPED_TRACE() macro.\n  internal::ThreadLocal<std::vector<TraceInfo> > gtest_trace_stack_;\n\n  // The value of GTEST_FLAG(catch_exceptions) at the moment RunAllTests()\n  // starts.\n  bool catch_exceptions_;\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 1327,
                  "startColumn": 32,
                  "endLine": 1327,
                  "endColumn": 36,
                  "snippet": {
                    "text": "  // True if and only if PostFlagParsingInit() has been called.\n  bool post_flag_parse_init_performed_;\n\n  // The random number seed used at the beginning of the test run.\n  int random_seed_;\n\n  // Our random number generator.\n",
                    "rendered": {
                      "text": "  // True if and only if PostFlagParsingInit() has been called.\n  bool post_flag_parse_init_performed_;\n\n  // The random number seed used at the beginning of the test run.\n  int random_seed_;\n\n  // Our random number generator.\n",
                      "markdown": "`  // True if and only if PostFlagParsingInit() has been called.\n  bool post_flag_parse_init_performed_;\n\n  // The random number seed used at the beginning of the test run.\n  int random_seed_;\n\n  // Our random number generator.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 1237,
                  "startColumn": 33,
                  "endLine": 1237,
                  "endColumn": 37,
                  "snippet": {
                    "text": "  friend class ::testing::UnitTest;\n\n  // Used by UnitTest::Run() to capture the state of\n  // GTEST_FLAG(catch_exceptions) at the moment it starts.\n  void set_catch_exceptions(bool value) { catch_exceptions_ = value; }\n\n  // The UnitTest object that owns this implementation object.\n",
                    "rendered": {
                      "text": "  friend class ::testing::UnitTest;\n\n  // Used by UnitTest::Run() to capture the state of\n  // GTEST_FLAG(catch_exceptions) at the moment it starts.\n  void set_catch_exceptions(bool value) { catch_exceptions_ = value; }\n\n  // The UnitTest object that owns this implementation object.\n",
                      "markdown": "`  friend class ::testing::UnitTest;\n\n  // Used by UnitTest::Run() to capture the state of\n  // GTEST_FLAG(catch_exceptions) at the moment it starts.\n  void set_catch_exceptions(bool value) { catch_exceptions_ = value; }\n\n  // The UnitTest object that owns this implementation object.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 1229,
                  "startColumn": 54,
                  "endLine": 1229,
                  "endColumn": 58,
                  "snippet": {
                    "text": "  // Restores the test suites and tests to their order before the first shuffle.\n  void UnshuffleTests();\n\n  // Returns the value of GTEST_FLAG(catch_exceptions) at the moment\n  // UnitTest::Run() starts.\n  bool catch_exceptions() const { return catch_exceptions_; }\n\n",
                    "rendered": {
                      "text": "  // Restores the test suites and tests to their order before the first shuffle.\n  void UnshuffleTests();\n\n  // Returns the value of GTEST_FLAG(catch_exceptions) at the moment\n  // UnitTest::Run() starts.\n  bool catch_exceptions() const { return catch_exceptions_; }\n\n",
                      "markdown": "`  // Restores the test suites and tests to their order before the first shuffle.\n  void UnshuffleTests();\n\n  // Returns the value of GTEST_FLAG(catch_exceptions) at the moment\n  // UnitTest::Run() starts.\n  bool catch_exceptions() const { return catch_exceptions_; }\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 1216,
                  "startColumn": 30,
                  "endLine": 1216,
                  "endColumn": 34,
                  "snippet": {
                    "text": "  // called more than once, it has to be idempotent.\n  void PostFlagParsingInit();\n\n  // Gets the random seed used at the start of the current test iteration.\n  int random_seed() const { return random_seed_; }\n\n  // Gets the random number generator.\n",
                    "rendered": {
                      "text": "  // called more than once, it has to be idempotent.\n  void PostFlagParsingInit();\n\n  // Gets the random seed used at the start of the current test iteration.\n  int random_seed() const { return random_seed_; }\n\n  // Gets the random number generator.\n",
                      "markdown": "`  // called more than once, it has to be idempotent.\n  void PostFlagParsingInit();\n\n  // Gets the random seed used at the start of the current test iteration.\n  int random_seed() const { return random_seed_; }\n\n  // Gets the random number generator.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 935,
                  "startColumn": 52,
                  "endLine": 935,
                  "endColumn": 56,
                  "snippet": {
                    "text": "  // Gets the number of all test suites.\n  int total_test_suite_count() const;\n\n  // Gets the number of all test suites that contain at least one test\n  // that should run.\n  int test_suite_to_run_count() const;\n\n",
                    "rendered": {
                      "text": "  // Gets the number of all test suites.\n  int total_test_suite_count() const;\n\n  // Gets the number of all test suites that contain at least one test\n  // that should run.\n  int test_suite_to_run_count() const;\n\n",
                      "markdown": "`  // Gets the number of all test suites.\n  int total_test_suite_count() const;\n\n  // Gets the number of all test suites that contain at least one test\n  // that should run.\n  int test_suite_to_run_count() const;\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 645,
                  "startColumn": 55,
                  "endLine": 645,
                  "endColumn": 59,
                  "snippet": {
                    "text": "GTEST_API_ std::string WideStringToUtf8(const wchar_t* str, int num_chars);\n\n// Reads the GTEST_SHARD_STATUS_FILE environment variable, and creates the file\n// if the variable is present. If a file already exists at this location, this\n// function will write over it. If the variable is present, but the file cannot\n// be created, prints an error and exits.\nvoid WriteToShardStatusFileIfNeeded();\n",
                    "rendered": {
                      "text": "GTEST_API_ std::string WideStringToUtf8(const wchar_t* str, int num_chars);\n\n// Reads the GTEST_SHARD_STATUS_FILE environment variable, and creates the file\n// if the variable is present. If a file already exists at this location, this\n// function will write over it. If the variable is present, but the file cannot\n// be created, prints an error and exits.\nvoid WriteToShardStatusFileIfNeeded();\n",
                      "markdown": "`GTEST_API_ std::string WideStringToUtf8(const wchar_t* str, int num_chars);\n\n// Reads the GTEST_SHARD_STATUS_FILE environment variable, and creates the file\n// if the variable is present. If a file already exists at this location, this\n// function will write over it. If the variable is present, but the file cannot\n// be created, prints an error and exits.\nvoid WriteToShardStatusFileIfNeeded();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 13919,
                  "startColumn": 60,
                  "endLine": 13920,
                  "snippet": {
                    "text": "};\n\n// A global registry holding the state of all mock objects that are\n// alive.  A mock object is added to this registry the first time\n// Mock::AllowLeak(), ON_CALL(), or EXPECT_CALL() is called on it.  It\n// is removed from the registry in the mock object's destructor.\nclass MockObjectRegistry {\n public:\n",
                    "rendered": {
                      "text": "};\n\n// A global registry holding the state of all mock objects that are\n// alive.  A mock object is added to this registry the first time\n// Mock::AllowLeak(), ON_CALL(), or EXPECT_CALL() is called on it.  It\n// is removed from the registry in the mock object's destructor.\nclass MockObjectRegistry {\n public:\n",
                      "markdown": "`};\n\n// A global registry holding the state of all mock objects that are\n// alive.  A mock object is added to this registry the first time\n// Mock::AllowLeak(), ON_CALL(), or EXPECT_CALL() is called on it.  It\n// is removed from the registry in the mock object's destructor.\nclass MockObjectRegistry {\n public:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 13832,
                  "startColumn": 43,
                  "endLine": 13832,
                  "endColumn": 49,
                  "snippet": {
                    "text": "    }\n  }\n\n  Assert(false, __FILE__, __LINE__, \"Cannot find expectation.\");\n  return Expectation();\n  // The above statement is just to make the code compile, and will\n  // never be executed.\n",
                    "rendered": {
                      "text": "    }\n  }\n\n  Assert(false, __FILE__, __LINE__, \"Cannot find expectation.\");\n  return Expectation();\n  // The above statement is just to make the code compile, and will\n  // never be executed.\n",
                      "markdown": "`    }\n  }\n\n  Assert(false, __FILE__, __LINE__, \"Cannot find expectation.\");\n  return Expectation();\n  // The above statement is just to make the code compile, and will\n  // never be executed.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 13072,
                  "startColumn": 59,
                  "endLine": 13072,
                  "endColumn": 65,
                  "snippet": {
                    "text": "  // (i.e. an element) and each element of right_ is a right hand side\n  // node (i.e. a matcher). The values in the left_ vector indicate\n  // outflow from that node to a node on the right_ side. The values\n  // in the right_ indicate inflow, and specify which left_ node is\n  // feeding that right_ node, if any. For example, left_[3] == 1 means\n  // there's a flow from element #3 to matcher #1. Such a flow would also\n  // be redundantly represented in the right_ vector as right_[1] == 3.\n",
                    "rendered": {
                      "text": "  // (i.e. an element) and each element of right_ is a right hand side\n  // node (i.e. a matcher). The values in the left_ vector indicate\n  // outflow from that node to a node on the right_ side. The values\n  // in the right_ indicate inflow, and specify which left_ node is\n  // feeding that right_ node, if any. For example, left_[3] == 1 means\n  // there's a flow from element #3 to matcher #1. Such a flow would also\n  // be redundantly represented in the right_ vector as right_[1] == 3.\n",
                      "markdown": "`  // (i.e. an element) and each element of right_ is a right hand side\n  // node (i.e. a matcher). The values in the left_ vector indicate\n  // outflow from that node to a node on the right_ side. The values\n  // in the right_ indicate inflow, and specify which left_ node is\n  // feeding that right_ node, if any. For example, left_[3] == 1 means\n  // there's a flow from element #3 to matcher #1. Such a flow would also\n  // be redundantly represented in the right_ vector as right_[1] == 3.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 13071,
                  "startColumn": 32,
                  "endLine": 13071,
                  "endColumn": 38,
                  "snippet": {
                    "text": "  // Each element of the left_ vector represents a left hand side node\n  // (i.e. an element) and each element of right_ is a right hand side\n  // node (i.e. a matcher). The values in the left_ vector indicate\n  // outflow from that node to a node on the right_ side. The values\n  // in the right_ indicate inflow, and specify which left_ node is\n  // feeding that right_ node, if any. For example, left_[3] == 1 means\n  // there's a flow from element #3 to matcher #1. Such a flow would also\n",
                    "rendered": {
                      "text": "  // Each element of the left_ vector represents a left hand side node\n  // (i.e. an element) and each element of right_ is a right hand side\n  // node (i.e. a matcher). The values in the left_ vector indicate\n  // outflow from that node to a node on the right_ side. The values\n  // in the right_ indicate inflow, and specify which left_ node is\n  // feeding that right_ node, if any. For example, left_[3] == 1 means\n  // there's a flow from element #3 to matcher #1. Such a flow would also\n",
                      "markdown": "`  // Each element of the left_ vector represents a left hand side node\n  // (i.e. an element) and each element of right_ is a right hand side\n  // node (i.e. a matcher). The values in the left_ vector indicate\n  // outflow from that node to a node on the right_ side. The values\n  // in the right_ indicate inflow, and specify which left_ node is\n  // feeding that right_ node, if any. For example, left_[3] == 1 means\n  // there's a flow from element #3 to matcher #1. Such a flow would also\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 13071,
                  "startColumn": 22,
                  "endLine": 13071,
                  "endColumn": 28,
                  "snippet": {
                    "text": "  // Each element of the left_ vector represents a left hand side node\n  // (i.e. an element) and each element of right_ is a right hand side\n  // node (i.e. a matcher). The values in the left_ vector indicate\n  // outflow from that node to a node on the right_ side. The values\n  // in the right_ indicate inflow, and specify which left_ node is\n  // feeding that right_ node, if any. For example, left_[3] == 1 means\n  // there's a flow from element #3 to matcher #1. Such a flow would also\n",
                    "rendered": {
                      "text": "  // Each element of the left_ vector represents a left hand side node\n  // (i.e. an element) and each element of right_ is a right hand side\n  // node (i.e. a matcher). The values in the left_ vector indicate\n  // outflow from that node to a node on the right_ side. The values\n  // in the right_ indicate inflow, and specify which left_ node is\n  // feeding that right_ node, if any. For example, left_[3] == 1 means\n  // there's a flow from element #3 to matcher #1. Such a flow would also\n",
                      "markdown": "`  // Each element of the left_ vector represents a left hand side node\n  // (i.e. an element) and each element of right_ is a right hand side\n  // node (i.e. a matcher). The values in the left_ vector indicate\n  // outflow from that node to a node on the right_ side. The values\n  // in the right_ indicate inflow, and specify which left_ node is\n  // feeding that right_ node, if any. For example, left_[3] == 1 means\n  // there's a flow from element #3 to matcher #1. Such a flow would also\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 13070,
                  "startColumn": 4,
                  "endLine": 13070,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  const MatchMatrix* graph_;  // not owned\n  // Each element of the left_ vector represents a left hand side node\n  // (i.e. an element) and each element of right_ is a right hand side\n  // node (i.e. a matcher). The values in the left_ vector indicate\n  // outflow from that node to a node on the right_ side. The values\n  // in the right_ indicate inflow, and specify which left_ node is\n  // feeding that right_ node, if any. For example, left_[3] == 1 means\n",
                    "rendered": {
                      "text": "  const MatchMatrix* graph_;  // not owned\n  // Each element of the left_ vector represents a left hand side node\n  // (i.e. an element) and each element of right_ is a right hand side\n  // node (i.e. a matcher). The values in the left_ vector indicate\n  // outflow from that node to a node on the right_ side. The values\n  // in the right_ indicate inflow, and specify which left_ node is\n  // feeding that right_ node, if any. For example, left_[3] == 1 means\n",
                      "markdown": "`  const MatchMatrix* graph_;  // not owned\n  // Each element of the left_ vector represents a left hand side node\n  // (i.e. an element) and each element of right_ is a right hand side\n  // node (i.e. a matcher). The values in the left_ vector indicate\n  // outflow from that node to a node on the right_ side. The values\n  // in the right_ indicate inflow, and specify which left_ node is\n  // feeding that right_ node, if any. For example, left_[3] == 1 means\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 13068,
                  "startColumn": 65,
                  "endLine": 13069,
                  "snippet": {
                    "text": "  }\n\n  const MatchMatrix* graph_;  // not owned\n  // Each element of the left_ vector represents a left hand side node\n  // (i.e. an element) and each element of right_ is a right hand side\n  // node (i.e. a matcher). The values in the left_ vector indicate\n  // outflow from that node to a node on the right_ side. The values\n  // in the right_ indicate inflow, and specify which left_ node is\n",
                    "rendered": {
                      "text": "  }\n\n  const MatchMatrix* graph_;  // not owned\n  // Each element of the left_ vector represents a left hand side node\n  // (i.e. an element) and each element of right_ is a right hand side\n  // node (i.e. a matcher). The values in the left_ vector indicate\n  // outflow from that node to a node on the right_ side. The values\n  // in the right_ indicate inflow, and specify which left_ node is\n",
                      "markdown": "`  }\n\n  const MatchMatrix* graph_;  // not owned\n  // Each element of the left_ vector represents a left hand side node\n  // (i.e. an element) and each element of right_ is a right hand side\n  // node (i.e. a matcher). The values in the left_ vector indicate\n  // outflow from that node to a node on the right_ side. The values\n  // in the right_ indicate inflow, and specify which left_ node is\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 13051,
                  "startColumn": 14,
                  "endLine": 13051,
                  "endColumn": 20,
                  "snippet": {
                    "text": "      // this edge is a dead end or leads to the sink.\n      //\n      // right_[irhs] == kUnused means that there is residual flow from\n      // right node irhs to the sink, so we can use that to finish this\n      // flow path and return success.\n      //\n      // Otherwise there is residual flow to some ilhs. We push flow\n",
                    "rendered": {
                      "text": "      // this edge is a dead end or leads to the sink.\n      //\n      // right_[irhs] == kUnused means that there is residual flow from\n      // right node irhs to the sink, so we can use that to finish this\n      // flow path and return success.\n      //\n      // Otherwise there is residual flow to some ilhs. We push flow\n",
                      "markdown": "`      // this edge is a dead end or leads to the sink.\n      //\n      // right_[irhs] == kUnused means that there is residual flow from\n      // right node irhs to the sink, so we can use that to finish this\n      // flow path and return success.\n      //\n      // Otherwise there is residual flow to some ilhs. We push flow\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 13033,
                  "startColumn": 42,
                  "endLine": 13033,
                  "endColumn": 48,
                  "snippet": {
                    "text": "  // to right nodes and are marked to eliminate cycles from the search.\n  //\n  // Left nodes will only be explored at most once because they\n  // are accessible from at most one right node in the residual flow\n  // graph.\n  //\n  // Note that left_[ilhs] is the only element of left_ that TryAugment will\n",
                    "rendered": {
                      "text": "  // to right nodes and are marked to eliminate cycles from the search.\n  //\n  // Left nodes will only be explored at most once because they\n  // are accessible from at most one right node in the residual flow\n  // graph.\n  //\n  // Note that left_[ilhs] is the only element of left_ that TryAugment will\n",
                      "markdown": "`  // to right nodes and are marked to eliminate cycles from the search.\n  //\n  // Left nodes will only be explored at most once because they\n  // are accessible from at most one right node in the residual flow\n  // graph.\n  //\n  // Note that left_[ilhs] is the only element of left_ that TryAugment will\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 13025,
                  "startColumn": 43,
                  "endLine": 13025,
                  "endColumn": 49,
                  "snippet": {
                    "text": " private:\n  static const size_t kUnused = static_cast<size_t>(-1);\n\n  // Perform a depth-first search from left node ilhs to the sink.  If a\n  // path is found, flow is added to the network by linking the left and\n  // right vector elements corresponding each segment of the path.\n  // Returns true if a path to sink was found, which means that a unit of\n",
                    "rendered": {
                      "text": " private:\n  static const size_t kUnused = static_cast<size_t>(-1);\n\n  // Perform a depth-first search from left node ilhs to the sink.  If a\n  // path is found, flow is added to the network by linking the left and\n  // right vector elements corresponding each segment of the path.\n  // Returns true if a path to sink was found, which means that a unit of\n",
                      "markdown": "` private:\n  static const size_t kUnused = static_cast<size_t>(-1);\n\n  // Perform a depth-first search from left node ilhs to the sink.  If a\n  // path is found, flow is added to the network by linking the left and\n  // right vector elements corresponding each segment of the path.\n  // Returns true if a path to sink was found, which means that a unit of\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 13005,
                  "startColumn": 49,
                  "endLine": 13005,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    // The flow is known to be possible or impossible by looking at the\n    // node once.\n    for (size_t ilhs = 0; ilhs < graph_->LhsSize(); ++ilhs) {\n      // Reset the path-marking vector and try to find a path from\n      // source to sink starting at the left_[ilhs] node.\n      GTEST_CHECK_(left_[ilhs] == kUnused)\n          << \"ilhs: \" << ilhs << \", left_[ilhs]: \" << left_[ilhs];\n",
                    "rendered": {
                      "text": "    // The flow is known to be possible or impossible by looking at the\n    // node once.\n    for (size_t ilhs = 0; ilhs < graph_->LhsSize(); ++ilhs) {\n      // Reset the path-marking vector and try to find a path from\n      // source to sink starting at the left_[ilhs] node.\n      GTEST_CHECK_(left_[ilhs] == kUnused)\n          << \"ilhs: \" << ilhs << \", left_[ilhs]: \" << left_[ilhs];\n",
                      "markdown": "`    // The flow is known to be possible or impossible by looking at the\n    // node once.\n    for (size_t ilhs = 0; ilhs < graph_->LhsSize(); ++ilhs) {\n      // Reset the path-marking vector and try to find a path from\n      // source to sink starting at the left_[ilhs] node.\n      GTEST_CHECK_(left_[ilhs] == kUnused)\n          << \"ilhs: \" << ilhs << \", left_[ilhs]: \" << left_[ilhs];\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 13003,
                  "startColumn": 6,
                  "endLine": 13003,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    // each element can be matched to only one matcher), there is no need\n    // to visit the left nodes more than once looking for augmented paths.\n    // The flow is known to be possible or impossible by looking at the\n    // node once.\n    for (size_t ilhs = 0; ilhs < graph_->LhsSize(); ++ilhs) {\n      // Reset the path-marking vector and try to find a path from\n      // source to sink starting at the left_[ilhs] node.\n",
                    "rendered": {
                      "text": "    // each element can be matched to only one matcher), there is no need\n    // to visit the left nodes more than once looking for augmented paths.\n    // The flow is known to be possible or impossible by looking at the\n    // node once.\n    for (size_t ilhs = 0; ilhs < graph_->LhsSize(); ++ilhs) {\n      // Reset the path-marking vector and try to find a path from\n      // source to sink starting at the left_[ilhs] node.\n",
                      "markdown": "`    // each element can be matched to only one matcher), there is no need\n    // to visit the left nodes more than once looking for augmented paths.\n    // The flow is known to be possible or impossible by looking at the\n    // node once.\n    for (size_t ilhs = 0; ilhs < graph_->LhsSize(); ++ilhs) {\n      // Reset the path-marking vector and try to find a path from\n      // source to sink starting at the left_[ilhs] node.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 12996,
                  "startColumn": 39,
                  "endLine": 12996,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    // the sink in the residual flow graph, and if one is found, add flow\n    // to the graph. It's okay to search through the left nodes once. The\n    // edge from the implicit source node to each previously-visited left\n    // node will have flow if that left node has any path to the sink\n    // whatsoever. Subsequent augmentations can only add flow to the\n    // network, and cannot take away that previous flow unit from the source.\n    // Since the source-to-left edge can only carry one flow unit (or,\n",
                    "rendered": {
                      "text": "    // the sink in the residual flow graph, and if one is found, add flow\n    // to the graph. It's okay to search through the left nodes once. The\n    // edge from the implicit source node to each previously-visited left\n    // node will have flow if that left node has any path to the sink\n    // whatsoever. Subsequent augmentations can only add flow to the\n    // network, and cannot take away that previous flow unit from the source.\n    // Since the source-to-left edge can only carry one flow unit (or,\n",
                      "markdown": "`    // the sink in the residual flow graph, and if one is found, add flow\n    // to the graph. It's okay to search through the left nodes once. The\n    // edge from the implicit source node to each previously-visited left\n    // node will have flow if that left node has any path to the sink\n    // whatsoever. Subsequent augmentations can only add flow to the\n    // network, and cannot take away that previous flow unit from the source.\n    // Since the source-to-left edge can only carry one flow unit (or,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 12996,
                  "startColumn": 6,
                  "endLine": 12996,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    // the sink in the residual flow graph, and if one is found, add flow\n    // to the graph. It's okay to search through the left nodes once. The\n    // edge from the implicit source node to each previously-visited left\n    // node will have flow if that left node has any path to the sink\n    // whatsoever. Subsequent augmentations can only add flow to the\n    // network, and cannot take away that previous flow unit from the source.\n    // Since the source-to-left edge can only carry one flow unit (or,\n",
                    "rendered": {
                      "text": "    // the sink in the residual flow graph, and if one is found, add flow\n    // to the graph. It's okay to search through the left nodes once. The\n    // edge from the implicit source node to each previously-visited left\n    // node will have flow if that left node has any path to the sink\n    // whatsoever. Subsequent augmentations can only add flow to the\n    // network, and cannot take away that previous flow unit from the source.\n    // Since the source-to-left edge can only carry one flow unit (or,\n",
                      "markdown": "`    // the sink in the residual flow graph, and if one is found, add flow\n    // to the graph. It's okay to search through the left nodes once. The\n    // edge from the implicit source node to each previously-visited left\n    // node will have flow if that left node has any path to the sink\n    // whatsoever. Subsequent augmentations can only add flow to the\n    // network, and cannot take away that previous flow unit from the source.\n    // Since the source-to-left edge can only carry one flow unit (or,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 12995,
                  "startColumn": 36,
                  "endLine": 12995,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    // Searches the residual flow graph for a path from each left node to\n    // the sink in the residual flow graph, and if one is found, add flow\n    // to the graph. It's okay to search through the left nodes once. The\n    // edge from the implicit source node to each previously-visited left\n    // node will have flow if that left node has any path to the sink\n    // whatsoever. Subsequent augmentations can only add flow to the\n    // network, and cannot take away that previous flow unit from the source.\n",
                    "rendered": {
                      "text": "    // Searches the residual flow graph for a path from each left node to\n    // the sink in the residual flow graph, and if one is found, add flow\n    // to the graph. It's okay to search through the left nodes once. The\n    // edge from the implicit source node to each previously-visited left\n    // node will have flow if that left node has any path to the sink\n    // whatsoever. Subsequent augmentations can only add flow to the\n    // network, and cannot take away that previous flow unit from the source.\n",
                      "markdown": "`    // Searches the residual flow graph for a path from each left node to\n    // the sink in the residual flow graph, and if one is found, add flow\n    // to the graph. It's okay to search through the left nodes once. The\n    // edge from the implicit source node to each previously-visited left\n    // node will have flow if that left node has any path to the sink\n    // whatsoever. Subsequent augmentations can only add flow to the\n    // network, and cannot take away that previous flow unit from the source.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 12992,
                  "startColumn": 65,
                  "endLine": 12992,
                  "endColumn": 71,
                  "snippet": {
                    "text": "  ElementMatcherPairs Compute() {\n    // 'seen' is used for path finding { 0: unseen, 1: seen }.\n    ::std::vector<char> seen;\n    // Searches the residual flow graph for a path from each left node to\n    // the sink in the residual flow graph, and if one is found, add flow\n    // to the graph. It's okay to search through the left nodes once. The\n    // edge from the implicit source node to each previously-visited left\n",
                    "rendered": {
                      "text": "  ElementMatcherPairs Compute() {\n    // 'seen' is used for path finding { 0: unseen, 1: seen }.\n    ::std::vector<char> seen;\n    // Searches the residual flow graph for a path from each left node to\n    // the sink in the residual flow graph, and if one is found, add flow\n    // to the graph. It's okay to search through the left nodes once. The\n    // edge from the implicit source node to each previously-visited left\n",
                      "markdown": "`  ElementMatcherPairs Compute() {\n    // 'seen' is used for path finding { 0: unseen, 1: seen }.\n    ::std::vector<char> seen;\n    // Searches the residual flow graph for a path from each left node to\n    // the sink in the residual flow graph, and if one is found, add flow\n    // to the graph. It's okay to search through the left nodes once. The\n    // edge from the implicit source node to each previously-visited left\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 12935,
                  "startColumn": 30,
                  "endLine": 12935,
                  "endColumn": 36,
                  "snippet": {
                    "text": "// following edges:\n//   - An edge from source to each left_ node\n//   - An edge from each right_ node to sink\n//   - An edge from each left_ node to each right_ node, if the\n//     corresponding edge exists in 'graph'.\n//\n// When the TryAugment() method adds a flow, it sets left_[l] = r for some\n",
                    "rendered": {
                      "text": "// following edges:\n//   - An edge from source to each left_ node\n//   - An edge from each right_ node to sink\n//   - An edge from each left_ node to each right_ node, if the\n//     corresponding edge exists in 'graph'.\n//\n// When the TryAugment() method adds a flow, it sets left_[l] = r for some\n",
                      "markdown": "`// following edges:\n//   - An edge from source to each left_ node\n//   - An edge from each right_ node to sink\n//   - An edge from each left_ node to each right_ node, if the\n//     corresponding edge exists in 'graph'.\n//\n// When the TryAugment() method adds a flow, it sets left_[l] = r for some\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 12934,
                  "startColumn": 31,
                  "endLine": 12934,
                  "endColumn": 37,
                  "snippet": {
                    "text": "// where the flow graph is empty, and the residual flow graph has the\n// following edges:\n//   - An edge from source to each left_ node\n//   - An edge from each right_ node to sink\n//   - An edge from each left_ node to each right_ node, if the\n//     corresponding edge exists in 'graph'.\n//\n",
                    "rendered": {
                      "text": "// where the flow graph is empty, and the residual flow graph has the\n// following edges:\n//   - An edge from source to each left_ node\n//   - An edge from each right_ node to sink\n//   - An edge from each left_ node to each right_ node, if the\n//     corresponding edge exists in 'graph'.\n//\n",
                      "markdown": "`// where the flow graph is empty, and the residual flow graph has the\n// following edges:\n//   - An edge from source to each left_ node\n//   - An edge from each right_ node to sink\n//   - An edge from each left_ node to each right_ node, if the\n//     corresponding edge exists in 'graph'.\n//\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 12933,
                  "startColumn": 40,
                  "endLine": 12934,
                  "snippet": {
                    "text": "// value kUnused. This represents the initial state of the algorithm,\n// where the flow graph is empty, and the residual flow graph has the\n// following edges:\n//   - An edge from source to each left_ node\n//   - An edge from each right_ node to sink\n//   - An edge from each left_ node to each right_ node, if the\n//     corresponding edge exists in 'graph'.\n//\n",
                    "rendered": {
                      "text": "// value kUnused. This represents the initial state of the algorithm,\n// where the flow graph is empty, and the residual flow graph has the\n// following edges:\n//   - An edge from source to each left_ node\n//   - An edge from each right_ node to sink\n//   - An edge from each left_ node to each right_ node, if the\n//     corresponding edge exists in 'graph'.\n//\n",
                      "markdown": "`// value kUnused. This represents the initial state of the algorithm,\n// where the flow graph is empty, and the residual flow graph has the\n// following edges:\n//   - An edge from source to each left_ node\n//   - An edge from each right_ node to sink\n//   - An edge from each left_ node to each right_ node, if the\n//     corresponding edge exists in 'graph'.\n//\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 12924,
                  "startColumn": 30,
                  "endLine": 12924,
                  "endColumn": 36,
                  "snippet": {
                    "text": "// Uses the well-known Ford-Fulkerson max flow method to find a maximum\n// bipartite matching. Flow is considered to be from left to right.\n// There is an implicit source node that is connected to all of the left\n// nodes, and an implicit sink node that is connected to all of the\n// right nodes. All edges have unit capacity.\n//\n// Neither the flow graph nor the residual flow graph are represented\n",
                    "rendered": {
                      "text": "// Uses the well-known Ford-Fulkerson max flow method to find a maximum\n// bipartite matching. Flow is considered to be from left to right.\n// There is an implicit source node that is connected to all of the left\n// nodes, and an implicit sink node that is connected to all of the\n// right nodes. All edges have unit capacity.\n//\n// Neither the flow graph nor the residual flow graph are represented\n",
                      "markdown": "`// Uses the well-known Ford-Fulkerson max flow method to find a maximum\n// bipartite matching. Flow is considered to be from left to right.\n// There is an implicit source node that is connected to all of the left\n// nodes, and an implicit sink node that is connected to all of the\n// right nodes. All edges have unit capacity.\n//\n// Neither the flow graph nor the residual flow graph are represented\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 12923,
                  "startColumn": 30,
                  "endLine": 12923,
                  "endColumn": 36,
                  "snippet": {
                    "text": "//\n// Uses the well-known Ford-Fulkerson max flow method to find a maximum\n// bipartite matching. Flow is considered to be from left to right.\n// There is an implicit source node that is connected to all of the left\n// nodes, and an implicit sink node that is connected to all of the\n// right nodes. All edges have unit capacity.\n//\n",
                    "rendered": {
                      "text": "//\n// Uses the well-known Ford-Fulkerson max flow method to find a maximum\n// bipartite matching. Flow is considered to be from left to right.\n// There is an implicit source node that is connected to all of the left\n// nodes, and an implicit sink node that is connected to all of the\n// right nodes. All edges have unit capacity.\n//\n",
                      "markdown": "`//\n// Uses the well-known Ford-Fulkerson max flow method to find a maximum\n// bipartite matching. Flow is considered to be from left to right.\n// There is an implicit source node that is connected to all of the left\n// nodes, and an implicit sink node that is connected to all of the\n// right nodes. All edges have unit capacity.\n//\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 12921,
                  "startColumn": 56,
                  "endLine": 12921,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\n// FindMaxBipartiteMatching and its helper class.\n//\n// Uses the well-known Ford-Fulkerson max flow method to find a maximum\n// bipartite matching. Flow is considered to be from left to right.\n// There is an implicit source node that is connected to all of the left\n// nodes, and an implicit sink node that is connected to all of the\n",
                    "rendered": {
                      "text": "\n// FindMaxBipartiteMatching and its helper class.\n//\n// Uses the well-known Ford-Fulkerson max flow method to find a maximum\n// bipartite matching. Flow is considered to be from left to right.\n// There is an implicit source node that is connected to all of the left\n// nodes, and an implicit sink node that is connected to all of the\n",
                      "markdown": "`\n// FindMaxBipartiteMatching and its helper class.\n//\n// Uses the well-known Ford-Fulkerson max flow method to find a maximum\n// bipartite matching. Flow is considered to be from left to right.\n// There is an implicit source node that is connected to all of the left\n// nodes, and an implicit sink node that is connected to all of the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 12805,
                  "startColumn": 47,
                  "endLine": 12806,
                  "snippet": {
                    "text": "\n// Prints the given message to stdout if and only if 'severity' >= the level\n// specified by the --gmock_verbose flag.  If stack_frames_to_skip >=\n// 0, also prints the stack trace excluding the top\n// stack_frames_to_skip frames.  In opt mode, any positive\n// stack_frames_to_skip is treated as 0, since we don't know which\n// function calls will be inlined by the compiler and need to be\n// conservative.\n",
                    "rendered": {
                      "text": "\n// Prints the given message to stdout if and only if 'severity' >= the level\n// specified by the --gmock_verbose flag.  If stack_frames_to_skip >=\n// 0, also prints the stack trace excluding the top\n// stack_frames_to_skip frames.  In opt mode, any positive\n// stack_frames_to_skip is treated as 0, since we don't know which\n// function calls will be inlined by the compiler and need to be\n// conservative.\n",
                      "markdown": "`\n// Prints the given message to stdout if and only if 'severity' >= the level\n// specified by the --gmock_verbose flag.  If stack_frames_to_skip >=\n// 0, also prints the stack trace excluding the top\n// stack_frames_to_skip frames.  In opt mode, any positive\n// stack_frames_to_skip is treated as 0, since we don't know which\n// function calls will be inlined by the compiler and need to be\n// conservative.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 12772,
                  "startColumn": 52,
                  "endLine": 12772,
                  "endColumn": 58,
                  "snippet": {
                    "text": "};\n\n// Returns the global failure reporter.  Will create a\n// GoogleTestFailureReporter and return it the first time called.\nGTEST_API_ FailureReporterInterface* GetFailureReporter() {\n  // Points to the global failure reporter used by Google Mock.  gcc\n  // guarantees that the following use of failure_reporter is\n",
                    "rendered": {
                      "text": "};\n\n// Returns the global failure reporter.  Will create a\n// GoogleTestFailureReporter and return it the first time called.\nGTEST_API_ FailureReporterInterface* GetFailureReporter() {\n  // Points to the global failure reporter used by Google Mock.  gcc\n  // guarantees that the following use of failure_reporter is\n",
                      "markdown": "`};\n\n// Returns the global failure reporter.  Will create a\n// GoogleTestFailureReporter and return it the first time called.\nGTEST_API_ FailureReporterInterface* GetFailureReporter() {\n  // Points to the global failure reporter used by Google Mock.  gcc\n  // guarantees that the following use of failure_reporter is\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 11708,
                  "startColumn": 28,
                  "endLine": 11708,
                  "endColumn": 33,
                  "snippet": {
                    "text": "// \"xml:\" prefix of GTEST_OUTPUT.\n// Note that this is meant to be called at the call site so it does\n// not check that the flag is 'output'\n// In essence this checks an env variable called XML_OUTPUT_FILE\n// and if it is set we prepend \"xml:\" to its value, if it not set we return \"\"\nstd::string OutputFlagAlsoCheckEnvVar(){\n  std::string default_value_for_output_flag = \"\";\n",
                    "rendered": {
                      "text": "// \"xml:\" prefix of GTEST_OUTPUT.\n// Note that this is meant to be called at the call site so it does\n// not check that the flag is 'output'\n// In essence this checks an env variable called XML_OUTPUT_FILE\n// and if it is set we prepend \"xml:\" to its value, if it not set we return \"\"\nstd::string OutputFlagAlsoCheckEnvVar(){\n  std::string default_value_for_output_flag = \"\";\n",
                      "markdown": "`// \"xml:\" prefix of GTEST_OUTPUT.\n// Note that this is meant to be called at the call site so it does\n// not check that the flag is 'output'\n// In essence this checks an env variable called XML_OUTPUT_FILE\n// and if it is set we prepend \"xml:\" to its value, if it not set we return \"\"\nstd::string OutputFlagAlsoCheckEnvVar(){\n  std::string default_value_for_output_flag = \"\";\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 11276,
                  "startColumn": 43,
                  "endLine": 11276,
                  "endColumn": 49,
                  "snippet": {
                    "text": "//\n// The algorithm is recursive, but the recursion depth doesn't exceed\n// the regex length, so we won't need to worry about running out of\n// stack space normally.  In rare cases the time complexity can be\n// exponential with respect to the regex length + the string length,\n// but usually it's must faster (often close to linear).\nbool MatchRegexAnywhere(const char* regex, const char* str) {\n",
                    "rendered": {
                      "text": "//\n// The algorithm is recursive, but the recursion depth doesn't exceed\n// the regex length, so we won't need to worry about running out of\n// stack space normally.  In rare cases the time complexity can be\n// exponential with respect to the regex length + the string length,\n// but usually it's must faster (often close to linear).\nbool MatchRegexAnywhere(const char* regex, const char* str) {\n",
                      "markdown": "`//\n// The algorithm is recursive, but the recursion depth doesn't exceed\n// the regex length, so we won't need to worry about running out of\n// stack space normally.  In rare cases the time complexity can be\n// exponential with respect to the regex length + the string length,\n// but usually it's must faster (often close to linear).\nbool MatchRegexAnywhere(const char* regex, const char* str) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 11230,
                  "startColumn": 62,
                  "endLine": 11230,
                  "endColumn": 68,
                  "snippet": {
                    "text": "    if (i >= min_count && MatchRegexAtHead(regex, str + i)) {\n      // We have enough matches at the head, and the tail matches too.\n      // Since we only care about *whether* the pattern matches str\n      // (as opposed to *how* it matches), there is no need to find a\n      // greedy match.\n      return true;\n    }\n",
                    "rendered": {
                      "text": "    if (i >= min_count && MatchRegexAtHead(regex, str + i)) {\n      // We have enough matches at the head, and the tail matches too.\n      // Since we only care about *whether* the pattern matches str\n      // (as opposed to *how* it matches), there is no need to find a\n      // greedy match.\n      return true;\n    }\n",
                      "markdown": "`    if (i >= min_count && MatchRegexAtHead(regex, str + i)) {\n      // We have enough matches at the head, and the tail matches too.\n      // Since we only care about *whether* the pattern matches str\n      // (as opposed to *how* it matches), there is no need to find a\n      // greedy match.\n      return true;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 11228,
                  "startColumn": 52,
                  "endLine": 11228,
                  "endColumn": 58,
                  "snippet": {
                    "text": "  for (size_t i = 0; i <= max_count; ++i) {\n    // We know that the atom matches each of the first i characters in str.\n    if (i >= min_count && MatchRegexAtHead(regex, str + i)) {\n      // We have enough matches at the head, and the tail matches too.\n      // Since we only care about *whether* the pattern matches str\n      // (as opposed to *how* it matches), there is no need to find a\n      // greedy match.\n",
                    "rendered": {
                      "text": "  for (size_t i = 0; i <= max_count; ++i) {\n    // We know that the atom matches each of the first i characters in str.\n    if (i >= min_count && MatchRegexAtHead(regex, str + i)) {\n      // We have enough matches at the head, and the tail matches too.\n      // Since we only care about *whether* the pattern matches str\n      // (as opposed to *how* it matches), there is no need to find a\n      // greedy match.\n",
                      "markdown": "`  for (size_t i = 0; i <= max_count; ++i) {\n    // We know that the atom matches each of the first i characters in str.\n    if (i >= min_count && MatchRegexAtHead(regex, str + i)) {\n      // We have enough matches at the head, and the tail matches too.\n      // Since we only care about *whether* the pattern matches str\n      // (as opposed to *how* it matches), there is no need to find a\n      // greedy match.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 11214,
                  "startColumn": 11,
                  "endLine": 11214,
                  "endColumn": 17,
                  "snippet": {
                    "text": "// or \\c otherwise.  repeat is the repetition meta character (?, *,\n// or +).  The behavior is undefined if str contains too many\n// characters to be indexable by size_t, in which case the test will\n// probably time out anyway.  We are fine with this limitation as\n// std::string has it too.\nbool MatchRepetitionAndRegexAtHead(\n    bool escaped, char c, char repeat, const char* regex,\n",
                    "rendered": {
                      "text": "// or \\c otherwise.  repeat is the repetition meta character (?, *,\n// or +).  The behavior is undefined if str contains too many\n// characters to be indexable by size_t, in which case the test will\n// probably time out anyway.  We are fine with this limitation as\n// std::string has it too.\nbool MatchRepetitionAndRegexAtHead(\n    bool escaped, char c, char repeat, const char* regex,\n",
                      "markdown": "`// or \\c otherwise.  repeat is the repetition meta character (?, *,\n// or +).  The behavior is undefined if str contains too many\n// characters to be indexable by size_t, in which case the test will\n// probably time out anyway.  We are fine with this limitation as\n// std::string has it too.\nbool MatchRepetitionAndRegexAtHead(\n    bool escaped, char c, char repeat, const char* regex,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 10776,
                  "startColumn": 53,
                  "endLine": 10776,
                  "endColumn": 59,
                  "snippet": {
                    "text": "        while (::InterlockedCompareExchange(&critical_section_init_phase_,\n                                            2L,\n                                            2L) != 2L) {\n          // Possibly yields the rest of the thread's time slice to other\n          // threads.\n          ::Sleep(0);\n        }\n",
                    "rendered": {
                      "text": "        while (::InterlockedCompareExchange(&critical_section_init_phase_,\n                                            2L,\n                                            2L) != 2L) {\n          // Possibly yields the rest of the thread's time slice to other\n          // threads.\n          ::Sleep(0);\n        }\n",
                      "markdown": "`        while (::InterlockedCompareExchange(&critical_section_init_phase_,\n                                            2L,\n                                            2L) != 2L) {\n          // Possibly yields the rest of the thread's time slice to other\n          // threads.\n          ::Sleep(0);\n        }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 10150,
                  "startColumn": 23,
                  "endLine": 10150,
                  "endColumn": 29,
                  "snippet": {
                    "text": "// that does not already exist.\n// Examples: 'dir/foo_test.xml' or 'dir/foo_test_1.xml'.\n// There could be a race condition if two or more processes are calling this\n// function at the same time -- they could both pick the same filename.\nFilePath FilePath::GenerateUniqueFileName(const FilePath& directory,\n                                          const FilePath& base_name,\n                                          const char* extension) {\n",
                    "rendered": {
                      "text": "// that does not already exist.\n// Examples: 'dir/foo_test.xml' or 'dir/foo_test_1.xml'.\n// There could be a race condition if two or more processes are calling this\n// function at the same time -- they could both pick the same filename.\nFilePath FilePath::GenerateUniqueFileName(const FilePath& directory,\n                                          const FilePath& base_name,\n                                          const char* extension) {\n",
                      "markdown": "`// that does not already exist.\n// Examples: 'dir/foo_test.xml' or 'dir/foo_test_1.xml'.\n// There could be a race condition if two or more processes are calling this\n// function at the same time -- they could both pick the same filename.\nFilePath FilePath::GenerateUniqueFileName(const FilePath& directory,\n                                          const FilePath& base_name,\n                                          const char* extension) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 8150,
                  "startColumn": 38,
                  "endLine": 8150,
                  "endColumn": 44,
                  "snippet": {
                    "text": "// No value is returned.  Instead, the Google Test flag variables are\n// updated.\n//\n// Calling the function for the second time has no user-visible effect.\nvoid InitGoogleTest(int* argc, char** argv) {\n#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)\n  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);\n",
                    "rendered": {
                      "text": "// No value is returned.  Instead, the Google Test flag variables are\n// updated.\n//\n// Calling the function for the second time has no user-visible effect.\nvoid InitGoogleTest(int* argc, char** argv) {\n#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)\n  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);\n",
                      "markdown": "`// No value is returned.  Instead, the Google Test flag variables are\n// updated.\n//\n// Calling the function for the second time has no user-visible effect.\nvoid InitGoogleTest(int* argc, char** argv) {\n#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)\n  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 7985,
                  "startColumn": 39,
                  "endLine": 7985,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    \"\\n\"\n    \"For more information, please read the \" GTEST_NAME_\n    \" documentation at\\n\"\n    \"@G\" GTEST_PROJECT_URL_ \"@D. If you find a bug in \" GTEST_NAME_\n    \"\\n\"\n    \"(not one in your own code or tests), please report it to\\n\"\n    \"@G<\" GTEST_DEV_EMAIL_ \">@D.\\n\";\n",
                    "rendered": {
                      "text": "    \"\\n\"\n    \"For more information, please read the \" GTEST_NAME_\n    \" documentation at\\n\"\n    \"@G\" GTEST_PROJECT_URL_ \"@D. If you find a bug in \" GTEST_NAME_\n    \"\\n\"\n    \"(not one in your own code or tests), please report it to\\n\"\n    \"@G<\" GTEST_DEV_EMAIL_ \">@D.\\n\";\n",
                      "markdown": "`    \"\\n\"\n    \"For more information, please read the \" GTEST_NAME_\n    \" documentation at\\n\"\n    \"@G\" GTEST_PROJECT_URL_ \"@D. If you find a bug in \" GTEST_NAME_\n    \"\\n\"\n    \"(not one in your own code or tests), please report it to\\n\"\n    \"@G<\" GTEST_DEV_EMAIL_ \">@D.\\n\";\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 7941,
                  "startColumn": 34,
                  "endLine": 7941,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    \"      Only print test failures.\\n\"\n    \"  @G--\" GTEST_FLAG_PREFIX_\n    \"print_time=0@D\\n\"\n    \"      Don't print the elapsed time of each test.\\n\"\n    \"  @G--\" GTEST_FLAG_PREFIX_\n    \"output=@Y(@Gjson@Y|@Gxml@Y)[@G:@YDIRECTORY_PATH@G\" GTEST_PATH_SEP_\n    \"@Y|@G:@YFILE_PATH]@D\\n\"\n",
                    "rendered": {
                      "text": "    \"      Only print test failures.\\n\"\n    \"  @G--\" GTEST_FLAG_PREFIX_\n    \"print_time=0@D\\n\"\n    \"      Don't print the elapsed time of each test.\\n\"\n    \"  @G--\" GTEST_FLAG_PREFIX_\n    \"output=@Y(@Gjson@Y|@Gxml@Y)[@G:@YDIRECTORY_PATH@G\" GTEST_PATH_SEP_\n    \"@Y|@G:@YFILE_PATH]@D\\n\"\n",
                      "markdown": "`    \"      Only print test failures.\\n\"\n    \"  @G--\" GTEST_FLAG_PREFIX_\n    \"print_time=0@D\\n\"\n    \"      Don't print the elapsed time of each test.\\n\"\n    \"  @G--\" GTEST_FLAG_PREFIX_\n    \"output=@Y(@Gjson@Y|@Gxml@Y)[@G:@YDIRECTORY_PATH@G\" GTEST_PATH_SEP_\n    \"@Y|@G:@YFILE_PATH]@D\\n\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 7710,
                  "startColumn": 26,
                  "endLine": 7710,
                  "endColumn": 31,
                  "snippet": {
                    "text": "//\n// The maximum number of stack frames to be included is specified by\n// the gtest_stack_trace_depth flag.  The skip_count parameter\n// specifies the number of top frames to be skipped, which doesn't\n// count against the number of frames to be included.\n//\n// For example, if Foo() calls Bar(), which in turn calls\n",
                    "rendered": {
                      "text": "//\n// The maximum number of stack frames to be included is specified by\n// the gtest_stack_trace_depth flag.  The skip_count parameter\n// specifies the number of top frames to be skipped, which doesn't\n// count against the number of frames to be included.\n//\n// For example, if Foo() calls Bar(), which in turn calls\n",
                      "markdown": "`//\n// The maximum number of stack frames to be included is specified by\n// the gtest_stack_trace_depth flag.  The skip_count parameter\n// specifies the number of top frames to be skipped, which doesn't\n// count against the number of frames to be included.\n//\n// For example, if Foo() calls Bar(), which in turn calls\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 7193,
                  "startColumn": 11,
                  "endLine": 7193,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    const char* test_suite_name, const char* type_param,\n    internal::SetUpTestSuiteFunc set_up_tc,\n    internal::TearDownTestSuiteFunc tear_down_tc) {\n  // Can we find a TestSuite with the given name?\n  const auto test_suite =\n      std::find_if(test_suites_.rbegin(), test_suites_.rend(),\n                   TestSuiteNameIs(test_suite_name));\n",
                    "rendered": {
                      "text": "    const char* test_suite_name, const char* type_param,\n    internal::SetUpTestSuiteFunc set_up_tc,\n    internal::TearDownTestSuiteFunc tear_down_tc) {\n  // Can we find a TestSuite with the given name?\n  const auto test_suite =\n      std::find_if(test_suites_.rbegin(), test_suites_.rend(),\n                   TestSuiteNameIs(test_suite_name));\n",
                      "markdown": "`    const char* test_suite_name, const char* type_param,\n    internal::SetUpTestSuiteFunc set_up_tc,\n    internal::TearDownTestSuiteFunc tear_down_tc) {\n  // Can we find a TestSuite with the given name?\n  const auto test_suite =\n      std::find_if(test_suites_.rbegin(), test_suites_.rend(),\n                   TestSuiteNameIs(test_suite_name));\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 6699,
                  "startColumn": 11,
                  "endLine": 6699,
                  "endColumn": 17,
                  "snippet": {
                    "text": "// Gets the number of tests that should run.\nint UnitTest::test_to_run_count() const { return impl()->test_to_run_count(); }\n\n// Gets the time of the test program start, in ms from the start of the\n// UNIX epoch.\ninternal::TimeInMillis UnitTest::start_timestamp() const {\n    return impl()->start_timestamp();\n",
                    "rendered": {
                      "text": "// Gets the number of tests that should run.\nint UnitTest::test_to_run_count() const { return impl()->test_to_run_count(); }\n\n// Gets the time of the test program start, in ms from the start of the\n// UNIX epoch.\ninternal::TimeInMillis UnitTest::start_timestamp() const {\n    return impl()->start_timestamp();\n",
                      "markdown": "`// Gets the number of tests that should run.\nint UnitTest::test_to_run_count() const { return impl()->test_to_run_count(); }\n\n// Gets the time of the test program start, in ms from the start of the\n// UNIX epoch.\ninternal::TimeInMillis UnitTest::start_timestamp() const {\n    return impl()->start_timestamp();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 6607,
                  "startColumn": 49,
                  "endLine": 6607,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\n// class UnitTest\n\n// Gets the singleton UnitTest object.  The first time this method is\n// called, a UnitTest object is constructed and returned.  Consecutive\n// calls will return the same object.\n//\n",
                    "rendered": {
                      "text": "\n// class UnitTest\n\n// Gets the singleton UnitTest object.  The first time this method is\n// called, a UnitTest object is constructed and returned.  Consecutive\n// calls will return the same object.\n//\n",
                      "markdown": "`\n// class UnitTest\n\n// Gets the singleton UnitTest object.  The first time this method is\n// called, a UnitTest object is constructed and returned.  Consecutive\n// calls will return the same object.\n//\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 6393,
                  "startColumn": 50,
                  "endLine": 6393,
                  "endColumn": 54,
                  "snippet": {
                    "text": "  hints.ai_socktype = SOCK_STREAM;\n  addrinfo* servinfo = nullptr;\n\n  // Use the getaddrinfo() to get a linked list of IP addresses for\n  // the given host name.\n  const int error_num = getaddrinfo(\n      host_name_.c_str(), port_num_.c_str(), &hints, &servinfo);\n",
                    "rendered": {
                      "text": "  hints.ai_socktype = SOCK_STREAM;\n  addrinfo* servinfo = nullptr;\n\n  // Use the getaddrinfo() to get a linked list of IP addresses for\n  // the given host name.\n  const int error_num = getaddrinfo(\n      host_name_.c_str(), port_num_.c_str(), &hints, &servinfo);\n",
                      "markdown": "`  hints.ai_socktype = SOCK_STREAM;\n  addrinfo* servinfo = nullptr;\n\n  // Use the getaddrinfo() to get a linked list of IP addresses for\n  // the given host name.\n  const int error_num = getaddrinfo(\n      host_name_.c_str(), port_num_.c_str(), &hints, &servinfo);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 6362,
                  "startColumn": 10,
                  "endLine": 6362,
                  "endColumn": 16,
                  "snippet": {
                    "text": "// Checks if str contains '=', '&', '%' or '\\n' characters. If yes,\n// replaces them by \"%xx\" where xx is their hexadecimal value. For\n// example, replaces \"=\" with \"%3D\".  This algorithm is O(strlen(str))\n// in both time and space -- important as the input str may contain an\n// arbitrarily long test failure message and stack trace.\nstd::string StreamingListener::UrlEncode(const char* str) {\n  std::string result;\n",
                    "rendered": {
                      "text": "// Checks if str contains '=', '&', '%' or '\\n' characters. If yes,\n// replaces them by \"%xx\" where xx is their hexadecimal value. For\n// example, replaces \"=\" with \"%3D\".  This algorithm is O(strlen(str))\n// in both time and space -- important as the input str may contain an\n// arbitrarily long test failure message and stack trace.\nstd::string StreamingListener::UrlEncode(const char* str) {\n  std::string result;\n",
                      "markdown": "`// Checks if str contains '=', '&', '%' or '\\n' characters. If yes,\n// replaces them by \"%xx\" where xx is their hexadecimal value. For\n// example, replaces \"=\" with \"%3D\".  This algorithm is O(strlen(str))\n// in both time and space -- important as the input str may contain an\n// arbitrarily long test failure message and stack trace.\nstd::string StreamingListener::UrlEncode(const char* str) {\n  std::string result;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 6048,
                  "startColumn": 27,
                  "endLine": 6048,
                  "endColumn": 33,
                  "snippet": {
                    "text": "  return ss.str();\n}\n\n// Converts the given epoch time in milliseconds to a date string in the\n// RFC3339 format, without the timezone information.\nstatic std::string FormatEpochTimeInMillisAsRFC3339(TimeInMillis ms) {\n  struct tm time_struct;\n",
                    "rendered": {
                      "text": "  return ss.str();\n}\n\n// Converts the given epoch time in milliseconds to a date string in the\n// RFC3339 format, without the timezone information.\nstatic std::string FormatEpochTimeInMillisAsRFC3339(TimeInMillis ms) {\n  struct tm time_struct;\n",
                      "markdown": "`  return ss.str();\n}\n\n// Converts the given epoch time in milliseconds to a date string in the\n// RFC3339 format, without the timezone information.\nstatic std::string FormatEpochTimeInMillisAsRFC3339(TimeInMillis ms) {\n  struct tm time_struct;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 6041,
                  "startColumn": 20,
                  "endLine": 6041,
                  "endColumn": 26,
                  "snippet": {
                    "text": "// The following routines generate an JSON representation of a UnitTest\n// object.\n\n// Formats the given time in milliseconds as seconds.\nstatic std::string FormatTimeInMillisAsDuration(TimeInMillis ms) {\n  ::std::stringstream ss;\n  ss << (static_cast<double>(ms) * 1e-3) << \"s\";\n",
                    "rendered": {
                      "text": "// The following routines generate an JSON representation of a UnitTest\n// object.\n\n// Formats the given time in milliseconds as seconds.\nstatic std::string FormatTimeInMillisAsDuration(TimeInMillis ms) {\n  ::std::stringstream ss;\n  ss << (static_cast<double>(ms) * 1e-3) << \"s\";\n",
                      "markdown": "`// The following routines generate an JSON representation of a UnitTest\n// object.\n\n// Formats the given time in milliseconds as seconds.\nstatic std::string FormatTimeInMillisAsDuration(TimeInMillis ms) {\n  ::std::stringstream ss;\n  ss << (static_cast<double>(ms) * 1e-3) << \"s\";\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 5599,
                  "startColumn": 27,
                  "endLine": 5599,
                  "endColumn": 33,
                  "snippet": {
                    "text": "#endif\n}\n\n// Converts the given epoch time in milliseconds to a date string in the ISO\n// 8601 format, without the timezone information.\nstd::string FormatEpochTimeInMillisAsIso8601(TimeInMillis ms) {\n  struct tm time_struct;\n",
                    "rendered": {
                      "text": "#endif\n}\n\n// Converts the given epoch time in milliseconds to a date string in the ISO\n// 8601 format, without the timezone information.\nstd::string FormatEpochTimeInMillisAsIso8601(TimeInMillis ms) {\n  struct tm time_struct;\n",
                      "markdown": "`#endif\n}\n\n// Converts the given epoch time in milliseconds to a date string in the ISO\n// 8601 format, without the timezone information.\nstd::string FormatEpochTimeInMillisAsIso8601(TimeInMillis ms) {\n  struct tm time_struct;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 5573,
                  "startColumn": 20,
                  "endLine": 5573,
                  "endColumn": 26,
                  "snippet": {
                    "text": "//   </testsuite>\n// </testsuites>\n\n// Formats the given time in milliseconds as seconds.\nstd::string FormatTimeInMillisAsSeconds(TimeInMillis ms) {\n  ::std::stringstream ss;\n  ss << (static_cast<double>(ms) * 1e-3);\n",
                    "rendered": {
                      "text": "//   </testsuite>\n// </testsuites>\n\n// Formats the given time in milliseconds as seconds.\nstd::string FormatTimeInMillisAsSeconds(TimeInMillis ms) {\n  ::std::stringstream ss;\n  ss << (static_cast<double>(ms) * 1e-3);\n",
                      "markdown": "`//   </testsuite>\n// </testsuites>\n\n// Formats the given time in milliseconds as seconds.\nstd::string FormatTimeInMillisAsSeconds(TimeInMillis ms) {\n  ::std::stringstream ss;\n  ss << (static_cast<double>(ms) * 1e-3);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 3090,
                  "startColumn": 18,
                  "endLine": 3090,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  }\n  return AssertionFailure()\n      << \"The difference between \" << expr1 << \" and \" << expr2\n      << \" is \" << diff << \", which exceeds \" << abs_error_expr << \", where\\n\"\n      << expr1 << \" evaluates to \" << val1 << \",\\n\"\n      << expr2 << \" evaluates to \" << val2 << \", and\\n\"\n      << abs_error_expr << \" evaluates to \" << abs_error << \".\";\n",
                    "rendered": {
                      "text": "  }\n  return AssertionFailure()\n      << \"The difference between \" << expr1 << \" and \" << expr2\n      << \" is \" << diff << \", which exceeds \" << abs_error_expr << \", where\\n\"\n      << expr1 << \" evaluates to \" << val1 << \",\\n\"\n      << expr2 << \" evaluates to \" << val2 << \", and\\n\"\n      << abs_error_expr << \" evaluates to \" << abs_error << \".\";\n",
                      "markdown": "`  }\n  return AssertionFailure()\n      << \"The difference between \" << expr1 << \" and \" << expr2\n      << \" is \" << diff << \", which exceeds \" << abs_error_expr << \", where\\n\"\n      << expr1 << \" evaluates to \" << val1 << \",\\n\"\n      << expr2 << \" evaluates to \" << val2 << \", and\\n\"\n      << abs_error_expr << \" evaluates to \" << abs_error << \".\";\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 3078,
                  "startColumn": 13,
                  "endLine": 3078,
                  "endColumn": 19,
                  "snippet": {
                    "text": "      abs_error < epsilon) {\n    return AssertionFailure()\n           << \"The difference between \" << expr1 << \" and \" << expr2 << \" is \"\n           << diff << \", where\\n\"\n           << expr1 << \" evaluates to \" << val1 << \",\\n\"\n           << expr2 << \" evaluates to \" << val2 << \".\\nThe abs_error parameter \"\n           << abs_error_expr << \" evaluates to \" << abs_error\n",
                    "rendered": {
                      "text": "      abs_error < epsilon) {\n    return AssertionFailure()\n           << \"The difference between \" << expr1 << \" and \" << expr2 << \" is \"\n           << diff << \", where\\n\"\n           << expr1 << \" evaluates to \" << val1 << \",\\n\"\n           << expr2 << \" evaluates to \" << val2 << \".\\nThe abs_error parameter \"\n           << abs_error_expr << \" evaluates to \" << abs_error\n",
                      "markdown": "`      abs_error < epsilon) {\n    return AssertionFailure()\n           << \"The difference between \" << expr1 << \" and \" << expr2 << \" is \"\n           << diff << \", where\\n\"\n           << expr1 << \" evaluates to \" << val1 << \",\\n\"\n           << expr2 << \" evaluates to \" << val2 << \".\\nThe abs_error parameter \"\n           << abs_error_expr << \" evaluates to \" << abs_error\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 3065,
                  "startColumn": 4,
                  "endLine": 3065,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n  // Find the value which is closest to zero.\n  const double min_abs = std::min(fabs(val1), fabs(val2));\n  // Find the distance to the next double from that value.\n  const double epsilon =\n      nextafter(min_abs, std::numeric_limits<double>::infinity()) - min_abs;\n  // Detect the case where abs_error is so small that EXPECT_NEAR is\n",
                    "rendered": {
                      "text": "\n  // Find the value which is closest to zero.\n  const double min_abs = std::min(fabs(val1), fabs(val2));\n  // Find the distance to the next double from that value.\n  const double epsilon =\n      nextafter(min_abs, std::numeric_limits<double>::infinity()) - min_abs;\n  // Detect the case where abs_error is so small that EXPECT_NEAR is\n",
                      "markdown": "`\n  // Find the value which is closest to zero.\n  const double min_abs = std::min(fabs(val1), fabs(val2));\n  // Find the distance to the next double from that value.\n  const double epsilon =\n      nextafter(min_abs, std::numeric_limits<double>::infinity()) - min_abs;\n  // Detect the case where abs_error is so small that EXPECT_NEAR is\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 3063,
                  "startColumn": 4,
                  "endLine": 3063,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  const double diff = fabs(val1 - val2);\n  if (diff <= abs_error) return AssertionSuccess();\n\n  // Find the value which is closest to zero.\n  const double min_abs = std::min(fabs(val1), fabs(val2));\n  // Find the distance to the next double from that value.\n  const double epsilon =\n",
                    "rendered": {
                      "text": "  const double diff = fabs(val1 - val2);\n  if (diff <= abs_error) return AssertionSuccess();\n\n  // Find the value which is closest to zero.\n  const double min_abs = std::min(fabs(val1), fabs(val2));\n  // Find the distance to the next double from that value.\n  const double epsilon =\n",
                      "markdown": "`  const double diff = fabs(val1 - val2);\n  if (diff <= abs_error) return AssertionSuccess();\n\n  // Find the value which is closest to zero.\n  const double min_abs = std::min(fabs(val1), fabs(val2));\n  // Find the distance to the next double from that value.\n  const double epsilon =\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 3060,
                  "startColumn": 14,
                  "endLine": 3060,
                  "endColumn": 20,
                  "snippet": {
                    "text": "                                     double val1,\n                                     double val2,\n                                     double abs_error) {\n  const double diff = fabs(val1 - val2);\n  if (diff <= abs_error) return AssertionSuccess();\n\n  // Find the value which is closest to zero.\n",
                    "rendered": {
                      "text": "                                     double val1,\n                                     double val2,\n                                     double abs_error) {\n  const double diff = fabs(val1 - val2);\n  if (diff <= abs_error) return AssertionSuccess();\n\n  // Find the value which is closest to zero.\n",
                      "markdown": "`                                     double val1,\n                                     double val2,\n                                     double abs_error) {\n  const double diff = fabs(val1 - val2);\n  if (diff <= abs_error) return AssertionSuccess();\n\n  // Find the value which is closest to zero.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 2908,
                  "startColumn": 6,
                  "endLine": 2908,
                  "endColumn": 12,
                  "snippet": {
                    "text": "      ++edit_i;\n    }\n\n    // Find the first line to include in the hunk.\n    const size_t prefix_context = std::min(l_i, context);\n    Hunk hunk(l_i - prefix_context + 1, r_i - prefix_context + 1);\n    for (size_t i = prefix_context; i > 0; --i) {\n",
                    "rendered": {
                      "text": "      ++edit_i;\n    }\n\n    // Find the first line to include in the hunk.\n    const size_t prefix_context = std::min(l_i, context);\n    Hunk hunk(l_i - prefix_context + 1, r_i - prefix_context + 1);\n    for (size_t i = prefix_context; i > 0; --i) {\n",
                      "markdown": "`      ++edit_i;\n    }\n\n    // Find the first line to include in the hunk.\n    const size_t prefix_context = std::min(l_i, context);\n    Hunk hunk(l_i - prefix_context + 1, r_i - prefix_context + 1);\n    for (size_t i = prefix_context; i > 0; --i) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 2901,
                  "startColumn": 6,
                  "endLine": 2901,
                  "endColumn": 12,
                  "snippet": {
                    "text": "  size_t l_i = 0, r_i = 0, edit_i = 0;\n  std::stringstream ss;\n  while (edit_i < edits.size()) {\n    // Find first edit.\n    while (edit_i < edits.size() && edits[edit_i] == kMatch) {\n      ++l_i;\n      ++r_i;\n",
                    "rendered": {
                      "text": "  size_t l_i = 0, r_i = 0, edit_i = 0;\n  std::stringstream ss;\n  while (edit_i < edits.size()) {\n    // Find first edit.\n    while (edit_i < edits.size() && edits[edit_i] == kMatch) {\n      ++l_i;\n      ++r_i;\n",
                      "markdown": "`  size_t l_i = 0, r_i = 0, edit_i = 0;\n  std::stringstream ss;\n  while (edit_i < edits.size()) {\n    // Find first edit.\n    while (edit_i < edits.size() && edits[edit_i] == kMatch) {\n      ++l_i;\n      ++r_i;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 2886,
                  "startColumn": 41,
                  "endLine": 2886,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\n}  // namespace\n\n// Create a list of diff hunks in Unified diff format.\n// Each hunk has a header generated by PrintHeader above plus a body with\n// lines prefixed with ' ' for no change, '-' for deletion and '+' for\n// addition.\n",
                    "rendered": {
                      "text": "\n}  // namespace\n\n// Create a list of diff hunks in Unified diff format.\n// Each hunk has a header generated by PrintHeader above plus a body with\n// lines prefixed with ' ' for no change, '-' for deletion and '+' for\n// addition.\n",
                      "markdown": "`\n}  // namespace\n\n// Create a list of diff hunks in Unified diff format.\n// Each hunk has a header generated by PrintHeader above plus a body with\n// lines prefixed with ' ' for no change, '-' for deletion and '+' for\n// addition.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 2886,
                  "startColumn": 19,
                  "endLine": 2886,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n}  // namespace\n\n// Create a list of diff hunks in Unified diff format.\n// Each hunk has a header generated by PrintHeader above plus a body with\n// lines prefixed with ' ' for no change, '-' for deletion and '+' for\n// addition.\n",
                    "rendered": {
                      "text": "\n}  // namespace\n\n// Create a list of diff hunks in Unified diff format.\n// Each hunk has a header generated by PrintHeader above plus a body with\n// lines prefixed with ' ' for no change, '-' for deletion and '+' for\n// addition.\n",
                      "markdown": "`\n}  // namespace\n\n// Create a list of diff hunks in Unified diff format.\n// Each hunk has a header generated by PrintHeader above plus a body with\n// lines prefixed with ' ' for no change, '-' for deletion and '+' for\n// addition.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 2861,
                  "startColumn": 20,
                  "endLine": 2861,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    hunk_.splice(hunk_.end(), hunk_adds_);\n  }\n\n  // Print a unified diff header for one hunk.\n  // The format is\n  //   \"@@ -<left_start>,<left_length> +<right_start>,<right_length> @@\"\n  // where the left/right parts are omitted if unnecessary.\n",
                    "rendered": {
                      "text": "    hunk_.splice(hunk_.end(), hunk_adds_);\n  }\n\n  // Print a unified diff header for one hunk.\n  // The format is\n  //   \"@@ -<left_start>,<left_length> +<right_start>,<right_length> @@\"\n  // where the left/right parts are omitted if unnecessary.\n",
                      "markdown": "`    hunk_.splice(hunk_.end(), hunk_adds_);\n  }\n\n  // Print a unified diff header for one hunk.\n  // The format is\n  //   \"@@ -<left_start>,<left_length> +<right_start>,<right_length> @@\"\n  // where the left/right parts are omitted if unnecessary.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 2542,
                  "startColumn": 66,
                  "endLine": 2542,
                  "endColumn": 72,
                  "snippet": {
                    "text": "};\n\n// Returns a timestamp as milliseconds since the epoch. Note this time may jump\n// around subject to adjustments by the system, to measure elapsed time use\n// Timer instead.\nTimeInMillis GetTimeInMillis() {\n  return std::chrono::duration_cast<std::chrono::milliseconds>(\n",
                    "rendered": {
                      "text": "};\n\n// Returns a timestamp as milliseconds since the epoch. Note this time may jump\n// around subject to adjustments by the system, to measure elapsed time use\n// Timer instead.\nTimeInMillis GetTimeInMillis() {\n  return std::chrono::duration_cast<std::chrono::milliseconds>(\n",
                      "markdown": "`};\n\n// Returns a timestamp as milliseconds since the epoch. Note this time may jump\n// around subject to adjustments by the system, to measure elapsed time use\n// Timer instead.\nTimeInMillis GetTimeInMillis() {\n  return std::chrono::duration_cast<std::chrono::milliseconds>(\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 2541,
                  "startColumn": 65,
                  "endLine": 2541,
                  "endColumn": 71,
                  "snippet": {
                    "text": "  std::chrono::steady_clock::time_point start_;\n};\n\n// Returns a timestamp as milliseconds since the epoch. Note this time may jump\n// around subject to adjustments by the system, to measure elapsed time use\n// Timer instead.\nTimeInMillis GetTimeInMillis() {\n",
                    "rendered": {
                      "text": "  std::chrono::steady_clock::time_point start_;\n};\n\n// Returns a timestamp as milliseconds since the epoch. Note this time may jump\n// around subject to adjustments by the system, to measure elapsed time use\n// Timer instead.\nTimeInMillis GetTimeInMillis() {\n",
                      "markdown": "`  std::chrono::steady_clock::time_point start_;\n};\n\n// Returns a timestamp as milliseconds since the epoch. Note this time may jump\n// around subject to adjustments by the system, to measure elapsed time use\n// Timer instead.\nTimeInMillis GetTimeInMillis() {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 2530,
                  "startColumn": 11,
                  "endLine": 2530,
                  "endColumn": 17,
                  "snippet": {
                    "text": " public:\n  Timer() : start_(std::chrono::steady_clock::now()) {}\n\n  // Return time elapsed in milliseconds since the timer was created.\n  TimeInMillis Elapsed() {\n    return std::chrono::duration_cast<std::chrono::milliseconds>(\n               std::chrono::steady_clock::now() - start_)\n",
                    "rendered": {
                      "text": " public:\n  Timer() : start_(std::chrono::steady_clock::now()) {}\n\n  // Return time elapsed in milliseconds since the timer was created.\n  TimeInMillis Elapsed() {\n    return std::chrono::duration_cast<std::chrono::milliseconds>(\n               std::chrono::steady_clock::now() - start_)\n",
                      "markdown": "` public:\n  Timer() : start_(std::chrono::steady_clock::now()) {}\n\n  // Return time elapsed in milliseconds since the timer was created.\n  TimeInMillis Elapsed() {\n    return std::chrono::duration_cast<std::chrono::milliseconds>(\n               std::chrono::steady_clock::now() - start_)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 2510,
                  "startColumn": 26,
                  "endLine": 2510,
                  "endColumn": 31,
                  "snippet": {
                    "text": "//\n// The maximum number of stack frames to be included is specified by\n// the gtest_stack_trace_depth flag.  The skip_count parameter\n// specifies the number of top frames to be skipped, which doesn't\n// count against the number of frames to be included.\n//\n// For example, if Foo() calls Bar(), which in turn calls\n",
                    "rendered": {
                      "text": "//\n// The maximum number of stack frames to be included is specified by\n// the gtest_stack_trace_depth flag.  The skip_count parameter\n// specifies the number of top frames to be skipped, which doesn't\n// count against the number of frames to be included.\n//\n// For example, if Foo() calls Bar(), which in turn calls\n",
                      "markdown": "`//\n// The maximum number of stack frames to be included is specified by\n// the gtest_stack_trace_depth flag.  The skip_count parameter\n// specifies the number of top frames to be skipped, which doesn't\n// count against the number of frames to be included.\n//\n// For example, if Foo() calls Bar(), which in turn calls\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 2235,
                  "startColumn": 62,
                  "endLine": 2236,
                  "snippet": {
                    "text": "    negative = \"\";\n  } else {\n    positive = std::string(p, dash);   // Everything up to the dash\n    negative = std::string(dash + 1);  // Everything after the dash\n    if (positive.empty()) {\n      // Treat '-test1' as the same as '*-test1'\n      positive = kUniversalFilter;\n    }\n",
                    "rendered": {
                      "text": "    negative = \"\";\n  } else {\n    positive = std::string(p, dash);   // Everything up to the dash\n    negative = std::string(dash + 1);  // Everything after the dash\n    if (positive.empty()) {\n      // Treat '-test1' as the same as '*-test1'\n      positive = kUniversalFilter;\n    }\n",
                      "markdown": "`    negative = \"\";\n  } else {\n    positive = std::string(p, dash);   // Everything up to the dash\n    negative = std::string(dash + 1);  // Everything after the dash\n    if (positive.empty()) {\n      // Treat '-test1' as the same as '*-test1'\n      positive = kUniversalFilter;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 2234,
                  "startColumn": 62,
                  "endLine": 2235,
                  "snippet": {
                    "text": "    positive = GTEST_FLAG(filter).c_str();  // Whole string is a positive filter\n    negative = \"\";\n  } else {\n    positive = std::string(p, dash);   // Everything up to the dash\n    negative = std::string(dash + 1);  // Everything after the dash\n    if (positive.empty()) {\n      // Treat '-test1' as the same as '*-test1'\n      positive = kUniversalFilter;\n",
                    "rendered": {
                      "text": "    positive = GTEST_FLAG(filter).c_str();  // Whole string is a positive filter\n    negative = \"\";\n  } else {\n    positive = std::string(p, dash);   // Everything up to the dash\n    negative = std::string(dash + 1);  // Everything after the dash\n    if (positive.empty()) {\n      // Treat '-test1' as the same as '*-test1'\n      positive = kUniversalFilter;\n",
                      "markdown": "`    positive = GTEST_FLAG(filter).c_str();  // Whole string is a positive filter\n    negative = \"\";\n  } else {\n    positive = std::string(p, dash);   // Everything up to the dash\n    negative = std::string(dash + 1);  // Everything after the dash\n    if (positive.empty()) {\n      // Treat '-test1' as the same as '*-test1'\n      positive = kUniversalFilter;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 2227,
                  "startColumn": 19,
                  "endLine": 2227,
                  "endColumn": 25,
                  "snippet": {
                    "text": "  // Split --gtest_filter at '-', if there is one, to separate into\n  // positive filter and negative filter portions\n  const char* const p = GTEST_FLAG(filter).c_str();\n  const char* const dash = strchr(p, '-');\n  std::string positive;\n  std::string negative;\n  if (dash == nullptr) {\n",
                    "rendered": {
                      "text": "  // Split --gtest_filter at '-', if there is one, to separate into\n  // positive filter and negative filter portions\n  const char* const p = GTEST_FLAG(filter).c_str();\n  const char* const dash = strchr(p, '-');\n  std::string positive;\n  std::string negative;\n  if (dash == nullptr) {\n",
                      "markdown": "`  // Split --gtest_filter at '-', if there is one, to separate into\n  // positive filter and negative filter portions\n  const char* const p = GTEST_FLAG(filter).c_str();\n  const char* const dash = strchr(p, '-');\n  std::string positive;\n  std::string negative;\n  if (dash == nullptr) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 2198,
                  "startColumn": 6,
                  "endLine": 2198,
                  "endColumn": 12,
                  "snippet": {
                    "text": "  // The filter is a list of patterns separated by colons (:).\n  const char* pattern = filter;\n  while (true) {\n    // Find the bounds of this pattern.\n    const char* const next_sep = strchr(pattern, ':');\n    const char* const pattern_end =\n        next_sep != nullptr ? next_sep : pattern + strlen(pattern);\n",
                    "rendered": {
                      "text": "  // The filter is a list of patterns separated by colons (:).\n  const char* pattern = filter;\n  while (true) {\n    // Find the bounds of this pattern.\n    const char* const next_sep = strchr(pattern, ':');\n    const char* const pattern_end =\n        next_sep != nullptr ? next_sep : pattern + strlen(pattern);\n",
                      "markdown": "`  // The filter is a list of patterns separated by colons (:).\n  const char* pattern = filter;\n  while (true) {\n    // Find the bounds of this pattern.\n    const char* const next_sep = strchr(pattern, ':');\n    const char* const pattern_end =\n        next_sep != nullptr ? next_sep : pattern + strlen(pattern);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 1968,
                  "startColumn": 20,
                  "endLine": 1968,
                  "endColumn": 28,
                  "snippet": {
                    "text": "  const char kMissingInstantiation[] =  //\n      \" is defined via TEST_P, but never instantiated. None of the test cases \"\n      \"will run. Either no INSTANTIATE_TEST_SUITE_P is provided or the only \"\n      \"ones provided expand to nothing.\"\n      \"\\n\\n\"\n      \"Ideally, TEST_P definitions should only ever be included as part of \"\n      \"binaries that intend to use them. (As opposed to, for example, being \"\n",
                    "rendered": {
                      "text": "  const char kMissingInstantiation[] =  //\n      \" is defined via TEST_P, but never instantiated. None of the test cases \"\n      \"will run. Either no INSTANTIATE_TEST_SUITE_P is provided or the only \"\n      \"ones provided expand to nothing.\"\n      \"\\n\\n\"\n      \"Ideally, TEST_P definitions should only ever be included as part of \"\n      \"binaries that intend to use them. (As opposed to, for example, being \"\n",
                      "markdown": "`  const char kMissingInstantiation[] =  //\n      \" is defined via TEST_P, but never instantiated. None of the test cases \"\n      \"will run. Either no INSTANTIATE_TEST_SUITE_P is provided or the only \"\n      \"ones provided expand to nothing.\"\n      \"\\n\\n\"\n      \"Ideally, TEST_P definitions should only ever be included as part of \"\n      \"binaries that intend to use them. (As opposed to, for example, being \"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 1780,
                  "startColumn": 43,
                  "endLine": 1780,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\nGTEST_DEFINE_bool_(print_time, internal::BoolFromGTestEnv(\"print_time\", true),\n                   \"True if and only if \" GTEST_NAME_\n                   \" should display elapsed time in text output.\");\n\nGTEST_DEFINE_bool_(print_utf8, internal::BoolFromGTestEnv(\"print_utf8\", true),\n                   \"True if and only if \" GTEST_NAME_\n",
                    "rendered": {
                      "text": "\nGTEST_DEFINE_bool_(print_time, internal::BoolFromGTestEnv(\"print_time\", true),\n                   \"True if and only if \" GTEST_NAME_\n                   \" should display elapsed time in text output.\");\n\nGTEST_DEFINE_bool_(print_utf8, internal::BoolFromGTestEnv(\"print_utf8\", true),\n                   \"True if and only if \" GTEST_NAME_\n",
                      "markdown": "`\nGTEST_DEFINE_bool_(print_time, internal::BoolFromGTestEnv(\"print_time\", true),\n                   \"True if and only if \" GTEST_NAME_\n                   \" should display elapsed time in text output.\");\n\nGTEST_DEFINE_bool_(print_utf8, internal::BoolFromGTestEnv(\"print_utf8\", true),\n                   \"True if and only if \" GTEST_NAME_\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 1533,
                  "startColumn": 56,
                  "endLine": 1533,
                  "endColumn": 62,
                  "snippet": {
                    "text": "  }\n\n  void OnTestProgramEnd(const UnitTest& unit_test) override {\n    // Note that Google Test current only report elapsed time for each\n    // test iteration, not for the entire test program.\n    SendLn(\"event=TestProgramEnd&passed=\" + FormatBool(unit_test.Passed()));\n\n",
                    "rendered": {
                      "text": "  }\n\n  void OnTestProgramEnd(const UnitTest& unit_test) override {\n    // Note that Google Test current only report elapsed time for each\n    // test iteration, not for the entire test program.\n    SendLn(\"event=TestProgramEnd&passed=\" + FormatBool(unit_test.Passed()));\n\n",
                      "markdown": "`  }\n\n  void OnTestProgramEnd(const UnitTest& unit_test) override {\n    // Note that Google Test current only report elapsed time for each\n    // test iteration, not for the entire test program.\n    SendLn(\"event=TestProgramEnd&passed=\" + FormatBool(unit_test.Passed()));\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 1333,
                  "startColumn": 8,
                  "endLine": 1333,
                  "endColumn": 14,
                  "snippet": {
                    "text": "  // Our random number generator.\n  internal::Random random_;\n\n  // The time of the test program start, in ms from the start of the\n  // UNIX epoch.\n  TimeInMillis start_timestamp_;\n\n",
                    "rendered": {
                      "text": "  // Our random number generator.\n  internal::Random random_;\n\n  // The time of the test program start, in ms from the start of the\n  // UNIX epoch.\n  TimeInMillis start_timestamp_;\n\n",
                      "markdown": "`  // Our random number generator.\n  internal::Random random_;\n\n  // The time of the test program start, in ms from the start of the\n  // UNIX epoch.\n  TimeInMillis start_timestamp_;\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 1025,
                  "startColumn": 28,
                  "endLine": 1025,
                  "endColumn": 33,
                  "snippet": {
                    "text": "  //\n  // The maximum number of stack frames to be included is specified by\n  // the gtest_stack_trace_depth flag.  The skip_count parameter\n  // specifies the number of top frames to be skipped, which doesn't\n  // count against the number of frames to be included.\n  //\n  // For example, if Foo() calls Bar(), which in turn calls\n",
                    "rendered": {
                      "text": "  //\n  // The maximum number of stack frames to be included is specified by\n  // the gtest_stack_trace_depth flag.  The skip_count parameter\n  // specifies the number of top frames to be skipped, which doesn't\n  // count against the number of frames to be included.\n  //\n  // For example, if Foo() calls Bar(), which in turn calls\n",
                      "markdown": "`  //\n  // The maximum number of stack frames to be included is specified by\n  // the gtest_stack_trace_depth flag.  The skip_count parameter\n  // specifies the number of top frames to be skipped, which doesn't\n  // count against the number of frames to be included.\n  //\n  // For example, if Foo() calls Bar(), which in turn calls\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 963,
                  "startColumn": 13,
                  "endLine": 963,
                  "endColumn": 19,
                  "snippet": {
                    "text": "  // Gets the number of tests that should run.\n  int test_to_run_count() const;\n\n  // Gets the time of the test program start, in ms from the start of the\n  // UNIX epoch.\n  TimeInMillis start_timestamp() const { return start_timestamp_; }\n\n",
                    "rendered": {
                      "text": "  // Gets the number of tests that should run.\n  int test_to_run_count() const;\n\n  // Gets the time of the test program start, in ms from the start of the\n  // UNIX epoch.\n  TimeInMillis start_timestamp() const { return start_timestamp_; }\n\n",
                      "markdown": "`  // Gets the number of tests that should run.\n  int test_to_run_count() const;\n\n  // Gets the time of the test program start, in ms from the start of the\n  // UNIX epoch.\n  TimeInMillis start_timestamp() const { return start_timestamp_; }\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 824,
                  "startColumn": 36,
                  "endLine": 824,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\n  // UponLeavingGTest() should be called immediately before Google Test calls\n  // user code. It saves some information about the current stack that\n  // CurrentStackTrace() will use to find and hide Google Test stack frames.\n  virtual void UponLeavingGTest() = 0;\n\n  // This string is inserted in place of stack frames that are part of\n",
                    "rendered": {
                      "text": "\n  // UponLeavingGTest() should be called immediately before Google Test calls\n  // user code. It saves some information about the current stack that\n  // CurrentStackTrace() will use to find and hide Google Test stack frames.\n  virtual void UponLeavingGTest() = 0;\n\n  // This string is inserted in place of stack frames that are part of\n",
                      "markdown": "`\n  // UponLeavingGTest() should be called immediately before Google Test calls\n  // user code. It saves some information about the current stack that\n  // CurrentStackTrace() will use to find and hide Google Test stack frames.\n  virtual void UponLeavingGTest() = 0;\n\n  // This string is inserted in place of stack frames that are part of\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 818,
                  "startColumn": 33,
                  "endLine": 818,
                  "endColumn": 38,
                  "snippet": {
                    "text": "  //\n  //   max_depth  - the maximum number of stack frames to be included\n  //                in the trace.\n  //   skip_count - the number of top frames to be skipped; doesn't count\n  //                against max_depth.\n  virtual std::string CurrentStackTrace(int max_depth, int skip_count) = 0;\n\n",
                    "rendered": {
                      "text": "  //\n  //   max_depth  - the maximum number of stack frames to be included\n  //                in the trace.\n  //   skip_count - the number of top frames to be skipped; doesn't count\n  //                against max_depth.\n  virtual std::string CurrentStackTrace(int max_depth, int skip_count) = 0;\n\n",
                      "markdown": "`  //\n  //   max_depth  - the maximum number of stack frames to be included\n  //                in the trace.\n  //   skip_count - the number of top frames to be skipped; doesn't count\n  //                against max_depth.\n  virtual std::string CurrentStackTrace(int max_depth, int skip_count) = 0;\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 506,
                  "startColumn": 21,
                  "endLine": 506,
                  "endColumn": 27,
                  "snippet": {
                    "text": "// Formats the given time in milliseconds as seconds.\nGTEST_API_ std::string FormatTimeInMillisAsSeconds(TimeInMillis ms);\n\n// Converts the given time in milliseconds to a date string in the ISO 8601\n// format, without the timezone information.  N.B.: due to the use the\n// non-reentrant localtime() function, this function is not thread safe.  Do\n// not use it in any code that can be called from multiple threads.\n",
                    "rendered": {
                      "text": "// Formats the given time in milliseconds as seconds.\nGTEST_API_ std::string FormatTimeInMillisAsSeconds(TimeInMillis ms);\n\n// Converts the given time in milliseconds to a date string in the ISO 8601\n// format, without the timezone information.  N.B.: due to the use the\n// non-reentrant localtime() function, this function is not thread safe.  Do\n// not use it in any code that can be called from multiple threads.\n",
                      "markdown": "`// Formats the given time in milliseconds as seconds.\nGTEST_API_ std::string FormatTimeInMillisAsSeconds(TimeInMillis ms);\n\n// Converts the given time in milliseconds to a date string in the ISO 8601\n// format, without the timezone information.  N.B.: due to the use the\n// non-reentrant localtime() function, this function is not thread safe.  Do\n// not use it in any code that can be called from multiple threads.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 503,
                  "startColumn": 20,
                  "endLine": 503,
                  "endColumn": 26,
                  "snippet": {
                    "text": "// Returns true if and only if Google Test should use colors in the output.\nGTEST_API_ bool ShouldUseColor(bool stdout_is_tty);\n\n// Formats the given time in milliseconds as seconds.\nGTEST_API_ std::string FormatTimeInMillisAsSeconds(TimeInMillis ms);\n\n// Converts the given time in milliseconds to a date string in the ISO 8601\n",
                    "rendered": {
                      "text": "// Returns true if and only if Google Test should use colors in the output.\nGTEST_API_ bool ShouldUseColor(bool stdout_is_tty);\n\n// Formats the given time in milliseconds as seconds.\nGTEST_API_ std::string FormatTimeInMillisAsSeconds(TimeInMillis ms);\n\n// Converts the given time in milliseconds to a date string in the ISO 8601\n",
                      "markdown": "`// Returns true if and only if Google Test should use colors in the output.\nGTEST_API_ bool ShouldUseColor(bool stdout_is_tty);\n\n// Formats the given time in milliseconds as seconds.\nGTEST_API_ std::string FormatTimeInMillisAsSeconds(TimeInMillis ms);\n\n// Converts the given time in milliseconds to a date string in the ISO 8601\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 497,
                  "startColumn": 22,
                  "endLine": 497,
                  "endColumn": 28,
                  "snippet": {
                    "text": "// is specified on the command line.\nGTEST_API_ extern bool g_help_flag;\n\n// Returns the current time in milliseconds.\nGTEST_API_ TimeInMillis GetTimeInMillis();\n\n// Returns true if and only if Google Test should use colors in the output.\n",
                    "rendered": {
                      "text": "// is specified on the command line.\nGTEST_API_ extern bool g_help_flag;\n\n// Returns the current time in milliseconds.\nGTEST_API_ TimeInMillis GetTimeInMillis();\n\n// Returns true if and only if Google Test should use colors in the output.\n",
                      "markdown": "`// is specified on the command line.\nGTEST_API_ extern bool g_help_flag;\n\n// Returns the current time in milliseconds.\nGTEST_API_ TimeInMillis GetTimeInMillis();\n\n// Returns true if and only if Google Test should use colors in the output.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest/gmock-gtest-all.cc"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 28,
                  "endLine": 104,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n//\n// Utilities for testing Google Test itself and code that uses Google Test\n// (e.g. frameworks built on top of Google Test).\n\n// GOOGLETEST_CM0004 DO NOT DELETE\n\n",
                    "rendered": {
                      "text": "\n//\n// Utilities for testing Google Test itself and code that uses Google Test\n// (e.g. frameworks built on top of Google Test).\n\n// GOOGLETEST_CM0004 DO NOT DELETE\n\n",
                      "markdown": "`\n//\n// Utilities for testing Google Test itself and code that uses Google Test\n// (e.g. frameworks built on top of Google Test).\n\n// GOOGLETEST_CM0004 DO NOT DELETE\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/fuzzing/named-arg.cc"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 54,
                  "endLine": 32,
                  "endColumn": 59,
                  "snippet": {
                    "text": "        fmt::format(format_str.get(), fmt::arg(arg_name.data(), value));\n#else\n    fmt::memory_buffer out;\n    fmt::format_to(std::back_inserter(out), format_str.get(),\n                   fmt::arg(arg_name.data(), value));\n#endif\n  } catch (std::exception&) {\n",
                    "rendered": {
                      "text": "        fmt::format(format_str.get(), fmt::arg(arg_name.data(), value));\n#else\n    fmt::memory_buffer out;\n    fmt::format_to(std::back_inserter(out), format_str.get(),\n                   fmt::arg(arg_name.data(), value));\n#endif\n  } catch (std::exception&) {\n",
                      "markdown": "`        fmt::format(format_str.get(), fmt::arg(arg_name.data(), value));\n#else\n    fmt::memory_buffer out;\n    fmt::format_to(std::back_inserter(out), format_str.get(),\n                   fmt::arg(arg_name.data(), value));\n#endif\n  } catch (std::exception&) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/fuzzing/named-arg.cc"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 30,
                  "endLine": 29,
                  "endColumn": 35,
                  "snippet": {
                    "text": "  try {\n#if FMT_FUZZ_FORMAT_TO_STRING\n    std::string message =\n        fmt::format(format_str.get(), fmt::arg(arg_name.data(), value));\n#else\n    fmt::memory_buffer out;\n    fmt::format_to(std::back_inserter(out), format_str.get(),\n",
                    "rendered": {
                      "text": "  try {\n#if FMT_FUZZ_FORMAT_TO_STRING\n    std::string message =\n        fmt::format(format_str.get(), fmt::arg(arg_name.data(), value));\n#else\n    fmt::memory_buffer out;\n    fmt::format_to(std::back_inserter(out), format_str.get(),\n",
                      "markdown": "`  try {\n#if FMT_FUZZ_FORMAT_TO_STRING\n    std::string message =\n        fmt::format(format_str.get(), fmt::arg(arg_name.data(), value));\n#else\n    fmt::memory_buffer out;\n    fmt::format_to(std::back_inserter(out), format_str.get(),\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/fuzzing/named-arg.cc"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 9,
                  "endLine": 49,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    callback(char());\n    break;\n  case 2:\n    using sc = signed char;\n    callback(sc());\n    break;\n  case 3:\n",
                    "rendered": {
                      "text": "    callback(char());\n    break;\n  case 2:\n    using sc = signed char;\n    callback(sc());\n    break;\n  case 3:\n",
                      "markdown": "`    callback(char());\n    break;\n  case 2:\n    using sc = signed char;\n    callback(sc());\n    break;\n  case 3:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/fuzzing/named-arg.cc"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 9,
                  "endLine": 73,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    callback(long());\n    break;\n  case 9:\n    using ul = unsigned long;\n    callback(ul());\n    break;\n  case 10:\n",
                    "rendered": {
                      "text": "    callback(long());\n    break;\n  case 9:\n    using ul = unsigned long;\n    callback(ul());\n    break;\n  case 10:\n",
                      "markdown": "`    callback(long());\n    break;\n  case 9:\n    using ul = unsigned long;\n    callback(ul());\n    break;\n  case 10:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/fuzzing/README.md"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 43,
                  "endLine": 5,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\nThere is a [helper script](build.sh) to build the fuzzers, which has only been\ntested on Debian and Ubuntu linux so far. There should be no problems fuzzing on\nWindows (using clang>=8) or on Mac, but the script will probably not work out of\nthe box.\n\nSomething along\n",
                    "rendered": {
                      "text": "\nThere is a [helper script](build.sh) to build the fuzzers, which has only been\ntested on Debian and Ubuntu linux so far. There should be no problems fuzzing on\nWindows (using clang>=8) or on Mac, but the script will probably not work out of\nthe box.\n\nSomething along\n",
                      "markdown": "`\nThere is a [helper script](build.sh) to build the fuzzers, which has only been\ntested on Debian and Ubuntu linux so far. There should be no problems fuzzing on\nWindows (using clang>=8) or on Mac, but the script will probably not work out of\nthe box.\n\nSomething along\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/xchar-test.cc"
                },
                "region": {
                  "startLine": 302,
                  "startColumn": 62,
                  "endLine": 302,
                  "endColumn": 68,
                  "snippet": {
                    "text": "    }\n  }\n\n  // Separate tests for UTC, since std::time_put can use local time and ignoring\n  // the timezone in std::tm (if it presents on platform).\n  if (fmt::detail::has_member_data_tm_zone<std::tm>::value) {\n    auto t = std::chrono::system_clock::to_time_t(t1);\n",
                    "rendered": {
                      "text": "    }\n  }\n\n  // Separate tests for UTC, since std::time_put can use local time and ignoring\n  // the timezone in std::tm (if it presents on platform).\n  if (fmt::detail::has_member_data_tm_zone<std::tm>::value) {\n    auto t = std::chrono::system_clock::to_time_t(t1);\n",
                      "markdown": "`    }\n  }\n\n  // Separate tests for UTC, since std::time_put can use local time and ignoring\n  // the timezone in std::tm (if it presents on platform).\n  if (fmt::detail::has_member_data_tm_zone<std::tm>::value) {\n    auto t = std::chrono::system_clock::to_time_t(t1);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/xchar-test.cc"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 15,
                  "endLine": 184,
                  "snippet": {
                    "text": "template <>\nstruct formatter<streamable_enum, wchar_t> : basic_ostream_formatter<wchar_t> {\n};\n}  // namespace fmt\n\nenum unstreamable_enum {};\nauto format_as(unstreamable_enum e) -> int { return e; }\n\n",
                    "rendered": {
                      "text": "template <>\nstruct formatter<streamable_enum, wchar_t> : basic_ostream_formatter<wchar_t> {\n};\n}  // namespace fmt\n\nenum unstreamable_enum {};\nauto format_as(unstreamable_enum e) -> int { return e; }\n\n",
                      "markdown": "`template <>\nstruct formatter<streamable_enum, wchar_t> : basic_ostream_formatter<wchar_t> {\n};\n}  // namespace fmt\n\nenum unstreamable_enum {};\nauto format_as(unstreamable_enum e) -> int { return e; }\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/xchar-test.cc"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 9,
                  "endLine": 179,
                  "endColumn": 14,
                  "snippet": {
                    "text": "  return os << L\"streamable_enum\";\n}\n\nnamespace fmt {\ntemplate <>\nstruct formatter<streamable_enum, wchar_t> : basic_ostream_formatter<wchar_t> {\n};\n",
                    "rendered": {
                      "text": "  return os << L\"streamable_enum\";\n}\n\nnamespace fmt {\ntemplate <>\nstruct formatter<streamable_enum, wchar_t> : basic_ostream_formatter<wchar_t> {\n};\n",
                      "markdown": "`  return os << L\"streamable_enum\";\n}\n\nnamespace fmt {\ntemplate <>\nstruct formatter<streamable_enum, wchar_t> : basic_ostream_formatter<wchar_t> {\n};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/ostream-test.cc"
                },
                "region": {
                  "startLine": 302,
                  "startColumn": 15,
                  "endLine": 303,
                  "snippet": {
                    "text": "\nnamespace fmt {\ntemplate <> struct formatter<unlocalized> : ostream_formatter {};\n}  // namespace fmt\n\nTEST(ostream_test, unlocalized) {\n  auto loc = get_locale(\"en_US.UTF-8\");\n  std::locale::global(loc);\n",
                    "rendered": {
                      "text": "\nnamespace fmt {\ntemplate <> struct formatter<unlocalized> : ostream_formatter {};\n}  // namespace fmt\n\nTEST(ostream_test, unlocalized) {\n  auto loc = get_locale(\"en_US.UTF-8\");\n  std::locale::global(loc);\n",
                      "markdown": "`\nnamespace fmt {\ntemplate <> struct formatter<unlocalized> : ostream_formatter {};\n}  // namespace fmt\n\nTEST(ostream_test, unlocalized) {\n  auto loc = get_locale(\"en_US.UTF-8\");\n  std::locale::global(loc);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/ostream-test.cc"
                },
                "region": {
                  "startLine": 300,
                  "startColumn": 9,
                  "endLine": 300,
                  "endColumn": 14,
                  "snippet": {
                    "text": "  return os << 12345;\n}\n\nnamespace fmt {\ntemplate <> struct formatter<unlocalized> : ostream_formatter {};\n}  // namespace fmt\n\n",
                    "rendered": {
                      "text": "  return os << 12345;\n}\n\nnamespace fmt {\ntemplate <> struct formatter<unlocalized> : ostream_formatter {};\n}  // namespace fmt\n\n",
                      "markdown": "`  return os << 12345;\n}\n\nnamespace fmt {\ntemplate <> struct formatter<unlocalized> : ostream_formatter {};\n}  // namespace fmt\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/ostream-test.cc"
                },
                "region": {
                  "startLine": 265,
                  "startColumn": 15,
                  "endLine": 266,
                  "snippet": {
                    "text": "\nnamespace fmt {\ntemplate <> struct formatter<abstract> : ostream_formatter {};\n}  // namespace fmt\n\nvoid format_abstract_compiles(const abstract& a) {\n  fmt::format(FMT_COMPILE(\"{}\"), a);\n}\n",
                    "rendered": {
                      "text": "\nnamespace fmt {\ntemplate <> struct formatter<abstract> : ostream_formatter {};\n}  // namespace fmt\n\nvoid format_abstract_compiles(const abstract& a) {\n  fmt::format(FMT_COMPILE(\"{}\"), a);\n}\n",
                      "markdown": "`\nnamespace fmt {\ntemplate <> struct formatter<abstract> : ostream_formatter {};\n}  // namespace fmt\n\nvoid format_abstract_compiles(const abstract& a) {\n  fmt::format(FMT_COMPILE(\"{}\"), a);\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/ostream-test.cc"
                },
                "region": {
                  "startLine": 263,
                  "startColumn": 9,
                  "endLine": 263,
                  "endColumn": 14,
                  "snippet": {
                    "text": "  }\n};\n\nnamespace fmt {\ntemplate <> struct formatter<abstract> : ostream_formatter {};\n}  // namespace fmt\n\n",
                    "rendered": {
                      "text": "  }\n};\n\nnamespace fmt {\ntemplate <> struct formatter<abstract> : ostream_formatter {};\n}  // namespace fmt\n\n",
                      "markdown": "`  }\n};\n\nnamespace fmt {\ntemplate <> struct formatter<abstract> : ostream_formatter {};\n}  // namespace fmt\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/ostream-test.cc"
                },
                "region": {
                  "startLine": 240,
                  "startColumn": 15,
                  "endLine": 241,
                  "snippet": {
                    "text": "\nnamespace fmt {\ntemplate <> struct formatter<copyfmt_test> : ostream_formatter {};\n}  // namespace fmt\n\nTEST(ostream_test, copyfmt) {\n  EXPECT_EQ(\"foo\", fmt::format(\"{}\", copyfmt_test()));\n}\n",
                    "rendered": {
                      "text": "\nnamespace fmt {\ntemplate <> struct formatter<copyfmt_test> : ostream_formatter {};\n}  // namespace fmt\n\nTEST(ostream_test, copyfmt) {\n  EXPECT_EQ(\"foo\", fmt::format(\"{}\", copyfmt_test()));\n}\n",
                      "markdown": "`\nnamespace fmt {\ntemplate <> struct formatter<copyfmt_test> : ostream_formatter {};\n}  // namespace fmt\n\nTEST(ostream_test, copyfmt) {\n  EXPECT_EQ(\"foo\", fmt::format(\"{}\", copyfmt_test()));\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/ostream-test.cc"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 9,
                  "endLine": 238,
                  "endColumn": 14,
                  "snippet": {
                    "text": "  return os << \"foo\";\n}\n\nnamespace fmt {\ntemplate <> struct formatter<copyfmt_test> : ostream_formatter {};\n}  // namespace fmt\n\n",
                    "rendered": {
                      "text": "  return os << \"foo\";\n}\n\nnamespace fmt {\ntemplate <> struct formatter<copyfmt_test> : ostream_formatter {};\n}  // namespace fmt\n\n",
                      "markdown": "`  return os << \"foo\";\n}\n\nnamespace fmt {\ntemplate <> struct formatter<copyfmt_test> : ostream_formatter {};\n}  // namespace fmt\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/ostream-test.cc"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 15,
                  "endLine": 212,
                  "snippet": {
                    "text": "};\n\ntemplate <> struct formatter<fmt_test::abc> : ostream_formatter {};\n}  // namespace fmt\n\nTEST(ostream_test, template) {\n  EXPECT_EQ(\"2\", fmt::format(\"{}\", test_template<int>()));\n}\n",
                    "rendered": {
                      "text": "};\n\ntemplate <> struct formatter<fmt_test::abc> : ostream_formatter {};\n}  // namespace fmt\n\nTEST(ostream_test, template) {\n  EXPECT_EQ(\"2\", fmt::format(\"{}\", test_template<int>()));\n}\n",
                      "markdown": "`};\n\ntemplate <> struct formatter<fmt_test::abc> : ostream_formatter {};\n}  // namespace fmt\n\nTEST(ostream_test, template) {\n  EXPECT_EQ(\"2\", fmt::format(\"{}\", test_template<int>()));\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/ostream-test.cc"
                },
                "region": {
                  "startLine": 202,
                  "startColumn": 9,
                  "endLine": 202,
                  "endColumn": 14,
                  "snippet": {
                    "text": "  return os << 1;\n}\n\nnamespace fmt {\ntemplate <typename T> struct formatter<test_template<T>> : formatter<int> {\n  auto format(test_template<T>, format_context& ctx) const\n      -> decltype(ctx.out()) {\n",
                    "rendered": {
                      "text": "  return os << 1;\n}\n\nnamespace fmt {\ntemplate <typename T> struct formatter<test_template<T>> : formatter<int> {\n  auto format(test_template<T>, format_context& ctx) const\n      -> decltype(ctx.out()) {\n",
                      "markdown": "`  return os << 1;\n}\n\nnamespace fmt {\ntemplate <typename T> struct formatter<test_template<T>> : formatter<int> {\n  auto format(test_template<T>, format_context& ctx) const\n      -> decltype(ctx.out()) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/ostream-test.cc"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 15,
                  "endLine": 70,
                  "snippet": {
                    "text": "template <> struct formatter<date> : ostream_formatter {};\ntemplate <> struct formatter<streamable_enum> : ostream_formatter {};\ntemplate <> struct formatter<empty_test> : ostream_formatter {};\n}  // namespace fmt\n\nTEST(ostream_test, enum) {\n  EXPECT_EQ(\"streamable_enum\", fmt::format(\"{}\", streamable_enum()));\n  EXPECT_EQ(\"0\", fmt::format(\"{}\", unstreamable_enum()));\n",
                    "rendered": {
                      "text": "template <> struct formatter<date> : ostream_formatter {};\ntemplate <> struct formatter<streamable_enum> : ostream_formatter {};\ntemplate <> struct formatter<empty_test> : ostream_formatter {};\n}  // namespace fmt\n\nTEST(ostream_test, enum) {\n  EXPECT_EQ(\"streamable_enum\", fmt::format(\"{}\", streamable_enum()));\n  EXPECT_EQ(\"0\", fmt::format(\"{}\", unstreamable_enum()));\n",
                      "markdown": "`template <> struct formatter<date> : ostream_formatter {};\ntemplate <> struct formatter<streamable_enum> : ostream_formatter {};\ntemplate <> struct formatter<empty_test> : ostream_formatter {};\n}  // namespace fmt\n\nTEST(ostream_test, enum) {\n  EXPECT_EQ(\"streamable_enum\", fmt::format(\"{}\", streamable_enum()));\n  EXPECT_EQ(\"0\", fmt::format(\"{}\", unstreamable_enum()));\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/ostream-test.cc"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 9,
                  "endLine": 64,
                  "endColumn": 14,
                  "snippet": {
                    "text": "  return os << \"\";\n}\n\nnamespace fmt {\ntemplate <> struct formatter<test_string> : ostream_formatter {};\ntemplate <> struct formatter<date> : ostream_formatter {};\ntemplate <> struct formatter<streamable_enum> : ostream_formatter {};\n",
                    "rendered": {
                      "text": "  return os << \"\";\n}\n\nnamespace fmt {\ntemplate <> struct formatter<test_string> : ostream_formatter {};\ntemplate <> struct formatter<date> : ostream_formatter {};\ntemplate <> struct formatter<streamable_enum> : ostream_formatter {};\n",
                      "markdown": "`  return os << \"\";\n}\n\nnamespace fmt {\ntemplate <> struct formatter<test_string> : ostream_formatter {};\ntemplate <> struct formatter<date> : ostream_formatter {};\ntemplate <> struct formatter<streamable_enum> : ostream_formatter {};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/ostream-test.cc"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 15,
                  "endLine": 25,
                  "snippet": {
                    "text": "    return formatter<int>::format(42, ctx);\n  }\n};\n}  // namespace fmt\n\n#include <sstream>\n\n#include \"fmt/compile.h\"\n",
                    "rendered": {
                      "text": "    return formatter<int>::format(42, ctx);\n  }\n};\n}  // namespace fmt\n\n#include <sstream>\n\n#include \"fmt/compile.h\"\n",
                      "markdown": "`    return formatter<int>::format(42, ctx);\n  }\n};\n}  // namespace fmt\n\n#include <sstream>\n\n#include \"fmt/compile.h\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/ostream-test.cc"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 9,
                  "endLine": 18,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n// Test that there is no issues with specializations when fmt/ostream.h is\n// included after fmt/format.h.\nnamespace fmt {\ntemplate <> struct formatter<test> : formatter<int> {\n  auto format(const test&, format_context& ctx) const -> decltype(ctx.out()) {\n    return formatter<int>::format(42, ctx);\n",
                    "rendered": {
                      "text": "\n// Test that there is no issues with specializations when fmt/ostream.h is\n// included after fmt/format.h.\nnamespace fmt {\ntemplate <> struct formatter<test> : formatter<int> {\n  auto format(const test&, format_context& ctx) const -> decltype(ctx.out()) {\n    return formatter<int>::format(42, ctx);\n",
                      "markdown": "`\n// Test that there is no issues with specializations when fmt/ostream.h is\n// included after fmt/format.h.\nnamespace fmt {\ntemplate <> struct formatter<test> : formatter<int> {\n  auto format(const test&, format_context& ctx) const -> decltype(ctx.out()) {\n    return formatter<int>::format(42, ctx);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/args.h"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 19,
                  "endLine": 178,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    static_assert(\n        need_copy<T>::value,\n        \"objects of built-in types and string views are always copied\");\n    emplace_arg(arg.get());\n  }\n\n  /**\n",
                    "rendered": {
                      "text": "    static_assert(\n        need_copy<T>::value,\n        \"objects of built-in types and string views are always copied\");\n    emplace_arg(arg.get());\n  }\n\n  /**\n",
                      "markdown": "`    static_assert(\n        need_copy<T>::value,\n        \"objects of built-in types and string views are always copied\");\n    emplace_arg(arg.get());\n  }\n\n  /**\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/args.h"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 33,
                  "endLine": 38,
                  "endColumn": 39,
                  "snippet": {
                    "text": "// Workaround for clang's -Wweak-vtables. Unlike for regular classes, for\n// templates it doesn't complain about inability to deduce single translation\n// unit for placing vtable. So node is made a fake template.\ntemplate <typename = void> struct node {\n  virtual ~node() = default;\n  std::unique_ptr<node<>> next;\n};\n",
                    "rendered": {
                      "text": "// Workaround for clang's -Wweak-vtables. Unlike for regular classes, for\n// templates it doesn't complain about inability to deduce single translation\n// unit for placing vtable. So node is made a fake template.\ntemplate <typename = void> struct node {\n  virtual ~node() = default;\n  std::unique_ptr<node<>> next;\n};\n",
                      "markdown": "`// Workaround for clang's -Wweak-vtables. Unlike for regular classes, for\n// templates it doesn't complain about inability to deduce single translation\n// unit for placing vtable. So node is made a fake template.\ntemplate <typename = void> struct node {\n  virtual ~node() = default;\n  std::unique_ptr<node<>> next;\n};\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/color.h"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 1,
                  "endLine": 131,
                  "endColumn": 6,
                  "snippet": {
                    "text": "  powder_blue = 0xB0E0E6,              // rgb(176,224,230)\n  purple = 0x800080,                   // rgb(128,0,128)\n  rebecca_purple = 0x663399,           // rgb(102,51,153)\n  red = 0xFF0000,                      // rgb(255,0,0)\n  rosy_brown = 0xBC8F8F,               // rgb(188,143,143)\n  royal_blue = 0x4169E1,               // rgb(65,105,225)\n  saddle_brown = 0x8B4513,             // rgb(139,69,19)\n",
                    "rendered": {
                      "text": "  powder_blue = 0xB0E0E6,              // rgb(176,224,230)\n  purple = 0x800080,                   // rgb(128,0,128)\n  rebecca_purple = 0x663399,           // rgb(102,51,153)\n  red = 0xFF0000,                      // rgb(255,0,0)\n  rosy_brown = 0xBC8F8F,               // rgb(188,143,143)\n  royal_blue = 0x4169E1,               // rgb(65,105,225)\n  saddle_brown = 0x8B4513,             // rgb(139,69,19)\n",
                      "markdown": "`  powder_blue = 0xB0E0E6,              // rgb(176,224,230)\n  purple = 0x800080,                   // rgb(128,0,128)\n  rebecca_purple = 0x663399,           // rgb(102,51,153)\n  red = 0xFF0000,                      // rgb(255,0,0)\n  rosy_brown = 0xBC8F8F,               // rgb(188,143,143)\n  royal_blue = 0x4169E1,               // rgb(65,105,225)\n  saddle_brown = 0x8B4513,             // rgb(139,69,19)\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.github/workflows/doc.yml"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 16,
                  "endLine": 27,
                  "snippet": {
                    "text": "\n    - name: Create build environment\n      run: |\n        sudo apt update\n        sudo apt install doxygen\n        pip install mkdocs-material==9.5.25 mkdocstrings==0.25.1 mike==2.1.1\n        cmake -E make_directory ${{runner.workspace}}/build\n        # Workaround https://github.com/actions/checkout/issues/13:\n",
                    "rendered": {
                      "text": "\n    - name: Create build environment\n      run: |\n        sudo apt update\n        sudo apt install doxygen\n        pip install mkdocs-material==9.5.25 mkdocstrings==0.25.1 mike==2.1.1\n        cmake -E make_directory ${{runner.workspace}}/build\n        # Workaround https://github.com/actions/checkout/issues/13:\n",
                      "markdown": "`\n    - name: Create build environment\n      run: |\n        sudo apt update\n        sudo apt install doxygen\n        pip install mkdocs-material==9.5.25 mkdocstrings==0.25.1 mike==2.1.1\n        cmake -E make_directory ${{runner.workspace}}/build\n        # Workaround https://github.com/actions/checkout/issues/13:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.github/workflows/doc.yml"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 41,
                  "endLine": 18,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n    - name: Add Ubuntu mirrors\n      run: |\n        # Github Actions caching proxy is at times unreliable\n        # see https://github.com/actions/runner-images/issues/7048\n        printf 'http://azure.archive.ubuntu.com/ubuntu\\tpriority:1\\n' | sudo tee /etc/apt/mirrors.txt\n        curl http://mirrors.ubuntu.com/mirrors.txt | sudo tee --append /etc/apt/mirrors.txt\n",
                    "rendered": {
                      "text": "\n    - name: Add Ubuntu mirrors\n      run: |\n        # Github Actions caching proxy is at times unreliable\n        # see https://github.com/actions/runner-images/issues/7048\n        printf 'http://azure.archive.ubuntu.com/ubuntu\\tpriority:1\\n' | sudo tee /etc/apt/mirrors.txt\n        curl http://mirrors.ubuntu.com/mirrors.txt | sudo tee --append /etc/apt/mirrors.txt\n",
                      "markdown": "`\n    - name: Add Ubuntu mirrors\n      run: |\n        # Github Actions caching proxy is at times unreliable\n        # see https://github.com/actions/runner-images/issues/7048\n        printf 'http://azure.archive.ubuntu.com/ubuntu\\tpriority:1\\n' | sudo tee /etc/apt/mirrors.txt\n        curl http://mirrors.ubuntu.com/mirrors.txt | sudo tee --append /etc/apt/mirrors.txt\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.github/workflows/doc.yml"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 10,
                  "endLine": 43,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        KEY: \"${{secrets.KEY}}\"\n      if: env.KEY != '' && github.ref == 'refs/heads/master'\n      working-directory: ${{runner.workspace}}/fmt/build/fmt.dev\n      run: git push https://$KEY@github.com/fmtlib/fmt.dev.git\n",
                    "rendered": {
                      "text": "        KEY: \"${{secrets.KEY}}\"\n      if: env.KEY != '' && github.ref == 'refs/heads/master'\n      working-directory: ${{runner.workspace}}/fmt/build/fmt.dev\n      run: git push https://$KEY@github.com/fmtlib/fmt.dev.git\n",
                      "markdown": "`        KEY: \"${{secrets.KEY}}\"\n      if: env.KEY != '' && github.ref == 'refs/heads/master'\n      working-directory: ${{runner.workspace}}/fmt/build/fmt.dev\n      run: git push https://$KEY@github.com/fmtlib/fmt.dev.git\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.github/workflows/doc.yml"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 7,
                  "endLine": 32,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        cmake -E make_directory ${{runner.workspace}}/build\n        # Workaround https://github.com/actions/checkout/issues/13:\n        git config --global user.name \"$(git --no-pager log --format=format:'%an' -n 1)\"\n        git config --global user.email \"$(git --no-pager log --format=format:'%ae' -n 1)\"\n\n    - name: Build\n      working-directory: ${{runner.workspace}}/build\n",
                    "rendered": {
                      "text": "        cmake -E make_directory ${{runner.workspace}}/build\n        # Workaround https://github.com/actions/checkout/issues/13:\n        git config --global user.name \"$(git --no-pager log --format=format:'%an' -n 1)\"\n        git config --global user.email \"$(git --no-pager log --format=format:'%ae' -n 1)\"\n\n    - name: Build\n      working-directory: ${{runner.workspace}}/build\n",
                      "markdown": "`        cmake -E make_directory ${{runner.workspace}}/build\n        # Workaround https://github.com/actions/checkout/issues/13:\n        git config --global user.name \"$(git --no-pager log --format=format:'%an' -n 1)\"\n        git config --global user.email \"$(git --no-pager log --format=format:'%ae' -n 1)\"\n\n    - name: Build\n      working-directory: ${{runner.workspace}}/build\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.github/workflows/doc.yml"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 7,
                  "endLine": 31,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        pip install mkdocs-material==9.5.25 mkdocstrings==0.25.1 mike==2.1.1\n        cmake -E make_directory ${{runner.workspace}}/build\n        # Workaround https://github.com/actions/checkout/issues/13:\n        git config --global user.name \"$(git --no-pager log --format=format:'%an' -n 1)\"\n        git config --global user.email \"$(git --no-pager log --format=format:'%ae' -n 1)\"\n\n    - name: Build\n",
                    "rendered": {
                      "text": "        pip install mkdocs-material==9.5.25 mkdocstrings==0.25.1 mike==2.1.1\n        cmake -E make_directory ${{runner.workspace}}/build\n        # Workaround https://github.com/actions/checkout/issues/13:\n        git config --global user.name \"$(git --no-pager log --format=format:'%an' -n 1)\"\n        git config --global user.email \"$(git --no-pager log --format=format:'%ae' -n 1)\"\n\n    - name: Build\n",
                      "markdown": "`        pip install mkdocs-material==9.5.25 mkdocstrings==0.25.1 mike==2.1.1\n        cmake -E make_directory ${{runner.workspace}}/build\n        # Workaround https://github.com/actions/checkout/issues/13:\n        git config --global user.name \"$(git --no-pager log --format=format:'%an' -n 1)\"\n        git config --global user.email \"$(git --no-pager log --format=format:'%ae' -n 1)\"\n\n    - name: Build\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.github/workflows/doc.yml"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 7,
                  "endLine": 28,
                  "endColumn": 12,
                  "snippet": {
                    "text": "      run: |\n        sudo apt update\n        sudo apt install doxygen\n        pip install mkdocs-material==9.5.25 mkdocstrings==0.25.1 mike==2.1.1\n        cmake -E make_directory ${{runner.workspace}}/build\n        # Workaround https://github.com/actions/checkout/issues/13:\n        git config --global user.name \"$(git --no-pager log --format=format:'%an' -n 1)\"\n",
                    "rendered": {
                      "text": "      run: |\n        sudo apt update\n        sudo apt install doxygen\n        pip install mkdocs-material==9.5.25 mkdocstrings==0.25.1 mike==2.1.1\n        cmake -E make_directory ${{runner.workspace}}/build\n        # Workaround https://github.com/actions/checkout/issues/13:\n        git config --global user.name \"$(git --no-pager log --format=format:'%an' -n 1)\"\n",
                      "markdown": "`      run: |\n        sudo apt update\n        sudo apt install doxygen\n        pip install mkdocs-material==9.5.25 mkdocstrings==0.25.1 mike==2.1.1\n        cmake -E make_directory ${{runner.workspace}}/build\n        # Workaround https://github.com/actions/checkout/issues/13:\n        git config --global user.name \"$(git --no-pager log --format=format:'%an' -n 1)\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.github/workflows/doc.yml"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 12,
                  "endLine": 27,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    - name: Create build environment\n      run: |\n        sudo apt update\n        sudo apt install doxygen\n        pip install mkdocs-material==9.5.25 mkdocstrings==0.25.1 mike==2.1.1\n        cmake -E make_directory ${{runner.workspace}}/build\n        # Workaround https://github.com/actions/checkout/issues/13:\n",
                    "rendered": {
                      "text": "    - name: Create build environment\n      run: |\n        sudo apt update\n        sudo apt install doxygen\n        pip install mkdocs-material==9.5.25 mkdocstrings==0.25.1 mike==2.1.1\n        cmake -E make_directory ${{runner.workspace}}/build\n        # Workaround https://github.com/actions/checkout/issues/13:\n",
                      "markdown": "`    - name: Create build environment\n      run: |\n        sudo apt update\n        sudo apt install doxygen\n        pip install mkdocs-material==9.5.25 mkdocstrings==0.25.1 mike==2.1.1\n        cmake -E make_directory ${{runner.workspace}}/build\n        # Workaround https://github.com/actions/checkout/issues/13:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.github/workflows/doc.yml"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 12,
                  "endLine": 26,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n    - name: Create build environment\n      run: |\n        sudo apt update\n        sudo apt install doxygen\n        pip install mkdocs-material==9.5.25 mkdocstrings==0.25.1 mike==2.1.1\n        cmake -E make_directory ${{runner.workspace}}/build\n",
                    "rendered": {
                      "text": "\n    - name: Create build environment\n      run: |\n        sudo apt update\n        sudo apt install doxygen\n        pip install mkdocs-material==9.5.25 mkdocstrings==0.25.1 mike==2.1.1\n        cmake -E make_directory ${{runner.workspace}}/build\n",
                      "markdown": "`\n    - name: Create build environment\n      run: |\n        sudo apt update\n        sudo apt install doxygen\n        pip install mkdocs-material==9.5.25 mkdocstrings==0.25.1 mike==2.1.1\n        cmake -E make_directory ${{runner.workspace}}/build\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.github/workflows/doc.yml"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 12,
                  "endLine": 22,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        # see https://github.com/actions/runner-images/issues/7048\n        printf 'http://azure.archive.ubuntu.com/ubuntu\\tpriority:1\\n' | sudo tee /etc/apt/mirrors.txt\n        curl http://mirrors.ubuntu.com/mirrors.txt | sudo tee --append /etc/apt/mirrors.txt\n        sudo sed -i 's~http://azure.archive.ubuntu.com/ubuntu/~mirror+file:/etc/apt/mirrors.txt~' /etc/apt/sources.list\n\n    - name: Create build environment\n      run: |\n",
                    "rendered": {
                      "text": "        # see https://github.com/actions/runner-images/issues/7048\n        printf 'http://azure.archive.ubuntu.com/ubuntu\\tpriority:1\\n' | sudo tee /etc/apt/mirrors.txt\n        curl http://mirrors.ubuntu.com/mirrors.txt | sudo tee --append /etc/apt/mirrors.txt\n        sudo sed -i 's~http://azure.archive.ubuntu.com/ubuntu/~mirror+file:/etc/apt/mirrors.txt~' /etc/apt/sources.list\n\n    - name: Create build environment\n      run: |\n",
                      "markdown": "`        # see https://github.com/actions/runner-images/issues/7048\n        printf 'http://azure.archive.ubuntu.com/ubuntu\\tpriority:1\\n' | sudo tee /etc/apt/mirrors.txt\n        curl http://mirrors.ubuntu.com/mirrors.txt | sudo tee --append /etc/apt/mirrors.txt\n        sudo sed -i 's~http://azure.archive.ubuntu.com/ubuntu/~mirror+file:/etc/apt/mirrors.txt~' /etc/apt/sources.list\n\n    - name: Create build environment\n      run: |\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.github/workflows/doc.yml"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 57,
                  "endLine": 21,
                  "endColumn": 62,
                  "snippet": {
                    "text": "        # Github Actions caching proxy is at times unreliable\n        # see https://github.com/actions/runner-images/issues/7048\n        printf 'http://azure.archive.ubuntu.com/ubuntu\\tpriority:1\\n' | sudo tee /etc/apt/mirrors.txt\n        curl http://mirrors.ubuntu.com/mirrors.txt | sudo tee --append /etc/apt/mirrors.txt\n        sudo sed -i 's~http://azure.archive.ubuntu.com/ubuntu/~mirror+file:/etc/apt/mirrors.txt~' /etc/apt/sources.list\n\n    - name: Create build environment\n",
                    "rendered": {
                      "text": "        # Github Actions caching proxy is at times unreliable\n        # see https://github.com/actions/runner-images/issues/7048\n        printf 'http://azure.archive.ubuntu.com/ubuntu\\tpriority:1\\n' | sudo tee /etc/apt/mirrors.txt\n        curl http://mirrors.ubuntu.com/mirrors.txt | sudo tee --append /etc/apt/mirrors.txt\n        sudo sed -i 's~http://azure.archive.ubuntu.com/ubuntu/~mirror+file:/etc/apt/mirrors.txt~' /etc/apt/sources.list\n\n    - name: Create build environment\n",
                      "markdown": "`        # Github Actions caching proxy is at times unreliable\n        # see https://github.com/actions/runner-images/issues/7048\n        printf 'http://azure.archive.ubuntu.com/ubuntu\\tpriority:1\\n' | sudo tee /etc/apt/mirrors.txt\n        curl http://mirrors.ubuntu.com/mirrors.txt | sudo tee --append /etc/apt/mirrors.txt\n        sudo sed -i 's~http://azure.archive.ubuntu.com/ubuntu/~mirror+file:/etc/apt/mirrors.txt~' /etc/apt/sources.list\n\n    - name: Create build environment\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.github/workflows/doc.yml"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 7,
                  "endLine": 21,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        # Github Actions caching proxy is at times unreliable\n        # see https://github.com/actions/runner-images/issues/7048\n        printf 'http://azure.archive.ubuntu.com/ubuntu\\tpriority:1\\n' | sudo tee /etc/apt/mirrors.txt\n        curl http://mirrors.ubuntu.com/mirrors.txt | sudo tee --append /etc/apt/mirrors.txt\n        sudo sed -i 's~http://azure.archive.ubuntu.com/ubuntu/~mirror+file:/etc/apt/mirrors.txt~' /etc/apt/sources.list\n\n    - name: Create build environment\n",
                    "rendered": {
                      "text": "        # Github Actions caching proxy is at times unreliable\n        # see https://github.com/actions/runner-images/issues/7048\n        printf 'http://azure.archive.ubuntu.com/ubuntu\\tpriority:1\\n' | sudo tee /etc/apt/mirrors.txt\n        curl http://mirrors.ubuntu.com/mirrors.txt | sudo tee --append /etc/apt/mirrors.txt\n        sudo sed -i 's~http://azure.archive.ubuntu.com/ubuntu/~mirror+file:/etc/apt/mirrors.txt~' /etc/apt/sources.list\n\n    - name: Create build environment\n",
                      "markdown": "`        # Github Actions caching proxy is at times unreliable\n        # see https://github.com/actions/runner-images/issues/7048\n        printf 'http://azure.archive.ubuntu.com/ubuntu\\tpriority:1\\n' | sudo tee /etc/apt/mirrors.txt\n        curl http://mirrors.ubuntu.com/mirrors.txt | sudo tee --append /etc/apt/mirrors.txt\n        sudo sed -i 's~http://azure.archive.ubuntu.com/ubuntu/~mirror+file:/etc/apt/mirrors.txt~' /etc/apt/sources.list\n\n    - name: Create build environment\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.github/workflows/doc.yml"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 76,
                  "endLine": 20,
                  "endColumn": 81,
                  "snippet": {
                    "text": "      run: |\n        # Github Actions caching proxy is at times unreliable\n        # see https://github.com/actions/runner-images/issues/7048\n        printf 'http://azure.archive.ubuntu.com/ubuntu\\tpriority:1\\n' | sudo tee /etc/apt/mirrors.txt\n        curl http://mirrors.ubuntu.com/mirrors.txt | sudo tee --append /etc/apt/mirrors.txt\n        sudo sed -i 's~http://azure.archive.ubuntu.com/ubuntu/~mirror+file:/etc/apt/mirrors.txt~' /etc/apt/sources.list\n\n",
                    "rendered": {
                      "text": "      run: |\n        # Github Actions caching proxy is at times unreliable\n        # see https://github.com/actions/runner-images/issues/7048\n        printf 'http://azure.archive.ubuntu.com/ubuntu\\tpriority:1\\n' | sudo tee /etc/apt/mirrors.txt\n        curl http://mirrors.ubuntu.com/mirrors.txt | sudo tee --append /etc/apt/mirrors.txt\n        sudo sed -i 's~http://azure.archive.ubuntu.com/ubuntu/~mirror+file:/etc/apt/mirrors.txt~' /etc/apt/sources.list\n\n",
                      "markdown": "`      run: |\n        # Github Actions caching proxy is at times unreliable\n        # see https://github.com/actions/runner-images/issues/7048\n        printf 'http://azure.archive.ubuntu.com/ubuntu\\tpriority:1\\n' | sudo tee /etc/apt/mirrors.txt\n        curl http://mirrors.ubuntu.com/mirrors.txt | sudo tee --append /etc/apt/mirrors.txt\n        sudo sed -i 's~http://azure.archive.ubuntu.com/ubuntu/~mirror+file:/etc/apt/mirrors.txt~' /etc/apt/sources.list\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.github/workflows/linux.yml"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 16,
                  "endLine": 93,
                  "snippet": {
                    "text": "\n    - name: Create Build Environment\n      run: |\n        sudo apt update\n        ${{matrix.install}}\n        sudo apt install locales-all\n        cmake -E make_directory ${{runner.workspace}}/build\n\n",
                    "rendered": {
                      "text": "\n    - name: Create Build Environment\n      run: |\n        sudo apt update\n        ${{matrix.install}}\n        sudo apt install locales-all\n        cmake -E make_directory ${{runner.workspace}}/build\n\n",
                      "markdown": "`\n    - name: Create Build Environment\n      run: |\n        sudo apt update\n        ${{matrix.install}}\n        sudo apt install locales-all\n        cmake -E make_directory ${{runner.workspace}}/build\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.github/workflows/linux.yml"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 41,
                  "endLine": 84,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n    - name: Add Ubuntu mirrors\n      run: |\n        # Github Actions caching proxy is at times unreliable\n        # see https://github.com/actions/runner-images/issues/7048\n        printf 'http://azure.archive.ubuntu.com/ubuntu\\tpriority:1\\n' | sudo tee /etc/apt/mirrors.txt\n        curl http://mirrors.ubuntu.com/mirrors.txt | sudo tee --append /etc/apt/mirrors.txt\n",
                    "rendered": {
                      "text": "\n    - name: Add Ubuntu mirrors\n      run: |\n        # Github Actions caching proxy is at times unreliable\n        # see https://github.com/actions/runner-images/issues/7048\n        printf 'http://azure.archive.ubuntu.com/ubuntu\\tpriority:1\\n' | sudo tee /etc/apt/mirrors.txt\n        curl http://mirrors.ubuntu.com/mirrors.txt | sudo tee --append /etc/apt/mirrors.txt\n",
                      "markdown": "`\n    - name: Add Ubuntu mirrors\n      run: |\n        # Github Actions caching proxy is at times unreliable\n        # see https://github.com/actions/runner-images/issues/7048\n        printf 'http://azure.archive.ubuntu.com/ubuntu\\tpriority:1\\n' | sudo tee /etc/apt/mirrors.txt\n        curl http://mirrors.ubuntu.com/mirrors.txt | sudo tee --append /etc/apt/mirrors.txt\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.github/workflows/linux.yml"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 12,
                  "endLine": 94,
                  "endColumn": 17,
                  "snippet": {
                    "text": "      run: |\n        sudo apt update\n        ${{matrix.install}}\n        sudo apt install locales-all\n        cmake -E make_directory ${{runner.workspace}}/build\n\n    - name: Configure\n",
                    "rendered": {
                      "text": "      run: |\n        sudo apt update\n        ${{matrix.install}}\n        sudo apt install locales-all\n        cmake -E make_directory ${{runner.workspace}}/build\n\n    - name: Configure\n",
                      "markdown": "`      run: |\n        sudo apt update\n        ${{matrix.install}}\n        sudo apt install locales-all\n        cmake -E make_directory ${{runner.workspace}}/build\n\n    - name: Configure\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.github/workflows/linux.yml"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 12,
                  "endLine": 92,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n    - name: Create Build Environment\n      run: |\n        sudo apt update\n        ${{matrix.install}}\n        sudo apt install locales-all\n        cmake -E make_directory ${{runner.workspace}}/build\n",
                    "rendered": {
                      "text": "\n    - name: Create Build Environment\n      run: |\n        sudo apt update\n        ${{matrix.install}}\n        sudo apt install locales-all\n        cmake -E make_directory ${{runner.workspace}}/build\n",
                      "markdown": "`\n    - name: Create Build Environment\n      run: |\n        sudo apt update\n        ${{matrix.install}}\n        sudo apt install locales-all\n        cmake -E make_directory ${{runner.workspace}}/build\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.github/workflows/linux.yml"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 12,
                  "endLine": 88,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        # see https://github.com/actions/runner-images/issues/7048\n        printf 'http://azure.archive.ubuntu.com/ubuntu\\tpriority:1\\n' | sudo tee /etc/apt/mirrors.txt\n        curl http://mirrors.ubuntu.com/mirrors.txt | sudo tee --append /etc/apt/mirrors.txt\n        sudo sed -i 's~http://azure.archive.ubuntu.com/ubuntu/~mirror+file:/etc/apt/mirrors.txt~' /etc/apt/sources.list\n\n    - name: Create Build Environment\n      run: |\n",
                    "rendered": {
                      "text": "        # see https://github.com/actions/runner-images/issues/7048\n        printf 'http://azure.archive.ubuntu.com/ubuntu\\tpriority:1\\n' | sudo tee /etc/apt/mirrors.txt\n        curl http://mirrors.ubuntu.com/mirrors.txt | sudo tee --append /etc/apt/mirrors.txt\n        sudo sed -i 's~http://azure.archive.ubuntu.com/ubuntu/~mirror+file:/etc/apt/mirrors.txt~' /etc/apt/sources.list\n\n    - name: Create Build Environment\n      run: |\n",
                      "markdown": "`        # see https://github.com/actions/runner-images/issues/7048\n        printf 'http://azure.archive.ubuntu.com/ubuntu\\tpriority:1\\n' | sudo tee /etc/apt/mirrors.txt\n        curl http://mirrors.ubuntu.com/mirrors.txt | sudo tee --append /etc/apt/mirrors.txt\n        sudo sed -i 's~http://azure.archive.ubuntu.com/ubuntu/~mirror+file:/etc/apt/mirrors.txt~' /etc/apt/sources.list\n\n    - name: Create Build Environment\n      run: |\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.github/workflows/linux.yml"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 57,
                  "endLine": 87,
                  "endColumn": 62,
                  "snippet": {
                    "text": "        # Github Actions caching proxy is at times unreliable\n        # see https://github.com/actions/runner-images/issues/7048\n        printf 'http://azure.archive.ubuntu.com/ubuntu\\tpriority:1\\n' | sudo tee /etc/apt/mirrors.txt\n        curl http://mirrors.ubuntu.com/mirrors.txt | sudo tee --append /etc/apt/mirrors.txt\n        sudo sed -i 's~http://azure.archive.ubuntu.com/ubuntu/~mirror+file:/etc/apt/mirrors.txt~' /etc/apt/sources.list\n\n    - name: Create Build Environment\n",
                    "rendered": {
                      "text": "        # Github Actions caching proxy is at times unreliable\n        # see https://github.com/actions/runner-images/issues/7048\n        printf 'http://azure.archive.ubuntu.com/ubuntu\\tpriority:1\\n' | sudo tee /etc/apt/mirrors.txt\n        curl http://mirrors.ubuntu.com/mirrors.txt | sudo tee --append /etc/apt/mirrors.txt\n        sudo sed -i 's~http://azure.archive.ubuntu.com/ubuntu/~mirror+file:/etc/apt/mirrors.txt~' /etc/apt/sources.list\n\n    - name: Create Build Environment\n",
                      "markdown": "`        # Github Actions caching proxy is at times unreliable\n        # see https://github.com/actions/runner-images/issues/7048\n        printf 'http://azure.archive.ubuntu.com/ubuntu\\tpriority:1\\n' | sudo tee /etc/apt/mirrors.txt\n        curl http://mirrors.ubuntu.com/mirrors.txt | sudo tee --append /etc/apt/mirrors.txt\n        sudo sed -i 's~http://azure.archive.ubuntu.com/ubuntu/~mirror+file:/etc/apt/mirrors.txt~' /etc/apt/sources.list\n\n    - name: Create Build Environment\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.github/workflows/linux.yml"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 7,
                  "endLine": 87,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        # Github Actions caching proxy is at times unreliable\n        # see https://github.com/actions/runner-images/issues/7048\n        printf 'http://azure.archive.ubuntu.com/ubuntu\\tpriority:1\\n' | sudo tee /etc/apt/mirrors.txt\n        curl http://mirrors.ubuntu.com/mirrors.txt | sudo tee --append /etc/apt/mirrors.txt\n        sudo sed -i 's~http://azure.archive.ubuntu.com/ubuntu/~mirror+file:/etc/apt/mirrors.txt~' /etc/apt/sources.list\n\n    - name: Create Build Environment\n",
                    "rendered": {
                      "text": "        # Github Actions caching proxy is at times unreliable\n        # see https://github.com/actions/runner-images/issues/7048\n        printf 'http://azure.archive.ubuntu.com/ubuntu\\tpriority:1\\n' | sudo tee /etc/apt/mirrors.txt\n        curl http://mirrors.ubuntu.com/mirrors.txt | sudo tee --append /etc/apt/mirrors.txt\n        sudo sed -i 's~http://azure.archive.ubuntu.com/ubuntu/~mirror+file:/etc/apt/mirrors.txt~' /etc/apt/sources.list\n\n    - name: Create Build Environment\n",
                      "markdown": "`        # Github Actions caching proxy is at times unreliable\n        # see https://github.com/actions/runner-images/issues/7048\n        printf 'http://azure.archive.ubuntu.com/ubuntu\\tpriority:1\\n' | sudo tee /etc/apt/mirrors.txt\n        curl http://mirrors.ubuntu.com/mirrors.txt | sudo tee --append /etc/apt/mirrors.txt\n        sudo sed -i 's~http://azure.archive.ubuntu.com/ubuntu/~mirror+file:/etc/apt/mirrors.txt~' /etc/apt/sources.list\n\n    - name: Create Build Environment\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.github/workflows/linux.yml"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 76,
                  "endLine": 86,
                  "endColumn": 81,
                  "snippet": {
                    "text": "      run: |\n        # Github Actions caching proxy is at times unreliable\n        # see https://github.com/actions/runner-images/issues/7048\n        printf 'http://azure.archive.ubuntu.com/ubuntu\\tpriority:1\\n' | sudo tee /etc/apt/mirrors.txt\n        curl http://mirrors.ubuntu.com/mirrors.txt | sudo tee --append /etc/apt/mirrors.txt\n        sudo sed -i 's~http://azure.archive.ubuntu.com/ubuntu/~mirror+file:/etc/apt/mirrors.txt~' /etc/apt/sources.list\n\n",
                    "rendered": {
                      "text": "      run: |\n        # Github Actions caching proxy is at times unreliable\n        # see https://github.com/actions/runner-images/issues/7048\n        printf 'http://azure.archive.ubuntu.com/ubuntu\\tpriority:1\\n' | sudo tee /etc/apt/mirrors.txt\n        curl http://mirrors.ubuntu.com/mirrors.txt | sudo tee --append /etc/apt/mirrors.txt\n        sudo sed -i 's~http://azure.archive.ubuntu.com/ubuntu/~mirror+file:/etc/apt/mirrors.txt~' /etc/apt/sources.list\n\n",
                      "markdown": "`      run: |\n        # Github Actions caching proxy is at times unreliable\n        # see https://github.com/actions/runner-images/issues/7048\n        printf 'http://azure.archive.ubuntu.com/ubuntu\\tpriority:1\\n' | sudo tee /etc/apt/mirrors.txt\n        curl http://mirrors.ubuntu.com/mirrors.txt | sudo tee --append /etc/apt/mirrors.txt\n        sudo sed -i 's~http://azure.archive.ubuntu.com/ubuntu/~mirror+file:/etc/apt/mirrors.txt~' /etc/apt/sources.list\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.github/workflows/linux.yml"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 25,
                  "endLine": 61,
                  "endColumn": 30,
                  "snippet": {
                    "text": "          - cxx: g++-13\n            build_type: Release\n            std: 23\n            install: sudo apt install g++-13\n            shared: -DBUILD_SHARED_LIBS=ON\n\n    steps:\n",
                    "rendered": {
                      "text": "          - cxx: g++-13\n            build_type: Release\n            std: 23\n            install: sudo apt install g++-13\n            shared: -DBUILD_SHARED_LIBS=ON\n\n    steps:\n",
                      "markdown": "`          - cxx: g++-13\n            build_type: Release\n            std: 23\n            install: sudo apt install g++-13\n            shared: -DBUILD_SHARED_LIBS=ON\n\n    steps:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.github/workflows/linux.yml"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 25,
                  "endLine": 57,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            build_type: Debug\n            std: 20\n            cxxflags: -stdlib=libc++\n            install: sudo apt install libc++-11-dev libc++abi-11-dev\n          - cxx: g++-13\n            build_type: Release\n            std: 23\n",
                    "rendered": {
                      "text": "            build_type: Debug\n            std: 20\n            cxxflags: -stdlib=libc++\n            install: sudo apt install libc++-11-dev libc++abi-11-dev\n          - cxx: g++-13\n            build_type: Release\n            std: 23\n",
                      "markdown": "`            build_type: Debug\n            std: 20\n            cxxflags: -stdlib=libc++\n            install: sudo apt install libc++-11-dev libc++abi-11-dev\n          - cxx: g++-13\n            build_type: Release\n            std: 23\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.github/workflows/linux.yml"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 25,
                  "endLine": 49,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            build_type: Debug\n            fuzz: -DFMT_FUZZ=ON -DFMT_FUZZ_LINKMAIN=ON\n            std: 17\n            install: sudo apt install clang-9\n          - cxx: clang++-11\n            build_type: Debug\n            std: 20\n",
                    "rendered": {
                      "text": "            build_type: Debug\n            fuzz: -DFMT_FUZZ=ON -DFMT_FUZZ_LINKMAIN=ON\n            std: 17\n            install: sudo apt install clang-9\n          - cxx: clang++-11\n            build_type: Debug\n            std: 20\n",
                      "markdown": "`            build_type: Debug\n            fuzz: -DFMT_FUZZ=ON -DFMT_FUZZ_LINKMAIN=ON\n            std: 17\n            install: sudo apt install clang-9\n          - cxx: clang++-11\n            build_type: Debug\n            std: 20\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.github/workflows/linux.yml"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 25,
                  "endLine": 44,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            cxxflags: -stdlib=libc++\n            install: sudo apt install clang-8 libc++-8-dev libc++abi-8-dev\n          - cxx: clang++-9\n            install: sudo apt install clang-9\n          - cxx: clang++-9\n            build_type: Debug\n            fuzz: -DFMT_FUZZ=ON -DFMT_FUZZ_LINKMAIN=ON\n",
                    "rendered": {
                      "text": "            cxxflags: -stdlib=libc++\n            install: sudo apt install clang-8 libc++-8-dev libc++abi-8-dev\n          - cxx: clang++-9\n            install: sudo apt install clang-9\n          - cxx: clang++-9\n            build_type: Debug\n            fuzz: -DFMT_FUZZ=ON -DFMT_FUZZ_LINKMAIN=ON\n",
                      "markdown": "`            cxxflags: -stdlib=libc++\n            install: sudo apt install clang-8 libc++-8-dev libc++abi-8-dev\n          - cxx: clang++-9\n            install: sudo apt install clang-9\n          - cxx: clang++-9\n            build_type: Debug\n            fuzz: -DFMT_FUZZ=ON -DFMT_FUZZ_LINKMAIN=ON\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.github/workflows/linux.yml"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 25,
                  "endLine": 42,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            build_type: Debug\n            std: 17\n            cxxflags: -stdlib=libc++\n            install: sudo apt install clang-8 libc++-8-dev libc++abi-8-dev\n          - cxx: clang++-9\n            install: sudo apt install clang-9\n          - cxx: clang++-9\n",
                    "rendered": {
                      "text": "            build_type: Debug\n            std: 17\n            cxxflags: -stdlib=libc++\n            install: sudo apt install clang-8 libc++-8-dev libc++abi-8-dev\n          - cxx: clang++-9\n            install: sudo apt install clang-9\n          - cxx: clang++-9\n",
                      "markdown": "`            build_type: Debug\n            std: 17\n            cxxflags: -stdlib=libc++\n            install: sudo apt install clang-8 libc++-8-dev libc++abi-8-dev\n          - cxx: clang++-9\n            install: sudo apt install clang-9\n          - cxx: clang++-9\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.github/workflows/linux.yml"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "          - cxx: g++-11\n            build_type: Debug\n            std: 20\n            install: sudo apt install g++-11\n          - cxx: clang++-8\n            build_type: Debug\n            std: 17\n",
                    "rendered": {
                      "text": "          - cxx: g++-11\n            build_type: Debug\n            std: 20\n            install: sudo apt install g++-11\n          - cxx: clang++-8\n            build_type: Debug\n            std: 17\n",
                      "markdown": "`          - cxx: g++-11\n            build_type: Debug\n            std: 20\n            install: sudo apt install g++-11\n          - cxx: clang++-8\n            build_type: Debug\n            std: 17\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.github/workflows/linux.yml"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 25,
                  "endLine": 27,
                  "endColumn": 30,
                  "snippet": {
                    "text": "          - cxx: g++-8\n            build_type: Debug\n            std: 17\n            install: sudo apt install g++-8\n          - cxx: g++-9\n            build_type: Debug\n            std: 17\n",
                    "rendered": {
                      "text": "          - cxx: g++-8\n            build_type: Debug\n            std: 17\n            install: sudo apt install g++-8\n          - cxx: g++-9\n            build_type: Debug\n            std: 17\n",
                      "markdown": "`          - cxx: g++-8\n            build_type: Debug\n            std: 17\n            install: sudo apt install g++-8\n          - cxx: g++-9\n            build_type: Debug\n            std: 17\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.github/workflows/linux.yml"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 25,
                  "endLine": 23,
                  "endColumn": 30,
                  "snippet": {
                    "text": "          - cxx: g++-8\n            build_type: Debug\n            std: 14\n            install: sudo apt install g++-8\n          - cxx: g++-8\n            build_type: Debug\n            std: 17\n",
                    "rendered": {
                      "text": "          - cxx: g++-8\n            build_type: Debug\n            std: 14\n            install: sudo apt install g++-8\n          - cxx: g++-8\n            build_type: Debug\n            std: 17\n",
                      "markdown": "`          - cxx: g++-8\n            build_type: Debug\n            std: 14\n            install: sudo apt install g++-8\n          - cxx: g++-8\n            build_type: Debug\n            std: 17\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.github/workflows/linux.yml"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 25,
                  "endLine": 19,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        shared: [\"\"]\n        include:\n          - cxx: g++-4.9\n            install: sudo apt install g++-4.9\n          - cxx: g++-8\n            build_type: Debug\n            std: 14\n",
                    "rendered": {
                      "text": "        shared: [\"\"]\n        include:\n          - cxx: g++-4.9\n            install: sudo apt install g++-4.9\n          - cxx: g++-8\n            build_type: Debug\n            std: 14\n",
                      "markdown": "`        shared: [\"\"]\n        include:\n          - cxx: g++-4.9\n            install: sudo apt install g++-4.9\n          - cxx: g++-8\n            build_type: Debug\n            std: 14\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/ChangeLog.md"
                },
                "region": {
                  "startLine": 2493,
                  "startColumn": 48,
                  "endLine": 2493,
                  "endColumn": 57,
                  "snippet": {
                    "text": "- Error messages are now passed to assert when exceptions are disabled\n  (https://github.com/fmtlib/fmt/pull/2145). Thanks @NobodyXu.\n\n- Added the `FMT_MASTER_PROJECT` CMake option to control build and\n  install targets when {fmt} is included via `add_subdirectory`\n  (https://github.com/fmtlib/fmt/issues/2098,\n  https://github.com/fmtlib/fmt/pull/2100).\n",
                    "rendered": {
                      "text": "- Error messages are now passed to assert when exceptions are disabled\n  (https://github.com/fmtlib/fmt/pull/2145). Thanks @NobodyXu.\n\n- Added the `FMT_MASTER_PROJECT` CMake option to control build and\n  install targets when {fmt} is included via `add_subdirectory`\n  (https://github.com/fmtlib/fmt/issues/2098,\n  https://github.com/fmtlib/fmt/pull/2100).\n",
                      "markdown": "`- Error messages are now passed to assert when exceptions are disabled\n  (https://github.com/fmtlib/fmt/pull/2145). Thanks @NobodyXu.\n\n- Added the `FMT_MASTER_PROJECT` CMake option to control build and\n  install targets when {fmt} is included via `add_subdirectory`\n  (https://github.com/fmtlib/fmt/issues/2098,\n  https://github.com/fmtlib/fmt/pull/2100).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/ChangeLog.md"
                },
                "region": {
                  "startLine": 2162,
                  "startColumn": 48,
                  "endLine": 2162,
                  "endColumn": 52,
                  "snippet": {
                    "text": "  auto s = fmt::format(FMT_COMPILE(\"{answer}\"), \"answer\"_a = 42);\n  ```\n\n  Here the argument named \\\"answer\\\" is resolved at compile time with\n  no runtime overhead. Thanks @alexezeder.\n\n- Added format string compilation support to `fmt::print`\n",
                    "rendered": {
                      "text": "  auto s = fmt::format(FMT_COMPILE(\"{answer}\"), \"answer\"_a = 42);\n  ```\n\n  Here the argument named \\\"answer\\\" is resolved at compile time with\n  no runtime overhead. Thanks @alexezeder.\n\n- Added format string compilation support to `fmt::print`\n",
                      "markdown": "`  auto s = fmt::format(FMT_COMPILE(\"{answer}\"), \"answer\"_a = 42);\n  ```\n\n  Here the argument named \\\"answer\\\" is resolved at compile time with\n  no runtime overhead. Thanks @alexezeder.\n\n- Added format string compilation support to `fmt::print`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/ChangeLog.md"
                },
                "region": {
                  "startLine": 2074,
                  "startColumn": 51,
                  "endLine": 2074,
                  "endColumn": 55,
                  "snippet": {
                    "text": "  constexpr auto answer = compile_time_itoa(42);\n  ```\n\n  Most of the formatting functionality is available at compile time\n  with a notable exception of floating-point numbers and pointers.\n  Thanks @alexezeder.\n\n",
                    "rendered": {
                      "text": "  constexpr auto answer = compile_time_itoa(42);\n  ```\n\n  Most of the formatting functionality is available at compile time\n  with a notable exception of floating-point numbers and pointers.\n  Thanks @alexezeder.\n\n",
                      "markdown": "`  constexpr auto answer = compile_time_itoa(42);\n  ```\n\n  Most of the formatting functionality is available at compile time\n  with a notable exception of floating-point numbers and pointers.\n  Thanks @alexezeder.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/ChangeLog.md"
                },
                "region": {
                  "startLine": 1214,
                  "startColumn": 33,
                  "endLine": 1214,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n# 9.1.0 - 2022-08-27\n\n- `fmt::formatted_size` now works at compile time\n  (https://github.com/fmtlib/fmt/pull/3026). For example\n  ([godbolt](https://godbolt.org/z/1MW5rMdf8)):\n\n",
                    "rendered": {
                      "text": "\n# 9.1.0 - 2022-08-27\n\n- `fmt::formatted_size` now works at compile time\n  (https://github.com/fmtlib/fmt/pull/3026). For example\n  ([godbolt](https://godbolt.org/z/1MW5rMdf8)):\n\n",
                      "markdown": "`\n# 9.1.0 - 2022-08-27\n\n- `fmt::formatted_size` now works at compile time\n  (https://github.com/fmtlib/fmt/pull/3026). For example\n  ([godbolt](https://godbolt.org/z/1MW5rMdf8)):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/ChangeLog.md"
                },
                "region": {
                  "startLine": 653,
                  "startColumn": 60,
                  "endLine": 654,
                  "snippet": {
                    "text": "  Thanks @MathewBensonCode.\n- Made `fmt::to_string` work with types that have `format_as`\n  overloads (https://github.com/fmtlib/fmt/pull/3575). Thanks @phprus.\n- Made `formatted_size` work with integral format specifiers at\n  compile time (https://github.com/fmtlib/fmt/pull/3591).\n  Thanks @elbeno.\n- Fixed a warning about the `no_unique_address` attribute on clang-cl\n  (https://github.com/fmtlib/fmt/pull/3599). Thanks @lukester1975.\n",
                    "rendered": {
                      "text": "  Thanks @MathewBensonCode.\n- Made `fmt::to_string` work with types that have `format_as`\n  overloads (https://github.com/fmtlib/fmt/pull/3575). Thanks @phprus.\n- Made `formatted_size` work with integral format specifiers at\n  compile time (https://github.com/fmtlib/fmt/pull/3591).\n  Thanks @elbeno.\n- Fixed a warning about the `no_unique_address` attribute on clang-cl\n  (https://github.com/fmtlib/fmt/pull/3599). Thanks @lukester1975.\n",
                      "markdown": "`  Thanks @MathewBensonCode.\n- Made `fmt::to_string` work with types that have `format_as`\n  overloads (https://github.com/fmtlib/fmt/pull/3575). Thanks @phprus.\n- Made `formatted_size` work with integral format specifiers at\n  compile time (https://github.com/fmtlib/fmt/pull/3591).\n  Thanks @elbeno.\n- Fixed a warning about the `no_unique_address` attribute on clang-cl\n  (https://github.com/fmtlib/fmt/pull/3599). Thanks @lukester1975.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/ChangeLog.md"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 9,
                  "endLine": 144,
                  "endColumn": 18,
                  "snippet": {
                    "text": "  compilers and making it unnecessary for users to enable it explicitly.\n  Most of {fmt} is encoding-agnostic but this prevents mojibake in places\n  where encoding matters such as path formatting and terminal output.\n  You can control the Unicode support via the CMake `FMT_UNICODE` option.\n  Note that some {fmt} packages such as the one in vcpkg have already been\n  compiled with Unicode enabled.\n\n",
                    "rendered": {
                      "text": "  compilers and making it unnecessary for users to enable it explicitly.\n  Most of {fmt} is encoding-agnostic but this prevents mojibake in places\n  where encoding matters such as path formatting and terminal output.\n  You can control the Unicode support via the CMake `FMT_UNICODE` option.\n  Note that some {fmt} packages such as the one in vcpkg have already been\n  compiled with Unicode enabled.\n\n",
                      "markdown": "`  compilers and making it unnecessary for users to enable it explicitly.\n  Most of {fmt} is encoding-agnostic but this prevents mojibake in places\n  where encoding matters such as path formatting and terminal output.\n  You can control the Unicode support via the CMake `FMT_UNICODE` option.\n  Note that some {fmt} packages such as the one in vcpkg have already been\n  compiled with Unicode enabled.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/ChangeLog.md"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 28,
                  "endLine": 80,
                  "endColumn": 32,
                  "snippet": {
                    "text": "- Optimized includes in other headers such as `fmt/format.h` which is now\n  roughly equivalent to the old `fmt/core.h` in terms of build speed.\n\n- Migrated the documentation at https://fmt.dev/ from Sphinx to MkDocs.\n\n- Improved C++20 module support\n  (https://github.com/fmtlib/fmt/issues/3990,\n",
                    "rendered": {
                      "text": "- Optimized includes in other headers such as `fmt/format.h` which is now\n  roughly equivalent to the old `fmt/core.h` in terms of build speed.\n\n- Migrated the documentation at https://fmt.dev/ from Sphinx to MkDocs.\n\n- Improved C++20 module support\n  (https://github.com/fmtlib/fmt/issues/3990,\n",
                      "markdown": "`- Optimized includes in other headers such as `fmt/format.h` which is now\n  roughly equivalent to the old `fmt/core.h` in terms of build speed.\n\n- Migrated the documentation at https://fmt.dev/ from Sphinx to MkDocs.\n\n- Improved C++20 module support\n  (https://github.com/fmtlib/fmt/issues/3990,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/ChangeLog.md"
                },
                "region": {
                  "startLine": 2262,
                  "startColumn": 19,
                  "endLine": 2262,
                  "endColumn": 25,
                  "snippet": {
                    "text": "- Made parameter order in `vformat_to` consistent with `format_to`\n  (https://github.com/fmtlib/fmt/issues/2327).\n\n- Added support for time points with arbitrary durations\n  (https://github.com/fmtlib/fmt/issues/2208). For example:\n\n  ```c++\n",
                    "rendered": {
                      "text": "- Made parameter order in `vformat_to` consistent with `format_to`\n  (https://github.com/fmtlib/fmt/issues/2327).\n\n- Added support for time points with arbitrary durations\n  (https://github.com/fmtlib/fmt/issues/2208). For example:\n\n  ```c++\n",
                      "markdown": "`- Made parameter order in `vformat_to` consistent with `format_to`\n  (https://github.com/fmtlib/fmt/issues/2327).\n\n- Added support for time points with arbitrary durations\n  (https://github.com/fmtlib/fmt/issues/2208). For example:\n\n  ```c++\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/ChangeLog.md"
                },
                "region": {
                  "startLine": 2254,
                  "startColumn": 31,
                  "endLine": 2254,
                  "endColumn": 37,
                  "snippet": {
                    "text": "- Deprecated `fmt/locale.h` moving the formatting functions that take\n  a locale to `fmt/format.h` (`char`) and `fmt/xchar` (other\n  overloads). This doesn\\'t introduce a dependency on `<locale>` so\n  there is virtually no compile time effect.\n\n- Deprecated an undocumented `format_to` overload that takes\n  `basic_memory_buffer`.\n",
                    "rendered": {
                      "text": "- Deprecated `fmt/locale.h` moving the formatting functions that take\n  a locale to `fmt/format.h` (`char`) and `fmt/xchar` (other\n  overloads). This doesn\\'t introduce a dependency on `<locale>` so\n  there is virtually no compile time effect.\n\n- Deprecated an undocumented `format_to` overload that takes\n  `basic_memory_buffer`.\n",
                      "markdown": "`- Deprecated `fmt/locale.h` moving the formatting functions that take\n  a locale to `fmt/format.h` (`char`) and `fmt/xchar` (other\n  overloads). This doesn\\'t introduce a dependency on `<locale>` so\n  there is virtually no compile time effect.\n\n- Deprecated an undocumented `format_to` overload that takes\n  `basic_memory_buffer`.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/ChangeLog.md"
                },
                "region": {
                  "startLine": 2162,
                  "startColumn": 59,
                  "endLine": 2162,
                  "endColumn": 65,
                  "snippet": {
                    "text": "  auto s = fmt::format(FMT_COMPILE(\"{answer}\"), \"answer\"_a = 42);\n  ```\n\n  Here the argument named \\\"answer\\\" is resolved at compile time with\n  no runtime overhead. Thanks @alexezeder.\n\n- Added format string compilation support to `fmt::print`\n",
                    "rendered": {
                      "text": "  auto s = fmt::format(FMT_COMPILE(\"{answer}\"), \"answer\"_a = 42);\n  ```\n\n  Here the argument named \\\"answer\\\" is resolved at compile time with\n  no runtime overhead. Thanks @alexezeder.\n\n- Added format string compilation support to `fmt::print`\n",
                      "markdown": "`  auto s = fmt::format(FMT_COMPILE(\"{answer}\"), \"answer\"_a = 42);\n  ```\n\n  Here the argument named \\\"answer\\\" is resolved at compile time with\n  no runtime overhead. Thanks @alexezeder.\n\n- Added format string compilation support to `fmt::print`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/ChangeLog.md"
                },
                "region": {
                  "startLine": 2110,
                  "startColumn": 48,
                  "endLine": 2110,
                  "endColumn": 54,
                  "snippet": {
                    "text": "  clang on macOS:\n\n      ----------------------------------------------------------------------------\n      Benchmark                                  Time             CPU   Iterations\n      ----------------------------------------------------------------------------\n      ToChars/0                               4.42 ns         4.41 ns    160196630\n      ToChars/42                              5.00 ns         4.98 ns    140735201\n",
                    "rendered": {
                      "text": "  clang on macOS:\n\n      ----------------------------------------------------------------------------\n      Benchmark                                  Time             CPU   Iterations\n      ----------------------------------------------------------------------------\n      ToChars/0                               4.42 ns         4.41 ns    160196630\n      ToChars/42                              5.00 ns         4.98 ns    140735201\n",
                      "markdown": "`  clang on macOS:\n\n      ----------------------------------------------------------------------------\n      Benchmark                                  Time             CPU   Iterations\n      ----------------------------------------------------------------------------\n      ToChars/0                               4.42 ns         4.41 ns    160196630\n      ToChars/42                              5.00 ns         4.98 ns    140735201\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/ChangeLog.md"
                },
                "region": {
                  "startLine": 2098,
                  "startColumn": 48,
                  "endLine": 2098,
                  "endColumn": 54,
                  "snippet": {
                    "text": "  After (8.x):\n\n      ----------------------------------------------------------------------------\n      Benchmark                                  Time             CPU   Iterations\n      ----------------------------------------------------------------------------\n      FMTCompileNew/0                         1.99 ns         1.99 ns    360523686\n      FMTCompileNew/42                        2.33 ns         2.33 ns    279865664\n",
                    "rendered": {
                      "text": "  After (8.x):\n\n      ----------------------------------------------------------------------------\n      Benchmark                                  Time             CPU   Iterations\n      ----------------------------------------------------------------------------\n      FMTCompileNew/0                         1.99 ns         1.99 ns    360523686\n      FMTCompileNew/42                        2.33 ns         2.33 ns    279865664\n",
                      "markdown": "`  After (8.x):\n\n      ----------------------------------------------------------------------------\n      Benchmark                                  Time             CPU   Iterations\n      ----------------------------------------------------------------------------\n      FMTCompileNew/0                         1.99 ns         1.99 ns    360523686\n      FMTCompileNew/42                        2.33 ns         2.33 ns    279865664\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/ChangeLog.md"
                },
                "region": {
                  "startLine": 2087,
                  "startColumn": 48,
                  "endLine": 2087,
                  "endColumn": 54,
                  "snippet": {
                    "text": "  Before (7.1.3):\n\n      ----------------------------------------------------------------------------\n      Benchmark                                  Time             CPU   Iterations\n      ----------------------------------------------------------------------------\n      FMTCompileOld/0                         15.5 ns         15.5 ns     43302898\n      FMTCompileOld/42                        16.6 ns         16.6 ns     43278267\n",
                    "rendered": {
                      "text": "  Before (7.1.3):\n\n      ----------------------------------------------------------------------------\n      Benchmark                                  Time             CPU   Iterations\n      ----------------------------------------------------------------------------\n      FMTCompileOld/0                         15.5 ns         15.5 ns     43302898\n      FMTCompileOld/42                        16.6 ns         16.6 ns     43278267\n",
                      "markdown": "`  Before (7.1.3):\n\n      ----------------------------------------------------------------------------\n      Benchmark                                  Time             CPU   Iterations\n      ----------------------------------------------------------------------------\n      FMTCompileOld/0                         15.5 ns         15.5 ns     43302898\n      FMTCompileOld/42                        16.6 ns         16.6 ns     43278267\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/ChangeLog.md"
                },
                "region": {
                  "startLine": 2074,
                  "startColumn": 62,
                  "endLine": 2075,
                  "snippet": {
                    "text": "  constexpr auto answer = compile_time_itoa(42);\n  ```\n\n  Most of the formatting functionality is available at compile time\n  with a notable exception of floating-point numbers and pointers.\n  Thanks @alexezeder.\n\n- Optimized handling of format specifiers during format string\n",
                    "rendered": {
                      "text": "  constexpr auto answer = compile_time_itoa(42);\n  ```\n\n  Most of the formatting functionality is available at compile time\n  with a notable exception of floating-point numbers and pointers.\n  Thanks @alexezeder.\n\n- Optimized handling of format specifiers during format string\n",
                      "markdown": "`  constexpr auto answer = compile_time_itoa(42);\n  ```\n\n  Most of the formatting functionality is available at compile time\n  with a notable exception of floating-point numbers and pointers.\n  Thanks @alexezeder.\n\n- Optimized handling of format specifiers during format string\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/ChangeLog.md"
                },
                "region": {
                  "startLine": 1214,
                  "startColumn": 44,
                  "endLine": 1215,
                  "snippet": {
                    "text": "\n# 9.1.0 - 2022-08-27\n\n- `fmt::formatted_size` now works at compile time\n  (https://github.com/fmtlib/fmt/pull/3026). For example\n  ([godbolt](https://godbolt.org/z/1MW5rMdf8)):\n\n  ```c++\n",
                    "rendered": {
                      "text": "\n# 9.1.0 - 2022-08-27\n\n- `fmt::formatted_size` now works at compile time\n  (https://github.com/fmtlib/fmt/pull/3026). For example\n  ([godbolt](https://godbolt.org/z/1MW5rMdf8)):\n\n  ```c++\n",
                      "markdown": "`\n# 9.1.0 - 2022-08-27\n\n- `fmt::formatted_size` now works at compile time\n  (https://github.com/fmtlib/fmt/pull/3026). For example\n  ([godbolt](https://godbolt.org/z/1MW5rMdf8)):\n\n  ```c++\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/ChangeLog.md"
                },
                "region": {
                  "startLine": 954,
                  "startColumn": 21,
                  "endLine": 954,
                  "endColumn": 27,
                  "snippet": {
                    "text": "  (https://github.com/fmtlib/fmt/issues/3219,\n  https://github.com/fmtlib/fmt/pull/3232). Thanks @ShawnZhong.\n\n- Fixed formatting of time points before the epoch\n  (https://github.com/fmtlib/fmt/issues/3117,\n  https://github.com/fmtlib/fmt/pull/3261). For example\n  ([godbolt](https://godbolt.org/z/f7bcznb3W)):\n",
                    "rendered": {
                      "text": "  (https://github.com/fmtlib/fmt/issues/3219,\n  https://github.com/fmtlib/fmt/pull/3232). Thanks @ShawnZhong.\n\n- Fixed formatting of time points before the epoch\n  (https://github.com/fmtlib/fmt/issues/3117,\n  https://github.com/fmtlib/fmt/pull/3261). For example\n  ([godbolt](https://godbolt.org/z/f7bcznb3W)):\n",
                      "markdown": "`  (https://github.com/fmtlib/fmt/issues/3219,\n  https://github.com/fmtlib/fmt/pull/3232). Thanks @ShawnZhong.\n\n- Fixed formatting of time points before the epoch\n  (https://github.com/fmtlib/fmt/issues/3117,\n  https://github.com/fmtlib/fmt/pull/3261). For example\n  ([godbolt](https://godbolt.org/z/f7bcznb3W)):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/ChangeLog.md"
                },
                "region": {
                  "startLine": 941,
                  "startColumn": 63,
                  "endLine": 942,
                  "snippet": {
                    "text": "  (https://github.com/fmtlib/fmt/issues/3098,\n  https://github.com/fmtlib/fmt/pull/3110). Thanks @patrickroocks.\n\n- Switched formatting of `std::chrono::system_clock` from local time\n  to UTC for compatibility with the standard\n  (https://github.com/fmtlib/fmt/issues/3199,\n  https://github.com/fmtlib/fmt/pull/3230). Thanks @ned14.\n\n",
                    "rendered": {
                      "text": "  (https://github.com/fmtlib/fmt/issues/3098,\n  https://github.com/fmtlib/fmt/pull/3110). Thanks @patrickroocks.\n\n- Switched formatting of `std::chrono::system_clock` from local time\n  to UTC for compatibility with the standard\n  (https://github.com/fmtlib/fmt/issues/3199,\n  https://github.com/fmtlib/fmt/pull/3230). Thanks @ned14.\n\n",
                      "markdown": "`  (https://github.com/fmtlib/fmt/issues/3098,\n  https://github.com/fmtlib/fmt/pull/3110). Thanks @patrickroocks.\n\n- Switched formatting of `std::chrono::system_clock` from local time\n  to UTC for compatibility with the standard\n  (https://github.com/fmtlib/fmt/issues/3199,\n  https://github.com/fmtlib/fmt/pull/3230). Thanks @ned14.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/ChangeLog.md"
                },
                "region": {
                  "startLine": 897,
                  "startColumn": 48,
                  "endLine": 897,
                  "endColumn": 54,
                  "snippet": {
                    "text": "  primitive types for compatibility with `std::format` and to prevent\n  potential ODR violations. Use `format_as` instead.\n\n- Added support for fill, align and width to the time point formatter\n  (https://github.com/fmtlib/fmt/issues/3237,\n  https://github.com/fmtlib/fmt/pull/3260,\n  https://github.com/fmtlib/fmt/pull/3275). For example\n",
                    "rendered": {
                      "text": "  primitive types for compatibility with `std::format` and to prevent\n  potential ODR violations. Use `format_as` instead.\n\n- Added support for fill, align and width to the time point formatter\n  (https://github.com/fmtlib/fmt/issues/3237,\n  https://github.com/fmtlib/fmt/pull/3260,\n  https://github.com/fmtlib/fmt/pull/3275). For example\n",
                      "markdown": "`  primitive types for compatibility with `std::format` and to prevent\n  potential ODR violations. Use `format_as` instead.\n\n- Added support for fill, align and width to the time point formatter\n  (https://github.com/fmtlib/fmt/issues/3237,\n  https://github.com/fmtlib/fmt/pull/3260,\n  https://github.com/fmtlib/fmt/pull/3275). For example\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/ChangeLog.md"
                },
                "region": {
                  "startLine": 689,
                  "startColumn": 29,
                  "endLine": 689,
                  "endColumn": 35,
                  "snippet": {
                    "text": "  {fmt} 10.1:\n\n      ---------------------------------------------------------\n      Benchmark               Time             CPU   Iterations\n      ---------------------------------------------------------\n      BM_format_to         54.9 ns         54.9 ns     12727944\n      BM_format_to_n        133 ns          133 ns      5257795\n",
                    "rendered": {
                      "text": "  {fmt} 10.1:\n\n      ---------------------------------------------------------\n      Benchmark               Time             CPU   Iterations\n      ---------------------------------------------------------\n      BM_format_to         54.9 ns         54.9 ns     12727944\n      BM_format_to_n        133 ns          133 ns      5257795\n",
                      "markdown": "`  {fmt} 10.1:\n\n      ---------------------------------------------------------\n      Benchmark               Time             CPU   Iterations\n      ---------------------------------------------------------\n      BM_format_to         54.9 ns         54.9 ns     12727944\n      BM_format_to_n        133 ns          133 ns      5257795\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/ChangeLog.md"
                },
                "region": {
                  "startLine": 681,
                  "startColumn": 29,
                  "endLine": 681,
                  "endColumn": 35,
                  "snippet": {
                    "text": "  {fmt} 10.0:\n\n      ---------------------------------------------------------\n      Benchmark               Time             CPU   Iterations\n      ---------------------------------------------------------\n      BM_format_to         78.9 ns         78.9 ns      8881746\n      BM_format_to_n        568 ns          568 ns      1232089\n",
                    "rendered": {
                      "text": "  {fmt} 10.0:\n\n      ---------------------------------------------------------\n      Benchmark               Time             CPU   Iterations\n      ---------------------------------------------------------\n      BM_format_to         78.9 ns         78.9 ns      8881746\n      BM_format_to_n        568 ns          568 ns      1232089\n",
                      "markdown": "`  {fmt} 10.0:\n\n      ---------------------------------------------------------\n      Benchmark               Time             CPU   Iterations\n      ---------------------------------------------------------\n      BM_format_to         78.9 ns         78.9 ns      8881746\n      BM_format_to_n        568 ns          568 ns      1232089\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/ChangeLog.md"
                },
                "region": {
                  "startLine": 654,
                  "startColumn": 9,
                  "endLine": 654,
                  "endColumn": 15,
                  "snippet": {
                    "text": "- Made `fmt::to_string` work with types that have `format_as`\n  overloads (https://github.com/fmtlib/fmt/pull/3575). Thanks @phprus.\n- Made `formatted_size` work with integral format specifiers at\n  compile time (https://github.com/fmtlib/fmt/pull/3591).\n  Thanks @elbeno.\n- Fixed a warning about the `no_unique_address` attribute on clang-cl\n  (https://github.com/fmtlib/fmt/pull/3599). Thanks @lukester1975.\n",
                    "rendered": {
                      "text": "- Made `fmt::to_string` work with types that have `format_as`\n  overloads (https://github.com/fmtlib/fmt/pull/3575). Thanks @phprus.\n- Made `formatted_size` work with integral format specifiers at\n  compile time (https://github.com/fmtlib/fmt/pull/3591).\n  Thanks @elbeno.\n- Fixed a warning about the `no_unique_address` attribute on clang-cl\n  (https://github.com/fmtlib/fmt/pull/3599). Thanks @lukester1975.\n",
                      "markdown": "`- Made `fmt::to_string` work with types that have `format_as`\n  overloads (https://github.com/fmtlib/fmt/pull/3575). Thanks @phprus.\n- Made `formatted_size` work with integral format specifiers at\n  compile time (https://github.com/fmtlib/fmt/pull/3591).\n  Thanks @elbeno.\n- Fixed a warning about the `no_unique_address` attribute on clang-cl\n  (https://github.com/fmtlib/fmt/pull/3599). Thanks @lukester1975.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/ChangeLog.md"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 23,
                  "endLine": 120,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n  ```\n  -------------------------------------------------------\n  Benchmark             Time             CPU   Iterations\n  -------------------------------------------------------\n  printf             81.8 ns         81.5 ns      8496899\n  fmt::print (10.x)  63.8 ns         61.9 ns     11524151\n",
                    "rendered": {
                      "text": "\n  ```\n  -------------------------------------------------------\n  Benchmark             Time             CPU   Iterations\n  -------------------------------------------------------\n  printf             81.8 ns         81.5 ns      8496899\n  fmt::print (10.x)  63.8 ns         61.9 ns     11524151\n",
                      "markdown": "`\n  ```\n  -------------------------------------------------------\n  Benchmark             Time             CPU   Iterations\n  -------------------------------------------------------\n  printf             81.8 ns         81.5 ns      8496899\n  fmt::print (10.x)  63.8 ns         61.9 ns     11524151\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/ChangeLog.md"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 3,
                  "endLine": 66,
                  "endColumn": 8,
                  "snippet": {
                    "text": "  | printf       | 1.6              |\n  | IOStreams    | 25.9             |\n  | fmt 10.x     | 19.0             |\n  | fmt 11.0     | 4.8              |\n  | tinyformat   | 29.1             |\n  | Boost Format | 55.0             |\n\n",
                    "rendered": {
                      "text": "  | printf       | 1.6              |\n  | IOStreams    | 25.9             |\n  | fmt 10.x     | 19.0             |\n  | fmt 11.0     | 4.8              |\n  | tinyformat   | 29.1             |\n  | Boost Format | 55.0             |\n\n",
                      "markdown": "`  | printf       | 1.6              |\n  | IOStreams    | 25.9             |\n  | fmt 10.x     | 19.0             |\n  | fmt 11.0     | 4.8              |\n  | tinyformat   | 29.1             |\n  | Boost Format | 55.0             |\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/ChangeLog.md"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 3,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "  |--------------|------------------|\n  | printf       | 1.6              |\n  | IOStreams    | 25.9             |\n  | fmt 10.x     | 19.0             |\n  | fmt 11.0     | 4.8              |\n  | tinyformat   | 29.1             |\n  | Boost Format | 55.0             |\n",
                    "rendered": {
                      "text": "  |--------------|------------------|\n  | printf       | 1.6              |\n  | IOStreams    | 25.9             |\n  | fmt 10.x     | 19.0             |\n  | fmt 11.0     | 4.8              |\n  | tinyformat   | 29.1             |\n  | Boost Format | 55.0             |\n",
                      "markdown": "`  |--------------|------------------|\n  | printf       | 1.6              |\n  | IOStreams    | 25.9             |\n  | fmt 10.x     | 19.0             |\n  | fmt 11.0     | 4.8              |\n  | tinyformat   | 29.1             |\n  | Boost Format | 55.0             |\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/ChangeLog.md"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 26,
                  "endLine": 61,
                  "endColumn": 32,
                  "snippet": {
                    "text": "  closer to the equivalent `printf` code as shown on the following benchmark\n  that compiles 100 source files:\n\n  | Method       | Compile Time (s) |\n  |--------------|------------------|\n  | printf       | 1.6              |\n  | IOStreams    | 25.9             |\n",
                    "rendered": {
                      "text": "  closer to the equivalent `printf` code as shown on the following benchmark\n  that compiles 100 source files:\n\n  | Method       | Compile Time (s) |\n  |--------------|------------------|\n  | printf       | 1.6              |\n  | IOStreams    | 25.9             |\n",
                      "markdown": "`  closer to the equivalent `printf` code as shown on the following benchmark\n  that compiles 100 source files:\n\n  | Method       | Compile Time (s) |\n  |--------------|------------------|\n  | printf       | 1.6              |\n  | IOStreams    | 25.9             |\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/ChangeLog.md"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 46,
                  "endLine": 57,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n- Added `fmt/base.h` which provides a subset of the API with minimal include\n  dependencies and enough functionality to replace all uses of the `printf`\n  family of functions. This brings the compile time of code using {fmt} much\n  closer to the equivalent `printf` code as shown on the following benchmark\n  that compiles 100 source files:\n\n",
                    "rendered": {
                      "text": "\n- Added `fmt/base.h` which provides a subset of the API with minimal include\n  dependencies and enough functionality to replace all uses of the `printf`\n  family of functions. This brings the compile time of code using {fmt} much\n  closer to the equivalent `printf` code as shown on the following benchmark\n  that compiles 100 source files:\n\n",
                      "markdown": "`\n- Added `fmt/base.h` which provides a subset of the API with minimal include\n  dependencies and enough functionality to replace all uses of the `printf`\n  family of functions. This brings the compile time of code using {fmt} much\n  closer to the equivalent `printf` code as shown on the following benchmark\n  that compiles 100 source files:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 24,
                  "endLine": 26,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                    "rendered": {
                      "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                      "markdown": "`\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                    "rendered": {
                      "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                      "markdown": "`fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                    "rendered": {
                      "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                      "markdown": "`\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                    "rendered": {
                      "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                      "markdown": "`\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                    "rendered": {
                      "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                      "markdown": "`\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                    "rendered": {
                      "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                      "markdown": "`then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 2,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/pre-applypatch.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/pre-receive.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                      "markdown": "`\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                    "rendered": {
                      "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                      "markdown": "`\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 15,
                  "endLine": 77,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                    "rendered": {
                      "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                      "markdown": "`#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 27,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                    "rendered": {
                      "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                      "markdown": "`\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                      "markdown": "`\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                    "rendered": {
                      "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                      "markdown": "`# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                    "rendered": {
                      "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                      "markdown": "`# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                    "rendered": {
                      "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                      "markdown": "`\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/applypatch-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 45,
                  "endLine": 13,
                  "endColumn": 53,
                  "snippet": {
                    "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                    "rendered": {
                      "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                      "markdown": "`#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 51,
                  "endLine": 12,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                    "rendered": {
                      "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                      "markdown": "`# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 53,
                  "endLine": 11,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                    "rendered": {
                      "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                      "markdown": "`# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                    "rendered": {
                      "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                      "markdown": "`\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                    "rendered": {
                      "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                      "markdown": "`\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 30,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                    "rendered": {
                      "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                      "markdown": "`\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 28,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                    "rendered": {
                      "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                      "markdown": "`\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                    "rendered": {
                      "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                      "markdown": "`\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 45,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                    "rendered": {
                      "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                      "markdown": "`use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                    "rendered": {
                      "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                      "markdown": "`use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                    "rendered": {
                      "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                      "markdown": "`# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 37,
                  "endLine": 37,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                    "rendered": {
                      "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                      "markdown": "`#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                    "rendered": {
                      "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                      "markdown": "`# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                    "rendered": {
                      "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                      "markdown": "`# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/fuzzing/.gitignore"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 36,
                  "endLine": 2,
                  "snippet": {
                    "text": "# ignore artifacts from the build.sh script\nbuild-*/\n\n",
                    "rendered": {
                      "text": "# ignore artifacts from the build.sh script\nbuild-*/\n\n",
                      "markdown": "`# ignore artifacts from the build.sh script\nbuild-*/\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/fuzzing/two-args.cc"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 9,
                  "endLine": 45,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    callback(char());\n    break;\n  case 2:\n    using sc = signed char;\n    callback(sc());\n    break;\n  case 3:\n",
                    "rendered": {
                      "text": "    callback(char());\n    break;\n  case 2:\n    using sc = signed char;\n    callback(sc());\n    break;\n  case 3:\n",
                      "markdown": "`    callback(char());\n    break;\n  case 2:\n    using sc = signed char;\n    callback(sc());\n    break;\n  case 3:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/fuzzing/two-args.cc"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 9,
                  "endLine": 69,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    callback(long());\n    break;\n  case 9:\n    using ul = unsigned long;\n    callback(ul());\n    break;\n  case 10:\n",
                    "rendered": {
                      "text": "    callback(long());\n    break;\n  case 9:\n    using ul = unsigned long;\n    callback(ul());\n    break;\n  case 10:\n",
                      "markdown": "`    callback(long());\n    break;\n  case 9:\n    using ul = unsigned long;\n    callback(ul());\n    break;\n  case 10:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/fuzzing/one-arg.cc"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 54,
                  "endLine": 34,
                  "endColumn": 59,
                  "snippet": {
                    "text": "    std::string message = fmt::format(format_str.get(), *value);\n#else\n    auto buf = fmt::memory_buffer();\n    fmt::format_to(std::back_inserter(buf), format_str.get(), *value);\n#endif\n  } catch (std::exception&) {\n  }\n",
                    "rendered": {
                      "text": "    std::string message = fmt::format(format_str.get(), *value);\n#else\n    auto buf = fmt::memory_buffer();\n    fmt::format_to(std::back_inserter(buf), format_str.get(), *value);\n#endif\n  } catch (std::exception&) {\n  }\n",
                      "markdown": "`    std::string message = fmt::format(format_str.get(), *value);\n#else\n    auto buf = fmt::memory_buffer();\n    fmt::format_to(std::back_inserter(buf), format_str.get(), *value);\n#endif\n  } catch (std::exception&) {\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/fuzzing/one-arg.cc"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 48,
                  "endLine": 31,
                  "endColumn": 53,
                  "snippet": {
                    "text": "  data_to_string format_str(data, size);\n  try {\n#if FMT_FUZZ_FORMAT_TO_STRING\n    std::string message = fmt::format(format_str.get(), *value);\n#else\n    auto buf = fmt::memory_buffer();\n    fmt::format_to(std::back_inserter(buf), format_str.get(), *value);\n",
                    "rendered": {
                      "text": "  data_to_string format_str(data, size);\n  try {\n#if FMT_FUZZ_FORMAT_TO_STRING\n    std::string message = fmt::format(format_str.get(), *value);\n#else\n    auto buf = fmt::memory_buffer();\n    fmt::format_to(std::back_inserter(buf), format_str.get(), *value);\n",
                      "markdown": "`  data_to_string format_str(data, size);\n  try {\n#if FMT_FUZZ_FORMAT_TO_STRING\n    std::string message = fmt::format(format_str.get(), *value);\n#else\n    auto buf = fmt::memory_buffer();\n    fmt::format_to(std::back_inserter(buf), format_str.get(), *value);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/fuzzing/chrono-timepoint.cc"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 46,
                  "endLine": 23,
                  "endColumn": 51,
                  "snippet": {
                    "text": "  size -= N;\n  data_to_string format_str(data, size);\n\n  std::string message = fmt::format(format_str.get(), timepoint);\n}\n\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\n",
                    "rendered": {
                      "text": "  size -= N;\n  data_to_string format_str(data, size);\n\n  std::string message = fmt::format(format_str.get(), timepoint);\n}\n\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\n",
                      "markdown": "`  size -= N;\n  data_to_string format_str(data, size);\n\n  std::string message = fmt::format(format_str.get(), timepoint);\n}\n\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/enforce-checks-test.cc"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 48,
                  "endLine": 20,
                  "endColumn": 56,
                  "snippet": {
                    "text": "#include \"fmt/xchar.h\"\n#undef I\n\n// Exercise the API to verify that everything we expect to can compile.\nvoid test_format_api() {\n  (void)fmt::format(FMT_STRING(\"{}\"), 42);\n  (void)fmt::format(FMT_STRING(L\"{}\"), 42);\n",
                    "rendered": {
                      "text": "#include \"fmt/xchar.h\"\n#undef I\n\n// Exercise the API to verify that everything we expect to can compile.\nvoid test_format_api() {\n  (void)fmt::format(FMT_STRING(\"{}\"), 42);\n  (void)fmt::format(FMT_STRING(L\"{}\"), 42);\n",
                      "markdown": "`#include \"fmt/xchar.h\"\n#undef I\n\n// Exercise the API to verify that everything we expect to can compile.\nvoid test_format_api() {\n  (void)fmt::format(FMT_STRING(\"{}\"), 42);\n  (void)fmt::format(FMT_STRING(L\"{}\"), 42);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/util.cc"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 17,
                  "endLine": 24,
                  "endColumn": 22,
                  "snippet": {
                    "text": "#else\n  fmt::buffered_file f(\"test-file\", \"w\");\n  fputs(file_content, f.get());\n  if (fp) *fp = f.get();\n#endif\n  return f;\n}\n",
                    "rendered": {
                      "text": "#else\n  fmt::buffered_file f(\"test-file\", \"w\");\n  fputs(file_content, f.get());\n  if (fp) *fp = f.get();\n#endif\n  return f;\n}\n",
                      "markdown": "`#else\n  fmt::buffered_file f(\"test-file\", \"w\");\n  fputs(file_content, f.get());\n  if (fp) *fp = f.get();\n#endif\n  return f;\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/util.cc"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 23,
                  "endLine": 23,
                  "endColumn": 28,
                  "snippet": {
                    "text": "  if (fp) *fp = f.get();\n#else\n  fmt::buffered_file f(\"test-file\", \"w\");\n  fputs(file_content, f.get());\n  if (fp) *fp = f.get();\n#endif\n  return f;\n",
                    "rendered": {
                      "text": "  if (fp) *fp = f.get();\n#else\n  fmt::buffered_file f(\"test-file\", \"w\");\n  fputs(file_content, f.get());\n  if (fp) *fp = f.get();\n#endif\n  return f;\n",
                      "markdown": "`  if (fp) *fp = f.get();\n#else\n  fmt::buffered_file f(\"test-file\", \"w\");\n  fputs(file_content, f.get());\n  if (fp) *fp = f.get();\n#endif\n  return f;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/util.cc"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 17,
                  "endLine": 20,
                  "endColumn": 22,
                  "snippet": {
                    "text": "  pipe.write_end.write(file_content, std::strlen(file_content));\n  pipe.write_end.close();\n  fmt::buffered_file f = pipe.read_end.fdopen(\"r\");\n  if (fp) *fp = f.get();\n#else\n  fmt::buffered_file f(\"test-file\", \"w\");\n  fputs(file_content, f.get());\n",
                    "rendered": {
                      "text": "  pipe.write_end.write(file_content, std::strlen(file_content));\n  pipe.write_end.close();\n  fmt::buffered_file f = pipe.read_end.fdopen(\"r\");\n  if (fp) *fp = f.get();\n#else\n  fmt::buffered_file f(\"test-file\", \"w\");\n  fputs(file_content, f.get());\n",
                      "markdown": "`  pipe.write_end.write(file_content, std::strlen(file_content));\n  pipe.write_end.close();\n  fmt::buffered_file f = pipe.read_end.fdopen(\"r\");\n  if (fp) *fp = f.get();\n#else\n  fmt::buffered_file f(\"test-file\", \"w\");\n  fputs(file_content, f.get());\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/scan.h"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 41,
                  "endLine": 185,
                  "endColumn": 46,
                  "snippet": {
                    "text": "  void consume() override {\n    // Consume the current buffer content.\n    size_t n = to_unsigned(ptr() - file_.get_read_buffer().data);\n    for (size_t i = 0; i != n; ++i) file_.get();\n    fill();\n  }\n\n",
                    "rendered": {
                      "text": "  void consume() override {\n    // Consume the current buffer content.\n    size_t n = to_unsigned(ptr() - file_.get_read_buffer().data);\n    for (size_t i = 0; i != n; ++i) file_.get();\n    fill();\n  }\n\n",
                      "markdown": "`  void consume() override {\n    // Consume the current buffer content.\n    size_t n = to_unsigned(ptr() - file_.get_read_buffer().data);\n    for (size_t i = 0; i != n; ++i) file_.get();\n    fill();\n  }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/scan.h"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 19,
                  "endLine": 174,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  void fill() {\n    span<const char> buf = file_.get_read_buffer();\n    if (buf.size == 0) {\n      int c = file_.get();\n      // Put the character back since we are only filling the buffer.\n      if (c != EOF) file_.unget(static_cast<char>(c));\n      buf = file_.get_read_buffer();\n",
                    "rendered": {
                      "text": "  void fill() {\n    span<const char> buf = file_.get_read_buffer();\n    if (buf.size == 0) {\n      int c = file_.get();\n      // Put the character back since we are only filling the buffer.\n      if (c != EOF) file_.unget(static_cast<char>(c));\n      buf = file_.get_read_buffer();\n",
                      "markdown": "`  void fill() {\n    span<const char> buf = file_.get_read_buffer();\n    if (buf.size == 0) {\n      int c = file_.get();\n      // Put the character back since we are only filling the buffer.\n      if (c != EOF) file_.unget(static_cast<char>(c));\n      buf = file_.get_read_buffer();\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format-inl.h"
                },
                "region": {
                  "startLine": 1454,
                  "startColumn": 15,
                  "endLine": 1454,
                  "endColumn": 20,
                  "snippet": {
                    "text": "                         locale_ref loc) {\n  auto out = appender(buf);\n  if (fmt.size() == 2 && equal2(fmt.data(), \"{}\"))\n    return args.get(0).visit(default_arg_formatter<char>{out});\n  parse_format_string(\n      fmt, format_handler<char>{parse_context<char>(fmt), {out, args, loc}});\n}\n",
                    "rendered": {
                      "text": "                         locale_ref loc) {\n  auto out = appender(buf);\n  if (fmt.size() == 2 && equal2(fmt.data(), \"{}\"))\n    return args.get(0).visit(default_arg_formatter<char>{out});\n  parse_format_string(\n      fmt, format_handler<char>{parse_context<char>(fmt), {out, args, loc}});\n}\n",
                      "markdown": "`                         locale_ref loc) {\n  auto out = appender(buf);\n  if (fmt.size() == 2 && equal2(fmt.data(), \"{}\"))\n    return args.get(0).visit(default_arg_formatter<char>{out});\n  parse_format_string(\n      fmt, format_handler<char>{parse_context<char>(fmt), {out, args, loc}});\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format-inl.h"
                },
                "region": {
                  "startLine": 1940,
                  "startColumn": 8,
                  "endLine": 1940,
                  "endColumn": 12,
                  "snippet": {
                    "text": "  if (0x2fa1e <= cp && cp < 0x30000) return false;\n  if (0x3134b <= cp && cp < 0xe0100) return false;\n  if (0xe01f0 <= cp && cp < 0x110000) return false;\n  return cp < 0x110000;\n}\n\n}  // namespace detail\n",
                    "rendered": {
                      "text": "  if (0x2fa1e <= cp && cp < 0x30000) return false;\n  if (0x3134b <= cp && cp < 0xe0100) return false;\n  if (0xe01f0 <= cp && cp < 0x110000) return false;\n  return cp < 0x110000;\n}\n\n}  // namespace detail\n",
                      "markdown": "`  if (0x2fa1e <= cp && cp < 0x30000) return false;\n  if (0x3134b <= cp && cp < 0xe0100) return false;\n  if (0xe01f0 <= cp && cp < 0x110000) return false;\n  return cp < 0x110000;\n}\n\n}  // namespace detail\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format-inl.h"
                },
                "region": {
                  "startLine": 1939,
                  "startColumn": 22,
                  "endLine": 1939,
                  "endColumn": 26,
                  "snippet": {
                    "text": "  if (0x2ebe1 <= cp && cp < 0x2f800) return false;\n  if (0x2fa1e <= cp && cp < 0x30000) return false;\n  if (0x3134b <= cp && cp < 0xe0100) return false;\n  if (0xe01f0 <= cp && cp < 0x110000) return false;\n  return cp < 0x110000;\n}\n\n",
                    "rendered": {
                      "text": "  if (0x2ebe1 <= cp && cp < 0x2f800) return false;\n  if (0x2fa1e <= cp && cp < 0x30000) return false;\n  if (0x3134b <= cp && cp < 0xe0100) return false;\n  if (0xe01f0 <= cp && cp < 0x110000) return false;\n  return cp < 0x110000;\n}\n\n",
                      "markdown": "`  if (0x2ebe1 <= cp && cp < 0x2f800) return false;\n  if (0x2fa1e <= cp && cp < 0x30000) return false;\n  if (0x3134b <= cp && cp < 0xe0100) return false;\n  if (0xe01f0 <= cp && cp < 0x110000) return false;\n  return cp < 0x110000;\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format-inl.h"
                },
                "region": {
                  "startLine": 1939,
                  "startColumn": 16,
                  "endLine": 1939,
                  "endColumn": 20,
                  "snippet": {
                    "text": "  if (0x2ebe1 <= cp && cp < 0x2f800) return false;\n  if (0x2fa1e <= cp && cp < 0x30000) return false;\n  if (0x3134b <= cp && cp < 0xe0100) return false;\n  if (0xe01f0 <= cp && cp < 0x110000) return false;\n  return cp < 0x110000;\n}\n\n",
                    "rendered": {
                      "text": "  if (0x2ebe1 <= cp && cp < 0x2f800) return false;\n  if (0x2fa1e <= cp && cp < 0x30000) return false;\n  if (0x3134b <= cp && cp < 0xe0100) return false;\n  if (0xe01f0 <= cp && cp < 0x110000) return false;\n  return cp < 0x110000;\n}\n\n",
                      "markdown": "`  if (0x2ebe1 <= cp && cp < 0x2f800) return false;\n  if (0x2fa1e <= cp && cp < 0x30000) return false;\n  if (0x3134b <= cp && cp < 0xe0100) return false;\n  if (0xe01f0 <= cp && cp < 0x110000) return false;\n  return cp < 0x110000;\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format-inl.h"
                },
                "region": {
                  "startLine": 1938,
                  "startColumn": 22,
                  "endLine": 1938,
                  "endColumn": 26,
                  "snippet": {
                    "text": "  if (0x2cea2 <= cp && cp < 0x2ceb0) return false;\n  if (0x2ebe1 <= cp && cp < 0x2f800) return false;\n  if (0x2fa1e <= cp && cp < 0x30000) return false;\n  if (0x3134b <= cp && cp < 0xe0100) return false;\n  if (0xe01f0 <= cp && cp < 0x110000) return false;\n  return cp < 0x110000;\n}\n",
                    "rendered": {
                      "text": "  if (0x2cea2 <= cp && cp < 0x2ceb0) return false;\n  if (0x2ebe1 <= cp && cp < 0x2f800) return false;\n  if (0x2fa1e <= cp && cp < 0x30000) return false;\n  if (0x3134b <= cp && cp < 0xe0100) return false;\n  if (0xe01f0 <= cp && cp < 0x110000) return false;\n  return cp < 0x110000;\n}\n",
                      "markdown": "`  if (0x2cea2 <= cp && cp < 0x2ceb0) return false;\n  if (0x2ebe1 <= cp && cp < 0x2f800) return false;\n  if (0x2fa1e <= cp && cp < 0x30000) return false;\n  if (0x3134b <= cp && cp < 0xe0100) return false;\n  if (0xe01f0 <= cp && cp < 0x110000) return false;\n  return cp < 0x110000;\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format-inl.h"
                },
                "region": {
                  "startLine": 1938,
                  "startColumn": 16,
                  "endLine": 1938,
                  "endColumn": 20,
                  "snippet": {
                    "text": "  if (0x2cea2 <= cp && cp < 0x2ceb0) return false;\n  if (0x2ebe1 <= cp && cp < 0x2f800) return false;\n  if (0x2fa1e <= cp && cp < 0x30000) return false;\n  if (0x3134b <= cp && cp < 0xe0100) return false;\n  if (0xe01f0 <= cp && cp < 0x110000) return false;\n  return cp < 0x110000;\n}\n",
                    "rendered": {
                      "text": "  if (0x2cea2 <= cp && cp < 0x2ceb0) return false;\n  if (0x2ebe1 <= cp && cp < 0x2f800) return false;\n  if (0x2fa1e <= cp && cp < 0x30000) return false;\n  if (0x3134b <= cp && cp < 0xe0100) return false;\n  if (0xe01f0 <= cp && cp < 0x110000) return false;\n  return cp < 0x110000;\n}\n",
                      "markdown": "`  if (0x2cea2 <= cp && cp < 0x2ceb0) return false;\n  if (0x2ebe1 <= cp && cp < 0x2f800) return false;\n  if (0x2fa1e <= cp && cp < 0x30000) return false;\n  if (0x3134b <= cp && cp < 0xe0100) return false;\n  if (0xe01f0 <= cp && cp < 0x110000) return false;\n  return cp < 0x110000;\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format-inl.h"
                },
                "region": {
                  "startLine": 1937,
                  "startColumn": 22,
                  "endLine": 1937,
                  "endColumn": 26,
                  "snippet": {
                    "text": "  if (0x2b81e <= cp && cp < 0x2b820) return false;\n  if (0x2cea2 <= cp && cp < 0x2ceb0) return false;\n  if (0x2ebe1 <= cp && cp < 0x2f800) return false;\n  if (0x2fa1e <= cp && cp < 0x30000) return false;\n  if (0x3134b <= cp && cp < 0xe0100) return false;\n  if (0xe01f0 <= cp && cp < 0x110000) return false;\n  return cp < 0x110000;\n",
                    "rendered": {
                      "text": "  if (0x2b81e <= cp && cp < 0x2b820) return false;\n  if (0x2cea2 <= cp && cp < 0x2ceb0) return false;\n  if (0x2ebe1 <= cp && cp < 0x2f800) return false;\n  if (0x2fa1e <= cp && cp < 0x30000) return false;\n  if (0x3134b <= cp && cp < 0xe0100) return false;\n  if (0xe01f0 <= cp && cp < 0x110000) return false;\n  return cp < 0x110000;\n",
                      "markdown": "`  if (0x2b81e <= cp && cp < 0x2b820) return false;\n  if (0x2cea2 <= cp && cp < 0x2ceb0) return false;\n  if (0x2ebe1 <= cp && cp < 0x2f800) return false;\n  if (0x2fa1e <= cp && cp < 0x30000) return false;\n  if (0x3134b <= cp && cp < 0xe0100) return false;\n  if (0xe01f0 <= cp && cp < 0x110000) return false;\n  return cp < 0x110000;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format-inl.h"
                },
                "region": {
                  "startLine": 1937,
                  "startColumn": 16,
                  "endLine": 1937,
                  "endColumn": 20,
                  "snippet": {
                    "text": "  if (0x2b81e <= cp && cp < 0x2b820) return false;\n  if (0x2cea2 <= cp && cp < 0x2ceb0) return false;\n  if (0x2ebe1 <= cp && cp < 0x2f800) return false;\n  if (0x2fa1e <= cp && cp < 0x30000) return false;\n  if (0x3134b <= cp && cp < 0xe0100) return false;\n  if (0xe01f0 <= cp && cp < 0x110000) return false;\n  return cp < 0x110000;\n",
                    "rendered": {
                      "text": "  if (0x2b81e <= cp && cp < 0x2b820) return false;\n  if (0x2cea2 <= cp && cp < 0x2ceb0) return false;\n  if (0x2ebe1 <= cp && cp < 0x2f800) return false;\n  if (0x2fa1e <= cp && cp < 0x30000) return false;\n  if (0x3134b <= cp && cp < 0xe0100) return false;\n  if (0xe01f0 <= cp && cp < 0x110000) return false;\n  return cp < 0x110000;\n",
                      "markdown": "`  if (0x2b81e <= cp && cp < 0x2b820) return false;\n  if (0x2cea2 <= cp && cp < 0x2ceb0) return false;\n  if (0x2ebe1 <= cp && cp < 0x2f800) return false;\n  if (0x2fa1e <= cp && cp < 0x30000) return false;\n  if (0x3134b <= cp && cp < 0xe0100) return false;\n  if (0xe01f0 <= cp && cp < 0x110000) return false;\n  return cp < 0x110000;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format-inl.h"
                },
                "region": {
                  "startLine": 1936,
                  "startColumn": 22,
                  "endLine": 1936,
                  "endColumn": 26,
                  "snippet": {
                    "text": "  if (0x2b735 <= cp && cp < 0x2b740) return false;\n  if (0x2b81e <= cp && cp < 0x2b820) return false;\n  if (0x2cea2 <= cp && cp < 0x2ceb0) return false;\n  if (0x2ebe1 <= cp && cp < 0x2f800) return false;\n  if (0x2fa1e <= cp && cp < 0x30000) return false;\n  if (0x3134b <= cp && cp < 0xe0100) return false;\n  if (0xe01f0 <= cp && cp < 0x110000) return false;\n",
                    "rendered": {
                      "text": "  if (0x2b735 <= cp && cp < 0x2b740) return false;\n  if (0x2b81e <= cp && cp < 0x2b820) return false;\n  if (0x2cea2 <= cp && cp < 0x2ceb0) return false;\n  if (0x2ebe1 <= cp && cp < 0x2f800) return false;\n  if (0x2fa1e <= cp && cp < 0x30000) return false;\n  if (0x3134b <= cp && cp < 0xe0100) return false;\n  if (0xe01f0 <= cp && cp < 0x110000) return false;\n",
                      "markdown": "`  if (0x2b735 <= cp && cp < 0x2b740) return false;\n  if (0x2b81e <= cp && cp < 0x2b820) return false;\n  if (0x2cea2 <= cp && cp < 0x2ceb0) return false;\n  if (0x2ebe1 <= cp && cp < 0x2f800) return false;\n  if (0x2fa1e <= cp && cp < 0x30000) return false;\n  if (0x3134b <= cp && cp < 0xe0100) return false;\n  if (0xe01f0 <= cp && cp < 0x110000) return false;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format-inl.h"
                },
                "region": {
                  "startLine": 1936,
                  "startColumn": 16,
                  "endLine": 1936,
                  "endColumn": 20,
                  "snippet": {
                    "text": "  if (0x2b735 <= cp && cp < 0x2b740) return false;\n  if (0x2b81e <= cp && cp < 0x2b820) return false;\n  if (0x2cea2 <= cp && cp < 0x2ceb0) return false;\n  if (0x2ebe1 <= cp && cp < 0x2f800) return false;\n  if (0x2fa1e <= cp && cp < 0x30000) return false;\n  if (0x3134b <= cp && cp < 0xe0100) return false;\n  if (0xe01f0 <= cp && cp < 0x110000) return false;\n",
                    "rendered": {
                      "text": "  if (0x2b735 <= cp && cp < 0x2b740) return false;\n  if (0x2b81e <= cp && cp < 0x2b820) return false;\n  if (0x2cea2 <= cp && cp < 0x2ceb0) return false;\n  if (0x2ebe1 <= cp && cp < 0x2f800) return false;\n  if (0x2fa1e <= cp && cp < 0x30000) return false;\n  if (0x3134b <= cp && cp < 0xe0100) return false;\n  if (0xe01f0 <= cp && cp < 0x110000) return false;\n",
                      "markdown": "`  if (0x2b735 <= cp && cp < 0x2b740) return false;\n  if (0x2b81e <= cp && cp < 0x2b820) return false;\n  if (0x2cea2 <= cp && cp < 0x2ceb0) return false;\n  if (0x2ebe1 <= cp && cp < 0x2f800) return false;\n  if (0x2fa1e <= cp && cp < 0x30000) return false;\n  if (0x3134b <= cp && cp < 0xe0100) return false;\n  if (0xe01f0 <= cp && cp < 0x110000) return false;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format-inl.h"
                },
                "region": {
                  "startLine": 1935,
                  "startColumn": 22,
                  "endLine": 1935,
                  "endColumn": 26,
                  "snippet": {
                    "text": "  if (0x2a6de <= cp && cp < 0x2a700) return false;\n  if (0x2b735 <= cp && cp < 0x2b740) return false;\n  if (0x2b81e <= cp && cp < 0x2b820) return false;\n  if (0x2cea2 <= cp && cp < 0x2ceb0) return false;\n  if (0x2ebe1 <= cp && cp < 0x2f800) return false;\n  if (0x2fa1e <= cp && cp < 0x30000) return false;\n  if (0x3134b <= cp && cp < 0xe0100) return false;\n",
                    "rendered": {
                      "text": "  if (0x2a6de <= cp && cp < 0x2a700) return false;\n  if (0x2b735 <= cp && cp < 0x2b740) return false;\n  if (0x2b81e <= cp && cp < 0x2b820) return false;\n  if (0x2cea2 <= cp && cp < 0x2ceb0) return false;\n  if (0x2ebe1 <= cp && cp < 0x2f800) return false;\n  if (0x2fa1e <= cp && cp < 0x30000) return false;\n  if (0x3134b <= cp && cp < 0xe0100) return false;\n",
                      "markdown": "`  if (0x2a6de <= cp && cp < 0x2a700) return false;\n  if (0x2b735 <= cp && cp < 0x2b740) return false;\n  if (0x2b81e <= cp && cp < 0x2b820) return false;\n  if (0x2cea2 <= cp && cp < 0x2ceb0) return false;\n  if (0x2ebe1 <= cp && cp < 0x2f800) return false;\n  if (0x2fa1e <= cp && cp < 0x30000) return false;\n  if (0x3134b <= cp && cp < 0xe0100) return false;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format-inl.h"
                },
                "region": {
                  "startLine": 1935,
                  "startColumn": 16,
                  "endLine": 1935,
                  "endColumn": 20,
                  "snippet": {
                    "text": "  if (0x2a6de <= cp && cp < 0x2a700) return false;\n  if (0x2b735 <= cp && cp < 0x2b740) return false;\n  if (0x2b81e <= cp && cp < 0x2b820) return false;\n  if (0x2cea2 <= cp && cp < 0x2ceb0) return false;\n  if (0x2ebe1 <= cp && cp < 0x2f800) return false;\n  if (0x2fa1e <= cp && cp < 0x30000) return false;\n  if (0x3134b <= cp && cp < 0xe0100) return false;\n",
                    "rendered": {
                      "text": "  if (0x2a6de <= cp && cp < 0x2a700) return false;\n  if (0x2b735 <= cp && cp < 0x2b740) return false;\n  if (0x2b81e <= cp && cp < 0x2b820) return false;\n  if (0x2cea2 <= cp && cp < 0x2ceb0) return false;\n  if (0x2ebe1 <= cp && cp < 0x2f800) return false;\n  if (0x2fa1e <= cp && cp < 0x30000) return false;\n  if (0x3134b <= cp && cp < 0xe0100) return false;\n",
                      "markdown": "`  if (0x2a6de <= cp && cp < 0x2a700) return false;\n  if (0x2b735 <= cp && cp < 0x2b740) return false;\n  if (0x2b81e <= cp && cp < 0x2b820) return false;\n  if (0x2cea2 <= cp && cp < 0x2ceb0) return false;\n  if (0x2ebe1 <= cp && cp < 0x2f800) return false;\n  if (0x2fa1e <= cp && cp < 0x30000) return false;\n  if (0x3134b <= cp && cp < 0xe0100) return false;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format-inl.h"
                },
                "region": {
                  "startLine": 1934,
                  "startColumn": 22,
                  "endLine": 1934,
                  "endColumn": 26,
                  "snippet": {
                    "text": "  }\n  if (0x2a6de <= cp && cp < 0x2a700) return false;\n  if (0x2b735 <= cp && cp < 0x2b740) return false;\n  if (0x2b81e <= cp && cp < 0x2b820) return false;\n  if (0x2cea2 <= cp && cp < 0x2ceb0) return false;\n  if (0x2ebe1 <= cp && cp < 0x2f800) return false;\n  if (0x2fa1e <= cp && cp < 0x30000) return false;\n",
                    "rendered": {
                      "text": "  }\n  if (0x2a6de <= cp && cp < 0x2a700) return false;\n  if (0x2b735 <= cp && cp < 0x2b740) return false;\n  if (0x2b81e <= cp && cp < 0x2b820) return false;\n  if (0x2cea2 <= cp && cp < 0x2ceb0) return false;\n  if (0x2ebe1 <= cp && cp < 0x2f800) return false;\n  if (0x2fa1e <= cp && cp < 0x30000) return false;\n",
                      "markdown": "`  }\n  if (0x2a6de <= cp && cp < 0x2a700) return false;\n  if (0x2b735 <= cp && cp < 0x2b740) return false;\n  if (0x2b81e <= cp && cp < 0x2b820) return false;\n  if (0x2cea2 <= cp && cp < 0x2ceb0) return false;\n  if (0x2ebe1 <= cp && cp < 0x2f800) return false;\n  if (0x2fa1e <= cp && cp < 0x30000) return false;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format-inl.h"
                },
                "region": {
                  "startLine": 1934,
                  "startColumn": 16,
                  "endLine": 1934,
                  "endColumn": 20,
                  "snippet": {
                    "text": "  }\n  if (0x2a6de <= cp && cp < 0x2a700) return false;\n  if (0x2b735 <= cp && cp < 0x2b740) return false;\n  if (0x2b81e <= cp && cp < 0x2b820) return false;\n  if (0x2cea2 <= cp && cp < 0x2ceb0) return false;\n  if (0x2ebe1 <= cp && cp < 0x2f800) return false;\n  if (0x2fa1e <= cp && cp < 0x30000) return false;\n",
                    "rendered": {
                      "text": "  }\n  if (0x2a6de <= cp && cp < 0x2a700) return false;\n  if (0x2b735 <= cp && cp < 0x2b740) return false;\n  if (0x2b81e <= cp && cp < 0x2b820) return false;\n  if (0x2cea2 <= cp && cp < 0x2ceb0) return false;\n  if (0x2ebe1 <= cp && cp < 0x2f800) return false;\n  if (0x2fa1e <= cp && cp < 0x30000) return false;\n",
                      "markdown": "`  }\n  if (0x2a6de <= cp && cp < 0x2a700) return false;\n  if (0x2b735 <= cp && cp < 0x2b740) return false;\n  if (0x2b81e <= cp && cp < 0x2b820) return false;\n  if (0x2cea2 <= cp && cp < 0x2ceb0) return false;\n  if (0x2ebe1 <= cp && cp < 0x2f800) return false;\n  if (0x2fa1e <= cp && cp < 0x30000) return false;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format-inl.h"
                },
                "region": {
                  "startLine": 1933,
                  "startColumn": 22,
                  "endLine": 1933,
                  "endColumn": 26,
                  "snippet": {
                    "text": "                        singletons1_lower, normal1, sizeof(normal1));\n  }\n  if (0x2a6de <= cp && cp < 0x2a700) return false;\n  if (0x2b735 <= cp && cp < 0x2b740) return false;\n  if (0x2b81e <= cp && cp < 0x2b820) return false;\n  if (0x2cea2 <= cp && cp < 0x2ceb0) return false;\n  if (0x2ebe1 <= cp && cp < 0x2f800) return false;\n",
                    "rendered": {
                      "text": "                        singletons1_lower, normal1, sizeof(normal1));\n  }\n  if (0x2a6de <= cp && cp < 0x2a700) return false;\n  if (0x2b735 <= cp && cp < 0x2b740) return false;\n  if (0x2b81e <= cp && cp < 0x2b820) return false;\n  if (0x2cea2 <= cp && cp < 0x2ceb0) return false;\n  if (0x2ebe1 <= cp && cp < 0x2f800) return false;\n",
                      "markdown": "`                        singletons1_lower, normal1, sizeof(normal1));\n  }\n  if (0x2a6de <= cp && cp < 0x2a700) return false;\n  if (0x2b735 <= cp && cp < 0x2b740) return false;\n  if (0x2b81e <= cp && cp < 0x2b820) return false;\n  if (0x2cea2 <= cp && cp < 0x2ceb0) return false;\n  if (0x2ebe1 <= cp && cp < 0x2f800) return false;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format-inl.h"
                },
                "region": {
                  "startLine": 1933,
                  "startColumn": 16,
                  "endLine": 1933,
                  "endColumn": 20,
                  "snippet": {
                    "text": "                        singletons1_lower, normal1, sizeof(normal1));\n  }\n  if (0x2a6de <= cp && cp < 0x2a700) return false;\n  if (0x2b735 <= cp && cp < 0x2b740) return false;\n  if (0x2b81e <= cp && cp < 0x2b820) return false;\n  if (0x2cea2 <= cp && cp < 0x2ceb0) return false;\n  if (0x2ebe1 <= cp && cp < 0x2f800) return false;\n",
                    "rendered": {
                      "text": "                        singletons1_lower, normal1, sizeof(normal1));\n  }\n  if (0x2a6de <= cp && cp < 0x2a700) return false;\n  if (0x2b735 <= cp && cp < 0x2b740) return false;\n  if (0x2b81e <= cp && cp < 0x2b820) return false;\n  if (0x2cea2 <= cp && cp < 0x2ceb0) return false;\n  if (0x2ebe1 <= cp && cp < 0x2f800) return false;\n",
                      "markdown": "`                        singletons1_lower, normal1, sizeof(normal1));\n  }\n  if (0x2a6de <= cp && cp < 0x2a700) return false;\n  if (0x2b735 <= cp && cp < 0x2b740) return false;\n  if (0x2b81e <= cp && cp < 0x2b820) return false;\n  if (0x2cea2 <= cp && cp < 0x2ceb0) return false;\n  if (0x2ebe1 <= cp && cp < 0x2f800) return false;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format-inl.h"
                },
                "region": {
                  "startLine": 1932,
                  "startColumn": 22,
                  "endLine": 1932,
                  "endColumn": 26,
                  "snippet": {
                    "text": "                        sizeof(singletons1) / sizeof(*singletons1),\n                        singletons1_lower, normal1, sizeof(normal1));\n  }\n  if (0x2a6de <= cp && cp < 0x2a700) return false;\n  if (0x2b735 <= cp && cp < 0x2b740) return false;\n  if (0x2b81e <= cp && cp < 0x2b820) return false;\n  if (0x2cea2 <= cp && cp < 0x2ceb0) return false;\n",
                    "rendered": {
                      "text": "                        sizeof(singletons1) / sizeof(*singletons1),\n                        singletons1_lower, normal1, sizeof(normal1));\n  }\n  if (0x2a6de <= cp && cp < 0x2a700) return false;\n  if (0x2b735 <= cp && cp < 0x2b740) return false;\n  if (0x2b81e <= cp && cp < 0x2b820) return false;\n  if (0x2cea2 <= cp && cp < 0x2ceb0) return false;\n",
                      "markdown": "`                        sizeof(singletons1) / sizeof(*singletons1),\n                        singletons1_lower, normal1, sizeof(normal1));\n  }\n  if (0x2a6de <= cp && cp < 0x2a700) return false;\n  if (0x2b735 <= cp && cp < 0x2b740) return false;\n  if (0x2b81e <= cp && cp < 0x2b820) return false;\n  if (0x2cea2 <= cp && cp < 0x2ceb0) return false;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format-inl.h"
                },
                "region": {
                  "startLine": 1932,
                  "startColumn": 16,
                  "endLine": 1932,
                  "endColumn": 20,
                  "snippet": {
                    "text": "                        sizeof(singletons1) / sizeof(*singletons1),\n                        singletons1_lower, normal1, sizeof(normal1));\n  }\n  if (0x2a6de <= cp && cp < 0x2a700) return false;\n  if (0x2b735 <= cp && cp < 0x2b740) return false;\n  if (0x2b81e <= cp && cp < 0x2b820) return false;\n  if (0x2cea2 <= cp && cp < 0x2ceb0) return false;\n",
                    "rendered": {
                      "text": "                        sizeof(singletons1) / sizeof(*singletons1),\n                        singletons1_lower, normal1, sizeof(normal1));\n  }\n  if (0x2a6de <= cp && cp < 0x2a700) return false;\n  if (0x2b735 <= cp && cp < 0x2b740) return false;\n  if (0x2b81e <= cp && cp < 0x2b820) return false;\n  if (0x2cea2 <= cp && cp < 0x2ceb0) return false;\n",
                      "markdown": "`                        sizeof(singletons1) / sizeof(*singletons1),\n                        singletons1_lower, normal1, sizeof(normal1));\n  }\n  if (0x2a6de <= cp && cp < 0x2a700) return false;\n  if (0x2b735 <= cp && cp < 0x2b740) return false;\n  if (0x2b81e <= cp && cp < 0x2b820) return false;\n  if (0x2cea2 <= cp && cp < 0x2ceb0) return false;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format-inl.h"
                },
                "region": {
                  "startLine": 1415,
                  "startColumn": 5,
                  "endLine": 1415,
                  "endColumn": 9,
                  "snippet": {
                    "text": "    if (cp <= 0xFFFF) {\n      buffer_.push_back(static_cast<wchar_t>(cp));\n    } else {\n      cp -= 0x10000;\n      buffer_.push_back(static_cast<wchar_t>(0xD800 + (cp >> 10)));\n      buffer_.push_back(static_cast<wchar_t>(0xDC00 + (cp & 0x3FF)));\n    }\n",
                    "rendered": {
                      "text": "    if (cp <= 0xFFFF) {\n      buffer_.push_back(static_cast<wchar_t>(cp));\n    } else {\n      cp -= 0x10000;\n      buffer_.push_back(static_cast<wchar_t>(0xD800 + (cp >> 10)));\n      buffer_.push_back(static_cast<wchar_t>(0xDC00 + (cp & 0x3FF)));\n    }\n",
                      "markdown": "`    if (cp <= 0xFFFF) {\n      buffer_.push_back(static_cast<wchar_t>(cp));\n    } else {\n      cp -= 0x10000;\n      buffer_.push_back(static_cast<wchar_t>(0xD800 + (cp >> 10)));\n      buffer_.push_back(static_cast<wchar_t>(0xDC00 + (cp & 0x3FF)));\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format-inl.h"
                },
                "region": {
                  "startLine": 1345,
                  "startColumn": 12,
                  "endLine": 1345,
                  "endColumn": 18,
                  "snippet": {
                    "text": "  ret_value.exponent += remove_trailing_zeros(ret_value.significand);\n  return ret_value;\n\n  // Step 3: Find the significand with the smaller divisor.\n\nsmall_divisor_case_label:\n  ret_value.significand *= 10;\n",
                    "rendered": {
                      "text": "  ret_value.exponent += remove_trailing_zeros(ret_value.significand);\n  return ret_value;\n\n  // Step 3: Find the significand with the smaller divisor.\n\nsmall_divisor_case_label:\n  ret_value.significand *= 10;\n",
                      "markdown": "`  ret_value.exponent += remove_trailing_zeros(ret_value.significand);\n  return ret_value;\n\n  // Step 3: Find the significand with the smaller divisor.\n\nsmall_divisor_case_label:\n  ret_value.significand *= 10;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/base.h"
                },
                "region": {
                  "startLine": 2604,
                  "startColumn": 64,
                  "endLine": 2604,
                  "endColumn": 69,
                  "snippet": {
                    "text": "  void operator=(const context&) = delete;\n\n  FMT_CONSTEXPR auto arg(int id) const -> format_arg { return args_.get(id); }\n  inline auto arg(string_view name) -> format_arg { return args_.get(name); }\n  FMT_CONSTEXPR auto arg_id(string_view name) -> int {\n    return args_.get_id(name);\n  }\n",
                    "rendered": {
                      "text": "  void operator=(const context&) = delete;\n\n  FMT_CONSTEXPR auto arg(int id) const -> format_arg { return args_.get(id); }\n  inline auto arg(string_view name) -> format_arg { return args_.get(name); }\n  FMT_CONSTEXPR auto arg_id(string_view name) -> int {\n    return args_.get_id(name);\n  }\n",
                      "markdown": "`  void operator=(const context&) = delete;\n\n  FMT_CONSTEXPR auto arg(int id) const -> format_arg { return args_.get(id); }\n  inline auto arg(string_view name) -> format_arg { return args_.get(name); }\n  FMT_CONSTEXPR auto arg_id(string_view name) -> int {\n    return args_.get_id(name);\n  }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/base.h"
                },
                "region": {
                  "startLine": 2603,
                  "startColumn": 67,
                  "endLine": 2603,
                  "endColumn": 72,
                  "snippet": {
                    "text": "  context(const context&) = delete;\n  void operator=(const context&) = delete;\n\n  FMT_CONSTEXPR auto arg(int id) const -> format_arg { return args_.get(id); }\n  inline auto arg(string_view name) -> format_arg { return args_.get(name); }\n  FMT_CONSTEXPR auto arg_id(string_view name) -> int {\n    return args_.get_id(name);\n",
                    "rendered": {
                      "text": "  context(const context&) = delete;\n  void operator=(const context&) = delete;\n\n  FMT_CONSTEXPR auto arg(int id) const -> format_arg { return args_.get(id); }\n  inline auto arg(string_view name) -> format_arg { return args_.get(name); }\n  FMT_CONSTEXPR auto arg_id(string_view name) -> int {\n    return args_.get_id(name);\n",
                      "markdown": "`  context(const context&) = delete;\n  void operator=(const context&) = delete;\n\n  FMT_CONSTEXPR auto arg(int id) const -> format_arg { return args_.get(id); }\n  inline auto arg(string_view name) -> format_arg { return args_.get(name); }\n  FMT_CONSTEXPR auto arg_id(string_view name) -> int {\n    return args_.get_id(name);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/base.h"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 13,
                  "endLine": 238,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n#ifndef FMT_BEGIN_NAMESPACE\n#  define FMT_BEGIN_NAMESPACE \\\n    namespace fmt {           \\\n    inline namespace v11 {\n#  define FMT_END_NAMESPACE \\\n    }                       \\\n",
                    "rendered": {
                      "text": "\n#ifndef FMT_BEGIN_NAMESPACE\n#  define FMT_BEGIN_NAMESPACE \\\n    namespace fmt {           \\\n    inline namespace v11 {\n#  define FMT_END_NAMESPACE \\\n    }                       \\\n",
                      "markdown": "`\n#ifndef FMT_BEGIN_NAMESPACE\n#  define FMT_BEGIN_NAMESPACE \\\n    namespace fmt {           \\\n    inline namespace v11 {\n#  define FMT_END_NAMESPACE \\\n    }                       \\\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/python/mkdocstrings_handlers/cxx/__init__.py"
                },
                "region": {
                  "startLine": 273,
                  "startColumn": 34,
                  "endLine": 273,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        namespace, name = qual_name[:colons], qual_name[colons + 2:]\n\n        # Load XML.\n        doxyxml = self._ns2doxyxml.get(namespace)\n        if doxyxml is None:\n            path = f'namespace{namespace.replace(\"::\", \"_1_1\")}.xml'\n            with open(os.path.join(self._doxyxml_dir, path)) as f:\n",
                    "rendered": {
                      "text": "        namespace, name = qual_name[:colons], qual_name[colons + 2:]\n\n        # Load XML.\n        doxyxml = self._ns2doxyxml.get(namespace)\n        if doxyxml is None:\n            path = f'namespace{namespace.replace(\"::\", \"_1_1\")}.xml'\n            with open(os.path.join(self._doxyxml_dir, path)) as f:\n",
                      "markdown": "`        namespace, name = qual_name[:colons], qual_name[colons + 2:]\n\n        # Load XML.\n        doxyxml = self._ns2doxyxml.get(namespace)\n        if doxyxml is None:\n            path = f'namespace{namespace.replace(\"::\", \"_1_1\")}.xml'\n            with open(os.path.join(self._doxyxml_dir, path)) as f:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/python/mkdocstrings_handlers/cxx/__init__.py"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 24,
                  "endLine": 249,
                  "endColumn": 29,
                  "snippet": {
                    "text": "                desc = get_description(m)\n                if len(desc) == 0:\n                    continue\n                kind = m.get('kind')\n                member = Definition(name if name else '', kind=kind, is_member=True)\n                type_text = m.find('type').text\n                member.type = type_text if type_text else ''\n",
                    "rendered": {
                      "text": "                desc = get_description(m)\n                if len(desc) == 0:\n                    continue\n                kind = m.get('kind')\n                member = Definition(name if name else '', kind=kind, is_member=True)\n                type_text = m.find('type').text\n                member.type = type_text if type_text else ''\n",
                      "markdown": "`                desc = get_description(m)\n                if len(desc) == 0:\n                    continue\n                kind = m.get('kind')\n                member = Definition(name if name else '', kind=kind, is_member=True)\n                type_text = m.find('type').text\n                member.type = type_text if type_text else ''\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/python/mkdocstrings_handlers/cxx/__init__.py"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 53,
                  "endLine": 230,
                  "endColumn": 58,
                  "snippet": {
                    "text": "    def collect_compound(self, identifier: str,\n                         cls: List[ElementTree.Element]) -> Definition:\n        \"\"\"Collect a compound definition such as a struct.\"\"\"\n        path = os.path.join(self._doxyxml_dir, cls[0].get('refid') + '.xml')\n        with open(path) as f:\n            xml = ElementTree.parse(f)\n            node = xml.find('compounddef')\n",
                    "rendered": {
                      "text": "    def collect_compound(self, identifier: str,\n                         cls: List[ElementTree.Element]) -> Definition:\n        \"\"\"Collect a compound definition such as a struct.\"\"\"\n        path = os.path.join(self._doxyxml_dir, cls[0].get('refid') + '.xml')\n        with open(path) as f:\n            xml = ElementTree.parse(f)\n            node = xml.find('compounddef')\n",
                      "markdown": "`    def collect_compound(self, identifier: str,\n                         cls: List[ElementTree.Element]) -> Definition:\n        \"\"\"Collect a compound definition such as a struct.\"\"\"\n        path = os.path.join(self._doxyxml_dir, cls[0].get('refid') + '.xml')\n        with open(path) as f:\n            xml = ElementTree.parse(f)\n            node = xml.find('compounddef')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/python/mkdocstrings_handlers/cxx/__init__.py"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 21,
                  "endLine": 56,
                  "endColumn": 26,
                  "snippet": {
                    "text": "def doxyxml2html(nodes: List[ElementTree.Element]):\n    out = ''\n    for n in nodes:\n        tag = tag_map.get(n.tag)\n        if not tag:\n            out += tag_text_map[n.tag]\n        out += '<' + tag + '>' if tag else ''\n",
                    "rendered": {
                      "text": "def doxyxml2html(nodes: List[ElementTree.Element]):\n    out = ''\n    for n in nodes:\n        tag = tag_map.get(n.tag)\n        if not tag:\n            out += tag_text_map[n.tag]\n        out += '<' + tag + '>' if tag else ''\n",
                      "markdown": "`def doxyxml2html(nodes: List[ElementTree.Element]):\n    out = ''\n    for n in nodes:\n        tag = tag_map.get(n.tag)\n        if not tag:\n            out += tag_text_map[n.tag]\n        out += '<' + tag + '>' if tag else ''\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/python/mkdocstrings_handlers/cxx/__init__.py"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 54,
                  "endLine": 21,
                  "endColumn": 59,
                  "snippet": {
                    "text": "                 node: Optional[ElementTree.Element] = None,\n                 is_member: bool = False):\n        self.name = name\n        self.kind = kind if kind is not None else node.get('kind')\n        self.desc = None\n        self.id = name if not is_member else None\n        self.members = None\n",
                    "rendered": {
                      "text": "                 node: Optional[ElementTree.Element] = None,\n                 is_member: bool = False):\n        self.name = name\n        self.kind = kind if kind is not None else node.get('kind')\n        self.desc = None\n        self.id = name if not is_member else None\n        self.members = None\n",
                      "markdown": "`                 node: Optional[ElementTree.Element] = None,\n                 is_member: bool = False):\n        self.name = name\n        self.kind = kind if kind is not None else node.get('kind')\n        self.desc = None\n        self.id = name if not is_member else None\n        self.members = None\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/python/mkdocstrings_handlers/cxx/__init__.py"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 7,
                  "endLine": 179,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        ]\n\n        # Run doxygen.\n        cmd = ['doxygen', '-']\n        support_dir = Path(__file__).parents[3]\n        top_dir = os.path.dirname(support_dir)\n        include_dir = os.path.join(top_dir, 'include', 'fmt')\n",
                    "rendered": {
                      "text": "        ]\n\n        # Run doxygen.\n        cmd = ['doxygen', '-']\n        support_dir = Path(__file__).parents[3]\n        top_dir = os.path.dirname(support_dir)\n        include_dir = os.path.join(top_dir, 'include', 'fmt')\n",
                      "markdown": "`        ]\n\n        # Run doxygen.\n        cmd = ['doxygen', '-']\n        support_dir = Path(__file__).parents[3]\n        top_dir = os.path.dirname(support_dir)\n        include_dir = os.path.join(top_dir, 'include', 'fmt')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/python/mkdocstrings_handlers/cxx/__init__.py"
                },
                "region": {
                  "startLine": 311,
                  "startColumn": 36,
                  "endLine": 311,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\n        cls = doxyxml.findall(f\"compounddef/innerclass[.='{qual_name}']\")\n        if not cls:\n            raise Exception(f'Cannot find {identifier}. Candidates: {candidates}')\n        return self.collect_compound(identifier, cls)\n\n    def render(self, d: Definition, config: dict) -> str:\n",
                    "rendered": {
                      "text": "\n        cls = doxyxml.findall(f\"compounddef/innerclass[.='{qual_name}']\")\n        if not cls:\n            raise Exception(f'Cannot find {identifier}. Candidates: {candidates}')\n        return self.collect_compound(identifier, cls)\n\n    def render(self, d: Definition, config: dict) -> str:\n",
                      "markdown": "`\n        cls = doxyxml.findall(f\"compounddef/innerclass[.='{qual_name}']\")\n        if not cls:\n            raise Exception(f'Cannot find {identifier}. Candidates: {candidates}')\n        return self.collect_compound(identifier, cls)\n\n    def render(self, d: Definition, config: dict) -> str:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/python/mkdocstrings_handlers/cxx/__init__.py"
                },
                "region": {
                  "startLine": 286,
                  "startColumn": 11,
                  "endLine": 286,
                  "endColumn": 17,
                  "snippet": {
                    "text": "            nodes = self._file_doxyxml.findall(\n                f\"compounddef/sectiondef/memberdef/name[.='{name}']/..\")\n        candidates = []\n        for node in nodes:\n            # Process a function or a typedef.\n            params = None\n            d = Definition(name, node=node)\n",
                    "rendered": {
                      "text": "            nodes = self._file_doxyxml.findall(\n                f\"compounddef/sectiondef/memberdef/name[.='{name}']/..\")\n        candidates = []\n        for node in nodes:\n            # Process a function or a typedef.\n            params = None\n            d = Definition(name, node=node)\n",
                      "markdown": "`            nodes = self._file_doxyxml.findall(\n                f\"compounddef/sectiondef/memberdef/name[.='{name}']/..\")\n        candidates = []\n        for node in nodes:\n            # Process a function or a typedef.\n            params = None\n            d = Definition(name, node=node)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/python/mkdocstrings_handlers/cxx/__init__.py"
                },
                "region": {
                  "startLine": 233,
                  "startColumn": 11,
                  "endLine": 233,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        path = os.path.join(self._doxyxml_dir, cls[0].get('refid') + '.xml')\n        with open(path) as f:\n            xml = ElementTree.parse(f)\n            node = xml.find('compounddef')\n            d = Definition(identifier, node=node)\n            d.template_params = convert_template_params(node)\n            d.desc = get_description(node)\n",
                    "rendered": {
                      "text": "        path = os.path.join(self._doxyxml_dir, cls[0].get('refid') + '.xml')\n        with open(path) as f:\n            xml = ElementTree.parse(f)\n            node = xml.find('compounddef')\n            d = Definition(identifier, node=node)\n            d.template_params = convert_template_params(node)\n            d.desc = get_description(node)\n",
                      "markdown": "`        path = os.path.join(self._doxyxml_dir, cls[0].get('refid') + '.xml')\n        with open(path) as f:\n            xml = ElementTree.parse(f)\n            node = xml.find('compounddef')\n            d = Definition(identifier, node=node)\n            d.template_params = convert_template_params(node)\n            d.desc = get_description(node)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/python/mkdocstrings_handlers/cxx/__init__.py"
                },
                "region": {
                  "startLine": 224,
                  "startColumn": 19,
                  "endLine": 224,
                  "endColumn": 25,
                  "snippet": {
                    "text": "                    self._file_doxyxml = doxyxml\n                    continue\n                root = self._file_doxyxml.getroot()\n                for node in doxyxml.getroot():\n                    root.append(node)\n\n    def collect_compound(self, identifier: str,\n",
                    "rendered": {
                      "text": "                    self._file_doxyxml = doxyxml\n                    continue\n                root = self._file_doxyxml.getroot()\n                for node in doxyxml.getroot():\n                    root.append(node)\n\n    def collect_compound(self, identifier: str,\n",
                      "markdown": "`                    self._file_doxyxml = doxyxml\n                    continue\n                root = self._file_doxyxml.getroot()\n                for node in doxyxml.getroot():\n                    root.append(node)\n\n    def collect_compound(self, identifier: str,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/python/mkdocstrings_handlers/cxx/__init__.py"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 61,
                  "endLine": 205,
                  "endColumn": 66,
                  "snippet": {
                    "text": "                               FMT_USE_ALIAS_TEMPLATES=1 \\\n                               FMT_USE_NONTYPE_TEMPLATE_ARGS=1 \\\n                               FMT_API= \\\n                               \"FMT_BEGIN_NAMESPACE=namespace fmt {{\" \\\n                               \"FMT_END_NAMESPACE=}}\" \\\n                               \"FMT_DOC=1\"\n            '''.format(\n",
                    "rendered": {
                      "text": "                               FMT_USE_ALIAS_TEMPLATES=1 \\\n                               FMT_USE_NONTYPE_TEMPLATE_ARGS=1 \\\n                               FMT_API= \\\n                               \"FMT_BEGIN_NAMESPACE=namespace fmt {{\" \\\n                               \"FMT_END_NAMESPACE=}}\" \\\n                               \"FMT_DOC=1\"\n            '''.format(\n",
                      "markdown": "`                               FMT_USE_ALIAS_TEMPLATES=1 \\\n                               FMT_USE_NONTYPE_TEMPLATE_ARGS=1 \\\n                               FMT_API= \\\n                               \"FMT_BEGIN_NAMESPACE=namespace fmt {{\" \\\n                               \"FMT_END_NAMESPACE=}}\" \\\n                               \"FMT_DOC=1\"\n            '''.format(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/python/mkdocstrings_handlers/cxx/__init__.py"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 30,
                  "endLine": 190,
                  "snippet": {
                    "text": "        self._doxyxml_dir = os.path.join(build_dir, 'doxyxml')\n        p = Popen(cmd, stdin=PIPE, stdout=PIPE, stderr=STDOUT)\n        _, _ = p.communicate(input=r'''\n            PROJECT_NAME     = fmt\n            GENERATE_XML     = YES\n            GENERATE_LATEX   = NO\n            GENERATE_HTML    = NO\n            INPUT            = {0}\n",
                    "rendered": {
                      "text": "        self._doxyxml_dir = os.path.join(build_dir, 'doxyxml')\n        p = Popen(cmd, stdin=PIPE, stdout=PIPE, stderr=STDOUT)\n        _, _ = p.communicate(input=r'''\n            PROJECT_NAME     = fmt\n            GENERATE_XML     = YES\n            GENERATE_LATEX   = NO\n            GENERATE_HTML    = NO\n            INPUT            = {0}\n",
                      "markdown": "`        self._doxyxml_dir = os.path.join(build_dir, 'doxyxml')\n        p = Popen(cmd, stdin=PIPE, stdout=PIPE, stderr=STDOUT)\n        _, _ = p.communicate(input=r'''\n            PROJECT_NAME     = fmt\n            GENERATE_XML     = YES\n            GENERATE_LATEX   = NO\n            GENERATE_HTML    = NO\n            INPUT            = {0}\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/cmake/fmt.pc.in"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 5,
                  "endLine": 7,
                  "snippet": {
                    "text": "libdir=@libdir_for_pc_file@\nincludedir=@includedir_for_pc_file@\n\nName: fmt\nDescription: A modern formatting library\nVersion: @FMT_VERSION@\nLibs: -L${libdir} -l@FMT_LIB_NAME@\nCflags: -I${includedir}\n",
                    "rendered": {
                      "text": "libdir=@libdir_for_pc_file@\nincludedir=@includedir_for_pc_file@\n\nName: fmt\nDescription: A modern formatting library\nVersion: @FMT_VERSION@\nLibs: -L${libdir} -l@FMT_LIB_NAME@\nCflags: -I${includedir}\n",
                      "markdown": "`libdir=@libdir_for_pc_file@\nincludedir=@includedir_for_pc_file@\n\nName: fmt\nDescription: A modern formatting library\nVersion: @FMT_VERSION@\nLibs: -L${libdir} -l@FMT_LIB_NAME@\nCflags: -I${includedir}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/cmake/FindSetEnv.cmake"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 19,
                  "endLine": 1,
                  "endColumn": 25,
                  "snippet": {
                    "text": "# A CMake script to find SetEnv.cmd.\n\nfind_program(WINSDK_SETENV NAMES SetEnv.cmd\n  PATHS \"[HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Microsoft SDKs\\\\Windows;CurrentInstallFolder]/bin\")\n",
                    "rendered": {
                      "text": "# A CMake script to find SetEnv.cmd.\n\nfind_program(WINSDK_SETENV NAMES SetEnv.cmd\n  PATHS \"[HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Microsoft SDKs\\\\Windows;CurrentInstallFolder]/bin\")\n",
                      "markdown": "`# A CMake script to find SetEnv.cmd.\n\nfind_program(WINSDK_SETENV NAMES SetEnv.cmd\n  PATHS \"[HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Microsoft SDKs\\\\Windows;CurrentInstallFolder]/bin\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/cmake/FindSetEnv.cmake"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 9,
                  "endLine": 1,
                  "endColumn": 17,
                  "snippet": {
                    "text": "# A CMake script to find SetEnv.cmd.\n\nfind_program(WINSDK_SETENV NAMES SetEnv.cmd\n  PATHS \"[HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Microsoft SDKs\\\\Windows;CurrentInstallFolder]/bin\")\n",
                    "rendered": {
                      "text": "# A CMake script to find SetEnv.cmd.\n\nfind_program(WINSDK_SETENV NAMES SetEnv.cmd\n  PATHS \"[HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Microsoft SDKs\\\\Windows;CurrentInstallFolder]/bin\")\n",
                      "markdown": "`# A CMake script to find SetEnv.cmd.\n\nfind_program(WINSDK_SETENV NAMES SetEnv.cmd\n  PATHS \"[HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Microsoft SDKs\\\\Windows;CurrentInstallFolder]/bin\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/get-started.md"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 7,
                  "endLine": 98,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\nOnce the library has been built you can invoke `make test` to run the tests.\n\nYou can control generation of the make `test` target with the `FMT_TEST`\nCMake option. This can be useful if you include fmt as a subdirectory in\nyour project but don't want to add fmt's tests to your `test` target.\n\n",
                    "rendered": {
                      "text": "\nOnce the library has been built you can invoke `make test` to run the tests.\n\nYou can control generation of the make `test` target with the `FMT_TEST`\nCMake option. This can be useful if you include fmt as a subdirectory in\nyour project but don't want to add fmt's tests to your `test` target.\n\n",
                      "markdown": "`\nOnce the library has been built you can invoke `make test` to run the tests.\n\nYou can control generation of the make `test` target with the `FMT_TEST`\nCMake option. This can be useful if you include fmt as a subdirectory in\nyour project but don't want to add fmt's tests to your `test` target.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/get-started.md"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 32,
                  "endLine": 19,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n* **FetchContent**: Starting from CMake 3.11, you can use [`FetchContent`](\n  https://cmake.org/cmake/help/v3.30/module/FetchContent.html) to automatically\n  download {fmt} as a dependency at configure time:\n\n        include(FetchContent)\n\n",
                    "rendered": {
                      "text": "\n* **FetchContent**: Starting from CMake 3.11, you can use [`FetchContent`](\n  https://cmake.org/cmake/help/v3.30/module/FetchContent.html) to automatically\n  download {fmt} as a dependency at configure time:\n\n        include(FetchContent)\n\n",
                      "markdown": "`\n* **FetchContent**: Starting from CMake 3.11, you can use [`FetchContent`](\n  https://cmake.org/cmake/help/v3.30/module/FetchContent.html) to automatically\n  download {fmt} as a dependency at configure time:\n\n        include(FetchContent)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/get-started.md"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 3,
                  "endLine": 205,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nFor the header-only version, use:\n\n    fmt = subproject('fmt')\n    fmt_dep = fmt.get_variable('fmt_header_only_dep')\n\n### Android NDK\n",
                    "rendered": {
                      "text": "\nFor the header-only version, use:\n\n    fmt = subproject('fmt')\n    fmt_dep = fmt.get_variable('fmt_header_only_dep')\n\n### Android NDK\n",
                      "markdown": "`\nFor the header-only version, use:\n\n    fmt = subproject('fmt')\n    fmt_dep = fmt.get_variable('fmt_header_only_dep')\n\n### Android NDK\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/get-started.md"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 3,
                  "endLine": 200,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nFor a static build, use the following subproject definition:\n\n    fmt = subproject('fmt', default_options: 'default_library=static')\n    fmt_dep = fmt.get_variable('fmt_dep')\n\nFor the header-only version, use:\n",
                    "rendered": {
                      "text": "\nFor a static build, use the following subproject definition:\n\n    fmt = subproject('fmt', default_options: 'default_library=static')\n    fmt_dep = fmt.get_variable('fmt_dep')\n\nFor the header-only version, use:\n",
                      "markdown": "`\nFor a static build, use the following subproject definition:\n\n    fmt = subproject('fmt', default_options: 'default_library=static')\n    fmt_dep = fmt.get_variable('fmt_dep')\n\nFor the header-only version, use:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/get-started.md"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 7,
                  "endLine": 186,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n- In your project's `meson.build` file, add an entry for the new subproject:\n\n        fmt = subproject('fmt')\n        fmt_dep = fmt.get_variable('fmt_dep')\n\n- Include the new dependency object to link with fmt:\n",
                    "rendered": {
                      "text": "\n- In your project's `meson.build` file, add an entry for the new subproject:\n\n        fmt = subproject('fmt')\n        fmt_dep = fmt.get_variable('fmt_dep')\n\n- Include the new dependency object to link with fmt:\n",
                      "markdown": "`\n- In your project's `meson.build` file, add an entry for the new subproject:\n\n        fmt = subproject('fmt')\n        fmt_dep = fmt.get_variable('fmt_dep')\n\n- Include the new dependency object to link with fmt:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/get-started.md"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 26,
                  "endLine": 181,
                  "snippet": {
                    "text": "\n- Install the `fmt` subproject from the WrapDB by running:\n\n        meson wrap install fmt\n\n  from the root of your project.\n\n- In your project's `meson.build` file, add an entry for the new subproject:\n",
                    "rendered": {
                      "text": "\n- Install the `fmt` subproject from the WrapDB by running:\n\n        meson wrap install fmt\n\n  from the root of your project.\n\n- In your project's `meson.build` file, add an entry for the new subproject:\n",
                      "markdown": "`\n- Install the `fmt` subproject from the WrapDB by running:\n\n        meson wrap install fmt\n\n  from the root of your project.\n\n- In your project's `meson.build` file, add an entry for the new subproject:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/get-started.md"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 14,
                  "endLine": 166,
                  "endColumn": 19,
                  "snippet": {
                    "text": "- Import the target and use it as a prerequisite to your own target\n  using `fmt` in the appropriate `buildfile`:\n\n        import fmt = fmt%lib{fmt}\n        lib{mylib} : cxx{**} ... $fmt\n\nThen build your project as usual with `b` or `bdep update`.\n",
                    "rendered": {
                      "text": "- Import the target and use it as a prerequisite to your own target\n  using `fmt` in the appropriate `buildfile`:\n\n        import fmt = fmt%lib{fmt}\n        lib{mylib} : cxx{**} ... $fmt\n\nThen build your project as usual with `b` or `bdep update`.\n",
                      "markdown": "`- Import the target and use it as a prerequisite to your own target\n  using `fmt` in the appropriate `buildfile`:\n\n        import fmt = fmt%lib{fmt}\n        lib{mylib} : cxx{**} ... $fmt\n\nThen build your project as usual with `b` or `bdep update`.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/get-started.md"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 16,
                  "endLine": 161,
                  "endColumn": 21,
                  "snippet": {
                    "text": "- Add this package as a dependency to your `manifest` file (example\n  for version 10):\n\n        depends: fmt ~10.0.0\n\n- Import the target and use it as a prerequisite to your own target\n  using `fmt` in the appropriate `buildfile`:\n",
                    "rendered": {
                      "text": "- Add this package as a dependency to your `manifest` file (example\n  for version 10):\n\n        depends: fmt ~10.0.0\n\n- Import the target and use it as a prerequisite to your own target\n  using `fmt` in the appropriate `buildfile`:\n",
                      "markdown": "`- Add this package as a dependency to your `manifest` file (example\n  for version 10):\n\n        depends: fmt ~10.0.0\n\n- Import the target and use it as a prerequisite to your own target\n  using `fmt` in the appropriate `buildfile`:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/get-started.md"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 47,
                  "endLine": 99,
                  "endColumn": 52,
                  "snippet": {
                    "text": "Once the library has been built you can invoke `make test` to run the tests.\n\nYou can control generation of the make `test` target with the `FMT_TEST`\nCMake option. This can be useful if you include fmt as a subdirectory in\nyour project but don't want to add fmt's tests to your `test` target.\n\nTo build a shared library set the `BUILD_SHARED_LIBS` CMake variable to `TRUE`:\n",
                    "rendered": {
                      "text": "Once the library has been built you can invoke `make test` to run the tests.\n\nYou can control generation of the make `test` target with the `FMT_TEST`\nCMake option. This can be useful if you include fmt as a subdirectory in\nyour project but don't want to add fmt's tests to your `test` target.\n\nTo build a shared library set the `BUILD_SHARED_LIBS` CMake variable to `TRUE`:\n",
                      "markdown": "`Once the library has been built you can invoke `make test` to run the tests.\n\nYou can control generation of the make `test` target with the `FMT_TEST`\nCMake option. This can be useful if you include fmt as a subdirectory in\nyour project but don't want to add fmt's tests to your `test` target.\n\nTo build a shared library set the `BUILD_SHARED_LIBS` CMake variable to `TRUE`:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/get-started.md"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 8,
                  "endLine": 76,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    ./vcpkg integrate install\n    ./vcpkg install fmt\n\n<!-- The fmt package in vcpkg is kept up to date by Microsoft team members and\ncommunity contributors. If the version is out of date, please [create an\nissue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg\nrepository. -->\n",
                    "rendered": {
                      "text": "    ./vcpkg integrate install\n    ./vcpkg install fmt\n\n<!-- The fmt package in vcpkg is kept up to date by Microsoft team members and\ncommunity contributors. If the version is out of date, please [create an\nissue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg\nrepository. -->\n",
                      "markdown": "`    ./vcpkg integrate install\n    ./vcpkg install fmt\n\n<!-- The fmt package in vcpkg is kept up to date by Microsoft team members and\ncommunity contributors. If the version is out of date, please [create an\nissue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg\nrepository. -->\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/get-started.md"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 19,
                  "endLine": 75,
                  "snippet": {
                    "text": "    cd vcpkg\n    ./bootstrap-vcpkg.sh\n    ./vcpkg integrate install\n    ./vcpkg install fmt\n\n<!-- The fmt package in vcpkg is kept up to date by Microsoft team members and\ncommunity contributors. If the version is out of date, please [create an\nissue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg\n",
                    "rendered": {
                      "text": "    cd vcpkg\n    ./bootstrap-vcpkg.sh\n    ./vcpkg integrate install\n    ./vcpkg install fmt\n\n<!-- The fmt package in vcpkg is kept up to date by Microsoft team members and\ncommunity contributors. If the version is out of date, please [create an\nissue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg\n",
                      "markdown": "`    cd vcpkg\n    ./bootstrap-vcpkg.sh\n    ./vcpkg integrate install\n    ./vcpkg install fmt\n\n<!-- The fmt package in vcpkg is kept up to date by Microsoft team members and\ncommunity contributors. If the version is out of date, please [create an\nissue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/get-started.md"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 3,
                  "endLine": 70,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nDownload and install {fmt} using the vcpkg package manager:\n\n    git clone https://github.com/Microsoft/vcpkg.git\n    cd vcpkg\n    ./bootstrap-vcpkg.sh\n    ./vcpkg integrate install\n",
                    "rendered": {
                      "text": "\nDownload and install {fmt} using the vcpkg package manager:\n\n    git clone https://github.com/Microsoft/vcpkg.git\n    cd vcpkg\n    ./bootstrap-vcpkg.sh\n    ./vcpkg integrate install\n",
                      "markdown": "`\nDownload and install {fmt} using the vcpkg package manager:\n\n    git clone https://github.com/Microsoft/vcpkg.git\n    cd vcpkg\n    ./bootstrap-vcpkg.sh\n    ./vcpkg integrate install\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/get-started.md"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 32,
                  "endLine": 65,
                  "snippet": {
                    "text": "https://docs.conda.io/en/latest/), using its [conda-forge package](\nhttps://github.com/conda-forge/fmt-feedstock):\n\n    conda install -c conda-forge fmt\n\n### vcpkg\n\nDownload and install {fmt} using the vcpkg package manager:\n",
                    "rendered": {
                      "text": "https://docs.conda.io/en/latest/), using its [conda-forge package](\nhttps://github.com/conda-forge/fmt-feedstock):\n\n    conda install -c conda-forge fmt\n\n### vcpkg\n\nDownload and install {fmt} using the vcpkg package manager:\n",
                      "markdown": "`https://docs.conda.io/en/latest/), using its [conda-forge package](\nhttps://github.com/conda-forge/fmt-feedstock):\n\n    conda install -c conda-forge fmt\n\n### vcpkg\n\nDownload and install {fmt} using the vcpkg package manager:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/get-started.md"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 16,
                  "endLine": 57,
                  "snippet": {
                    "text": "\nInstall {fmt} on macOS using [Homebrew](https://brew.sh/):\n\n    brew install fmt\n\n### Conda\n\nInstall {fmt} on Linux, macOS, and Windows with [Conda](\n",
                    "rendered": {
                      "text": "\nInstall {fmt} on macOS using [Homebrew](https://brew.sh/):\n\n    brew install fmt\n\n### Conda\n\nInstall {fmt} on Linux, macOS, and Windows with [Conda](\n",
                      "markdown": "`\nInstall {fmt} on macOS using [Homebrew](https://brew.sh/):\n\n    brew install fmt\n\n### Conda\n\nInstall {fmt} on Linux, macOS, and Windows with [Conda](\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/get-started.md"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 3,
                  "endLine": 50,
                  "endColumn": 8,
                  "snippet": {
                    "text": "To install {fmt} on Debian, Ubuntu, or any other Debian-based Linux\ndistribution, use the following command:\n\n    apt install libfmt-dev\n\n### Homebrew\n\n",
                    "rendered": {
                      "text": "To install {fmt} on Debian, Ubuntu, or any other Debian-based Linux\ndistribution, use the following command:\n\n    apt install libfmt-dev\n\n### Homebrew\n\n",
                      "markdown": "`To install {fmt} on Debian, Ubuntu, or any other Debian-based Linux\ndistribution, use the following command:\n\n    apt install libfmt-dev\n\n### Homebrew\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/get-started.md"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 24,
                  "endLine": 31,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n        target_link_libraries(<your-target> fmt::fmt)\n\n* **Installed**: You can find and use an [installed](#installation) version of\n  {fmt} in your `CMakeLists.txt` file as follows:\n\n        find_package(fmt)\n",
                    "rendered": {
                      "text": "\n        target_link_libraries(<your-target> fmt::fmt)\n\n* **Installed**: You can find and use an [installed](#installation) version of\n  {fmt} in your `CMakeLists.txt` file as follows:\n\n        find_package(fmt)\n",
                      "markdown": "`\n        target_link_libraries(<your-target> fmt::fmt)\n\n* **Installed**: You can find and use an [installed](#installation) version of\n  {fmt} in your `CMakeLists.txt` file as follows:\n\n        find_package(fmt)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/get-started.md"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 9,
                  "endLine": 25,
                  "snippet": {
                    "text": "        include(FetchContent)\n\n        FetchContent_Declare(\n          fmt\n          GIT_REPOSITORY https://github.com/fmtlib/fmt\n          GIT_TAG        e69e5f977d458f2650bb346dadf2ad30c5320281) # 10.2.1\n        FetchContent_MakeAvailable(fmt)\n\n",
                    "rendered": {
                      "text": "        include(FetchContent)\n\n        FetchContent_Declare(\n          fmt\n          GIT_REPOSITORY https://github.com/fmtlib/fmt\n          GIT_TAG        e69e5f977d458f2650bb346dadf2ad30c5320281) # 10.2.1\n        FetchContent_MakeAvailable(fmt)\n\n",
                      "markdown": "`        include(FetchContent)\n\n        FetchContent_Declare(\n          fmt\n          GIT_REPOSITORY https://github.com/fmtlib/fmt\n          GIT_TAG        e69e5f977d458f2650bb346dadf2ad30c5320281) # 10.2.1\n        FetchContent_MakeAvailable(fmt)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 39,
                  "endLine": 89,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                    "rendered": {
                      "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                      "markdown": "`\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                    "rendered": {
                      "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                      "markdown": "`\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/pre-merge-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 45,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                    "rendered": {
                      "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                      "markdown": "`\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 29,
                  "endLine": 151,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                    "rendered": {
                      "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                      "markdown": "` * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                    "rendered": {
                      "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                      "markdown": "`    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 104,
                  "snippet": {
                    "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                    "rendered": {
                      "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                      "markdown": "`\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                    "rendered": {
                      "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                      "markdown": "`\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                    "rendered": {
                      "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                      "markdown": "`To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                    "rendered": {
                      "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                      "markdown": "`\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                    "rendered": {
                      "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                      "markdown": "`\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 42,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                    "rendered": {
                      "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                      "markdown": "`   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                      "markdown": "`# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 9,
                  "snippet": {
                    "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                    "rendered": {
                      "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                      "markdown": "`esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 26,
                  "snippet": {
                    "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                    "rendered": {
                      "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                      "markdown": "`\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                    "rendered": {
                      "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                      "markdown": "`\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                    "rendered": {
                      "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                      "markdown": "`unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                    "rendered": {
                      "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                      "markdown": "`\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                    "rendered": {
                      "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                      "markdown": "`\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                    "rendered": {
                      "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                      "markdown": "`if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                    "rendered": {
                      "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                      "markdown": "`validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 21,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                    "rendered": {
                      "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                      "markdown": "`# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "endLine": 15,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                    "rendered": {
                      "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                      "markdown": "`# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.git/info/exclude"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                    "rendered": {
                      "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                      "markdown": "`# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-impl-test.cc"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 12,
                  "endLine": 161,
                  "endColumn": 75,
                  "snippet": {
                    "text": "  result = n1.divmod_assign(bigint(42) <<= 320);\n  EXPECT_EQ(result, 111);\n  EXPECT_EQ(fmt::to_string(n1),\n            \"13ad2594c37ceb0b2784c4ce0bf38ace408e211a7caab24308a82e8f10p96\");\n  // 42 / 100:\n  bigint n2(42);\n  n1.assign_pow10(2);\n",
                    "rendered": {
                      "text": "  result = n1.divmod_assign(bigint(42) <<= 320);\n  EXPECT_EQ(result, 111);\n  EXPECT_EQ(fmt::to_string(n1),\n            \"13ad2594c37ceb0b2784c4ce0bf38ace408e211a7caab24308a82e8f10p96\");\n  // 42 / 100:\n  bigint n2(42);\n  n1.assign_pow10(2);\n",
                      "markdown": "`  result = n1.divmod_assign(bigint(42) <<= 320);\n  EXPECT_EQ(result, 111);\n  EXPECT_EQ(fmt::to_string(n1),\n            \"13ad2594c37ceb0b2784c4ce0bf38ace408e211a7caab24308a82e8f10p96\");\n  // 42 / 100:\n  bigint n2(42);\n  n1.assign_pow10(2);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-impl-test.cc"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 12,
                  "endLine": 147,
                  "endColumn": 77,
                  "snippet": {
                    "text": "  int result = n1.divmod_assign(n2);\n  EXPECT_EQ(result, 9406);\n  EXPECT_EQ(fmt::to_string(n1),\n            \"10f8353019583bfc29ffc8f564e1b9f9d819dbb4cf783e4507eca1539220p96\");\n}\n\nTEST(bigint_test, divmod_assign) {\n",
                    "rendered": {
                      "text": "  int result = n1.divmod_assign(n2);\n  EXPECT_EQ(result, 9406);\n  EXPECT_EQ(fmt::to_string(n1),\n            \"10f8353019583bfc29ffc8f564e1b9f9d819dbb4cf783e4507eca1539220p96\");\n}\n\nTEST(bigint_test, divmod_assign) {\n",
                      "markdown": "`  int result = n1.divmod_assign(n2);\n  EXPECT_EQ(result, 9406);\n  EXPECT_EQ(fmt::to_string(n1),\n            \"10f8353019583bfc29ffc8f564e1b9f9d819dbb4cf783e4507eca1539220p96\");\n}\n\nTEST(bigint_test, divmod_assign) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-impl-test.cc"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 12,
                  "endLine": 106,
                  "endColumn": 78,
                  "snippet": {
                    "text": "  bigmax = max128;\n  bigmax *= max128;\n  EXPECT_EQ(fmt::to_string(bigmax),\n            \"fffffffffffffffffffffffffffffffe00000000000000000000000000000001\");\n}\n\nTEST(bigint_test, square) {\n",
                    "rendered": {
                      "text": "  bigmax = max128;\n  bigmax *= max128;\n  EXPECT_EQ(fmt::to_string(bigmax),\n            \"fffffffffffffffffffffffffffffffe00000000000000000000000000000001\");\n}\n\nTEST(bigint_test, square) {\n",
                      "markdown": "`  bigmax = max128;\n  bigmax *= max128;\n  EXPECT_EQ(fmt::to_string(bigmax),\n            \"fffffffffffffffffffffffffffffffe00000000000000000000000000000001\");\n}\n\nTEST(bigint_test, square) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest-extra-test.cc"
                },
                "region": {
                  "startLine": 395,
                  "startColumn": 29,
                  "endLine": 395,
                  "endColumn": 34,
                  "snippet": {
                    "text": "  buffered_file f = pipe.write_end.fdopen(\"w\");\n  std::unique_ptr<output_redirect> redir(new output_redirect(f.get()));\n  // Put a character in a file buffer.\n  EXPECT_EQ('x', fputc('x', f.get()));\n  EXPECT_WRITE(\n      stderr,\n      {\n",
                    "rendered": {
                      "text": "  buffered_file f = pipe.write_end.fdopen(\"w\");\n  std::unique_ptr<output_redirect> redir(new output_redirect(f.get()));\n  // Put a character in a file buffer.\n  EXPECT_EQ('x', fputc('x', f.get()));\n  EXPECT_WRITE(\n      stderr,\n      {\n",
                      "markdown": "`  buffered_file f = pipe.write_end.fdopen(\"w\");\n  std::unique_ptr<output_redirect> redir(new output_redirect(f.get()));\n  // Put a character in a file buffer.\n  EXPECT_EQ('x', fputc('x', f.get()));\n  EXPECT_WRITE(\n      stderr,\n      {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest-extra-test.cc"
                },
                "region": {
                  "startLine": 393,
                  "startColumn": 62,
                  "endLine": 393,
                  "endColumn": 67,
                  "snippet": {
                    "text": "  int write_fd = pipe.write_end.descriptor();\n  file write_copy = pipe.write_end.dup(write_fd);\n  buffered_file f = pipe.write_end.fdopen(\"w\");\n  std::unique_ptr<output_redirect> redir(new output_redirect(f.get()));\n  // Put a character in a file buffer.\n  EXPECT_EQ('x', fputc('x', f.get()));\n  EXPECT_WRITE(\n",
                    "rendered": {
                      "text": "  int write_fd = pipe.write_end.descriptor();\n  file write_copy = pipe.write_end.dup(write_fd);\n  buffered_file f = pipe.write_end.fdopen(\"w\");\n  std::unique_ptr<output_redirect> redir(new output_redirect(f.get()));\n  // Put a character in a file buffer.\n  EXPECT_EQ('x', fputc('x', f.get()));\n  EXPECT_WRITE(\n",
                      "markdown": "`  int write_fd = pipe.write_end.descriptor();\n  file write_copy = pipe.write_end.dup(write_fd);\n  buffered_file f = pipe.write_end.fdopen(\"w\");\n  std::unique_ptr<output_redirect> redir(new output_redirect(f.get()));\n  // Put a character in a file buffer.\n  EXPECT_EQ('x', fputc('x', f.get()));\n  EXPECT_WRITE(\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest-extra-test.cc"
                },
                "region": {
                  "startLine": 381,
                  "startColumn": 29,
                  "endLine": 381,
                  "endColumn": 34,
                  "snippet": {
                    "text": "  buffered_file f = pipe.write_end.fdopen(\"w\");\n  output_redirect redir(f.get());\n  // Put a character in a file buffer.\n  EXPECT_EQ('x', fputc('x', f.get()));\n  FMT_POSIX(close(write_fd));\n  EXPECT_SYSTEM_ERROR_NOASSERT(redir.restore_and_read(), EBADF,\n                               \"cannot flush stream\");\n",
                    "rendered": {
                      "text": "  buffered_file f = pipe.write_end.fdopen(\"w\");\n  output_redirect redir(f.get());\n  // Put a character in a file buffer.\n  EXPECT_EQ('x', fputc('x', f.get()));\n  FMT_POSIX(close(write_fd));\n  EXPECT_SYSTEM_ERROR_NOASSERT(redir.restore_and_read(), EBADF,\n                               \"cannot flush stream\");\n",
                      "markdown": "`  buffered_file f = pipe.write_end.fdopen(\"w\");\n  output_redirect redir(f.get());\n  // Put a character in a file buffer.\n  EXPECT_EQ('x', fputc('x', f.get()));\n  FMT_POSIX(close(write_fd));\n  EXPECT_SYSTEM_ERROR_NOASSERT(redir.restore_and_read(), EBADF,\n                               \"cannot flush stream\");\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest-extra-test.cc"
                },
                "region": {
                  "startLine": 379,
                  "startColumn": 25,
                  "endLine": 379,
                  "endColumn": 30,
                  "snippet": {
                    "text": "  int write_fd = pipe.write_end.descriptor();\n  file write_copy = pipe.write_end.dup(write_fd);\n  buffered_file f = pipe.write_end.fdopen(\"w\");\n  output_redirect redir(f.get());\n  // Put a character in a file buffer.\n  EXPECT_EQ('x', fputc('x', f.get()));\n  FMT_POSIX(close(write_fd));\n",
                    "rendered": {
                      "text": "  int write_fd = pipe.write_end.descriptor();\n  file write_copy = pipe.write_end.dup(write_fd);\n  buffered_file f = pipe.write_end.fdopen(\"w\");\n  output_redirect redir(f.get());\n  // Put a character in a file buffer.\n  EXPECT_EQ('x', fputc('x', f.get()));\n  FMT_POSIX(close(write_fd));\n",
                      "markdown": "`  int write_fd = pipe.write_end.descriptor();\n  file write_copy = pipe.write_end.dup(write_fd);\n  buffered_file f = pipe.write_end.fdopen(\"w\");\n  output_redirect redir(f.get());\n  // Put a character in a file buffer.\n  EXPECT_EQ('x', fputc('x', f.get()));\n  FMT_POSIX(close(write_fd));\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest-extra-test.cc"
                },
                "region": {
                  "startLine": 368,
                  "startColumn": 19,
                  "endLine": 368,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  std::fprintf(file.get(), \"censored\");\n  EXPECT_EQ(\"censored\", redir.restore_and_read());\n  EXPECT_EQ(\"\", redir.restore_and_read());\n  std::fprintf(file.get(), \"]]]\");\n  file = buffered_file();\n  EXPECT_READ(pipe.read_end, \"[[[]]]\");\n}\n",
                    "rendered": {
                      "text": "  std::fprintf(file.get(), \"censored\");\n  EXPECT_EQ(\"censored\", redir.restore_and_read());\n  EXPECT_EQ(\"\", redir.restore_and_read());\n  std::fprintf(file.get(), \"]]]\");\n  file = buffered_file();\n  EXPECT_READ(pipe.read_end, \"[[[]]]\");\n}\n",
                      "markdown": "`  std::fprintf(file.get(), \"censored\");\n  EXPECT_EQ(\"censored\", redir.restore_and_read());\n  EXPECT_EQ(\"\", redir.restore_and_read());\n  std::fprintf(file.get(), \"]]]\");\n  file = buffered_file();\n  EXPECT_READ(pipe.read_end, \"[[[]]]\");\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest-extra-test.cc"
                },
                "region": {
                  "startLine": 365,
                  "startColumn": 19,
                  "endLine": 365,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  buffered_file file(pipe.write_end.fdopen(\"w\"));\n  std::fprintf(file.get(), \"[[[\");\n  output_redirect redir(file.get());\n  std::fprintf(file.get(), \"censored\");\n  EXPECT_EQ(\"censored\", redir.restore_and_read());\n  EXPECT_EQ(\"\", redir.restore_and_read());\n  std::fprintf(file.get(), \"]]]\");\n",
                    "rendered": {
                      "text": "  buffered_file file(pipe.write_end.fdopen(\"w\"));\n  std::fprintf(file.get(), \"[[[\");\n  output_redirect redir(file.get());\n  std::fprintf(file.get(), \"censored\");\n  EXPECT_EQ(\"censored\", redir.restore_and_read());\n  EXPECT_EQ(\"\", redir.restore_and_read());\n  std::fprintf(file.get(), \"]]]\");\n",
                      "markdown": "`  buffered_file file(pipe.write_end.fdopen(\"w\"));\n  std::fprintf(file.get(), \"[[[\");\n  output_redirect redir(file.get());\n  std::fprintf(file.get(), \"censored\");\n  EXPECT_EQ(\"censored\", redir.restore_and_read());\n  EXPECT_EQ(\"\", redir.restore_and_read());\n  std::fprintf(file.get(), \"]]]\");\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest-extra-test.cc"
                },
                "region": {
                  "startLine": 364,
                  "startColumn": 28,
                  "endLine": 364,
                  "endColumn": 33,
                  "snippet": {
                    "text": "  auto pipe = fmt::pipe();\n  buffered_file file(pipe.write_end.fdopen(\"w\"));\n  std::fprintf(file.get(), \"[[[\");\n  output_redirect redir(file.get());\n  std::fprintf(file.get(), \"censored\");\n  EXPECT_EQ(\"censored\", redir.restore_and_read());\n  EXPECT_EQ(\"\", redir.restore_and_read());\n",
                    "rendered": {
                      "text": "  auto pipe = fmt::pipe();\n  buffered_file file(pipe.write_end.fdopen(\"w\"));\n  std::fprintf(file.get(), \"[[[\");\n  output_redirect redir(file.get());\n  std::fprintf(file.get(), \"censored\");\n  EXPECT_EQ(\"censored\", redir.restore_and_read());\n  EXPECT_EQ(\"\", redir.restore_and_read());\n",
                      "markdown": "`  auto pipe = fmt::pipe();\n  buffered_file file(pipe.write_end.fdopen(\"w\"));\n  std::fprintf(file.get(), \"[[[\");\n  output_redirect redir(file.get());\n  std::fprintf(file.get(), \"censored\");\n  EXPECT_EQ(\"censored\", redir.restore_and_read());\n  EXPECT_EQ(\"\", redir.restore_and_read());\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest-extra-test.cc"
                },
                "region": {
                  "startLine": 363,
                  "startColumn": 19,
                  "endLine": 363,
                  "endColumn": 24,
                  "snippet": {
                    "text": "TEST(output_redirect_test, restore_and_read) {\n  auto pipe = fmt::pipe();\n  buffered_file file(pipe.write_end.fdopen(\"w\"));\n  std::fprintf(file.get(), \"[[[\");\n  output_redirect redir(file.get());\n  std::fprintf(file.get(), \"censored\");\n  EXPECT_EQ(\"censored\", redir.restore_and_read());\n",
                    "rendered": {
                      "text": "TEST(output_redirect_test, restore_and_read) {\n  auto pipe = fmt::pipe();\n  buffered_file file(pipe.write_end.fdopen(\"w\"));\n  std::fprintf(file.get(), \"[[[\");\n  output_redirect redir(file.get());\n  std::fprintf(file.get(), \"censored\");\n  EXPECT_EQ(\"censored\", redir.restore_and_read());\n",
                      "markdown": "`TEST(output_redirect_test, restore_and_read) {\n  auto pipe = fmt::pipe();\n  buffered_file file(pipe.write_end.fdopen(\"w\"));\n  std::fprintf(file.get(), \"[[[\");\n  output_redirect redir(file.get());\n  std::fprintf(file.get(), \"censored\");\n  EXPECT_EQ(\"censored\", redir.restore_and_read());\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest-extra-test.cc"
                },
                "region": {
                  "startLine": 355,
                  "startColumn": 39,
                  "endLine": 355,
                  "endColumn": 44,
                  "snippet": {
                    "text": "  FMT_POSIX(close(fd));\n  std::unique_ptr<output_redirect> redir{nullptr};\n  EXPECT_SYSTEM_ERROR_NOASSERT(\n      redir.reset(new output_redirect(f.get(), false)), EBADF,\n      fmt::format(\"cannot duplicate file descriptor {}\", fd));\n  copy.dup2(fd);  // \"undo\" close or dtor will fail\n}\n",
                    "rendered": {
                      "text": "  FMT_POSIX(close(fd));\n  std::unique_ptr<output_redirect> redir{nullptr};\n  EXPECT_SYSTEM_ERROR_NOASSERT(\n      redir.reset(new output_redirect(f.get(), false)), EBADF,\n      fmt::format(\"cannot duplicate file descriptor {}\", fd));\n  copy.dup2(fd);  // \"undo\" close or dtor will fail\n}\n",
                      "markdown": "`  FMT_POSIX(close(fd));\n  std::unique_ptr<output_redirect> redir{nullptr};\n  EXPECT_SYSTEM_ERROR_NOASSERT(\n      redir.reset(new output_redirect(f.get(), false)), EBADF,\n      fmt::format(\"cannot duplicate file descriptor {}\", fd));\n  copy.dup2(fd);  // \"undo\" close or dtor will fail\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest-extra-test.cc"
                },
                "region": {
                  "startLine": 342,
                  "startColumn": 64,
                  "endLine": 342,
                  "endColumn": 69,
                  "snippet": {
                    "text": "  EXPECT_EQ('x', fputc('x', f.get()));\n  FMT_POSIX(close(write_fd));\n  std::unique_ptr<output_redirect> redir{nullptr};\n  EXPECT_SYSTEM_ERROR_NOASSERT(redir.reset(new output_redirect(f.get())), EBADF,\n                               \"cannot flush stream\");\n  redir.reset(nullptr);\n  write_copy.dup2(write_fd);  // \"undo\" close or dtor will fail\n",
                    "rendered": {
                      "text": "  EXPECT_EQ('x', fputc('x', f.get()));\n  FMT_POSIX(close(write_fd));\n  std::unique_ptr<output_redirect> redir{nullptr};\n  EXPECT_SYSTEM_ERROR_NOASSERT(redir.reset(new output_redirect(f.get())), EBADF,\n                               \"cannot flush stream\");\n  redir.reset(nullptr);\n  write_copy.dup2(write_fd);  // \"undo\" close or dtor will fail\n",
                      "markdown": "`  EXPECT_EQ('x', fputc('x', f.get()));\n  FMT_POSIX(close(write_fd));\n  std::unique_ptr<output_redirect> redir{nullptr};\n  EXPECT_SYSTEM_ERROR_NOASSERT(redir.reset(new output_redirect(f.get())), EBADF,\n                               \"cannot flush stream\");\n  redir.reset(nullptr);\n  write_copy.dup2(write_fd);  // \"undo\" close or dtor will fail\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest-extra-test.cc"
                },
                "region": {
                  "startLine": 339,
                  "startColumn": 29,
                  "endLine": 339,
                  "endColumn": 34,
                  "snippet": {
                    "text": "  file write_copy = pipe.write_end.dup(write_fd);\n  buffered_file f = pipe.write_end.fdopen(\"w\");\n  // Put a character in a file buffer.\n  EXPECT_EQ('x', fputc('x', f.get()));\n  FMT_POSIX(close(write_fd));\n  std::unique_ptr<output_redirect> redir{nullptr};\n  EXPECT_SYSTEM_ERROR_NOASSERT(redir.reset(new output_redirect(f.get())), EBADF,\n",
                    "rendered": {
                      "text": "  file write_copy = pipe.write_end.dup(write_fd);\n  buffered_file f = pipe.write_end.fdopen(\"w\");\n  // Put a character in a file buffer.\n  EXPECT_EQ('x', fputc('x', f.get()));\n  FMT_POSIX(close(write_fd));\n  std::unique_ptr<output_redirect> redir{nullptr};\n  EXPECT_SYSTEM_ERROR_NOASSERT(redir.reset(new output_redirect(f.get())), EBADF,\n",
                      "markdown": "`  file write_copy = pipe.write_end.dup(write_fd);\n  buffered_file f = pipe.write_end.fdopen(\"w\");\n  // Put a character in a file buffer.\n  EXPECT_EQ('x', fputc('x', f.get()));\n  FMT_POSIX(close(write_fd));\n  std::unique_ptr<output_redirect> redir{nullptr};\n  EXPECT_SYSTEM_ERROR_NOASSERT(redir.reset(new output_redirect(f.get())), EBADF,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest-extra-test.cc"
                },
                "region": {
                  "startLine": 327,
                  "startColumn": 21,
                  "endLine": 327,
                  "endColumn": 26,
                  "snippet": {
                    "text": "      output_redirect redir(file.get());\n      std::fprintf(file.get(), \"censored\");\n    }\n    std::fprintf(file.get(), \"]]]\");\n  }\n  EXPECT_READ(pipe.read_end, \"[[[]]]\");\n}\n",
                    "rendered": {
                      "text": "      output_redirect redir(file.get());\n      std::fprintf(file.get(), \"censored\");\n    }\n    std::fprintf(file.get(), \"]]]\");\n  }\n  EXPECT_READ(pipe.read_end, \"[[[]]]\");\n}\n",
                      "markdown": "`      output_redirect redir(file.get());\n      std::fprintf(file.get(), \"censored\");\n    }\n    std::fprintf(file.get(), \"]]]\");\n  }\n  EXPECT_READ(pipe.read_end, \"[[[]]]\");\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest-extra-test.cc"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 23,
                  "endLine": 325,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    std::fprintf(file.get(), \"[[[\");\n    {\n      output_redirect redir(file.get());\n      std::fprintf(file.get(), \"censored\");\n    }\n    std::fprintf(file.get(), \"]]]\");\n  }\n",
                    "rendered": {
                      "text": "    std::fprintf(file.get(), \"[[[\");\n    {\n      output_redirect redir(file.get());\n      std::fprintf(file.get(), \"censored\");\n    }\n    std::fprintf(file.get(), \"]]]\");\n  }\n",
                      "markdown": "`    std::fprintf(file.get(), \"[[[\");\n    {\n      output_redirect redir(file.get());\n      std::fprintf(file.get(), \"censored\");\n    }\n    std::fprintf(file.get(), \"]]]\");\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest-extra-test.cc"
                },
                "region": {
                  "startLine": 324,
                  "startColumn": 32,
                  "endLine": 324,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    buffered_file file(pipe.write_end.fdopen(\"w\"));\n    std::fprintf(file.get(), \"[[[\");\n    {\n      output_redirect redir(file.get());\n      std::fprintf(file.get(), \"censored\");\n    }\n    std::fprintf(file.get(), \"]]]\");\n",
                    "rendered": {
                      "text": "    buffered_file file(pipe.write_end.fdopen(\"w\"));\n    std::fprintf(file.get(), \"[[[\");\n    {\n      output_redirect redir(file.get());\n      std::fprintf(file.get(), \"censored\");\n    }\n    std::fprintf(file.get(), \"]]]\");\n",
                      "markdown": "`    buffered_file file(pipe.write_end.fdopen(\"w\"));\n    std::fprintf(file.get(), \"[[[\");\n    {\n      output_redirect redir(file.get());\n      std::fprintf(file.get(), \"censored\");\n    }\n    std::fprintf(file.get(), \"]]]\");\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/gtest-extra-test.cc"
                },
                "region": {
                  "startLine": 322,
                  "startColumn": 21,
                  "endLine": 322,
                  "endColumn": 26,
                  "snippet": {
                    "text": "  auto pipe = fmt::pipe();\n  {\n    buffered_file file(pipe.write_end.fdopen(\"w\"));\n    std::fprintf(file.get(), \"[[[\");\n    {\n      output_redirect redir(file.get());\n      std::fprintf(file.get(), \"censored\");\n",
                    "rendered": {
                      "text": "  auto pipe = fmt::pipe();\n  {\n    buffered_file file(pipe.write_end.fdopen(\"w\"));\n    std::fprintf(file.get(), \"[[[\");\n    {\n      output_redirect redir(file.get());\n      std::fprintf(file.get(), \"censored\");\n",
                      "markdown": "`  auto pipe = fmt::pipe();\n  {\n    buffered_file file(pipe.write_end.fdopen(\"w\"));\n    std::fprintf(file.get(), \"[[[\");\n    {\n      output_redirect redir(file.get());\n      std::fprintf(file.get(), \"censored\");\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/no-builtin-types-test.cc"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 34,
                  "endLine": 21,
                  "endColumn": 39,
                  "snippet": {
                    "text": "TEST(no_builtin_types_test, double_is_custom_type) {\n  double d = 42;\n  auto args = fmt::make_format_args(d);\n  EXPECT_EQ(fmt::format_args(args).get(0).type(),\n            fmt::detail::type::custom_type);\n}\n#endif\n",
                    "rendered": {
                      "text": "TEST(no_builtin_types_test, double_is_custom_type) {\n  double d = 42;\n  auto args = fmt::make_format_args(d);\n  EXPECT_EQ(fmt::format_args(args).get(0).type(),\n            fmt::detail::type::custom_type);\n}\n#endif\n",
                      "markdown": "`TEST(no_builtin_types_test, double_is_custom_type) {\n  double d = 42;\n  auto args = fmt::make_format_args(d);\n  EXPECT_EQ(fmt::format_args(args).get(0).type(),\n            fmt::detail::type::custom_type);\n}\n#endif\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/base-test.cc"
                },
                "region": {
                  "startLine": 295,
                  "startColumn": 19,
                  "endLine": 295,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\nTEST(arg_test, format_args) {\n  auto args = fmt::format_args();\n  EXPECT_FALSE(args.get(1));\n}\n\n// Use a unique result type to make sure that there are no undesirable\n",
                    "rendered": {
                      "text": "\nTEST(arg_test, format_args) {\n  auto args = fmt::format_args();\n  EXPECT_FALSE(args.get(1));\n}\n\n// Use a unique result type to make sure that there are no undesirable\n",
                      "markdown": "`\nTEST(arg_test, format_args) {\n  auto args = fmt::format_args();\n  EXPECT_FALSE(args.get(1));\n}\n\n// Use a unique result type to make sure that there are no undesirable\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/base-test.cc"
                },
                "region": {
                  "startLine": 406,
                  "startColumn": 13,
                  "endLine": 406,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\nTEST(arg_test, pointer_arg) {\n  void* p = nullptr;\n  const void* cp = nullptr;\n  CHECK_ARG(cp, p);\n  CHECK_ARG_SIMPLE(cp);\n}\n",
                    "rendered": {
                      "text": "\nTEST(arg_test, pointer_arg) {\n  void* p = nullptr;\n  const void* cp = nullptr;\n  CHECK_ARG(cp, p);\n  CHECK_ARG_SIMPLE(cp);\n}\n",
                      "markdown": "`\nTEST(arg_test, pointer_arg) {\n  void* p = nullptr;\n  const void* cp = nullptr;\n  CHECK_ARG(cp, p);\n  CHECK_ARG_SIMPLE(cp);\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/perf-sanity.cc"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 10,
                  "endLine": 22,
                  "endColumn": 16,
                  "snippet": {
                    "text": "  std::atomic_signal_fence(std::memory_order_acq_rel);  // Clobber memory.\n  auto end = std::chrono::steady_clock::now();\n\n  // Print time in milliseconds.\n  std::chrono::duration<double> duration = end - start;\n  fmt::print(\"{:.1f}\\n\", duration.count() * 1000);\n}\n",
                    "rendered": {
                      "text": "  std::atomic_signal_fence(std::memory_order_acq_rel);  // Clobber memory.\n  auto end = std::chrono::steady_clock::now();\n\n  // Print time in milliseconds.\n  std::chrono::duration<double> duration = end - start;\n  fmt::print(\"{:.1f}\\n\", duration.count() * 1000);\n}\n",
                      "markdown": "`  std::atomic_signal_fence(std::memory_order_acq_rel);  // Clobber memory.\n  auto end = std::chrono::steady_clock::now();\n\n  // Print time in milliseconds.\n  std::chrono::duration<double> duration = end - start;\n  fmt::print(\"{:.1f}\\n\", duration.count() * 1000);\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/scan-test.cc"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 25,
                  "endLine": 167,
                  "endColumn": 30,
                  "snippet": {
                    "text": "  fmt::buffered_file f = pipe.read_end.fdopen(\"r\");\n  auto fun = [&]() {\n    int value = 0;\n    while (fmt::scan_to(f.get(), \"{}\", value)) {\n      if (value != 42) {\n        pipe.read_end.close();\n        EXPECT_EQ(value, 42);\n",
                    "rendered": {
                      "text": "  fmt::buffered_file f = pipe.read_end.fdopen(\"r\");\n  auto fun = [&]() {\n    int value = 0;\n    while (fmt::scan_to(f.get(), \"{}\", value)) {\n      if (value != 42) {\n        pipe.read_end.close();\n        EXPECT_EQ(value, 42);\n",
                      "markdown": "`  fmt::buffered_file f = pipe.read_end.fdopen(\"r\");\n  auto fun = [&]() {\n    int value = 0;\n    while (fmt::scan_to(f.get(), \"{}\", value)) {\n      if (value != 42) {\n        pipe.read_end.close();\n        EXPECT_EQ(value, 42);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/scan-test.cc"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 16,
                  "endLine": 148,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n  int n1 = 0, n2 = 0;\n  fmt::buffered_file f = pipe.read_end.fdopen(\"r\");\n  fmt::scan_to(f.get(), \"{} {}\", n1, n2);\n  EXPECT_EQ(n1, 10);\n  EXPECT_EQ(n2, 20);\n}\n",
                    "rendered": {
                      "text": "\n  int n1 = 0, n2 = 0;\n  fmt::buffered_file f = pipe.read_end.fdopen(\"r\");\n  fmt::scan_to(f.get(), \"{} {}\", n1, n2);\n  EXPECT_EQ(n1, 10);\n  EXPECT_EQ(n2, 20);\n}\n",
                      "markdown": "`\n  int n1 = 0, n2 = 0;\n  fmt::buffered_file f = pipe.read_end.fdopen(\"r\");\n  fmt::scan_to(f.get(), \"{} {}\", n1, n2);\n  EXPECT_EQ(n1, 10);\n  EXPECT_EQ(n2, 20);\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/scan-test.cc"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 15,
                  "endLine": 100,
                  "snippet": {
                    "text": "    return hex ? scan_to(ctx, \"{:x}\", n.value) : scan_to(ctx, \"{}\", n.value);\n  }\n};\n}  // namespace fmt\n\nTEST(scan_test, read_custom) {\n  EXPECT_EQ(fmt::scan<num>(\"42\", \"{}\")->value().value, 42);\n  EXPECT_EQ(fmt::scan<num>(\"2a\", \"{:x}\")->value().value, 42);\n",
                    "rendered": {
                      "text": "    return hex ? scan_to(ctx, \"{:x}\", n.value) : scan_to(ctx, \"{}\", n.value);\n  }\n};\n}  // namespace fmt\n\nTEST(scan_test, read_custom) {\n  EXPECT_EQ(fmt::scan<num>(\"42\", \"{}\")->value().value, 42);\n  EXPECT_EQ(fmt::scan<num>(\"2a\", \"{:x}\")->value().value, 42);\n",
                      "markdown": "`    return hex ? scan_to(ctx, \"{:x}\", n.value) : scan_to(ctx, \"{}\", n.value);\n  }\n};\n}  // namespace fmt\n\nTEST(scan_test, read_custom) {\n  EXPECT_EQ(fmt::scan<num>(\"42\", \"{}\")->value().value, 42);\n  EXPECT_EQ(fmt::scan<num>(\"2a\", \"{:x}\")->value().value, 42);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/scan-test.cc"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 9,
                  "endLine": 80,
                  "endColumn": 14,
                  "snippet": {
                    "text": "  int value;\n};\n\nnamespace fmt {\ntemplate <> struct scanner<num> {\n  bool hex = false;\n\n",
                    "rendered": {
                      "text": "  int value;\n};\n\nnamespace fmt {\ntemplate <> struct scanner<num> {\n  bool hex = false;\n\n",
                      "markdown": "`  int value;\n};\n\nnamespace fmt {\ntemplate <> struct scanner<num> {\n  bool hex = false;\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/printf-test.cc"
                },
                "region": {
                  "startLine": 529,
                  "startColumn": 53,
                  "endLine": 529,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\nTEST(printf_test, printf_error) {\n  auto pipe = fmt::pipe();\n  int result = fmt::fprintf(pipe.read_end.fdopen(\"r\").get(), \"test\");\n  EXPECT_LT(result, 0);\n}\n#endif\n",
                    "rendered": {
                      "text": "\nTEST(printf_test, printf_error) {\n  auto pipe = fmt::pipe();\n  int result = fmt::fprintf(pipe.read_end.fdopen(\"r\").get(), \"test\");\n  EXPECT_LT(result, 0);\n}\n#endif\n",
                      "markdown": "`\nTEST(printf_test, printf_error) {\n  auto pipe = fmt::pipe();\n  int result = fmt::fprintf(pipe.read_end.fdopen(\"r\").get(), \"test\");\n  EXPECT_LT(result, 0);\n}\n#endif\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/std.h"
                },
                "region": {
                  "startLine": 721,
                  "startColumn": 57,
                  "endLine": 721,
                  "endColumn": 62,
                  "snippet": {
                    "text": "  template <typename FormatContext>\n  auto format(std::reference_wrapper<T> ref, FormatContext& ctx) const\n      -> decltype(ctx.out()) {\n    return formatter<remove_cvref_t<T>, Char>::format(ref.get(), ctx);\n  }\n};\n\n",
                    "rendered": {
                      "text": "  template <typename FormatContext>\n  auto format(std::reference_wrapper<T> ref, FormatContext& ctx) const\n      -> decltype(ctx.out()) {\n    return formatter<remove_cvref_t<T>, Char>::format(ref.get(), ctx);\n  }\n};\n\n",
                      "markdown": "`  template <typename FormatContext>\n  auto format(std::reference_wrapper<T> ref, FormatContext& ctx) const\n      -> decltype(ctx.out()) {\n    return formatter<remove_cvref_t<T>, Char>::format(ref.get(), ctx);\n  }\n};\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/std.h"
                },
                "region": {
                  "startLine": 621,
                  "startColumn": 10,
                  "endLine": 621,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  return p.get();\n}\ntemplate <typename T> auto ptr(const std::shared_ptr<T>& p) -> const void* {\n  return p.get();\n}\n\nFMT_EXPORT\n",
                    "rendered": {
                      "text": "  return p.get();\n}\ntemplate <typename T> auto ptr(const std::shared_ptr<T>& p) -> const void* {\n  return p.get();\n}\n\nFMT_EXPORT\n",
                      "markdown": "`  return p.get();\n}\ntemplate <typename T> auto ptr(const std::shared_ptr<T>& p) -> const void* {\n  return p.get();\n}\n\nFMT_EXPORT\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/std.h"
                },
                "region": {
                  "startLine": 618,
                  "startColumn": 10,
                  "endLine": 618,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\ntemplate <typename T, typename Deleter>\nauto ptr(const std::unique_ptr<T, Deleter>& p) -> const void* {\n  return p.get();\n}\ntemplate <typename T> auto ptr(const std::shared_ptr<T>& p) -> const void* {\n  return p.get();\n",
                    "rendered": {
                      "text": "\ntemplate <typename T, typename Deleter>\nauto ptr(const std::unique_ptr<T, Deleter>& p) -> const void* {\n  return p.get();\n}\ntemplate <typename T> auto ptr(const std::shared_ptr<T>& p) -> const void* {\n  return p.get();\n",
                      "markdown": "`\ntemplate <typename T, typename Deleter>\nauto ptr(const std::unique_ptr<T, Deleter>& p) -> const void* {\n  return p.get();\n}\ntemplate <typename T> auto ptr(const std::shared_ptr<T>& p) -> const void* {\n  return p.get();\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/std.h"
                },
                "region": {
                  "startLine": 473,
                  "startColumn": 38,
                  "endLine": 473,
                  "endColumn": 43,
                  "snippet": {
                    "text": "    //  std::__cxx11::*             -> std::*\n    //  std::filesystem::__cxx11::* -> std::filesystem::*\n    if (demangled_name_view.starts_with(\"std::\")) {\n      char* begin = demangled_name_ptr.get();\n      char* to = begin + 5;  // std::\n      for (char *from = to, *end = begin + demangled_name_view.size();\n           from < end;) {\n",
                    "rendered": {
                      "text": "    //  std::__cxx11::*             -> std::*\n    //  std::filesystem::__cxx11::* -> std::filesystem::*\n    if (demangled_name_view.starts_with(\"std::\")) {\n      char* begin = demangled_name_ptr.get();\n      char* to = begin + 5;  // std::\n      for (char *from = to, *end = begin + demangled_name_view.size();\n           from < end;) {\n",
                      "markdown": "`    //  std::__cxx11::*             -> std::*\n    //  std::filesystem::__cxx11::* -> std::filesystem::*\n    if (demangled_name_view.starts_with(\"std::\")) {\n      char* begin = demangled_name_ptr.get();\n      char* to = begin + 5;  // std::\n      for (char *from = to, *end = begin + demangled_name_view.size();\n           from < end;) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/std.h"
                },
                "region": {
                  "startLine": 463,
                  "startColumn": 44,
                  "endLine": 463,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\n  string_view demangled_name_view;\n  if (demangled_name_ptr) {\n    demangled_name_view = demangled_name_ptr.get();\n\n    // Normalization of stdlib inline namespace names.\n    // libc++ inline namespaces.\n",
                    "rendered": {
                      "text": "\n  string_view demangled_name_view;\n  if (demangled_name_ptr) {\n    demangled_name_view = demangled_name_ptr.get();\n\n    // Normalization of stdlib inline namespace names.\n    // libc++ inline namespaces.\n",
                      "markdown": "`\n  string_view demangled_name_view;\n  if (demangled_name_ptr) {\n    demangled_name_view = demangled_name_ptr.get();\n\n    // Normalization of stdlib inline namespace names.\n    // libc++ inline namespaces.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/chrono.h"
                },
                "region": {
                  "startLine": 2139,
                  "startColumn": 8,
                  "endLine": 2139,
                  "endColumn": 14,
                  "snippet": {
                    "text": "  template <typename FormatContext>\n  auto format(year_month_day val, FormatContext& ctx) const\n      -> decltype(ctx.out()) {\n    auto time = std::tm();\n    time.tm_year = static_cast<int>(val.year()) - 1900;\n    time.tm_mon = static_cast<int>(static_cast<unsigned>(val.month())) - 1;\n    time.tm_mday = static_cast<int>(static_cast<unsigned>(val.day()));\n",
                    "rendered": {
                      "text": "  template <typename FormatContext>\n  auto format(year_month_day val, FormatContext& ctx) const\n      -> decltype(ctx.out()) {\n    auto time = std::tm();\n    time.tm_year = static_cast<int>(val.year()) - 1900;\n    time.tm_mon = static_cast<int>(static_cast<unsigned>(val.month())) - 1;\n    time.tm_mday = static_cast<int>(static_cast<unsigned>(val.day()));\n",
                      "markdown": "`  template <typename FormatContext>\n  auto format(year_month_day val, FormatContext& ctx) const\n      -> decltype(ctx.out()) {\n    auto time = std::tm();\n    time.tm_year = static_cast<int>(val.year()) - 1900;\n    time.tm_mon = static_cast<int>(static_cast<unsigned>(val.month())) - 1;\n    time.tm_mday = static_cast<int>(static_cast<unsigned>(val.day()));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/chrono.h"
                },
                "region": {
                  "startLine": 2114,
                  "startColumn": 8,
                  "endLine": 2114,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n  template <typename FormatContext>\n  auto format(year y, FormatContext& ctx) const -> decltype(ctx.out()) {\n    auto time = std::tm();\n    time.tm_year = static_cast<int>(y) - 1900;\n    if (use_tm_formatter_) return formatter<std::tm, Char>::format(time, ctx);\n    detail::get_locale loc(false, ctx.locale());\n",
                    "rendered": {
                      "text": "\n  template <typename FormatContext>\n  auto format(year y, FormatContext& ctx) const -> decltype(ctx.out()) {\n    auto time = std::tm();\n    time.tm_year = static_cast<int>(y) - 1900;\n    if (use_tm_formatter_) return formatter<std::tm, Char>::format(time, ctx);\n    detail::get_locale loc(false, ctx.locale());\n",
                      "markdown": "`\n  template <typename FormatContext>\n  auto format(year y, FormatContext& ctx) const -> decltype(ctx.out()) {\n    auto time = std::tm();\n    time.tm_year = static_cast<int>(y) - 1900;\n    if (use_tm_formatter_) return formatter<std::tm, Char>::format(time, ctx);\n    detail::get_locale loc(false, ctx.locale());\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/chrono.h"
                },
                "region": {
                  "startLine": 2090,
                  "startColumn": 8,
                  "endLine": 2090,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n  template <typename FormatContext>\n  auto format(month m, FormatContext& ctx) const -> decltype(ctx.out()) {\n    auto time = std::tm();\n    time.tm_mon = static_cast<int>(static_cast<unsigned>(m)) - 1;\n    if (use_tm_formatter_) return formatter<std::tm, Char>::format(time, ctx);\n    detail::get_locale loc(localized_, ctx.locale());\n",
                    "rendered": {
                      "text": "\n  template <typename FormatContext>\n  auto format(month m, FormatContext& ctx) const -> decltype(ctx.out()) {\n    auto time = std::tm();\n    time.tm_mon = static_cast<int>(static_cast<unsigned>(m)) - 1;\n    if (use_tm_formatter_) return formatter<std::tm, Char>::format(time, ctx);\n    detail::get_locale loc(localized_, ctx.locale());\n",
                      "markdown": "`\n  template <typename FormatContext>\n  auto format(month m, FormatContext& ctx) const -> decltype(ctx.out()) {\n    auto time = std::tm();\n    time.tm_mon = static_cast<int>(static_cast<unsigned>(m)) - 1;\n    if (use_tm_formatter_) return formatter<std::tm, Char>::format(time, ctx);\n    detail::get_locale loc(localized_, ctx.locale());\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/chrono.h"
                },
                "region": {
                  "startLine": 2060,
                  "startColumn": 8,
                  "endLine": 2060,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n  template <typename FormatContext>\n  auto format(day d, FormatContext& ctx) const -> decltype(ctx.out()) {\n    auto time = std::tm();\n    time.tm_mday = static_cast<int>(static_cast<unsigned>(d));\n    if (use_tm_formatter_) return formatter<std::tm, Char>::format(time, ctx);\n    detail::get_locale loc(false, ctx.locale());\n",
                    "rendered": {
                      "text": "\n  template <typename FormatContext>\n  auto format(day d, FormatContext& ctx) const -> decltype(ctx.out()) {\n    auto time = std::tm();\n    time.tm_mday = static_cast<int>(static_cast<unsigned>(d));\n    if (use_tm_formatter_) return formatter<std::tm, Char>::format(time, ctx);\n    detail::get_locale loc(false, ctx.locale());\n",
                      "markdown": "`\n  template <typename FormatContext>\n  auto format(day d, FormatContext& ctx) const -> decltype(ctx.out()) {\n    auto time = std::tm();\n    time.tm_mday = static_cast<int>(static_cast<unsigned>(d));\n    if (use_tm_formatter_) return formatter<std::tm, Char>::format(time, ctx);\n    detail::get_locale loc(false, ctx.locale());\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/chrono.h"
                },
                "region": {
                  "startLine": 2036,
                  "startColumn": 8,
                  "endLine": 2036,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n  template <typename FormatContext>\n  auto format(weekday wd, FormatContext& ctx) const -> decltype(ctx.out()) {\n    auto time = std::tm();\n    time.tm_wday = static_cast<int>(wd.c_encoding());\n    if (use_tm_formatter_) return formatter<std::tm, Char>::format(time, ctx);\n    detail::get_locale loc(localized_, ctx.locale());\n",
                    "rendered": {
                      "text": "\n  template <typename FormatContext>\n  auto format(weekday wd, FormatContext& ctx) const -> decltype(ctx.out()) {\n    auto time = std::tm();\n    time.tm_wday = static_cast<int>(wd.c_encoding());\n    if (use_tm_formatter_) return formatter<std::tm, Char>::format(time, ctx);\n    detail::get_locale loc(localized_, ctx.locale());\n",
                      "markdown": "`\n  template <typename FormatContext>\n  auto format(weekday wd, FormatContext& ctx) const -> decltype(ctx.out()) {\n    auto time = std::tm();\n    time.tm_wday = static_cast<int>(wd.c_encoding());\n    if (use_tm_formatter_) return formatter<std::tm, Char>::format(time, ctx);\n    detail::get_locale loc(localized_, ctx.locale());\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/chrono.h"
                },
                "region": {
                  "startLine": 1902,
                  "startColumn": 8,
                  "endLine": 1902,
                  "endColumn": 14,
                  "snippet": {
                    "text": "      }\n      return;\n    }\n    auto time = tm();\n    time.tm_sec = to_nonnegative_int(second(), 60);\n    format_tm(time, &tm_writer_type::on_second, ns, pad);\n  }\n",
                    "rendered": {
                      "text": "      }\n      return;\n    }\n    auto time = tm();\n    time.tm_sec = to_nonnegative_int(second(), 60);\n    format_tm(time, &tm_writer_type::on_second, ns, pad);\n  }\n",
                      "markdown": "`      }\n      return;\n    }\n    auto time = tm();\n    time.tm_sec = to_nonnegative_int(second(), 60);\n    format_tm(time, &tm_writer_type::on_second, ns, pad);\n  }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/chrono.h"
                },
                "region": {
                  "startLine": 1877,
                  "startColumn": 8,
                  "endLine": 1877,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    if (handle_nan_inf()) return;\n\n    if (ns == numeric_system::standard) return write(minute(), 2, pad);\n    auto time = tm();\n    time.tm_min = to_nonnegative_int(minute(), 60);\n    format_tm(time, &tm_writer_type::on_minute, ns, pad);\n  }\n",
                    "rendered": {
                      "text": "    if (handle_nan_inf()) return;\n\n    if (ns == numeric_system::standard) return write(minute(), 2, pad);\n    auto time = tm();\n    time.tm_min = to_nonnegative_int(minute(), 60);\n    format_tm(time, &tm_writer_type::on_minute, ns, pad);\n  }\n",
                      "markdown": "`    if (handle_nan_inf()) return;\n\n    if (ns == numeric_system::standard) return write(minute(), 2, pad);\n    auto time = tm();\n    time.tm_min = to_nonnegative_int(minute(), 60);\n    format_tm(time, &tm_writer_type::on_minute, ns, pad);\n  }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/chrono.h"
                },
                "region": {
                  "startLine": 1868,
                  "startColumn": 8,
                  "endLine": 1868,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    if (handle_nan_inf()) return;\n\n    if (ns == numeric_system::standard) return write(hour12(), 2, pad);\n    auto time = tm();\n    time.tm_hour = to_nonnegative_int(hour12(), 12);\n    format_tm(time, &tm_writer_type::on_12_hour, ns, pad);\n  }\n",
                    "rendered": {
                      "text": "    if (handle_nan_inf()) return;\n\n    if (ns == numeric_system::standard) return write(hour12(), 2, pad);\n    auto time = tm();\n    time.tm_hour = to_nonnegative_int(hour12(), 12);\n    format_tm(time, &tm_writer_type::on_12_hour, ns, pad);\n  }\n",
                      "markdown": "`    if (handle_nan_inf()) return;\n\n    if (ns == numeric_system::standard) return write(hour12(), 2, pad);\n    auto time = tm();\n    time.tm_hour = to_nonnegative_int(hour12(), 12);\n    format_tm(time, &tm_writer_type::on_12_hour, ns, pad);\n  }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/chrono.h"
                },
                "region": {
                  "startLine": 1859,
                  "startColumn": 8,
                  "endLine": 1859,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    if (handle_nan_inf()) return;\n\n    if (ns == numeric_system::standard) return write(hour(), 2, pad);\n    auto time = tm();\n    time.tm_hour = to_nonnegative_int(hour(), 24);\n    format_tm(time, &tm_writer_type::on_24_hour, ns, pad);\n  }\n",
                    "rendered": {
                      "text": "    if (handle_nan_inf()) return;\n\n    if (ns == numeric_system::standard) return write(hour(), 2, pad);\n    auto time = tm();\n    time.tm_hour = to_nonnegative_int(hour(), 24);\n    format_tm(time, &tm_writer_type::on_24_hour, ns, pad);\n  }\n",
                      "markdown": "`    if (handle_nan_inf()) return;\n\n    if (ns == numeric_system::standard) return write(hour(), 2, pad);\n    auto time = tm();\n    time.tm_hour = to_nonnegative_int(hour(), 24);\n    format_tm(time, &tm_writer_type::on_24_hour, ns, pad);\n  }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/chrono.h"
                },
                "region": {
                  "startLine": 1781,
                  "startColumn": 8,
                  "endLine": 1781,
                  "endColumn": 14,
                  "snippet": {
                    "text": "  auto second() const -> Rep { return static_cast<Rep>(mod(s.count(), 60)); }\n\n  auto time() const -> std::tm {\n    auto time = std::tm();\n    time.tm_hour = to_nonnegative_int(hour(), 24);\n    time.tm_min = to_nonnegative_int(minute(), 60);\n    time.tm_sec = to_nonnegative_int(second(), 60);\n",
                    "rendered": {
                      "text": "  auto second() const -> Rep { return static_cast<Rep>(mod(s.count(), 60)); }\n\n  auto time() const -> std::tm {\n    auto time = std::tm();\n    time.tm_hour = to_nonnegative_int(hour(), 24);\n    time.tm_min = to_nonnegative_int(minute(), 60);\n    time.tm_sec = to_nonnegative_int(second(), 60);\n",
                      "markdown": "`  auto second() const -> Rep { return static_cast<Rep>(mod(s.count(), 60)); }\n\n  auto time() const -> std::tm {\n    auto time = std::tm();\n    time.tm_hour = to_nonnegative_int(hour(), 24);\n    time.tm_min = to_nonnegative_int(minute(), 60);\n    time.tm_sec = to_nonnegative_int(second(), 60);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/chrono.h"
                },
                "region": {
                  "startLine": 1636,
                  "startColumn": 12,
                  "endLine": 1636,
                  "endColumn": 18,
                  "snippet": {
                    "text": "  const auto d_as_whole_seconds =\n      detail::duration_cast<std::chrono::seconds>(d_as_common);\n  // this conversion should be nonproblematic\n  const auto diff = d_as_common - d_as_whole_seconds;\n  const auto ms =\n      detail::duration_cast<std::chrono::duration<Rep, std::milli>>(diff);\n  return ms;\n",
                    "rendered": {
                      "text": "  const auto d_as_whole_seconds =\n      detail::duration_cast<std::chrono::seconds>(d_as_common);\n  // this conversion should be nonproblematic\n  const auto diff = d_as_common - d_as_whole_seconds;\n  const auto ms =\n      detail::duration_cast<std::chrono::duration<Rep, std::milli>>(diff);\n  return ms;\n",
                      "markdown": "`  const auto d_as_whole_seconds =\n      detail::duration_cast<std::chrono::seconds>(d_as_common);\n  // this conversion should be nonproblematic\n  const auto diff = d_as_common - d_as_whole_seconds;\n  const auto ms =\n      detail::duration_cast<std::chrono::duration<Rep, std::milli>>(diff);\n  return ms;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/C++.sublime-syntax"
                },
                "region": {
                  "startLine": 1208,
                  "startColumn": 64,
                  "endLine": 1208,
                  "endColumn": 68,
                  "snippet": {
                    "text": "  data-structures-union-definition-after-identifier:\n    - meta_content_scope: meta.union.c++\n    - include: data-structures-definition-common-begin\n    # No matching of identifiers since they should all be macros at this point\n    # Unions don't support base classes\n    - include: angle-brackets\n    - match: '\\{'\n",
                    "rendered": {
                      "text": "  data-structures-union-definition-after-identifier:\n    - meta_content_scope: meta.union.c++\n    - include: data-structures-definition-common-begin\n    # No matching of identifiers since they should all be macros at this point\n    # Unions don't support base classes\n    - include: angle-brackets\n    - match: '\\{'\n",
                      "markdown": "`  data-structures-union-definition-after-identifier:\n    - meta_content_scope: meta.union.c++\n    - include: data-structures-definition-common-begin\n    # No matching of identifiers since they should all be macros at this point\n    # Unions don't support base classes\n    - include: angle-brackets\n    - match: '\\{'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/C++.sublime-syntax"
                },
                "region": {
                  "startLine": 1179,
                  "startColumn": 64,
                  "endLine": 1179,
                  "endColumn": 68,
                  "snippet": {
                    "text": "  data-structures-enum-definition-after-identifier:\n    - meta_content_scope: meta.enum.c++\n    - include: data-structures-definition-common-begin\n    # No matching of identifiers since they should all be macros at this point\n    - include: data-structures-definition-common-end\n    - match: '\\{'\n      scope: meta.block.c++ punctuation.section.block.begin.c++\n",
                    "rendered": {
                      "text": "  data-structures-enum-definition-after-identifier:\n    - meta_content_scope: meta.enum.c++\n    - include: data-structures-definition-common-begin\n    # No matching of identifiers since they should all be macros at this point\n    - include: data-structures-definition-common-end\n    - match: '\\{'\n      scope: meta.block.c++ punctuation.section.block.begin.c++\n",
                      "markdown": "`  data-structures-enum-definition-after-identifier:\n    - meta_content_scope: meta.enum.c++\n    - include: data-structures-definition-common-begin\n    # No matching of identifiers since they should all be macros at this point\n    - include: data-structures-definition-common-end\n    - match: '\\{'\n      scope: meta.block.c++ punctuation.section.block.begin.c++\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/C++.sublime-syntax"
                },
                "region": {
                  "startLine": 1151,
                  "startColumn": 64,
                  "endLine": 1151,
                  "endColumn": 68,
                  "snippet": {
                    "text": "  data-structures-struct-definition-after-identifier:\n    - meta_content_scope: meta.struct.c++\n    - include: data-structures-definition-common-begin\n    # No matching of identifiers since they should all be macros at this point\n    - include: data-structures-definition-common-end\n    - match: '\\{'\n      scope: meta.block.c++ punctuation.section.block.begin.c++\n",
                    "rendered": {
                      "text": "  data-structures-struct-definition-after-identifier:\n    - meta_content_scope: meta.struct.c++\n    - include: data-structures-definition-common-begin\n    # No matching of identifiers since they should all be macros at this point\n    - include: data-structures-definition-common-end\n    - match: '\\{'\n      scope: meta.block.c++ punctuation.section.block.begin.c++\n",
                      "markdown": "`  data-structures-struct-definition-after-identifier:\n    - meta_content_scope: meta.struct.c++\n    - include: data-structures-definition-common-begin\n    # No matching of identifiers since they should all be macros at this point\n    - include: data-structures-definition-common-end\n    - match: '\\{'\n      scope: meta.block.c++ punctuation.section.block.begin.c++\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/C++.sublime-syntax"
                },
                "region": {
                  "startLine": 1123,
                  "startColumn": 64,
                  "endLine": 1123,
                  "endColumn": 68,
                  "snippet": {
                    "text": "  data-structures-class-definition-after-identifier:\n    - meta_content_scope: meta.class.c++\n    - include: data-structures-definition-common-begin\n    # No matching of identifiers since they should all be macros at this point\n    - include: data-structures-definition-common-end\n    - match: '\\{'\n      scope: meta.block.c++ punctuation.section.block.begin.c++\n",
                    "rendered": {
                      "text": "  data-structures-class-definition-after-identifier:\n    - meta_content_scope: meta.class.c++\n    - include: data-structures-definition-common-begin\n    # No matching of identifiers since they should all be macros at this point\n    - include: data-structures-definition-common-end\n    - match: '\\{'\n      scope: meta.block.c++ punctuation.section.block.begin.c++\n",
                      "markdown": "`  data-structures-class-definition-after-identifier:\n    - meta_content_scope: meta.class.c++\n    - include: data-structures-definition-common-begin\n    # No matching of identifiers since they should all be macros at this point\n    - include: data-structures-definition-common-end\n    - match: '\\{'\n      scope: meta.block.c++ punctuation.section.block.begin.c++\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/C++.sublime-syntax"
                },
                "region": {
                  "startLine": 846,
                  "startColumn": 57,
                  "endLine": 846,
                  "endColumn": 61,
                  "snippet": {
                    "text": "          pop: true\n        - include: function-trailing-return-type\n\n  ## Detection of function and data structure definitions at the global level\n\n  global-modifier:\n    - include: comments\n",
                    "rendered": {
                      "text": "          pop: true\n        - include: function-trailing-return-type\n\n  ## Detection of function and data structure definitions at the global level\n\n  global-modifier:\n    - include: comments\n",
                      "markdown": "`          pop: true\n        - include: function-trailing-return-type\n\n  ## Detection of function and data structure definitions at the global level\n\n  global-modifier:\n    - include: comments\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/C++.sublime-syntax"
                },
                "region": {
                  "startLine": 576,
                  "startColumn": 42,
                  "endLine": 576,
                  "endColumn": 46,
                  "snippet": {
                    "text": "      scope: storage.type.template.c++\n      push:\n        - meta_scope: meta.template.c++\n        # Explicitly include comments here at the top, in order to NOT match the\n        # \\S lookahead in the case of comments.\n        - include: comments\n        - match: <\n",
                    "rendered": {
                      "text": "      scope: storage.type.template.c++\n      push:\n        - meta_scope: meta.template.c++\n        # Explicitly include comments here at the top, in order to NOT match the\n        # \\S lookahead in the case of comments.\n        - include: comments\n        - match: <\n",
                      "markdown": "`      scope: storage.type.template.c++\n      push:\n        - meta_scope: meta.template.c++\n        # Explicitly include comments here at the top, in order to NOT match the\n        # \\S lookahead in the case of comments.\n        - include: comments\n        - match: <\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/C++.sublime-syntax"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 48,
                  "endLine": 84,
                  "endColumn": 57,
                  "snippet": {
                    "text": "  #############################################################################\n\n  unique-late-expressions:\n    # This is highlighted after all of the other control keywords\n    # to allow operator overloading to be lexed properly\n    - match: \\boperator\\b\n      scope: keyword.control.c++\n",
                    "rendered": {
                      "text": "  #############################################################################\n\n  unique-late-expressions:\n    # This is highlighted after all of the other control keywords\n    # to allow operator overloading to be lexed properly\n    - match: \\boperator\\b\n      scope: keyword.control.c++\n",
                      "markdown": "`  #############################################################################\n\n  unique-late-expressions:\n    # This is highlighted after all of the other control keywords\n    # to allow operator overloading to be lexed properly\n    - match: \\boperator\\b\n      scope: keyword.control.c++\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/C++.sublime-syntax"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 79,
                  "endLine": 24,
                  "endColumn": 83,
                  "snippet": {
                    "text": "scope: source.c++\nvariables:\n  identifier: \\b[[:alpha:]_][[:alnum:]_]*\\b # upper and lowercase\n  macro_identifier: \\b[[:upper:]_][[:upper:][:digit:]_]{2,}\\b # only uppercase, at least 3 chars\n  path_lookahead: '(?:::\\s*)?(?:{{identifier}}\\s*::\\s*)*(?:template\\s+)?{{identifier}}'\n  operator_method_name: '\\boperator\\s*(?:[-+*/%^&|~!=<>]|[-+*/%^&|=!<>]=|<<=?|>>=?|&&|\\|\\||\\+\\+|--|,|->\\*?|\\(\\)|\\[\\]|\"\"\\s*{{identifier}})'\n  casts: 'const_cast|dynamic_cast|reinterpret_cast|static_cast'\n",
                    "rendered": {
                      "text": "scope: source.c++\nvariables:\n  identifier: \\b[[:alpha:]_][[:alnum:]_]*\\b # upper and lowercase\n  macro_identifier: \\b[[:upper:]_][[:upper:][:digit:]_]{2,}\\b # only uppercase, at least 3 chars\n  path_lookahead: '(?:::\\s*)?(?:{{identifier}}\\s*::\\s*)*(?:template\\s+)?{{identifier}}'\n  operator_method_name: '\\boperator\\s*(?:[-+*/%^&|~!=<>]|[-+*/%^&|=!<>]=|<<=?|>>=?|&&|\\|\\||\\+\\+|--|,|->\\*?|\\(\\)|\\[\\]|\"\"\\s*{{identifier}})'\n  casts: 'const_cast|dynamic_cast|reinterpret_cast|static_cast'\n",
                      "markdown": "`scope: source.c++\nvariables:\n  identifier: \\b[[:alpha:]_][[:alnum:]_]*\\b # upper and lowercase\n  macro_identifier: \\b[[:upper:]_][[:upper:][:digit:]_]{2,}\\b # only uppercase, at least 3 chars\n  path_lookahead: '(?:::\\s*)?(?:{{identifier}}\\s*::\\s*)*(?:template\\s+)?{{identifier}}'\n  operator_method_name: '\\boperator\\s*(?:[-+*/%^&|~!=<>]|[-+*/%^&|=!<>]=|<<=?|>>=?|&&|\\|\\||\\+\\+|--|,|->\\*?|\\(\\)|\\[\\]|\"\"\\s*{{identifier}})'\n  casts: 'const_cast|dynamic_cast|reinterpret_cast|static_cast'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/C++.sublime-syntax"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 3,
                  "endLine": 15,
                  "snippet": {
                    "text": "  - c++\n  - C\n  - h\n  - hh\n  - hpp\n  - hxx\n  - h++\n  - inl\n",
                    "rendered": {
                      "text": "  - c++\n  - C\n  - h\n  - hh\n  - hpp\n  - hxx\n  - h++\n  - inl\n",
                      "markdown": "`  - c++\n  - C\n  - h\n  - hh\n  - hpp\n  - hxx\n  - h++\n  - inl\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/C++.sublime-syntax"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 3,
                  "endLine": 10,
                  "snippet": {
                    "text": "file_extensions:\n  - cpp\n  - cc\n  - cp\n  - cxx\n  - c++\n  - C\n  - h\n",
                    "rendered": {
                      "text": "file_extensions:\n  - cpp\n  - cc\n  - cp\n  - cxx\n  - c++\n  - C\n  - h\n",
                      "markdown": "`file_extensions:\n  - cpp\n  - cc\n  - cp\n  - cxx\n  - c++\n  - C\n  - h\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/check-commits"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 13,
                  "endLine": 14,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\nargs = docopt.docopt(__doc__)\nstart = args.get('<start>')\nsource = args.get('<source>')\n\ncwd = os.getcwd()\n\n",
                    "rendered": {
                      "text": "\nargs = docopt.docopt(__doc__)\nstart = args.get('<start>')\nsource = args.get('<source>')\n\ncwd = os.getcwd()\n\n",
                      "markdown": "`\nargs = docopt.docopt(__doc__)\nstart = args.get('<start>')\nsource = args.get('<source>')\n\ncwd = os.getcwd()\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/check-commits"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 12,
                  "endLine": 13,
                  "endColumn": 17,
                  "snippet": {
                    "text": "from subprocess import check_call, check_output, run\n\nargs = docopt.docopt(__doc__)\nstart = args.get('<start>')\nsource = args.get('<source>')\n\ncwd = os.getcwd()\n",
                    "rendered": {
                      "text": "from subprocess import check_call, check_output, run\n\nargs = docopt.docopt(__doc__)\nstart = args.get('<start>')\nsource = args.get('<source>')\n\ncwd = os.getcwd()\n",
                      "markdown": "`from subprocess import check_call, check_output, run\n\nargs = docopt.docopt(__doc__)\nstart = args.get('<start>')\nsource = args.get('<source>')\n\ncwd = os.getcwd()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/mkdocs"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 10,
                  "endLine": 14,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n# Set PYTHONPATH for the mkdocstrings handler.\nenv = os.environ.copy()\npath = env.get('PYTHONPATH')\nenv['PYTHONPATH'] = \\\n  (path + ':' if path else '') + os.path.join(support_dir, 'python')\n\n",
                    "rendered": {
                      "text": "\n# Set PYTHONPATH for the mkdocstrings handler.\nenv = os.environ.copy()\npath = env.get('PYTHONPATH')\nenv['PYTHONPATH'] = \\\n  (path + ':' if path else '') + os.path.join(support_dir, 'python')\n\n",
                      "markdown": "`\n# Set PYTHONPATH for the mkdocstrings handler.\nenv = os.environ.copy()\npath = env.get('PYTHONPATH')\nenv['PYTHONPATH'] = \\\n  (path + ':' if path else '') + os.path.join(support_dir, 'python')\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/mkdocs"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 7,
                  "endLine": 14,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n# Set PYTHONPATH for the mkdocstrings handler.\nenv = os.environ.copy()\npath = env.get('PYTHONPATH')\nenv['PYTHONPATH'] = \\\n  (path + ':' if path else '') + os.path.join(support_dir, 'python')\n\n",
                    "rendered": {
                      "text": "\n# Set PYTHONPATH for the mkdocstrings handler.\nenv = os.environ.copy()\npath = env.get('PYTHONPATH')\nenv['PYTHONPATH'] = \\\n  (path + ':' if path else '') + os.path.join(support_dir, 'python')\n\n",
                      "markdown": "`\n# Set PYTHONPATH for the mkdocstrings handler.\nenv = os.environ.copy()\npath = env.get('PYTHONPATH')\nenv['PYTHONPATH'] = \\\n  (path + ':' if path else '') + os.path.join(support_dir, 'python')\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/mkdocs"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 46,
                  "endLine": 13,
                  "endColumn": 4,
                  "snippet": {
                    "text": "support_dir = os.path.dirname(os.path.normpath(__file__))\nbuild_dir = os.path.join(os.path.dirname(support_dir), 'build')\n\n# Set PYTHONPATH for the mkdocstrings handler.\nenv = os.environ.copy()\npath = env.get('PYTHONPATH')\nenv['PYTHONPATH'] = \\\n  (path + ':' if path else '') + os.path.join(support_dir, 'python')\n",
                    "rendered": {
                      "text": "support_dir = os.path.dirname(os.path.normpath(__file__))\nbuild_dir = os.path.join(os.path.dirname(support_dir), 'build')\n\n# Set PYTHONPATH for the mkdocstrings handler.\nenv = os.environ.copy()\npath = env.get('PYTHONPATH')\nenv['PYTHONPATH'] = \\\n  (path + ':' if path else '') + os.path.join(support_dir, 'python')\n",
                      "markdown": "`support_dir = os.path.dirname(os.path.normpath(__file__))\nbuild_dir = os.path.join(os.path.dirname(support_dir), 'build')\n\n# Set PYTHONPATH for the mkdocstrings handler.\nenv = os.environ.copy()\npath = env.get('PYTHONPATH')\nenv['PYTHONPATH'] = \\\n  (path + ':' if path else '') + os.path.join(support_dir, 'python')\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/mkdocs"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 3,
                  "endLine": 2,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#!/usr/bin/env python3\n# A script to invoke mkdocs with the correct environment.\n# Additionally supports deploying via mike:\n#   ./mkdocs deploy [mike-deploy-options]\n\n",
                    "rendered": {
                      "text": "#!/usr/bin/env python3\n# A script to invoke mkdocs with the correct environment.\n# Additionally supports deploying via mike:\n#   ./mkdocs deploy [mike-deploy-options]\n\n",
                      "markdown": "`#!/usr/bin/env python3\n# A script to invoke mkdocs with the correct environment.\n# Additionally supports deploying via mike:\n#   ./mkdocs deploy [mike-deploy-options]\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/index.md"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 68,
                  "endLine": 17,
                  "snippet": {
                    "text": "<p>\n  Inspired by Python's formatting facility, {fmt} provides a safe replacement\n  for the <code>printf</code> family of functions. Errors in format strings,\n  which are a common source of vulnerabilities in C, are <b>reported at\n  compile time</b>. For example:\n\n  <pre><code class=\"language-cpp\"\n  >fmt::format(\"{:d}\", \"I am not a number\");</code></pre>\n",
                    "rendered": {
                      "text": "<p>\n  Inspired by Python's formatting facility, {fmt} provides a safe replacement\n  for the <code>printf</code> family of functions. Errors in format strings,\n  which are a common source of vulnerabilities in C, are <b>reported at\n  compile time</b>. For example:\n\n  <pre><code class=\"language-cpp\"\n  >fmt::format(\"{:d}\", \"I am not a number\");</code></pre>\n",
                      "markdown": "`<p>\n  Inspired by Python's formatting facility, {fmt} provides a safe replacement\n  for the <code>printf</code> family of functions. Errors in format strings,\n  which are a common source of vulnerabilities in C, are <b>reported at\n  compile time</b>. For example:\n\n  <pre><code class=\"language-cpp\"\n  >fmt::format(\"{:d}\", \"I am not a number\");</code></pre>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/doc/index.md"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 17,
                  "endLine": 139,
                  "endColumn": 22,
                  "snippet": {
                    "text": "<div class=\"feature\">\n<h2>Open source</h2>\n<p>\n  {fmt} is in the top hundred open-source C++ libraries on GitHub and has\n  <a href=\"https://github.com/fmtlib/fmt/graphs/contributors\">hundreds of\n  all-time contributors</a>.\n</p>\n",
                    "rendered": {
                      "text": "<div class=\"feature\">\n<h2>Open source</h2>\n<p>\n  {fmt} is in the top hundred open-source C++ libraries on GitHub and has\n  <a href=\"https://github.com/fmtlib/fmt/graphs/contributors\">hundreds of\n  all-time contributors</a>.\n</p>\n",
                      "markdown": "`<div class=\"feature\">\n<h2>Open source</h2>\n<p>\n  {fmt} is in the top hundred open-source C++ libraries on GitHub and has\n  <a href=\"https://github.com/fmtlib/fmt/graphs/contributors\">hundreds of\n  all-time contributors</a>.\n</p>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 2508,
                  "startColumn": 30,
                  "endLine": 2508,
                  "endColumn": 35,
                  "snippet": {
                    "text": "  write_end.close();\n  auto read_end = pipe.read_end.fdopen(\"r\");\n  int n = 0;\n  int result = fscanf(read_end.get(), \"%d\", &n);\n  (void)result;\n  EXPECT_EQ(n, 42);\n#endif\n",
                    "rendered": {
                      "text": "  write_end.close();\n  auto read_end = pipe.read_end.fdopen(\"r\");\n  int n = 0;\n  int result = fscanf(read_end.get(), \"%d\", &n);\n  (void)result;\n  EXPECT_EQ(n, 42);\n#endif\n",
                      "markdown": "`  write_end.close();\n  auto read_end = pipe.read_end.fdopen(\"r\");\n  int n = 0;\n  int result = fscanf(read_end.get(), \"%d\", &n);\n  (void)result;\n  EXPECT_EQ(n, 42);\n#endif\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 2504,
                  "startColumn": 23,
                  "endLine": 2504,
                  "endColumn": 28,
                  "snippet": {
                    "text": "#if FMT_USE_FCNTL\n  auto pipe = fmt::pipe();\n  auto write_end = pipe.write_end.fdopen(\"w\");\n  fmt::writer(write_end.get()).print(\"42\");\n  write_end.close();\n  auto read_end = pipe.read_end.fdopen(\"r\");\n  int n = 0;\n",
                    "rendered": {
                      "text": "#if FMT_USE_FCNTL\n  auto pipe = fmt::pipe();\n  auto write_end = pipe.write_end.fdopen(\"w\");\n  fmt::writer(write_end.get()).print(\"42\");\n  write_end.close();\n  auto read_end = pipe.read_end.fdopen(\"r\");\n  int n = 0;\n",
                      "markdown": "`#if FMT_USE_FCNTL\n  auto pipe = fmt::pipe();\n  auto write_end = pipe.write_end.fdopen(\"w\");\n  fmt::writer(write_end.get()).print(\"42\");\n  write_end.close();\n  auto read_end = pipe.read_end.fdopen(\"r\");\n  int n = 0;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1884,
                  "startColumn": 44,
                  "endLine": 1884,
                  "endColumn": 49,
                  "snippet": {
                    "text": "    for (int i = 0; i < 1000000; ++i) d.value += 10;\n    fmt::print(f.get(), \"done\\n\");\n  });\n  for (int i = 0; i < 100; ++i) fmt::print(f.get(), \"{}\", d);\n  t.join();\n}\n\n",
                    "rendered": {
                      "text": "    for (int i = 0; i < 1000000; ++i) d.value += 10;\n    fmt::print(f.get(), \"done\\n\");\n  });\n  for (int i = 0; i < 100; ++i) fmt::print(f.get(), \"{}\", d);\n  t.join();\n}\n\n",
                      "markdown": "`    for (int i = 0; i < 1000000; ++i) d.value += 10;\n    fmt::print(f.get(), \"done\\n\");\n  });\n  for (int i = 0; i < 100; ++i) fmt::print(f.get(), \"{}\", d);\n  t.join();\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1882,
                  "startColumn": 16,
                  "endLine": 1882,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    fmt::print(f.get(), \"start t\\n\");\n    std::lock_guard<std::mutex> lock(d.mutex);\n    for (int i = 0; i < 1000000; ++i) d.value += 10;\n    fmt::print(f.get(), \"done\\n\");\n  });\n  for (int i = 0; i < 100; ++i) fmt::print(f.get(), \"{}\", d);\n  t.join();\n",
                    "rendered": {
                      "text": "    fmt::print(f.get(), \"start t\\n\");\n    std::lock_guard<std::mutex> lock(d.mutex);\n    for (int i = 0; i < 1000000; ++i) d.value += 10;\n    fmt::print(f.get(), \"done\\n\");\n  });\n  for (int i = 0; i < 100; ++i) fmt::print(f.get(), \"{}\", d);\n  t.join();\n",
                      "markdown": "`    fmt::print(f.get(), \"start t\\n\");\n    std::lock_guard<std::mutex> lock(d.mutex);\n    for (int i = 0; i < 1000000; ++i) d.value += 10;\n    fmt::print(f.get(), \"done\\n\");\n  });\n  for (int i = 0; i < 100; ++i) fmt::print(f.get(), \"{}\", d);\n  t.join();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1879,
                  "startColumn": 16,
                  "endLine": 1879,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  }\n  deadlockable d;\n  auto t = std::thread([&]() {\n    fmt::print(f.get(), \"start t\\n\");\n    std::lock_guard<std::mutex> lock(d.mutex);\n    for (int i = 0; i < 1000000; ++i) d.value += 10;\n    fmt::print(f.get(), \"done\\n\");\n",
                    "rendered": {
                      "text": "  }\n  deadlockable d;\n  auto t = std::thread([&]() {\n    fmt::print(f.get(), \"start t\\n\");\n    std::lock_guard<std::mutex> lock(d.mutex);\n    for (int i = 0; i < 1000000; ++i) d.value += 10;\n    fmt::print(f.get(), \"done\\n\");\n",
                      "markdown": "`  }\n  deadlockable d;\n  auto t = std::thread([&]() {\n    fmt::print(f.get(), \"start t\\n\");\n    std::lock_guard<std::mutex> lock(d.mutex);\n    for (int i = 0; i < 1000000; ++i) d.value += 10;\n    fmt::print(f.get(), \"done\\n\");\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1841,
                  "startColumn": 32,
                  "endLine": 1841,
                  "endColumn": 37,
                  "snippet": {
                    "text": "  auto read_end = pipe.read_end.fdopen(\"r\");\n  std::thread reader([&]() {\n    int n = 0;\n    int result = fscanf(read_end.get(), \"%d\", &n);\n    (void)result;\n    EXPECT_EQ(n, 42);\n  });\n",
                    "rendered": {
                      "text": "  auto read_end = pipe.read_end.fdopen(\"r\");\n  std::thread reader([&]() {\n    int n = 0;\n    int result = fscanf(read_end.get(), \"%d\", &n);\n    (void)result;\n    EXPECT_EQ(n, 42);\n  });\n",
                      "markdown": "`  auto read_end = pipe.read_end.fdopen(\"r\");\n  std::thread reader([&]() {\n    int n = 0;\n    int result = fscanf(read_end.get(), \"%d\", &n);\n    (void)result;\n    EXPECT_EQ(n, 42);\n  });\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1830,
                  "startColumn": 19,
                  "endLine": 1830,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n  int write_fd = pipe.write_end.descriptor();\n  auto write_end = pipe.write_end.fdopen(\"w\");\n  setvbuf(write_end.get(), nullptr, _IOLBF, 4096);\n  write_end.print(\"42\\n\");\n  close(write_fd);\n  try {\n",
                    "rendered": {
                      "text": "\n  int write_fd = pipe.write_end.descriptor();\n  auto write_end = pipe.write_end.fdopen(\"w\");\n  setvbuf(write_end.get(), nullptr, _IOLBF, 4096);\n  write_end.print(\"42\\n\");\n  close(write_fd);\n  try {\n",
                      "markdown": "`\n  int write_fd = pipe.write_end.descriptor();\n  auto write_end = pipe.write_end.fdopen(\"w\");\n  setvbuf(write_end.get(), nullptr, _IOLBF, 4096);\n  write_end.print(\"42\\n\");\n  close(write_fd);\n  try {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 418,
                  "startColumn": 45,
                  "endLine": 418,
                  "endColumn": 50,
                  "snippet": {
                    "text": "  {\n    basic_memory_buffer<char, 10, test_allocator> buffer2(\n        (test_allocator(&alloc)));\n    EXPECT_EQ(&alloc, buffer2.get_allocator().get());\n    size_t size = 2 * fmt::inline_buffer_size;\n    EXPECT_CALL(alloc, allocate(size)).WillOnce(Return(&mem));\n    buffer2.reserve(size);\n",
                    "rendered": {
                      "text": "  {\n    basic_memory_buffer<char, 10, test_allocator> buffer2(\n        (test_allocator(&alloc)));\n    EXPECT_EQ(&alloc, buffer2.get_allocator().get());\n    size_t size = 2 * fmt::inline_buffer_size;\n    EXPECT_CALL(alloc, allocate(size)).WillOnce(Return(&mem));\n    buffer2.reserve(size);\n",
                      "markdown": "`  {\n    basic_memory_buffer<char, 10, test_allocator> buffer2(\n        (test_allocator(&alloc)));\n    EXPECT_EQ(&alloc, buffer2.get_allocator().get());\n    size_t size = 2 * fmt::inline_buffer_size;\n    EXPECT_CALL(alloc, allocate(size)).WillOnce(Return(&mem));\n    buffer2.reserve(size);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 412,
                  "startColumn": 43,
                  "endLine": 412,
                  "endColumn": 48,
                  "snippet": {
                    "text": "TEST(memory_buffer_test, allocator) {\n  using test_allocator = allocator_ref<mock_allocator<char>>;\n  basic_memory_buffer<char, 10, test_allocator> buffer;\n  EXPECT_EQ(nullptr, buffer.get_allocator().get());\n  StrictMock<mock_allocator<char>> alloc;\n  char mem;\n  {\n",
                    "rendered": {
                      "text": "TEST(memory_buffer_test, allocator) {\n  using test_allocator = allocator_ref<mock_allocator<char>>;\n  basic_memory_buffer<char, 10, test_allocator> buffer;\n  EXPECT_EQ(nullptr, buffer.get_allocator().get());\n  StrictMock<mock_allocator<char>> alloc;\n  char mem;\n  {\n",
                      "markdown": "`TEST(memory_buffer_test, allocator) {\n  using test_allocator = allocator_ref<mock_allocator<char>>;\n  basic_memory_buffer<char, 10, test_allocator> buffer;\n  EXPECT_EQ(nullptr, buffer.get_allocator().get());\n  StrictMock<mock_allocator<char>> alloc;\n  char mem;\n  {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 327,
                  "startColumn": 48,
                  "endLine": 327,
                  "endColumn": 53,
                  "snippet": {
                    "text": "        EXPECT_EQ(5u, buffer2.capacity());\n        // Move should transfer allocator.\n        EXPECT_EQ(nullptr, buffer.get_allocator().get());\n        EXPECT_EQ(alloc, buffer2.get_allocator().get());\n      };\n\n  auto alloc = std::allocator<char>();\n",
                    "rendered": {
                      "text": "        EXPECT_EQ(5u, buffer2.capacity());\n        // Move should transfer allocator.\n        EXPECT_EQ(nullptr, buffer.get_allocator().get());\n        EXPECT_EQ(alloc, buffer2.get_allocator().get());\n      };\n\n  auto alloc = std::allocator<char>();\n",
                      "markdown": "`        EXPECT_EQ(5u, buffer2.capacity());\n        // Move should transfer allocator.\n        EXPECT_EQ(nullptr, buffer.get_allocator().get());\n        EXPECT_EQ(alloc, buffer2.get_allocator().get());\n      };\n\n  auto alloc = std::allocator<char>();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 326,
                  "startColumn": 49,
                  "endLine": 326,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        EXPECT_EQ(str, std::string(&buffer2[0], buffer2.size()));\n        EXPECT_EQ(5u, buffer2.capacity());\n        // Move should transfer allocator.\n        EXPECT_EQ(nullptr, buffer.get_allocator().get());\n        EXPECT_EQ(alloc, buffer2.get_allocator().get());\n      };\n\n",
                    "rendered": {
                      "text": "        EXPECT_EQ(str, std::string(&buffer2[0], buffer2.size()));\n        EXPECT_EQ(5u, buffer2.capacity());\n        // Move should transfer allocator.\n        EXPECT_EQ(nullptr, buffer.get_allocator().get());\n        EXPECT_EQ(alloc, buffer2.get_allocator().get());\n      };\n\n",
                      "markdown": "`        EXPECT_EQ(str, std::string(&buffer2[0], buffer2.size()));\n        EXPECT_EQ(5u, buffer2.capacity());\n        // Move should transfer allocator.\n        EXPECT_EQ(nullptr, buffer.get_allocator().get());\n        EXPECT_EQ(alloc, buffer2.get_allocator().get());\n      };\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 319,
                  "startColumn": 60,
                  "endLine": 319,
                  "endColumn": 65,
                  "snippet": {
                    "text": "TEST(memory_buffer_test, move_ctor_inline_buffer) {\n  auto check_move_buffer =\n      [](const char* str, basic_memory_buffer<char, 5, std_allocator>& buffer) {\n        std::allocator<char>* alloc = buffer.get_allocator().get();\n        basic_memory_buffer<char, 5, std_allocator> buffer2(std::move(buffer));\n        // Move shouldn't destroy the inline content of the first buffer.\n        EXPECT_EQ(str, std::string(&buffer[0], buffer.size()));\n",
                    "rendered": {
                      "text": "TEST(memory_buffer_test, move_ctor_inline_buffer) {\n  auto check_move_buffer =\n      [](const char* str, basic_memory_buffer<char, 5, std_allocator>& buffer) {\n        std::allocator<char>* alloc = buffer.get_allocator().get();\n        basic_memory_buffer<char, 5, std_allocator> buffer2(std::move(buffer));\n        // Move shouldn't destroy the inline content of the first buffer.\n        EXPECT_EQ(str, std::string(&buffer[0], buffer.size()));\n",
                      "markdown": "`TEST(memory_buffer_test, move_ctor_inline_buffer) {\n  auto check_move_buffer =\n      [](const char* str, basic_memory_buffer<char, 5, std_allocator>& buffer) {\n        std::allocator<char>* alloc = buffer.get_allocator().get();\n        basic_memory_buffer<char, 5, std_allocator> buffer2(std::move(buffer));\n        // Move shouldn't destroy the inline content of the first buffer.\n        EXPECT_EQ(str, std::string(&buffer[0], buffer.size()));\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 254,
                  "startColumn": 25,
                  "endLine": 254,
                  "endColumn": 30,
                  "snippet": {
                    "text": "  test_allocator_ref ref2(ref);\n  check_forwarding(alloc, ref2);\n  test_allocator_ref ref3;\n  EXPECT_EQ(nullptr, ref3.get());\n  ref3 = ref;\n  check_forwarding(alloc, ref3);\n}\n",
                    "rendered": {
                      "text": "  test_allocator_ref ref2(ref);\n  check_forwarding(alloc, ref2);\n  test_allocator_ref ref3;\n  EXPECT_EQ(nullptr, ref3.get());\n  ref3 = ref;\n  check_forwarding(alloc, ref3);\n}\n",
                      "markdown": "`  test_allocator_ref ref2(ref);\n  check_forwarding(alloc, ref2);\n  test_allocator_ref ref3;\n  EXPECT_EQ(nullptr, ref3.get());\n  ref3 = ref;\n  check_forwarding(alloc, ref3);\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 12,
                  "endLine": 18,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\n#include <stdint.h>  // uint32_t\n\n#include <cfenv>               // fegetexceptflag and FE_ALL_EXCEPT\n#include <climits>             // INT_MAX\n#include <cmath>               // std::signbit\n#include <condition_variable>  // std::condition_variable\n",
                    "rendered": {
                      "text": "\n#include <stdint.h>  // uint32_t\n\n#include <cfenv>               // fegetexceptflag and FE_ALL_EXCEPT\n#include <climits>             // INT_MAX\n#include <cmath>               // std::signbit\n#include <condition_variable>  // std::condition_variable\n",
                      "markdown": "`\n#include <stdint.h>  // uint32_t\n\n#include <cfenv>               // fegetexceptflag and FE_ALL_EXCEPT\n#include <climits>             // INT_MAX\n#include <cmath>               // std::signbit\n#include <condition_variable>  // std::condition_variable\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 696,
                  "startColumn": 48,
                  "endLine": 696,
                  "endColumn": 68,
                  "snippet": {
                    "text": "  EXPECT_EQ(std::string(\"\\0\\0\\0*\", 4),\n            fmt::format(string_view(\"{:\\0>4}\", 6), '*'));\n  EXPECT_EQ(fmt::format(\"{0:ж>4}\", 42), \"жж42\");\n  EXPECT_THROW_MSG((void)fmt::format(runtime(\"{:\\x80\\x80\\x80\\x80\\x80>}\"), 0),\n                   format_error, \"invalid format specifier\");\n}\n\n",
                    "rendered": {
                      "text": "  EXPECT_EQ(std::string(\"\\0\\0\\0*\", 4),\n            fmt::format(string_view(\"{:\\0>4}\", 6), '*'));\n  EXPECT_EQ(fmt::format(\"{0:ж>4}\", 42), \"жж42\");\n  EXPECT_THROW_MSG((void)fmt::format(runtime(\"{:\\x80\\x80\\x80\\x80\\x80>}\"), 0),\n                   format_error, \"invalid format specifier\");\n}\n\n",
                      "markdown": "`  EXPECT_EQ(std::string(\"\\0\\0\\0*\", 4),\n            fmt::format(string_view(\"{:\\0>4}\", 6), '*'));\n  EXPECT_EQ(fmt::format(\"{0:ж>4}\", 42), \"жж42\");\n  EXPECT_THROW_MSG((void)fmt::format(runtime(\"{:\\x80\\x80\\x80\\x80\\x80>}\"), 0),\n                   format_error, \"invalid format specifier\");\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1352,
                  "startColumn": 12,
                  "endLine": 1352,
                  "endColumn": 57,
                  "snippet": {
                    "text": "            fmt::format(\"{0:o}\", int128_max));\n  EXPECT_EQ(\"-2000000000000000000000000000000000000000000\",\n            fmt::format(\"{0:o}\", int128_min));\n  EXPECT_EQ(\"3777777777777777777777777777777777777777777\",\n            fmt::format(\"{0:o}\", uint128_max));\n#endif\n\n",
                    "rendered": {
                      "text": "            fmt::format(\"{0:o}\", int128_max));\n  EXPECT_EQ(\"-2000000000000000000000000000000000000000000\",\n            fmt::format(\"{0:o}\", int128_min));\n  EXPECT_EQ(\"3777777777777777777777777777777777777777777\",\n            fmt::format(\"{0:o}\", uint128_max));\n#endif\n\n",
                      "markdown": "`            fmt::format(\"{0:o}\", int128_max));\n  EXPECT_EQ(\"-2000000000000000000000000000000000000000000\",\n            fmt::format(\"{0:o}\", int128_min));\n  EXPECT_EQ(\"3777777777777777777777777777777777777777777\",\n            fmt::format(\"{0:o}\", uint128_max));\n#endif\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1348,
                  "startColumn": 12,
                  "endLine": 1348,
                  "endColumn": 57,
                  "snippet": {
                    "text": "            fmt::format(\"{0:o}\", static_cast<__int128_t>(INT64_MIN) - 1));\n  EXPECT_EQ(\"2000000000000000000000\",\n            fmt::format(\"{0:o}\", static_cast<__int128_t>(UINT64_MAX) + 1));\n  EXPECT_EQ(\"1777777777777777777777777777777777777777777\",\n            fmt::format(\"{0:o}\", int128_max));\n  EXPECT_EQ(\"-2000000000000000000000000000000000000000000\",\n            fmt::format(\"{0:o}\", int128_min));\n",
                    "rendered": {
                      "text": "            fmt::format(\"{0:o}\", static_cast<__int128_t>(INT64_MIN) - 1));\n  EXPECT_EQ(\"2000000000000000000000\",\n            fmt::format(\"{0:o}\", static_cast<__int128_t>(UINT64_MAX) + 1));\n  EXPECT_EQ(\"1777777777777777777777777777777777777777777\",\n            fmt::format(\"{0:o}\", int128_max));\n  EXPECT_EQ(\"-2000000000000000000000000000000000000000000\",\n            fmt::format(\"{0:o}\", int128_min));\n",
                      "markdown": "`            fmt::format(\"{0:o}\", static_cast<__int128_t>(INT64_MIN) - 1));\n  EXPECT_EQ(\"2000000000000000000000\",\n            fmt::format(\"{0:o}\", static_cast<__int128_t>(UINT64_MAX) + 1));\n  EXPECT_EQ(\"1777777777777777777777777777777777777777777\",\n            fmt::format(\"{0:o}\", int128_max));\n  EXPECT_EQ(\"-2000000000000000000000000000000000000000000\",\n            fmt::format(\"{0:o}\", int128_min));\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1055,
                  "startColumn": 6,
                  "endLine": 1055,
                  "endColumn": 80,
                  "snippet": {
                    "text": "      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000P+124\"};\n  EXPECT_THAT(outputs,\n              testing::Contains(fmt::format(\"{:.838A}\", -2.14001164E+38)));\n",
                    "rendered": {
                      "text": "      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000P+124\"};\n  EXPECT_THAT(outputs,\n              testing::Contains(fmt::format(\"{:.838A}\", -2.14001164E+38)));\n",
                      "markdown": "`      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000P+124\"};\n  EXPECT_THAT(outputs,\n              testing::Contains(fmt::format(\"{:.838A}\", -2.14001164E+38)));\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1054,
                  "startColumn": 6,
                  "endLine": 1054,
                  "endColumn": 80,
                  "snippet": {
                    "text": "      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000P+124\"};\n  EXPECT_THAT(outputs,\n",
                    "rendered": {
                      "text": "      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000P+124\"};\n  EXPECT_THAT(outputs,\n",
                      "markdown": "`      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000P+124\"};\n  EXPECT_THAT(outputs,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1053,
                  "startColumn": 6,
                  "endLine": 1053,
                  "endColumn": 80,
                  "snippet": {
                    "text": "      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000P+124\"};\n",
                    "rendered": {
                      "text": "      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000P+124\"};\n",
                      "markdown": "`      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000P+124\"};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1052,
                  "startColumn": 6,
                  "endLine": 1052,
                  "endColumn": 80,
                  "snippet": {
                    "text": "      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n",
                    "rendered": {
                      "text": "      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n",
                      "markdown": "`      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1051,
                  "startColumn": 6,
                  "endLine": 1051,
                  "endColumn": 80,
                  "snippet": {
                    "text": "      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n",
                    "rendered": {
                      "text": "      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n",
                      "markdown": "`      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1050,
                  "startColumn": 6,
                  "endLine": 1050,
                  "endColumn": 80,
                  "snippet": {
                    "text": "      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n",
                    "rendered": {
                      "text": "      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n",
                      "markdown": "`      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1049,
                  "startColumn": 6,
                  "endLine": 1049,
                  "endColumn": 80,
                  "snippet": {
                    "text": "      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n",
                    "rendered": {
                      "text": "      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n",
                      "markdown": "`      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1048,
                  "startColumn": 6,
                  "endLine": 1048,
                  "endColumn": 80,
                  "snippet": {
                    "text": "      \"-0XA.0FF1FFF38E4F0000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n",
                    "rendered": {
                      "text": "      \"-0XA.0FF1FFF38E4F0000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n",
                      "markdown": "`      \"-0XA.0FF1FFF38E4F0000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1047,
                  "startColumn": 6,
                  "endLine": 1047,
                  "endColumn": 80,
                  "snippet": {
                    "text": "      \"000000000000000000000000000000000000000000000000000P+127\",\n      \"-0XA.0FF1FFF38E4F0000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n",
                    "rendered": {
                      "text": "      \"000000000000000000000000000000000000000000000000000P+127\",\n      \"-0XA.0FF1FFF38E4F0000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n",
                      "markdown": "`      \"000000000000000000000000000000000000000000000000000P+127\",\n      \"-0XA.0FF1FFF38E4F0000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1046,
                  "startColumn": 6,
                  "endLine": 1046,
                  "endColumn": 80,
                  "snippet": {
                    "text": "      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000P+127\",\n      \"-0XA.0FF1FFF38E4F0000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n",
                    "rendered": {
                      "text": "      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000P+127\",\n      \"-0XA.0FF1FFF38E4F0000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n",
                      "markdown": "`      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000P+127\",\n      \"-0XA.0FF1FFF38E4F0000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1043,
                  "startColumn": 6,
                  "endLine": 1043,
                  "endColumn": 80,
                  "snippet": {
                    "text": "      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000P+127\",\n      \"-0XA.0FF1FFF38E4F0000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n",
                    "rendered": {
                      "text": "      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000P+127\",\n      \"-0XA.0FF1FFF38E4F0000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n",
                      "markdown": "`      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000P+127\",\n      \"-0XA.0FF1FFF38E4F0000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1042,
                  "startColumn": 6,
                  "endLine": 1042,
                  "endColumn": 80,
                  "snippet": {
                    "text": "      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000P+127\",\n      \"-0XA.0FF1FFF38E4F0000000000000000000000000000000000000000000000000000000\"\n",
                    "rendered": {
                      "text": "      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000P+127\",\n      \"-0XA.0FF1FFF38E4F0000000000000000000000000000000000000000000000000000000\"\n",
                      "markdown": "`      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000P+127\",\n      \"-0XA.0FF1FFF38E4F0000000000000000000000000000000000000000000000000000000\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1041,
                  "startColumn": 6,
                  "endLine": 1041,
                  "endColumn": 80,
                  "snippet": {
                    "text": "      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000P+127\",\n",
                    "rendered": {
                      "text": "      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000P+127\",\n",
                      "markdown": "`      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000P+127\",\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1040,
                  "startColumn": 6,
                  "endLine": 1040,
                  "endColumn": 80,
                  "snippet": {
                    "text": "      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n",
                    "rendered": {
                      "text": "      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n",
                      "markdown": "`      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1039,
                  "startColumn": 6,
                  "endLine": 1039,
                  "endColumn": 80,
                  "snippet": {
                    "text": "      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n",
                    "rendered": {
                      "text": "      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n",
                      "markdown": "`      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1038,
                  "startColumn": 6,
                  "endLine": 1038,
                  "endColumn": 80,
                  "snippet": {
                    "text": "      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n",
                    "rendered": {
                      "text": "      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n",
                      "markdown": "`      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1037,
                  "startColumn": 6,
                  "endLine": 1037,
                  "endColumn": 80,
                  "snippet": {
                    "text": "      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n",
                    "rendered": {
                      "text": "      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n",
                      "markdown": "`      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1036,
                  "startColumn": 6,
                  "endLine": 1036,
                  "endColumn": 80,
                  "snippet": {
                    "text": "      \"-0X1.41FE3FFE71C9E000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n",
                    "rendered": {
                      "text": "      \"-0X1.41FE3FFE71C9E000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n",
                      "markdown": "`      \"-0X1.41FE3FFE71C9E000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1035,
                  "startColumn": 6,
                  "endLine": 1035,
                  "endColumn": 80,
                  "snippet": {
                    "text": "  std::string outputs[] = {\n      \"-0X1.41FE3FFE71C9E000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n",
                    "rendered": {
                      "text": "  std::string outputs[] = {\n      \"-0X1.41FE3FFE71C9E000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n",
                      "markdown": "`  std::string outputs[] = {\n      \"-0X1.41FE3FFE71C9E000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1034,
                  "startColumn": 6,
                  "endLine": 1034,
                  "endColumn": 80,
                  "snippet": {
                    "text": "\n  std::string outputs[] = {\n      \"-0X1.41FE3FFE71C9E000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n",
                    "rendered": {
                      "text": "\n  std::string outputs[] = {\n      \"-0X1.41FE3FFE71C9E000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n",
                      "markdown": "`\n  std::string outputs[] = {\n      \"-0X1.41FE3FFE71C9E000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1030,
                  "startColumn": 6,
                  "endLine": 1030,
                  "endColumn": 76,
                  "snippet": {
                    "text": "      \"559833794807213172371254492216255558078524900147957309382830827524104234\"\n      \"530961756787819847850302379672357738807808384667004752163416921762619527\"\n      \"462847642037420991432005657440259928195996762610375541867198059294212446\"\n      \"81962777939941034720757232455434770912461317493580281734466552734375\");\n\n  std::string outputs[] = {\n      \"-0X1.41FE3FFE71C9E000000000000000000000000000000000000000000000000000000\"\n",
                    "rendered": {
                      "text": "      \"559833794807213172371254492216255558078524900147957309382830827524104234\"\n      \"530961756787819847850302379672357738807808384667004752163416921762619527\"\n      \"462847642037420991432005657440259928195996762610375541867198059294212446\"\n      \"81962777939941034720757232455434770912461317493580281734466552734375\");\n\n  std::string outputs[] = {\n      \"-0X1.41FE3FFE71C9E000000000000000000000000000000000000000000000000000000\"\n",
                      "markdown": "`      \"559833794807213172371254492216255558078524900147957309382830827524104234\"\n      \"530961756787819847850302379672357738807808384667004752163416921762619527\"\n      \"462847642037420991432005657440259928195996762610375541867198059294212446\"\n      \"81962777939941034720757232455434770912461317493580281734466552734375\");\n\n  std::string outputs[] = {\n      \"-0X1.41FE3FFE71C9E000000000000000000000000000000000000000000000000000000\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1029,
                  "startColumn": 6,
                  "endLine": 1029,
                  "endColumn": 80,
                  "snippet": {
                    "text": "      \"156360766271842991667238355464496455107749716934387136380536472531224398\"\n      \"559833794807213172371254492216255558078524900147957309382830827524104234\"\n      \"530961756787819847850302379672357738807808384667004752163416921762619527\"\n      \"462847642037420991432005657440259928195996762610375541867198059294212446\"\n      \"81962777939941034720757232455434770912461317493580281734466552734375\");\n\n  std::string outputs[] = {\n",
                    "rendered": {
                      "text": "      \"156360766271842991667238355464496455107749716934387136380536472531224398\"\n      \"559833794807213172371254492216255558078524900147957309382830827524104234\"\n      \"530961756787819847850302379672357738807808384667004752163416921762619527\"\n      \"462847642037420991432005657440259928195996762610375541867198059294212446\"\n      \"81962777939941034720757232455434770912461317493580281734466552734375\");\n\n  std::string outputs[] = {\n",
                      "markdown": "`      \"156360766271842991667238355464496455107749716934387136380536472531224398\"\n      \"559833794807213172371254492216255558078524900147957309382830827524104234\"\n      \"530961756787819847850302379672357738807808384667004752163416921762619527\"\n      \"462847642037420991432005657440259928195996762610375541867198059294212446\"\n      \"81962777939941034720757232455434770912461317493580281734466552734375\");\n\n  std::string outputs[] = {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1028,
                  "startColumn": 6,
                  "endLine": 1028,
                  "endColumn": 80,
                  "snippet": {
                    "text": "      \"482369631100360266123742648159508919592746619553246586039571522788247697\"\n      \"156360766271842991667238355464496455107749716934387136380536472531224398\"\n      \"559833794807213172371254492216255558078524900147957309382830827524104234\"\n      \"530961756787819847850302379672357738807808384667004752163416921762619527\"\n      \"462847642037420991432005657440259928195996762610375541867198059294212446\"\n      \"81962777939941034720757232455434770912461317493580281734466552734375\");\n\n",
                    "rendered": {
                      "text": "      \"482369631100360266123742648159508919592746619553246586039571522788247697\"\n      \"156360766271842991667238355464496455107749716934387136380536472531224398\"\n      \"559833794807213172371254492216255558078524900147957309382830827524104234\"\n      \"530961756787819847850302379672357738807808384667004752163416921762619527\"\n      \"462847642037420991432005657440259928195996762610375541867198059294212446\"\n      \"81962777939941034720757232455434770912461317493580281734466552734375\");\n\n",
                      "markdown": "`      \"482369631100360266123742648159508919592746619553246586039571522788247697\"\n      \"156360766271842991667238355464496455107749716934387136380536472531224398\"\n      \"559833794807213172371254492216255558078524900147957309382830827524104234\"\n      \"530961756787819847850302379672357738807808384667004752163416921762619527\"\n      \"462847642037420991432005657440259928195996762610375541867198059294212446\"\n      \"81962777939941034720757232455434770912461317493580281734466552734375\");\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1027,
                  "startColumn": 6,
                  "endLine": 1027,
                  "endColumn": 80,
                  "snippet": {
                    "text": "      \"478476991912072201449236975063640913461919914396877093174125167509869762\"\n      \"482369631100360266123742648159508919592746619553246586039571522788247697\"\n      \"156360766271842991667238355464496455107749716934387136380536472531224398\"\n      \"559833794807213172371254492216255558078524900147957309382830827524104234\"\n      \"530961756787819847850302379672357738807808384667004752163416921762619527\"\n      \"462847642037420991432005657440259928195996762610375541867198059294212446\"\n      \"81962777939941034720757232455434770912461317493580281734466552734375\");\n",
                    "rendered": {
                      "text": "      \"478476991912072201449236975063640913461919914396877093174125167509869762\"\n      \"482369631100360266123742648159508919592746619553246586039571522788247697\"\n      \"156360766271842991667238355464496455107749716934387136380536472531224398\"\n      \"559833794807213172371254492216255558078524900147957309382830827524104234\"\n      \"530961756787819847850302379672357738807808384667004752163416921762619527\"\n      \"462847642037420991432005657440259928195996762610375541867198059294212446\"\n      \"81962777939941034720757232455434770912461317493580281734466552734375\");\n",
                      "markdown": "`      \"478476991912072201449236975063640913461919914396877093174125167509869762\"\n      \"482369631100360266123742648159508919592746619553246586039571522788247697\"\n      \"156360766271842991667238355464496455107749716934387136380536472531224398\"\n      \"559833794807213172371254492216255558078524900147957309382830827524104234\"\n      \"530961756787819847850302379672357738807808384667004752163416921762619527\"\n      \"462847642037420991432005657440259928195996762610375541867198059294212446\"\n      \"81962777939941034720757232455434770912461317493580281734466552734375\");\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1026,
                  "startColumn": 6,
                  "endLine": 1026,
                  "endColumn": 80,
                  "snippet": {
                    "text": "      \"014361467448914817838555156840459458527907308695109202499990850735085304\"\n      \"478476991912072201449236975063640913461919914396877093174125167509869762\"\n      \"482369631100360266123742648159508919592746619553246586039571522788247697\"\n      \"156360766271842991667238355464496455107749716934387136380536472531224398\"\n      \"559833794807213172371254492216255558078524900147957309382830827524104234\"\n      \"530961756787819847850302379672357738807808384667004752163416921762619527\"\n      \"462847642037420991432005657440259928195996762610375541867198059294212446\"\n",
                    "rendered": {
                      "text": "      \"014361467448914817838555156840459458527907308695109202499990850735085304\"\n      \"478476991912072201449236975063640913461919914396877093174125167509869762\"\n      \"482369631100360266123742648159508919592746619553246586039571522788247697\"\n      \"156360766271842991667238355464496455107749716934387136380536472531224398\"\n      \"559833794807213172371254492216255558078524900147957309382830827524104234\"\n      \"530961756787819847850302379672357738807808384667004752163416921762619527\"\n      \"462847642037420991432005657440259928195996762610375541867198059294212446\"\n",
                      "markdown": "`      \"014361467448914817838555156840459458527907308695109202499990850735085304\"\n      \"478476991912072201449236975063640913461919914396877093174125167509869762\"\n      \"482369631100360266123742648159508919592746619553246586039571522788247697\"\n      \"156360766271842991667238355464496455107749716934387136380536472531224398\"\n      \"559833794807213172371254492216255558078524900147957309382830827524104234\"\n      \"530961756787819847850302379672357738807808384667004752163416921762619527\"\n      \"462847642037420991432005657440259928195996762610375541867198059294212446\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1025,
                  "startColumn": 6,
                  "endLine": 1025,
                  "endColumn": 80,
                  "snippet": {
                    "text": "      \"152163505899912777129583674906301179059298598412303893909188340988729019\"\n      \"014361467448914817838555156840459458527907308695109202499990850735085304\"\n      \"478476991912072201449236975063640913461919914396877093174125167509869762\"\n      \"482369631100360266123742648159508919592746619553246586039571522788247697\"\n      \"156360766271842991667238355464496455107749716934387136380536472531224398\"\n      \"559833794807213172371254492216255558078524900147957309382830827524104234\"\n      \"530961756787819847850302379672357738807808384667004752163416921762619527\"\n",
                    "rendered": {
                      "text": "      \"152163505899912777129583674906301179059298598412303893909188340988729019\"\n      \"014361467448914817838555156840459458527907308695109202499990850735085304\"\n      \"478476991912072201449236975063640913461919914396877093174125167509869762\"\n      \"482369631100360266123742648159508919592746619553246586039571522788247697\"\n      \"156360766271842991667238355464496455107749716934387136380536472531224398\"\n      \"559833794807213172371254492216255558078524900147957309382830827524104234\"\n      \"530961756787819847850302379672357738807808384667004752163416921762619527\"\n",
                      "markdown": "`      \"152163505899912777129583674906301179059298598412303893909188340988729019\"\n      \"014361467448914817838555156840459458527907308695109202499990850735085304\"\n      \"478476991912072201449236975063640913461919914396877093174125167509869762\"\n      \"482369631100360266123742648159508919592746619553246586039571522788247697\"\n      \"156360766271842991667238355464496455107749716934387136380536472531224398\"\n      \"559833794807213172371254492216255558078524900147957309382830827524104234\"\n      \"530961756787819847850302379672357738807808384667004752163416921762619527\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1024,
                  "startColumn": 6,
                  "endLine": 1024,
                  "endColumn": 80,
                  "snippet": {
                    "text": "      \"355021686109411883779182127659725163430929750364498219730822952552570601\"\n      \"152163505899912777129583674906301179059298598412303893909188340988729019\"\n      \"014361467448914817838555156840459458527907308695109202499990850735085304\"\n      \"478476991912072201449236975063640913461919914396877093174125167509869762\"\n      \"482369631100360266123742648159508919592746619553246586039571522788247697\"\n      \"156360766271842991667238355464496455107749716934387136380536472531224398\"\n      \"559833794807213172371254492216255558078524900147957309382830827524104234\"\n",
                    "rendered": {
                      "text": "      \"355021686109411883779182127659725163430929750364498219730822952552570601\"\n      \"152163505899912777129583674906301179059298598412303893909188340988729019\"\n      \"014361467448914817838555156840459458527907308695109202499990850735085304\"\n      \"478476991912072201449236975063640913461919914396877093174125167509869762\"\n      \"482369631100360266123742648159508919592746619553246586039571522788247697\"\n      \"156360766271842991667238355464496455107749716934387136380536472531224398\"\n      \"559833794807213172371254492216255558078524900147957309382830827524104234\"\n",
                      "markdown": "`      \"355021686109411883779182127659725163430929750364498219730822952552570601\"\n      \"152163505899912777129583674906301179059298598412303893909188340988729019\"\n      \"014361467448914817838555156840459458527907308695109202499990850735085304\"\n      \"478476991912072201449236975063640913461919914396877093174125167509869762\"\n      \"482369631100360266123742648159508919592746619553246586039571522788247697\"\n      \"156360766271842991667238355464496455107749716934387136380536472531224398\"\n      \"559833794807213172371254492216255558078524900147957309382830827524104234\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1023,
                  "startColumn": 6,
                  "endLine": 1023,
                  "endColumn": 80,
                  "snippet": {
                    "text": "      \"000000000000000000000111253692925360019747947051741965785554081512200979\"\n      \"355021686109411883779182127659725163430929750364498219730822952552570601\"\n      \"152163505899912777129583674906301179059298598412303893909188340988729019\"\n      \"014361467448914817838555156840459458527907308695109202499990850735085304\"\n      \"478476991912072201449236975063640913461919914396877093174125167509869762\"\n      \"482369631100360266123742648159508919592746619553246586039571522788247697\"\n      \"156360766271842991667238355464496455107749716934387136380536472531224398\"\n",
                    "rendered": {
                      "text": "      \"000000000000000000000111253692925360019747947051741965785554081512200979\"\n      \"355021686109411883779182127659725163430929750364498219730822952552570601\"\n      \"152163505899912777129583674906301179059298598412303893909188340988729019\"\n      \"014361467448914817838555156840459458527907308695109202499990850735085304\"\n      \"478476991912072201449236975063640913461919914396877093174125167509869762\"\n      \"482369631100360266123742648159508919592746619553246586039571522788247697\"\n      \"156360766271842991667238355464496455107749716934387136380536472531224398\"\n",
                      "markdown": "`      \"000000000000000000000111253692925360019747947051741965785554081512200979\"\n      \"355021686109411883779182127659725163430929750364498219730822952552570601\"\n      \"152163505899912777129583674906301179059298598412303893909188340988729019\"\n      \"014361467448914817838555156840459458527907308695109202499990850735085304\"\n      \"478476991912072201449236975063640913461919914396877093174125167509869762\"\n      \"482369631100360266123742648159508919592746619553246586039571522788247697\"\n      \"156360766271842991667238355464496455107749716934387136380536472531224398\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1022,
                  "startColumn": 6,
                  "endLine": 1022,
                  "endColumn": 80,
                  "snippet": {
                    "text": "      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000111253692925360019747947051741965785554081512200979\"\n      \"355021686109411883779182127659725163430929750364498219730822952552570601\"\n      \"152163505899912777129583674906301179059298598412303893909188340988729019\"\n      \"014361467448914817838555156840459458527907308695109202499990850735085304\"\n      \"478476991912072201449236975063640913461919914396877093174125167509869762\"\n      \"482369631100360266123742648159508919592746619553246586039571522788247697\"\n",
                    "rendered": {
                      "text": "      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000111253692925360019747947051741965785554081512200979\"\n      \"355021686109411883779182127659725163430929750364498219730822952552570601\"\n      \"152163505899912777129583674906301179059298598412303893909188340988729019\"\n      \"014361467448914817838555156840459458527907308695109202499990850735085304\"\n      \"478476991912072201449236975063640913461919914396877093174125167509869762\"\n      \"482369631100360266123742648159508919592746619553246586039571522788247697\"\n",
                      "markdown": "`      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000111253692925360019747947051741965785554081512200979\"\n      \"355021686109411883779182127659725163430929750364498219730822952552570601\"\n      \"152163505899912777129583674906301179059298598412303893909188340988729019\"\n      \"014361467448914817838555156840459458527907308695109202499990850735085304\"\n      \"478476991912072201449236975063640913461919914396877093174125167509869762\"\n      \"482369631100360266123742648159508919592746619553246586039571522788247697\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1021,
                  "startColumn": 6,
                  "endLine": 1021,
                  "endColumn": 80,
                  "snippet": {
                    "text": "      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000111253692925360019747947051741965785554081512200979\"\n      \"355021686109411883779182127659725163430929750364498219730822952552570601\"\n      \"152163505899912777129583674906301179059298598412303893909188340988729019\"\n      \"014361467448914817838555156840459458527907308695109202499990850735085304\"\n      \"478476991912072201449236975063640913461919914396877093174125167509869762\"\n",
                    "rendered": {
                      "text": "      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000111253692925360019747947051741965785554081512200979\"\n      \"355021686109411883779182127659725163430929750364498219730822952552570601\"\n      \"152163505899912777129583674906301179059298598412303893909188340988729019\"\n      \"014361467448914817838555156840459458527907308695109202499990850735085304\"\n      \"478476991912072201449236975063640913461919914396877093174125167509869762\"\n",
                      "markdown": "`      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000111253692925360019747947051741965785554081512200979\"\n      \"355021686109411883779182127659725163430929750364498219730822952552570601\"\n      \"152163505899912777129583674906301179059298598412303893909188340988729019\"\n      \"014361467448914817838555156840459458527907308695109202499990850735085304\"\n      \"478476991912072201449236975063640913461919914396877093174125167509869762\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1020,
                  "startColumn": 6,
                  "endLine": 1020,
                  "endColumn": 80,
                  "snippet": {
                    "text": "      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000111253692925360019747947051741965785554081512200979\"\n      \"355021686109411883779182127659725163430929750364498219730822952552570601\"\n      \"152163505899912777129583674906301179059298598412303893909188340988729019\"\n      \"014361467448914817838555156840459458527907308695109202499990850735085304\"\n",
                    "rendered": {
                      "text": "      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000111253692925360019747947051741965785554081512200979\"\n      \"355021686109411883779182127659725163430929750364498219730822952552570601\"\n      \"152163505899912777129583674906301179059298598412303893909188340988729019\"\n      \"014361467448914817838555156840459458527907308695109202499990850735085304\"\n",
                      "markdown": "`      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000111253692925360019747947051741965785554081512200979\"\n      \"355021686109411883779182127659725163430929750364498219730822952552570601\"\n      \"152163505899912777129583674906301179059298598412303893909188340988729019\"\n      \"014361467448914817838555156840459458527907308695109202499990850735085304\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1019,
                  "startColumn": 6,
                  "endLine": 1019,
                  "endColumn": 80,
                  "snippet": {
                    "text": "      \"0.0000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000111253692925360019747947051741965785554081512200979\"\n      \"355021686109411883779182127659725163430929750364498219730822952552570601\"\n      \"152163505899912777129583674906301179059298598412303893909188340988729019\"\n",
                    "rendered": {
                      "text": "      \"0.0000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000111253692925360019747947051741965785554081512200979\"\n      \"355021686109411883779182127659725163430929750364498219730822952552570601\"\n      \"152163505899912777129583674906301179059298598412303893909188340988729019\"\n",
                      "markdown": "`      \"0.0000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000111253692925360019747947051741965785554081512200979\"\n      \"355021686109411883779182127659725163430929750364498219730822952552570601\"\n      \"152163505899912777129583674906301179059298598412303893909188340988729019\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1018,
                  "startColumn": 6,
                  "endLine": 1018,
                  "endColumn": 80,
                  "snippet": {
                    "text": "      fmt::format(\"{:.1074f}\", 1.1125369292536e-308),\n      \"0.0000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000111253692925360019747947051741965785554081512200979\"\n      \"355021686109411883779182127659725163430929750364498219730822952552570601\"\n",
                    "rendered": {
                      "text": "      fmt::format(\"{:.1074f}\", 1.1125369292536e-308),\n      \"0.0000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000111253692925360019747947051741965785554081512200979\"\n      \"355021686109411883779182127659725163430929750364498219730822952552570601\"\n",
                      "markdown": "`      fmt::format(\"{:.1074f}\", 1.1125369292536e-308),\n      \"0.0000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000111253692925360019747947051741965785554081512200979\"\n      \"355021686109411883779182127659725163430929750364498219730822952552570601\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1017,
                  "startColumn": 6,
                  "endLine": 1017,
                  "endColumn": 80,
                  "snippet": {
                    "text": "  EXPECT_EQ(\n      fmt::format(\"{:.1074f}\", 1.1125369292536e-308),\n      \"0.0000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000111253692925360019747947051741965785554081512200979\"\n",
                    "rendered": {
                      "text": "  EXPECT_EQ(\n      fmt::format(\"{:.1074f}\", 1.1125369292536e-308),\n      \"0.0000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000111253692925360019747947051741965785554081512200979\"\n",
                      "markdown": "`  EXPECT_EQ(\n      fmt::format(\"{:.1074f}\", 1.1125369292536e-308),\n      \"0.0000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000000000000000000000000000000000000000000000000000000\"\n      \"000000000000000000000111253692925360019747947051741965785554081512200979\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1012,
                  "startColumn": 6,
                  "endLine": 1012,
                  "endColumn": 80,
                  "snippet": {
                    "text": "      \"479601078187812630071319031140452784581716784898210368871863605699873072\"\n      \"305000638740915356498438731247339727316961514003171538539807412623856559\"\n      \"117102665855668676818703956031062493194527159149245532930545654440112748\"\n      \"012970999954193198940908041656332452475714786901472678015935523861155013\"\n      \"480352649347201937902681071074917033322268447533357208324319361e-324\");\n  EXPECT_EQ(\n      fmt::format(\"{:.1074f}\", 1.1125369292536e-308),\n",
                    "rendered": {
                      "text": "      \"479601078187812630071319031140452784581716784898210368871863605699873072\"\n      \"305000638740915356498438731247339727316961514003171538539807412623856559\"\n      \"117102665855668676818703956031062493194527159149245532930545654440112748\"\n      \"012970999954193198940908041656332452475714786901472678015935523861155013\"\n      \"480352649347201937902681071074917033322268447533357208324319361e-324\");\n  EXPECT_EQ(\n      fmt::format(\"{:.1074f}\", 1.1125369292536e-308),\n",
                      "markdown": "`      \"479601078187812630071319031140452784581716784898210368871863605699873072\"\n      \"305000638740915356498438731247339727316961514003171538539807412623856559\"\n      \"117102665855668676818703956031062493194527159149245532930545654440112748\"\n      \"012970999954193198940908041656332452475714786901472678015935523861155013\"\n      \"480352649347201937902681071074917033322268447533357208324319361e-324\");\n  EXPECT_EQ(\n      fmt::format(\"{:.1074f}\", 1.1125369292536e-308),\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1011,
                  "startColumn": 6,
                  "endLine": 1011,
                  "endColumn": 80,
                  "snippet": {
                    "text": "      \"727020875186529983636163599237979656469544571773092665671035593979639877\"\n      \"479601078187812630071319031140452784581716784898210368871863605699873072\"\n      \"305000638740915356498438731247339727316961514003171538539807412623856559\"\n      \"117102665855668676818703956031062493194527159149245532930545654440112748\"\n      \"012970999954193198940908041656332452475714786901472678015935523861155013\"\n      \"480352649347201937902681071074917033322268447533357208324319361e-324\");\n  EXPECT_EQ(\n",
                    "rendered": {
                      "text": "      \"727020875186529983636163599237979656469544571773092665671035593979639877\"\n      \"479601078187812630071319031140452784581716784898210368871863605699873072\"\n      \"305000638740915356498438731247339727316961514003171538539807412623856559\"\n      \"117102665855668676818703956031062493194527159149245532930545654440112748\"\n      \"012970999954193198940908041656332452475714786901472678015935523861155013\"\n      \"480352649347201937902681071074917033322268447533357208324319361e-324\");\n  EXPECT_EQ(\n",
                      "markdown": "`      \"727020875186529983636163599237979656469544571773092665671035593979639877\"\n      \"479601078187812630071319031140452784581716784898210368871863605699873072\"\n      \"305000638740915356498438731247339727316961514003171538539807412623856559\"\n      \"117102665855668676818703956031062493194527159149245532930545654440112748\"\n      \"012970999954193198940908041656332452475714786901472678015935523861155013\"\n      \"480352649347201937902681071074917033322268447533357208324319361e-324\");\n  EXPECT_EQ(\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1010,
                  "startColumn": 6,
                  "endLine": 1010,
                  "endColumn": 80,
                  "snippet": {
                    "text": "      \"4.9406564584124654417656879286822137236505980261432476442558568250067550\"\n      \"727020875186529983636163599237979656469544571773092665671035593979639877\"\n      \"479601078187812630071319031140452784581716784898210368871863605699873072\"\n      \"305000638740915356498438731247339727316961514003171538539807412623856559\"\n      \"117102665855668676818703956031062493194527159149245532930545654440112748\"\n      \"012970999954193198940908041656332452475714786901472678015935523861155013\"\n      \"480352649347201937902681071074917033322268447533357208324319361e-324\");\n",
                    "rendered": {
                      "text": "      \"4.9406564584124654417656879286822137236505980261432476442558568250067550\"\n      \"727020875186529983636163599237979656469544571773092665671035593979639877\"\n      \"479601078187812630071319031140452784581716784898210368871863605699873072\"\n      \"305000638740915356498438731247339727316961514003171538539807412623856559\"\n      \"117102665855668676818703956031062493194527159149245532930545654440112748\"\n      \"012970999954193198940908041656332452475714786901472678015935523861155013\"\n      \"480352649347201937902681071074917033322268447533357208324319361e-324\");\n",
                      "markdown": "`      \"4.9406564584124654417656879286822137236505980261432476442558568250067550\"\n      \"727020875186529983636163599237979656469544571773092665671035593979639877\"\n      \"479601078187812630071319031140452784581716784898210368871863605699873072\"\n      \"305000638740915356498438731247339727316961514003171538539807412623856559\"\n      \"117102665855668676818703956031062493194527159149245532930545654440112748\"\n      \"012970999954193198940908041656332452475714786901472678015935523861155013\"\n      \"480352649347201937902681071074917033322268447533357208324319361e-324\");\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1009,
                  "startColumn": 6,
                  "endLine": 1009,
                  "endColumn": 80,
                  "snippet": {
                    "text": "      fmt::format(\"{:.494}\", 4.9406564584124654E-324),\n      \"4.9406564584124654417656879286822137236505980261432476442558568250067550\"\n      \"727020875186529983636163599237979656469544571773092665671035593979639877\"\n      \"479601078187812630071319031140452784581716784898210368871863605699873072\"\n      \"305000638740915356498438731247339727316961514003171538539807412623856559\"\n      \"117102665855668676818703956031062493194527159149245532930545654440112748\"\n      \"012970999954193198940908041656332452475714786901472678015935523861155013\"\n",
                    "rendered": {
                      "text": "      fmt::format(\"{:.494}\", 4.9406564584124654E-324),\n      \"4.9406564584124654417656879286822137236505980261432476442558568250067550\"\n      \"727020875186529983636163599237979656469544571773092665671035593979639877\"\n      \"479601078187812630071319031140452784581716784898210368871863605699873072\"\n      \"305000638740915356498438731247339727316961514003171538539807412623856559\"\n      \"117102665855668676818703956031062493194527159149245532930545654440112748\"\n      \"012970999954193198940908041656332452475714786901472678015935523861155013\"\n",
                      "markdown": "`      fmt::format(\"{:.494}\", 4.9406564584124654E-324),\n      \"4.9406564584124654417656879286822137236505980261432476442558568250067550\"\n      \"727020875186529983636163599237979656469544571773092665671035593979639877\"\n      \"479601078187812630071319031140452784581716784898210368871863605699873072\"\n      \"305000638740915356498438731247339727316961514003171538539807412623856559\"\n      \"117102665855668676818703956031062493194527159149245532930545654440112748\"\n      \"012970999954193198940908041656332452475714786901472678015935523861155013\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 1008,
                  "startColumn": 6,
                  "endLine": 1008,
                  "endColumn": 80,
                  "snippet": {
                    "text": "  EXPECT_EQ(\n      fmt::format(\"{:.494}\", 4.9406564584124654E-324),\n      \"4.9406564584124654417656879286822137236505980261432476442558568250067550\"\n      \"727020875186529983636163599237979656469544571773092665671035593979639877\"\n      \"479601078187812630071319031140452784581716784898210368871863605699873072\"\n      \"305000638740915356498438731247339727316961514003171538539807412623856559\"\n      \"117102665855668676818703956031062493194527159149245532930545654440112748\"\n",
                    "rendered": {
                      "text": "  EXPECT_EQ(\n      fmt::format(\"{:.494}\", 4.9406564584124654E-324),\n      \"4.9406564584124654417656879286822137236505980261432476442558568250067550\"\n      \"727020875186529983636163599237979656469544571773092665671035593979639877\"\n      \"479601078187812630071319031140452784581716784898210368871863605699873072\"\n      \"305000638740915356498438731247339727316961514003171538539807412623856559\"\n      \"117102665855668676818703956031062493194527159149245532930545654440112748\"\n",
                      "markdown": "`  EXPECT_EQ(\n      fmt::format(\"{:.494}\", 4.9406564584124654E-324),\n      \"4.9406564584124654417656879286822137236505980261432476442558568250067550\"\n      \"727020875186529983636163599237979656469544571773092665671035593979639877\"\n      \"479601078187812630071319031140452784581716784898210368871863605699873072\"\n      \"305000638740915356498438731247339727316961514003171538539807412623856559\"\n      \"117102665855668676818703956031062493194527159149245532930545654440112748\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 2049,
                  "startColumn": 15,
                  "endLine": 2050,
                  "snippet": {
                    "text": "struct foo {};\ntemplate <typename, typename OutputIt> void write(OutputIt, foo) = delete;\n}  // namespace detail\n}  // namespace fmt\n}  // namespace adl_test\n\nFMT_BEGIN_NAMESPACE\ntemplate <>\n",
                    "rendered": {
                      "text": "struct foo {};\ntemplate <typename, typename OutputIt> void write(OutputIt, foo) = delete;\n}  // namespace detail\n}  // namespace fmt\n}  // namespace adl_test\n\nFMT_BEGIN_NAMESPACE\ntemplate <>\n",
                      "markdown": "`struct foo {};\ntemplate <typename, typename OutputIt> void write(OutputIt, foo) = delete;\n}  // namespace detail\n}  // namespace fmt\n}  // namespace adl_test\n\nFMT_BEGIN_NAMESPACE\ntemplate <>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/format-test.cc"
                },
                "region": {
                  "startLine": 2044,
                  "startColumn": 9,
                  "endLine": 2044,
                  "endColumn": 14,
                  "snippet": {
                    "text": "}\n\nnamespace adl_test {\nnamespace fmt {\nnamespace detail {\nstruct foo {};\ntemplate <typename, typename OutputIt> void write(OutputIt, foo) = delete;\n",
                    "rendered": {
                      "text": "}\n\nnamespace adl_test {\nnamespace fmt {\nnamespace detail {\nstruct foo {};\ntemplate <typename, typename OutputIt> void write(OutputIt, foo) = delete;\n",
                      "markdown": "`}\n\nnamespace adl_test {\nnamespace fmt {\nnamespace detail {\nstruct foo {};\ntemplate <typename, typename OutputIt> void write(OutputIt, foo) = delete;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/chrono-test.cc"
                },
                "region": {
                  "startLine": 619,
                  "startColumn": 6,
                  "endLine": 619,
                  "endColumn": 12,
                  "snippet": {
                    "text": "  EXPECT_TIME(\"%OI\", make_hour(14), std::chrono::hours(14));\n  EXPECT_TIME(\"%OM\", make_minute(42), std::chrono::minutes(42));\n  EXPECT_TIME(\"%OS\", make_second(42), std::chrono::seconds(42));\n  auto time = make_tm();\n  time.tm_hour = 3;\n  time.tm_min = 25;\n  time.tm_sec = 45;\n",
                    "rendered": {
                      "text": "  EXPECT_TIME(\"%OI\", make_hour(14), std::chrono::hours(14));\n  EXPECT_TIME(\"%OM\", make_minute(42), std::chrono::minutes(42));\n  EXPECT_TIME(\"%OS\", make_second(42), std::chrono::seconds(42));\n  auto time = make_tm();\n  time.tm_hour = 3;\n  time.tm_min = 25;\n  time.tm_sec = 45;\n",
                      "markdown": "`  EXPECT_TIME(\"%OI\", make_hour(14), std::chrono::hours(14));\n  EXPECT_TIME(\"%OM\", make_minute(42), std::chrono::minutes(42));\n  EXPECT_TIME(\"%OS\", make_second(42), std::chrono::seconds(42));\n  auto time = make_tm();\n  time.tm_hour = 3;\n  time.tm_min = 25;\n  time.tm_sec = 45;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/chrono-test.cc"
                },
                "region": {
                  "startLine": 327,
                  "startColumn": 62,
                  "endLine": 327,
                  "endColumn": 68,
                  "snippet": {
                    "text": "    }\n  }\n\n  // Separate tests for UTC, since std::time_put can use local time and ignoring\n  // the timezone in std::tm (if it presents on platform).\n  if (fmt::detail::has_member_data_tm_zone<std::tm>::value) {\n    auto t = std::chrono::system_clock::to_time_t(t1);\n",
                    "rendered": {
                      "text": "    }\n  }\n\n  // Separate tests for UTC, since std::time_put can use local time and ignoring\n  // the timezone in std::tm (if it presents on platform).\n  if (fmt::detail::has_member_data_tm_zone<std::tm>::value) {\n    auto t = std::chrono::system_clock::to_time_t(t1);\n",
                      "markdown": "`    }\n  }\n\n  // Separate tests for UTC, since std::time_put can use local time and ignoring\n  // the timezone in std::tm (if it presents on platform).\n  if (fmt::detail::has_member_data_tm_zone<std::tm>::value) {\n    auto t = std::chrono::system_clock::to_time_t(t1);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/chrono-test.cc"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 6,
                  "endLine": 236,
                  "endColumn": 12,
                  "snippet": {
                    "text": "}\n\nTEST(chrono_test, format_to_empty_container) {\n  auto time = std::tm();\n  time.tm_sec = 42;\n  auto s = std::string();\n  fmt::format_to(std::back_inserter(s), \"{:%S}\", time);\n",
                    "rendered": {
                      "text": "}\n\nTEST(chrono_test, format_to_empty_container) {\n  auto time = std::tm();\n  time.tm_sec = 42;\n  auto s = std::string();\n  fmt::format_to(std::back_inserter(s), \"{:%S}\", time);\n",
                      "markdown": "`}\n\nTEST(chrono_test, format_to_empty_container) {\n  auto time = std::tm();\n  time.tm_sec = 42;\n  auto s = std::string();\n  fmt::format_to(std::back_inserter(s), \"{:%S}\", time);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/chrono-test.cc"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 4,
                  "endLine": 211,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n  // macOS  %D - \"04/25/01\" (%y)\n  // Linux  %D - \"04/25/99\" (%y)\n  // fmt    %D - \"04/25/01\" (%y)\n  EXPECT_EQ(fmt::format(\"{:%D}\", tm), \"04/25/01\");\n\n  EXPECT_EQ(fmt::format(\"{:%F}\", tm), \"-101-04-25\");\n",
                    "rendered": {
                      "text": "\n  // macOS  %D - \"04/25/01\" (%y)\n  // Linux  %D - \"04/25/99\" (%y)\n  // fmt    %D - \"04/25/01\" (%y)\n  EXPECT_EQ(fmt::format(\"{:%D}\", tm), \"04/25/01\");\n\n  EXPECT_EQ(fmt::format(\"{:%F}\", tm), \"-101-04-25\");\n",
                      "markdown": "`\n  // macOS  %D - \"04/25/01\" (%y)\n  // Linux  %D - \"04/25/99\" (%y)\n  // fmt    %D - \"04/25/01\" (%y)\n  EXPECT_EQ(fmt::format(\"{:%D}\", tm), \"04/25/01\");\n\n  EXPECT_EQ(fmt::format(\"{:%F}\", tm), \"-101-04-25\");\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/chrono-test.cc"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 4,
                  "endLine": 205,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n  // macOS  %C - \"-1\"\n  // Linux  %C - \"-2\"\n  // fmt    %C - \"-1\"\n  EXPECT_EQ(fmt::format(\"{:%C}\", tm), \"-1\");\n  EXPECT_EQ(fmt::format(\"{:%C%y}\", tm), fmt::format(\"{:%Y}\", tm));\n\n",
                    "rendered": {
                      "text": "\n  // macOS  %C - \"-1\"\n  // Linux  %C - \"-2\"\n  // fmt    %C - \"-1\"\n  EXPECT_EQ(fmt::format(\"{:%C}\", tm), \"-1\");\n  EXPECT_EQ(fmt::format(\"{:%C%y}\", tm), fmt::format(\"{:%Y}\", tm));\n\n",
                      "markdown": "`\n  // macOS  %C - \"-1\"\n  // Linux  %C - \"-2\"\n  // fmt    %C - \"-1\"\n  EXPECT_EQ(fmt::format(\"{:%C}\", tm), \"-1\");\n  EXPECT_EQ(fmt::format(\"{:%C%y}\", tm), fmt::format(\"{:%Y}\", tm));\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/chrono-test.cc"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 6,
                  "endLine": 55,
                  "endColumn": 12,
                  "snippet": {
                    "text": "}\n\nauto make_second(int s) -> std::tm {\n  auto time = make_tm();\n  time.tm_sec = s;\n  return time;\n}\n",
                    "rendered": {
                      "text": "}\n\nauto make_second(int s) -> std::tm {\n  auto time = make_tm();\n  time.tm_sec = s;\n  return time;\n}\n",
                      "markdown": "`}\n\nauto make_second(int s) -> std::tm {\n  auto time = make_tm();\n  time.tm_sec = s;\n  return time;\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/chrono-test.cc"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 6,
                  "endLine": 49,
                  "endColumn": 12,
                  "snippet": {
                    "text": "}\n\nauto make_minute(int m) -> std::tm {\n  auto time = make_tm();\n  time.tm_min = m;\n  return time;\n}\n",
                    "rendered": {
                      "text": "}\n\nauto make_minute(int m) -> std::tm {\n  auto time = make_tm();\n  time.tm_min = m;\n  return time;\n}\n",
                      "markdown": "`}\n\nauto make_minute(int m) -> std::tm {\n  auto time = make_tm();\n  time.tm_min = m;\n  return time;\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/chrono-test.cc"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 6,
                  "endLine": 43,
                  "endColumn": 12,
                  "snippet": {
                    "text": "}\n\nauto make_hour(int h) -> std::tm {\n  auto time = make_tm();\n  time.tm_hour = h;\n  return time;\n}\n",
                    "rendered": {
                      "text": "}\n\nauto make_hour(int h) -> std::tm {\n  auto time = make_tm();\n  time.tm_hour = h;\n  return time;\n}\n",
                      "markdown": "`}\n\nauto make_hour(int h) -> std::tm {\n  auto time = make_tm();\n  time.tm_hour = h;\n  return time;\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/chrono-test.cc"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 6,
                  "endLine": 37,
                  "endColumn": 12,
                  "snippet": {
                    "text": "#endif\n\nauto make_tm() -> std::tm {\n  auto time = std::tm();\n  time.tm_mday = 1;\n  return time;\n}\n",
                    "rendered": {
                      "text": "#endif\n\nauto make_tm() -> std::tm {\n  auto time = std::tm();\n  time.tm_mday = 1;\n  return time;\n}\n",
                      "markdown": "`#endif\n\nauto make_tm() -> std::tm {\n  auto time = std::tm();\n  time.tm_mday = 1;\n  return time;\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/chrono-test.cc"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 31,
                  "endLine": 1,
                  "endColumn": 37,
                  "snippet": {
                    "text": "// Formatting library for C++ - time formatting tests\n//\n// Copyright (c) 2012 - present, Victor Zverovich\n// All rights reserved.\n",
                    "rendered": {
                      "text": "// Formatting library for C++ - time formatting tests\n//\n// Copyright (c) 2012 - present, Victor Zverovich\n// All rights reserved.\n",
                      "markdown": "`// Formatting library for C++ - time formatting tests\n//\n// Copyright (c) 2012 - present, Victor Zverovich\n// All rights reserved.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/module-test.cc"
                },
                "region": {
                  "startLine": 486,
                  "startColumn": 34,
                  "endLine": 486,
                  "endColumn": 39,
                  "snippet": {
                    "text": "}\n\nTEST(module_test, buffered_file) {\n  EXPECT_TRUE(fmt::buffered_file{}.get() == nullptr);\n}\n\nTEST(module_test, output_file) {\n",
                    "rendered": {
                      "text": "}\n\nTEST(module_test, buffered_file) {\n  EXPECT_TRUE(fmt::buffered_file{}.get() == nullptr);\n}\n\nTEST(module_test, output_file) {\n",
                      "markdown": "`}\n\nTEST(module_test, buffered_file) {\n  EXPECT_TRUE(fmt::buffered_file{}.get() == nullptr);\n}\n\nTEST(module_test, output_file) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/module-test.cc"
                },
                "region": {
                  "startLine": 338,
                  "startColumn": 8,
                  "endLine": 338,
                  "endColumn": 13,
                  "snippet": {
                    "text": "  EXPECT_EQ(\"0x2a\", fmt::to_string(fmt::ptr(up)));\n  up.release();\n  auto sp = std::make_shared<int>(0);\n  p = sp.get();\n  EXPECT_EQ(fmt::to_string(fmt::ptr(p)), fmt::to_string(fmt::ptr(sp)));\n}\n\n",
                    "rendered": {
                      "text": "  EXPECT_EQ(\"0x2a\", fmt::to_string(fmt::ptr(up)));\n  up.release();\n  auto sp = std::make_shared<int>(0);\n  p = sp.get();\n  EXPECT_EQ(fmt::to_string(fmt::ptr(p)), fmt::to_string(fmt::ptr(sp)));\n}\n\n",
                      "markdown": "`  EXPECT_EQ(\"0x2a\", fmt::to_string(fmt::ptr(up)));\n  up.release();\n  auto sp = std::make_shared<int>(0);\n  p = sp.get();\n  EXPECT_EQ(fmt::to_string(fmt::ptr(p)), fmt::to_string(fmt::ptr(sp)));\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/module-test.cc"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 19,
                  "endLine": 200,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  wdyn_store.push_back(fmt::arg(L\"a42\", 42));\n  fmt::basic_format_args wargs = wdyn_store;\n  EXPECT_FALSE(wargs.get(3));\n  EXPECT_TRUE(wargs.get(fmt::wstring_view(L\"a42\")));\n}\n\nTEST(module_test, vformat) {\n",
                    "rendered": {
                      "text": "  wdyn_store.push_back(fmt::arg(L\"a42\", 42));\n  fmt::basic_format_args wargs = wdyn_store;\n  EXPECT_FALSE(wargs.get(3));\n  EXPECT_TRUE(wargs.get(fmt::wstring_view(L\"a42\")));\n}\n\nTEST(module_test, vformat) {\n",
                      "markdown": "`  wdyn_store.push_back(fmt::arg(L\"a42\", 42));\n  fmt::basic_format_args wargs = wdyn_store;\n  EXPECT_FALSE(wargs.get(3));\n  EXPECT_TRUE(wargs.get(fmt::wstring_view(L\"a42\")));\n}\n\nTEST(module_test, vformat) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/module-test.cc"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 20,
                  "endLine": 199,
                  "endColumn": 25,
                  "snippet": {
                    "text": "  fmt::dynamic_format_arg_store<fmt::wformat_context> wdyn_store;\n  wdyn_store.push_back(fmt::arg(L\"a42\", 42));\n  fmt::basic_format_args wargs = wdyn_store;\n  EXPECT_FALSE(wargs.get(3));\n  EXPECT_TRUE(wargs.get(fmt::wstring_view(L\"a42\")));\n}\n\n",
                    "rendered": {
                      "text": "  fmt::dynamic_format_arg_store<fmt::wformat_context> wdyn_store;\n  wdyn_store.push_back(fmt::arg(L\"a42\", 42));\n  fmt::basic_format_args wargs = wdyn_store;\n  EXPECT_FALSE(wargs.get(3));\n  EXPECT_TRUE(wargs.get(fmt::wstring_view(L\"a42\")));\n}\n\n",
                      "markdown": "`  fmt::dynamic_format_arg_store<fmt::wformat_context> wdyn_store;\n  wdyn_store.push_back(fmt::arg(L\"a42\", 42));\n  fmt::basic_format_args wargs = wdyn_store;\n  EXPECT_FALSE(wargs.get(3));\n  EXPECT_TRUE(wargs.get(fmt::wstring_view(L\"a42\")));\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/module-test.cc"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 18,
                  "endLine": 194,
                  "endColumn": 23,
                  "snippet": {
                    "text": "  dyn_store.push_back(fmt::arg(\"a42\", 42));\n  fmt::basic_format_args args = dyn_store;\n  EXPECT_FALSE(args.get(3));\n  EXPECT_TRUE(args.get(fmt::string_view(\"a42\")));\n\n  fmt::dynamic_format_arg_store<fmt::wformat_context> wdyn_store;\n  wdyn_store.push_back(fmt::arg(L\"a42\", 42));\n",
                    "rendered": {
                      "text": "  dyn_store.push_back(fmt::arg(\"a42\", 42));\n  fmt::basic_format_args args = dyn_store;\n  EXPECT_FALSE(args.get(3));\n  EXPECT_TRUE(args.get(fmt::string_view(\"a42\")));\n\n  fmt::dynamic_format_arg_store<fmt::wformat_context> wdyn_store;\n  wdyn_store.push_back(fmt::arg(L\"a42\", 42));\n",
                      "markdown": "`  dyn_store.push_back(fmt::arg(\"a42\", 42));\n  fmt::basic_format_args args = dyn_store;\n  EXPECT_FALSE(args.get(3));\n  EXPECT_TRUE(args.get(fmt::string_view(\"a42\")));\n\n  fmt::dynamic_format_arg_store<fmt::wformat_context> wdyn_store;\n  wdyn_store.push_back(fmt::arg(L\"a42\", 42));\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/module-test.cc"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 19,
                  "endLine": 193,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  fmt::dynamic_format_arg_store<fmt::format_context> dyn_store;\n  dyn_store.push_back(fmt::arg(\"a42\", 42));\n  fmt::basic_format_args args = dyn_store;\n  EXPECT_FALSE(args.get(3));\n  EXPECT_TRUE(args.get(fmt::string_view(\"a42\")));\n\n  fmt::dynamic_format_arg_store<fmt::wformat_context> wdyn_store;\n",
                    "rendered": {
                      "text": "  fmt::dynamic_format_arg_store<fmt::format_context> dyn_store;\n  dyn_store.push_back(fmt::arg(\"a42\", 42));\n  fmt::basic_format_args args = dyn_store;\n  EXPECT_FALSE(args.get(3));\n  EXPECT_TRUE(args.get(fmt::string_view(\"a42\")));\n\n  fmt::dynamic_format_arg_store<fmt::wformat_context> wdyn_store;\n",
                      "markdown": "`  fmt::dynamic_format_arg_store<fmt::format_context> dyn_store;\n  dyn_store.push_back(fmt::arg(\"a42\", 42));\n  fmt::basic_format_args args = dyn_store;\n  EXPECT_FALSE(args.get(3));\n  EXPECT_TRUE(args.get(fmt::string_view(\"a42\")));\n\n  fmt::dynamic_format_arg_store<fmt::wformat_context> wdyn_store;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/module-test.cc"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 18,
                  "endLine": 186,
                  "endColumn": 23,
                  "snippet": {
                    "text": "  auto no_args = fmt::wformat_args();\n  EXPECT_FALSE(no_args.get(1));\n  fmt::basic_format_args args = fmt::make_wformat_args(42);\n  EXPECT_TRUE(args.get(0));\n}\n\nTEST(module_test, dynamic_format_args) {\n",
                    "rendered": {
                      "text": "  auto no_args = fmt::wformat_args();\n  EXPECT_FALSE(no_args.get(1));\n  fmt::basic_format_args args = fmt::make_wformat_args(42);\n  EXPECT_TRUE(args.get(0));\n}\n\nTEST(module_test, dynamic_format_args) {\n",
                      "markdown": "`  auto no_args = fmt::wformat_args();\n  EXPECT_FALSE(no_args.get(1));\n  fmt::basic_format_args args = fmt::make_wformat_args(42);\n  EXPECT_TRUE(args.get(0));\n}\n\nTEST(module_test, dynamic_format_args) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/module-test.cc"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 22,
                  "endLine": 184,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\nTEST(module_test, wformat_args) {\n  auto no_args = fmt::wformat_args();\n  EXPECT_FALSE(no_args.get(1));\n  fmt::basic_format_args args = fmt::make_wformat_args(42);\n  EXPECT_TRUE(args.get(0));\n}\n",
                    "rendered": {
                      "text": "\nTEST(module_test, wformat_args) {\n  auto no_args = fmt::wformat_args();\n  EXPECT_FALSE(no_args.get(1));\n  fmt::basic_format_args args = fmt::make_wformat_args(42);\n  EXPECT_TRUE(args.get(0));\n}\n",
                      "markdown": "`\nTEST(module_test, wformat_args) {\n  auto no_args = fmt::wformat_args();\n  EXPECT_FALSE(no_args.get(1));\n  fmt::basic_format_args args = fmt::make_wformat_args(42);\n  EXPECT_TRUE(args.get(0));\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/module-test.cc"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 18,
                  "endLine": 175,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n  fmt::basic_format_args args = fmt::make_format_args(42);\n  EXPECT_TRUE(args.max_size() > 0);\n  auto arg0 = args.get(0);\n  EXPECT_TRUE(arg0);\n  decltype(arg0) arg_none;\n  EXPECT_FALSE(arg_none);\n",
                    "rendered": {
                      "text": "\n  fmt::basic_format_args args = fmt::make_format_args(42);\n  EXPECT_TRUE(args.max_size() > 0);\n  auto arg0 = args.get(0);\n  EXPECT_TRUE(arg0);\n  decltype(arg0) arg_none;\n  EXPECT_FALSE(arg_none);\n",
                      "markdown": "`\n  fmt::basic_format_args args = fmt::make_format_args(42);\n  EXPECT_TRUE(args.max_size() > 0);\n  auto arg0 = args.get(0);\n  EXPECT_TRUE(arg0);\n  decltype(arg0) arg_none;\n  EXPECT_FALSE(arg_none);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/module-test.cc"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 22,
                  "endLine": 171,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\nTEST(module_test, format_args) {\n  auto no_args = fmt::format_args();\n  EXPECT_FALSE(no_args.get(1));\n\n  fmt::basic_format_args args = fmt::make_format_args(42);\n  EXPECT_TRUE(args.max_size() > 0);\n",
                    "rendered": {
                      "text": "\nTEST(module_test, format_args) {\n  auto no_args = fmt::format_args();\n  EXPECT_FALSE(no_args.get(1));\n\n  fmt::basic_format_args args = fmt::make_format_args(42);\n  EXPECT_TRUE(args.max_size() > 0);\n",
                      "markdown": "`\nTEST(module_test, format_args) {\n  auto no_args = fmt::format_args();\n  EXPECT_FALSE(no_args.get(1));\n\n  fmt::basic_format_args args = fmt::make_format_args(42);\n  EXPECT_TRUE(args.max_size() > 0);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/module-test.cc"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 44,
                  "endLine": 105,
                  "endColumn": 48,
                  "snippet": {
                    "text": "// but rather visibility of all client-facing overloads, reachability of\n// non-exported entities, name lookup and overload resolution within\n// template instantitions.\n// Exercise all exported entities of the API at least once.\n// Instantiate as many code paths as possible.\n\nTEST(module_test, to_string) {\n",
                    "rendered": {
                      "text": "// but rather visibility of all client-facing overloads, reachability of\n// non-exported entities, name lookup and overload resolution within\n// template instantitions.\n// Exercise all exported entities of the API at least once.\n// Instantiate as many code paths as possible.\n\nTEST(module_test, to_string) {\n",
                      "markdown": "`// but rather visibility of all client-facing overloads, reachability of\n// non-exported entities, name lookup and overload resolution within\n// template instantitions.\n// Exercise all exported entities of the API at least once.\n// Instantiate as many code paths as possible.\n\nTEST(module_test, to_string) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/module-test.cc"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 22,
                  "endLine": 71,
                  "endColumn": 26,
                  "snippet": {
                    "text": "bool namespace_detail_invisible() {\n#if defined(FMT_HIDE_MODULE_BUGS) && defined(_MSC_FULL_VER) && \\\n    _MSC_FULL_VER <= 193700000\n  // bug in msvc up to at least 17.7:\n\n  // the namespace is visible even when it is neither\n  // implicitly nor explicitly exported\n",
                    "rendered": {
                      "text": "bool namespace_detail_invisible() {\n#if defined(FMT_HIDE_MODULE_BUGS) && defined(_MSC_FULL_VER) && \\\n    _MSC_FULL_VER <= 193700000\n  // bug in msvc up to at least 17.7:\n\n  // the namespace is visible even when it is neither\n  // implicitly nor explicitly exported\n",
                      "markdown": "`bool namespace_detail_invisible() {\n#if defined(FMT_HIDE_MODULE_BUGS) && defined(_MSC_FULL_VER) && \\\n    _MSC_FULL_VER <= 193700000\n  // bug in msvc up to at least 17.7:\n\n  // the namespace is visible even when it is neither\n  // implicitly nor explicitly exported\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/module-test.cc"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 15,
                  "endLine": 83,
                  "snippet": {
                    "text": "  return !oops_detail_namespace_is_visible;\n#endif\n}\n}  // namespace fmt\n\n// the non-exported namespace 'detail' must be invisible [module.interface]/2\nTEST(module_test, detail_namespace) {\n  EXPECT_TRUE(fmt::namespace_detail_invisible());\n",
                    "rendered": {
                      "text": "  return !oops_detail_namespace_is_visible;\n#endif\n}\n}  // namespace fmt\n\n// the non-exported namespace 'detail' must be invisible [module.interface]/2\nTEST(module_test, detail_namespace) {\n  EXPECT_TRUE(fmt::namespace_detail_invisible());\n",
                      "markdown": "`  return !oops_detail_namespace_is_visible;\n#endif\n}\n}  // namespace fmt\n\n// the non-exported namespace 'detail' must be invisible [module.interface]/2\nTEST(module_test, detail_namespace) {\n  EXPECT_TRUE(fmt::namespace_detail_invisible());\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/module-test.cc"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 9,
                  "endLine": 67,
                  "endColumn": 14,
                  "snippet": {
                    "text": "bool oops_detail_namespace_is_visible;\n}\n\nnamespace fmt {\nbool namespace_detail_invisible() {\n#if defined(FMT_HIDE_MODULE_BUGS) && defined(_MSC_FULL_VER) && \\\n    _MSC_FULL_VER <= 193700000\n",
                    "rendered": {
                      "text": "bool oops_detail_namespace_is_visible;\n}\n\nnamespace fmt {\nbool namespace_detail_invisible() {\n#if defined(FMT_HIDE_MODULE_BUGS) && defined(_MSC_FULL_VER) && \\\n    _MSC_FULL_VER <= 193700000\n",
                      "markdown": "`bool oops_detail_namespace_is_visible;\n}\n\nnamespace fmt {\nbool namespace_detail_invisible() {\n#if defined(FMT_HIDE_MODULE_BUGS) && defined(_MSC_FULL_VER) && \\\n    _MSC_FULL_VER <= 193700000\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/os-test.cc"
                },
                "region": {
                  "startLine": 514,
                  "startColumn": 63,
                  "endLine": 514,
                  "endColumn": 68,
                  "snippet": {
                    "text": "TEST(file_test, fdopen) {\n  auto pipe = fmt::pipe();\n  int read_fd = pipe.read_end.descriptor();\n  EXPECT_EQ(read_fd, FMT_POSIX(fileno(pipe.read_end.fdopen(\"r\").get())));\n}\n#endif  // FMT_USE_FCNTL\n",
                    "rendered": {
                      "text": "TEST(file_test, fdopen) {\n  auto pipe = fmt::pipe();\n  int read_fd = pipe.read_end.descriptor();\n  EXPECT_EQ(read_fd, FMT_POSIX(fileno(pipe.read_end.fdopen(\"r\").get())));\n}\n#endif  // FMT_USE_FCNTL\n",
                      "markdown": "`TEST(file_test, fdopen) {\n  auto pipe = fmt::pipe();\n  int read_fd = pipe.read_end.descriptor();\n  EXPECT_EQ(read_fd, FMT_POSIX(fileno(pipe.read_end.fdopen(\"r\").get())));\n}\n#endif  // FMT_USE_FCNTL\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/os-test.cc"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 15,
                  "endLine": 228,
                  "endColumn": 20,
                  "snippet": {
                    "text": "  buffered_file f = open_buffered_file();\n  FMT_POSIX(close(f.descriptor()));\n  EXPECT_SYSTEM_ERROR_NOASSERT(f.close(), EBADF, \"cannot close file\");\n  EXPECT_TRUE(f.get() == nullptr);\n}\n\nTEST(buffered_file_test, descriptor) {\n",
                    "rendered": {
                      "text": "  buffered_file f = open_buffered_file();\n  FMT_POSIX(close(f.descriptor()));\n  EXPECT_SYSTEM_ERROR_NOASSERT(f.close(), EBADF, \"cannot close file\");\n  EXPECT_TRUE(f.get() == nullptr);\n}\n\nTEST(buffered_file_test, descriptor) {\n",
                      "markdown": "`  buffered_file f = open_buffered_file();\n  FMT_POSIX(close(f.descriptor()));\n  EXPECT_SYSTEM_ERROR_NOASSERT(f.close(), EBADF, \"cannot close file\");\n  EXPECT_TRUE(f.get() == nullptr);\n}\n\nTEST(buffered_file_test, descriptor) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/os-test.cc"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 15,
                  "endLine": 220,
                  "endColumn": 20,
                  "snippet": {
                    "text": "  buffered_file f = open_buffered_file();\n  int fd = f.descriptor();\n  f.close();\n  EXPECT_TRUE(f.get() == nullptr);\n  EXPECT_TRUE(isclosed(fd));\n}\n\n",
                    "rendered": {
                      "text": "  buffered_file f = open_buffered_file();\n  int fd = f.descriptor();\n  f.close();\n  EXPECT_TRUE(f.get() == nullptr);\n  EXPECT_TRUE(isclosed(fd));\n}\n\n",
                      "markdown": "`  buffered_file f = open_buffered_file();\n  int fd = f.descriptor();\n  f.close();\n  EXPECT_TRUE(f.get() == nullptr);\n  EXPECT_TRUE(isclosed(fd));\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/os-test.cc"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 17,
                  "endLine": 181,
                  "endColumn": 22,
                  "snippet": {
                    "text": "  FILE* fp = nullptr;\n  auto f = buffered_file();\n  f = open_buffered_file(&fp);\n  EXPECT_EQ(fp, f.get());\n}\n\nTEST(buffered_file_test, move_from_temporary_in_assignment_closes_file) {\n",
                    "rendered": {
                      "text": "  FILE* fp = nullptr;\n  auto f = buffered_file();\n  f = open_buffered_file(&fp);\n  EXPECT_EQ(fp, f.get());\n}\n\nTEST(buffered_file_test, move_from_temporary_in_assignment_closes_file) {\n",
                      "markdown": "`  FILE* fp = nullptr;\n  auto f = buffered_file();\n  f = open_buffered_file(&fp);\n  EXPECT_EQ(fp, f.get());\n}\n\nTEST(buffered_file_test, move_from_temporary_in_assignment_closes_file) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/os-test.cc"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 17,
                  "endLine": 174,
                  "endColumn": 22,
                  "snippet": {
                    "text": "TEST(buffered_file_test, move_from_temporary_in_ctor) {\n  FILE* fp = nullptr;\n  buffered_file f = open_buffered_file(&fp);\n  EXPECT_EQ(fp, f.get());\n}\n\nTEST(buffered_file_test, move_from_temporary_in_assignment) {\n",
                    "rendered": {
                      "text": "TEST(buffered_file_test, move_from_temporary_in_ctor) {\n  FILE* fp = nullptr;\n  buffered_file f = open_buffered_file(&fp);\n  EXPECT_EQ(fp, f.get());\n}\n\nTEST(buffered_file_test, move_from_temporary_in_assignment) {\n",
                      "markdown": "`TEST(buffered_file_test, move_from_temporary_in_ctor) {\n  FILE* fp = nullptr;\n  buffered_file f = open_buffered_file(&fp);\n  EXPECT_EQ(fp, f.get());\n}\n\nTEST(buffered_file_test, move_from_temporary_in_assignment) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/os-test.cc"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 16,
                  "endLine": 160,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  buffered_file bf2;\n  bf2 = std::move(bf);\n  EXPECT_EQ(fp, bf2.get());\n  EXPECT_TRUE(bf.get() == nullptr);\n}\n\nTEST(buffered_file_test, move_assignment_closes_file) {\n",
                    "rendered": {
                      "text": "  buffered_file bf2;\n  bf2 = std::move(bf);\n  EXPECT_EQ(fp, bf2.get());\n  EXPECT_TRUE(bf.get() == nullptr);\n}\n\nTEST(buffered_file_test, move_assignment_closes_file) {\n",
                      "markdown": "`  buffered_file bf2;\n  bf2 = std::move(bf);\n  EXPECT_EQ(fp, bf2.get());\n  EXPECT_TRUE(bf.get() == nullptr);\n}\n\nTEST(buffered_file_test, move_assignment_closes_file) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/os-test.cc"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 19,
                  "endLine": 159,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  EXPECT_TRUE(fp != nullptr);\n  buffered_file bf2;\n  bf2 = std::move(bf);\n  EXPECT_EQ(fp, bf2.get());\n  EXPECT_TRUE(bf.get() == nullptr);\n}\n\n",
                    "rendered": {
                      "text": "  EXPECT_TRUE(fp != nullptr);\n  buffered_file bf2;\n  bf2 = std::move(bf);\n  EXPECT_EQ(fp, bf2.get());\n  EXPECT_TRUE(bf.get() == nullptr);\n}\n\n",
                      "markdown": "`  EXPECT_TRUE(fp != nullptr);\n  buffered_file bf2;\n  bf2 = std::move(bf);\n  EXPECT_EQ(fp, bf2.get());\n  EXPECT_TRUE(bf.get() == nullptr);\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/os-test.cc"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 15,
                  "endLine": 155,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\nTEST(buffered_file_test, move_assignment) {\n  buffered_file bf = open_buffered_file();\n  FILE* fp = bf.get();\n  EXPECT_TRUE(fp != nullptr);\n  buffered_file bf2;\n  bf2 = std::move(bf);\n",
                    "rendered": {
                      "text": "\nTEST(buffered_file_test, move_assignment) {\n  buffered_file bf = open_buffered_file();\n  FILE* fp = bf.get();\n  EXPECT_TRUE(fp != nullptr);\n  buffered_file bf2;\n  bf2 = std::move(bf);\n",
                      "markdown": "`\nTEST(buffered_file_test, move_assignment) {\n  buffered_file bf = open_buffered_file();\n  FILE* fp = bf.get();\n  EXPECT_TRUE(fp != nullptr);\n  buffered_file bf2;\n  bf2 = std::move(bf);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/os-test.cc"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 16,
                  "endLine": 150,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  EXPECT_TRUE(fp != nullptr);\n  buffered_file bf2(std::move(bf));\n  EXPECT_EQ(fp, bf2.get());\n  EXPECT_TRUE(bf.get() == nullptr);\n}\n\nTEST(buffered_file_test, move_assignment) {\n",
                    "rendered": {
                      "text": "  EXPECT_TRUE(fp != nullptr);\n  buffered_file bf2(std::move(bf));\n  EXPECT_EQ(fp, bf2.get());\n  EXPECT_TRUE(bf.get() == nullptr);\n}\n\nTEST(buffered_file_test, move_assignment) {\n",
                      "markdown": "`  EXPECT_TRUE(fp != nullptr);\n  buffered_file bf2(std::move(bf));\n  EXPECT_EQ(fp, bf2.get());\n  EXPECT_TRUE(bf.get() == nullptr);\n}\n\nTEST(buffered_file_test, move_assignment) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/os-test.cc"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 19,
                  "endLine": 149,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  FILE* fp = bf.get();\n  EXPECT_TRUE(fp != nullptr);\n  buffered_file bf2(std::move(bf));\n  EXPECT_EQ(fp, bf2.get());\n  EXPECT_TRUE(bf.get() == nullptr);\n}\n\n",
                    "rendered": {
                      "text": "  FILE* fp = bf.get();\n  EXPECT_TRUE(fp != nullptr);\n  buffered_file bf2(std::move(bf));\n  EXPECT_EQ(fp, bf2.get());\n  EXPECT_TRUE(bf.get() == nullptr);\n}\n\n",
                      "markdown": "`  FILE* fp = bf.get();\n  EXPECT_TRUE(fp != nullptr);\n  buffered_file bf2(std::move(bf));\n  EXPECT_EQ(fp, bf2.get());\n  EXPECT_TRUE(bf.get() == nullptr);\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/os-test.cc"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 15,
                  "endLine": 146,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\nTEST(buffered_file_test, move_ctor) {\n  buffered_file bf = open_buffered_file();\n  FILE* fp = bf.get();\n  EXPECT_TRUE(fp != nullptr);\n  buffered_file bf2(std::move(bf));\n  EXPECT_EQ(fp, bf2.get());\n",
                    "rendered": {
                      "text": "\nTEST(buffered_file_test, move_ctor) {\n  buffered_file bf = open_buffered_file();\n  FILE* fp = bf.get();\n  EXPECT_TRUE(fp != nullptr);\n  buffered_file bf2(std::move(bf));\n  EXPECT_EQ(fp, bf2.get());\n",
                      "markdown": "`\nTEST(buffered_file_test, move_ctor) {\n  buffered_file bf = open_buffered_file();\n  FILE* fp = bf.get();\n  EXPECT_TRUE(fp != nullptr);\n  buffered_file bf2(std::move(bf));\n  EXPECT_EQ(fp, bf2.get());\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/test/os-test.cc"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 15,
                  "endLine": 141,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\nTEST(buffered_file_test, default_ctor) {\n  auto f = buffered_file();\n  EXPECT_TRUE(f.get() == nullptr);\n}\n\nTEST(buffered_file_test, move_ctor) {\n",
                    "rendered": {
                      "text": "\nTEST(buffered_file_test, default_ctor) {\n  auto f = buffered_file();\n  EXPECT_TRUE(f.get() == nullptr);\n}\n\nTEST(buffered_file_test, move_ctor) {\n",
                      "markdown": "`\nTEST(buffered_file_test, default_ctor) {\n  auto f = buffered_file();\n  EXPECT_TRUE(f.get() == nullptr);\n}\n\nTEST(buffered_file_test, move_ctor) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format.h"
                },
                "region": {
                  "startLine": 1059,
                  "startColumn": 16,
                  "endLine": 1059,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    return args_.get(id);\n  }\n  auto arg(basic_string_view<Char> name) -> basic_format_arg<generic_context> {\n    return args_.get(name);\n  }\n  FMT_CONSTEXPR auto arg_id(basic_string_view<Char> name) -> int {\n    return args_.get_id(name);\n",
                    "rendered": {
                      "text": "    return args_.get(id);\n  }\n  auto arg(basic_string_view<Char> name) -> basic_format_arg<generic_context> {\n    return args_.get(name);\n  }\n  FMT_CONSTEXPR auto arg_id(basic_string_view<Char> name) -> int {\n    return args_.get_id(name);\n",
                      "markdown": "`    return args_.get(id);\n  }\n  auto arg(basic_string_view<Char> name) -> basic_format_arg<generic_context> {\n    return args_.get(name);\n  }\n  FMT_CONSTEXPR auto arg_id(basic_string_view<Char> name) -> int {\n    return args_.get_id(name);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format.h"
                },
                "region": {
                  "startLine": 1056,
                  "startColumn": 16,
                  "endLine": 1056,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  void operator=(const generic_context&) = delete;\n\n  constexpr auto arg(int id) const -> basic_format_arg<generic_context> {\n    return args_.get(id);\n  }\n  auto arg(basic_string_view<Char> name) -> basic_format_arg<generic_context> {\n    return args_.get(name);\n",
                    "rendered": {
                      "text": "  void operator=(const generic_context&) = delete;\n\n  constexpr auto arg(int id) const -> basic_format_arg<generic_context> {\n    return args_.get(id);\n  }\n  auto arg(basic_string_view<Char> name) -> basic_format_arg<generic_context> {\n    return args_.get(name);\n",
                      "markdown": "`  void operator=(const generic_context&) = delete;\n\n  constexpr auto arg(int id) const -> basic_format_arg<generic_context> {\n    return args_.get(id);\n  }\n  auto arg(basic_string_view<Char> name) -> basic_format_arg<generic_context> {\n    return args_.get(name);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format.h"
                },
                "region": {
                  "startLine": 1159,
                  "startColumn": 6,
                  "endLine": 1159,
                  "endColumn": 48,
                  "snippet": {
                    "text": "      \"2021222324252627282930313233343536373839\"\n      \"4041424344454647484950515253545556575859\"\n      \"6061626364656667686970717273747576777879\"\n      \"8081828384858687888990919293949596979899\";\n  return &data[value * 2];\n}\n\n",
                    "rendered": {
                      "text": "      \"2021222324252627282930313233343536373839\"\n      \"4041424344454647484950515253545556575859\"\n      \"6061626364656667686970717273747576777879\"\n      \"8081828384858687888990919293949596979899\";\n  return &data[value * 2];\n}\n\n",
                      "markdown": "`      \"2021222324252627282930313233343536373839\"\n      \"4041424344454647484950515253545556575859\"\n      \"6061626364656667686970717273747576777879\"\n      \"8081828384858687888990919293949596979899\";\n  return &data[value * 2];\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format.h"
                },
                "region": {
                  "startLine": 1158,
                  "startColumn": 6,
                  "endLine": 1158,
                  "endColumn": 48,
                  "snippet": {
                    "text": "      \"0001020304050607080910111213141516171819\"\n      \"2021222324252627282930313233343536373839\"\n      \"4041424344454647484950515253545556575859\"\n      \"6061626364656667686970717273747576777879\"\n      \"8081828384858687888990919293949596979899\";\n  return &data[value * 2];\n}\n",
                    "rendered": {
                      "text": "      \"0001020304050607080910111213141516171819\"\n      \"2021222324252627282930313233343536373839\"\n      \"4041424344454647484950515253545556575859\"\n      \"6061626364656667686970717273747576777879\"\n      \"8081828384858687888990919293949596979899\";\n  return &data[value * 2];\n}\n",
                      "markdown": "`      \"0001020304050607080910111213141516171819\"\n      \"2021222324252627282930313233343536373839\"\n      \"4041424344454647484950515253545556575859\"\n      \"6061626364656667686970717273747576777879\"\n      \"8081828384858687888990919293949596979899\";\n  return &data[value * 2];\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format.h"
                },
                "region": {
                  "startLine": 1157,
                  "startColumn": 6,
                  "endLine": 1157,
                  "endColumn": 48,
                  "snippet": {
                    "text": "  alignas(2) static const char data[] =\n      \"0001020304050607080910111213141516171819\"\n      \"2021222324252627282930313233343536373839\"\n      \"4041424344454647484950515253545556575859\"\n      \"6061626364656667686970717273747576777879\"\n      \"8081828384858687888990919293949596979899\";\n  return &data[value * 2];\n",
                    "rendered": {
                      "text": "  alignas(2) static const char data[] =\n      \"0001020304050607080910111213141516171819\"\n      \"2021222324252627282930313233343536373839\"\n      \"4041424344454647484950515253545556575859\"\n      \"6061626364656667686970717273747576777879\"\n      \"8081828384858687888990919293949596979899\";\n  return &data[value * 2];\n",
                      "markdown": "`  alignas(2) static const char data[] =\n      \"0001020304050607080910111213141516171819\"\n      \"2021222324252627282930313233343536373839\"\n      \"4041424344454647484950515253545556575859\"\n      \"6061626364656667686970717273747576777879\"\n      \"8081828384858687888990919293949596979899\";\n  return &data[value * 2];\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format.h"
                },
                "region": {
                  "startLine": 1156,
                  "startColumn": 6,
                  "endLine": 1156,
                  "endColumn": 48,
                  "snippet": {
                    "text": "  // hardware-specific boundary.\n  alignas(2) static const char data[] =\n      \"0001020304050607080910111213141516171819\"\n      \"2021222324252627282930313233343536373839\"\n      \"4041424344454647484950515253545556575859\"\n      \"6061626364656667686970717273747576777879\"\n      \"8081828384858687888990919293949596979899\";\n",
                    "rendered": {
                      "text": "  // hardware-specific boundary.\n  alignas(2) static const char data[] =\n      \"0001020304050607080910111213141516171819\"\n      \"2021222324252627282930313233343536373839\"\n      \"4041424344454647484950515253545556575859\"\n      \"6061626364656667686970717273747576777879\"\n      \"8081828384858687888990919293949596979899\";\n",
                      "markdown": "`  // hardware-specific boundary.\n  alignas(2) static const char data[] =\n      \"0001020304050607080910111213141516171819\"\n      \"2021222324252627282930313233343536373839\"\n      \"4041424344454647484950515253545556575859\"\n      \"6061626364656667686970717273747576777879\"\n      \"8081828384858687888990919293949596979899\";\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format.h"
                },
                "region": {
                  "startLine": 1155,
                  "startColumn": 6,
                  "endLine": 1155,
                  "endColumn": 48,
                  "snippet": {
                    "text": "  // Align data since unaligned access may be slower when crossing a\n  // hardware-specific boundary.\n  alignas(2) static const char data[] =\n      \"0001020304050607080910111213141516171819\"\n      \"2021222324252627282930313233343536373839\"\n      \"4041424344454647484950515253545556575859\"\n      \"6061626364656667686970717273747576777879\"\n",
                    "rendered": {
                      "text": "  // Align data since unaligned access may be slower when crossing a\n  // hardware-specific boundary.\n  alignas(2) static const char data[] =\n      \"0001020304050607080910111213141516171819\"\n      \"2021222324252627282930313233343536373839\"\n      \"4041424344454647484950515253545556575859\"\n      \"6061626364656667686970717273747576777879\"\n",
                      "markdown": "`  // Align data since unaligned access may be slower when crossing a\n  // hardware-specific boundary.\n  alignas(2) static const char data[] =\n      \"0001020304050607080910111213141516171819\"\n      \"2021222324252627282930313233343536373839\"\n      \"4041424344454647484950515253545556575859\"\n      \"6061626364656667686970717273747576777879\"\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format.h"
                },
                "region": {
                  "startLine": 1856,
                  "startColumn": 41,
                  "endLine": 1856,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    -> find_escape_result<Char> {\n  for (; begin != end; ++begin) {\n    uint32_t cp = static_cast<unsigned_char<Char>>(*begin);\n    if (const_check(sizeof(Char) == 1) && cp >= 0x80) continue;\n    if (needs_escape(cp)) return {begin, begin + 1, cp};\n  }\n  return {begin, nullptr, 0};\n",
                    "rendered": {
                      "text": "    -> find_escape_result<Char> {\n  for (; begin != end; ++begin) {\n    uint32_t cp = static_cast<unsigned_char<Char>>(*begin);\n    if (const_check(sizeof(Char) == 1) && cp >= 0x80) continue;\n    if (needs_escape(cp)) return {begin, begin + 1, cp};\n  }\n  return {begin, nullptr, 0};\n",
                      "markdown": "`    -> find_escape_result<Char> {\n  for (; begin != end; ++begin) {\n    uint32_t cp = static_cast<unsigned_char<Char>>(*begin);\n    if (const_check(sizeof(Char) == 1) && cp >= 0x80) continue;\n    if (needs_escape(cp)) return {begin, begin + 1, cp};\n  }\n  return {begin, nullptr, 0};\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format.h"
                },
                "region": {
                  "startLine": 1855,
                  "startColumn": 12,
                  "endLine": 1855,
                  "endColumn": 16,
                  "snippet": {
                    "text": "auto find_escape(const Char* begin, const Char* end)\n    -> find_escape_result<Char> {\n  for (; begin != end; ++begin) {\n    uint32_t cp = static_cast<unsigned_char<Char>>(*begin);\n    if (const_check(sizeof(Char) == 1) && cp >= 0x80) continue;\n    if (needs_escape(cp)) return {begin, begin + 1, cp};\n  }\n",
                    "rendered": {
                      "text": "auto find_escape(const Char* begin, const Char* end)\n    -> find_escape_result<Char> {\n  for (; begin != end; ++begin) {\n    uint32_t cp = static_cast<unsigned_char<Char>>(*begin);\n    if (const_check(sizeof(Char) == 1) && cp >= 0x80) continue;\n    if (needs_escape(cp)) return {begin, begin + 1, cp};\n  }\n",
                      "markdown": "`auto find_escape(const Char* begin, const Char* end)\n    -> find_escape_result<Char> {\n  for (; begin != end; ++begin) {\n    uint32_t cp = static_cast<unsigned_char<Char>>(*begin);\n    if (const_check(sizeof(Char) == 1) && cp >= 0x80) continue;\n    if (needs_escape(cp)) return {begin, begin + 1, cp};\n  }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format.h"
                },
                "region": {
                  "startLine": 1840,
                  "startColumn": 45,
                  "endLine": 1840,
                  "endColumn": 49,
                  "snippet": {
                    "text": "FMT_API auto is_printable(uint32_t cp) -> bool;\n\ninline auto needs_escape(uint32_t cp) -> bool {\n  if (cp < 0x20 || cp == 0x7f || cp == '\"' || cp == '\\\\') return true;\n  if (FMT_OPTIMIZE_SIZE > 1) return false;\n  return !is_printable(cp);\n}\n",
                    "rendered": {
                      "text": "FMT_API auto is_printable(uint32_t cp) -> bool;\n\ninline auto needs_escape(uint32_t cp) -> bool {\n  if (cp < 0x20 || cp == 0x7f || cp == '\"' || cp == '\\\\') return true;\n  if (FMT_OPTIMIZE_SIZE > 1) return false;\n  return !is_printable(cp);\n}\n",
                      "markdown": "`FMT_API auto is_printable(uint32_t cp) -> bool;\n\ninline auto needs_escape(uint32_t cp) -> bool {\n  if (cp < 0x20 || cp == 0x7f || cp == '\"' || cp == '\\\\') return true;\n  if (FMT_OPTIMIZE_SIZE > 1) return false;\n  return !is_printable(cp);\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format.h"
                },
                "region": {
                  "startLine": 1840,
                  "startColumn": 32,
                  "endLine": 1840,
                  "endColumn": 36,
                  "snippet": {
                    "text": "FMT_API auto is_printable(uint32_t cp) -> bool;\n\ninline auto needs_escape(uint32_t cp) -> bool {\n  if (cp < 0x20 || cp == 0x7f || cp == '\"' || cp == '\\\\') return true;\n  if (FMT_OPTIMIZE_SIZE > 1) return false;\n  return !is_printable(cp);\n}\n",
                    "rendered": {
                      "text": "FMT_API auto is_printable(uint32_t cp) -> bool;\n\ninline auto needs_escape(uint32_t cp) -> bool {\n  if (cp < 0x20 || cp == 0x7f || cp == '\"' || cp == '\\\\') return true;\n  if (FMT_OPTIMIZE_SIZE > 1) return false;\n  return !is_printable(cp);\n}\n",
                      "markdown": "`FMT_API auto is_printable(uint32_t cp) -> bool;\n\ninline auto needs_escape(uint32_t cp) -> bool {\n  if (cp < 0x20 || cp == 0x7f || cp == '\"' || cp == '\\\\') return true;\n  if (FMT_OPTIMIZE_SIZE > 1) return false;\n  return !is_printable(cp);\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format.h"
                },
                "region": {
                  "startLine": 1840,
                  "startColumn": 18,
                  "endLine": 1840,
                  "endColumn": 22,
                  "snippet": {
                    "text": "FMT_API auto is_printable(uint32_t cp) -> bool;\n\ninline auto needs_escape(uint32_t cp) -> bool {\n  if (cp < 0x20 || cp == 0x7f || cp == '\"' || cp == '\\\\') return true;\n  if (FMT_OPTIMIZE_SIZE > 1) return false;\n  return !is_printable(cp);\n}\n",
                    "rendered": {
                      "text": "FMT_API auto is_printable(uint32_t cp) -> bool;\n\ninline auto needs_escape(uint32_t cp) -> bool {\n  if (cp < 0x20 || cp == 0x7f || cp == '\"' || cp == '\\\\') return true;\n  if (FMT_OPTIMIZE_SIZE > 1) return false;\n  return !is_printable(cp);\n}\n",
                      "markdown": "`FMT_API auto is_printable(uint32_t cp) -> bool;\n\ninline auto needs_escape(uint32_t cp) -> bool {\n  if (cp < 0x20 || cp == 0x7f || cp == '\"' || cp == '\\\\') return true;\n  if (FMT_OPTIMIZE_SIZE > 1) return false;\n  return !is_printable(cp);\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format.h"
                },
                "region": {
                  "startLine": 1661,
                  "startColumn": 15,
                  "endLine": 1661,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    return format_decimal<Char>(out, uexp, count_digits(uexp));\n  }\n  if (uexp >= 100u) {\n    const char* top = digits2(uexp / 100);\n    if (uexp >= 1000u) *out++ = static_cast<Char>(top[0]);\n    *out++ = static_cast<Char>(top[1]);\n    uexp %= 100;\n",
                    "rendered": {
                      "text": "    return format_decimal<Char>(out, uexp, count_digits(uexp));\n  }\n  if (uexp >= 100u) {\n    const char* top = digits2(uexp / 100);\n    if (uexp >= 1000u) *out++ = static_cast<Char>(top[0]);\n    *out++ = static_cast<Char>(top[1]);\n    uexp %= 100;\n",
                      "markdown": "`    return format_decimal<Char>(out, uexp, count_digits(uexp));\n  }\n  if (uexp >= 100u) {\n    const char* top = digits2(uexp / 100);\n    if (uexp >= 1000u) *out++ = static_cast<Char>(top[0]);\n    *out++ = static_cast<Char>(top[1]);\n    uexp %= 100;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format.h"
                },
                "region": {
                  "startLine": 723,
                  "startColumn": 29,
                  "endLine": 723,
                  "endColumn": 33,
                  "snippet": {
                    "text": "            // Miscellaneous Symbols and Pictographs + Emoticons:\n            (cp >= 0x1f300 && cp <= 0x1f64f) ||\n            // Supplemental Symbols and Pictographs:\n            (cp >= 0x1f900 && cp <= 0x1f9ff))));\n      return true;\n    }\n  };\n",
                    "rendered": {
                      "text": "            // Miscellaneous Symbols and Pictographs + Emoticons:\n            (cp >= 0x1f300 && cp <= 0x1f64f) ||\n            // Supplemental Symbols and Pictographs:\n            (cp >= 0x1f900 && cp <= 0x1f9ff))));\n      return true;\n    }\n  };\n",
                      "markdown": "`            // Miscellaneous Symbols and Pictographs + Emoticons:\n            (cp >= 0x1f300 && cp <= 0x1f64f) ||\n            // Supplemental Symbols and Pictographs:\n            (cp >= 0x1f900 && cp <= 0x1f9ff))));\n      return true;\n    }\n  };\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format.h"
                },
                "region": {
                  "startLine": 721,
                  "startColumn": 29,
                  "endLine": 721,
                  "endColumn": 33,
                  "snippet": {
                    "text": "            (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK\n            (cp >= 0x30000 && cp <= 0x3fffd) ||\n            // Miscellaneous Symbols and Pictographs + Emoticons:\n            (cp >= 0x1f300 && cp <= 0x1f64f) ||\n            // Supplemental Symbols and Pictographs:\n            (cp >= 0x1f900 && cp <= 0x1f9ff))));\n      return true;\n",
                    "rendered": {
                      "text": "            (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK\n            (cp >= 0x30000 && cp <= 0x3fffd) ||\n            // Miscellaneous Symbols and Pictographs + Emoticons:\n            (cp >= 0x1f300 && cp <= 0x1f64f) ||\n            // Supplemental Symbols and Pictographs:\n            (cp >= 0x1f900 && cp <= 0x1f9ff))));\n      return true;\n",
                      "markdown": "`            (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK\n            (cp >= 0x30000 && cp <= 0x3fffd) ||\n            // Miscellaneous Symbols and Pictographs + Emoticons:\n            (cp >= 0x1f300 && cp <= 0x1f64f) ||\n            // Supplemental Symbols and Pictographs:\n            (cp >= 0x1f900 && cp <= 0x1f9ff))));\n      return true;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format.h"
                },
                "region": {
                  "startLine": 719,
                  "startColumn": 29,
                  "endLine": 719,
                  "endColumn": 33,
                  "snippet": {
                    "text": "            (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms\n            (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms\n            (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK\n            (cp >= 0x30000 && cp <= 0x3fffd) ||\n            // Miscellaneous Symbols and Pictographs + Emoticons:\n            (cp >= 0x1f300 && cp <= 0x1f64f) ||\n            // Supplemental Symbols and Pictographs:\n",
                    "rendered": {
                      "text": "            (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms\n            (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms\n            (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK\n            (cp >= 0x30000 && cp <= 0x3fffd) ||\n            // Miscellaneous Symbols and Pictographs + Emoticons:\n            (cp >= 0x1f300 && cp <= 0x1f64f) ||\n            // Supplemental Symbols and Pictographs:\n",
                      "markdown": "`            (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms\n            (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms\n            (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK\n            (cp >= 0x30000 && cp <= 0x3fffd) ||\n            // Miscellaneous Symbols and Pictographs + Emoticons:\n            (cp >= 0x1f300 && cp <= 0x1f64f) ||\n            // Supplemental Symbols and Pictographs:\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format.h"
                },
                "region": {
                  "startLine": 718,
                  "startColumn": 29,
                  "endLine": 718,
                  "endColumn": 33,
                  "snippet": {
                    "text": "            (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms\n            (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms\n            (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms\n            (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK\n            (cp >= 0x30000 && cp <= 0x3fffd) ||\n            // Miscellaneous Symbols and Pictographs + Emoticons:\n            (cp >= 0x1f300 && cp <= 0x1f64f) ||\n",
                    "rendered": {
                      "text": "            (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms\n            (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms\n            (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms\n            (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK\n            (cp >= 0x30000 && cp <= 0x3fffd) ||\n            // Miscellaneous Symbols and Pictographs + Emoticons:\n            (cp >= 0x1f300 && cp <= 0x1f64f) ||\n",
                      "markdown": "`            (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms\n            (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms\n            (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms\n            (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK\n            (cp >= 0x30000 && cp <= 0x3fffd) ||\n            // Miscellaneous Symbols and Pictographs + Emoticons:\n            (cp >= 0x1f300 && cp <= 0x1f64f) ||\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format.h"
                },
                "region": {
                  "startLine": 717,
                  "startColumn": 28,
                  "endLine": 717,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms\n            (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms\n            (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms\n            (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms\n            (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK\n            (cp >= 0x30000 && cp <= 0x3fffd) ||\n            // Miscellaneous Symbols and Pictographs + Emoticons:\n",
                    "rendered": {
                      "text": "            (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms\n            (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms\n            (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms\n            (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms\n            (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK\n            (cp >= 0x30000 && cp <= 0x3fffd) ||\n            // Miscellaneous Symbols and Pictographs + Emoticons:\n",
                      "markdown": "`            (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms\n            (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms\n            (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms\n            (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms\n            (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK\n            (cp >= 0x30000 && cp <= 0x3fffd) ||\n            // Miscellaneous Symbols and Pictographs + Emoticons:\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format.h"
                },
                "region": {
                  "startLine": 716,
                  "startColumn": 28,
                  "endLine": 716,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs\n            (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms\n            (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms\n            (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms\n            (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms\n            (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK\n            (cp >= 0x30000 && cp <= 0x3fffd) ||\n",
                    "rendered": {
                      "text": "            (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs\n            (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms\n            (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms\n            (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms\n            (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms\n            (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK\n            (cp >= 0x30000 && cp <= 0x3fffd) ||\n",
                      "markdown": "`            (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs\n            (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms\n            (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms\n            (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms\n            (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms\n            (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK\n            (cp >= 0x30000 && cp <= 0x3fffd) ||\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format.h"
                },
                "region": {
                  "startLine": 715,
                  "startColumn": 28,
                  "endLine": 715,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables\n            (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs\n            (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms\n            (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms\n            (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms\n            (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms\n            (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK\n",
                    "rendered": {
                      "text": "            (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables\n            (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs\n            (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms\n            (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms\n            (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms\n            (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms\n            (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK\n",
                      "markdown": "`            (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables\n            (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs\n            (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms\n            (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms\n            (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms\n            (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms\n            (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format.h"
                },
                "region": {
                  "startLine": 714,
                  "startColumn": 28,
                  "endLine": 714,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||\n            (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables\n            (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs\n            (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms\n            (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms\n            (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms\n            (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms\n",
                    "rendered": {
                      "text": "            (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||\n            (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables\n            (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs\n            (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms\n            (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms\n            (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms\n            (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms\n",
                      "markdown": "`            (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||\n            (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables\n            (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs\n            (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms\n            (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms\n            (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms\n            (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format.h"
                },
                "region": {
                  "startLine": 713,
                  "startColumn": 28,
                  "endLine": 713,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:\n            (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||\n            (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables\n            (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs\n            (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms\n            (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms\n            (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms\n",
                    "rendered": {
                      "text": "            // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:\n            (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||\n            (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables\n            (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs\n            (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms\n            (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms\n            (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms\n",
                      "markdown": "`            // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:\n            (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||\n            (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables\n            (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs\n            (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms\n            (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms\n            (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format.h"
                },
                "region": {
                  "startLine": 712,
                  "startColumn": 28,
                  "endLine": 712,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET\n            // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:\n            (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||\n            (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables\n            (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs\n            (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms\n            (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms\n",
                    "rendered": {
                      "text": "            cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET\n            // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:\n            (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||\n            (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables\n            (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs\n            (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms\n            (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms\n",
                      "markdown": "`            cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET\n            // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:\n            (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||\n            (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables\n            (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs\n            (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms\n            (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format.h"
                },
                "region": {
                  "startLine": 711,
                  "startColumn": 44,
                  "endLine": 711,
                  "endColumn": 48,
                  "snippet": {
                    "text": "            cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET\n            cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET\n            // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:\n            (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||\n            (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables\n            (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs\n            (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms\n",
                    "rendered": {
                      "text": "            cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET\n            cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET\n            // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:\n            (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||\n            (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables\n            (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs\n            (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms\n",
                      "markdown": "`            cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET\n            cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET\n            // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:\n            (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||\n            (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables\n            (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs\n            (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format.h"
                },
                "region": {
                  "startLine": 711,
                  "startColumn": 28,
                  "endLine": 711,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET\n            cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET\n            // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:\n            (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||\n            (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables\n            (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs\n            (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms\n",
                    "rendered": {
                      "text": "            cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET\n            cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET\n            // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:\n            (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||\n            (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables\n            (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs\n            (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms\n",
                      "markdown": "`            cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET\n            cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET\n            // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:\n            (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||\n            (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables\n            (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs\n            (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format.h"
                },
                "region": {
                  "startLine": 709,
                  "startColumn": 11,
                  "endLine": 709,
                  "endColumn": 15,
                  "snippet": {
                    "text": "          (cp >= 0x1100 &&\n           (cp <= 0x115f ||  // Hangul Jamo init. consonants\n            cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET\n            cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET\n            // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:\n            (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||\n            (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables\n",
                    "rendered": {
                      "text": "          (cp >= 0x1100 &&\n           (cp <= 0x115f ||  // Hangul Jamo init. consonants\n            cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET\n            cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET\n            // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:\n            (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||\n            (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables\n",
                      "markdown": "`          (cp >= 0x1100 &&\n           (cp <= 0x115f ||  // Hangul Jamo init. consonants\n            cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET\n            cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET\n            // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:\n            (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||\n            (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format.h"
                },
                "region": {
                  "startLine": 708,
                  "startColumn": 11,
                  "endLine": 708,
                  "endColumn": 15,
                  "snippet": {
                    "text": "          1 +\n          (cp >= 0x1100 &&\n           (cp <= 0x115f ||  // Hangul Jamo init. consonants\n            cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET\n            cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET\n            // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:\n            (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||\n",
                    "rendered": {
                      "text": "          1 +\n          (cp >= 0x1100 &&\n           (cp <= 0x115f ||  // Hangul Jamo init. consonants\n            cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET\n            cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET\n            // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:\n            (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||\n",
                      "markdown": "`          1 +\n          (cp >= 0x1100 &&\n           (cp <= 0x115f ||  // Hangul Jamo init. consonants\n            cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET\n            cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET\n            // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:\n            (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/format.h"
                },
                "region": {
                  "startLine": 661,
                  "startColumn": 8,
                  "endLine": 661,
                  "endColumn": 12,
                  "snippet": {
                    "text": "template <typename F>\nFMT_CONSTEXPR void for_each_codepoint(string_view s, F f) {\n  auto decode = [f](const char* buf_ptr, const char* ptr) {\n    auto cp = uint32_t();\n    auto error = 0;\n    auto end = utf8_decode(buf_ptr, &cp, &error);\n    bool result = f(error ? invalid_code_point : cp,\n",
                    "rendered": {
                      "text": "template <typename F>\nFMT_CONSTEXPR void for_each_codepoint(string_view s, F f) {\n  auto decode = [f](const char* buf_ptr, const char* ptr) {\n    auto cp = uint32_t();\n    auto error = 0;\n    auto end = utf8_decode(buf_ptr, &cp, &error);\n    bool result = f(error ? invalid_code_point : cp,\n",
                      "markdown": "`template <typename F>\nFMT_CONSTEXPR void for_each_codepoint(string_view s, F f) {\n  auto decode = [f](const char* buf_ptr, const char* ptr) {\n    auto cp = uint32_t();\n    auto error = 0;\n    auto end = utf8_decode(buf_ptr, &cp, &error);\n    bool result = f(error ? invalid_code_point : cp,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/compile.h"
                },
                "region": {
                  "startLine": 263,
                  "startColumn": 18,
                  "endLine": 263,
                  "endColumn": 24,
                  "snippet": {
                    "text": "template <typename Args, size_t POS, int ID, typename T, typename S>\nconstexpr auto parse_tail(T head, S fmt) {\n  if constexpr (POS != basic_string_view<typename S::char_type>(fmt).size()) {\n    constexpr auto tail = compile_format_string<Args, POS, ID>(fmt);\n    if constexpr (std::is_same<remove_cvref_t<decltype(tail)>,\n                               unknown_format>())\n      return tail;\n",
                    "rendered": {
                      "text": "template <typename Args, size_t POS, int ID, typename T, typename S>\nconstexpr auto parse_tail(T head, S fmt) {\n  if constexpr (POS != basic_string_view<typename S::char_type>(fmt).size()) {\n    constexpr auto tail = compile_format_string<Args, POS, ID>(fmt);\n    if constexpr (std::is_same<remove_cvref_t<decltype(tail)>,\n                               unknown_format>())\n      return tail;\n",
                      "markdown": "`template <typename Args, size_t POS, int ID, typename T, typename S>\nconstexpr auto parse_tail(T head, S fmt) {\n  if constexpr (POS != basic_string_view<typename S::char_type>(fmt).size()) {\n    constexpr auto tail = compile_format_string<Args, POS, ID>(fmt);\n    if constexpr (std::is_same<remove_cvref_t<decltype(tail)>,\n                               unknown_format>())\n      return tail;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/include/fmt/printf.h"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 16,
                  "endLine": 52,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  auto locale() -> detail::locale_ref { return {}; }\n\n  auto arg(int id) const -> basic_format_arg<basic_printf_context> {\n    return args_.get(id);\n  }\n};\n\n",
                    "rendered": {
                      "text": "  auto locale() -> detail::locale_ref { return {}; }\n\n  auto arg(int id) const -> basic_format_arg<basic_printf_context> {\n    return args_.get(id);\n  }\n};\n\n",
                      "markdown": "`  auto locale() -> detail::locale_ref { return {}; }\n\n  auto arg(int id) const -> basic_format_arg<basic_printf_context> {\n    return args_.get(id);\n  }\n};\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.github/workflows/windows.yml"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 12,
                  "endLine": 81,
                  "snippet": {
                    "text": "    steps:\n    - name: Set timezone\n      run: tzutil /s \"Ekaterinburg Standard Time\"\n      shell: cmd\n    - uses: msys2/setup-msys2@5df0ca6cbf14efcd08f8d5bd5e049a3cc8e07fd2 # v2.24.0\n      with:\n        release: false\n        msystem: ${{matrix.sys}}\n",
                    "rendered": {
                      "text": "    steps:\n    - name: Set timezone\n      run: tzutil /s \"Ekaterinburg Standard Time\"\n      shell: cmd\n    - uses: msys2/setup-msys2@5df0ca6cbf14efcd08f8d5bd5e049a3cc8e07fd2 # v2.24.0\n      with:\n        release: false\n        msystem: ${{matrix.sys}}\n",
                      "markdown": "`    steps:\n    - name: Set timezone\n      run: tzutil /s \"Ekaterinburg Standard Time\"\n      shell: cmd\n    - uses: msys2/setup-msys2@5df0ca6cbf14efcd08f8d5bd5e049a3cc8e07fd2 # v2.24.0\n      with:\n        release: false\n        msystem: ${{matrix.sys}}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.github/workflows/windows.yml"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 12,
                  "endLine": 50,
                  "snippet": {
                    "text": "\n    - name: Configure\n      # Use a bash shell for $GITHUB_WORKSPACE.\n      shell: bash\n      working-directory: ${{runner.workspace}}/build\n      run: |\n        cmake -A ${{matrix.platform}} -T ${{matrix.toolset}} \\\n              -DCMAKE_CXX_STANDARD=${{matrix.standard}} \\\n",
                    "rendered": {
                      "text": "\n    - name: Configure\n      # Use a bash shell for $GITHUB_WORKSPACE.\n      shell: bash\n      working-directory: ${{runner.workspace}}/build\n      run: |\n        cmake -A ${{matrix.platform}} -T ${{matrix.toolset}} \\\n              -DCMAKE_CXX_STANDARD=${{matrix.standard}} \\\n",
                      "markdown": "`\n    - name: Configure\n      # Use a bash shell for $GITHUB_WORKSPACE.\n      shell: bash\n      working-directory: ${{runner.workspace}}/build\n      run: |\n        cmake -A ${{matrix.platform}} -T ${{matrix.toolset}} \\\n              -DCMAKE_CXX_STANDARD=${{matrix.standard}} \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.github/workflows/windows.yml"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 13,
                  "endLine": 48,
                  "endColumn": 19,
                  "snippet": {
                    "text": "      run: cmake -E make_directory ${{runner.workspace}}/build\n\n    - name: Configure\n      # Use a bash shell for $GITHUB_WORKSPACE.\n      shell: bash\n      working-directory: ${{runner.workspace}}/build\n      run: |\n",
                    "rendered": {
                      "text": "      run: cmake -E make_directory ${{runner.workspace}}/build\n\n    - name: Configure\n      # Use a bash shell for $GITHUB_WORKSPACE.\n      shell: bash\n      working-directory: ${{runner.workspace}}/build\n      run: |\n",
                      "markdown": "`      run: cmake -E make_directory ${{runner.workspace}}/build\n\n    - name: Configure\n      # Use a bash shell for $GITHUB_WORKSPACE.\n      shell: bash\n      working-directory: ${{runner.workspace}}/build\n      run: |\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.github/workflows/windows.yml"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 12,
                  "endLine": 50,
                  "snippet": {
                    "text": "\n    - name: Configure\n      # Use a bash shell for $GITHUB_WORKSPACE.\n      shell: bash\n      working-directory: ${{runner.workspace}}/build\n      run: |\n        cmake -A ${{matrix.platform}} -T ${{matrix.toolset}} \\\n              -DCMAKE_CXX_STANDARD=${{matrix.standard}} \\\n",
                    "rendered": {
                      "text": "\n    - name: Configure\n      # Use a bash shell for $GITHUB_WORKSPACE.\n      shell: bash\n      working-directory: ${{runner.workspace}}/build\n      run: |\n        cmake -A ${{matrix.platform}} -T ${{matrix.toolset}} \\\n              -DCMAKE_CXX_STANDARD=${{matrix.standard}} \\\n",
                      "markdown": "`\n    - name: Configure\n      # Use a bash shell for $GITHUB_WORKSPACE.\n      shell: bash\n      working-directory: ${{runner.workspace}}/build\n      run: |\n        cmake -A ${{matrix.platform}} -T ${{matrix.toolset}} \\\n              -DCMAKE_CXX_STANDARD=${{matrix.standard}} \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.github/workflows/windows.yml"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 13,
                  "endLine": 48,
                  "endColumn": 19,
                  "snippet": {
                    "text": "      run: cmake -E make_directory ${{runner.workspace}}/build\n\n    - name: Configure\n      # Use a bash shell for $GITHUB_WORKSPACE.\n      shell: bash\n      working-directory: ${{runner.workspace}}/build\n      run: |\n",
                    "rendered": {
                      "text": "      run: cmake -E make_directory ${{runner.workspace}}/build\n\n    - name: Configure\n      # Use a bash shell for $GITHUB_WORKSPACE.\n      shell: bash\n      working-directory: ${{runner.workspace}}/build\n      run: |\n",
                      "markdown": "`      run: cmake -E make_directory ${{runner.workspace}}/build\n\n    - name: Configure\n      # Use a bash shell for $GITHUB_WORKSPACE.\n      shell: bash\n      working-directory: ${{runner.workspace}}/build\n      run: |\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.github/workflows/lint.yml"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 12,
                  "endLine": 21,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    - name: Install clang-format\n      run: |\n        wget https://apt.llvm.org/llvm.sh\n        sudo bash ./llvm.sh 17\n        sudo apt install clang-format-17\n\n    - name: Run clang-format\n",
                    "rendered": {
                      "text": "    - name: Install clang-format\n      run: |\n        wget https://apt.llvm.org/llvm.sh\n        sudo bash ./llvm.sh 17\n        sudo apt install clang-format-17\n\n    - name: Run clang-format\n",
                      "markdown": "`    - name: Install clang-format\n      run: |\n        wget https://apt.llvm.org/llvm.sh\n        sudo bash ./llvm.sh 17\n        sudo apt install clang-format-17\n\n    - name: Run clang-format\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.github/workflows/lint.yml"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 7,
                  "endLine": 28,
                  "endColumn": 12,
                  "snippet": {
                    "text": "      run: |\n        find include src -name '*.h' -o -name '*.cc' | \\\n          xargs clang-format-17 -i -style=file -fallback-style=none\n        git diff --exit-code\n",
                    "rendered": {
                      "text": "      run: |\n        find include src -name '*.h' -o -name '*.cc' | \\\n          xargs clang-format-17 -i -style=file -fallback-style=none\n        git diff --exit-code\n",
                      "markdown": "`      run: |\n        find include src -name '*.h' -o -name '*.cc' | \\\n          xargs clang-format-17 -i -style=file -fallback-style=none\n        git diff --exit-code\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.github/workflows/lint.yml"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 9,
                  "endLine": 27,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    - name: Run clang-format\n      run: |\n        find include src -name '*.h' -o -name '*.cc' | \\\n          xargs clang-format-17 -i -style=file -fallback-style=none\n        git diff --exit-code\n",
                    "rendered": {
                      "text": "    - name: Run clang-format\n      run: |\n        find include src -name '*.h' -o -name '*.cc' | \\\n          xargs clang-format-17 -i -style=file -fallback-style=none\n        git diff --exit-code\n",
                      "markdown": "`    - name: Run clang-format\n      run: |\n        find include src -name '*.h' -o -name '*.cc' | \\\n          xargs clang-format-17 -i -style=file -fallback-style=none\n        git diff --exit-code\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.github/workflows/lint.yml"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 7,
                  "endLine": 26,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n    - name: Run clang-format\n      run: |\n        find include src -name '*.h' -o -name '*.cc' | \\\n          xargs clang-format-17 -i -style=file -fallback-style=none\n        git diff --exit-code\n",
                    "rendered": {
                      "text": "\n    - name: Run clang-format\n      run: |\n        find include src -name '*.h' -o -name '*.cc' | \\\n          xargs clang-format-17 -i -style=file -fallback-style=none\n        git diff --exit-code\n",
                      "markdown": "`\n    - name: Run clang-format\n      run: |\n        find include src -name '*.h' -o -name '*.cc' | \\\n          xargs clang-format-17 -i -style=file -fallback-style=none\n        git diff --exit-code\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.github/workflows/lint.yml"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 12,
                  "endLine": 22,
                  "endColumn": 17,
                  "snippet": {
                    "text": "      run: |\n        wget https://apt.llvm.org/llvm.sh\n        sudo bash ./llvm.sh 17\n        sudo apt install clang-format-17\n\n    - name: Run clang-format\n      run: |\n",
                    "rendered": {
                      "text": "      run: |\n        wget https://apt.llvm.org/llvm.sh\n        sudo bash ./llvm.sh 17\n        sudo apt install clang-format-17\n\n    - name: Run clang-format\n      run: |\n",
                      "markdown": "`      run: |\n        wget https://apt.llvm.org/llvm.sh\n        sudo bash ./llvm.sh 17\n        sudo apt install clang-format-17\n\n    - name: Run clang-format\n      run: |\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.github/workflows/lint.yml"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 12,
                  "endLine": 21,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    - name: Install clang-format\n      run: |\n        wget https://apt.llvm.org/llvm.sh\n        sudo bash ./llvm.sh 17\n        sudo apt install clang-format-17\n\n    - name: Run clang-format\n",
                    "rendered": {
                      "text": "    - name: Install clang-format\n      run: |\n        wget https://apt.llvm.org/llvm.sh\n        sudo bash ./llvm.sh 17\n        sudo apt install clang-format-17\n\n    - name: Run clang-format\n",
                      "markdown": "`    - name: Install clang-format\n      run: |\n        wget https://apt.llvm.org/llvm.sh\n        sudo bash ./llvm.sh 17\n        sudo apt install clang-format-17\n\n    - name: Run clang-format\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.github/workflows/lint.yml"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 7,
                  "endLine": 20,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n    - name: Install clang-format\n      run: |\n        wget https://apt.llvm.org/llvm.sh\n        sudo bash ./llvm.sh 17\n        sudo apt install clang-format-17\n\n",
                    "rendered": {
                      "text": "\n    - name: Install clang-format\n      run: |\n        wget https://apt.llvm.org/llvm.sh\n        sudo bash ./llvm.sh 17\n        sudo apt install clang-format-17\n\n",
                      "markdown": "`\n    - name: Install clang-format\n      run: |\n        wget https://apt.llvm.org/llvm.sh\n        sudo bash ./llvm.sh 17\n        sudo apt install clang-format-17\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/.github/dependabot.yml"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 54,
                  "endLine": 3,
                  "endColumn": 62,
                  "snippet": {
                    "text": "version: 2\nupdates:\n  - package-ecosystem: \"github-actions\" # Necessary to update action hashes.\t\n    directory: \"/\"\n    schedule:\n      interval: \"monthly\"\n",
                    "rendered": {
                      "text": "version: 2\nupdates:\n  - package-ecosystem: \"github-actions\" # Necessary to update action hashes.\t\n    directory: \"/\"\n    schedule:\n      interval: \"monthly\"\n",
                      "markdown": "`version: 2\nupdates:\n  - package-ecosystem: \"github-actions\" # Necessary to update action hashes.\t\n    directory: \"/\"\n    schedule:\n      interval: \"monthly\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/bazel/README.md"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 8,
                  "endLine": 19,
                  "endColumn": 12,
                  "snippet": {
                    "text": "bazel_dep(name = \"fmt\", version = \"10.2.1\")\n```\n\n### Live at head\n\nFor a live-at-head approach, you can copy the contents of this repository and move the Bazel-related build files to the root folder of this project as described above and make use of `local_path_override`, e.g.:\n\n",
                    "rendered": {
                      "text": "bazel_dep(name = \"fmt\", version = \"10.2.1\")\n```\n\n### Live at head\n\nFor a live-at-head approach, you can copy the contents of this repository and move the Bazel-related build files to the root folder of this project as described above and make use of `local_path_override`, e.g.:\n\n",
                      "markdown": "`bazel_dep(name = \"fmt\", version = \"10.2.1\")\n```\n\n### Live at head\n\nFor a live-at-head approach, you can copy the contents of this repository and move the Bazel-related build files to the root folder of this project as described above and make use of `local_path_override`, e.g.:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/bazel/README.md"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 11,
                  "endLine": 20,
                  "snippet": {
                    "text": "bazel_dep(name = \"fmt\", version = \"10.2.1\")\n```\n\n### Live at head\n\nFor a live-at-head approach, you can copy the contents of this repository and move the Bazel-related build files to the root folder of this project as described above and make use of `local_path_override`, e.g.:\n\n```\n",
                    "rendered": {
                      "text": "bazel_dep(name = \"fmt\", version = \"10.2.1\")\n```\n\n### Live at head\n\nFor a live-at-head approach, you can copy the contents of this repository and move the Bazel-related build files to the root folder of this project as described above and make use of `local_path_override`, e.g.:\n\n```\n",
                      "markdown": "`bazel_dep(name = \"fmt\", version = \"10.2.1\")\n```\n\n### Live at head\n\nFor a live-at-head approach, you can copy the contents of this repository and move the Bazel-related build files to the root folder of this project as described above and make use of `local_path_override`, e.g.:\n\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/printable.py"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 8,
                  "endLine": 196,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    for a, b in extra:\n        print(\"  if (0x{:x} <= cp && cp < 0x{:x}) return false;\".format(a, a + b))\n    print(\"\"\"\\\n  return cp < 0x{:x};\n}}\\\n\"\"\".format(NUM_CODEPOINTS))\n\n",
                    "rendered": {
                      "text": "    for a, b in extra:\n        print(\"  if (0x{:x} <= cp && cp < 0x{:x}) return false;\".format(a, a + b))\n    print(\"\"\"\\\n  return cp < 0x{:x};\n}}\\\n\"\"\".format(NUM_CODEPOINTS))\n\n",
                      "markdown": "`    for a, b in extra:\n        print(\"  if (0x{:x} <= cp && cp < 0x{:x}) return false;\".format(a, a + b))\n    print(\"\"\"\\\n  return cp < 0x{:x};\n}}\\\n\"\"\".format(NUM_CODEPOINTS))\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/printable.py"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 36,
                  "endLine": 194,
                  "endColumn": 40,
                  "snippet": {
                    "text": "  }\\\n\"\"\")\n    for a, b in extra:\n        print(\"  if (0x{:x} <= cp && cp < 0x{:x}) return false;\".format(a, a + b))\n    print(\"\"\"\\\n  return cp < 0x{:x};\n}}\\\n",
                    "rendered": {
                      "text": "  }\\\n\"\"\")\n    for a, b in extra:\n        print(\"  if (0x{:x} <= cp && cp < 0x{:x}) return false;\".format(a, a + b))\n    print(\"\"\"\\\n  return cp < 0x{:x};\n}}\\\n",
                      "markdown": "`  }\\\n\"\"\")\n    for a, b in extra:\n        print(\"  if (0x{:x} <= cp && cp < 0x{:x}) return false;\".format(a, a + b))\n    print(\"\"\"\\\n  return cp < 0x{:x};\n}}\\\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/printable.py"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 30,
                  "endLine": 194,
                  "endColumn": 34,
                  "snippet": {
                    "text": "  }\\\n\"\"\")\n    for a, b in extra:\n        print(\"  if (0x{:x} <= cp && cp < 0x{:x}) return false;\".format(a, a + b))\n    print(\"\"\"\\\n  return cp < 0x{:x};\n}}\\\n",
                    "rendered": {
                      "text": "  }\\\n\"\"\")\n    for a, b in extra:\n        print(\"  if (0x{:x} <= cp && cp < 0x{:x}) return false;\".format(a, a + b))\n    print(\"\"\"\\\n  return cp < 0x{:x};\n}}\\\n",
                      "markdown": "`  }\\\n\"\"\")\n    for a, b in extra:\n        print(\"  if (0x{:x} <= cp && cp < 0x{:x}) return false;\".format(a, a + b))\n    print(\"\"\"\\\n  return cp < 0x{:x};\n}}\\\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/printable.py"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 6,
                  "endLine": 7,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# https://github.com/rust-lang/rust/blob/master/library/core/src/unicode/printable.py\n# distributed under https://github.com/rust-lang/rust/blob/master/LICENSE-MIT.\n\n# This script uses the following Unicode tables:\n# - UnicodeData.txt\n\n\n",
                    "rendered": {
                      "text": "# https://github.com/rust-lang/rust/blob/master/library/core/src/unicode/printable.py\n# distributed under https://github.com/rust-lang/rust/blob/master/LICENSE-MIT.\n\n# This script uses the following Unicode tables:\n# - UnicodeData.txt\n\n\n",
                      "markdown": "`# https://github.com/rust-lang/rust/blob/master/library/core/src/unicode/printable.py\n# distributed under https://github.com/rust-lang/rust/blob/master/LICENSE-MIT.\n\n# This script uses the following Unicode tables:\n# - UnicodeData.txt\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/printable.py"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 6,
                  "endLine": 3,
                  "endColumn": 14,
                  "snippet": {
                    "text": "#!/usr/bin/env python3\n\n# This script is based on\n# https://github.com/rust-lang/rust/blob/master/library/core/src/unicode/printable.py\n# distributed under https://github.com/rust-lang/rust/blob/master/LICENSE-MIT.\n\n",
                    "rendered": {
                      "text": "#!/usr/bin/env python3\n\n# This script is based on\n# https://github.com/rust-lang/rust/blob/master/library/core/src/unicode/printable.py\n# distributed under https://github.com/rust-lang/rust/blob/master/LICENSE-MIT.\n\n",
                      "markdown": "`#!/usr/bin/env python3\n\n# This script is based on\n# https://github.com/rust-lang/rust/blob/master/library/core/src/unicode/printable.py\n# distributed under https://github.com/rust-lang/rust/blob/master/LICENSE-MIT.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/docopt.py"
                },
                "region": {
                  "startLine": 550,
                  "startColumn": 5,
                  "endLine": 550,
                  "endColumn": 9,
                  "snippet": {
                    "text": "    --------\n    * For video introduction see http://docopt.org\n    * Full documentation is available in README.rst as well as online\n      at https://github.com/docopt/docopt#readme\n\n    \"\"\"\n    argv = sys.argv[1:] if argv is None else argv\n",
                    "rendered": {
                      "text": "    --------\n    * For video introduction see http://docopt.org\n    * Full documentation is available in README.rst as well as online\n      at https://github.com/docopt/docopt#readme\n\n    \"\"\"\n    argv = sys.argv[1:] if argv is None else argv\n",
                      "markdown": "`    --------\n    * For video introduction see http://docopt.org\n    * Full documentation is available in README.rst as well as online\n      at https://github.com/docopt/docopt#readme\n\n    \"\"\"\n    argv = sys.argv[1:] if argv is None else argv\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/docopt.py"
                },
                "region": {
                  "startLine": 532,
                  "startColumn": 33,
                  "endLine": 532,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    ...     my_program (-h | --help | --version)\n    ...\n    ... Options:\n    ...     -h, --help  Show this screen and exit.\n    ...     --baud=<n>  Baudrate [default: 9600]\n    ... '''\n    >>> argv = ['tcp', '127.0.0.1', '80', '--timeout', '30']\n",
                    "rendered": {
                      "text": "    ...     my_program (-h | --help | --version)\n    ...\n    ... Options:\n    ...     -h, --help  Show this screen and exit.\n    ...     --baud=<n>  Baudrate [default: 9600]\n    ... '''\n    >>> argv = ['tcp', '127.0.0.1', '80', '--timeout', '30']\n",
                      "markdown": "`    ...     my_program (-h | --help | --version)\n    ...\n    ... Options:\n    ...     -h, --help  Show this screen and exit.\n    ...     --baud=<n>  Baudrate [default: 9600]\n    ... '''\n    >>> argv = ['tcp', '127.0.0.1', '80', '--timeout', '30']\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/docopt.py"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 19,
                  "endLine": 135,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\nclass BranchPattern(Pattern):\n\n    \"\"\"Branch/inner node of a pattern tree.\"\"\"\n\n    def __init__(self, *children):\n        self.children = list(children)\n",
                    "rendered": {
                      "text": "\nclass BranchPattern(Pattern):\n\n    \"\"\"Branch/inner node of a pattern tree.\"\"\"\n\n    def __init__(self, *children):\n        self.children = list(children)\n",
                      "markdown": "`\nclass BranchPattern(Pattern):\n\n    \"\"\"Branch/inner node of a pattern tree.\"\"\"\n\n    def __init__(self, *children):\n        self.children = list(children)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/docopt.py"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 20,
                  "endLine": 101,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\nclass LeafPattern(Pattern):\n\n    \"\"\"Leaf/terminal node of a pattern tree.\"\"\"\n\n    def __init__(self, name, value=None):\n        self.name, self.value = name, value\n",
                    "rendered": {
                      "text": "\nclass LeafPattern(Pattern):\n\n    \"\"\"Leaf/terminal node of a pattern tree.\"\"\"\n\n    def __init__(self, name, value=None):\n        self.name, self.value = name, value\n",
                      "markdown": "`\nclass LeafPattern(Pattern):\n\n    \"\"\"Leaf/terminal node of a pattern tree.\"\"\"\n\n    def __init__(self, name, value=None):\n        self.name, self.value = name, value\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/docopt.py"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 31,
                  "endLine": 53,
                  "snippet": {
                    "text": "        uniq = list(set(self.flat())) if uniq is None else uniq\n        for i, child in enumerate(self.children):\n            if not hasattr(child, 'children'):\n                assert child in uniq\n                self.children[i] = uniq[uniq.index(child)]\n            else:\n                child.fix_identities(uniq)\n\n",
                    "rendered": {
                      "text": "        uniq = list(set(self.flat())) if uniq is None else uniq\n        for i, child in enumerate(self.children):\n            if not hasattr(child, 'children'):\n                assert child in uniq\n                self.children[i] = uniq[uniq.index(child)]\n            else:\n                child.fix_identities(uniq)\n\n",
                      "markdown": "`        uniq = list(set(self.flat())) if uniq is None else uniq\n        for i, child in enumerate(self.children):\n            if not hasattr(child, 'children'):\n                assert child in uniq\n                self.children[i] = uniq[uniq.index(child)]\n            else:\n                child.fix_identities(uniq)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/docopt.py"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 58,
                  "endLine": 50,
                  "snippet": {
                    "text": "        \"\"\"Make pattern-tree tips point to same object if they are equal.\"\"\"\n        if not hasattr(self, 'children'):\n            return self\n        uniq = list(set(self.flat())) if uniq is None else uniq\n        for i, child in enumerate(self.children):\n            if not hasattr(child, 'children'):\n                assert child in uniq\n                self.children[i] = uniq[uniq.index(child)]\n",
                    "rendered": {
                      "text": "        \"\"\"Make pattern-tree tips point to same object if they are equal.\"\"\"\n        if not hasattr(self, 'children'):\n            return self\n        uniq = list(set(self.flat())) if uniq is None else uniq\n        for i, child in enumerate(self.children):\n            if not hasattr(child, 'children'):\n                assert child in uniq\n                self.children[i] = uniq[uniq.index(child)]\n",
                      "markdown": "`        \"\"\"Make pattern-tree tips point to same object if they are equal.\"\"\"\n        if not hasattr(self, 'children'):\n            return self\n        uniq = list(set(self.flat())) if uniq is None else uniq\n        for i, child in enumerate(self.children):\n            if not hasattr(child, 'children'):\n                assert child in uniq\n                self.children[i] = uniq[uniq.index(child)]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/docopt.py"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 40,
                  "endLine": 49,
                  "endColumn": 46,
                  "snippet": {
                    "text": "        \"\"\"Make pattern-tree tips point to same object if they are equal.\"\"\"\n        if not hasattr(self, 'children'):\n            return self\n        uniq = list(set(self.flat())) if uniq is None else uniq\n        for i, child in enumerate(self.children):\n            if not hasattr(child, 'children'):\n                assert child in uniq\n",
                    "rendered": {
                      "text": "        \"\"\"Make pattern-tree tips point to same object if they are equal.\"\"\"\n        if not hasattr(self, 'children'):\n            return self\n        uniq = list(set(self.flat())) if uniq is None else uniq\n        for i, child in enumerate(self.children):\n            if not hasattr(child, 'children'):\n                assert child in uniq\n",
                      "markdown": "`        \"\"\"Make pattern-tree tips point to same object if they are equal.\"\"\"\n        if not hasattr(self, 'children'):\n            return self\n        uniq = list(set(self.flat())) if uniq is None else uniq\n        for i, child in enumerate(self.children):\n            if not hasattr(child, 'children'):\n                assert child in uniq\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/docopt.py"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 7,
                  "endLine": 49,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        \"\"\"Make pattern-tree tips point to same object if they are equal.\"\"\"\n        if not hasattr(self, 'children'):\n            return self\n        uniq = list(set(self.flat())) if uniq is None else uniq\n        for i, child in enumerate(self.children):\n            if not hasattr(child, 'children'):\n                assert child in uniq\n",
                    "rendered": {
                      "text": "        \"\"\"Make pattern-tree tips point to same object if they are equal.\"\"\"\n        if not hasattr(self, 'children'):\n            return self\n        uniq = list(set(self.flat())) if uniq is None else uniq\n        for i, child in enumerate(self.children):\n            if not hasattr(child, 'children'):\n                assert child in uniq\n",
                      "markdown": "`        \"\"\"Make pattern-tree tips point to same object if they are equal.\"\"\"\n        if not hasattr(self, 'children'):\n            return self\n        uniq = list(set(self.flat())) if uniq is None else uniq\n        for i, child in enumerate(self.children):\n            if not hasattr(child, 'children'):\n                assert child in uniq\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/build.gradle"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 19,
                  "endLine": 25,
                  "endColumn": 24,
                  "snippet": {
                    "text": "}\n\n// Project's root where CMakeLists.txt exists: rootDir/support/.cxx -> rootDir\ndef rootDir = Paths.get(project.buildDir.getParent()).getParent()\nprintln(\"rootDir: ${rootDir}\")\n\n// Output: Shared library (.so) for Android \n",
                    "rendered": {
                      "text": "}\n\n// Project's root where CMakeLists.txt exists: rootDir/support/.cxx -> rootDir\ndef rootDir = Paths.get(project.buildDir.getParent()).getParent()\nprintln(\"rootDir: ${rootDir}\")\n\n// Output: Shared library (.so) for Android \n",
                      "markdown": "`}\n\n// Project's root where CMakeLists.txt exists: rootDir/support/.cxx -> rootDir\ndef rootDir = Paths.get(project.buildDir.getParent()).getParent()\nprintln(\"rootDir: ${rootDir}\")\n\n// Output: Shared library (.so) for Android \n`"
                    }
                  },
                  "sourceLanguage": "build.gradle"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/build.gradle"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 30,
                  "endLine": 102,
                  "endColumn": 35,
                  "snippet": {
                    "text": "assemble.doLast\n{\n    // Instead of `ninja install`, Gradle will deploy the files.\n    // We are doing this since FMT is dependent to the ANDROID_STL after build\n    copy {\n        from \"build/intermediates/cmake\"\n        into \"${rootDir}/libs\"\n",
                    "rendered": {
                      "text": "assemble.doLast\n{\n    // Instead of `ninja install`, Gradle will deploy the files.\n    // We are doing this since FMT is dependent to the ANDROID_STL after build\n    copy {\n        from \"build/intermediates/cmake\"\n        into \"${rootDir}/libs\"\n",
                      "markdown": "`assemble.doLast\n{\n    // Instead of `ninja install`, Gradle will deploy the files.\n    // We are doing this since FMT is dependent to the ANDROID_STL after build\n    copy {\n        from \"build/intermediates/cmake\"\n        into \"${rootDir}/libs\"\n`"
                    }
                  },
                  "sourceLanguage": "build.gradle"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/build.gradle"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 7,
                  "endLine": 93,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        prefabPublishing true\n    }\n    prefab {\n        fmt {\n            headers \"${rootDir}/include\"\n        }\n    }\n",
                    "rendered": {
                      "text": "        prefabPublishing true\n    }\n    prefab {\n        fmt {\n            headers \"${rootDir}/include\"\n        }\n    }\n",
                      "markdown": "`        prefabPublishing true\n    }\n    prefab {\n        fmt {\n            headers \"${rootDir}/include\"\n        }\n    }\n`"
                    }
                  },
                  "sourceLanguage": "build.gradle"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/build.gradle"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 25,
                  "endLine": 71,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    // External Native build\n    //  - Use existing CMakeList.txt\n    //  - Give path to CMake. This gradle file should be \n    //    neighbor of the top level cmake\n    externalNativeBuild {\n        cmake {\n            version \"3.10.0+\"\n",
                    "rendered": {
                      "text": "    // External Native build\n    //  - Use existing CMakeList.txt\n    //  - Give path to CMake. This gradle file should be \n    //    neighbor of the top level cmake\n    externalNativeBuild {\n        cmake {\n            version \"3.10.0+\"\n",
                      "markdown": "`    // External Native build\n    //  - Use existing CMakeList.txt\n    //  - Give path to CMake. This gradle file should be \n    //    neighbor of the top level cmake\n    externalNativeBuild {\n        cmake {\n            version \"3.10.0+\"\n`"
                    }
                  },
                  "sourceLanguage": "build.gradle"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/manage.py"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 13,
                  "endLine": 217,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    args = docopt.docopt(__doc__)\n    if args.get('release'):\n        release(args)\n    elif args.get('site'):\n        update_site(create_build_env())\n",
                    "rendered": {
                      "text": "    args = docopt.docopt(__doc__)\n    if args.get('release'):\n        release(args)\n    elif args.get('site'):\n        update_site(create_build_env())\n",
                      "markdown": "`    args = docopt.docopt(__doc__)\n    if args.get('release'):\n        release(args)\n    elif args.get('site'):\n        update_site(create_build_env())\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/manage.py"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 11,
                  "endLine": 215,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\nif __name__ == '__main__':\n    args = docopt.docopt(__doc__)\n    if args.get('release'):\n        release(args)\n    elif args.get('site'):\n        update_site(create_build_env())\n",
                    "rendered": {
                      "text": "\nif __name__ == '__main__':\n    args = docopt.docopt(__doc__)\n    if args.get('release'):\n        release(args)\n    elif args.get('site'):\n        update_site(create_build_env())\n",
                      "markdown": "`\nif __name__ == '__main__':\n    args = docopt.docopt(__doc__)\n    if args.get('release'):\n        release(args)\n    elif args.get('site'):\n        update_site(create_build_env())\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/manage.py"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 16,
                  "endLine": 204,
                  "endColumn": 22,
                  "snippet": {
                    "text": "    id = r.json()['id']\n    uploads_url = 'https://uploads.github.com/repos/fmtlib/fmt/releases'\n    package = 'fmt-{}.zip'.format(version)\n    r = requests.post(\n        '{}/{}/assets?name={}'.format(uploads_url, id, package),\n        headers={'Content-Type': 'application/zip'} | auth_headers,\n        data=open('build/fmt/' + package, 'rb'))\n",
                    "rendered": {
                      "text": "    id = r.json()['id']\n    uploads_url = 'https://uploads.github.com/repos/fmtlib/fmt/releases'\n    package = 'fmt-{}.zip'.format(version)\n    r = requests.post(\n        '{}/{}/assets?name={}'.format(uploads_url, id, package),\n        headers={'Content-Type': 'application/zip'} | auth_headers,\n        data=open('build/fmt/' + package, 'rb'))\n",
                      "markdown": "`    id = r.json()['id']\n    uploads_url = 'https://uploads.github.com/repos/fmtlib/fmt/releases'\n    package = 'fmt-{}.zip'.format(version)\n    r = requests.post(\n        '{}/{}/assets?name={}'.format(uploads_url, id, package),\n        headers={'Content-Type': 'application/zip'} | auth_headers,\n        data=open('build/fmt/' + package, 'rb'))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/manage.py"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 16,
                  "endLine": 194,
                  "endColumn": 22,
                  "snippet": {
                    "text": "    # Create a release on GitHub.\n    fmt_repo.push('origin', 'release')\n    auth_headers = {'Authorization': 'token ' + os.getenv('FMT_TOKEN')}\n    r = requests.post('https://api.github.com/repos/fmtlib/fmt/releases',\n                      headers=auth_headers,\n                      data=json.dumps({'tag_name': version,\n                                       'target_commitish': 'release',\n",
                    "rendered": {
                      "text": "    # Create a release on GitHub.\n    fmt_repo.push('origin', 'release')\n    auth_headers = {'Authorization': 'token ' + os.getenv('FMT_TOKEN')}\n    r = requests.post('https://api.github.com/repos/fmtlib/fmt/releases',\n                      headers=auth_headers,\n                      data=json.dumps({'tag_name': version,\n                                       'target_commitish': 'release',\n",
                      "markdown": "`    # Create a release on GitHub.\n    fmt_repo.push('origin', 'release')\n    auth_headers = {'Authorization': 'token ' + os.getenv('FMT_TOKEN')}\n    r = requests.post('https://api.github.com/repos/fmtlib/fmt/releases',\n                      headers=auth_headers,\n                      data=json.dumps({'tag_name': version,\n                                       'target_commitish': 'release',\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/manage.py"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 17,
                  "endLine": 120,
                  "endColumn": 22,
                  "snippet": {
                    "text": "    env = create_build_env()\n    fmt_repo = env.fmt_repo\n\n    branch = args.get('<branch>')\n    if branch is None:\n        branch = 'master'\n    if not fmt_repo.update('-b', branch, fmt_repo_url):\n",
                    "rendered": {
                      "text": "    env = create_build_env()\n    fmt_repo = env.fmt_repo\n\n    branch = args.get('<branch>')\n    if branch is None:\n        branch = 'master'\n    if not fmt_repo.update('-b', branch, fmt_repo_url):\n",
                      "markdown": "`    env = create_build_env()\n    fmt_repo = env.fmt_repo\n\n    branch = args.get('<branch>')\n    if branch is None:\n        branch = 'master'\n    if not fmt_repo.update('-b', branch, fmt_repo_url):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/manage.py"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 30,
                  "endLine": 69,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        self.cwd = cwd\n\n    def __call__(self, *args, **kwargs):\n        kwargs['cwd'] = kwargs.get('cwd', self.cwd)\n        check_call(args, **kwargs)\n\n\n",
                    "rendered": {
                      "text": "        self.cwd = cwd\n\n    def __call__(self, *args, **kwargs):\n        kwargs['cwd'] = kwargs.get('cwd', self.cwd)\n        check_call(args, **kwargs)\n\n\n",
                      "markdown": "`        self.cwd = cwd\n\n    def __call__(self, *args, **kwargs):\n        kwargs['cwd'] = kwargs.get('cwd', self.cwd)\n        check_call(args, **kwargs)\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/manage.py"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 5,
                  "endLine": 126,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    if not fmt_repo.update('-b', branch, fmt_repo_url):\n        clean_checkout(fmt_repo, branch)\n\n    # Update the date in the changelog and extract the version and the first\n    # section content.\n    changelog = 'ChangeLog.md'\n    changelog_path = os.path.join(fmt_repo.dir, changelog)\n",
                    "rendered": {
                      "text": "    if not fmt_repo.update('-b', branch, fmt_repo_url):\n        clean_checkout(fmt_repo, branch)\n\n    # Update the date in the changelog and extract the version and the first\n    # section content.\n    changelog = 'ChangeLog.md'\n    changelog_path = os.path.join(fmt_repo.dir, changelog)\n",
                      "markdown": "`    if not fmt_repo.update('-b', branch, fmt_repo_url):\n        clean_checkout(fmt_repo, branch)\n\n    # Update the date in the changelog and extract the version and the first\n    # section content.\n    changelog = 'ChangeLog.md'\n    changelog_path = os.path.join(fmt_repo.dir, changelog)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/manage.py"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 3,
                  "endLine": 117,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n\ndef release(args):\n    env = create_build_env()\n    fmt_repo = env.fmt_repo\n\n    branch = args.get('<branch>')\n",
                    "rendered": {
                      "text": "\n\ndef release(args):\n    env = create_build_env()\n    fmt_repo = env.fmt_repo\n\n    branch = args.get('<branch>')\n",
                      "markdown": "`\n\ndef release(args):\n    env = create_build_env()\n    fmt_repo = env.fmt_repo\n\n    branch = args.get('<branch>')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/manage.py"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 10,
                  "endLine": 82,
                  "snippet": {
                    "text": "    env.fmt_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n    env.build_dir = 'build'\n    env.fmt_repo = Git(os.path.join(env.build_dir, 'fmt'))\n    return env\n\n\nfmt_repo_url = 'git@github.com:fmtlib/fmt'\n\n",
                    "rendered": {
                      "text": "    env.fmt_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n    env.build_dir = 'build'\n    env.fmt_repo = Git(os.path.join(env.build_dir, 'fmt'))\n    return env\n\n\nfmt_repo_url = 'git@github.com:fmtlib/fmt'\n\n",
                      "markdown": "`    env.fmt_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n    env.build_dir = 'build'\n    env.fmt_repo = Git(os.path.join(env.build_dir, 'fmt'))\n    return env\n\n\nfmt_repo_url = 'git@github.com:fmtlib/fmt'\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/support/manage.py"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 3,
                  "endLine": 77,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    \"\"\"Create a build environment.\"\"\"\n    class Env:\n        pass\n    env = Env()\n    env.fmt_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n    env.build_dir = 'build'\n    env.fmt_repo = Git(os.path.join(env.build_dir, 'fmt'))\n",
                    "rendered": {
                      "text": "    \"\"\"Create a build environment.\"\"\"\n    class Env:\n        pass\n    env = Env()\n    env.fmt_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n    env.build_dir = 'build'\n    env.fmt_repo = Git(os.path.join(env.build_dir, 'fmt'))\n",
                      "markdown": "`    \"\"\"Create a build environment.\"\"\"\n    class Env:\n        pass\n    env = Env()\n    env.fmt_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n    env.build_dir = 'build'\n    env.fmt_repo = Git(os.path.join(env.build_dir, 'fmt'))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/README.md"
                },
                "region": {
                  "startLine": 484,
                  "startColumn": 48,
                  "endLine": 484,
                  "endColumn": 52,
                  "snippet": {
                    "text": "advisory](https://github.com/fmtlib/fmt/security/advisories/new).\n\nThis project is maintained by a team of volunteers on a\nreasonable-effort basis. As such, please give us at least *90* days to\nwork on a fix before public exposure.\n",
                    "rendered": {
                      "text": "advisory](https://github.com/fmtlib/fmt/security/advisories/new).\n\nThis project is maintained by a team of volunteers on a\nreasonable-effort basis. As such, please give us at least *90* days to\nwork on a fix before public exposure.\n",
                      "markdown": "`advisory](https://github.com/fmtlib/fmt/security/advisories/new).\n\nThis project is maintained by a team of volunteers on a\nreasonable-effort basis. As such, please give us at least *90* days to\nwork on a fix before public exposure.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/README.md"
                },
                "region": {
                  "startLine": 480,
                  "startColumn": 46,
                  "endLine": 480,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\n# Security Policy\n\nTo report a security issue, please disclose it at [security\nadvisory](https://github.com/fmtlib/fmt/security/advisories/new).\n\nThis project is maintained by a team of volunteers on a\n",
                    "rendered": {
                      "text": "\n# Security Policy\n\nTo report a security issue, please disclose it at [security\nadvisory](https://github.com/fmtlib/fmt/security/advisories/new).\n\nThis project is maintained by a team of volunteers on a\n",
                      "markdown": "`\n# Security Policy\n\nTo report a security issue, please disclose it at [security\nadvisory](https://github.com/fmtlib/fmt/security/advisories/new).\n\nThis project is maintained by a team of volunteers on a\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/README.md"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 23,
                  "endLine": 132,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n    [1, 2, 3]\n\n**Check a format string at compile time**\n\n``` c++\nstd::string s = fmt::format(\"{:d}\", \"I am not a number\");\n",
                    "rendered": {
                      "text": "\n    [1, 2, 3]\n\n**Check a format string at compile time**\n\n``` c++\nstd::string s = fmt::format(\"{:d}\", \"I am not a number\");\n",
                      "markdown": "`\n    [1, 2, 3]\n\n**Check a format string at compile time**\n\n``` c++\nstd::string s = fmt::format(\"{:d}\", \"I am not a number\");\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/README.md"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 13,
                  "endLine": 57,
                  "endColumn": 17,
                  "snippet": {
                    "text": "  [tests](https://github.com/fmtlib/fmt/tree/master/test) and is\n  [continuously fuzzed](https://bugs.chromium.org/p/oss-fuzz/issues/list?colspec=ID%20Type%20Component%20Status%20Proj%20Reported%20Owner%20Summary&q=proj%3Dfmt&can=1)\n- Safety: the library is fully type-safe, errors in format strings can\n  be reported at compile time, automatic memory management prevents\n  buffer overflow errors\n- Ease of use: small self-contained code base, no external\n  dependencies, permissive MIT\n",
                    "rendered": {
                      "text": "  [tests](https://github.com/fmtlib/fmt/tree/master/test) and is\n  [continuously fuzzed](https://bugs.chromium.org/p/oss-fuzz/issues/list?colspec=ID%20Type%20Component%20Status%20Proj%20Reported%20Owner%20Summary&q=proj%3Dfmt&can=1)\n- Safety: the library is fully type-safe, errors in format strings can\n  be reported at compile time, automatic memory management prevents\n  buffer overflow errors\n- Ease of use: small self-contained code base, no external\n  dependencies, permissive MIT\n",
                      "markdown": "`  [tests](https://github.com/fmtlib/fmt/tree/master/test) and is\n  [continuously fuzzed](https://bugs.chromium.org/p/oss-fuzz/issues/list?colspec=ID%20Type%20Component%20Status%20Proj%20Reported%20Owner%20Summary&q=proj%3Dfmt&can=1)\n- Safety: the library is fully type-safe, errors in format strings can\n  be reported at compile time, automatic memory management prevents\n  buffer overflow errors\n- Ease of use: small self-contained code base, no external\n  dependencies, permissive MIT\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/README.md"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 16,
                  "endLine": 7,
                  "endColumn": 20,
                  "snippet": {
                    "text": "=workflow%3Awindows)\n[![fmt is continuously fuzzed at oss-fuzz](https://oss-fuzz-build-logs.storage.googleapis.com/badges/fmt.svg)](https://bugs.chromium.org/p/oss-fuzz/issues/list?\\%0Acolspec=ID%20Type%20Component%20Status%20Proj%20Reported%20Owner%20\\%0ASummary&q=proj%3Dfmt&can=1)\n[![Ask questions at StackOverflow with the tag fmt](https://img.shields.io/badge/stackoverflow-fmt-blue.svg)](https://stackoverflow.com/questions/tagged/fmt)\n[![image](https://api.securityscorecards.dev/projects/github.com/fmtlib/fmt/badge)](https://securityscorecards.dev/viewer/?uri=github.com/fmtlib/fmt)\n\n**{fmt}** i",
                    "rendered": {
                      "text": "=workflow%3Awindows)\n[![fmt is continuously fuzzed at oss-fuzz](https://oss-fuzz-build-logs.storage.googleapis.com/badges/fmt.svg)](https://bugs.chromium.org/p/oss-fuzz/issues/list?\\%0Acolspec=ID%20Type%20Component%20Status%20Proj%20Reported%20Owner%20\\%0ASummary&q=proj%3Dfmt&can=1)\n[![Ask questions at StackOverflow with the tag fmt](https://img.shields.io/badge/stackoverflow-fmt-blue.svg)](https://stackoverflow.com/questions/tagged/fmt)\n[![image](https://api.securityscorecards.dev/projects/github.com/fmtlib/fmt/badge)](https://securityscorecards.dev/viewer/?uri=github.com/fmtlib/fmt)\n\n**{fmt}** i",
                      "markdown": "`=workflow%3Awindows)\n[![fmt is continuously fuzzed at oss-fuzz](https://oss-fuzz-build-logs.storage.googleapis.com/badges/fmt.svg)](https://bugs.chromium.org/p/oss-fuzz/issues/list?\\%0Acolspec=ID%20Type%20Component%20Status%20Proj%20Reported%20Owner%20\\%0ASummary&q=proj%3Dfmt&can=1)\n[![Ask questions at StackOverflow with the tag fmt](https://img.shields.io/badge/stackoverflow-fmt-blue.svg)](https://stackoverflow.com/questions/tagged/fmt)\n[![image](https://api.securityscorecards.dev/projects/github.com/fmtlib/fmt/badge)](https://securityscorecards.dev/viewer/?uri=github.com/fmtlib/fmt)\n\n**{fmt}** i`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/README.md"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 29,
                  "endLine": 6,
                  "endColumn": 33,
                  "snippet": {
                    "text": "linux)\n[![image](https://github.com/fmtlib/fmt/workflows/macos/badge.svg)](https://github.com/fmtlib/fmt/actions?query=workflow%3Amacos)\n[![image](https://github.com/fmtlib/fmt/workflows/windows/badge.svg)](https://github.com/fmtlib/fmt/actions?query=workflow%3Awindows)\n[![fmt is continuously fuzzed at oss-fuzz](https://oss-fuzz-build-logs.storage.googleapis.com/badges/fmt.svg)](https://bugs.chromium.org/p/oss-fuzz/issues/list?\\%0Acolspec=ID%20Type%20Component%20Status%20Proj%20Reported%20Owner%20\\%0ASummary&q=proj%3Dfmt&can=1)\n[![Ask questions at StackOverflow with the tag fmt](https://img.shield",
                    "rendered": {
                      "text": "linux)\n[![image](https://github.com/fmtlib/fmt/workflows/macos/badge.svg)](https://github.com/fmtlib/fmt/actions?query=workflow%3Amacos)\n[![image](https://github.com/fmtlib/fmt/workflows/windows/badge.svg)](https://github.com/fmtlib/fmt/actions?query=workflow%3Awindows)\n[![fmt is continuously fuzzed at oss-fuzz](https://oss-fuzz-build-logs.storage.googleapis.com/badges/fmt.svg)](https://bugs.chromium.org/p/oss-fuzz/issues/list?\\%0Acolspec=ID%20Type%20Component%20Status%20Proj%20Reported%20Owner%20\\%0ASummary&q=proj%3Dfmt&can=1)\n[![Ask questions at StackOverflow with the tag fmt](https://img.shield",
                      "markdown": "`linux)\n[![image](https://github.com/fmtlib/fmt/workflows/macos/badge.svg)](https://github.com/fmtlib/fmt/actions?query=workflow%3Amacos)\n[![image](https://github.com/fmtlib/fmt/workflows/windows/badge.svg)](https://github.com/fmtlib/fmt/actions?query=workflow%3Awindows)\n[![fmt is continuously fuzzed at oss-fuzz](https://oss-fuzz-build-logs.storage.googleapis.com/badges/fmt.svg)](https://bugs.chromium.org/p/oss-fuzz/issues/list?\\%0Acolspec=ID%20Type%20Component%20Status%20Proj%20Reported%20Owner%20\\%0ASummary&q=proj%3Dfmt&can=1)\n[![Ask questions at StackOverflow with the tag fmt](https://img.shield`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/README.md"
                },
                "region": {
                  "startLine": 254,
                  "startColumn": 5,
                  "endLine": 254,
                  "endColumn": 10,
                  "snippet": {
                    "text": "run the benchmarks you first need to clone this repository and generate\nMakefiles with CMake:\n\n    $ git clone --recursive https://github.com/fmtlib/format-benchmark.git\n    $ cd format-benchmark\n    $ cmake .\n\n",
                    "rendered": {
                      "text": "run the benchmarks you first need to clone this repository and generate\nMakefiles with CMake:\n\n    $ git clone --recursive https://github.com/fmtlib/format-benchmark.git\n    $ cd format-benchmark\n    $ cmake .\n\n",
                      "markdown": "`run the benchmarks you first need to clone this repository and generate\nMakefiles with CMake:\n\n    $ git clone --recursive https://github.com/fmtlib/format-benchmark.git\n    $ cd format-benchmark\n    $ cmake .\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/README.md"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 1,
                  "endLine": 222,
                  "endColumn": 6,
                  "snippet": {
                    "text": "|---------------|-----------------|----------------------|--------------------|\n| printf        |             1.6 |                   54 |                 50 |\n| IOStreams     |            25.9 |                   98 |                 84 |\n| fmt 83652df   |             4.8 |                   54 |                 50 |\n| tinyformat    |            29.1 |                  161 |                136 |\n| Boost Format  |            55.0 |                  530 |                317 |\n\n",
                    "rendered": {
                      "text": "|---------------|-----------------|----------------------|--------------------|\n| printf        |             1.6 |                   54 |                 50 |\n| IOStreams     |            25.9 |                   98 |                 84 |\n| fmt 83652df   |             4.8 |                   54 |                 50 |\n| tinyformat    |            29.1 |                  161 |                136 |\n| Boost Format  |            55.0 |                  530 |                317 |\n\n",
                      "markdown": "`|---------------|-----------------|----------------------|--------------------|\n| printf        |             1.6 |                   54 |                 50 |\n| IOStreams     |            25.9 |                   98 |                 84 |\n| fmt 83652df   |             4.8 |                   54 |                 50 |\n| tinyformat    |            29.1 |                  161 |                136 |\n| Boost Format  |            55.0 |                  530 |                317 |\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/README.md"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 63,
                  "endLine": 209,
                  "endColumn": 69,
                  "snippet": {
                    "text": "The script [bloat-test.py][test] from [format-benchmark][bench] tests compile\ntime and code bloat for nontrivial projects. It generates 100 translation units\nand uses `printf()` or its alternative five times in each to simulate a\nmedium-sized project. The resulting executable size and compile time (Apple\nclang version 15.0.0 (clang-1500.1.0.2.5), macOS Sonoma, best of three) is shown\nin the following tables.\n\n",
                    "rendered": {
                      "text": "The script [bloat-test.py][test] from [format-benchmark][bench] tests compile\ntime and code bloat for nontrivial projects. It generates 100 translation units\nand uses `printf()` or its alternative five times in each to simulate a\nmedium-sized project. The resulting executable size and compile time (Apple\nclang version 15.0.0 (clang-1500.1.0.2.5), macOS Sonoma, best of three) is shown\nin the following tables.\n\n",
                      "markdown": "`The script [bloat-test.py][test] from [format-benchmark][bench] tests compile\ntime and code bloat for nontrivial projects. It generates 100 translation units\nand uses `printf()` or its alternative five times in each to simulate a\nmedium-sized project. The resulting executable size and compile time (Apple\nclang version 15.0.0 (clang-1500.1.0.2.5), macOS Sonoma, best of three) is shown\nin the following tables.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/README.md"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 77,
                  "endLine": 207,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\n## Compile time and code bloat\n\nThe script [bloat-test.py][test] from [format-benchmark][bench] tests compile\ntime and code bloat for nontrivial projects. It generates 100 translation units\nand uses `printf()` or its alternative five times in each to simulate a\nmedium-sized project. The resulting executable size and compile time (Apple\nclang version 15.0.0 (clang-1500.1.0.2.5), macOS Sonoma, best of three) is shown\n",
                    "rendered": {
                      "text": "\n## Compile time and code bloat\n\nThe script [bloat-test.py][test] from [format-benchmark][bench] tests compile\ntime and code bloat for nontrivial projects. It generates 100 translation units\nand uses `printf()` or its alternative five times in each to simulate a\nmedium-sized project. The resulting executable size and compile time (Apple\nclang version 15.0.0 (clang-1500.1.0.2.5), macOS Sonoma, best of three) is shown\n",
                      "markdown": "`\n## Compile time and code bloat\n\nThe script [bloat-test.py][test] from [format-benchmark][bench] tests compile\ntime and code bloat for nontrivial projects. It generates 100 translation units\nand uses `printf()` or its alternative five times in each to simulate a\nmedium-sized project. The resulting executable size and compile time (Apple\nclang version 15.0.0 (clang-1500.1.0.2.5), macOS Sonoma, best of three) is shown\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/README.md"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 3,
                  "endLine": 206,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n## Compile time and code bloat\n\nThe script [bloat-test.py][test] from [format-benchmark][bench] tests compile\ntime and code bloat for nontrivial projects. It generates 100 translation units\nand uses `printf()` or its alternative five times in each to simulate a\nmedium-sized project. The resulting executable size and compile time (Apple\n",
                    "rendered": {
                      "text": "\n## Compile time and code bloat\n\nThe script [bloat-test.py][test] from [format-benchmark][bench] tests compile\ntime and code bloat for nontrivial projects. It generates 100 translation units\nand uses `printf()` or its alternative five times in each to simulate a\nmedium-sized project. The resulting executable size and compile time (Apple\n",
                      "markdown": "`\n## Compile time and code bloat\n\nThe script [bloat-test.py][test] from [format-benchmark][bench] tests compile\ntime and code bloat for nontrivial projects. It generates 100 translation units\nand uses `printf()` or its alternative five times in each to simulate a\nmedium-sized project. The resulting executable size and compile time (Apple\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/README.md"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 10,
                  "endLine": 204,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\n[![image](https://user-images.githubusercontent.com/576385/95684665-11719600-0ba8-11eb-8e5b-972ff4e49428.png)](https://fmt.dev/unknown_mac64_clang12.0.html)\n\n## Compile time and code bloat\n\nThe script [bloat-test.py][test] from [format-benchmark][bench] tests compile\ntime and code bloat for nontrivial projects. It generates 100 translation units\n",
                    "rendered": {
                      "text": "\n[![image](https://user-images.githubusercontent.com/576385/95684665-11719600-0ba8-11eb-8e5b-972ff4e49428.png)](https://fmt.dev/unknown_mac64_clang12.0.html)\n\n## Compile time and code bloat\n\nThe script [bloat-test.py][test] from [format-benchmark][bench] tests compile\ntime and code bloat for nontrivial projects. It generates 100 translation units\n",
                      "markdown": "`\n[![image](https://user-images.githubusercontent.com/576385/95684665-11719600-0ba8-11eb-8e5b-972ff4e49428.png)](https://fmt.dev/unknown_mac64_clang12.0.html)\n\n## Compile time and code bloat\n\nThe script [bloat-test.py][test] from [format-benchmark][bench] tests compile\ntime and code bloat for nontrivial projects. It generates 100 translation units\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fmt.zip/README.md"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 53,
                  "endLine": 51,
                  "endColumn": 59,
                  "snippet": {
                    "text": "  second](http://www.zverovich.net/2020/06/13/fast-int-to-string-revisited.html)\n- Small code size both in terms of source code with the minimum\n  configuration consisting of just three files, `core.h`, `format.h`\n  and `format-inl.h`, and compiled code; see [Compile time and code\n  bloat](#compile-time-and-code-bloat)\n- Reliability: the library has an extensive set of\n  [tests](https://github.com/fmtlib/fmt/tree/master/test) and is\n",
                    "rendered": {
                      "text": "  second](http://www.zverovich.net/2020/06/13/fast-int-to-string-revisited.html)\n- Small code size both in terms of source code with the minimum\n  configuration consisting of just three files, `core.h`, `format.h`\n  and `format-inl.h`, and compiled code; see [Compile time and code\n  bloat](#compile-time-and-code-bloat)\n- Reliability: the library has an extensive set of\n  [tests](https://github.com/fmtlib/fmt/tree/master/test) and is\n",
                      "markdown": "`  second](http://www.zverovich.net/2020/06/13/fast-int-to-string-revisited.html)\n- Small code size both in terms of source code with the minimum\n  configuration consisting of just three files, `core.h`, `format.h`\n  and `format-inl.h`, and compiled code; see [Compile time and code\n  bloat](#compile-time-and-code-bloat)\n- Reliability: the library has an extensive set of\n  [tests](https://github.com/fmtlib/fmt/tree/master/test) and is\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}