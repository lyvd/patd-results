{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/pre-receive.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                      "markdown": "`\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                    "rendered": {
                      "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                      "markdown": "`\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 15,
                  "endLine": 77,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                    "rendered": {
                      "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                      "markdown": "`#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 27,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                    "rendered": {
                      "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                      "markdown": "`\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                      "markdown": "`\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                    "rendered": {
                      "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                      "markdown": "`# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                    "rendered": {
                      "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                      "markdown": "`# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                    "rendered": {
                      "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                      "markdown": "`\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/applypatch-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/info/exclude"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                    "rendered": {
                      "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                      "markdown": "`# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/in_prometheus/async_wrapper.rb"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 19,
                  "endLine": 32,
                  "endColumn": 24,
                  "snippet": {
                    "text": "          error = nil\n          response = Async::Task.current.async {\n            begin\n              @http.get(path)\n            rescue => e               # Async::Reactor rescue all error. handle it by itself\n              error = e\n            end\n",
                    "rendered": {
                      "text": "          error = nil\n          response = Async::Task.current.async {\n            begin\n              @http.get(path)\n            rescue => e               # Async::Reactor rescue all error. handle it by itself\n              error = e\n            end\n",
                      "markdown": "`          error = nil\n          response = Async::Task.current.async {\n            begin\n              @http.get(path)\n            rescue => e               # Async::Reactor rescue all error. handle it by itself\n              error = e\n            end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/prometheus.rb"
                },
                "region": {
                  "startLine": 386,
                  "startColumn": 59,
                  "endLine": 386,
                  "endColumn": 64,
                  "snippet": {
                    "text": "              @histogram = registry.histogram(element['name'].to_sym, docstring: element['desc'], labels: @base_labels.keys)\n            end\n          rescue ::Prometheus::Client::Registry::AlreadyRegisteredError\n            @histogram = Fluent::Plugin::Prometheus::Metric.get(registry, element['name'].to_sym, :histogram, element['desc'])\n          end\n\n          if @initialized\n",
                    "rendered": {
                      "text": "              @histogram = registry.histogram(element['name'].to_sym, docstring: element['desc'], labels: @base_labels.keys)\n            end\n          rescue ::Prometheus::Client::Registry::AlreadyRegisteredError\n            @histogram = Fluent::Plugin::Prometheus::Metric.get(registry, element['name'].to_sym, :histogram, element['desc'])\n          end\n\n          if @initialized\n",
                      "markdown": "`              @histogram = registry.histogram(element['name'].to_sym, docstring: element['desc'], labels: @base_labels.keys)\n            end\n          rescue ::Prometheus::Client::Registry::AlreadyRegisteredError\n            @histogram = Fluent::Plugin::Prometheus::Metric.get(registry, element['name'].to_sym, :histogram, element['desc'])\n          end\n\n          if @initialized\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/prometheus.rb"
                },
                "region": {
                  "startLine": 349,
                  "startColumn": 57,
                  "endLine": 349,
                  "endColumn": 62,
                  "snippet": {
                    "text": "          begin\n            @summary = registry.summary(element['name'].to_sym, docstring: element['desc'], labels: @base_labels.keys)\n          rescue ::Prometheus::Client::Registry::AlreadyRegisteredError\n            @summary = Fluent::Plugin::Prometheus::Metric.get(registry, element['name'].to_sym, :summary, element['desc'])\n          end\n\n          if @initialized\n",
                    "rendered": {
                      "text": "          begin\n            @summary = registry.summary(element['name'].to_sym, docstring: element['desc'], labels: @base_labels.keys)\n          rescue ::Prometheus::Client::Registry::AlreadyRegisteredError\n            @summary = Fluent::Plugin::Prometheus::Metric.get(registry, element['name'].to_sym, :summary, element['desc'])\n          end\n\n          if @initialized\n",
                      "markdown": "`          begin\n            @summary = registry.summary(element['name'].to_sym, docstring: element['desc'], labels: @base_labels.keys)\n          rescue ::Prometheus::Client::Registry::AlreadyRegisteredError\n            @summary = Fluent::Plugin::Prometheus::Metric.get(registry, element['name'].to_sym, :summary, element['desc'])\n          end\n\n          if @initialized\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/prometheus.rb"
                },
                "region": {
                  "startLine": 314,
                  "startColumn": 57,
                  "endLine": 314,
                  "endColumn": 62,
                  "snippet": {
                    "text": "          begin\n            @counter = registry.counter(element['name'].to_sym, docstring: element['desc'], labels: @base_labels.keys)\n          rescue ::Prometheus::Client::Registry::AlreadyRegisteredError\n            @counter = Fluent::Plugin::Prometheus::Metric.get(registry, element['name'].to_sym, :counter, element['desc'])\n          end\n\n          if @initialized\n",
                    "rendered": {
                      "text": "          begin\n            @counter = registry.counter(element['name'].to_sym, docstring: element['desc'], labels: @base_labels.keys)\n          rescue ::Prometheus::Client::Registry::AlreadyRegisteredError\n            @counter = Fluent::Plugin::Prometheus::Metric.get(registry, element['name'].to_sym, :counter, element['desc'])\n          end\n\n          if @initialized\n",
                      "markdown": "`          begin\n            @counter = registry.counter(element['name'].to_sym, docstring: element['desc'], labels: @base_labels.keys)\n          rescue ::Prometheus::Client::Registry::AlreadyRegisteredError\n            @counter = Fluent::Plugin::Prometheus::Metric.get(registry, element['name'].to_sym, :counter, element['desc'])\n          end\n\n          if @initialized\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/prometheus.rb"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 55,
                  "endLine": 288,
                  "endColumn": 60,
                  "snippet": {
                    "text": "          begin\n            @gauge = registry.gauge(element['name'].to_sym, docstring: element['desc'], labels: @base_labels.keys)\n          rescue ::Prometheus::Client::Registry::AlreadyRegisteredError\n            @gauge = Fluent::Plugin::Prometheus::Metric.get(registry, element['name'].to_sym, :gauge, element['desc'])\n          end\n\n          if @initialized\n",
                    "rendered": {
                      "text": "          begin\n            @gauge = registry.gauge(element['name'].to_sym, docstring: element['desc'], labels: @base_labels.keys)\n          rescue ::Prometheus::Client::Registry::AlreadyRegisteredError\n            @gauge = Fluent::Plugin::Prometheus::Metric.get(registry, element['name'].to_sym, :gauge, element['desc'])\n          end\n\n          if @initialized\n",
                      "markdown": "`          begin\n            @gauge = registry.gauge(element['name'].to_sym, docstring: element['desc'], labels: @base_labels.keys)\n          rescue ::Prometheus::Client::Registry::AlreadyRegisteredError\n            @gauge = Fluent::Plugin::Prometheus::Metric.get(registry, element['name'].to_sym, :gauge, element['desc'])\n          end\n\n          if @initialized\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/prometheus.rb"
                },
                "region": {
                  "startLine": 264,
                  "startColumn": 27,
                  "endLine": 264,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        end\n\n        def self.get(registry, name, type, docstring)\n          metric = registry.get(name)\n\n          # should have same type, docstring\n          if metric.type != type\n",
                    "rendered": {
                      "text": "        end\n\n        def self.get(registry, name, type, docstring)\n          metric = registry.get(name)\n\n          # should have same type, docstring\n          if metric.type != type\n",
                      "markdown": "`        end\n\n        def self.get(registry, name, type, docstring)\n          metric = registry.get(name)\n\n          # should have same type, docstring\n          if metric.type != type\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/prometheus.rb"
                },
                "region": {
                  "startLine": 263,
                  "startColumn": 16,
                  "endLine": 263,
                  "endColumn": 21,
                  "snippet": {
                    "text": "          label\n        end\n\n        def self.get(registry, name, type, docstring)\n          metric = registry.get(name)\n\n          # should have same type, docstring\n",
                    "rendered": {
                      "text": "          label\n        end\n\n        def self.get(registry, name, type, docstring)\n          metric = registry.get(name)\n\n          # should have same type, docstring\n",
                      "markdown": "`          label\n        end\n\n        def self.get(registry, name, type, docstring)\n          metric = registry.get(name)\n\n          # should have same type, docstring\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/prometheus.rb"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 25,
                  "endLine": 193,
                  "endColumn": 33,
                  "snippet": {
                    "text": "      def instrument(tag, es, metrics)\n        placeholder_values = {\n          'tag' => tag,\n          'hostname' => @hostname,\n          'worker_id' => fluentd_worker_id,\n        }\n\n",
                    "rendered": {
                      "text": "      def instrument(tag, es, metrics)\n        placeholder_values = {\n          'tag' => tag,\n          'hostname' => @hostname,\n          'worker_id' => fluentd_worker_id,\n        }\n\n",
                      "markdown": "`      def instrument(tag, es, metrics)\n        placeholder_values = {\n          'tag' => tag,\n          'hostname' => @hostname,\n          'worker_id' => fluentd_worker_id,\n        }\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/prometheus.rb"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 11,
                  "endLine": 193,
                  "endColumn": 19,
                  "snippet": {
                    "text": "      def instrument(tag, es, metrics)\n        placeholder_values = {\n          'tag' => tag,\n          'hostname' => @hostname,\n          'worker_id' => fluentd_worker_id,\n        }\n\n",
                    "rendered": {
                      "text": "      def instrument(tag, es, metrics)\n        placeholder_values = {\n          'tag' => tag,\n          'hostname' => @hostname,\n          'worker_id' => fluentd_worker_id,\n        }\n\n",
                      "markdown": "`      def instrument(tag, es, metrics)\n        placeholder_values = {\n          'tag' => tag,\n          'hostname' => @hostname,\n          'worker_id' => fluentd_worker_id,\n        }\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/prometheus.rb"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 25,
                  "endLine": 173,
                  "endColumn": 33,
                  "snippet": {
                    "text": "      def instrument_single(tag, time, record, metrics)\n        @placeholder_values[tag] ||= {\n          'tag' => tag,\n          'hostname' => @hostname,\n          'worker_id' => fluentd_worker_id,\n        }\n\n",
                    "rendered": {
                      "text": "      def instrument_single(tag, time, record, metrics)\n        @placeholder_values[tag] ||= {\n          'tag' => tag,\n          'hostname' => @hostname,\n          'worker_id' => fluentd_worker_id,\n        }\n\n",
                      "markdown": "`      def instrument_single(tag, time, record, metrics)\n        @placeholder_values[tag] ||= {\n          'tag' => tag,\n          'hostname' => @hostname,\n          'worker_id' => fluentd_worker_id,\n        }\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/prometheus.rb"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 11,
                  "endLine": 173,
                  "endColumn": 19,
                  "snippet": {
                    "text": "      def instrument_single(tag, time, record, metrics)\n        @placeholder_values[tag] ||= {\n          'tag' => tag,\n          'hostname' => @hostname,\n          'worker_id' => fluentd_worker_id,\n        }\n\n",
                    "rendered": {
                      "text": "      def instrument_single(tag, time, record, metrics)\n        @placeholder_values[tag] ||= {\n          'tag' => tag,\n          'hostname' => @hostname,\n          'worker_id' => fluentd_worker_id,\n        }\n\n",
                      "markdown": "`      def instrument_single(tag, time, record, metrics)\n        @placeholder_values[tag] ||= {\n          'tag' => tag,\n          'hostname' => @hostname,\n          'worker_id' => fluentd_worker_id,\n        }\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/prometheus.rb"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 9,
                  "endLine": 167,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        super\n        @placeholder_values = {}\n        @placeholder_expander_builder = Fluent::Plugin::Prometheus.placeholder_expander(log)\n        @hostname = Socket.gethostname\n      end\n\n      def instrument_single(tag, time, record, metrics)\n",
                    "rendered": {
                      "text": "        super\n        @placeholder_values = {}\n        @placeholder_expander_builder = Fluent::Plugin::Prometheus.placeholder_expander(log)\n        @hostname = Socket.gethostname\n      end\n\n      def instrument_single(tag, time, record, metrics)\n",
                      "markdown": "`        super\n        @placeholder_values = {}\n        @placeholder_expander_builder = Fluent::Plugin::Prometheus.placeholder_expander(log)\n        @hostname = Socket.gethostname\n      end\n\n      def instrument_single(tag, time, record, metrics)\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/prometheus.rb"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 32,
                  "endLine": 94,
                  "endColumn": 40,
                  "snippet": {
                    "text": "              if value == '${worker_id}'\n                # We retrieve fluentd_worker_id this way to not overcomplicate the code\n                initlabels[key.to_sym] = (ENV['SERVERENGINE_WORKER_ID'] || 0).to_i\n              elsif value == '${hostname}'\n                initlabels[key.to_sym] = Socket.gethostname\n              elsif !(value.start_with?('${'))\n                initlabels[key.to_sym] = value\n",
                    "rendered": {
                      "text": "              if value == '${worker_id}'\n                # We retrieve fluentd_worker_id this way to not overcomplicate the code\n                initlabels[key.to_sym] = (ENV['SERVERENGINE_WORKER_ID'] || 0).to_i\n              elsif value == '${hostname}'\n                initlabels[key.to_sym] = Socket.gethostname\n              elsif !(value.start_with?('${'))\n                initlabels[key.to_sym] = value\n",
                      "markdown": "`              if value == '${worker_id}'\n                # We retrieve fluentd_worker_id this way to not overcomplicate the code\n                initlabels[key.to_sym] = (ENV['SERVERENGINE_WORKER_ID'] || 0).to_i\n              elsif value == '${hostname}'\n                initlabels[key.to_sym] = Socket.gethostname\n              elsif !(value.start_with?('${'))\n                initlabels[key.to_sym] = value\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/prometheus.rb"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 76,
                  "endLine": 81,
                  "endColumn": 84,
                  "snippet": {
                    "text": "              raise ConfigError, \"Cannot set <initlabels> on non RecordAccessor/Placeholder key #{key} (value #{value}) in metric #{conf['name']}\"\n            end\n\n            if base_label_value == '${worker_id}' || base_label_value == '${hostname}'\n              raise ConfigError, \"Cannot set <initlabels> on reserved placeholder #{base_label_value} for key #{key} in metric #{conf['name']}\"\n            end\n            \n",
                    "rendered": {
                      "text": "              raise ConfigError, \"Cannot set <initlabels> on non RecordAccessor/Placeholder key #{key} (value #{value}) in metric #{conf['name']}\"\n            end\n\n            if base_label_value == '${worker_id}' || base_label_value == '${hostname}'\n              raise ConfigError, \"Cannot set <initlabels> on reserved placeholder #{base_label_value} for key #{key} in metric #{conf['name']}\"\n            end\n            \n",
                      "markdown": "`              raise ConfigError, \"Cannot set <initlabels> on non RecordAccessor/Placeholder key #{key} (value #{value}) in metric #{conf['name']}\"\n            end\n\n            if base_label_value == '${worker_id}' || base_label_value == '${hostname}'\n              raise ConfigError, \"Cannot set <initlabels> on reserved placeholder #{base_label_value} for key #{key} in metric #{conf['name']}\"\n            end\n            \n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/prometheus.rb"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 46,
                  "endLine": 47,
                  "endColumn": 54,
                  "snippet": {
                    "text": "            labels.first.has_key?(key)\n\n            # use RecordAccessor only for $. and $[ syntax\n            # otherwise use the value as is or expand the value by RecordTransformer for ${} syntax\n            if value.start_with?('$.') || value.start_with?('$[')\n              base_labels[key.to_sym] = PluginHelper::RecordAccessor::Accessor.new(value)\n            else\n",
                    "rendered": {
                      "text": "            labels.first.has_key?(key)\n\n            # use RecordAccessor only for $. and $[ syntax\n            # otherwise use the value as is or expand the value by RecordTransformer for ${} syntax\n            if value.start_with?('$.') || value.start_with?('$[')\n              base_labels[key.to_sym] = PluginHelper::RecordAccessor::Accessor.new(value)\n            else\n",
                      "markdown": "`            labels.first.has_key?(key)\n\n            # use RecordAccessor only for $. and $[ syntax\n            # otherwise use the value as is or expand the value by RecordTransformer for ${} syntax\n            if value.start_with?('$.') || value.start_with?('$[')\n              base_labels[key.to_sym] = PluginHelper::RecordAccessor::Accessor.new(value)\n            else\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/prometheus.rb"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 54,
                  "endLine": 38,
                  "endColumn": 58,
                  "snippet": {
                    "text": "      def self.parse_labels_elements(conf)\n        labels = conf.elements.select { |e| e.name == 'labels' }\n        if labels.size > 1\n          raise ConfigError, \"labels section must have at most 1\"\n        end\n\n        base_labels = {}\n",
                    "rendered": {
                      "text": "      def self.parse_labels_elements(conf)\n        labels = conf.elements.select { |e| e.name == 'labels' }\n        if labels.size > 1\n          raise ConfigError, \"labels section must have at most 1\"\n        end\n\n        base_labels = {}\n",
                      "markdown": "`      def self.parse_labels_elements(conf)\n        labels = conf.elements.select { |e| e.name == 'labels' }\n        if labels.size > 1\n          raise ConfigError, \"labels section must have at most 1\"\n        end\n\n        base_labels = {}\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/prometheus.rb"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 46,
                  "endLine": 47,
                  "endColumn": 54,
                  "snippet": {
                    "text": "            labels.first.has_key?(key)\n\n            # use RecordAccessor only for $. and $[ syntax\n            # otherwise use the value as is or expand the value by RecordTransformer for ${} syntax\n            if value.start_with?('$.') || value.start_with?('$[')\n              base_labels[key.to_sym] = PluginHelper::RecordAccessor::Accessor.new(value)\n            else\n",
                    "rendered": {
                      "text": "            labels.first.has_key?(key)\n\n            # use RecordAccessor only for $. and $[ syntax\n            # otherwise use the value as is or expand the value by RecordTransformer for ${} syntax\n            if value.start_with?('$.') || value.start_with?('$[')\n              base_labels[key.to_sym] = PluginHelper::RecordAccessor::Accessor.new(value)\n            else\n",
                      "markdown": "`            labels.first.has_key?(key)\n\n            # use RecordAccessor only for $. and $[ syntax\n            # otherwise use the value as is or expand the value by RecordTransformer for ${} syntax\n            if value.start_with?('$.') || value.start_with?('$[')\n              base_labels[key.to_sym] = PluginHelper::RecordAccessor::Accessor.new(value)\n            else\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/in_prometheus_output_monitor.rb"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 17,
                  "endLine": 228,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n    def get_gauge_or_counter(name, docstring)\n      if @registry.exist?(name)\n        @registry.get(name)\n      else\n        @registry.public_send(@gauge_or_counter, name, docstring: docstring, labels: @base_labels.keys + [:plugin_id, :type])\n      end\n",
                    "rendered": {
                      "text": "\n    def get_gauge_or_counter(name, docstring)\n      if @registry.exist?(name)\n        @registry.get(name)\n      else\n        @registry.public_send(@gauge_or_counter, name, docstring: docstring, labels: @base_labels.keys + [:plugin_id, :type])\n      end\n",
                      "markdown": "`\n    def get_gauge_or_counter(name, docstring)\n      if @registry.exist?(name)\n        @registry.get(name)\n      else\n        @registry.public_send(@gauge_or_counter, name, docstring: docstring, labels: @base_labels.keys + [:plugin_id, :type])\n      end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/in_prometheus_output_monitor.rb"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 17,
                  "endLine": 220,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n    def get_gauge(name, docstring)\n      if @registry.exist?(name)\n        @registry.get(name)\n      else\n        @registry.gauge(name, docstring: docstring, labels: @base_labels.keys + [:plugin_id, :type])\n      end\n",
                    "rendered": {
                      "text": "\n    def get_gauge(name, docstring)\n      if @registry.exist?(name)\n        @registry.get(name)\n      else\n        @registry.gauge(name, docstring: docstring, labels: @base_labels.keys + [:plugin_id, :type])\n      end\n",
                      "markdown": "`\n    def get_gauge(name, docstring)\n      if @registry.exist?(name)\n        @registry.get(name)\n      else\n        @registry.gauge(name, docstring: docstring, labels: @base_labels.keys + [:plugin_id, :type])\n      end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/in_prometheus_output_monitor.rb"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 78,
                  "endLine": 187,
                  "endColumn": 83,
                  "snippet": {
                    "text": "              if metric.is_a?(::Prometheus::Client::Gauge)\n                metric.set(info['instance_variables'][name], labels: label)\n              elsif metric.is_a?(::Prometheus::Client::Counter)\n                metric.increment(by: info['instance_variables'][name] - metric.get(labels: label), labels: label)\n              end\n            end\n          end\n",
                    "rendered": {
                      "text": "              if metric.is_a?(::Prometheus::Client::Gauge)\n                metric.set(info['instance_variables'][name], labels: label)\n              elsif metric.is_a?(::Prometheus::Client::Counter)\n                metric.increment(by: info['instance_variables'][name] - metric.get(labels: label), labels: label)\n              end\n            end\n          end\n",
                      "markdown": "`              if metric.is_a?(::Prometheus::Client::Gauge)\n                metric.set(info['instance_variables'][name], labels: label)\n              elsif metric.is_a?(::Prometheus::Client::Counter)\n                metric.increment(by: info['instance_variables'][name] - metric.get(labels: label), labels: label)\n              end\n            end\n          end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/in_prometheus_output_monitor.rb"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 56,
                  "endLine": 175,
                  "endColumn": 61,
                  "snippet": {
                    "text": "              if metric.is_a?(::Prometheus::Client::Gauge)\n                metric.set(info[name], labels: label)\n              elsif metric.is_a?(::Prometheus::Client::Counter)\n                metric.increment(by: info[name] - metric.get(labels: label), labels: label)\n              end\n            end\n          end\n",
                    "rendered": {
                      "text": "              if metric.is_a?(::Prometheus::Client::Gauge)\n                metric.set(info[name], labels: label)\n              elsif metric.is_a?(::Prometheus::Client::Counter)\n                metric.increment(by: info[name] - metric.get(labels: label), labels: label)\n              end\n            end\n          end\n",
                      "markdown": "`              if metric.is_a?(::Prometheus::Client::Gauge)\n                metric.set(info[name], labels: label)\n              elsif metric.is_a?(::Prometheus::Client::Counter)\n                metric.increment(by: info[name] - metric.get(labels: label), labels: label)\n              end\n            end\n          end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/in_prometheus_output_monitor.rb"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 56,
                  "endLine": 48,
                  "endColumn": 64,
                  "snippet": {
                    "text": "      super\n      hostname = Socket.gethostname\n      expander_builder = Fluent::Plugin::Prometheus.placeholder_expander(log)\n      expander = expander_builder.build({ 'hostname' => hostname, 'worker_id' => fluentd_worker_id })\n      @base_labels = parse_labels_elements(conf)\n      @base_labels.each do |key, value|\n        unless value.is_a?(String)\n",
                    "rendered": {
                      "text": "      super\n      hostname = Socket.gethostname\n      expander_builder = Fluent::Plugin::Prometheus.placeholder_expander(log)\n      expander = expander_builder.build({ 'hostname' => hostname, 'worker_id' => fluentd_worker_id })\n      @base_labels = parse_labels_elements(conf)\n      @base_labels.each do |key, value|\n        unless value.is_a?(String)\n",
                      "markdown": "`      super\n      hostname = Socket.gethostname\n      expander_builder = Fluent::Plugin::Prometheus.placeholder_expander(log)\n      expander = expander_builder.build({ 'hostname' => hostname, 'worker_id' => fluentd_worker_id })\n      @base_labels = parse_labels_elements(conf)\n      @base_labels.each do |key, value|\n        unless value.is_a?(String)\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/in_prometheus_output_monitor.rb"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 43,
                  "endLine": 48,
                  "endColumn": 51,
                  "snippet": {
                    "text": "      super\n      hostname = Socket.gethostname\n      expander_builder = Fluent::Plugin::Prometheus.placeholder_expander(log)\n      expander = expander_builder.build({ 'hostname' => hostname, 'worker_id' => fluentd_worker_id })\n      @base_labels = parse_labels_elements(conf)\n      @base_labels.each do |key, value|\n        unless value.is_a?(String)\n",
                    "rendered": {
                      "text": "      super\n      hostname = Socket.gethostname\n      expander_builder = Fluent::Plugin::Prometheus.placeholder_expander(log)\n      expander = expander_builder.build({ 'hostname' => hostname, 'worker_id' => fluentd_worker_id })\n      @base_labels = parse_labels_elements(conf)\n      @base_labels.each do |key, value|\n        unless value.is_a?(String)\n",
                      "markdown": "`      super\n      hostname = Socket.gethostname\n      expander_builder = Fluent::Plugin::Prometheus.placeholder_expander(log)\n      expander = expander_builder.build({ 'hostname' => hostname, 'worker_id' => fluentd_worker_id })\n      @base_labels = parse_labels_elements(conf)\n      @base_labels.each do |key, value|\n        unless value.is_a?(String)\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/in_prometheus_output_monitor.rb"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 6,
                  "endLine": 46,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n    def configure(conf)\n      super\n      hostname = Socket.gethostname\n      expander_builder = Fluent::Plugin::Prometheus.placeholder_expander(log)\n      expander = expander_builder.build({ 'hostname' => hostname, 'worker_id' => fluentd_worker_id })\n      @base_labels = parse_labels_elements(conf)\n",
                    "rendered": {
                      "text": "\n    def configure(conf)\n      super\n      hostname = Socket.gethostname\n      expander_builder = Fluent::Plugin::Prometheus.placeholder_expander(log)\n      expander = expander_builder.build({ 'hostname' => hostname, 'worker_id' => fluentd_worker_id })\n      @base_labels = parse_labels_elements(conf)\n",
                      "markdown": "`\n    def configure(conf)\n      super\n      hostname = Socket.gethostname\n      expander_builder = Fluent::Plugin::Prometheus.placeholder_expander(log)\n      expander = expander_builder.build({ 'hostname' => hostname, 'worker_id' => fluentd_worker_id })\n      @base_labels = parse_labels_elements(conf)\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.github/workflows/linux.yml"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 9,
                  "endLine": 18,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        os:\n          - ubuntu-latest\n        experimental: [false]\n    name: Ruby ${{ matrix.ruby }} unit testing on ${{ matrix.os }}\n    steps:\n    - uses: actions/checkout@v4\n    - uses: ruby/setup-ruby@v1\n",
                    "rendered": {
                      "text": "        os:\n          - ubuntu-latest\n        experimental: [false]\n    name: Ruby ${{ matrix.ruby }} unit testing on ${{ matrix.os }}\n    steps:\n    - uses: actions/checkout@v4\n    - uses: ruby/setup-ruby@v1\n",
                      "markdown": "`        os:\n          - ubuntu-latest\n        experimental: [false]\n    name: Ruby ${{ matrix.ruby }} unit testing on ${{ matrix.os }}\n    steps:\n    - uses: actions/checkout@v4\n    - uses: ruby/setup-ruby@v1\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/misc/prometheus_alerts.yaml"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 3,
                  "endLine": 53,
                  "endColumn": 12,
                  "snippet": {
                    "text": "  IF sum(rate(fluentd_output_status_emit_records{job=\"fluentd\"}[5m])) BY (instance) >  (3 * sum(rate(fluentd_output_status_emit_records{job=\"fluentd\"}[15m])) BY (instance))\n  FOR 1m\n  LABELS {\n    service = \"fluentd\",\n    severity = \"critical\"\n  }\n  ANNOTATIONS {\n",
                    "rendered": {
                      "text": "  IF sum(rate(fluentd_output_status_emit_records{job=\"fluentd\"}[5m])) BY (instance) >  (3 * sum(rate(fluentd_output_status_emit_records{job=\"fluentd\"}[15m])) BY (instance))\n  FOR 1m\n  LABELS {\n    service = \"fluentd\",\n    severity = \"critical\"\n  }\n  ANNOTATIONS {\n",
                      "markdown": "`  IF sum(rate(fluentd_output_status_emit_records{job=\"fluentd\"}[5m])) BY (instance) >  (3 * sum(rate(fluentd_output_status_emit_records{job=\"fluentd\"}[15m])) BY (instance))\n  FOR 1m\n  LABELS {\n    service = \"fluentd\",\n    severity = \"critical\"\n  }\n  ANNOTATIONS {\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/misc/prometheus_alerts.yaml"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 22,
                  "endLine": 45,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    severity = \"critical\"\n  }\n  ANNOTATIONS {\n    summary = \"fluentd node are critical\",\n    description = \"In the last 5 minutes, fluentd queues increased 50%. Current value is {{ $value }} \",\n  }\n\n",
                    "rendered": {
                      "text": "    severity = \"critical\"\n  }\n  ANNOTATIONS {\n    summary = \"fluentd node are critical\",\n    description = \"In the last 5 minutes, fluentd queues increased 50%. Current value is {{ $value }} \",\n  }\n\n",
                      "markdown": "`    severity = \"critical\"\n  }\n  ANNOTATIONS {\n    summary = \"fluentd node are critical\",\n    description = \"In the last 5 minutes, fluentd queues increased 50%. Current value is {{ $value }} \",\n  }\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/misc/prometheus_alerts.yaml"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 3,
                  "endLine": 41,
                  "endColumn": 12,
                  "snippet": {
                    "text": "  IF rate(fluentd_status_buffer_queue_length[5m]) > 0.5\n  FOR 1m\n  LABELS {\n    service = \"fluentd\",\n    severity = \"critical\"\n  }\n  ANNOTATIONS {\n",
                    "rendered": {
                      "text": "  IF rate(fluentd_status_buffer_queue_length[5m]) > 0.5\n  FOR 1m\n  LABELS {\n    service = \"fluentd\",\n    severity = \"critical\"\n  }\n  ANNOTATIONS {\n",
                      "markdown": "`  IF rate(fluentd_status_buffer_queue_length[5m]) > 0.5\n  FOR 1m\n  LABELS {\n    service = \"fluentd\",\n    severity = \"critical\"\n  }\n  ANNOTATIONS {\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/misc/prometheus_alerts.yaml"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 22,
                  "endLine": 33,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    severity = \"warning\"\n  }\n  ANNOTATIONS {\n    summary = \"fluentd node are failing\",\n    description = \"In the last 5 minutes, fluentd queues increased 30%. Current value is {{ $value }} \",\n  }\n\n",
                    "rendered": {
                      "text": "    severity = \"warning\"\n  }\n  ANNOTATIONS {\n    summary = \"fluentd node are failing\",\n    description = \"In the last 5 minutes, fluentd queues increased 30%. Current value is {{ $value }} \",\n  }\n\n",
                      "markdown": "`    severity = \"warning\"\n  }\n  ANNOTATIONS {\n    summary = \"fluentd node are failing\",\n    description = \"In the last 5 minutes, fluentd queues increased 30%. Current value is {{ $value }} \",\n  }\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/misc/prometheus_alerts.yaml"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 3,
                  "endLine": 29,
                  "endColumn": 12,
                  "snippet": {
                    "text": "  IF rate(fluentd_status_buffer_queue_length[5m]) > 0.3\n  FOR 1m\n  LABELS {\n    service = \"fluentd\",\n    severity = \"warning\"\n  }\n  ANNOTATIONS {\n",
                    "rendered": {
                      "text": "  IF rate(fluentd_status_buffer_queue_length[5m]) > 0.3\n  FOR 1m\n  LABELS {\n    service = \"fluentd\",\n    severity = \"warning\"\n  }\n  ANNOTATIONS {\n",
                      "markdown": "`  IF rate(fluentd_status_buffer_queue_length[5m]) > 0.3\n  FOR 1m\n  LABELS {\n    service = \"fluentd\",\n    severity = \"warning\"\n  }\n  ANNOTATIONS {\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/misc/prometheus_alerts.yaml"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 3,
                  "endLine": 17,
                  "endColumn": 12,
                  "snippet": {
                    "text": "  IF up{job=\"fluentd\"} == 0\n  FOR 30m\n  LABELS {\n    service = \"fluentd\",\n    severity = \"critical\"\n  }\n  ANNOTATIONS {\n",
                    "rendered": {
                      "text": "  IF up{job=\"fluentd\"} == 0\n  FOR 30m\n  LABELS {\n    service = \"fluentd\",\n    severity = \"critical\"\n  }\n  ANNOTATIONS {\n",
                      "markdown": "`  IF up{job=\"fluentd\"} == 0\n  FOR 30m\n  LABELS {\n    service = \"fluentd\",\n    severity = \"critical\"\n  }\n  ANNOTATIONS {\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/misc/prometheus_alerts.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 3,
                  "endLine": 5,
                  "endColumn": 12,
                  "snippet": {
                    "text": "  IF up{job=\"fluentd\"} == 0\n  FOR 10m\n  LABELS {\n    service = \"fluentd\",\n    severity = \"warning\"\n  }\n  ANNOTATIONS {\n",
                    "rendered": {
                      "text": "  IF up{job=\"fluentd\"} == 0\n  FOR 10m\n  LABELS {\n    service = \"fluentd\",\n    severity = \"warning\"\n  }\n  ANNOTATIONS {\n",
                      "markdown": "`  IF up{job=\"fluentd\"} == 0\n  FOR 10m\n  LABELS {\n    service = \"fluentd\",\n    severity = \"warning\"\n  }\n  ANNOTATIONS {\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 24,
                  "endLine": 26,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                    "rendered": {
                      "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                      "markdown": "`\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                    "rendered": {
                      "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                      "markdown": "`fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                    "rendered": {
                      "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                      "markdown": "`\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                    "rendered": {
                      "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                      "markdown": "`\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                    "rendered": {
                      "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                      "markdown": "`\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                    "rendered": {
                      "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                      "markdown": "`then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 2,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/pre-applypatch.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 45,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                    "rendered": {
                      "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                      "markdown": "`\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 29,
                  "endLine": 151,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                    "rendered": {
                      "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                      "markdown": "` * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                    "rendered": {
                      "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                      "markdown": "`    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 104,
                  "snippet": {
                    "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                    "rendered": {
                      "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                      "markdown": "`\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                    "rendered": {
                      "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                      "markdown": "`\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                    "rendered": {
                      "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                      "markdown": "`To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                    "rendered": {
                      "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                      "markdown": "`\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                    "rendered": {
                      "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                      "markdown": "`\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 42,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                    "rendered": {
                      "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                      "markdown": "`   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                      "markdown": "`# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 9,
                  "snippet": {
                    "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                    "rendered": {
                      "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                      "markdown": "`esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 26,
                  "snippet": {
                    "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                    "rendered": {
                      "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                      "markdown": "`\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                    "rendered": {
                      "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                      "markdown": "`\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                    "rendered": {
                      "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                      "markdown": "`unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                    "rendered": {
                      "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                      "markdown": "`\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                    "rendered": {
                      "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                      "markdown": "`\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                    "rendered": {
                      "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                      "markdown": "`if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                    "rendered": {
                      "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                      "markdown": "`validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 21,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                    "rendered": {
                      "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                      "markdown": "`# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "endLine": 15,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                    "rendered": {
                      "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                      "markdown": "`# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/in_prometheus_monitor.rb"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 17,
                  "endLine": 101,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n    def get_gauge(name, docstring)\n      if @registry.exist?(name)\n        @registry.get(name)\n      else\n        @registry.gauge(name, docstring: docstring, labels: @base_labels.keys + [:plugin_id, :plugin_category, :type])\n      end\n",
                    "rendered": {
                      "text": "\n    def get_gauge(name, docstring)\n      if @registry.exist?(name)\n        @registry.get(name)\n      else\n        @registry.gauge(name, docstring: docstring, labels: @base_labels.keys + [:plugin_id, :plugin_category, :type])\n      end\n",
                      "markdown": "`\n    def get_gauge(name, docstring)\n      if @registry.exist?(name)\n        @registry.get(name)\n      else\n        @registry.gauge(name, docstring: docstring, labels: @base_labels.keys + [:plugin_id, :plugin_category, :type])\n      end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/in_prometheus_monitor.rb"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 56,
                  "endLine": 28,
                  "endColumn": 64,
                  "snippet": {
                    "text": "      super\n      hostname = Socket.gethostname\n      expander_builder = Fluent::Plugin::Prometheus.placeholder_expander(log)\n      expander = expander_builder.build({ 'hostname' => hostname, 'worker_id' => fluentd_worker_id })\n      @base_labels = parse_labels_elements(conf)\n      @base_labels.each do |key, value|\n        unless value.is_a?(String)\n",
                    "rendered": {
                      "text": "      super\n      hostname = Socket.gethostname\n      expander_builder = Fluent::Plugin::Prometheus.placeholder_expander(log)\n      expander = expander_builder.build({ 'hostname' => hostname, 'worker_id' => fluentd_worker_id })\n      @base_labels = parse_labels_elements(conf)\n      @base_labels.each do |key, value|\n        unless value.is_a?(String)\n",
                      "markdown": "`      super\n      hostname = Socket.gethostname\n      expander_builder = Fluent::Plugin::Prometheus.placeholder_expander(log)\n      expander = expander_builder.build({ 'hostname' => hostname, 'worker_id' => fluentd_worker_id })\n      @base_labels = parse_labels_elements(conf)\n      @base_labels.each do |key, value|\n        unless value.is_a?(String)\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/in_prometheus_monitor.rb"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 43,
                  "endLine": 28,
                  "endColumn": 51,
                  "snippet": {
                    "text": "      super\n      hostname = Socket.gethostname\n      expander_builder = Fluent::Plugin::Prometheus.placeholder_expander(log)\n      expander = expander_builder.build({ 'hostname' => hostname, 'worker_id' => fluentd_worker_id })\n      @base_labels = parse_labels_elements(conf)\n      @base_labels.each do |key, value|\n        unless value.is_a?(String)\n",
                    "rendered": {
                      "text": "      super\n      hostname = Socket.gethostname\n      expander_builder = Fluent::Plugin::Prometheus.placeholder_expander(log)\n      expander = expander_builder.build({ 'hostname' => hostname, 'worker_id' => fluentd_worker_id })\n      @base_labels = parse_labels_elements(conf)\n      @base_labels.each do |key, value|\n        unless value.is_a?(String)\n",
                      "markdown": "`      super\n      hostname = Socket.gethostname\n      expander_builder = Fluent::Plugin::Prometheus.placeholder_expander(log)\n      expander = expander_builder.build({ 'hostname' => hostname, 'worker_id' => fluentd_worker_id })\n      @base_labels = parse_labels_elements(conf)\n      @base_labels.each do |key, value|\n        unless value.is_a?(String)\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/in_prometheus_monitor.rb"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 6,
                  "endLine": 26,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n    def configure(conf)\n      super\n      hostname = Socket.gethostname\n      expander_builder = Fluent::Plugin::Prometheus.placeholder_expander(log)\n      expander = expander_builder.build({ 'hostname' => hostname, 'worker_id' => fluentd_worker_id })\n      @base_labels = parse_labels_elements(conf)\n",
                    "rendered": {
                      "text": "\n    def configure(conf)\n      super\n      hostname = Socket.gethostname\n      expander_builder = Fluent::Plugin::Prometheus.placeholder_expander(log)\n      expander = expander_builder.build({ 'hostname' => hostname, 'worker_id' => fluentd_worker_id })\n      @base_labels = parse_labels_elements(conf)\n",
                      "markdown": "`\n    def configure(conf)\n      super\n      hostname = Socket.gethostname\n      expander_builder = Fluent::Plugin::Prometheus.placeholder_expander(log)\n      expander = expander_builder.build({ 'hostname' => hostname, 'worker_id' => fluentd_worker_id })\n      @base_labels = parse_labels_elements(conf)\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/in_prometheus_tail_monitor.rb"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 17,
                  "endLine": 111,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n    def get_gauge(name, docstring)\n      if @registry.exist?(name)\n        @registry.get(name)\n      else\n        @registry.gauge(name, docstring: docstring, labels: @base_labels.keys + [:plugin_id, :type, :path])\n      end\n",
                    "rendered": {
                      "text": "\n    def get_gauge(name, docstring)\n      if @registry.exist?(name)\n        @registry.get(name)\n      else\n        @registry.gauge(name, docstring: docstring, labels: @base_labels.keys + [:plugin_id, :type, :path])\n      end\n",
                      "markdown": "`\n    def get_gauge(name, docstring)\n      if @registry.exist?(name)\n        @registry.get(name)\n      else\n        @registry.gauge(name, docstring: docstring, labels: @base_labels.keys + [:plugin_id, :type, :path])\n      end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/in_prometheus_tail_monitor.rb"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 56,
                  "endLine": 32,
                  "endColumn": 64,
                  "snippet": {
                    "text": "      super\n      hostname = Socket.gethostname\n      expander_builder = Fluent::Plugin::Prometheus.placeholder_expander(log)\n      expander = expander_builder.build({ 'hostname' => hostname, 'worker_id' => fluentd_worker_id })\n      @base_labels = parse_labels_elements(conf)\n      @base_labels.each do |key, value|\n        unless value.is_a?(String)\n",
                    "rendered": {
                      "text": "      super\n      hostname = Socket.gethostname\n      expander_builder = Fluent::Plugin::Prometheus.placeholder_expander(log)\n      expander = expander_builder.build({ 'hostname' => hostname, 'worker_id' => fluentd_worker_id })\n      @base_labels = parse_labels_elements(conf)\n      @base_labels.each do |key, value|\n        unless value.is_a?(String)\n",
                      "markdown": "`      super\n      hostname = Socket.gethostname\n      expander_builder = Fluent::Plugin::Prometheus.placeholder_expander(log)\n      expander = expander_builder.build({ 'hostname' => hostname, 'worker_id' => fluentd_worker_id })\n      @base_labels = parse_labels_elements(conf)\n      @base_labels.each do |key, value|\n        unless value.is_a?(String)\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/in_prometheus_tail_monitor.rb"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 43,
                  "endLine": 32,
                  "endColumn": 51,
                  "snippet": {
                    "text": "      super\n      hostname = Socket.gethostname\n      expander_builder = Fluent::Plugin::Prometheus.placeholder_expander(log)\n      expander = expander_builder.build({ 'hostname' => hostname, 'worker_id' => fluentd_worker_id })\n      @base_labels = parse_labels_elements(conf)\n      @base_labels.each do |key, value|\n        unless value.is_a?(String)\n",
                    "rendered": {
                      "text": "      super\n      hostname = Socket.gethostname\n      expander_builder = Fluent::Plugin::Prometheus.placeholder_expander(log)\n      expander = expander_builder.build({ 'hostname' => hostname, 'worker_id' => fluentd_worker_id })\n      @base_labels = parse_labels_elements(conf)\n      @base_labels.each do |key, value|\n        unless value.is_a?(String)\n",
                      "markdown": "`      super\n      hostname = Socket.gethostname\n      expander_builder = Fluent::Plugin::Prometheus.placeholder_expander(log)\n      expander = expander_builder.build({ 'hostname' => hostname, 'worker_id' => fluentd_worker_id })\n      @base_labels = parse_labels_elements(conf)\n      @base_labels.each do |key, value|\n        unless value.is_a?(String)\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/in_prometheus_tail_monitor.rb"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 6,
                  "endLine": 30,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n    def configure(conf)\n      super\n      hostname = Socket.gethostname\n      expander_builder = Fluent::Plugin::Prometheus.placeholder_expander(log)\n      expander = expander_builder.build({ 'hostname' => hostname, 'worker_id' => fluentd_worker_id })\n      @base_labels = parse_labels_elements(conf)\n",
                    "rendered": {
                      "text": "\n    def configure(conf)\n      super\n      hostname = Socket.gethostname\n      expander_builder = Fluent::Plugin::Prometheus.placeholder_expander(log)\n      expander = expander_builder.build({ 'hostname' => hostname, 'worker_id' => fluentd_worker_id })\n      @base_labels = parse_labels_elements(conf)\n",
                      "markdown": "`\n    def configure(conf)\n      super\n      hostname = Socket.gethostname\n      expander_builder = Fluent::Plugin::Prometheus.placeholder_expander(log)\n      expander = expander_builder.build({ 'hostname' => hostname, 'worker_id' => fluentd_worker_id })\n      @base_labels = parse_labels_elements(conf)\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/misc/fluentd_sample.conf"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 12,
                  "endLine": 122,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n  # common labels for all metrics\n  <labels>\n     host ${hostname}\n     method ${request_method}\n     status ${status}\n  </labels>\n",
                    "rendered": {
                      "text": "\n  # common labels for all metrics\n  <labels>\n     host ${hostname}\n     method ${request_method}\n     status ${status}\n  </labels>\n",
                      "markdown": "`\n  # common labels for all metrics\n  <labels>\n     host ${hostname}\n     method ${request_method}\n     status ${status}\n  </labels>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/misc/fluentd_sample.conf"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 14,
                  "endLine": 74,
                  "endColumn": 22,
                  "snippet": {
                    "text": "    type counter\n    desc the number of emited records\n    <labels>\n       host ${hostname}\n    </labels>\n  </metric>\n</filter>\n",
                    "rendered": {
                      "text": "    type counter\n    desc the number of emited records\n    <labels>\n       host ${hostname}\n    </labels>\n  </metric>\n</filter>\n",
                      "markdown": "`    type counter\n    desc the number of emited records\n    <labels>\n       host ${hostname}\n    </labels>\n  </metric>\n</filter>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/misc/fluentd_sample.conf"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 14,
                  "endLine": 62,
                  "endColumn": 22,
                  "snippet": {
                    "text": "    desc nginx bytes sent\n    key size\n    <labels>\n       host ${hostname}\n       foo bar\n    </labels>\n  </metric>\n",
                    "rendered": {
                      "text": "    desc nginx bytes sent\n    key size\n    <labels>\n       host ${hostname}\n       foo bar\n    </labels>\n  </metric>\n",
                      "markdown": "`    desc nginx bytes sent\n    key size\n    <labels>\n       host ${hostname}\n       foo bar\n    </labels>\n  </metric>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/misc/fluentd_sample.conf"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 11,
                  "endLine": 36,
                  "endColumn": 19,
                  "snippet": {
                    "text": "<source>\n  @type prometheus_tail_monitor\n  <labels>\n    host ${hostname}\n  </labels>\n</source>\n\n",
                    "rendered": {
                      "text": "<source>\n  @type prometheus_tail_monitor\n  <labels>\n    host ${hostname}\n  </labels>\n</source>\n\n",
                      "markdown": "`<source>\n  @type prometheus_tail_monitor\n  <labels>\n    host ${hostname}\n  </labels>\n</source>\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/misc/fluentd_sample.conf"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 11,
                  "endLine": 28,
                  "endColumn": 19,
                  "snippet": {
                    "text": "<source>\n  @type prometheus_output_monitor\n  <labels>\n    host ${hostname}\n  </labels>\n</source>\n\n",
                    "rendered": {
                      "text": "<source>\n  @type prometheus_output_monitor\n  <labels>\n    host ${hostname}\n  </labels>\n</source>\n\n",
                      "markdown": "`<source>\n  @type prometheus_output_monitor\n  <labels>\n    host ${hostname}\n  </labels>\n</source>\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/misc/fluentd_sample.conf"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 11,
                  "endLine": 20,
                  "endColumn": 19,
                  "snippet": {
                    "text": "<source>\n  @type prometheus_monitor\n  <labels>\n    host ${hostname}\n  </labels>\n</source>\n\n",
                    "rendered": {
                      "text": "<source>\n  @type prometheus_monitor\n  <labels>\n    host ${hostname}\n  </labels>\n</source>\n\n",
                      "markdown": "`<source>\n  @type prometheus_monitor\n  <labels>\n    host ${hostname}\n  </labels>\n</source>\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/misc/fluentd_sample.conf"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 38,
                  "endLine": 149,
                  "snippet": {
                    "text": "  <metric>\n    name nginx_proxy_upstream_response_duration_total_milliseconds\n    type counter\n    desc nginx proxy upstream response time\n    key upstream_response_time\n  </metric>\n  <metric>\n    name nginx_proxy_request_duration_milliseconds\n",
                    "rendered": {
                      "text": "  <metric>\n    name nginx_proxy_upstream_response_duration_total_milliseconds\n    type counter\n    desc nginx proxy upstream response time\n    key upstream_response_time\n  </metric>\n  <metric>\n    name nginx_proxy_request_duration_milliseconds\n",
                      "markdown": "`  <metric>\n    name nginx_proxy_upstream_response_duration_total_milliseconds\n    type counter\n    desc nginx proxy upstream response time\n    key upstream_response_time\n  </metric>\n  <metric>\n    name nginx_proxy_request_duration_milliseconds\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/misc/fluentd_sample.conf"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 28,
                  "endLine": 143,
                  "snippet": {
                    "text": "  <metric>\n    name nginx_proxy_request_duration_total_milliseconds\n    type counter\n    desc nginx proxy request time\n    key request_time\n  </metric>\n  <metric>\n    name nginx_proxy_upstream_response_duration_total_milliseconds\n",
                    "rendered": {
                      "text": "  <metric>\n    name nginx_proxy_request_duration_total_milliseconds\n    type counter\n    desc nginx proxy request time\n    key request_time\n  </metric>\n  <metric>\n    name nginx_proxy_upstream_response_duration_total_milliseconds\n",
                      "markdown": "`  <metric>\n    name nginx_proxy_request_duration_total_milliseconds\n    type counter\n    desc nginx proxy request time\n    key request_time\n  </metric>\n  <metric>\n    name nginx_proxy_upstream_response_duration_total_milliseconds\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/misc/fluentd_sample.conf"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 7,
                  "endLine": 110,
                  "snippet": {
                    "text": "## Nginx Proxy Log Configuration\n\n<source>\n  @type tail\n  format ltsv\n  tag nginx_proxy\n  path /var/log/nginx/access_proxy.log\n  pos_file /tmp/fluent_nginx_proxy.pos\n",
                    "rendered": {
                      "text": "## Nginx Proxy Log Configuration\n\n<source>\n  @type tail\n  format ltsv\n  tag nginx_proxy\n  path /var/log/nginx/access_proxy.log\n  pos_file /tmp/fluent_nginx_proxy.pos\n",
                      "markdown": "`## Nginx Proxy Log Configuration\n\n<source>\n  @type tail\n  format ltsv\n  tag nginx_proxy\n  path /var/log/nginx/access_proxy.log\n  pos_file /tmp/fluent_nginx_proxy.pos\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/misc/fluentd_sample.conf"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 7,
                  "endLine": 44,
                  "snippet": {
                    "text": "## Nginx Access Log Configuration\n\n<source>\n  @type tail\n  format nginx\n  tag nginx\n  path /var/log/nginx/access.log\n  pos_file /tmp/fluent_nginx.pos\n",
                    "rendered": {
                      "text": "## Nginx Access Log Configuration\n\n<source>\n  @type tail\n  format nginx\n  tag nginx\n  path /var/log/nginx/access.log\n  pos_file /tmp/fluent_nginx.pos\n",
                      "markdown": "`## Nginx Access Log Configuration\n\n<source>\n  @type tail\n  format nginx\n  tag nginx\n  path /var/log/nginx/access.log\n  pos_file /tmp/fluent_nginx.pos\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/prometheus/placeholder_expander_spec.rb"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 27,
                  "endLine": 106,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        expect(Fluent::Plugin::Prometheus::ExpandBuilder).to receive(:build).with(anything, log: anything).twice.and_call_original\n        expander = builder.build(static_placeholder)\n        expander.expand('${hostname}', dynamic_placeholders: { 'tag' => 'val.test' })\n        expander.expand('${hostname}', dynamic_placeholders: { 'tag' => 'val.test2' })\n      end\n    end\n  end\n",
                    "rendered": {
                      "text": "        expect(Fluent::Plugin::Prometheus::ExpandBuilder).to receive(:build).with(anything, log: anything).twice.and_call_original\n        expander = builder.build(static_placeholder)\n        expander.expand('${hostname}', dynamic_placeholders: { 'tag' => 'val.test' })\n        expander.expand('${hostname}', dynamic_placeholders: { 'tag' => 'val.test2' })\n      end\n    end\n  end\n",
                      "markdown": "`        expect(Fluent::Plugin::Prometheus::ExpandBuilder).to receive(:build).with(anything, log: anything).twice.and_call_original\n        expander = builder.build(static_placeholder)\n        expander.expand('${hostname}', dynamic_placeholders: { 'tag' => 'val.test' })\n        expander.expand('${hostname}', dynamic_placeholders: { 'tag' => 'val.test2' })\n      end\n    end\n  end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/prometheus/placeholder_expander_spec.rb"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 27,
                  "endLine": 105,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n        expect(Fluent::Plugin::Prometheus::ExpandBuilder).to receive(:build).with(anything, log: anything).twice.and_call_original\n        expander = builder.build(static_placeholder)\n        expander.expand('${hostname}', dynamic_placeholders: { 'tag' => 'val.test' })\n        expander.expand('${hostname}', dynamic_placeholders: { 'tag' => 'val.test2' })\n      end\n    end\n",
                    "rendered": {
                      "text": "\n        expect(Fluent::Plugin::Prometheus::ExpandBuilder).to receive(:build).with(anything, log: anything).twice.and_call_original\n        expander = builder.build(static_placeholder)\n        expander.expand('${hostname}', dynamic_placeholders: { 'tag' => 'val.test' })\n        expander.expand('${hostname}', dynamic_placeholders: { 'tag' => 'val.test2' })\n      end\n    end\n",
                      "markdown": "`\n        expect(Fluent::Plugin::Prometheus::ExpandBuilder).to receive(:build).with(anything, log: anything).twice.and_call_original\n        expander = builder.build(static_placeholder)\n        expander.expand('${hostname}', dynamic_placeholders: { 'tag' => 'val.test' })\n        expander.expand('${hostname}', dynamic_placeholders: { 'tag' => 'val.test2' })\n      end\n    end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/prometheus/placeholder_expander_spec.rb"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 27,
                  "endLine": 97,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        expander = builder.build(static_placeholder)\n        placeholder = { 'tag' => 'val.test' }\n        expander.expand('${hostname}', dynamic_placeholders: placeholder)\n        expander.expand('${hostname}', dynamic_placeholders: placeholder)\n      end\n\n      it 'creates new expander for each placeholder' do\n",
                    "rendered": {
                      "text": "        expander = builder.build(static_placeholder)\n        placeholder = { 'tag' => 'val.test' }\n        expander.expand('${hostname}', dynamic_placeholders: placeholder)\n        expander.expand('${hostname}', dynamic_placeholders: placeholder)\n      end\n\n      it 'creates new expander for each placeholder' do\n",
                      "markdown": "`        expander = builder.build(static_placeholder)\n        placeholder = { 'tag' => 'val.test' }\n        expander.expand('${hostname}', dynamic_placeholders: placeholder)\n        expander.expand('${hostname}', dynamic_placeholders: placeholder)\n      end\n\n      it 'creates new expander for each placeholder' do\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/prometheus/placeholder_expander_spec.rb"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 27,
                  "endLine": 96,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        expect(Fluent::Plugin::Prometheus::ExpandBuilder).to receive(:build).with(anything, log: anything).once.and_call_original\n        expander = builder.build(static_placeholder)\n        placeholder = { 'tag' => 'val.test' }\n        expander.expand('${hostname}', dynamic_placeholders: placeholder)\n        expander.expand('${hostname}', dynamic_placeholders: placeholder)\n      end\n\n",
                    "rendered": {
                      "text": "        expect(Fluent::Plugin::Prometheus::ExpandBuilder).to receive(:build).with(anything, log: anything).once.and_call_original\n        expander = builder.build(static_placeholder)\n        placeholder = { 'tag' => 'val.test' }\n        expander.expand('${hostname}', dynamic_placeholders: placeholder)\n        expander.expand('${hostname}', dynamic_placeholders: placeholder)\n      end\n\n",
                      "markdown": "`        expect(Fluent::Plugin::Prometheus::ExpandBuilder).to receive(:build).with(anything, log: anything).once.and_call_original\n        expander = builder.build(static_placeholder)\n        placeholder = { 'tag' => 'val.test' }\n        expander.expand('${hostname}', dynamic_placeholders: placeholder)\n        expander.expand('${hostname}', dynamic_placeholders: placeholder)\n      end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/prometheus/placeholder_expander_spec.rb"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 34,
                  "endLine": 78,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\n      it 'expands values' do\n        expander = builder.build(static_placeholder)\n        expect(expander.expand('${hostname}', dynamic_placeholders: dynamic_placeholder)).to eq('host_value')\n        expect(expander.expand('${ary_value[0]}.${ary_value[1]}.${ary_value[2]}', dynamic_placeholders: dynamic_placeholder)).to eq('1.2.3')\n        expect(expander.expand('${ary_value[-3]}.${ary_value[-2]}.${ary_value[-1]}', dynamic_placeholders: dynamic_placeholder)).to eq('1.2.3')\n        expect(expander.expand('${hash_value[\"key1\"]}', dynamic_placeholders: dynamic_placeholder)).to eq('val1')\n",
                    "rendered": {
                      "text": "\n      it 'expands values' do\n        expander = builder.build(static_placeholder)\n        expect(expander.expand('${hostname}', dynamic_placeholders: dynamic_placeholder)).to eq('host_value')\n        expect(expander.expand('${ary_value[0]}.${ary_value[1]}.${ary_value[2]}', dynamic_placeholders: dynamic_placeholder)).to eq('1.2.3')\n        expect(expander.expand('${ary_value[-3]}.${ary_value[-2]}.${ary_value[-1]}', dynamic_placeholders: dynamic_placeholder)).to eq('1.2.3')\n        expect(expander.expand('${hash_value[\"key1\"]}', dynamic_placeholders: dynamic_placeholder)).to eq('val1')\n",
                      "markdown": "`\n      it 'expands values' do\n        expander = builder.build(static_placeholder)\n        expect(expander.expand('${hostname}', dynamic_placeholders: dynamic_placeholder)).to eq('host_value')\n        expect(expander.expand('${ary_value[0]}.${ary_value[1]}.${ary_value[2]}', dynamic_placeholders: dynamic_placeholder)).to eq('1.2.3')\n        expect(expander.expand('${ary_value[-3]}.${ary_value[-2]}.${ary_value[-1]}', dynamic_placeholders: dynamic_placeholder)).to eq('1.2.3')\n        expect(expander.expand('${hash_value[\"key1\"]}', dynamic_placeholders: dynamic_placeholder)).to eq('val1')\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/prometheus/placeholder_expander_spec.rb"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 11,
                  "endLine": 66,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    context 'with dynamic placeholder' do\n      let(:static_placeholder) do\n        {\n          'hostname' => 'host_value',\n          'ary_value' => ['1', '2', '3'],\n          'hash_value' => { 'key1' => 'val1' },\n        }\n",
                    "rendered": {
                      "text": "    context 'with dynamic placeholder' do\n      let(:static_placeholder) do\n        {\n          'hostname' => 'host_value',\n          'ary_value' => ['1', '2', '3'],\n          'hash_value' => { 'key1' => 'val1' },\n        }\n",
                      "markdown": "`    context 'with dynamic placeholder' do\n      let(:static_placeholder) do\n        {\n          'hostname' => 'host_value',\n          'ary_value' => ['1', '2', '3'],\n          'hash_value' => { 'key1' => 'val1' },\n        }\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/prometheus/placeholder_expander_spec.rb"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 27,
                  "endLine": 50,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        expect(Fluent::Plugin::Prometheus::ExpandBuilder).to receive(:build).with(anything, log: anything).never\n        expander = builder.build(static_placeholder)\n        expander.expand('${hostname}')\n        expander.expand('${hostname}')\n      end\n\n      context 'when not found placeholder' do\n",
                    "rendered": {
                      "text": "        expect(Fluent::Plugin::Prometheus::ExpandBuilder).to receive(:build).with(anything, log: anything).never\n        expander = builder.build(static_placeholder)\n        expander.expand('${hostname}')\n        expander.expand('${hostname}')\n      end\n\n      context 'when not found placeholder' do\n",
                      "markdown": "`        expect(Fluent::Plugin::Prometheus::ExpandBuilder).to receive(:build).with(anything, log: anything).never\n        expander = builder.build(static_placeholder)\n        expander.expand('${hostname}')\n        expander.expand('${hostname}')\n      end\n\n      context 'when not found placeholder' do\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/prometheus/placeholder_expander_spec.rb"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 27,
                  "endLine": 49,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n        expect(Fluent::Plugin::Prometheus::ExpandBuilder).to receive(:build).with(anything, log: anything).never\n        expander = builder.build(static_placeholder)\n        expander.expand('${hostname}')\n        expander.expand('${hostname}')\n      end\n\n",
                    "rendered": {
                      "text": "\n        expect(Fluent::Plugin::Prometheus::ExpandBuilder).to receive(:build).with(anything, log: anything).never\n        expander = builder.build(static_placeholder)\n        expander.expand('${hostname}')\n        expander.expand('${hostname}')\n      end\n\n",
                      "markdown": "`\n        expect(Fluent::Plugin::Prometheus::ExpandBuilder).to receive(:build).with(anything, log: anything).never\n        expander = builder.build(static_placeholder)\n        expander.expand('${hostname}')\n        expander.expand('${hostname}')\n      end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/prometheus/placeholder_expander_spec.rb"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 34,
                  "endLine": 32,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\n      it 'expands values' do\n        expander = builder.build(static_placeholder)\n        expect(expander.expand('${hostname}')).to eq('host_value')\n        expect(expander.expand('${ary_value[0]}.${ary_value[1]}.${ary_value[2]}')).to eq('1.2.3')\n        expect(expander.expand('${ary_value[-3]}.${ary_value[-2]}.${ary_value[-1]}')).to eq('1.2.3')\n        expect(expander.expand('${hash_value[\"key1\"]}')).to eq('val1')\n",
                    "rendered": {
                      "text": "\n      it 'expands values' do\n        expander = builder.build(static_placeholder)\n        expect(expander.expand('${hostname}')).to eq('host_value')\n        expect(expander.expand('${ary_value[0]}.${ary_value[1]}.${ary_value[2]}')).to eq('1.2.3')\n        expect(expander.expand('${ary_value[-3]}.${ary_value[-2]}.${ary_value[-1]}')).to eq('1.2.3')\n        expect(expander.expand('${hash_value[\"key1\"]}')).to eq('val1')\n",
                      "markdown": "`\n      it 'expands values' do\n        expander = builder.build(static_placeholder)\n        expect(expander.expand('${hostname}')).to eq('host_value')\n        expect(expander.expand('${ary_value[0]}.${ary_value[1]}.${ary_value[2]}')).to eq('1.2.3')\n        expect(expander.expand('${ary_value[-3]}.${ary_value[-2]}.${ary_value[-1]}')).to eq('1.2.3')\n        expect(expander.expand('${hash_value[\"key1\"]}')).to eq('val1')\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/prometheus/placeholder_expander_spec.rb"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 11,
                  "endLine": 20,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    context 'with static placeholder' do\n      let(:static_placeholder) do\n        {\n          'hostname' => 'host_value',\n          'tag' => '1.2.3',\n          'ary_value' => ['1', '2', '3'],\n          'hash_value' => { 'key1' => 'val1' },\n",
                    "rendered": {
                      "text": "    context 'with static placeholder' do\n      let(:static_placeholder) do\n        {\n          'hostname' => 'host_value',\n          'tag' => '1.2.3',\n          'ary_value' => ['1', '2', '3'],\n          'hash_value' => { 'key1' => 'val1' },\n",
                      "markdown": "`    context 'with static placeholder' do\n      let(:static_placeholder) do\n        {\n          'hostname' => 'host_value',\n          'tag' => '1.2.3',\n          'ary_value' => ['1', '2', '3'],\n          'hash_value' => { 'key1' => 'val1' },\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/in_prometheus_monitor_spec.rb"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 11,
                  "endLine": 18,
                  "endColumn": 19,
                  "snippet": {
                    "text": "  @type prometheus_monitor\n\n  <labels>\n    host ${hostname}\n    foo bar\n    invalid_use1 $.foo.bar\n    invalid_use2 $[0][1]\n",
                    "rendered": {
                      "text": "  @type prometheus_monitor\n\n  <labels>\n    host ${hostname}\n    foo bar\n    invalid_use1 $.foo.bar\n    invalid_use2 $[0][1]\n",
                      "markdown": "`  @type prometheus_monitor\n\n  <labels>\n    host ${hostname}\n    foo bar\n    invalid_use1 $.foo.bar\n    invalid_use2 $[0][1]\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/in_prometheus_monitor_spec.rb"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 11,
                  "endLine": 9,
                  "endColumn": 19,
                  "snippet": {
                    "text": "  MONITOR_CONFIG = %[\n  @type prometheus_monitor\n  <labels>\n    host ${hostname}\n    foo bar\n  </labels>\n]\n",
                    "rendered": {
                      "text": "  MONITOR_CONFIG = %[\n  @type prometheus_monitor\n  <labels>\n    host ${hostname}\n    foo bar\n  </labels>\n]\n",
                      "markdown": "`  MONITOR_CONFIG = %[\n  @type prometheus_monitor\n  <labels>\n    host ${hostname}\n    foo bar\n  </labels>\n]\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/in_prometheus_tail_monitor_spec.rb"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 11,
                  "endLine": 18,
                  "endColumn": 19,
                  "snippet": {
                    "text": "  @type prometheus_tail_monitor\n\n  <labels>\n    host ${hostname}\n    foo bar\n    invalid_use1 $.foo.bar\n    invalid_use2 $[0][1]\n",
                    "rendered": {
                      "text": "  @type prometheus_tail_monitor\n\n  <labels>\n    host ${hostname}\n    foo bar\n    invalid_use1 $.foo.bar\n    invalid_use2 $[0][1]\n",
                      "markdown": "`  @type prometheus_tail_monitor\n\n  <labels>\n    host ${hostname}\n    foo bar\n    invalid_use1 $.foo.bar\n    invalid_use2 $[0][1]\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/in_prometheus_tail_monitor_spec.rb"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 11,
                  "endLine": 9,
                  "endColumn": 19,
                  "snippet": {
                    "text": "  MONITOR_CONFIG = %[\n  @type prometheus_tail_monitor\n  <labels>\n    host ${hostname}\n    foo bar\n  </labels>\n]\n",
                    "rendered": {
                      "text": "  MONITOR_CONFIG = %[\n  @type prometheus_tail_monitor\n  <labels>\n    host ${hostname}\n    foo bar\n  </labels>\n]\n",
                      "markdown": "`  MONITOR_CONFIG = %[\n  @type prometheus_tail_monitor\n  <labels>\n    host ${hostname}\n    foo bar\n  </labels>\n]\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/in_prometheus_tail_monitor_spec.rb"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 7,
                  "endLine": 38,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    describe 'invalid' do\n      let(:config) { INVALID_MONITOR_CONFIG }\n      it 'expect raise error' do\n        expect { driver }.to raise_error\n      end\n    end\n  end\n",
                    "rendered": {
                      "text": "    describe 'invalid' do\n      let(:config) { INVALID_MONITOR_CONFIG }\n      it 'expect raise error' do\n        expect { driver }.to raise_error\n      end\n    end\n  end\n",
                      "markdown": "`    describe 'invalid' do\n      let(:config) { INVALID_MONITOR_CONFIG }\n      it 'expect raise error' do\n        expect { driver }.to raise_error\n      end\n    end\n  end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/in_prometheus_tail_monitor_spec.rb"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 7,
                  "endLine": 31,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  describe '#configure' do\n    describe 'valid' do\n      it 'does not raise error' do\n        expect { driver }.not_to raise_error\n      end\n    end\n\n",
                    "rendered": {
                      "text": "  describe '#configure' do\n    describe 'valid' do\n      it 'does not raise error' do\n        expect { driver }.not_to raise_error\n      end\n    end\n\n",
                      "markdown": "`  describe '#configure' do\n    describe 'valid' do\n      it 'does not raise error' do\n        expect { driver }.not_to raise_error\n      end\n    end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/README.md"
                },
                "region": {
                  "startLine": 489,
                  "startColumn": 48,
                  "endLine": 489,
                  "endColumn": 56,
                  "snippet": {
                    "text": "</filter>\n```\n\nIn this case, `message_foo_counter` has `tag`, `hostname`, `key` and `data_type` labels.\n\n\n## Try plugin with nginx\n",
                    "rendered": {
                      "text": "</filter>\n```\n\nIn this case, `message_foo_counter` has `tag`, `hostname`, `key` and `data_type` labels.\n\n\n## Try plugin with nginx\n",
                      "markdown": "`</filter>\n```\n\nIn this case, `message_foo_counter` has `tag`, `hostname`, `key` and `data_type` labels.\n\n\n## Try plugin with nginx\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/README.md"
                },
                "region": {
                  "startLine": 484,
                  "startColumn": 15,
                  "endLine": 484,
                  "endColumn": 23,
                  "snippet": {
                    "text": "  </metric>\n  <labels>\n    tag ${tag}\n    hostname ${hostname}\n  </labels>\n</filter>\n```\n",
                    "rendered": {
                      "text": "  </metric>\n  <labels>\n    tag ${tag}\n    hostname ${hostname}\n  </labels>\n</filter>\n```\n",
                      "markdown": "`  </metric>\n  <labels>\n    tag ${tag}\n    hostname ${hostname}\n  </labels>\n</filter>\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/README.md"
                },
                "region": {
                  "startLine": 484,
                  "startColumn": 4,
                  "endLine": 484,
                  "endColumn": 12,
                  "snippet": {
                    "text": "  </metric>\n  <labels>\n    tag ${tag}\n    hostname ${hostname}\n  </labels>\n</filter>\n```\n",
                    "rendered": {
                      "text": "  </metric>\n  <labels>\n    tag ${tag}\n    hostname ${hostname}\n  </labels>\n</filter>\n```\n",
                      "markdown": "`  </metric>\n  <labels>\n    tag ${tag}\n    hostname ${hostname}\n  </labels>\n</filter>\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/README.md"
                },
                "region": {
                  "startLine": 452,
                  "startColumn": 13,
                  "endLine": 452,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  </initlabels>\n</metric>\n<labels>\n  hostname ${hostname}\n</labels>\n```\n\n",
                    "rendered": {
                      "text": "  </initlabels>\n</metric>\n<labels>\n  hostname ${hostname}\n</labels>\n```\n\n",
                      "markdown": "`  </initlabels>\n</metric>\n<labels>\n  hostname ${hostname}\n</labels>\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/README.md"
                },
                "region": {
                  "startLine": 452,
                  "startColumn": 2,
                  "endLine": 452,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  </initlabels>\n</metric>\n<labels>\n  hostname ${hostname}\n</labels>\n```\n\n",
                    "rendered": {
                      "text": "  </initlabels>\n</metric>\n<labels>\n  hostname ${hostname}\n</labels>\n```\n\n",
                      "markdown": "`  </initlabels>\n</metric>\n<labels>\n  hostname ${hostname}\n</labels>\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/README.md"
                },
                "region": {
                  "startLine": 427,
                  "startColumn": 35,
                  "endLine": 427,
                  "endColumn": 43,
                  "snippet": {
                    "text": "```\n\nIf your labels contains ReccordAccessors or Placeholders, you must use `<initlabels>` to specify the values your ReccordAccessors/Placeholders will take. This feature is useful only if your Placeholders/ReccordAccessors contain deterministic values. Initialization will create as many zero value metrics as `<initlabels>` blocks you defined.\nPotential reserved placeholders `${hostname}` and `${worker_id}`, as well as static labels, are automatically added and should not be specified in `<initlabels>` configuration.\n\n```\n<metric>\n",
                    "rendered": {
                      "text": "```\n\nIf your labels contains ReccordAccessors or Placeholders, you must use `<initlabels>` to specify the values your ReccordAccessors/Placeholders will take. This feature is useful only if your Placeholders/ReccordAccessors contain deterministic values. Initialization will create as many zero value metrics as `<initlabels>` blocks you defined.\nPotential reserved placeholders `${hostname}` and `${worker_id}`, as well as static labels, are automatically added and should not be specified in `<initlabels>` configuration.\n\n```\n<metric>\n",
                      "markdown": "````\n\nIf your labels contains ReccordAccessors or Placeholders, you must use `<initlabels>` to specify the values your ReccordAccessors/Placeholders will take. This feature is useful only if your Placeholders/ReccordAccessors contain deterministic values. Initialization will create as many zero value metrics as `<initlabels>` blocks you defined.\nPotential reserved placeholders `${hostname}` and `${worker_id}`, as well as static labels, are automatically added and should not be specified in `<initlabels>` configuration.\n\n```\n<metric>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/README.md"
                },
                "region": {
                  "startLine": 397,
                  "startColumn": 17,
                  "endLine": 397,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\nReserved placeholders are:\n\n- `${hostname}`: hostname\n- `${worker_id}`: fluent worker id\n- `${tag}`: tag name\n  - only available in Prometheus output/filter plugin\n",
                    "rendered": {
                      "text": "\nReserved placeholders are:\n\n- `${hostname}`: hostname\n- `${worker_id}`: fluent worker id\n- `${tag}`: tag name\n  - only available in Prometheus output/filter plugin\n",
                      "markdown": "`\nReserved placeholders are:\n\n- `${hostname}`: hostname\n- `${worker_id}`: fluent worker id\n- `${tag}`: tag name\n  - only available in Prometheus output/filter plugin\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/README.md"
                },
                "region": {
                  "startLine": 397,
                  "startColumn": 5,
                  "endLine": 397,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\nReserved placeholders are:\n\n- `${hostname}`: hostname\n- `${worker_id}`: fluent worker id\n- `${tag}`: tag name\n  - only available in Prometheus output/filter plugin\n",
                    "rendered": {
                      "text": "\nReserved placeholders are:\n\n- `${hostname}`: hostname\n- `${worker_id}`: fluent worker id\n- `${tag}`: tag name\n  - only available in Prometheus output/filter plugin\n",
                      "markdown": "`\nReserved placeholders are:\n\n- `${hostname}`: hostname\n- `${worker_id}`: fluent worker id\n- `${tag}`: tag name\n  - only available in Prometheus output/filter plugin\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/README.md"
                },
                "region": {
                  "startLine": 392,
                  "startColumn": 64,
                  "endLine": 392,
                  "endColumn": 72,
                  "snippet": {
                    "text": "e starts with `$.` or `$[`. Other values are handled as raw string as is and may be expanded by placeholder described later.\n\nYou can use placeholder for label values. The placeholders will be expanded from reserved values and records.\nIf you specify `${hostname}`, it will be expanded by value of a hostname where fluentd runs.\nThe placeholder for records is deprecated. Use record accessor syntax instead.\n\nReserved placeholders are:\n\n- `${hostname}`: hostname\n- `${worker_id}`: fluent worker id\n- `${tag}`: tag name\n  - only available in Prometheus output/filter plugin\n- `${tag_parts[N]}` refers to the N",
                    "rendered": {
                      "text": "e starts with `$.` or `$[`. Other values are handled as raw string as is and may be expanded by placeholder described later.\n\nYou can use placeholder for label values. The placeholders will be expanded from reserved values and records.\nIf you specify `${hostname}`, it will be expanded by value of a hostname where fluentd runs.\nThe placeholder for records is deprecated. Use record accessor syntax instead.\n\nReserved placeholders are:\n\n- `${hostname}`: hostname\n- `${worker_id}`: fluent worker id\n- `${tag}`: tag name\n  - only available in Prometheus output/filter plugin\n- `${tag_parts[N]}` refers to the N",
                      "markdown": "`e starts with `$.` or `$[`. Other values are handled as raw string as is and may be expanded by placeholder described later.\n\nYou can use placeholder for label values. The placeholders will be expanded from reserved values and records.\nIf you specify `${hostname}`, it will be expanded by value of a hostname where fluentd runs.\nThe placeholder for records is deprecated. Use record accessor syntax instead.\n\nReserved placeholders are:\n\n- `${hostname}`: hostname\n- `${worker_id}`: fluent worker id\n- `${tag}`: tag name\n  - only available in Prometheus output/filter plugin\n- `${tag_parts[N]}` refers to the N`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/README.md"
                },
                "region": {
                  "startLine": 392,
                  "startColumn": 18,
                  "endLine": 392,
                  "endColumn": 26,
                  "snippet": {
                    "text": "The record accessor is enable only if the value starts with `$.` or `$[`. Other values are handled as raw string as is and may be expanded by placeholder described later.\n\nYou can use placeholder for label values. The placeholders will be expanded from reserved values and records.\nIf you specify `${hostname}`, it will be expanded by value of a hostname where fluentd runs.\nThe placeholder for records is deprecated. Use record accessor syntax instead.\n\nReserved placeholders are:\n\n- `${hostname}`: hostname\n- `${worker_id}`: fluent worker id\n- `${tag}`: tag name\n  - only available in Prometheus output/fil",
                    "rendered": {
                      "text": "The record accessor is enable only if the value starts with `$.` or `$[`. Other values are handled as raw string as is and may be expanded by placeholder described later.\n\nYou can use placeholder for label values. The placeholders will be expanded from reserved values and records.\nIf you specify `${hostname}`, it will be expanded by value of a hostname where fluentd runs.\nThe placeholder for records is deprecated. Use record accessor syntax instead.\n\nReserved placeholders are:\n\n- `${hostname}`: hostname\n- `${worker_id}`: fluent worker id\n- `${tag}`: tag name\n  - only available in Prometheus output/fil",
                      "markdown": "`The record accessor is enable only if the value starts with `$.` or `$[`. Other values are handled as raw string as is and may be expanded by placeholder described later.\n\nYou can use placeholder for label values. The placeholders will be expanded from reserved values and records.\nIf you specify `${hostname}`, it will be expanded by value of a hostname where fluentd runs.\nThe placeholder for records is deprecated. Use record accessor syntax instead.\n\nReserved placeholders are:\n\n- `${hostname}`: hostname\n- `${worker_id}`: fluent worker id\n- `${tag}`: tag name\n  - only available in Prometheus output/fil`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/README.md"
                },
                "region": {
                  "startLine": 357,
                  "startColumn": 11,
                  "endLine": 357,
                  "endColumn": 19,
                  "snippet": {
                    "text": "  buckets 0.1, 1, 5, 10\n  <labels>\n    tag ${tag}\n    host ${hostname}\n    foo bar\n  </labels>\n</metric>\n",
                    "rendered": {
                      "text": "  buckets 0.1, 1, 5, 10\n  <labels>\n    tag ${tag}\n    host ${hostname}\n    foo bar\n  </labels>\n</metric>\n",
                      "markdown": "`  buckets 0.1, 1, 5, 10\n  <labels>\n    tag ${tag}\n    host ${hostname}\n    foo bar\n  </labels>\n</metric>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/README.md"
                },
                "region": {
                  "startLine": 332,
                  "startColumn": 11,
                  "endLine": 332,
                  "endColumn": 19,
                  "snippet": {
                    "text": "  key foo\n  <labels>\n    tag ${tag}\n    host ${hostname}\n    foo bar\n  </labels>\n</metric>\n",
                    "rendered": {
                      "text": "  key foo\n  <labels>\n    tag ${tag}\n    host ${hostname}\n    foo bar\n  </labels>\n</metric>\n",
                      "markdown": "`  key foo\n  <labels>\n    tag ${tag}\n    host ${hostname}\n    foo bar\n  </labels>\n</metric>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/README.md"
                },
                "region": {
                  "startLine": 308,
                  "startColumn": 11,
                  "endLine": 308,
                  "endColumn": 19,
                  "snippet": {
                    "text": "  key foo\n  <labels>\n    tag ${tag}\n    host ${hostname}\n    foo bar\n  </labels>\n</metric>\n",
                    "rendered": {
                      "text": "  key foo\n  <labels>\n    tag ${tag}\n    host ${hostname}\n    foo bar\n  </labels>\n</metric>\n",
                      "markdown": "`  key foo\n  <labels>\n    tag ${tag}\n    host ${hostname}\n    foo bar\n  </labels>\n</metric>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/README.md"
                },
                "region": {
                  "startLine": 282,
                  "startColumn": 11,
                  "endLine": 282,
                  "endColumn": 19,
                  "snippet": {
                    "text": "  key foo\n  <labels>\n    tag ${tag}\n    host ${hostname}\n    foo bar\n  </labels>\n</metric>\n",
                    "rendered": {
                      "text": "  key foo\n  <labels>\n    tag ${tag}\n    host ${hostname}\n    foo bar\n  </labels>\n</metric>\n",
                      "markdown": "`  key foo\n  <labels>\n    tag ${tag}\n    host ${hostname}\n    foo bar\n  </labels>\n</metric>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/README.md"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 25,
                  "endLine": 192,
                  "endColumn": 33,
                  "snippet": {
                    "text": "More configuration parameters:\n\n- `<labels>`: additional labels for this metric (optional). See [Labels](#labels)\n- `interval`: interval to update monitor_agent information in seconds (default: 5)\n\n### prometheus output/filter plugin\n\n",
                    "rendered": {
                      "text": "More configuration parameters:\n\n- `<labels>`: additional labels for this metric (optional). See [Labels](#labels)\n- `interval`: interval to update monitor_agent information in seconds (default: 5)\n\n### prometheus output/filter plugin\n\n",
                      "markdown": "`More configuration parameters:\n\n- `<labels>`: additional labels for this metric (optional). See [Labels](#labels)\n- `interval`: interval to update monitor_agent information in seconds (default: 5)\n\n### prometheus output/filter plugin\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/README.md"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 25,
                  "endLine": 155,
                  "endColumn": 33,
                  "snippet": {
                    "text": "More configuration parameters:\n\n- `<labels>`: additional labels for this metric (optional). See [Labels](#labels)\n- `interval`: interval to update monitor_agent information in seconds (default: 5)\n- `gauge_all`: Specify metric type. If `true`, use `gauge` type. If `false`, use `counter` type. Since v2, this parameter will be removed and use `counter` type.\n\n### prometheus_tail_monitor input plugin\n",
                    "rendered": {
                      "text": "More configuration parameters:\n\n- `<labels>`: additional labels for this metric (optional). See [Labels](#labels)\n- `interval`: interval to update monitor_agent information in seconds (default: 5)\n- `gauge_all`: Specify metric type. If `true`, use `gauge` type. If `false`, use `counter` type. Since v2, this parameter will be removed and use `counter` type.\n\n### prometheus_tail_monitor input plugin\n",
                      "markdown": "`More configuration parameters:\n\n- `<labels>`: additional labels for this metric (optional). See [Labels](#labels)\n- `interval`: interval to update monitor_agent information in seconds (default: 5)\n- `gauge_all`: Specify metric type. If `true`, use `gauge` type. If `false`, use `counter` type. Since v2, this parameter will be removed and use `counter` type.\n\n### prometheus_tail_monitor input plugin\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/README.md"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 25,
                  "endLine": 110,
                  "endColumn": 33,
                  "snippet": {
                    "text": "More configuration parameters:\n\n- `<labels>`: additional labels for this metric (optional). See [Labels](#labels)\n- `interval`: interval to update monitor_agent information in seconds (default: 5)\n\n### prometheus_output_monitor input plugin\n\n",
                    "rendered": {
                      "text": "More configuration parameters:\n\n- `<labels>`: additional labels for this metric (optional). See [Labels](#labels)\n- `interval`: interval to update monitor_agent information in seconds (default: 5)\n\n### prometheus_output_monitor input plugin\n\n",
                      "markdown": "`More configuration parameters:\n\n- `<labels>`: additional labels for this metric (optional). See [Labels](#labels)\n- `interval`: interval to update monitor_agent information in seconds (default: 5)\n\n### prometheus_output_monitor input plugin\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/README.md"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 34,
                  "endLine": 69,
                  "endColumn": 38,
                  "snippet": {
                    "text": "- `content_encoding`: encoding format for the exposed metrics (default: identity). Supported formats are {identity, gzip}\n\nWhen using multiple workers, each worker binds to port + `fluent_worker_id`.\nTo scrape metrics from all workers at once, you can access http://localhost:24231/aggregated_metrics.\n\n#### TLS setting\n\n",
                    "rendered": {
                      "text": "- `content_encoding`: encoding format for the exposed metrics (default: identity). Supported formats are {identity, gzip}\n\nWhen using multiple workers, each worker binds to port + `fluent_worker_id`.\nTo scrape metrics from all workers at once, you can access http://localhost:24231/aggregated_metrics.\n\n#### TLS setting\n\n",
                      "markdown": "`- `content_encoding`: encoding format for the exposed metrics (default: identity). Supported formats are {identity, gzip}\n\nWhen using multiple workers, each worker binds to port + `fluent_worker_id`.\nTo scrape metrics from all workers at once, you can access http://localhost:24231/aggregated_metrics.\n\n#### TLS setting\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/README.md"
                },
                "region": {
                  "startLine": 534,
                  "startColumn": 1,
                  "endLine": 534,
                  "endColumn": 7,
                  "snippet": {
                    "text": "Confirm that some metrics are exported via Fluentd.\n\n```\n$ curl http://localhost:24231/metrics\n```\n\nThen, make a graph on Prometheus UI. http://localhost:9090/\n",
                    "rendered": {
                      "text": "Confirm that some metrics are exported via Fluentd.\n\n```\n$ curl http://localhost:24231/metrics\n```\n\nThen, make a graph on Prometheus UI. http://localhost:9090/\n",
                      "markdown": "`Confirm that some metrics are exported via Fluentd.\n\n```\n$ curl http://localhost:24231/metrics\n```\n\nThen, make a graph on Prometheus UI. http://localhost:9090/\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/README.md"
                },
                "region": {
                  "startLine": 528,
                  "startColumn": 1,
                  "endLine": 528,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\n```\n$ curl http://localhost/\n$ curl http://localhost:9999/\n```\n\nConfirm that some metrics are exported via Fluentd.\n",
                    "rendered": {
                      "text": "\n```\n$ curl http://localhost/\n$ curl http://localhost:9999/\n```\n\nConfirm that some metrics are exported via Fluentd.\n",
                      "markdown": "`\n```\n$ curl http://localhost/\n$ curl http://localhost:9999/\n```\n\nConfirm that some metrics are exported via Fluentd.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/README.md"
                },
                "region": {
                  "startLine": 527,
                  "startColumn": 1,
                  "endLine": 527,
                  "endColumn": 7,
                  "snippet": {
                    "text": "Generate some records by accessing nginx.\n\n```\n$ curl http://localhost/\n$ curl http://localhost:9999/\n```\n\n",
                    "rendered": {
                      "text": "Generate some records by accessing nginx.\n\n```\n$ curl http://localhost/\n$ curl http://localhost:9999/\n```\n\n",
                      "markdown": "`Generate some records by accessing nginx.\n\n```\n$ curl http://localhost/\n$ curl http://localhost:9999/\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/README.md"
                },
                "region": {
                  "startLine": 515,
                  "startColumn": 6,
                  "endLine": 515,
                  "endColumn": 15,
                  "snippet": {
                    "text": "$ sudo apt-get install -y nginx\n$ sudo cp misc/nginx_proxy.conf /etc/nginx/sites-enabled/proxy\n$ sudo chmod 777 /var/log/nginx && sudo chmod +r /var/log/nginx/*.log\n$ sudo service nginx restart\n```\n\nStart fluentd with sample configuration. It listens on 24231.\n",
                    "rendered": {
                      "text": "$ sudo apt-get install -y nginx\n$ sudo cp misc/nginx_proxy.conf /etc/nginx/sites-enabled/proxy\n$ sudo chmod 777 /var/log/nginx && sudo chmod +r /var/log/nginx/*.log\n$ sudo service nginx restart\n```\n\nStart fluentd with sample configuration. It listens on 24231.\n",
                      "markdown": "`$ sudo apt-get install -y nginx\n$ sudo cp misc/nginx_proxy.conf /etc/nginx/sites-enabled/proxy\n$ sudo chmod 777 /var/log/nginx && sudo chmod +r /var/log/nginx/*.log\n$ sudo service nginx restart\n```\n\nStart fluentd with sample configuration. It listens on 24231.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/README.md"
                },
                "region": {
                  "startLine": 514,
                  "startColumn": 39,
                  "endLine": 514,
                  "endColumn": 46,
                  "snippet": {
                    "text": "```\n$ sudo apt-get install -y nginx\n$ sudo cp misc/nginx_proxy.conf /etc/nginx/sites-enabled/proxy\n$ sudo chmod 777 /var/log/nginx && sudo chmod +r /var/log/nginx/*.log\n$ sudo service nginx restart\n```\n\n",
                    "rendered": {
                      "text": "```\n$ sudo apt-get install -y nginx\n$ sudo cp misc/nginx_proxy.conf /etc/nginx/sites-enabled/proxy\n$ sudo chmod 777 /var/log/nginx && sudo chmod +r /var/log/nginx/*.log\n$ sudo service nginx restart\n```\n\n",
                      "markdown": "````\n$ sudo apt-get install -y nginx\n$ sudo cp misc/nginx_proxy.conf /etc/nginx/sites-enabled/proxy\n$ sudo chmod 777 /var/log/nginx && sudo chmod +r /var/log/nginx/*.log\n$ sudo service nginx restart\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/README.md"
                },
                "region": {
                  "startLine": 514,
                  "startColumn": 6,
                  "endLine": 514,
                  "endColumn": 13,
                  "snippet": {
                    "text": "```\n$ sudo apt-get install -y nginx\n$ sudo cp misc/nginx_proxy.conf /etc/nginx/sites-enabled/proxy\n$ sudo chmod 777 /var/log/nginx && sudo chmod +r /var/log/nginx/*.log\n$ sudo service nginx restart\n```\n\n",
                    "rendered": {
                      "text": "```\n$ sudo apt-get install -y nginx\n$ sudo cp misc/nginx_proxy.conf /etc/nginx/sites-enabled/proxy\n$ sudo chmod 777 /var/log/nginx && sudo chmod +r /var/log/nginx/*.log\n$ sudo service nginx restart\n```\n\n",
                      "markdown": "````\n$ sudo apt-get install -y nginx\n$ sudo cp misc/nginx_proxy.conf /etc/nginx/sites-enabled/proxy\n$ sudo chmod 777 /var/log/nginx && sudo chmod +r /var/log/nginx/*.log\n$ sudo service nginx restart\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/README.md"
                },
                "region": {
                  "startLine": 513,
                  "startColumn": 6,
                  "endLine": 513,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n```\n$ sudo apt-get install -y nginx\n$ sudo cp misc/nginx_proxy.conf /etc/nginx/sites-enabled/proxy\n$ sudo chmod 777 /var/log/nginx && sudo chmod +r /var/log/nginx/*.log\n$ sudo service nginx restart\n```\n",
                    "rendered": {
                      "text": "\n```\n$ sudo apt-get install -y nginx\n$ sudo cp misc/nginx_proxy.conf /etc/nginx/sites-enabled/proxy\n$ sudo chmod 777 /var/log/nginx && sudo chmod +r /var/log/nginx/*.log\n$ sudo service nginx restart\n```\n",
                      "markdown": "`\n```\n$ sudo apt-get install -y nginx\n$ sudo cp misc/nginx_proxy.conf /etc/nginx/sites-enabled/proxy\n$ sudo chmod 777 /var/log/nginx && sudo chmod +r /var/log/nginx/*.log\n$ sudo service nginx restart\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/README.md"
                },
                "region": {
                  "startLine": 512,
                  "startColumn": 6,
                  "endLine": 512,
                  "endColumn": 15,
                  "snippet": {
                    "text": "Install Nginx for sample metrics. It listens on 80 and 9999.\n\n```\n$ sudo apt-get install -y nginx\n$ sudo cp misc/nginx_proxy.conf /etc/nginx/sites-enabled/proxy\n$ sudo chmod 777 /var/log/nginx && sudo chmod +r /var/log/nginx/*.log\n$ sudo service nginx restart\n",
                    "rendered": {
                      "text": "Install Nginx for sample metrics. It listens on 80 and 9999.\n\n```\n$ sudo apt-get install -y nginx\n$ sudo cp misc/nginx_proxy.conf /etc/nginx/sites-enabled/proxy\n$ sudo chmod 777 /var/log/nginx && sudo chmod +r /var/log/nginx/*.log\n$ sudo service nginx restart\n",
                      "markdown": "`Install Nginx for sample metrics. It listens on 80 and 9999.\n\n```\n$ sudo apt-get install -y nginx\n$ sudo cp misc/nginx_proxy.conf /etc/nginx/sites-enabled/proxy\n$ sudo chmod 777 /var/log/nginx && sudo chmod +r /var/log/nginx/*.log\n$ sudo service nginx restart\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/README.md"
                },
                "region": {
                  "startLine": 505,
                  "startColumn": 115,
                  "endLine": 505,
                  "endColumn": 120,
                  "snippet": {
                    "text": "Download pre-compiled Prometheus binary and start it. It listens on 9090.\n\n```\n$ wget https://github.com/prometheus/prometheus/releases/download/v1.5.2/prometheus-1.5.2.linux-amd64.tar.gz -O - | tar zxf -\n$ ./prometheus-1.5.2.linux-amd64/prometheus -config.file=./misc/prometheus.yaml -storage.local.path=./prometheus/metrics\n```\n\n",
                    "rendered": {
                      "text": "Download pre-compiled Prometheus binary and start it. It listens on 9090.\n\n```\n$ wget https://github.com/prometheus/prometheus/releases/download/v1.5.2/prometheus-1.5.2.linux-amd64.tar.gz -O - | tar zxf -\n$ ./prometheus-1.5.2.linux-amd64/prometheus -config.file=./misc/prometheus.yaml -storage.local.path=./prometheus/metrics\n```\n\n",
                      "markdown": "`Download pre-compiled Prometheus binary and start it. It listens on 9090.\n\n```\n$ wget https://github.com/prometheus/prometheus/releases/download/v1.5.2/prometheus-1.5.2.linux-amd64.tar.gz -O - | tar zxf -\n$ ./prometheus-1.5.2.linux-amd64/prometheus -config.file=./misc/prometheus.yaml -storage.local.path=./prometheus/metrics\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/README.md"
                },
                "region": {
                  "startLine": 505,
                  "startColumn": 1,
                  "endLine": 505,
                  "endColumn": 7,
                  "snippet": {
                    "text": "Download pre-compiled Prometheus binary and start it. It listens on 9090.\n\n```\n$ wget https://github.com/prometheus/prometheus/releases/download/v1.5.2/prometheus-1.5.2.linux-amd64.tar.gz -O - | tar zxf -\n$ ./prometheus-1.5.2.linux-amd64/prometheus -config.file=./misc/prometheus.yaml -storage.local.path=./prometheus/metrics\n```\n\n",
                    "rendered": {
                      "text": "Download pre-compiled Prometheus binary and start it. It listens on 9090.\n\n```\n$ wget https://github.com/prometheus/prometheus/releases/download/v1.5.2/prometheus-1.5.2.linux-amd64.tar.gz -O - | tar zxf -\n$ ./prometheus-1.5.2.linux-amd64/prometheus -config.file=./misc/prometheus.yaml -storage.local.path=./prometheus/metrics\n```\n\n",
                      "markdown": "`Download pre-compiled Prometheus binary and start it. It listens on 9090.\n\n```\n$ wget https://github.com/prometheus/prometheus/releases/download/v1.5.2/prometheus-1.5.2.linux-amd64.tar.gz -O - | tar zxf -\n$ ./prometheus-1.5.2.linux-amd64/prometheus -config.file=./misc/prometheus.yaml -storage.local.path=./prometheus/metrics\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/README.md"
                },
                "region": {
                  "startLine": 497,
                  "startColumn": 1,
                  "endLine": 497,
                  "endColumn": 6,
                  "snippet": {
                    "text": "Checkout repository and setup.\n\n```\n$ git clone git://github.com/fluent/fluent-plugin-prometheus.git\n$ cd fluent-plugin-prometheus\n$ bundle install --path vendor/bundle\n```\n",
                    "rendered": {
                      "text": "Checkout repository and setup.\n\n```\n$ git clone git://github.com/fluent/fluent-plugin-prometheus.git\n$ cd fluent-plugin-prometheus\n$ bundle install --path vendor/bundle\n```\n",
                      "markdown": "`Checkout repository and setup.\n\n```\n$ git clone git://github.com/fluent/fluent-plugin-prometheus.git\n$ cd fluent-plugin-prometheus\n$ bundle install --path vendor/bundle\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/README.md"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 69,
                  "endLine": 125,
                  "snippet": {
                    "text": "- `fluentd_output_status_num_errors`\n- `fluentd_output_status_emit_count`\n- `fluentd_output_status_retry_wait`\n    - current retry_wait computed from last retry time and next retry time\n- `fluentd_output_status_emit_records`\n- `fluentd_output_status_write_count`\n- `fluentd_output_status_rollback_count`\n- `fluentd_output_status_flush_time_count` in milliseconds from fluentd v1.6.0\n",
                    "rendered": {
                      "text": "- `fluentd_output_status_num_errors`\n- `fluentd_output_status_emit_count`\n- `fluentd_output_status_retry_wait`\n    - current retry_wait computed from last retry time and next retry time\n- `fluentd_output_status_emit_records`\n- `fluentd_output_status_write_count`\n- `fluentd_output_status_rollback_count`\n- `fluentd_output_status_flush_time_count` in milliseconds from fluentd v1.6.0\n",
                      "markdown": "`- `fluentd_output_status_num_errors`\n- `fluentd_output_status_emit_count`\n- `fluentd_output_status_retry_wait`\n    - current retry_wait computed from last retry time and next retry time\n- `fluentd_output_status_emit_records`\n- `fluentd_output_status_write_count`\n- `fluentd_output_status_rollback_count`\n- `fluentd_output_status_flush_time_count` in milliseconds from fluentd v1.6.0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/README.md"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 49,
                  "endLine": 124,
                  "endColumn": 55,
                  "snippet": {
                    "text": "- `fluentd_output_status_num_errors`\n- `fluentd_output_status_emit_count`\n- `fluentd_output_status_retry_wait`\n    - current retry_wait computed from last retry time and next retry time\n- `fluentd_output_status_emit_records`\n- `fluentd_output_status_write_count`\n- `fluentd_output_status_rollback_count`\n",
                    "rendered": {
                      "text": "- `fluentd_output_status_num_errors`\n- `fluentd_output_status_emit_count`\n- `fluentd_output_status_retry_wait`\n    - current retry_wait computed from last retry time and next retry time\n- `fluentd_output_status_emit_records`\n- `fluentd_output_status_write_count`\n- `fluentd_output_status_rollback_count`\n",
                      "markdown": "`- `fluentd_output_status_num_errors`\n- `fluentd_output_status_emit_count`\n- `fluentd_output_status_retry_wait`\n    - current retry_wait computed from last retry time and next retry time\n- `fluentd_output_status_emit_records`\n- `fluentd_output_status_write_count`\n- `fluentd_output_status_rollback_count`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/README.md"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 41,
                  "endLine": 9,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\n## Requirements\n\n| fluent-plugin-prometheus | fluentd    | ruby   |\n|--------------------------|------------|--------|\n| 1.x.y                    | >= v1.9.1  | >= 2.4 |\n| 1.[0-7].y                | >= v0.14.8 | >= 2.1 |\n",
                    "rendered": {
                      "text": "\n## Requirements\n\n| fluent-plugin-prometheus | fluentd    | ruby   |\n|--------------------------|------------|--------|\n| 1.x.y                    | >= v1.9.1  | >= 2.4 |\n| 1.[0-7].y                | >= v0.14.8 | >= 2.1 |\n",
                      "markdown": "`\n## Requirements\n\n| fluent-plugin-prometheus | fluentd    | ruby   |\n|--------------------------|------------|--------|\n| 1.x.y                    | >= v1.9.1  | >= 2.4 |\n| 1.[0-7].y                | >= v0.14.8 | >= 2.1 |\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 45,
                  "endLine": 13,
                  "endColumn": 53,
                  "snippet": {
                    "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                    "rendered": {
                      "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                      "markdown": "`#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 51,
                  "endLine": 12,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                    "rendered": {
                      "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                      "markdown": "`# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 53,
                  "endLine": 11,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                    "rendered": {
                      "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                      "markdown": "`# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                    "rendered": {
                      "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                      "markdown": "`\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                    "rendered": {
                      "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                      "markdown": "`\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 30,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                    "rendered": {
                      "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                      "markdown": "`\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 28,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                    "rendered": {
                      "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                      "markdown": "`\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                    "rendered": {
                      "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                      "markdown": "`\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 45,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                    "rendered": {
                      "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                      "markdown": "`use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                    "rendered": {
                      "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                      "markdown": "`use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                    "rendered": {
                      "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                      "markdown": "`# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 37,
                  "endLine": 37,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                    "rendered": {
                      "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                      "markdown": "`#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                    "rendered": {
                      "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                      "markdown": "`# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                    "rendered": {
                      "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                      "markdown": "`# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 39,
                  "endLine": 89,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                    "rendered": {
                      "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                      "markdown": "`\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                    "rendered": {
                      "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                      "markdown": "`\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/.git/hooks/pre-merge-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/in_prometheus.rb"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 20,
                  "endLine": 213,
                  "endColumn": 25,
                  "snippet": {
                    "text": "      bind = (@bind == '0.0.0.0') ? '127.0.0.1' : @bind\n      [*(@base_port...(@base_port + @num_workers))].each do |worker_port|\n        do_request(host: bind, port: worker_port, secure: @secure) do |http|\n          yield(http.get(@metrics_path))\n        end\n      end\n    end\n",
                    "rendered": {
                      "text": "      bind = (@bind == '0.0.0.0') ? '127.0.0.1' : @bind\n      [*(@base_port...(@base_port + @num_workers))].each do |worker_port|\n        do_request(host: bind, port: worker_port, secure: @secure) do |http|\n          yield(http.get(@metrics_path))\n        end\n      end\n    end\n",
                      "markdown": "`      bind = (@bind == '0.0.0.0') ? '127.0.0.1' : @bind\n      [*(@base_port...(@base_port + @num_workers))].each do |worker_port|\n        do_request(host: bind, port: worker_port, secure: @secure) do |http|\n          yield(http.get(@metrics_path))\n        end\n      end\n    end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/in_prometheus.rb"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 14,
                  "endLine": 115,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n      http_server_create_http_server(:in_prometheus_server, addr: @bind, port: @port, logger: log, proto: proto, tls_opts: tls_opt) do |server|\n        server.get(@metrics_path) { |_req| all_metrics }\n        server.get(@aggregated_metrics_path) { |_req| all_workers_metrics }\n      end\n    end\n\n",
                    "rendered": {
                      "text": "\n      http_server_create_http_server(:in_prometheus_server, addr: @bind, port: @port, logger: log, proto: proto, tls_opts: tls_opt) do |server|\n        server.get(@metrics_path) { |_req| all_metrics }\n        server.get(@aggregated_metrics_path) { |_req| all_workers_metrics }\n      end\n    end\n\n",
                      "markdown": "`\n      http_server_create_http_server(:in_prometheus_server, addr: @bind, port: @port, logger: log, proto: proto, tls_opts: tls_opt) do |server|\n        server.get(@metrics_path) { |_req| all_metrics }\n        server.get(@aggregated_metrics_path) { |_req| all_workers_metrics }\n      end\n    end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/in_prometheus.rb"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 14,
                  "endLine": 114,
                  "endColumn": 19,
                  "snippet": {
                    "text": "                end\n\n      http_server_create_http_server(:in_prometheus_server, addr: @bind, port: @port, logger: log, proto: proto, tls_opts: tls_opt) do |server|\n        server.get(@metrics_path) { |_req| all_metrics }\n        server.get(@aggregated_metrics_path) { |_req| all_workers_metrics }\n      end\n    end\n",
                    "rendered": {
                      "text": "                end\n\n      http_server_create_http_server(:in_prometheus_server, addr: @bind, port: @port, logger: log, proto: proto, tls_opts: tls_opt) do |server|\n        server.get(@metrics_path) { |_req| all_metrics }\n        server.get(@aggregated_metrics_path) { |_req| all_workers_metrics }\n      end\n    end\n",
                      "markdown": "`                end\n\n      http_server_create_http_server(:in_prometheus_server, addr: @bind, port: @port, logger: log, proto: proto, tls_opts: tls_opt) do |server|\n        server.get(@metrics_path) { |_req| all_metrics }\n        server.get(@aggregated_metrics_path) { |_req| all_workers_metrics }\n      end\n    end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/in_prometheus.rb"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 23,
                  "endLine": 157,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n      if @ssl['private_key_path']\n        key = OpenSSL::PKey.read(@ssl['private_key_path'])\n        ssl_config[:SSLPrivateKey] = key\n      end\n\n      ssl_config[:SSLCACertificateFile] = @ssl['ca_path'] if @ssl['ca_path']\n",
                    "rendered": {
                      "text": "\n      if @ssl['private_key_path']\n        key = OpenSSL::PKey.read(@ssl['private_key_path'])\n        ssl_config[:SSLPrivateKey] = key\n      end\n\n      ssl_config[:SSLCACertificateFile] = @ssl['ca_path'] if @ssl['ca_path']\n",
                      "markdown": "`\n      if @ssl['private_key_path']\n        key = OpenSSL::PKey.read(@ssl['private_key_path'])\n        ssl_config[:SSLPrivateKey] = key\n      end\n\n      ssl_config[:SSLCACertificateFile] = @ssl['ca_path'] if @ssl['ca_path']\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/in_prometheus.rb"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 39,
                  "endLine": 156,
                  "endColumn": 50,
                  "snippet": {
                    "text": "      end\n\n      if @ssl['private_key_path']\n        key = OpenSSL::PKey.read(@ssl['private_key_path'])\n        ssl_config[:SSLPrivateKey] = key\n      end\n\n",
                    "rendered": {
                      "text": "      end\n\n      if @ssl['private_key_path']\n        key = OpenSSL::PKey.read(@ssl['private_key_path'])\n        ssl_config[:SSLPrivateKey] = key\n      end\n\n",
                      "markdown": "`      end\n\n      if @ssl['private_key_path']\n        key = OpenSSL::PKey.read(@ssl['private_key_path'])\n        ssl_config[:SSLPrivateKey] = key\n      end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/in_prometheus.rb"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 15,
                  "endLine": 155,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        ssl_config[:SSLCertificate] = cert\n      end\n\n      if @ssl['private_key_path']\n        key = OpenSSL::PKey.read(@ssl['private_key_path'])\n        ssl_config[:SSLPrivateKey] = key\n      end\n",
                    "rendered": {
                      "text": "        ssl_config[:SSLCertificate] = cert\n      end\n\n      if @ssl['private_key_path']\n        key = OpenSSL::PKey.read(@ssl['private_key_path'])\n        ssl_config[:SSLPrivateKey] = key\n      end\n",
                      "markdown": "`        ssl_config[:SSLCertificate] = cert\n      end\n\n      if @ssl['private_key_path']\n        key = OpenSSL::PKey.read(@ssl['private_key_path'])\n        ssl_config[:SSLPrivateKey] = key\n      end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/in_prometheus.rb"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 53,
                  "endLine": 142,
                  "endColumn": 64,
                  "snippet": {
                    "text": "        AccessLog: [],\n      }\n      if (@ssl['certificate_path'] && @ssl['private_key_path'].nil?) || (@ssl['certificate_path'].nil? && @ssl['private_key_path'])\n        raise RuntimeError.new(\"certificate_path and private_key_path most both be defined\")\n      end\n\n      ssl_config = {\n",
                    "rendered": {
                      "text": "        AccessLog: [],\n      }\n      if (@ssl['certificate_path'] && @ssl['private_key_path'].nil?) || (@ssl['certificate_path'].nil? && @ssl['private_key_path'])\n        raise RuntimeError.new(\"certificate_path and private_key_path most both be defined\")\n      end\n\n      ssl_config = {\n",
                      "markdown": "`        AccessLog: [],\n      }\n      if (@ssl['certificate_path'] && @ssl['private_key_path'].nil?) || (@ssl['certificate_path'].nil? && @ssl['private_key_path'])\n        raise RuntimeError.new(\"certificate_path and private_key_path most both be defined\")\n      end\n\n      ssl_config = {\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/in_prometheus.rb"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 112,
                  "endLine": 141,
                  "endColumn": 123,
                  "snippet": {
                    "text": "        Logger: WEBrick::Log.new(STDERR, WEBrick::Log::FATAL),\n        AccessLog: [],\n      }\n      if (@ssl['certificate_path'] && @ssl['private_key_path'].nil?) || (@ssl['certificate_path'].nil? && @ssl['private_key_path'])\n        raise RuntimeError.new(\"certificate_path and private_key_path most both be defined\")\n      end\n\n",
                    "rendered": {
                      "text": "        Logger: WEBrick::Log.new(STDERR, WEBrick::Log::FATAL),\n        AccessLog: [],\n      }\n      if (@ssl['certificate_path'] && @ssl['private_key_path'].nil?) || (@ssl['certificate_path'].nil? && @ssl['private_key_path'])\n        raise RuntimeError.new(\"certificate_path and private_key_path most both be defined\")\n      end\n\n",
                      "markdown": "`        Logger: WEBrick::Log.new(STDERR, WEBrick::Log::FATAL),\n        AccessLog: [],\n      }\n      if (@ssl['certificate_path'] && @ssl['private_key_path'].nil?) || (@ssl['certificate_path'].nil? && @ssl['private_key_path'])\n        raise RuntimeError.new(\"certificate_path and private_key_path most both be defined\")\n      end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/in_prometheus.rb"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 44,
                  "endLine": 141,
                  "endColumn": 55,
                  "snippet": {
                    "text": "        Logger: WEBrick::Log.new(STDERR, WEBrick::Log::FATAL),\n        AccessLog: [],\n      }\n      if (@ssl['certificate_path'] && @ssl['private_key_path'].nil?) || (@ssl['certificate_path'].nil? && @ssl['private_key_path'])\n        raise RuntimeError.new(\"certificate_path and private_key_path most both be defined\")\n      end\n\n",
                    "rendered": {
                      "text": "        Logger: WEBrick::Log.new(STDERR, WEBrick::Log::FATAL),\n        AccessLog: [],\n      }\n      if (@ssl['certificate_path'] && @ssl['private_key_path'].nil?) || (@ssl['certificate_path'].nil? && @ssl['private_key_path'])\n        raise RuntimeError.new(\"certificate_path and private_key_path most both be defined\")\n      end\n\n",
                      "markdown": "`        Logger: WEBrick::Log.new(STDERR, WEBrick::Log::FATAL),\n        AccessLog: [],\n      }\n      if (@ssl['certificate_path'] && @ssl['private_key_path'].nil?) || (@ssl['certificate_path'].nil? && @ssl['private_key_path'])\n        raise RuntimeError.new(\"certificate_path and private_key_path most both be defined\")\n      end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/in_prometheus.rb"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 59,
                  "endLine": 100,
                  "endColumn": 70,
                  "snippet": {
                    "text": "                  end\n\n                  if @ssl['private_key_path']\n                    ssl_config['private_key_path'] = @ssl['private_key_path']\n                  end\n\n                  if @ssl['ca_path']\n",
                    "rendered": {
                      "text": "                  end\n\n                  if @ssl['private_key_path']\n                    ssl_config['private_key_path'] = @ssl['private_key_path']\n                  end\n\n                  if @ssl['ca_path']\n",
                      "markdown": "`                  end\n\n                  if @ssl['private_key_path']\n                    ssl_config['private_key_path'] = @ssl['private_key_path']\n                  end\n\n                  if @ssl['ca_path']\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/in_prometheus.rb"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 32,
                  "endLine": 100,
                  "endColumn": 43,
                  "snippet": {
                    "text": "                  end\n\n                  if @ssl['private_key_path']\n                    ssl_config['private_key_path'] = @ssl['private_key_path']\n                  end\n\n                  if @ssl['ca_path']\n",
                    "rendered": {
                      "text": "                  end\n\n                  if @ssl['private_key_path']\n                    ssl_config['private_key_path'] = @ssl['private_key_path']\n                  end\n\n                  if @ssl['ca_path']\n",
                      "markdown": "`                  end\n\n                  if @ssl['private_key_path']\n                    ssl_config['private_key_path'] = @ssl['private_key_path']\n                  end\n\n                  if @ssl['ca_path']\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/in_prometheus.rb"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 27,
                  "endLine": 99,
                  "endColumn": 38,
                  "snippet": {
                    "text": "                    ssl_config['cert_path'] = @ssl['certificate_path']\n                  end\n\n                  if @ssl['private_key_path']\n                    ssl_config['private_key_path'] = @ssl['private_key_path']\n                  end\n\n",
                    "rendered": {
                      "text": "                    ssl_config['cert_path'] = @ssl['certificate_path']\n                  end\n\n                  if @ssl['private_key_path']\n                    ssl_config['private_key_path'] = @ssl['private_key_path']\n                  end\n\n",
                      "markdown": "`                    ssl_config['cert_path'] = @ssl['certificate_path']\n                  end\n\n                  if @ssl['private_key_path']\n                    ssl_config['private_key_path'] = @ssl['private_key_path']\n                  end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/in_prometheus.rb"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 77,
                  "endLine": 92,
                  "endColumn": 88,
                  "snippet": {
                    "text": "                  ssl_config = {}\n\n                  if (@ssl['certificate_path'] && @ssl['private_key_path'].nil?) || (@ssl['certificate_path'].nil? && @ssl['private_key_path'])\n                    raise Fluent::ConfigError.new('both certificate_path and private_key_path must be defined')\n                  end\n\n                  if @ssl['certificate_path']\n",
                    "rendered": {
                      "text": "                  ssl_config = {}\n\n                  if (@ssl['certificate_path'] && @ssl['private_key_path'].nil?) || (@ssl['certificate_path'].nil? && @ssl['private_key_path'])\n                    raise Fluent::ConfigError.new('both certificate_path and private_key_path must be defined')\n                  end\n\n                  if @ssl['certificate_path']\n",
                      "markdown": "`                  ssl_config = {}\n\n                  if (@ssl['certificate_path'] && @ssl['private_key_path'].nil?) || (@ssl['certificate_path'].nil? && @ssl['private_key_path'])\n                    raise Fluent::ConfigError.new('both certificate_path and private_key_path must be defined')\n                  end\n\n                  if @ssl['certificate_path']\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/in_prometheus.rb"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 124,
                  "endLine": 91,
                  "endColumn": 135,
                  "snippet": {
                    "text": "      tls_opt = if @ssl && @ssl['enable']\n                  ssl_config = {}\n\n                  if (@ssl['certificate_path'] && @ssl['private_key_path'].nil?) || (@ssl['certificate_path'].nil? && @ssl['private_key_path'])\n                    raise Fluent::ConfigError.new('both certificate_path and private_key_path must be defined')\n                  end\n\n",
                    "rendered": {
                      "text": "      tls_opt = if @ssl && @ssl['enable']\n                  ssl_config = {}\n\n                  if (@ssl['certificate_path'] && @ssl['private_key_path'].nil?) || (@ssl['certificate_path'].nil? && @ssl['private_key_path'])\n                    raise Fluent::ConfigError.new('both certificate_path and private_key_path must be defined')\n                  end\n\n",
                      "markdown": "`      tls_opt = if @ssl && @ssl['enable']\n                  ssl_config = {}\n\n                  if (@ssl['certificate_path'] && @ssl['private_key_path'].nil?) || (@ssl['certificate_path'].nil? && @ssl['private_key_path'])\n                    raise Fluent::ConfigError.new('both certificate_path and private_key_path must be defined')\n                  end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/in_prometheus.rb"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 56,
                  "endLine": 91,
                  "endColumn": 67,
                  "snippet": {
                    "text": "      tls_opt = if @ssl && @ssl['enable']\n                  ssl_config = {}\n\n                  if (@ssl['certificate_path'] && @ssl['private_key_path'].nil?) || (@ssl['certificate_path'].nil? && @ssl['private_key_path'])\n                    raise Fluent::ConfigError.new('both certificate_path and private_key_path must be defined')\n                  end\n\n",
                    "rendered": {
                      "text": "      tls_opt = if @ssl && @ssl['enable']\n                  ssl_config = {}\n\n                  if (@ssl['certificate_path'] && @ssl['private_key_path'].nil?) || (@ssl['certificate_path'].nil? && @ssl['private_key_path'])\n                    raise Fluent::ConfigError.new('both certificate_path and private_key_path must be defined')\n                  end\n\n",
                      "markdown": "`      tls_opt = if @ssl && @ssl['enable']\n                  ssl_config = {}\n\n                  if (@ssl['certificate_path'] && @ssl['private_key_path'].nil?) || (@ssl['certificate_path'].nil? && @ssl['private_key_path'])\n                    raise Fluent::ConfigError.new('both certificate_path and private_key_path must be defined')\n                  end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/in_prometheus.rb"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 78,
                  "endLine": 27,
                  "endColumn": 89,
                  "snippet": {
                    "text": "      config_param :certificate_path, :string, default: nil, deprecated: 'Use cert_path in <transport tls> section'\n\n      desc 'Path to the ssl private key in PEM format.  Read from file and added to conf as \"SSLPrivateKey\"'\n      config_param :private_key_path, :string, default: nil, deprecated: 'Use private_key_path in <transport tls> section'\n\n      desc 'Path to CA in PEM format.  Read from file and added to conf as \"SSLCACertificateFile\"'\n      config_param :ca_path, :string, default: nil, deprecated: 'Use ca_path in <transport tls> section'\n",
                    "rendered": {
                      "text": "      config_param :certificate_path, :string, default: nil, deprecated: 'Use cert_path in <transport tls> section'\n\n      desc 'Path to the ssl private key in PEM format.  Read from file and added to conf as \"SSLPrivateKey\"'\n      config_param :private_key_path, :string, default: nil, deprecated: 'Use private_key_path in <transport tls> section'\n\n      desc 'Path to CA in PEM format.  Read from file and added to conf as \"SSLCACertificateFile\"'\n      config_param :ca_path, :string, default: nil, deprecated: 'Use ca_path in <transport tls> section'\n",
                      "markdown": "`      config_param :certificate_path, :string, default: nil, deprecated: 'Use cert_path in <transport tls> section'\n\n      desc 'Path to the ssl private key in PEM format.  Read from file and added to conf as \"SSLPrivateKey\"'\n      config_param :private_key_path, :string, default: nil, deprecated: 'Use private_key_path in <transport tls> section'\n\n      desc 'Path to CA in PEM format.  Read from file and added to conf as \"SSLCACertificateFile\"'\n      config_param :ca_path, :string, default: nil, deprecated: 'Use ca_path in <transport tls> section'\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/in_prometheus.rb"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 20,
                  "endLine": 27,
                  "endColumn": 31,
                  "snippet": {
                    "text": "      config_param :certificate_path, :string, default: nil, deprecated: 'Use cert_path in <transport tls> section'\n\n      desc 'Path to the ssl private key in PEM format.  Read from file and added to conf as \"SSLPrivateKey\"'\n      config_param :private_key_path, :string, default: nil, deprecated: 'Use private_key_path in <transport tls> section'\n\n      desc 'Path to CA in PEM format.  Read from file and added to conf as \"SSLCACertificateFile\"'\n      config_param :ca_path, :string, default: nil, deprecated: 'Use ca_path in <transport tls> section'\n",
                    "rendered": {
                      "text": "      config_param :certificate_path, :string, default: nil, deprecated: 'Use cert_path in <transport tls> section'\n\n      desc 'Path to the ssl private key in PEM format.  Read from file and added to conf as \"SSLPrivateKey\"'\n      config_param :private_key_path, :string, default: nil, deprecated: 'Use private_key_path in <transport tls> section'\n\n      desc 'Path to CA in PEM format.  Read from file and added to conf as \"SSLCACertificateFile\"'\n      config_param :ca_path, :string, default: nil, deprecated: 'Use ca_path in <transport tls> section'\n",
                      "markdown": "`      config_param :certificate_path, :string, default: nil, deprecated: 'Use cert_path in <transport tls> section'\n\n      desc 'Path to the ssl private key in PEM format.  Read from file and added to conf as \"SSLPrivateKey\"'\n      config_param :private_key_path, :string, default: nil, deprecated: 'Use private_key_path in <transport tls> section'\n\n      desc 'Path to CA in PEM format.  Read from file and added to conf as \"SSLCACertificateFile\"'\n      config_param :ca_path, :string, default: nil, deprecated: 'Use ca_path in <transport tls> section'\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/lib/fluent/plugin/in_prometheus.rb"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 96,
                  "endLine": 26,
                  "endColumn": 106,
                  "snippet": {
                    "text": "      desc 'Path to the ssl certificate in PEM format.  Read from file and added to conf as \"SSLCertificate\"'\n      config_param :certificate_path, :string, default: nil, deprecated: 'Use cert_path in <transport tls> section'\n\n      desc 'Path to the ssl private key in PEM format.  Read from file and added to conf as \"SSLPrivateKey\"'\n      config_param :private_key_path, :string, default: nil, deprecated: 'Use private_key_path in <transport tls> section'\n\n      desc 'Path to CA in PEM format.  Read from file and added to conf as \"SSLCACertificateFile\"'\n",
                    "rendered": {
                      "text": "      desc 'Path to the ssl certificate in PEM format.  Read from file and added to conf as \"SSLCertificate\"'\n      config_param :certificate_path, :string, default: nil, deprecated: 'Use cert_path in <transport tls> section'\n\n      desc 'Path to the ssl private key in PEM format.  Read from file and added to conf as \"SSLPrivateKey\"'\n      config_param :private_key_path, :string, default: nil, deprecated: 'Use private_key_path in <transport tls> section'\n\n      desc 'Path to CA in PEM format.  Read from file and added to conf as \"SSLCACertificateFile\"'\n",
                      "markdown": "`      desc 'Path to the ssl certificate in PEM format.  Read from file and added to conf as \"SSLCertificate\"'\n      config_param :certificate_path, :string, default: nil, deprecated: 'Use cert_path in <transport tls> section'\n\n      desc 'Path to the ssl private key in PEM format.  Read from file and added to conf as \"SSLPrivateKey\"'\n      config_param :private_key_path, :string, default: nil, deprecated: 'Use private_key_path in <transport tls> section'\n\n      desc 'Path to CA in PEM format.  Read from file and added to conf as \"SSLCACertificateFile\"'\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 430,
                  "startColumn": 28,
                  "endLine": 430,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n  context 'placeholder config' do\n    let(:config) { PLACEHOLDER_CONFIG }\n    let(:counter) { registry.get(:placeholder_foo) }\n\n    it 'expands placeholders with record values' do\n      expect(registry.metrics.map(&:name)).to eq([:placeholder_foo])\n",
                    "rendered": {
                      "text": "\n  context 'placeholder config' do\n    let(:config) { PLACEHOLDER_CONFIG }\n    let(:counter) { registry.get(:placeholder_foo) }\n\n    it 'expands placeholders with record values' do\n      expect(registry.metrics.map(&:name)).to eq([:placeholder_foo])\n",
                      "markdown": "`\n  context 'placeholder config' do\n    let(:config) { PLACEHOLDER_CONFIG }\n    let(:counter) { registry.get(:placeholder_foo) }\n\n    it 'expands placeholders with record values' do\n      expect(registry.metrics.map(&:name)).to eq([:placeholder_foo])\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 401,
                  "startColumn": 47,
                  "endLine": 401,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    let(:histogram) { registry.get(:full_qux) }\n    let(:summary_with_accessor) { registry.get(:full_accessor1) }\n    let(:counter_with_accessor) { registry.get(:full_accessor2) }\n    let(:counter_with_two_accessors) { registry.get(:full_accessor3) }\n  \n    it 'adds all metrics' do\n      expect(registry.metrics.map(&:name)).to eq(%i[full_foo full_bar full_baz full_qux full_accessor1 full_accessor2 full_accessor3])\n",
                    "rendered": {
                      "text": "    let(:histogram) { registry.get(:full_qux) }\n    let(:summary_with_accessor) { registry.get(:full_accessor1) }\n    let(:counter_with_accessor) { registry.get(:full_accessor2) }\n    let(:counter_with_two_accessors) { registry.get(:full_accessor3) }\n  \n    it 'adds all metrics' do\n      expect(registry.metrics.map(&:name)).to eq(%i[full_foo full_bar full_baz full_qux full_accessor1 full_accessor2 full_accessor3])\n",
                      "markdown": "`    let(:histogram) { registry.get(:full_qux) }\n    let(:summary_with_accessor) { registry.get(:full_accessor1) }\n    let(:counter_with_accessor) { registry.get(:full_accessor2) }\n    let(:counter_with_two_accessors) { registry.get(:full_accessor3) }\n  \n    it 'adds all metrics' do\n      expect(registry.metrics.map(&:name)).to eq(%i[full_foo full_bar full_baz full_qux full_accessor1 full_accessor2 full_accessor3])\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 400,
                  "startColumn": 42,
                  "endLine": 400,
                  "endColumn": 47,
                  "snippet": {
                    "text": "    let(:summary) { registry.get(:full_baz) }\n    let(:histogram) { registry.get(:full_qux) }\n    let(:summary_with_accessor) { registry.get(:full_accessor1) }\n    let(:counter_with_accessor) { registry.get(:full_accessor2) }\n    let(:counter_with_two_accessors) { registry.get(:full_accessor3) }\n  \n    it 'adds all metrics' do\n",
                    "rendered": {
                      "text": "    let(:summary) { registry.get(:full_baz) }\n    let(:histogram) { registry.get(:full_qux) }\n    let(:summary_with_accessor) { registry.get(:full_accessor1) }\n    let(:counter_with_accessor) { registry.get(:full_accessor2) }\n    let(:counter_with_two_accessors) { registry.get(:full_accessor3) }\n  \n    it 'adds all metrics' do\n",
                      "markdown": "`    let(:summary) { registry.get(:full_baz) }\n    let(:histogram) { registry.get(:full_qux) }\n    let(:summary_with_accessor) { registry.get(:full_accessor1) }\n    let(:counter_with_accessor) { registry.get(:full_accessor2) }\n    let(:counter_with_two_accessors) { registry.get(:full_accessor3) }\n  \n    it 'adds all metrics' do\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 399,
                  "startColumn": 42,
                  "endLine": 399,
                  "endColumn": 47,
                  "snippet": {
                    "text": "    let(:gauge) { registry.get(:full_bar) }\n    let(:summary) { registry.get(:full_baz) }\n    let(:histogram) { registry.get(:full_qux) }\n    let(:summary_with_accessor) { registry.get(:full_accessor1) }\n    let(:counter_with_accessor) { registry.get(:full_accessor2) }\n    let(:counter_with_two_accessors) { registry.get(:full_accessor3) }\n  \n",
                    "rendered": {
                      "text": "    let(:gauge) { registry.get(:full_bar) }\n    let(:summary) { registry.get(:full_baz) }\n    let(:histogram) { registry.get(:full_qux) }\n    let(:summary_with_accessor) { registry.get(:full_accessor1) }\n    let(:counter_with_accessor) { registry.get(:full_accessor2) }\n    let(:counter_with_two_accessors) { registry.get(:full_accessor3) }\n  \n",
                      "markdown": "`    let(:gauge) { registry.get(:full_bar) }\n    let(:summary) { registry.get(:full_baz) }\n    let(:histogram) { registry.get(:full_qux) }\n    let(:summary_with_accessor) { registry.get(:full_accessor1) }\n    let(:counter_with_accessor) { registry.get(:full_accessor2) }\n    let(:counter_with_two_accessors) { registry.get(:full_accessor3) }\n  \n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 398,
                  "startColumn": 30,
                  "endLine": 398,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    let(:counter) { registry.get(:full_foo) }\n    let(:gauge) { registry.get(:full_bar) }\n    let(:summary) { registry.get(:full_baz) }\n    let(:histogram) { registry.get(:full_qux) }\n    let(:summary_with_accessor) { registry.get(:full_accessor1) }\n    let(:counter_with_accessor) { registry.get(:full_accessor2) }\n    let(:counter_with_two_accessors) { registry.get(:full_accessor3) }\n",
                    "rendered": {
                      "text": "    let(:counter) { registry.get(:full_foo) }\n    let(:gauge) { registry.get(:full_bar) }\n    let(:summary) { registry.get(:full_baz) }\n    let(:histogram) { registry.get(:full_qux) }\n    let(:summary_with_accessor) { registry.get(:full_accessor1) }\n    let(:counter_with_accessor) { registry.get(:full_accessor2) }\n    let(:counter_with_two_accessors) { registry.get(:full_accessor3) }\n",
                      "markdown": "`    let(:counter) { registry.get(:full_foo) }\n    let(:gauge) { registry.get(:full_bar) }\n    let(:summary) { registry.get(:full_baz) }\n    let(:histogram) { registry.get(:full_qux) }\n    let(:summary_with_accessor) { registry.get(:full_accessor1) }\n    let(:counter_with_accessor) { registry.get(:full_accessor2) }\n    let(:counter_with_two_accessors) { registry.get(:full_accessor3) }\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 397,
                  "startColumn": 28,
                  "endLine": 397,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    let(:config) { FULL_CONFIG }\n    let(:counter) { registry.get(:full_foo) }\n    let(:gauge) { registry.get(:full_bar) }\n    let(:summary) { registry.get(:full_baz) }\n    let(:histogram) { registry.get(:full_qux) }\n    let(:summary_with_accessor) { registry.get(:full_accessor1) }\n    let(:counter_with_accessor) { registry.get(:full_accessor2) }\n",
                    "rendered": {
                      "text": "    let(:config) { FULL_CONFIG }\n    let(:counter) { registry.get(:full_foo) }\n    let(:gauge) { registry.get(:full_bar) }\n    let(:summary) { registry.get(:full_baz) }\n    let(:histogram) { registry.get(:full_qux) }\n    let(:summary_with_accessor) { registry.get(:full_accessor1) }\n    let(:counter_with_accessor) { registry.get(:full_accessor2) }\n",
                      "markdown": "`    let(:config) { FULL_CONFIG }\n    let(:counter) { registry.get(:full_foo) }\n    let(:gauge) { registry.get(:full_bar) }\n    let(:summary) { registry.get(:full_baz) }\n    let(:histogram) { registry.get(:full_qux) }\n    let(:summary_with_accessor) { registry.get(:full_accessor1) }\n    let(:counter_with_accessor) { registry.get(:full_accessor2) }\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 396,
                  "startColumn": 26,
                  "endLine": 396,
                  "endColumn": 31,
                  "snippet": {
                    "text": "  context 'full config' do\n    let(:config) { FULL_CONFIG }\n    let(:counter) { registry.get(:full_foo) }\n    let(:gauge) { registry.get(:full_bar) }\n    let(:summary) { registry.get(:full_baz) }\n    let(:histogram) { registry.get(:full_qux) }\n    let(:summary_with_accessor) { registry.get(:full_accessor1) }\n",
                    "rendered": {
                      "text": "  context 'full config' do\n    let(:config) { FULL_CONFIG }\n    let(:counter) { registry.get(:full_foo) }\n    let(:gauge) { registry.get(:full_bar) }\n    let(:summary) { registry.get(:full_baz) }\n    let(:histogram) { registry.get(:full_qux) }\n    let(:summary_with_accessor) { registry.get(:full_accessor1) }\n",
                      "markdown": "`  context 'full config' do\n    let(:config) { FULL_CONFIG }\n    let(:counter) { registry.get(:full_foo) }\n    let(:gauge) { registry.get(:full_bar) }\n    let(:summary) { registry.get(:full_baz) }\n    let(:histogram) { registry.get(:full_qux) }\n    let(:summary_with_accessor) { registry.get(:full_accessor1) }\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 395,
                  "startColumn": 28,
                  "endLine": 395,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n  context 'full config' do\n    let(:config) { FULL_CONFIG }\n    let(:counter) { registry.get(:full_foo) }\n    let(:gauge) { registry.get(:full_bar) }\n    let(:summary) { registry.get(:full_baz) }\n    let(:histogram) { registry.get(:full_qux) }\n",
                    "rendered": {
                      "text": "\n  context 'full config' do\n    let(:config) { FULL_CONFIG }\n    let(:counter) { registry.get(:full_foo) }\n    let(:gauge) { registry.get(:full_bar) }\n    let(:summary) { registry.get(:full_baz) }\n    let(:histogram) { registry.get(:full_qux) }\n",
                      "markdown": "`\n  context 'full config' do\n    let(:config) { FULL_CONFIG }\n    let(:counter) { registry.get(:full_foo) }\n    let(:gauge) { registry.get(:full_bar) }\n    let(:summary) { registry.get(:full_baz) }\n    let(:histogram) { registry.get(:full_qux) }\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 377,
                  "startColumn": 28,
                  "endLine": 377,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n  context 'counter_without config' do\n    let(:config) { COUNTER_WITHOUT_KEY_CONFIG }\n    let(:counter) { registry.get(:without_key_foo) }\n\n    it 'just increments by 1' do\n      expect(registry.metrics.map(&:name)).to eq([:without_key_foo])\n",
                    "rendered": {
                      "text": "\n  context 'counter_without config' do\n    let(:config) { COUNTER_WITHOUT_KEY_CONFIG }\n    let(:counter) { registry.get(:without_key_foo) }\n\n    it 'just increments by 1' do\n      expect(registry.metrics.map(&:name)).to eq([:without_key_foo])\n",
                      "markdown": "`\n  context 'counter_without config' do\n    let(:config) { COUNTER_WITHOUT_KEY_CONFIG }\n    let(:counter) { registry.get(:without_key_foo) }\n\n    it 'just increments by 1' do\n      expect(registry.metrics.map(&:name)).to eq([:without_key_foo])\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 364,
                  "startColumn": 28,
                  "endLine": 364,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n  context 'accessor config' do\n    let(:config) { ACCESSOR_CONFIG }\n    let(:counter) { registry.get(:accessor_foo) }\n\n    it 'expands accessor with record values' do\n      expect(registry.metrics.map(&:name)).to eq([:accessor_foo])\n",
                    "rendered": {
                      "text": "\n  context 'accessor config' do\n    let(:config) { ACCESSOR_CONFIG }\n    let(:counter) { registry.get(:accessor_foo) }\n\n    it 'expands accessor with record values' do\n      expect(registry.metrics.map(&:name)).to eq([:accessor_foo])\n",
                      "markdown": "`\n  context 'accessor config' do\n    let(:config) { ACCESSOR_CONFIG }\n    let(:counter) { registry.get(:accessor_foo) }\n\n    it 'expands accessor with record values' do\n      expect(registry.metrics.map(&:name)).to eq([:accessor_foo])\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 347,
                  "startColumn": 28,
                  "endLine": 347,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n  context 'placeholder config' do\n    let(:config) { PLACEHOLDER_CONFIG }\n    let(:counter) { registry.get(:placeholder_foo) }\n\n    it 'expands placeholders with record values' do\n      expect(registry.metrics.map(&:name)).to eq([:placeholder_foo])\n",
                    "rendered": {
                      "text": "\n  context 'placeholder config' do\n    let(:config) { PLACEHOLDER_CONFIG }\n    let(:counter) { registry.get(:placeholder_foo) }\n\n    it 'expands placeholders with record values' do\n      expect(registry.metrics.map(&:name)).to eq([:placeholder_foo])\n",
                      "markdown": "`\n  context 'placeholder config' do\n    let(:config) { PLACEHOLDER_CONFIG }\n    let(:counter) { registry.get(:placeholder_foo) }\n\n    it 'expands placeholders with record values' do\n      expect(registry.metrics.map(&:name)).to eq([:placeholder_foo])\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 341,
                  "startColumn": 22,
                  "endLine": 341,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n      expect(histogram.type).to eq(:histogram)\n      expect(histogram.get(labels: {test_key: 'test_value', key: 'foo4'})).to be_kind_of(Hash)\n      expect(histogram.get(labels: {test_key: 'test_value', key: 'foo4'})[\"10\"]).to eq(5) # 4 + `es` in before\n    end\n  end\n\n",
                    "rendered": {
                      "text": "\n      expect(histogram.type).to eq(:histogram)\n      expect(histogram.get(labels: {test_key: 'test_value', key: 'foo4'})).to be_kind_of(Hash)\n      expect(histogram.get(labels: {test_key: 'test_value', key: 'foo4'})[\"10\"]).to eq(5) # 4 + `es` in before\n    end\n  end\n\n",
                      "markdown": "`\n      expect(histogram.type).to eq(:histogram)\n      expect(histogram.get(labels: {test_key: 'test_value', key: 'foo4'})).to be_kind_of(Hash)\n      expect(histogram.get(labels: {test_key: 'test_value', key: 'foo4'})[\"10\"]).to eq(5) # 4 + `es` in before\n    end\n  end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 340,
                  "startColumn": 22,
                  "endLine": 340,
                  "endColumn": 27,
                  "snippet": {
                    "text": "      end\n\n      expect(histogram.type).to eq(:histogram)\n      expect(histogram.get(labels: {test_key: 'test_value', key: 'foo4'})).to be_kind_of(Hash)\n      expect(histogram.get(labels: {test_key: 'test_value', key: 'foo4'})[\"10\"]).to eq(5) # 4 + `es` in before\n    end\n  end\n",
                    "rendered": {
                      "text": "      end\n\n      expect(histogram.type).to eq(:histogram)\n      expect(histogram.get(labels: {test_key: 'test_value', key: 'foo4'})).to be_kind_of(Hash)\n      expect(histogram.get(labels: {test_key: 'test_value', key: 'foo4'})[\"10\"]).to eq(5) # 4 + `es` in before\n    end\n  end\n",
                      "markdown": "`      end\n\n      expect(histogram.type).to eq(:histogram)\n      expect(histogram.get(labels: {test_key: 'test_value', key: 'foo4'})).to be_kind_of(Hash)\n      expect(histogram.get(labels: {test_key: 'test_value', key: 'foo4'})[\"10\"]).to eq(5) # 4 + `es` in before\n    end\n  end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 331,
                  "startColumn": 34,
                  "endLine": 331,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    it 'instruments summary metric' do\n      expect(summary.type).to eq(:summary)\n      expect(summary.get(labels: {test_key: 'test_value', key: 'foo3'})).to be_kind_of(Hash)\n      expect(summary_with_accessor.get(labels: {test_key: 'test_value', key: 'foo5'})[\"sum\"]).to eq(100)\n    end\n\n    it 'instruments histogram metric' do\n",
                    "rendered": {
                      "text": "    it 'instruments summary metric' do\n      expect(summary.type).to eq(:summary)\n      expect(summary.get(labels: {test_key: 'test_value', key: 'foo3'})).to be_kind_of(Hash)\n      expect(summary_with_accessor.get(labels: {test_key: 'test_value', key: 'foo5'})[\"sum\"]).to eq(100)\n    end\n\n    it 'instruments histogram metric' do\n",
                      "markdown": "`    it 'instruments summary metric' do\n      expect(summary.type).to eq(:summary)\n      expect(summary.get(labels: {test_key: 'test_value', key: 'foo3'})).to be_kind_of(Hash)\n      expect(summary_with_accessor.get(labels: {test_key: 'test_value', key: 'foo5'})[\"sum\"]).to eq(100)\n    end\n\n    it 'instruments histogram metric' do\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 330,
                  "startColumn": 20,
                  "endLine": 330,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n    it 'instruments summary metric' do\n      expect(summary.type).to eq(:summary)\n      expect(summary.get(labels: {test_key: 'test_value', key: 'foo3'})).to be_kind_of(Hash)\n      expect(summary_with_accessor.get(labels: {test_key: 'test_value', key: 'foo5'})[\"sum\"]).to eq(100)\n    end\n\n",
                    "rendered": {
                      "text": "\n    it 'instruments summary metric' do\n      expect(summary.type).to eq(:summary)\n      expect(summary.get(labels: {test_key: 'test_value', key: 'foo3'})).to be_kind_of(Hash)\n      expect(summary_with_accessor.get(labels: {test_key: 'test_value', key: 'foo5'})[\"sum\"]).to eq(100)\n    end\n\n",
                      "markdown": "`\n    it 'instruments summary metric' do\n      expect(summary.type).to eq(:summary)\n      expect(summary.get(labels: {test_key: 'test_value', key: 'foo3'})).to be_kind_of(Hash)\n      expect(summary_with_accessor.get(labels: {test_key: 'test_value', key: 'foo5'})[\"sum\"]).to eq(100)\n    end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 18,
                  "endLine": 325,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n    it 'instruments gauge metric' do\n      expect(gauge.type).to eq(:gauge)\n      expect(gauge.get(labels: {test_key: 'test_value', key: 'foo2'})).to eq(100)\n    end\n\n    it 'instruments summary metric' do\n",
                    "rendered": {
                      "text": "\n    it 'instruments gauge metric' do\n      expect(gauge.type).to eq(:gauge)\n      expect(gauge.get(labels: {test_key: 'test_value', key: 'foo2'})).to eq(100)\n    end\n\n    it 'instruments summary metric' do\n",
                      "markdown": "`\n    it 'instruments gauge metric' do\n      expect(gauge.type).to eq(:gauge)\n      expect(gauge.get(labels: {test_key: 'test_value', key: 'foo2'})).to eq(100)\n    end\n\n    it 'instruments summary metric' do\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 320,
                  "startColumn": 39,
                  "endLine": 320,
                  "endColumn": 44,
                  "snippet": {
                    "text": "      expect(counter.type).to eq(:counter)\n      expect(counter.get(labels: {test_key: 'test_value', key: 'foo1'})).to be_kind_of(Numeric)\n      expect(counter_with_accessor.get(labels: {test_key: 'test_value', key: 'foo6'})).to be_kind_of(Numeric)\n      expect(counter_with_two_accessors.get(labels: {test_key: 'test_value', key: 'foo6', key2: 'foo7', key3: 'footix'})).to be_kind_of(Numeric)\n    end\n\n    it 'instruments gauge metric' do\n",
                    "rendered": {
                      "text": "      expect(counter.type).to eq(:counter)\n      expect(counter.get(labels: {test_key: 'test_value', key: 'foo1'})).to be_kind_of(Numeric)\n      expect(counter_with_accessor.get(labels: {test_key: 'test_value', key: 'foo6'})).to be_kind_of(Numeric)\n      expect(counter_with_two_accessors.get(labels: {test_key: 'test_value', key: 'foo6', key2: 'foo7', key3: 'footix'})).to be_kind_of(Numeric)\n    end\n\n    it 'instruments gauge metric' do\n",
                      "markdown": "`      expect(counter.type).to eq(:counter)\n      expect(counter.get(labels: {test_key: 'test_value', key: 'foo1'})).to be_kind_of(Numeric)\n      expect(counter_with_accessor.get(labels: {test_key: 'test_value', key: 'foo6'})).to be_kind_of(Numeric)\n      expect(counter_with_two_accessors.get(labels: {test_key: 'test_value', key: 'foo6', key2: 'foo7', key3: 'footix'})).to be_kind_of(Numeric)\n    end\n\n    it 'instruments gauge metric' do\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 319,
                  "startColumn": 34,
                  "endLine": 319,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    it 'instruments counter metric' do\n      expect(counter.type).to eq(:counter)\n      expect(counter.get(labels: {test_key: 'test_value', key: 'foo1'})).to be_kind_of(Numeric)\n      expect(counter_with_accessor.get(labels: {test_key: 'test_value', key: 'foo6'})).to be_kind_of(Numeric)\n      expect(counter_with_two_accessors.get(labels: {test_key: 'test_value', key: 'foo6', key2: 'foo7', key3: 'footix'})).to be_kind_of(Numeric)\n    end\n\n",
                    "rendered": {
                      "text": "    it 'instruments counter metric' do\n      expect(counter.type).to eq(:counter)\n      expect(counter.get(labels: {test_key: 'test_value', key: 'foo1'})).to be_kind_of(Numeric)\n      expect(counter_with_accessor.get(labels: {test_key: 'test_value', key: 'foo6'})).to be_kind_of(Numeric)\n      expect(counter_with_two_accessors.get(labels: {test_key: 'test_value', key: 'foo6', key2: 'foo7', key3: 'footix'})).to be_kind_of(Numeric)\n    end\n\n",
                      "markdown": "`    it 'instruments counter metric' do\n      expect(counter.type).to eq(:counter)\n      expect(counter.get(labels: {test_key: 'test_value', key: 'foo1'})).to be_kind_of(Numeric)\n      expect(counter_with_accessor.get(labels: {test_key: 'test_value', key: 'foo6'})).to be_kind_of(Numeric)\n      expect(counter_with_two_accessors.get(labels: {test_key: 'test_value', key: 'foo6', key2: 'foo7', key3: 'footix'})).to be_kind_of(Numeric)\n    end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 20,
                  "endLine": 318,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n    it 'instruments counter metric' do\n      expect(counter.type).to eq(:counter)\n      expect(counter.get(labels: {test_key: 'test_value', key: 'foo1'})).to be_kind_of(Numeric)\n      expect(counter_with_accessor.get(labels: {test_key: 'test_value', key: 'foo6'})).to be_kind_of(Numeric)\n      expect(counter_with_two_accessors.get(labels: {test_key: 'test_value', key: 'foo6', key2: 'foo7', key3: 'footix'})).to be_kind_of(Numeric)\n    end\n",
                    "rendered": {
                      "text": "\n    it 'instruments counter metric' do\n      expect(counter.type).to eq(:counter)\n      expect(counter.get(labels: {test_key: 'test_value', key: 'foo1'})).to be_kind_of(Numeric)\n      expect(counter_with_accessor.get(labels: {test_key: 'test_value', key: 'foo6'})).to be_kind_of(Numeric)\n      expect(counter_with_two_accessors.get(labels: {test_key: 'test_value', key: 'foo6', key2: 'foo7', key3: 'footix'})).to be_kind_of(Numeric)\n    end\n",
                      "markdown": "`\n    it 'instruments counter metric' do\n      expect(counter.type).to eq(:counter)\n      expect(counter.get(labels: {test_key: 'test_value', key: 'foo1'})).to be_kind_of(Numeric)\n      expect(counter_with_accessor.get(labels: {test_key: 'test_value', key: 'foo6'})).to be_kind_of(Numeric)\n      expect(counter_with_two_accessors.get(labels: {test_key: 'test_value', key: 'foo6', key2: 'foo7', key3: 'footix'})).to be_kind_of(Numeric)\n    end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 47,
                  "endLine": 303,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    let(:histogram) { registry.get(:full_qux) }\n    let(:summary_with_accessor) { registry.get(:full_accessor1) }\n    let(:counter_with_accessor) { registry.get(:full_accessor2) }\n    let(:counter_with_two_accessors) { registry.get(:full_accessor3) }\n\n    it 'adds all metrics' do\n      expect(registry.metrics.map(&:name)).to eq(%i[full_foo full_bar full_baz full_qux full_accessor1 full_accessor2 full_accessor3])\n",
                    "rendered": {
                      "text": "    let(:histogram) { registry.get(:full_qux) }\n    let(:summary_with_accessor) { registry.get(:full_accessor1) }\n    let(:counter_with_accessor) { registry.get(:full_accessor2) }\n    let(:counter_with_two_accessors) { registry.get(:full_accessor3) }\n\n    it 'adds all metrics' do\n      expect(registry.metrics.map(&:name)).to eq(%i[full_foo full_bar full_baz full_qux full_accessor1 full_accessor2 full_accessor3])\n",
                      "markdown": "`    let(:histogram) { registry.get(:full_qux) }\n    let(:summary_with_accessor) { registry.get(:full_accessor1) }\n    let(:counter_with_accessor) { registry.get(:full_accessor2) }\n    let(:counter_with_two_accessors) { registry.get(:full_accessor3) }\n\n    it 'adds all metrics' do\n      expect(registry.metrics.map(&:name)).to eq(%i[full_foo full_bar full_baz full_qux full_accessor1 full_accessor2 full_accessor3])\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 302,
                  "startColumn": 42,
                  "endLine": 302,
                  "endColumn": 47,
                  "snippet": {
                    "text": "    let(:summary) { registry.get(:full_baz) }\n    let(:histogram) { registry.get(:full_qux) }\n    let(:summary_with_accessor) { registry.get(:full_accessor1) }\n    let(:counter_with_accessor) { registry.get(:full_accessor2) }\n    let(:counter_with_two_accessors) { registry.get(:full_accessor3) }\n\n    it 'adds all metrics' do\n",
                    "rendered": {
                      "text": "    let(:summary) { registry.get(:full_baz) }\n    let(:histogram) { registry.get(:full_qux) }\n    let(:summary_with_accessor) { registry.get(:full_accessor1) }\n    let(:counter_with_accessor) { registry.get(:full_accessor2) }\n    let(:counter_with_two_accessors) { registry.get(:full_accessor3) }\n\n    it 'adds all metrics' do\n",
                      "markdown": "`    let(:summary) { registry.get(:full_baz) }\n    let(:histogram) { registry.get(:full_qux) }\n    let(:summary_with_accessor) { registry.get(:full_accessor1) }\n    let(:counter_with_accessor) { registry.get(:full_accessor2) }\n    let(:counter_with_two_accessors) { registry.get(:full_accessor3) }\n\n    it 'adds all metrics' do\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 301,
                  "startColumn": 42,
                  "endLine": 301,
                  "endColumn": 47,
                  "snippet": {
                    "text": "    let(:gauge) { registry.get(:full_bar) }\n    let(:summary) { registry.get(:full_baz) }\n    let(:histogram) { registry.get(:full_qux) }\n    let(:summary_with_accessor) { registry.get(:full_accessor1) }\n    let(:counter_with_accessor) { registry.get(:full_accessor2) }\n    let(:counter_with_two_accessors) { registry.get(:full_accessor3) }\n\n",
                    "rendered": {
                      "text": "    let(:gauge) { registry.get(:full_bar) }\n    let(:summary) { registry.get(:full_baz) }\n    let(:histogram) { registry.get(:full_qux) }\n    let(:summary_with_accessor) { registry.get(:full_accessor1) }\n    let(:counter_with_accessor) { registry.get(:full_accessor2) }\n    let(:counter_with_two_accessors) { registry.get(:full_accessor3) }\n\n",
                      "markdown": "`    let(:gauge) { registry.get(:full_bar) }\n    let(:summary) { registry.get(:full_baz) }\n    let(:histogram) { registry.get(:full_qux) }\n    let(:summary_with_accessor) { registry.get(:full_accessor1) }\n    let(:counter_with_accessor) { registry.get(:full_accessor2) }\n    let(:counter_with_two_accessors) { registry.get(:full_accessor3) }\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 300,
                  "startColumn": 30,
                  "endLine": 300,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    let(:counter) { registry.get(:full_foo) }\n    let(:gauge) { registry.get(:full_bar) }\n    let(:summary) { registry.get(:full_baz) }\n    let(:histogram) { registry.get(:full_qux) }\n    let(:summary_with_accessor) { registry.get(:full_accessor1) }\n    let(:counter_with_accessor) { registry.get(:full_accessor2) }\n    let(:counter_with_two_accessors) { registry.get(:full_accessor3) }\n",
                    "rendered": {
                      "text": "    let(:counter) { registry.get(:full_foo) }\n    let(:gauge) { registry.get(:full_bar) }\n    let(:summary) { registry.get(:full_baz) }\n    let(:histogram) { registry.get(:full_qux) }\n    let(:summary_with_accessor) { registry.get(:full_accessor1) }\n    let(:counter_with_accessor) { registry.get(:full_accessor2) }\n    let(:counter_with_two_accessors) { registry.get(:full_accessor3) }\n",
                      "markdown": "`    let(:counter) { registry.get(:full_foo) }\n    let(:gauge) { registry.get(:full_bar) }\n    let(:summary) { registry.get(:full_baz) }\n    let(:histogram) { registry.get(:full_qux) }\n    let(:summary_with_accessor) { registry.get(:full_accessor1) }\n    let(:counter_with_accessor) { registry.get(:full_accessor2) }\n    let(:counter_with_two_accessors) { registry.get(:full_accessor3) }\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 299,
                  "startColumn": 28,
                  "endLine": 299,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    let(:config) { FULL_CONFIG }\n    let(:counter) { registry.get(:full_foo) }\n    let(:gauge) { registry.get(:full_bar) }\n    let(:summary) { registry.get(:full_baz) }\n    let(:histogram) { registry.get(:full_qux) }\n    let(:summary_with_accessor) { registry.get(:full_accessor1) }\n    let(:counter_with_accessor) { registry.get(:full_accessor2) }\n",
                    "rendered": {
                      "text": "    let(:config) { FULL_CONFIG }\n    let(:counter) { registry.get(:full_foo) }\n    let(:gauge) { registry.get(:full_bar) }\n    let(:summary) { registry.get(:full_baz) }\n    let(:histogram) { registry.get(:full_qux) }\n    let(:summary_with_accessor) { registry.get(:full_accessor1) }\n    let(:counter_with_accessor) { registry.get(:full_accessor2) }\n",
                      "markdown": "`    let(:config) { FULL_CONFIG }\n    let(:counter) { registry.get(:full_foo) }\n    let(:gauge) { registry.get(:full_bar) }\n    let(:summary) { registry.get(:full_baz) }\n    let(:histogram) { registry.get(:full_qux) }\n    let(:summary_with_accessor) { registry.get(:full_accessor1) }\n    let(:counter_with_accessor) { registry.get(:full_accessor2) }\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 298,
                  "startColumn": 26,
                  "endLine": 298,
                  "endColumn": 31,
                  "snippet": {
                    "text": "  context 'full config' do\n    let(:config) { FULL_CONFIG }\n    let(:counter) { registry.get(:full_foo) }\n    let(:gauge) { registry.get(:full_bar) }\n    let(:summary) { registry.get(:full_baz) }\n    let(:histogram) { registry.get(:full_qux) }\n    let(:summary_with_accessor) { registry.get(:full_accessor1) }\n",
                    "rendered": {
                      "text": "  context 'full config' do\n    let(:config) { FULL_CONFIG }\n    let(:counter) { registry.get(:full_foo) }\n    let(:gauge) { registry.get(:full_bar) }\n    let(:summary) { registry.get(:full_baz) }\n    let(:histogram) { registry.get(:full_qux) }\n    let(:summary_with_accessor) { registry.get(:full_accessor1) }\n",
                      "markdown": "`  context 'full config' do\n    let(:config) { FULL_CONFIG }\n    let(:counter) { registry.get(:full_foo) }\n    let(:gauge) { registry.get(:full_bar) }\n    let(:summary) { registry.get(:full_baz) }\n    let(:histogram) { registry.get(:full_qux) }\n    let(:summary_with_accessor) { registry.get(:full_accessor1) }\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 28,
                  "endLine": 297,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n  context 'full config' do\n    let(:config) { FULL_CONFIG }\n    let(:counter) { registry.get(:full_foo) }\n    let(:gauge) { registry.get(:full_bar) }\n    let(:summary) { registry.get(:full_baz) }\n    let(:histogram) { registry.get(:full_qux) }\n",
                    "rendered": {
                      "text": "\n  context 'full config' do\n    let(:config) { FULL_CONFIG }\n    let(:counter) { registry.get(:full_foo) }\n    let(:gauge) { registry.get(:full_bar) }\n    let(:summary) { registry.get(:full_baz) }\n    let(:histogram) { registry.get(:full_qux) }\n",
                      "markdown": "`\n  context 'full config' do\n    let(:config) { FULL_CONFIG }\n    let(:counter) { registry.get(:full_foo) }\n    let(:gauge) { registry.get(:full_bar) }\n    let(:summary) { registry.get(:full_baz) }\n    let(:histogram) { registry.get(:full_qux) }\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 442,
                  "startColumn": 18,
                  "endLine": 442,
                  "endColumn": 26,
                  "snippet": {
                    "text": "      expect(key[:foo2]).to eq(\"foo2\")\n      expect(key[:hostname]).to be_kind_of(String)\n      expect(key[:hostname]).not_to eq(\"${hostname}\")\n      expect(key[:hostname]).not_to be_empty\n      expect(key[:workerid]).to be_kind_of(String)\n      expect(key[:workerid]).not_to eq(\"${worker_id}\")\n      expect(key[:workerid]).not_to be_empty\n",
                    "rendered": {
                      "text": "      expect(key[:foo2]).to eq(\"foo2\")\n      expect(key[:hostname]).to be_kind_of(String)\n      expect(key[:hostname]).not_to eq(\"${hostname}\")\n      expect(key[:hostname]).not_to be_empty\n      expect(key[:workerid]).to be_kind_of(String)\n      expect(key[:workerid]).not_to eq(\"${worker_id}\")\n      expect(key[:workerid]).not_to be_empty\n",
                      "markdown": "`      expect(key[:foo2]).to eq(\"foo2\")\n      expect(key[:hostname]).to be_kind_of(String)\n      expect(key[:hostname]).not_to eq(\"${hostname}\")\n      expect(key[:hostname]).not_to be_empty\n      expect(key[:workerid]).to be_kind_of(String)\n      expect(key[:workerid]).not_to eq(\"${worker_id}\")\n      expect(key[:workerid]).not_to be_empty\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 441,
                  "startColumn": 42,
                  "endLine": 441,
                  "endColumn": 50,
                  "snippet": {
                    "text": "      expect(key[:foo]).to eq(\"foo\")\n      expect(key[:foo2]).to eq(\"foo2\")\n      expect(key[:hostname]).to be_kind_of(String)\n      expect(key[:hostname]).not_to eq(\"${hostname}\")\n      expect(key[:hostname]).not_to be_empty\n      expect(key[:workerid]).to be_kind_of(String)\n      expect(key[:workerid]).not_to eq(\"${worker_id}\")\n",
                    "rendered": {
                      "text": "      expect(key[:foo]).to eq(\"foo\")\n      expect(key[:foo2]).to eq(\"foo2\")\n      expect(key[:hostname]).to be_kind_of(String)\n      expect(key[:hostname]).not_to eq(\"${hostname}\")\n      expect(key[:hostname]).not_to be_empty\n      expect(key[:workerid]).to be_kind_of(String)\n      expect(key[:workerid]).not_to eq(\"${worker_id}\")\n",
                      "markdown": "`      expect(key[:foo]).to eq(\"foo\")\n      expect(key[:foo2]).to eq(\"foo2\")\n      expect(key[:hostname]).to be_kind_of(String)\n      expect(key[:hostname]).not_to eq(\"${hostname}\")\n      expect(key[:hostname]).not_to be_empty\n      expect(key[:workerid]).to be_kind_of(String)\n      expect(key[:workerid]).not_to eq(\"${worker_id}\")\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 441,
                  "startColumn": 18,
                  "endLine": 441,
                  "endColumn": 26,
                  "snippet": {
                    "text": "      expect(key[:foo]).to eq(\"foo\")\n      expect(key[:foo2]).to eq(\"foo2\")\n      expect(key[:hostname]).to be_kind_of(String)\n      expect(key[:hostname]).not_to eq(\"${hostname}\")\n      expect(key[:hostname]).not_to be_empty\n      expect(key[:workerid]).to be_kind_of(String)\n      expect(key[:workerid]).not_to eq(\"${worker_id}\")\n",
                    "rendered": {
                      "text": "      expect(key[:foo]).to eq(\"foo\")\n      expect(key[:foo2]).to eq(\"foo2\")\n      expect(key[:hostname]).to be_kind_of(String)\n      expect(key[:hostname]).not_to eq(\"${hostname}\")\n      expect(key[:hostname]).not_to be_empty\n      expect(key[:workerid]).to be_kind_of(String)\n      expect(key[:workerid]).not_to eq(\"${worker_id}\")\n",
                      "markdown": "`      expect(key[:foo]).to eq(\"foo\")\n      expect(key[:foo2]).to eq(\"foo2\")\n      expect(key[:hostname]).to be_kind_of(String)\n      expect(key[:hostname]).not_to eq(\"${hostname}\")\n      expect(key[:hostname]).not_to be_empty\n      expect(key[:workerid]).to be_kind_of(String)\n      expect(key[:workerid]).not_to eq(\"${worker_id}\")\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 440,
                  "startColumn": 18,
                  "endLine": 440,
                  "endColumn": 26,
                  "snippet": {
                    "text": "      expect(key).to be_kind_of(Hash)\n      expect(key[:foo]).to eq(\"foo\")\n      expect(key[:foo2]).to eq(\"foo2\")\n      expect(key[:hostname]).to be_kind_of(String)\n      expect(key[:hostname]).not_to eq(\"${hostname}\")\n      expect(key[:hostname]).not_to be_empty\n      expect(key[:workerid]).to be_kind_of(String)\n",
                    "rendered": {
                      "text": "      expect(key).to be_kind_of(Hash)\n      expect(key[:foo]).to eq(\"foo\")\n      expect(key[:foo2]).to eq(\"foo2\")\n      expect(key[:hostname]).to be_kind_of(String)\n      expect(key[:hostname]).not_to eq(\"${hostname}\")\n      expect(key[:hostname]).not_to be_empty\n      expect(key[:workerid]).to be_kind_of(String)\n",
                      "markdown": "`      expect(key).to be_kind_of(Hash)\n      expect(key[:foo]).to eq(\"foo\")\n      expect(key[:foo2]).to eq(\"foo2\")\n      expect(key[:hostname]).to be_kind_of(String)\n      expect(key[:hostname]).not_to eq(\"${hostname}\")\n      expect(key[:hostname]).not_to be_empty\n      expect(key[:workerid]).to be_kind_of(String)\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 357,
                  "startColumn": 18,
                  "endLine": 357,
                  "endColumn": 26,
                  "snippet": {
                    "text": "      expect(key[:tag]).to eq(tag)\n      expect(key[:hostname]).to be_kind_of(String)\n      expect(key[:hostname]).not_to eq(\"${hostname}\")\n      expect(key[:hostname]).not_to be_empty\n      expect(key[:foo]).to eq(\"100\")\n    end\n  end\n",
                    "rendered": {
                      "text": "      expect(key[:tag]).to eq(tag)\n      expect(key[:hostname]).to be_kind_of(String)\n      expect(key[:hostname]).not_to eq(\"${hostname}\")\n      expect(key[:hostname]).not_to be_empty\n      expect(key[:foo]).to eq(\"100\")\n    end\n  end\n",
                      "markdown": "`      expect(key[:tag]).to eq(tag)\n      expect(key[:hostname]).to be_kind_of(String)\n      expect(key[:hostname]).not_to eq(\"${hostname}\")\n      expect(key[:hostname]).not_to be_empty\n      expect(key[:foo]).to eq(\"100\")\n    end\n  end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 356,
                  "startColumn": 42,
                  "endLine": 356,
                  "endColumn": 50,
                  "snippet": {
                    "text": "      expect(key).to be_kind_of(Hash)\n      expect(key[:tag]).to eq(tag)\n      expect(key[:hostname]).to be_kind_of(String)\n      expect(key[:hostname]).not_to eq(\"${hostname}\")\n      expect(key[:hostname]).not_to be_empty\n      expect(key[:foo]).to eq(\"100\")\n    end\n",
                    "rendered": {
                      "text": "      expect(key).to be_kind_of(Hash)\n      expect(key[:tag]).to eq(tag)\n      expect(key[:hostname]).to be_kind_of(String)\n      expect(key[:hostname]).not_to eq(\"${hostname}\")\n      expect(key[:hostname]).not_to be_empty\n      expect(key[:foo]).to eq(\"100\")\n    end\n",
                      "markdown": "`      expect(key).to be_kind_of(Hash)\n      expect(key[:tag]).to eq(tag)\n      expect(key[:hostname]).to be_kind_of(String)\n      expect(key[:hostname]).not_to eq(\"${hostname}\")\n      expect(key[:hostname]).not_to be_empty\n      expect(key[:foo]).to eq(\"100\")\n    end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 356,
                  "startColumn": 18,
                  "endLine": 356,
                  "endColumn": 26,
                  "snippet": {
                    "text": "      expect(key).to be_kind_of(Hash)\n      expect(key[:tag]).to eq(tag)\n      expect(key[:hostname]).to be_kind_of(String)\n      expect(key[:hostname]).not_to eq(\"${hostname}\")\n      expect(key[:hostname]).not_to be_empty\n      expect(key[:foo]).to eq(\"100\")\n    end\n",
                    "rendered": {
                      "text": "      expect(key).to be_kind_of(Hash)\n      expect(key[:tag]).to eq(tag)\n      expect(key[:hostname]).to be_kind_of(String)\n      expect(key[:hostname]).not_to eq(\"${hostname}\")\n      expect(key[:hostname]).not_to be_empty\n      expect(key[:foo]).to eq(\"100\")\n    end\n",
                      "markdown": "`      expect(key).to be_kind_of(Hash)\n      expect(key[:tag]).to eq(tag)\n      expect(key[:hostname]).to be_kind_of(String)\n      expect(key[:hostname]).not_to eq(\"${hostname}\")\n      expect(key[:hostname]).not_to be_empty\n      expect(key[:foo]).to eq(\"100\")\n    end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 355,
                  "startColumn": 18,
                  "endLine": 355,
                  "endColumn": 26,
                  "snippet": {
                    "text": "      key, _ = counter.values.find {|k,v| v ==  100 }\n      expect(key).to be_kind_of(Hash)\n      expect(key[:tag]).to eq(tag)\n      expect(key[:hostname]).to be_kind_of(String)\n      expect(key[:hostname]).not_to eq(\"${hostname}\")\n      expect(key[:hostname]).not_to be_empty\n      expect(key[:foo]).to eq(\"100\")\n",
                    "rendered": {
                      "text": "      key, _ = counter.values.find {|k,v| v ==  100 }\n      expect(key).to be_kind_of(Hash)\n      expect(key[:tag]).to eq(tag)\n      expect(key[:hostname]).to be_kind_of(String)\n      expect(key[:hostname]).not_to eq(\"${hostname}\")\n      expect(key[:hostname]).not_to be_empty\n      expect(key[:foo]).to eq(\"100\")\n",
                      "markdown": "`      key, _ = counter.values.find {|k,v| v ==  100 }\n      expect(key).to be_kind_of(Hash)\n      expect(key[:tag]).to eq(tag)\n      expect(key[:hostname]).to be_kind_of(String)\n      expect(key[:hostname]).not_to eq(\"${hostname}\")\n      expect(key[:hostname]).not_to be_empty\n      expect(key[:foo]).to eq(\"100\")\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 15,
                  "endLine": 117,
                  "endColumn": 23,
                  "snippet": {
                    "text": "  </metric>\n  <labels>\n    tag ${tag}\n    hostname ${hostname}\n    workerid ${worker_id}\n  </labels>\n]\n",
                    "rendered": {
                      "text": "  </metric>\n  <labels>\n    tag ${tag}\n    hostname ${hostname}\n    workerid ${worker_id}\n  </labels>\n]\n",
                      "markdown": "`  </metric>\n  <labels>\n    tag ${tag}\n    hostname ${hostname}\n    workerid ${worker_id}\n  </labels>\n]\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 4,
                  "endLine": 117,
                  "endColumn": 12,
                  "snippet": {
                    "text": "  </metric>\n  <labels>\n    tag ${tag}\n    hostname ${hostname}\n    workerid ${worker_id}\n  </labels>\n]\n",
                    "rendered": {
                      "text": "  </metric>\n  <labels>\n    tag ${tag}\n    hostname ${hostname}\n    workerid ${worker_id}\n  </labels>\n]\n",
                      "markdown": "`  </metric>\n  <labels>\n    tag ${tag}\n    hostname ${hostname}\n    workerid ${worker_id}\n  </labels>\n]\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 286,
                  "startColumn": 8,
                  "endLine": 286,
                  "endColumn": 16,
                  "snippet": {
                    "text": "      </metric>\n      ]\n    end\n    it { expect { driver }.to raise_error(Fluent::ConfigError) }\n  end\nend\n\n",
                    "rendered": {
                      "text": "      </metric>\n      ]\n    end\n    it { expect { driver }.to raise_error(Fluent::ConfigError) }\n  end\nend\n\n",
                      "markdown": "`      </metric>\n      ]\n    end\n    it { expect { driver }.to raise_error(Fluent::ConfigError) }\n  end\nend\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 265,
                  "startColumn": 8,
                  "endLine": 265,
                  "endColumn": 16,
                  "snippet": {
                    "text": "      </metric>\n      ]\n    end\n    it { expect { driver }.to raise_error(Fluent::ConfigError) }\n  end\n\n  context 'with non-matching label keys set in <initlabels>' do\n",
                    "rendered": {
                      "text": "      </metric>\n      ]\n    end\n    it { expect { driver }.to raise_error(Fluent::ConfigError) }\n  end\n\n  context 'with non-matching label keys set in <initlabels>' do\n",
                      "markdown": "`      </metric>\n      ]\n    end\n    it { expect { driver }.to raise_error(Fluent::ConfigError) }\n  end\n\n  context 'with non-matching label keys set in <initlabels>' do\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 8,
                  "endLine": 242,
                  "endColumn": 16,
                  "snippet": {
                    "text": "      </metric>\n      ]\n    end\n    it { expect { driver }.to raise_error(Fluent::ConfigError) }\n  end\n\n  context 'with non RecordAccessor label set in <initlabels>' do\n",
                    "rendered": {
                      "text": "      </metric>\n      ]\n    end\n    it { expect { driver }.to raise_error(Fluent::ConfigError) }\n  end\n\n  context 'with non RecordAccessor label set in <initlabels>' do\n",
                      "markdown": "`      </metric>\n      ]\n    end\n    it { expect { driver }.to raise_error(Fluent::ConfigError) }\n  end\n\n  context 'with non RecordAccessor label set in <initlabels>' do\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 8,
                  "endLine": 221,
                  "endColumn": 16,
                  "snippet": {
                    "text": "      </metric>\n      ]\n    end\n    it { expect { driver }.to raise_error(Fluent::ConfigError) }\n  end\n\n  context 'with PlaceHolder set in <initlabels>' do\n",
                    "rendered": {
                      "text": "      </metric>\n      ]\n    end\n    it { expect { driver }.to raise_error(Fluent::ConfigError) }\n  end\n\n  context 'with PlaceHolder set in <initlabels>' do\n",
                      "markdown": "`      </metric>\n      ]\n    end\n    it { expect { driver }.to raise_error(Fluent::ConfigError) }\n  end\n\n  context 'with PlaceHolder set in <initlabels>' do\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 8,
                  "endLine": 200,
                  "endColumn": 16,
                  "snippet": {
                    "text": "      </metric>\n      ]\n    end\n    it { expect { driver }.to raise_error(Fluent::ConfigError) }\n  end\n\n  context 'with RecordAccessor set in <initlabels>' do\n",
                    "rendered": {
                      "text": "      </metric>\n      ]\n    end\n    it { expect { driver }.to raise_error(Fluent::ConfigError) }\n  end\n\n  context 'with RecordAccessor set in <initlabels>' do\n",
                      "markdown": "`      </metric>\n      ]\n    end\n    it { expect { driver }.to raise_error(Fluent::ConfigError) }\n  end\n\n  context 'with RecordAccessor set in <initlabels>' do\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 8,
                  "endLine": 181,
                  "endColumn": 16,
                  "snippet": {
                    "text": "      </metric>\n      ]\n    end\n    it { expect { driver }.to raise_error(Fluent::ConfigError) }\n  end\n\n\n",
                    "rendered": {
                      "text": "      </metric>\n      ]\n    end\n    it { expect { driver }.to raise_error(Fluent::ConfigError) }\n  end\n\n\n",
                      "markdown": "`      </metric>\n      ]\n    end\n    it { expect { driver }.to raise_error(Fluent::ConfigError) }\n  end\n\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 8,
                  "endLine": 170,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\n  describe 'with counter without key configuration' do\n    let(:config) { COUNTER_WITHOUT_KEY_CONFIG }\n    it { expect { driver }.not_to raise_error }\n  end\n\n  context 'with unknown type' do\n",
                    "rendered": {
                      "text": "\n  describe 'with counter without key configuration' do\n    let(:config) { COUNTER_WITHOUT_KEY_CONFIG }\n    it { expect { driver }.not_to raise_error }\n  end\n\n  context 'with unknown type' do\n",
                      "markdown": "`\n  describe 'with counter without key configuration' do\n    let(:config) { COUNTER_WITHOUT_KEY_CONFIG }\n    it { expect { driver }.not_to raise_error }\n  end\n\n  context 'with unknown type' do\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 8,
                  "endLine": 165,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\n  context 'with accessor configuration' do\n    let(:config) {  ACCESSOR_CONFIG }\n    it { expect { driver }.not_to raise_error }\n  end\n\n  describe 'with counter without key configuration' do\n",
                    "rendered": {
                      "text": "\n  context 'with accessor configuration' do\n    let(:config) {  ACCESSOR_CONFIG }\n    it { expect { driver }.not_to raise_error }\n  end\n\n  describe 'with counter without key configuration' do\n",
                      "markdown": "`\n  context 'with accessor configuration' do\n    let(:config) {  ACCESSOR_CONFIG }\n    it { expect { driver }.not_to raise_error }\n  end\n\n  describe 'with counter without key configuration' do\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 8,
                  "endLine": 160,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\n  context 'with placeholder configuration' do\n    let(:config) { PLACEHOLDER_CONFIG }\n    it { expect { driver }.not_to raise_error }\n  end\n\n  context 'with accessor configuration' do\n",
                    "rendered": {
                      "text": "\n  context 'with placeholder configuration' do\n    let(:config) { PLACEHOLDER_CONFIG }\n    it { expect { driver }.not_to raise_error }\n  end\n\n  context 'with accessor configuration' do\n",
                      "markdown": "`\n  context 'with placeholder configuration' do\n    let(:config) { PLACEHOLDER_CONFIG }\n    it { expect { driver }.not_to raise_error }\n  end\n\n  context 'with accessor configuration' do\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 8,
                  "endLine": 155,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\n  context 'with full configuration' do\n    let(:config) { FULL_CONFIG }\n    it { expect { driver }.not_to raise_error }\n  end\n\n  context 'with placeholder configuration' do\n",
                    "rendered": {
                      "text": "\n  context 'with full configuration' do\n    let(:config) { FULL_CONFIG }\n    it { expect { driver }.not_to raise_error }\n  end\n\n  context 'with placeholder configuration' do\n",
                      "markdown": "`\n  context 'with full configuration' do\n    let(:config) { FULL_CONFIG }\n    it { expect { driver }.not_to raise_error }\n  end\n\n  context 'with placeholder configuration' do\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 8,
                  "endLine": 150,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\n  context 'with simple configuration' do\n    let(:config) { SIMPLE_CONFIG }\n    it { expect { driver }.not_to raise_error }\n  end\n\n  context 'with full configuration' do\n",
                    "rendered": {
                      "text": "\n  context 'with simple configuration' do\n    let(:config) { SIMPLE_CONFIG }\n    it { expect { driver }.not_to raise_error }\n  end\n\n  context 'with full configuration' do\n",
                      "markdown": "`\n  context 'with simple configuration' do\n    let(:config) { SIMPLE_CONFIG }\n    it { expect { driver }.not_to raise_error }\n  end\n\n  context 'with full configuration' do\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/shared.rb"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 8,
                  "endLine": 145,
                  "endColumn": 16,
                  "snippet": {
                    "text": "shared_examples_for 'output configuration' do\n  context 'base config' do\n    let(:config) { BASE_CONFIG }\n    it { expect { driver }.not_to raise_error }\n  end\n\n  context 'with simple configuration' do\n",
                    "rendered": {
                      "text": "shared_examples_for 'output configuration' do\n  context 'base config' do\n    let(:config) { BASE_CONFIG }\n    it { expect { driver }.not_to raise_error }\n  end\n\n  context 'with simple configuration' do\n",
                      "markdown": "`shared_examples_for 'output configuration' do\n  context 'base config' do\n    let(:config) { BASE_CONFIG }\n    it { expect { driver }.not_to raise_error }\n  end\n\n  context 'with simple configuration' do\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/in_prometheus_spec.rb"
                },
                "region": {
                  "startLine": 273,
                  "startColumn": 24,
                  "endLine": 273,
                  "endColumn": 33,
                  "snippet": {
                    "text": "          driver.run(timeout: 1) do\n            Net::HTTP.start(\"127.0.0.1\", port) do |http|\n              req = Net::HTTP::Get.new(\"/metrics\")\n              res = http.request(req)\n              expect(res.code).to eq('200')\n            end\n          end\n",
                    "rendered": {
                      "text": "          driver.run(timeout: 1) do\n            Net::HTTP.start(\"127.0.0.1\", port) do |http|\n              req = Net::HTTP::Get.new(\"/metrics\")\n              res = http.request(req)\n              expect(res.code).to eq('200')\n            end\n          end\n",
                      "markdown": "`          driver.run(timeout: 1) do\n            Net::HTTP.start(\"127.0.0.1\", port) do |http|\n              req = Net::HTTP::Get.new(\"/metrics\")\n              res = http.request(req)\n              expect(res.code).to eq('200')\n            end\n          end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/in_prometheus_spec.rb"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 22,
                  "endLine": 249,
                  "endColumn": 31,
                  "snippet": {
                    "text": "          Net::HTTP.start(\"127.0.0.1\", port) do |http|\n            req = Net::HTTP::Get.new(\"/metrics\")\n            req['accept-encoding'] = nil\n            res = http.request(req)\n            gzip = Zlib::GzipReader.new(StringIO.new(res.body.to_s))\n            expect(gzip.read).to include(\"test Testing metrics\")\n          end\n",
                    "rendered": {
                      "text": "          Net::HTTP.start(\"127.0.0.1\", port) do |http|\n            req = Net::HTTP::Get.new(\"/metrics\")\n            req['accept-encoding'] = nil\n            res = http.request(req)\n            gzip = Zlib::GzipReader.new(StringIO.new(res.body.to_s))\n            expect(gzip.read).to include(\"test Testing metrics\")\n          end\n",
                      "markdown": "`          Net::HTTP.start(\"127.0.0.1\", port) do |http|\n            req = Net::HTTP::Get.new(\"/metrics\")\n            req['accept-encoding'] = nil\n            res = http.request(req)\n            gzip = Zlib::GzipReader.new(StringIO.new(res.body.to_s))\n            expect(gzip.read).to include(\"test Testing metrics\")\n          end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/in_prometheus_spec.rb"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 22,
                  "endLine": 231,
                  "endColumn": 31,
                  "snippet": {
                    "text": "          Net::HTTP.start(\"127.0.0.1\", port) do |http|\n            req = Net::HTTP::Get.new(\"/metrics\")\n            req['accept-encoding'] = nil\n            res = http.request(req)\n            expect(res.body).to include(\"test Testing metrics\")\n          end\n        end\n",
                    "rendered": {
                      "text": "          Net::HTTP.start(\"127.0.0.1\", port) do |http|\n            req = Net::HTTP::Get.new(\"/metrics\")\n            req['accept-encoding'] = nil\n            res = http.request(req)\n            expect(res.body).to include(\"test Testing metrics\")\n          end\n        end\n",
                      "markdown": "`          Net::HTTP.start(\"127.0.0.1\", port) do |http|\n            req = Net::HTTP::Get.new(\"/metrics\")\n            req['accept-encoding'] = nil\n            res = http.request(req)\n            expect(res.body).to include(\"test Testing metrics\")\n          end\n        end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/in_prometheus_spec.rb"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 22,
                  "endLine": 213,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        driver.run(timeout: 1) do\n          Net::HTTP.start(\"127.0.0.1\", port) do |http|\n            req = Net::HTTP::Get.new(\"/foo\")\n            res = http.request(req)\n            expect(res.code).not_to eq('200')\n          end\n        end\n",
                    "rendered": {
                      "text": "        driver.run(timeout: 1) do\n          Net::HTTP.start(\"127.0.0.1\", port) do |http|\n            req = Net::HTTP::Get.new(\"/foo\")\n            res = http.request(req)\n            expect(res.code).not_to eq('200')\n          end\n        end\n",
                      "markdown": "`        driver.run(timeout: 1) do\n          Net::HTTP.start(\"127.0.0.1\", port) do |http|\n            req = Net::HTTP::Get.new(\"/foo\")\n            res = http.request(req)\n            expect(res.code).not_to eq('200')\n          end\n        end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/in_prometheus_spec.rb"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 22,
                  "endLine": 200,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        driver.run(timeout: 1) do\n          Net::HTTP.start(\"127.0.0.1\", port) do |http|\n            req = Net::HTTP::Get.new(\"/metrics\")\n            res = http.request(req)\n            expect(res.code).to eq('200')\n          end\n        end\n",
                    "rendered": {
                      "text": "        driver.run(timeout: 1) do\n          Net::HTTP.start(\"127.0.0.1\", port) do |http|\n            req = Net::HTTP::Get.new(\"/metrics\")\n            res = http.request(req)\n            expect(res.code).to eq('200')\n          end\n        end\n",
                      "markdown": "`        driver.run(timeout: 1) do\n          Net::HTTP.start(\"127.0.0.1\", port) do |http|\n            req = Net::HTTP::Get.new(\"/metrics\")\n            res = http.request(req)\n            expect(res.code).to eq('200')\n          end\n        end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/in_prometheus_spec.rb"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 24,
                  "endLine": 114,
                  "endColumn": 33,
                  "snippet": {
                    "text": "          driver.run(timeout: 1) do\n            Net::HTTP.start('127.0.0.1', port, verify_mode: OpenSSL::SSL::VERIFY_NONE, use_ssl: true) do |http|\n              req = Net::HTTP::Get.new('/metrics')\n              res = http.request(req)\n              expect(res.code).to eq('200')\n            end\n          end\n",
                    "rendered": {
                      "text": "          driver.run(timeout: 1) do\n            Net::HTTP.start('127.0.0.1', port, verify_mode: OpenSSL::SSL::VERIFY_NONE, use_ssl: true) do |http|\n              req = Net::HTTP::Get.new('/metrics')\n              res = http.request(req)\n              expect(res.code).to eq('200')\n            end\n          end\n",
                      "markdown": "`          driver.run(timeout: 1) do\n            Net::HTTP.start('127.0.0.1', port, verify_mode: OpenSSL::SSL::VERIFY_NONE, use_ssl: true) do |http|\n              req = Net::HTTP::Get.new('/metrics')\n              res = http.request(req)\n              expect(res.code).to eq('200')\n            end\n          end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/in_prometheus_spec.rb"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 22,
                  "endLine": 85,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        driver.run(timeout: 1) do\n          Net::HTTP.start('127.0.0.1', port, verify_mode: OpenSSL::SSL::VERIFY_NONE, use_ssl: true) do |http|\n            req = Net::HTTP::Get.new('/metrics')\n            res = http.request(req)\n            expect(res.code).to eq('200')\n          end\n        end\n",
                    "rendered": {
                      "text": "        driver.run(timeout: 1) do\n          Net::HTTP.start('127.0.0.1', port, verify_mode: OpenSSL::SSL::VERIFY_NONE, use_ssl: true) do |http|\n            req = Net::HTTP::Get.new('/metrics')\n            res = http.request(req)\n            expect(res.code).to eq('200')\n          end\n        end\n",
                      "markdown": "`        driver.run(timeout: 1) do\n          Net::HTTP.start('127.0.0.1', port, verify_mode: OpenSSL::SSL::VERIFY_NONE, use_ssl: true) do |http|\n            req = Net::HTTP::Get.new('/metrics')\n            res = http.request(req)\n            expect(res.code).to eq('200')\n          end\n        end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/in_prometheus_spec.rb"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 107,
                  "endLine": 187,
                  "endColumn": 118,
                  "snippet": {
                    "text": "        end\n\n        it 'raises ConfigError' do\n          expect { driver.run(timeout: 1) }.to raise_error(Fluent::ConfigError, 'both certificate_path and private_key_path must be defined')\n        end\n      end\n    end\n",
                    "rendered": {
                      "text": "        end\n\n        it 'raises ConfigError' do\n          expect { driver.run(timeout: 1) }.to raise_error(Fluent::ConfigError, 'both certificate_path and private_key_path must be defined')\n        end\n      end\n    end\n",
                      "markdown": "`        end\n\n        it 'raises ConfigError' do\n          expect { driver.run(timeout: 1) }.to raise_error(Fluent::ConfigError, 'both certificate_path and private_key_path must be defined')\n        end\n      end\n    end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/in_prometheus_spec.rb"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 14,
                  "endLine": 181,
                  "endColumn": 25,
                  "snippet": {
                    "text": "            bind 127.0.0.1\n            <ssl>\n              enable true\n              private_key_path path\n            </ssl>\n           ]\n        end\n",
                    "rendered": {
                      "text": "            bind 127.0.0.1\n            <ssl>\n              enable true\n              private_key_path path\n            </ssl>\n           ]\n        end\n",
                      "markdown": "`            bind 127.0.0.1\n            <ssl>\n              enable true\n              private_key_path path\n            </ssl>\n           ]\n        end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/in_prometheus_spec.rb"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 25,
                  "endLine": 174,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        end\n      end\n\n      context 'when only private_key_path is geven' do\n        let(:config) do\n          %[\n            @type prometheus\n",
                    "rendered": {
                      "text": "        end\n      end\n\n      context 'when only private_key_path is geven' do\n        let(:config) do\n          %[\n            @type prometheus\n",
                      "markdown": "`        end\n      end\n\n      context 'when only private_key_path is geven' do\n        let(:config) do\n          %[\n            @type prometheus\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/in_prometheus_spec.rb"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 75,
                  "endLine": 141,
                  "endColumn": 86,
                  "snippet": {
                    "text": "                                       logger: anything,\n                                       port: anything,\n                                       proto: :tls,\n                                       tls_opts: { 'cert_path' => 'path', 'private_key_path' => 'path1' }\n                                     ).once\n\n          driver.run(timeout: 1)\n",
                    "rendered": {
                      "text": "                                       logger: anything,\n                                       port: anything,\n                                       proto: :tls,\n                                       tls_opts: { 'cert_path' => 'path', 'private_key_path' => 'path1' }\n                                     ).once\n\n          driver.run(timeout: 1)\n",
                      "markdown": "`                                       logger: anything,\n                                       port: anything,\n                                       proto: :tls,\n                                       tls_opts: { 'cert_path' => 'path', 'private_key_path' => 'path1' }\n                                     ).once\n\n          driver.run(timeout: 1)\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/in_prometheus_spec.rb"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 14,
                  "endLine": 129,
                  "endColumn": 25,
                  "snippet": {
                    "text": "            <ssl>\n              enable true\n              certificate_path path\n              private_key_path path1\n            </ssl>\n          ]\n        end\n",
                    "rendered": {
                      "text": "            <ssl>\n              enable true\n              certificate_path path\n              private_key_path path1\n            </ssl>\n          ]\n        end\n",
                      "markdown": "`            <ssl>\n              enable true\n              certificate_path path\n              private_key_path path1\n            </ssl>\n          ]\n        end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/in_prometheus_spec.rb"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 29,
                  "endLine": 121,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        end\n      end\n\n      context 'cert_path and private_key_path combination' do\n        let(:config) do\n          %[\n            @type prometheus\n",
                    "rendered": {
                      "text": "        end\n      end\n\n      context 'cert_path and private_key_path combination' do\n        let(:config) do\n          %[\n            @type prometheus\n",
                      "markdown": "`        end\n      end\n\n      context 'cert_path and private_key_path combination' do\n        let(:config) do\n          %[\n            @type prometheus\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/spec/fluent/plugin/in_prometheus_spec.rb"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 9,
                  "endLine": 187,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        end\n\n        it 'raises ConfigError' do\n          expect { driver.run(timeout: 1) }.to raise_error(Fluent::ConfigError, 'both certificate_path and private_key_path must be defined')\n        end\n      end\n    end\n",
                    "rendered": {
                      "text": "        end\n\n        it 'raises ConfigError' do\n          expect { driver.run(timeout: 1) }.to raise_error(Fluent::ConfigError, 'both certificate_path and private_key_path must be defined')\n        end\n      end\n    end\n",
                      "markdown": "`        end\n\n        it 'raises ConfigError' do\n          expect { driver.run(timeout: 1) }.to raise_error(Fluent::ConfigError, 'both certificate_path and private_key_path must be defined')\n        end\n      end\n    end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/fluent-plugin-prometheus.zip/ChangeLog"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 2,
                  "endLine": 24,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\nRelease 2.0.0 - 2021/02/18\n\n\t* Update prometheus-client dependency to 2.1.0 or later\n\nRelease 1.8.5 - 2020/11/24\n\n",
                    "rendered": {
                      "text": "\nRelease 2.0.0 - 2021/02/18\n\n\t* Update prometheus-client dependency to 2.1.0 or later\n\nRelease 1.8.5 - 2020/11/24\n\n",
                      "markdown": "`\nRelease 2.0.0 - 2021/02/18\n\n\t* Update prometheus-client dependency to 2.1.0 or later\n\nRelease 1.8.5 - 2020/11/24\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}