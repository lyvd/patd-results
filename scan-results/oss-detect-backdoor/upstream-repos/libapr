{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/file_io/unix/filestat.c"
                },
                "region": {
                  "startLine": 307,
                  "startColumn": 15,
                  "endLine": 307,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    else {\n#if !defined(ENOENT) || !defined(ENOTDIR)\n#error ENOENT || ENOTDIR not defined; please see the\n#error comments at this line in the source for a workaround.\n        /*\n         * If ENOENT || ENOTDIR is not defined in one of the your OS's\n         * include files, APR cannot report a good reason why the stat()\n",
                    "rendered": {
                      "text": "    else {\n#if !defined(ENOENT) || !defined(ENOTDIR)\n#error ENOENT || ENOTDIR not defined; please see the\n#error comments at this line in the source for a workaround.\n        /*\n         * If ENOENT || ENOTDIR is not defined in one of the your OS's\n         * include files, APR cannot report a good reason why the stat()\n",
                      "markdown": "`    else {\n#if !defined(ENOENT) || !defined(ENOTDIR)\n#error ENOENT || ENOTDIR not defined; please see the\n#error comments at this line in the source for a workaround.\n        /*\n         * If ENOENT || ENOTDIR is not defined in one of the your OS's\n         * include files, APR cannot report a good reason why the stat()\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/dbd.m4"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 54,
                  "endLine": 8,
                  "snippet": {
                    "text": "dnl this work for additional information regarding copyright ownership.\ndnl The ASF licenses this file to You under the Apache License, Version 2.0\ndnl (the \"License\"); you may not use this file except in compliance with\ndnl the License.  You may obtain a copy of the License at\ndnl\ndnl     http://www.apache.org/licenses/LICENSE-2.0\ndnl\ndnl Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "dnl this work for additional information regarding copyright ownership.\ndnl The ASF licenses this file to You under the Apache License, Version 2.0\ndnl (the \"License\"); you may not use this file except in compliance with\ndnl the License.  You may obtain a copy of the License at\ndnl\ndnl     http://www.apache.org/licenses/LICENSE-2.0\ndnl\ndnl Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`dnl this work for additional information regarding copyright ownership.\ndnl The ASF licenses this file to You under the Apache License, Version 2.0\ndnl (the \"License\"); you may not use this file except in compliance with\ndnl the License.  You may obtain a copy of the License at\ndnl\ndnl     http://www.apache.org/licenses/LICENSE-2.0\ndnl\ndnl Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/dbd.m4"
                },
                "region": {
                  "startLine": 271,
                  "startColumn": 32,
                  "endLine": 271,
                  "endColumn": 41,
                  "snippet": {
                    "text": "      APR_ADDTO(CPPFLAGS, [$sqlite3_CPPFLAGS])\n      APR_ADDTO(LDFLAGS, [$sqlite3_LDFLAGS])\n\n      AC_MSG_NOTICE(checking for sqlite3 in $withval)\n      AC_CHECK_HEADERS(sqlite3.h, AC_CHECK_LIB(sqlite3, sqlite3_open, [apu_have_sqlite3=1]))\n      if test \"$apu_have_sqlite3\" != \"0\"; then\n        APR_ADDTO(INCLUDES, [-I$withval/include])\n",
                    "rendered": {
                      "text": "      APR_ADDTO(CPPFLAGS, [$sqlite3_CPPFLAGS])\n      APR_ADDTO(LDFLAGS, [$sqlite3_LDFLAGS])\n\n      AC_MSG_NOTICE(checking for sqlite3 in $withval)\n      AC_CHECK_HEADERS(sqlite3.h, AC_CHECK_LIB(sqlite3, sqlite3_open, [apu_have_sqlite3=1]))\n      if test \"$apu_have_sqlite3\" != \"0\"; then\n        APR_ADDTO(INCLUDES, [-I$withval/include])\n",
                      "markdown": "`      APR_ADDTO(CPPFLAGS, [$sqlite3_CPPFLAGS])\n      APR_ADDTO(LDFLAGS, [$sqlite3_LDFLAGS])\n\n      AC_MSG_NOTICE(checking for sqlite3 in $withval)\n      AC_CHECK_HEADERS(sqlite3.h, AC_CHECK_LIB(sqlite3, sqlite3_open, [apu_have_sqlite3=1]))\n      if test \"$apu_have_sqlite3\" != \"0\"; then\n        APR_ADDTO(INCLUDES, [-I$withval/include])\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/dbd.m4"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 70,
                  "endLine": 258,
                  "endColumn": 79,
                  "snippet": {
                    "text": "  old_cppflags=\"$CPPFLAGS\"\n  old_ldflags=\"$LDFLAGS\"\n\n  AC_ARG_WITH([sqlite3], APR_HELP_STRING([--with-sqlite3=DIR], [enable sqlite3 DBD driver]),\n  [\n    if test \"$withval\" = \"yes\"; then\n      AC_CHECK_HEADERS(sqlite3.h, AC_CHECK_LIB(sqlite3, sqlite3_open, [apu_have_sqlite3=1]))\n",
                    "rendered": {
                      "text": "  old_cppflags=\"$CPPFLAGS\"\n  old_ldflags=\"$LDFLAGS\"\n\n  AC_ARG_WITH([sqlite3], APR_HELP_STRING([--with-sqlite3=DIR], [enable sqlite3 DBD driver]),\n  [\n    if test \"$withval\" = \"yes\"; then\n      AC_CHECK_HEADERS(sqlite3.h, AC_CHECK_LIB(sqlite3, sqlite3_open, [apu_have_sqlite3=1]))\n",
                      "markdown": "`  old_cppflags=\"$CPPFLAGS\"\n  old_ldflags=\"$LDFLAGS\"\n\n  AC_ARG_WITH([sqlite3], APR_HELP_STRING([--with-sqlite3=DIR], [enable sqlite3 DBD driver]),\n  [\n    if test \"$withval\" = \"yes\"; then\n      AC_CHECK_HEADERS(sqlite3.h, AC_CHECK_LIB(sqlite3, sqlite3_open, [apu_have_sqlite3=1]))\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/dbd.m4"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 32,
                  "endLine": 222,
                  "endColumn": 39,
                  "snippet": {
                    "text": "      APR_ADDTO(LDFLAGS, [$mysql_LDFLAGS])\n      APR_ADDTO(LIBS, [$mysql_LIBS])\n\n      AC_MSG_NOTICE(checking for mysql in $withval)\n      AC_CHECK_HEADERS([mysql.h errmsg.h], [apu_have_mysql=1], [apu_have_mysql=0; break])\n      if test \"$apr_have_mysql\" = \"0\"; then\n        AC_CHECK_HEADERS([mysql/mysql.h mysql/errmsg.h], [apu_have_mysql=1], [apu_have_mysql=0; break])\n",
                    "rendered": {
                      "text": "      APR_ADDTO(LDFLAGS, [$mysql_LDFLAGS])\n      APR_ADDTO(LIBS, [$mysql_LIBS])\n\n      AC_MSG_NOTICE(checking for mysql in $withval)\n      AC_CHECK_HEADERS([mysql.h errmsg.h], [apu_have_mysql=1], [apu_have_mysql=0; break])\n      if test \"$apr_have_mysql\" = \"0\"; then\n        AC_CHECK_HEADERS([mysql/mysql.h mysql/errmsg.h], [apu_have_mysql=1], [apu_have_mysql=0; break])\n",
                      "markdown": "`      APR_ADDTO(LDFLAGS, [$mysql_LDFLAGS])\n      APR_ADDTO(LIBS, [$mysql_LIBS])\n\n      AC_MSG_NOTICE(checking for mysql in $withval)\n      AC_CHECK_HEADERS([mysql.h errmsg.h], [apu_have_mysql=1], [apu_have_mysql=0; break])\n      if test \"$apr_have_mysql\" = \"0\"; then\n        AC_CHECK_HEADERS([mysql/mysql.h mysql/errmsg.h], [apu_have_mysql=1], [apu_have_mysql=0; break])\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/dbd.m4"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 35,
                  "endLine": 210,
                  "endColumn": 41,
                  "snippet": {
                    "text": "        mysql_CPPFLAGS=\"`$MYSQL_CONFIG --include`\"\n        mysql_LDFLAGS=\"`$MYSQL_CONFIG --libs_r | sed -e 's/-l[[^ ]]\\+//g'`\"\n        mysql_LIBS=\"`$MYSQL_CONFIG --libs_r`\"\n        if $MYSQL_CONFIG --libs_r | grep -q mariadb; then\n          my_library=\"mariadb\"\n        fi\n      else\n",
                    "rendered": {
                      "text": "        mysql_CPPFLAGS=\"`$MYSQL_CONFIG --include`\"\n        mysql_LDFLAGS=\"`$MYSQL_CONFIG --libs_r | sed -e 's/-l[[^ ]]\\+//g'`\"\n        mysql_LIBS=\"`$MYSQL_CONFIG --libs_r`\"\n        if $MYSQL_CONFIG --libs_r | grep -q mariadb; then\n          my_library=\"mariadb\"\n        fi\n      else\n",
                      "markdown": "`        mysql_CPPFLAGS=\"`$MYSQL_CONFIG --include`\"\n        mysql_LDFLAGS=\"`$MYSQL_CONFIG --libs_r | sed -e 's/-l[[^ ]]\\+//g'`\"\n        mysql_LIBS=\"`$MYSQL_CONFIG --libs_r`\"\n        if $MYSQL_CONFIG --libs_r | grep -q mariadb; then\n          my_library=\"mariadb\"\n        fi\n      else\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/dbd.m4"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 48,
                  "endLine": 208,
                  "endColumn": 53,
                  "snippet": {
                    "text": "      fi\n      if test \"x$MYSQL_CONFIG\" != 'x'; then\n        mysql_CPPFLAGS=\"`$MYSQL_CONFIG --include`\"\n        mysql_LDFLAGS=\"`$MYSQL_CONFIG --libs_r | sed -e 's/-l[[^ ]]\\+//g'`\"\n        mysql_LIBS=\"`$MYSQL_CONFIG --libs_r`\"\n        if $MYSQL_CONFIG --libs_r | grep -q mariadb; then\n          my_library=\"mariadb\"\n",
                    "rendered": {
                      "text": "      fi\n      if test \"x$MYSQL_CONFIG\" != 'x'; then\n        mysql_CPPFLAGS=\"`$MYSQL_CONFIG --include`\"\n        mysql_LDFLAGS=\"`$MYSQL_CONFIG --libs_r | sed -e 's/-l[[^ ]]\\+//g'`\"\n        mysql_LIBS=\"`$MYSQL_CONFIG --libs_r`\"\n        if $MYSQL_CONFIG --libs_r | grep -q mariadb; then\n          my_library=\"mariadb\"\n",
                      "markdown": "`      fi\n      if test \"x$MYSQL_CONFIG\" != 'x'; then\n        mysql_CPPFLAGS=\"`$MYSQL_CONFIG --include`\"\n        mysql_LDFLAGS=\"`$MYSQL_CONFIG --libs_r | sed -e 's/-l[[^ ]]\\+//g'`\"\n        mysql_LIBS=\"`$MYSQL_CONFIG --libs_r`\"\n        if $MYSQL_CONFIG --libs_r | grep -q mariadb; then\n          my_library=\"mariadb\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/dbd.m4"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 35,
                  "endLine": 183,
                  "endColumn": 41,
                  "snippet": {
                    "text": "        APR_ADDTO(CPPFLAGS, [$mysql_CPPFLAGS])\n        APR_ADDTO(LIBS, [$mysql_LIBS])\n\n        if $MYSQL_CONFIG --libs_r | grep -q mariadb; then\n          my_library=\"mariadb\"\n        fi\n      fi\n",
                    "rendered": {
                      "text": "        APR_ADDTO(CPPFLAGS, [$mysql_CPPFLAGS])\n        APR_ADDTO(LIBS, [$mysql_LIBS])\n\n        if $MYSQL_CONFIG --libs_r | grep -q mariadb; then\n          my_library=\"mariadb\"\n        fi\n      fi\n",
                      "markdown": "`        APR_ADDTO(CPPFLAGS, [$mysql_CPPFLAGS])\n        APR_ADDTO(LIBS, [$mysql_LIBS])\n\n        if $MYSQL_CONFIG --libs_r | grep -q mariadb; then\n          my_library=\"mariadb\"\n        fi\n      fi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/dbd.m4"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 48,
                  "endLine": 177,
                  "endColumn": 53,
                  "snippet": {
                    "text": "      fi\n      if test \"x$MYSQL_CONFIG\" != 'x'; then\n        mysql_CPPFLAGS=\"`$MYSQL_CONFIG --include`\"\n        mysql_LDFLAGS=\"`$MYSQL_CONFIG --libs_r | sed -e 's/-l[[^ ]]\\+//g'`\"\n        mysql_LIBS=\"`$MYSQL_CONFIG --libs_r`\"\n\n        APR_ADDTO(CPPFLAGS, [$mysql_CPPFLAGS])\n",
                    "rendered": {
                      "text": "      fi\n      if test \"x$MYSQL_CONFIG\" != 'x'; then\n        mysql_CPPFLAGS=\"`$MYSQL_CONFIG --include`\"\n        mysql_LDFLAGS=\"`$MYSQL_CONFIG --libs_r | sed -e 's/-l[[^ ]]\\+//g'`\"\n        mysql_LIBS=\"`$MYSQL_CONFIG --libs_r`\"\n\n        APR_ADDTO(CPPFLAGS, [$mysql_CPPFLAGS])\n",
                      "markdown": "`      fi\n      if test \"x$MYSQL_CONFIG\" != 'x'; then\n        mysql_CPPFLAGS=\"`$MYSQL_CONFIG --include`\"\n        mysql_LDFLAGS=\"`$MYSQL_CONFIG --libs_r | sed -e 's/-l[[^ ]]\\+//g'`\"\n        mysql_LIBS=\"`$MYSQL_CONFIG --libs_r`\"\n\n        APR_ADDTO(CPPFLAGS, [$mysql_CPPFLAGS])\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/dbd.m4"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 66,
                  "endLine": 168,
                  "endColumn": 73,
                  "snippet": {
                    "text": "\n  my_library=\"mysqlclient\"\n\n  AC_ARG_WITH([mysql], APR_HELP_STRING([--with-mysql=DIR], [enable MySQL DBD driver]),\n  [\n    if test \"$withval\" = \"yes\"; then\n      AC_PATH_TOOL([MYSQL_CONFIG],[mysql_config])\n",
                    "rendered": {
                      "text": "\n  my_library=\"mysqlclient\"\n\n  AC_ARG_WITH([mysql], APR_HELP_STRING([--with-mysql=DIR], [enable MySQL DBD driver]),\n  [\n    if test \"$withval\" = \"yes\"; then\n      AC_PATH_TOOL([MYSQL_CONFIG],[mysql_config])\n",
                      "markdown": "`\n  my_library=\"mysqlclient\"\n\n  AC_ARG_WITH([mysql], APR_HELP_STRING([--with-mysql=DIR], [enable MySQL DBD driver]),\n  [\n    if test \"$withval\" = \"yes\"; then\n      AC_PATH_TOOL([MYSQL_CONFIG],[mysql_config])\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/ldap.m4"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 40,
                  "endLine": 8,
                  "snippet": {
                    "text": "dnl\ndnl Licensed under the Apache License, Version 2.0 (the \"License\");\ndnl you may not use this file except in compliance with the License.\ndnl You may obtain a copy of the License at\ndnl\ndnl     http://www.apache.org/licenses/LICENSE-2.0\ndnl\ndnl Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "dnl\ndnl Licensed under the Apache License, Version 2.0 (the \"License\");\ndnl you may not use this file except in compliance with the License.\ndnl You may obtain a copy of the License at\ndnl\ndnl     http://www.apache.org/licenses/LICENSE-2.0\ndnl\ndnl Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`dnl\ndnl Licensed under the Apache License, Version 2.0 (the \"License\");\ndnl you may not use this file except in compliance with the License.\ndnl You may obtain a copy of the License at\ndnl\ndnl     http://www.apache.org/licenses/LICENSE-2.0\ndnl\ndnl Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/ldap.m4"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 30,
                  "endLine": 161,
                  "endColumn": 36,
                  "snippet": {
                    "text": "      APU_FIND_LDAPLIB(\"ldap\", \"-llber\")\n\n      if test ${apu_have_ldap} != \"1\"; then\n        AC_MSG_ERROR(could not find an LDAP library)\n      else\n        APR_ADDTO(LDADD_ldap, [$LDADD_ldap_found $ldap_LDFLAGS])\n      fi\n",
                    "rendered": {
                      "text": "      APU_FIND_LDAPLIB(\"ldap\", \"-llber\")\n\n      if test ${apu_have_ldap} != \"1\"; then\n        AC_MSG_ERROR(could not find an LDAP library)\n      else\n        APR_ADDTO(LDADD_ldap, [$LDADD_ldap_found $ldap_LDFLAGS])\n      fi\n",
                      "markdown": "`      APU_FIND_LDAPLIB(\"ldap\", \"-llber\")\n\n      if test ${apu_have_ldap} != \"1\"; then\n        AC_MSG_ERROR(could not find an LDAP library)\n      else\n        APR_ADDTO(LDADD_ldap, [$LDADD_ldap_found $ldap_LDFLAGS])\n      fi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/ldap.m4"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 38,
                  "endLine": 89,
                  "endColumn": 43,
                  "snippet": {
                    "text": "    extralib=$2\n    # Clear the cache entry for subsequent APU_FIND_LDAPLIB invocations.\n    changequote(,)\n    ldaplib_cache_id=\"`echo $ldaplib | sed -e 's/[^a-zA-Z0-9_]/_/g'`\"\n    changequote([,])\n    unset ac_cv_lib_${ldaplib_cache_id}_ldap_init\n    unset ac_cv_lib_${ldaplib_cache_id}___ldap_init\n",
                    "rendered": {
                      "text": "    extralib=$2\n    # Clear the cache entry for subsequent APU_FIND_LDAPLIB invocations.\n    changequote(,)\n    ldaplib_cache_id=\"`echo $ldaplib | sed -e 's/[^a-zA-Z0-9_]/_/g'`\"\n    changequote([,])\n    unset ac_cv_lib_${ldaplib_cache_id}_ldap_init\n    unset ac_cv_lib_${ldaplib_cache_id}___ldap_init\n",
                      "markdown": "`    extralib=$2\n    # Clear the cache entry for subsequent APU_FIND_LDAPLIB invocations.\n    changequote(,)\n    ldaplib_cache_id=\"`echo $ldaplib | sed -e 's/[^a-zA-Z0-9_]/_/g'`\"\n    changequote([,])\n    unset ac_cv_lib_${ldaplib_cache_id}_ldap_init\n    unset ac_cv_lib_${ldaplib_cache_id}___ldap_init\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/ldap.m4"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 3,
                  "endLine": 81,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n\ndnl \ndnl Find a particular LDAP library\ndnl\nAC_DEFUN([APU_FIND_LDAPLIB], [\n  if test ${apu_have_ldap} != \"1\"; then\n",
                    "rendered": {
                      "text": "\n\ndnl \ndnl Find a particular LDAP library\ndnl\nAC_DEFUN([APU_FIND_LDAPLIB], [\n  if test ${apu_have_ldap} != \"1\"; then\n",
                      "markdown": "`\n\ndnl \ndnl Find a particular LDAP library\ndnl\nAC_DEFUN([APU_FIND_LDAPLIB], [\n  if test ${apu_have_ldap} != \"1\"; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/lineends.pl"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 11,
                  "endLine": 146,
                  "endColumn": 18,
                  "snippet": {
                    "text": "                utime $ostat[9], $ostat[9], @anames;\n            }\n            chmod $ostat[2] & 07777, @anames;\n            chown $ostat[5], $ostat[6], @anames;\n            print \"Converted file \" . $oname . \" to text in \" . $File::Find::dir . \"\\n\"; \n        }\n        else {\n",
                    "rendered": {
                      "text": "                utime $ostat[9], $ostat[9], @anames;\n            }\n            chmod $ostat[2] & 07777, @anames;\n            chown $ostat[5], $ostat[6], @anames;\n            print \"Converted file \" . $oname . \" to text in \" . $File::Find::dir . \"\\n\"; \n        }\n        else {\n",
                      "markdown": "`                utime $ostat[9], $ostat[9], @anames;\n            }\n            chmod $ostat[2] & 07777, @anames;\n            chown $ostat[5], $ostat[6], @anames;\n            print \"Converted file \" . $oname . \" to text in \" . $File::Find::dir . \"\\n\"; \n        }\n        else {\n`"
                    }
                  },
                  "sourceLanguage": "perl"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/lineends.pl"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 11,
                  "endLine": 145,
                  "endColumn": 18,
                  "snippet": {
                    "text": "            if ($preservedate) {\n                utime $ostat[9], $ostat[9], @anames;\n            }\n            chmod $ostat[2] & 07777, @anames;\n            chown $ostat[5], $ostat[6], @anames;\n            print \"Converted file \" . $oname . \" to text in \" . $File::Find::dir . \"\\n\"; \n        }\n",
                    "rendered": {
                      "text": "            if ($preservedate) {\n                utime $ostat[9], $ostat[9], @anames;\n            }\n            chmod $ostat[2] & 07777, @anames;\n            chown $ostat[5], $ostat[6], @anames;\n            print \"Converted file \" . $oname . \" to text in \" . $File::Find::dir . \"\\n\"; \n        }\n",
                      "markdown": "`            if ($preservedate) {\n                utime $ostat[9], $ostat[9], @anames;\n            }\n            chmod $ostat[2] & 07777, @anames;\n            chown $ostat[5], $ostat[6], @anames;\n            print \"Converted file \" . $oname . \" to text in \" . $File::Find::dir . \"\\n\"; \n        }\n`"
                    }
                  },
                  "sourceLanguage": "perl"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/lineends.pl"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 27,
                  "endLine": 68,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    elsif (@ARGV[0] =~ m/^-/) {\n        die \"What is \" . @ARGV[0] . \" supposed to mean?\\n\\n\" \n          . \"Syntax:\\t$0 [option()s] [path(s)]\\n\\n\" . <<'OUTCH'\nWhere:  paths specifies the top level directory to convert (default of '.')\n        options are;\n\n          --cr     keep/add one ^M\n",
                    "rendered": {
                      "text": "    elsif (@ARGV[0] =~ m/^-/) {\n        die \"What is \" . @ARGV[0] . \" supposed to mean?\\n\\n\" \n          . \"Syntax:\\t$0 [option()s] [path(s)]\\n\\n\" . <<'OUTCH'\nWhere:  paths specifies the top level directory to convert (default of '.')\n        options are;\n\n          --cr     keep/add one ^M\n",
                      "markdown": "`    elsif (@ARGV[0] =~ m/^-/) {\n        die \"What is \" . @ARGV[0] . \" supposed to mean?\\n\\n\" \n          . \"Syntax:\\t$0 [option()s] [path(s)]\\n\\n\" . <<'OUTCH'\nWhere:  paths specifies the top level directory to convert (default of '.')\n        options are;\n\n          --cr     keep/add one ^M\n`"
                    }
                  },
                  "sourceLanguage": "perl"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/lineends.pl"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 12,
                  "endLine": 38,
                  "endColumn": 17,
                  "snippet": {
                    "text": "# Some binary objects\n$ignore .= \"class-so-dll-exe-obj-lib-a-o-lo-slo-sl-dylib-\";\n\n# Some build env files \n$ignore .= \"mcp-xdc-ncb-opt-pdb-ilk-exp-res-pch-idb-sbr-\";\n\n$preservedate = 1;\n",
                    "rendered": {
                      "text": "# Some binary objects\n$ignore .= \"class-so-dll-exe-obj-lib-a-o-lo-slo-sl-dylib-\";\n\n# Some build env files \n$ignore .= \"mcp-xdc-ncb-opt-pdb-ilk-exp-res-pch-idb-sbr-\";\n\n$preservedate = 1;\n",
                      "markdown": "`# Some binary objects\n$ignore .= \"class-so-dll-exe-obj-lib-a-o-lo-slo-sl-dylib-\";\n\n# Some build env files \n$ignore .= \"mcp-xdc-ncb-opt-pdb-ilk-exp-res-pch-idb-sbr-\";\n\n$preservedate = 1;\n`"
                    }
                  },
                  "sourceLanguage": "perl"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/iconv.m4"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 54,
                  "endLine": 8,
                  "snippet": {
                    "text": "dnl this work for additional information regarding copyright ownership.\ndnl The ASF licenses this file to You under the Apache License, Version 2.0\ndnl (the \"License\"); you may not use this file except in compliance with\ndnl the License.  You may obtain a copy of the License at\ndnl\ndnl     http://www.apache.org/licenses/LICENSE-2.0\ndnl\ndnl Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "dnl this work for additional information regarding copyright ownership.\ndnl The ASF licenses this file to You under the Apache License, Version 2.0\ndnl (the \"License\"); you may not use this file except in compliance with\ndnl the License.  You may obtain a copy of the License at\ndnl\ndnl     http://www.apache.org/licenses/LICENSE-2.0\ndnl\ndnl Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`dnl this work for additional information regarding copyright ownership.\ndnl The ASF licenses this file to You under the Apache License, Version 2.0\ndnl (the \"License\"); you may not use this file except in compliance with\ndnl the License.  You may obtain a copy of the License at\ndnl\ndnl     http://www.apache.org/licenses/LICENSE-2.0\ndnl\ndnl Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/iconv.m4"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 19,
                  "endLine": 32,
                  "endColumn": 25,
                  "snippet": {
                    "text": "])\n\ndnl\ndnl APU_FIND_ICONV: find an iconv library\ndnl\nAC_DEFUN([APU_FIND_ICONV], [\n\n",
                    "rendered": {
                      "text": "])\n\ndnl\ndnl APU_FIND_ICONV: find an iconv library\ndnl\nAC_DEFUN([APU_FIND_ICONV], [\n\n",
                      "markdown": "`])\n\ndnl\ndnl APU_FIND_ICONV: find an iconv library\ndnl\nAC_DEFUN([APU_FIND_ICONV], [\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dso/aix/dso.c"
                },
                "region": {
                  "startLine": 451,
                  "startColumn": 9,
                  "endLine": 451,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    if (mp->info && mp->info->fini)\n\t(*mp->info->fini) ();\n    if (mp->cdtors) {\n\tCdtorPtr cp = mp->cdtors;\n\twhile (cp->init || cp->term) {\n\t    if (cp->term && cp->init != (void (*)(void)) 0xffffffff)\n\t\t(*cp->term) ();\n",
                    "rendered": {
                      "text": "    if (mp->info && mp->info->fini)\n\t(*mp->info->fini) ();\n    if (mp->cdtors) {\n\tCdtorPtr cp = mp->cdtors;\n\twhile (cp->init || cp->term) {\n\t    if (cp->term && cp->init != (void (*)(void)) 0xffffffff)\n\t\t(*cp->term) ();\n",
                      "markdown": "`    if (mp->info && mp->info->fini)\n\t(*mp->info->fini) ();\n    if (mp->cdtors) {\n\tCdtorPtr cp = mp->cdtors;\n\twhile (cp->init || cp->term) {\n\t    if (cp->term && cp->init != (void (*)(void)) 0xffffffff)\n\t\t(*cp->term) ();\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dso/aix/dso.c"
                },
                "region": {
                  "startLine": 392,
                  "startColumn": 22,
                  "endLine": 392,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\tstrcat(errbuf, p);\n\tbreak;\n    case L_ERROR_UNDEF:\n\tstrcat(errbuf, \"can't find symbol\");\n\tstrcat(errbuf, p);\n\tbreak;\n    case L_ERROR_RLDBAD:\n",
                    "rendered": {
                      "text": "\tstrcat(errbuf, p);\n\tbreak;\n    case L_ERROR_UNDEF:\n\tstrcat(errbuf, \"can't find symbol\");\n\tstrcat(errbuf, p);\n\tbreak;\n    case L_ERROR_RLDBAD:\n",
                      "markdown": "`\tstrcat(errbuf, p);\n\tbreak;\n    case L_ERROR_UNDEF:\n\tstrcat(errbuf, \"can't find symbol\");\n\tstrcat(errbuf, p);\n\tbreak;\n    case L_ERROR_RLDBAD:\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dso/aix/dso.c"
                },
                "region": {
                  "startLine": 351,
                  "startColumn": 9,
                  "endLine": 351,
                  "endColumn": 13,
                  "snippet": {
                    "text": "     * to call static constructors (and later on dlclose destructors).\n     */\n    if (mp->cdtors = (CdtorPtr) dlsym(mp, \"__cdtors\")) {\n\tCdtorPtr cp = mp->cdtors;\n\twhile (cp->init || cp->term) {\n\t    if (cp->init && cp->init != (void (*)(void)) 0xffffffff)\n\t\t(*cp->init) ();\n",
                    "rendered": {
                      "text": "     * to call static constructors (and later on dlclose destructors).\n     */\n    if (mp->cdtors = (CdtorPtr) dlsym(mp, \"__cdtors\")) {\n\tCdtorPtr cp = mp->cdtors;\n\twhile (cp->init || cp->term) {\n\t    if (cp->init && cp->init != (void (*)(void)) 0xffffffff)\n\t\t(*cp->init) ();\n",
                      "markdown": "`     * to call static constructors (and later on dlclose destructors).\n     */\n    if (mp->cdtors = (CdtorPtr) dlsym(mp, \"__cdtors\")) {\n\tCdtorPtr cp = mp->cdtors;\n\twhile (cp->init || cp->term) {\n\t    if (cp->init && cp->init != (void (*)(void)) 0xffffffff)\n\t\t(*cp->init) ();\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/tables/apr_tables.c"
                },
                "region": {
                  "startLine": 271,
                  "startColumn": 11,
                  "endLine": 271,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        if (strpp && *strpp != NULL) {\n            len = strlen(*strpp);\n            memcpy(cp, *strpp, len);\n            cp += len;\n        }\n        if (++i >= arr->nelts) {\n            break;\n",
                    "rendered": {
                      "text": "        if (strpp && *strpp != NULL) {\n            len = strlen(*strpp);\n            memcpy(cp, *strpp, len);\n            cp += len;\n        }\n        if (++i >= arr->nelts) {\n            break;\n",
                      "markdown": "`        if (strpp && *strpp != NULL) {\n            len = strlen(*strpp);\n            memcpy(cp, *strpp, len);\n            cp += len;\n        }\n        if (++i >= arr->nelts) {\n            break;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/tables/apr_tables.c"
                },
                "region": {
                  "startLine": 263,
                  "startColumn": 3,
                  "endLine": 263,
                  "endColumn": 7,
                  "snippet": {
                    "text": "    /* Allocate the required string */\n\n    res = (char *) apr_palloc(p, len + 1);\n    cp = res;\n\n    /* Pass two --- copy the argument strings into the result space */\n\n",
                    "rendered": {
                      "text": "    /* Allocate the required string */\n\n    res = (char *) apr_palloc(p, len + 1);\n    cp = res;\n\n    /* Pass two --- copy the argument strings into the result space */\n\n",
                      "markdown": "`    /* Allocate the required string */\n\n    res = (char *) apr_palloc(p, len + 1);\n    cp = res;\n\n    /* Pass two --- copy the argument strings into the result space */\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 24,
                  "endLine": 26,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                    "rendered": {
                      "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                      "markdown": "`\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                    "rendered": {
                      "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                      "markdown": "`fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                    "rendered": {
                      "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                      "markdown": "`\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                    "rendered": {
                      "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                      "markdown": "`\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                    "rendered": {
                      "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                      "markdown": "`\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                    "rendered": {
                      "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                      "markdown": "`then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 2,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/pre-applypatch.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/pre-receive.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/util-misc/apu_dso.c"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 13,
                  "endLine": 159,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    global = apr_hash_pool_get(dsos);\n\n    /* Retrieve our path search list or prepare for a single search */\n    if ((apr_env_get(&pathlist, APR_DSOPATH, pool) != APR_SUCCESS)\n          || (apr_filepath_list_split(&paths, pathlist, pool) != APR_SUCCESS))\n        paths = apr_array_make(pool, 1, sizeof(char*));\n\n",
                    "rendered": {
                      "text": "    global = apr_hash_pool_get(dsos);\n\n    /* Retrieve our path search list or prepare for a single search */\n    if ((apr_env_get(&pathlist, APR_DSOPATH, pool) != APR_SUCCESS)\n          || (apr_filepath_list_split(&paths, pathlist, pool) != APR_SUCCESS))\n        paths = apr_array_make(pool, 1, sizeof(char*));\n\n",
                      "markdown": "`    global = apr_hash_pool_get(dsos);\n\n    /* Retrieve our path search list or prepare for a single search */\n    if ((apr_env_get(&pathlist, APR_DSOPATH, pool) != APR_SUCCESS)\n          || (apr_filepath_list_split(&paths, pathlist, pool) != APR_SUCCESS))\n        paths = apr_array_make(pool, 1, sizeof(char*));\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testjose.c"
                },
                "region": {
                  "startLine": 1317,
                  "startColumn": 12,
                  "endLine": 1317,
                  "endColumn": 75,
                  "snippet": {
                    "text": "            \"\\\"UGhIOguC7IuEvf_NPVaXsGMoLOmwvc1GyqlIKOK1nN94nHPoltGRhWhw7Zx0-\"\n            \"kFm1NJn8LE9XShH59_i8J0PH5ZZyNfGy2xGdULU7sHNF6Gp2vPLgNZ__deLKx\"\n            \"GHZ7PcHALUzoOegEI-8E66jX2E4zyJKx-YxzZIItRzC5hlRirb6Y5Cl_p-ko3\"\n            \"YvkkysZIFNPccxRU7qve1WYPxqbb2Yw8kZqa2rMWI5ng8OtvzlV7elprCbuPh\"\n            \"cCdZ6XDP0_F8rkXds2vE4X-ncOIM8hAYHHi29NX0mcKiRaD0-D-ljQTP-cFPg\"\n            \"wCp6X-nZZd9OHBv-B3oWh2TbqmScqXMR4gp_A\\\"},\"\n            \"{\\\"header\\\":\"\n",
                    "rendered": {
                      "text": "            \"\\\"UGhIOguC7IuEvf_NPVaXsGMoLOmwvc1GyqlIKOK1nN94nHPoltGRhWhw7Zx0-\"\n            \"kFm1NJn8LE9XShH59_i8J0PH5ZZyNfGy2xGdULU7sHNF6Gp2vPLgNZ__deLKx\"\n            \"GHZ7PcHALUzoOegEI-8E66jX2E4zyJKx-YxzZIItRzC5hlRirb6Y5Cl_p-ko3\"\n            \"YvkkysZIFNPccxRU7qve1WYPxqbb2Yw8kZqa2rMWI5ng8OtvzlV7elprCbuPh\"\n            \"cCdZ6XDP0_F8rkXds2vE4X-ncOIM8hAYHHi29NX0mcKiRaD0-D-ljQTP-cFPg\"\n            \"wCp6X-nZZd9OHBv-B3oWh2TbqmScqXMR4gp_A\\\"},\"\n            \"{\\\"header\\\":\"\n",
                      "markdown": "`            \"\\\"UGhIOguC7IuEvf_NPVaXsGMoLOmwvc1GyqlIKOK1nN94nHPoltGRhWhw7Zx0-\"\n            \"kFm1NJn8LE9XShH59_i8J0PH5ZZyNfGy2xGdULU7sHNF6Gp2vPLgNZ__deLKx\"\n            \"GHZ7PcHALUzoOegEI-8E66jX2E4zyJKx-YxzZIItRzC5hlRirb6Y5Cl_p-ko3\"\n            \"YvkkysZIFNPccxRU7qve1WYPxqbb2Yw8kZqa2rMWI5ng8OtvzlV7elprCbuPh\"\n            \"cCdZ6XDP0_F8rkXds2vE4X-ncOIM8hAYHHi29NX0mcKiRaD0-D-ljQTP-cFPg\"\n            \"wCp6X-nZZd9OHBv-B3oWh2TbqmScqXMR4gp_A\\\"},\"\n            \"{\\\"header\\\":\"\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testjose.c"
                },
                "region": {
                  "startLine": 1265,
                  "startColumn": 12,
                  "endLine": 1265,
                  "endColumn": 78,
                  "snippet": {
                    "text": "    apr_status_t status;\n\n    const char *source = \"eyJhbGciOiJSU0EtT0FFUCIsImVuYyI6IkEyNTZHQ00ifQ.\"\n            \"OKOawDo13gRp2ojaHV7LFpZcgV7T6DVZKTyKOMTYUmKoTCVJRgckCL9kiMT03JGe\"\n            \"ipsEdY3mx_etLbbWSrFr05kLzcSr4qKAq7YN7e9jwQRb23nfa6c9d-StnImGyFDb\"\n            \"Sv04uVuxIp5Zms1gNxKKK2Da14B8S4rzVRltdYwam_lDp5XnZAYpQdb76FdIKLaV\"\n            \"mqgfwX7XWRxv2322i-vDxRfqNzo_tETKzpVLzfiwQyeyPGLBIO56YJ7eObdv0je8\"\n",
                    "rendered": {
                      "text": "    apr_status_t status;\n\n    const char *source = \"eyJhbGciOiJSU0EtT0FFUCIsImVuYyI6IkEyNTZHQ00ifQ.\"\n            \"OKOawDo13gRp2ojaHV7LFpZcgV7T6DVZKTyKOMTYUmKoTCVJRgckCL9kiMT03JGe\"\n            \"ipsEdY3mx_etLbbWSrFr05kLzcSr4qKAq7YN7e9jwQRb23nfa6c9d-StnImGyFDb\"\n            \"Sv04uVuxIp5Zms1gNxKKK2Da14B8S4rzVRltdYwam_lDp5XnZAYpQdb76FdIKLaV\"\n            \"mqgfwX7XWRxv2322i-vDxRfqNzo_tETKzpVLzfiwQyeyPGLBIO56YJ7eObdv0je8\"\n",
                      "markdown": "`    apr_status_t status;\n\n    const char *source = \"eyJhbGciOiJSU0EtT0FFUCIsImVuYyI6IkEyNTZHQ00ifQ.\"\n            \"OKOawDo13gRp2ojaHV7LFpZcgV7T6DVZKTyKOMTYUmKoTCVJRgckCL9kiMT03JGe\"\n            \"ipsEdY3mx_etLbbWSrFr05kLzcSr4qKAq7YN7e9jwQRb23nfa6c9d-StnImGyFDb\"\n            \"Sv04uVuxIp5Zms1gNxKKK2Da14B8S4rzVRltdYwam_lDp5XnZAYpQdb76FdIKLaV\"\n            \"mqgfwX7XWRxv2322i-vDxRfqNzo_tETKzpVLzfiwQyeyPGLBIO56YJ7eObdv0je8\"\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testjose.c"
                },
                "region": {
                  "startLine": 1225,
                  "startColumn": 14,
                  "endLine": 1225,
                  "endColumn": 79,
                  "snippet": {
                    "text": "\n    const char *source = \"{\"\n            \"\\\"payload\\\":\"\n            \"\\\"eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGF\"\n            \"tcGxlLmNvbS9pc19yb290Ijp0cnVlfQ\\\",\"\n            \"\\\"protected\\\":\\\"eyJhbGciOiJFUzI1NiJ9\\\",\"\n            \"\\\"header\\\":\"\n",
                    "rendered": {
                      "text": "\n    const char *source = \"{\"\n            \"\\\"payload\\\":\"\n            \"\\\"eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGF\"\n            \"tcGxlLmNvbS9pc19yb290Ijp0cnVlfQ\\\",\"\n            \"\\\"protected\\\":\\\"eyJhbGciOiJFUzI1NiJ9\\\",\"\n            \"\\\"header\\\":\"\n",
                      "markdown": "`\n    const char *source = \"{\"\n            \"\\\"payload\\\":\"\n            \"\\\"eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGF\"\n            \"tcGxlLmNvbS9pc19yb290Ijp0cnVlfQ\\\",\"\n            \"\\\"protected\\\":\\\"eyJhbGciOiJFUzI1NiJ9\\\",\"\n            \"\\\"header\\\":\"\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testjose.c"
                },
                "region": {
                  "startLine": 1174,
                  "startColumn": 12,
                  "endLine": 1174,
                  "endColumn": 75,
                  "snippet": {
                    "text": "            \"mh7AAuHIm4Bh-0Qc_lF5YKt_O8W2Fp5jujGbds9uJdbF9CUAr7t1dnZcAcQjb\"\n            \"KBYNX4BAynRFdiuB--f_nZLgrnbyTyWzO75vRK5h6xBArLIARNPvkSjtQBMHl\"\n            \"b1L07Qe7K0GarZRmB_eSN9383LcOLn6_dO--xi12jzDwusC-eOkHWEsqtFZES\"\n            \"c6BfI7noOPqvhJ1phCnvWh6IeYI2w9QOYEUipUTI8np6LbgGY9Fs98rqVt5AX\"\n            \"LIhWkWywlVmtVrBp0igcN_IoypGlUPQGe77Rw\\\"},\"\n            \"{\\\"protected\\\":\\\"eyJhbGciOiJFUzI1NiJ9\\\",\"\n            \"\\\"header\\\":\"\n",
                    "rendered": {
                      "text": "            \"mh7AAuHIm4Bh-0Qc_lF5YKt_O8W2Fp5jujGbds9uJdbF9CUAr7t1dnZcAcQjb\"\n            \"KBYNX4BAynRFdiuB--f_nZLgrnbyTyWzO75vRK5h6xBArLIARNPvkSjtQBMHl\"\n            \"b1L07Qe7K0GarZRmB_eSN9383LcOLn6_dO--xi12jzDwusC-eOkHWEsqtFZES\"\n            \"c6BfI7noOPqvhJ1phCnvWh6IeYI2w9QOYEUipUTI8np6LbgGY9Fs98rqVt5AX\"\n            \"LIhWkWywlVmtVrBp0igcN_IoypGlUPQGe77Rw\\\"},\"\n            \"{\\\"protected\\\":\\\"eyJhbGciOiJFUzI1NiJ9\\\",\"\n            \"\\\"header\\\":\"\n",
                      "markdown": "`            \"mh7AAuHIm4Bh-0Qc_lF5YKt_O8W2Fp5jujGbds9uJdbF9CUAr7t1dnZcAcQjb\"\n            \"KBYNX4BAynRFdiuB--f_nZLgrnbyTyWzO75vRK5h6xBArLIARNPvkSjtQBMHl\"\n            \"b1L07Qe7K0GarZRmB_eSN9383LcOLn6_dO--xi12jzDwusC-eOkHWEsqtFZES\"\n            \"c6BfI7noOPqvhJ1phCnvWh6IeYI2w9QOYEUipUTI8np6LbgGY9Fs98rqVt5AX\"\n            \"LIhWkWywlVmtVrBp0igcN_IoypGlUPQGe77Rw\\\"},\"\n            \"{\\\"protected\\\":\\\"eyJhbGciOiJFUzI1NiJ9\\\",\"\n            \"\\\"header\\\":\"\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testjose.c"
                },
                "region": {
                  "startLine": 1163,
                  "startColumn": 14,
                  "endLine": 1163,
                  "endColumn": 79,
                  "snippet": {
                    "text": "{\n    const char *source = \"{\"\n            \"\\\"payload\\\":\"\n            \"\\\"eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGF\"\n            \"tcGxlLmNvbS9pc19yb290Ijp0cnVlfQ\\\",\"\n            \"\\\"signatures\\\":[\"\n            \"{\\\"protected\\\":\\\"eyJhbGciOiJSUzI1NiJ9\\\",\"\n",
                    "rendered": {
                      "text": "{\n    const char *source = \"{\"\n            \"\\\"payload\\\":\"\n            \"\\\"eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGF\"\n            \"tcGxlLmNvbS9pc19yb290Ijp0cnVlfQ\\\",\"\n            \"\\\"signatures\\\":[\"\n            \"{\\\"protected\\\":\\\"eyJhbGciOiJSUzI1NiJ9\\\",\"\n",
                      "markdown": "`{\n    const char *source = \"{\"\n            \"\\\"payload\\\":\"\n            \"\\\"eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGF\"\n            \"tcGxlLmNvbS9pc19yb290Ijp0cnVlfQ\\\",\"\n            \"\\\"signatures\\\":[\"\n            \"{\\\"protected\\\":\\\"eyJhbGciOiJSUzI1NiJ9\\\",\"\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testjose.c"
                },
                "region": {
                  "startLine": 1127,
                  "startColumn": 12,
                  "endLine": 1127,
                  "endColumn": 78,
                  "snippet": {
                    "text": "\n    const char *source = \"eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9\"\n            \".\"\n            \"eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt\"\n            \"cGxlLmNvbS9pc19yb290Ijp0cnVlfQ\"\n            \".\"\n            \"dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk\";\n",
                    "rendered": {
                      "text": "\n    const char *source = \"eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9\"\n            \".\"\n            \"eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt\"\n            \"cGxlLmNvbS9pc19yb290Ijp0cnVlfQ\"\n            \".\"\n            \"dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk\";\n",
                      "markdown": "`\n    const char *source = \"eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9\"\n            \".\"\n            \"eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt\"\n            \"cGxlLmNvbS9pc19yb290Ijp0cnVlfQ\"\n            \".\"\n            \"dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk\";\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testjose.c"
                },
                "region": {
                  "startLine": 1125,
                  "startColumn": 25,
                  "endLine": 1125,
                  "endColumn": 67,
                  "snippet": {
                    "text": "    apr_json_kv_t *kv;\n    apr_status_t status;\n\n    const char *source = \"eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9\"\n            \".\"\n            \"eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt\"\n            \"cGxlLmNvbS9pc19yb290Ijp0cnVlfQ\"\n",
                    "rendered": {
                      "text": "    apr_json_kv_t *kv;\n    apr_status_t status;\n\n    const char *source = \"eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9\"\n            \".\"\n            \"eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt\"\n            \"cGxlLmNvbS9pc19yb290Ijp0cnVlfQ\"\n",
                      "markdown": "`    apr_json_kv_t *kv;\n    apr_status_t status;\n\n    const char *source = \"eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9\"\n            \".\"\n            \"eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt\"\n            \"cGxlLmNvbS9pc19yb290Ijp0cnVlfQ\"\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testjose.c"
                },
                "region": {
                  "startLine": 1086,
                  "startColumn": 12,
                  "endLine": 1086,
                  "endColumn": 78,
                  "snippet": {
                    "text": "\n    const char *source = \"eyJhbGciOiJub25lIn0\"\n            \".\"\n            \"eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt\"\n            \"cGxlLmNvbS9pc19yb290Ijp0cnVlfQ\"\n            \".\";\n\n",
                    "rendered": {
                      "text": "\n    const char *source = \"eyJhbGciOiJub25lIn0\"\n            \".\"\n            \"eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt\"\n            \"cGxlLmNvbS9pc19yb290Ijp0cnVlfQ\"\n            \".\";\n\n",
                      "markdown": "`\n    const char *source = \"eyJhbGciOiJub25lIn0\"\n            \".\"\n            \"eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt\"\n            \"cGxlLmNvbS9pc19yb290Ijp0cnVlfQ\"\n            \".\";\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testjose.c"
                },
                "region": {
                  "startLine": 952,
                  "startColumn": 12,
                  "endLine": 952,
                  "endColumn": 75,
                  "snippet": {
                    "text": "            \"\\\"UGhIOguC7IuEvf_NPVaXsGMoLOmwvc1GyqlIKOK1nN94nHPoltGRhWhw7Zx0-\"\n            \"kFm1NJn8LE9XShH59_i8J0PH5ZZyNfGy2xGdULU7sHNF6Gp2vPLgNZ__deLKx\"\n            \"GHZ7PcHALUzoOegEI-8E66jX2E4zyJKx-YxzZIItRzC5hlRirb6Y5Cl_p-ko3\"\n            \"YvkkysZIFNPccxRU7qve1WYPxqbb2Yw8kZqa2rMWI5ng8OtvzlV7elprCbuPh\"\n            \"cCdZ6XDP0_F8rkXds2vE4X-ncOIM8hAYHHi29NX0mcKiRaD0-D-ljQTP-cFPg\"\n            \"wCp6X-nZZd9OHBv-B3oWh2TbqmScqXMR4gp_A\\\"},\"\n            \"{\\\"header\\\":\"\n",
                    "rendered": {
                      "text": "            \"\\\"UGhIOguC7IuEvf_NPVaXsGMoLOmwvc1GyqlIKOK1nN94nHPoltGRhWhw7Zx0-\"\n            \"kFm1NJn8LE9XShH59_i8J0PH5ZZyNfGy2xGdULU7sHNF6Gp2vPLgNZ__deLKx\"\n            \"GHZ7PcHALUzoOegEI-8E66jX2E4zyJKx-YxzZIItRzC5hlRirb6Y5Cl_p-ko3\"\n            \"YvkkysZIFNPccxRU7qve1WYPxqbb2Yw8kZqa2rMWI5ng8OtvzlV7elprCbuPh\"\n            \"cCdZ6XDP0_F8rkXds2vE4X-ncOIM8hAYHHi29NX0mcKiRaD0-D-ljQTP-cFPg\"\n            \"wCp6X-nZZd9OHBv-B3oWh2TbqmScqXMR4gp_A\\\"},\"\n            \"{\\\"header\\\":\"\n",
                      "markdown": "`            \"\\\"UGhIOguC7IuEvf_NPVaXsGMoLOmwvc1GyqlIKOK1nN94nHPoltGRhWhw7Zx0-\"\n            \"kFm1NJn8LE9XShH59_i8J0PH5ZZyNfGy2xGdULU7sHNF6Gp2vPLgNZ__deLKx\"\n            \"GHZ7PcHALUzoOegEI-8E66jX2E4zyJKx-YxzZIItRzC5hlRirb6Y5Cl_p-ko3\"\n            \"YvkkysZIFNPccxRU7qve1WYPxqbb2Yw8kZqa2rMWI5ng8OtvzlV7elprCbuPh\"\n            \"cCdZ6XDP0_F8rkXds2vE4X-ncOIM8hAYHHi29NX0mcKiRaD0-D-ljQTP-cFPg\"\n            \"wCp6X-nZZd9OHBv-B3oWh2TbqmScqXMR4gp_A\\\"},\"\n            \"{\\\"header\\\":\"\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testjose.c"
                },
                "region": {
                  "startLine": 874,
                  "startColumn": 12,
                  "endLine": 874,
                  "endColumn": 78,
                  "snippet": {
                    "text": "            109, 97, 103, 105, 110, 97, 116, 105, 111, 110, 46 };\n\n    const char *expect = \"eyJhbGciOiJSU0EtT0FFUCIsImVuYyI6IkEyNTZHQ00ifQ.\"\n            \"OKOawDo13gRp2ojaHV7LFpZcgV7T6DVZKTyKOMTYUmKoTCVJRgckCL9kiMT03JGe\"\n            \"ipsEdY3mx_etLbbWSrFr05kLzcSr4qKAq7YN7e9jwQRb23nfa6c9d-StnImGyFDb\"\n            \"Sv04uVuxIp5Zms1gNxKKK2Da14B8S4rzVRltdYwam_lDp5XnZAYpQdb76FdIKLaV\"\n            \"mqgfwX7XWRxv2322i-vDxRfqNzo_tETKzpVLzfiwQyeyPGLBIO56YJ7eObdv0je8\"\n",
                    "rendered": {
                      "text": "            109, 97, 103, 105, 110, 97, 116, 105, 111, 110, 46 };\n\n    const char *expect = \"eyJhbGciOiJSU0EtT0FFUCIsImVuYyI6IkEyNTZHQ00ifQ.\"\n            \"OKOawDo13gRp2ojaHV7LFpZcgV7T6DVZKTyKOMTYUmKoTCVJRgckCL9kiMT03JGe\"\n            \"ipsEdY3mx_etLbbWSrFr05kLzcSr4qKAq7YN7e9jwQRb23nfa6c9d-StnImGyFDb\"\n            \"Sv04uVuxIp5Zms1gNxKKK2Da14B8S4rzVRltdYwam_lDp5XnZAYpQdb76FdIKLaV\"\n            \"mqgfwX7XWRxv2322i-vDxRfqNzo_tETKzpVLzfiwQyeyPGLBIO56YJ7eObdv0je8\"\n",
                      "markdown": "`            109, 97, 103, 105, 110, 97, 116, 105, 111, 110, 46 };\n\n    const char *expect = \"eyJhbGciOiJSU0EtT0FFUCIsImVuYyI6IkEyNTZHQ00ifQ.\"\n            \"OKOawDo13gRp2ojaHV7LFpZcgV7T6DVZKTyKOMTYUmKoTCVJRgckCL9kiMT03JGe\"\n            \"ipsEdY3mx_etLbbWSrFr05kLzcSr4qKAq7YN7e9jwQRb23nfa6c9d-StnImGyFDb\"\n            \"Sv04uVuxIp5Zms1gNxKKK2Da14B8S4rzVRltdYwam_lDp5XnZAYpQdb76FdIKLaV\"\n            \"mqgfwX7XWRxv2322i-vDxRfqNzo_tETKzpVLzfiwQyeyPGLBIO56YJ7eObdv0je8\"\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testjose.c"
                },
                "region": {
                  "startLine": 812,
                  "startColumn": 14,
                  "endLine": 812,
                  "endColumn": 79,
                  "snippet": {
                    "text": "\n    const char *expect = \"{\"\n            \"\\\"payload\\\":\"\n            \"\\\"eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGF\"\n            \"tcGxlLmNvbS9pc19yb290Ijp0cnVlfQ\\\",\"\n            \"\\\"protected\\\":\\\"eyJhbGciOiJFUzI1NiJ9\\\",\"\n            \"\\\"header\\\":\"\n",
                    "rendered": {
                      "text": "\n    const char *expect = \"{\"\n            \"\\\"payload\\\":\"\n            \"\\\"eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGF\"\n            \"tcGxlLmNvbS9pc19yb290Ijp0cnVlfQ\\\",\"\n            \"\\\"protected\\\":\\\"eyJhbGciOiJFUzI1NiJ9\\\",\"\n            \"\\\"header\\\":\"\n",
                      "markdown": "`\n    const char *expect = \"{\"\n            \"\\\"payload\\\":\"\n            \"\\\"eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGF\"\n            \"tcGxlLmNvbS9pc19yb290Ijp0cnVlfQ\\\",\"\n            \"\\\"protected\\\":\\\"eyJhbGciOiJFUzI1NiJ9\\\",\"\n            \"\\\"header\\\":\"\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testjose.c"
                },
                "region": {
                  "startLine": 742,
                  "startColumn": 12,
                  "endLine": 742,
                  "endColumn": 75,
                  "snippet": {
                    "text": "            \"mh7AAuHIm4Bh-0Qc_lF5YKt_O8W2Fp5jujGbds9uJdbF9CUAr7t1dnZcAcQjb\"\n            \"KBYNX4BAynRFdiuB--f_nZLgrnbyTyWzO75vRK5h6xBArLIARNPvkSjtQBMHl\"\n            \"b1L07Qe7K0GarZRmB_eSN9383LcOLn6_dO--xi12jzDwusC-eOkHWEsqtFZES\"\n            \"c6BfI7noOPqvhJ1phCnvWh6IeYI2w9QOYEUipUTI8np6LbgGY9Fs98rqVt5AX\"\n            \"LIhWkWywlVmtVrBp0igcN_IoypGlUPQGe77Rw\\\"},\"\n            \"{\\\"protected\\\":\\\"eyJhbGciOiJFUzI1NiJ9\\\",\"\n            \"\\\"header\\\":\"\n",
                    "rendered": {
                      "text": "            \"mh7AAuHIm4Bh-0Qc_lF5YKt_O8W2Fp5jujGbds9uJdbF9CUAr7t1dnZcAcQjb\"\n            \"KBYNX4BAynRFdiuB--f_nZLgrnbyTyWzO75vRK5h6xBArLIARNPvkSjtQBMHl\"\n            \"b1L07Qe7K0GarZRmB_eSN9383LcOLn6_dO--xi12jzDwusC-eOkHWEsqtFZES\"\n            \"c6BfI7noOPqvhJ1phCnvWh6IeYI2w9QOYEUipUTI8np6LbgGY9Fs98rqVt5AX\"\n            \"LIhWkWywlVmtVrBp0igcN_IoypGlUPQGe77Rw\\\"},\"\n            \"{\\\"protected\\\":\\\"eyJhbGciOiJFUzI1NiJ9\\\",\"\n            \"\\\"header\\\":\"\n",
                      "markdown": "`            \"mh7AAuHIm4Bh-0Qc_lF5YKt_O8W2Fp5jujGbds9uJdbF9CUAr7t1dnZcAcQjb\"\n            \"KBYNX4BAynRFdiuB--f_nZLgrnbyTyWzO75vRK5h6xBArLIARNPvkSjtQBMHl\"\n            \"b1L07Qe7K0GarZRmB_eSN9383LcOLn6_dO--xi12jzDwusC-eOkHWEsqtFZES\"\n            \"c6BfI7noOPqvhJ1phCnvWh6IeYI2w9QOYEUipUTI8np6LbgGY9Fs98rqVt5AX\"\n            \"LIhWkWywlVmtVrBp0igcN_IoypGlUPQGe77Rw\\\"},\"\n            \"{\\\"protected\\\":\\\"eyJhbGciOiJFUzI1NiJ9\\\",\"\n            \"\\\"header\\\":\"\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testjose.c"
                },
                "region": {
                  "startLine": 731,
                  "startColumn": 14,
                  "endLine": 731,
                  "endColumn": 79,
                  "snippet": {
                    "text": "\n    const char *expect = \"{\"\n            \"\\\"payload\\\":\"\n            \"\\\"eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGF\"\n            \"tcGxlLmNvbS9pc19yb290Ijp0cnVlfQ\\\",\"\n            \"\\\"signatures\\\":[\"\n            \"{\\\"protected\\\":\\\"eyJhbGciOiJSUzI1NiJ9\\\",\"\n",
                    "rendered": {
                      "text": "\n    const char *expect = \"{\"\n            \"\\\"payload\\\":\"\n            \"\\\"eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGF\"\n            \"tcGxlLmNvbS9pc19yb290Ijp0cnVlfQ\\\",\"\n            \"\\\"signatures\\\":[\"\n            \"{\\\"protected\\\":\\\"eyJhbGciOiJSUzI1NiJ9\\\",\"\n",
                      "markdown": "`\n    const char *expect = \"{\"\n            \"\\\"payload\\\":\"\n            \"\\\"eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGF\"\n            \"tcGxlLmNvbS9pc19yb290Ijp0cnVlfQ\\\",\"\n            \"\\\"signatures\\\":[\"\n            \"{\\\"protected\\\":\\\"eyJhbGciOiJSUzI1NiJ9\\\",\"\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testjose.c"
                },
                "region": {
                  "startLine": 671,
                  "startColumn": 12,
                  "endLine": 671,
                  "endColumn": 78,
                  "snippet": {
                    "text": "                       111, 116, 34, 58, 116, 114, 117, 101, 125};\n    const char *expect = \"eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9\"\n            \".\"\n            \"eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt\"\n            \"cGxlLmNvbS9pc19yb290Ijp0cnVlfQ\"\n            \".\"\n            \"dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk\";\n",
                    "rendered": {
                      "text": "                       111, 116, 34, 58, 116, 114, 117, 101, 125};\n    const char *expect = \"eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9\"\n            \".\"\n            \"eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt\"\n            \"cGxlLmNvbS9pc19yb290Ijp0cnVlfQ\"\n            \".\"\n            \"dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk\";\n",
                      "markdown": "`                       111, 116, 34, 58, 116, 114, 117, 101, 125};\n    const char *expect = \"eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9\"\n            \".\"\n            \"eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt\"\n            \"cGxlLmNvbS9pc19yb290Ijp0cnVlfQ\"\n            \".\"\n            \"dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk\";\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testjose.c"
                },
                "region": {
                  "startLine": 669,
                  "startColumn": 25,
                  "endLine": 669,
                  "endColumn": 67,
                  "snippet": {
                    "text": "                       48, 44, 13, 10, 32, 34, 104, 116, 116, 112, 58, 47, 47, 101, 120, 97,\n                       109, 112, 108, 101, 46, 99, 111, 109, 47, 105, 115, 95, 114, 111,\n                       111, 116, 34, 58, 116, 114, 117, 101, 125};\n    const char *expect = \"eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9\"\n            \".\"\n            \"eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt\"\n            \"cGxlLmNvbS9pc19yb290Ijp0cnVlfQ\"\n",
                    "rendered": {
                      "text": "                       48, 44, 13, 10, 32, 34, 104, 116, 116, 112, 58, 47, 47, 101, 120, 97,\n                       109, 112, 108, 101, 46, 99, 111, 109, 47, 105, 115, 95, 114, 111,\n                       111, 116, 34, 58, 116, 114, 117, 101, 125};\n    const char *expect = \"eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9\"\n            \".\"\n            \"eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt\"\n            \"cGxlLmNvbS9pc19yb290Ijp0cnVlfQ\"\n",
                      "markdown": "`                       48, 44, 13, 10, 32, 34, 104, 116, 116, 112, 58, 47, 47, 101, 120, 97,\n                       109, 112, 108, 101, 46, 99, 111, 109, 47, 105, 115, 95, 114, 111,\n                       111, 116, 34, 58, 116, 114, 117, 101, 125};\n    const char *expect = \"eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9\"\n            \".\"\n            \"eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt\"\n            \"cGxlLmNvbS9pc19yb290Ijp0cnVlfQ\"\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testjose.c"
                },
                "region": {
                  "startLine": 618,
                  "startColumn": 12,
                  "endLine": 618,
                  "endColumn": 78,
                  "snippet": {
                    "text": "                       111, 116, 34, 58, 116, 114, 117, 101, 125};\n    const char *expect = \"eyJhbGciOiJub25lIn0\"\n            \".\"\n            \"eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt\"\n            \"cGxlLmNvbS9pc19yb290Ijp0cnVlfQ\"\n            \".\";\n\n",
                    "rendered": {
                      "text": "                       111, 116, 34, 58, 116, 114, 117, 101, 125};\n    const char *expect = \"eyJhbGciOiJub25lIn0\"\n            \".\"\n            \"eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt\"\n            \"cGxlLmNvbS9pc19yb290Ijp0cnVlfQ\"\n            \".\";\n\n",
                      "markdown": "`                       111, 116, 34, 58, 116, 114, 117, 101, 125};\n    const char *expect = \"eyJhbGciOiJub25lIn0\"\n            \".\"\n            \"eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt\"\n            \"cGxlLmNvbS9pc19yb290Ijp0cnVlfQ\"\n            \".\";\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/NWGNUproc_child"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 25,
                  "endLine": 114,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n#\n# If this is specified, it will override VERSION value in \n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                    "rendered": {
                      "text": "\n#\n# If this is specified, it will override VERSION value in \n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                      "markdown": "`\n#\n# If this is specified, it will override VERSION value in \n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/NWGNUproc_child"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 30,
                  "endLine": 6,
                  "endColumn": 65,
                  "snippet": {
                    "text": "#\n\n#\n# Get the 'head' of the build environment if necessary.  This includes default\n# targets and paths to tools\n#\n\n",
                    "rendered": {
                      "text": "#\n\n#\n# Get the 'head' of the build environment if necessary.  This includes default\n# targets and paths to tools\n#\n\n",
                      "markdown": "`#\n\n#\n# Get the 'head' of the build environment if necessary.  This includes default\n# targets and paths to tools\n#\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/NWGNUproc_child"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 27,
                  "endLine": 15,
                  "endColumn": 31,
                  "snippet": {
                    "text": "endif\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                    "rendered": {
                      "text": "endif\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                      "markdown": "`endif\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/NWGNUmemcachedmock"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 25,
                  "endLine": 114,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n#\n# If this is specified, it will override VERSION value in \n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                    "rendered": {
                      "text": "\n#\n# If this is specified, it will override VERSION value in \n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                      "markdown": "`\n#\n# If this is specified, it will override VERSION value in \n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/NWGNUmemcachedmock"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 30,
                  "endLine": 6,
                  "endColumn": 65,
                  "snippet": {
                    "text": "#\n\n#\n# Get the 'head' of the build environment if necessary.  This includes default\n# targets and paths to tools\n#\n\n",
                    "rendered": {
                      "text": "#\n\n#\n# Get the 'head' of the build environment if necessary.  This includes default\n# targets and paths to tools\n#\n\n",
                      "markdown": "`#\n\n#\n# Get the 'head' of the build environment if necessary.  This includes default\n# targets and paths to tools\n#\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/NWGNUmemcachedmock"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 27,
                  "endLine": 15,
                  "endColumn": 31,
                  "snippet": {
                    "text": "endif\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                    "rendered": {
                      "text": "endif\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                      "markdown": "`endif\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/NWGNUaprtest"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 25,
                  "endLine": 113,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n#\n# If this is specified, it will override VERSION value in \n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                    "rendered": {
                      "text": "\n#\n# If this is specified, it will override VERSION value in \n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                      "markdown": "`\n#\n# If this is specified, it will override VERSION value in \n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/NWGNUaprtest"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 30,
                  "endLine": 6,
                  "endColumn": 65,
                  "snippet": {
                    "text": "#\n\n#\n# Get the 'head' of the build environment if necessary.  This includes default\n# targets and paths to tools\n#\n\n",
                    "rendered": {
                      "text": "#\n\n#\n# Get the 'head' of the build environment if necessary.  This includes default\n# targets and paths to tools\n#\n\n",
                      "markdown": "`#\n\n#\n# Get the 'head' of the build environment if necessary.  This includes default\n# targets and paths to tools\n#\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/NWGNUaprtest"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 27,
                  "endLine": 15,
                  "endColumn": 31,
                  "snippet": {
                    "text": "endif\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                    "rendered": {
                      "text": "endif\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                      "markdown": "`endif\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testlock.c"
                },
                "region": {
                  "startLine": 443,
                  "startColumn": 49,
                  "endLine": 443,
                  "endColumn": 58,
                  "snippet": {
                    "text": "    JOIN_WITH_SUCCESS(tc, th);\n\n    ABTS_ASSERT(tc, \"Too many retries\", i < MAX_RETRY);\n    APR_ASSERT_SUCCESS(tc, \"Unable to destroy the timeout mutex\",\n                       apr_thread_mutex_destroy(timeout_mutex));\n}\n\n",
                    "rendered": {
                      "text": "    JOIN_WITH_SUCCESS(tc, th);\n\n    ABTS_ASSERT(tc, \"Too many retries\", i < MAX_RETRY);\n    APR_ASSERT_SUCCESS(tc, \"Unable to destroy the timeout mutex\",\n                       apr_thread_mutex_destroy(timeout_mutex));\n}\n\n",
                      "markdown": "`    JOIN_WITH_SUCCESS(tc, th);\n\n    ABTS_ASSERT(tc, \"Too many retries\", i < MAX_RETRY);\n    APR_ASSERT_SUCCESS(tc, \"Unable to destroy the timeout mutex\",\n                       apr_thread_mutex_destroy(timeout_mutex));\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testlock.c"
                },
                "region": {
                  "startLine": 434,
                  "startColumn": 64,
                  "endLine": 434,
                  "endColumn": 73,
                  "snippet": {
                    "text": "            continue;\n        }\n        ABTS_INT_EQUAL(tc, 1, APR_STATUS_IS_TIMEUP(s));\n        ABTS_ASSERT(tc, \"Timer returned too late\", end - begin - timeout < 1000000);\n        break;\n    }\n\n",
                    "rendered": {
                      "text": "            continue;\n        }\n        ABTS_INT_EQUAL(tc, 1, APR_STATUS_IS_TIMEUP(s));\n        ABTS_ASSERT(tc, \"Timer returned too late\", end - begin - timeout < 1000000);\n        break;\n    }\n\n",
                      "markdown": "`            continue;\n        }\n        ABTS_INT_EQUAL(tc, 1, APR_STATUS_IS_TIMEUP(s));\n        ABTS_ASSERT(tc, \"Timer returned too late\", end - begin - timeout < 1000000);\n        break;\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testlock.c"
                },
                "region": {
                  "startLine": 423,
                  "startColumn": 3,
                  "endLine": 423,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    wait_for_flag(flag, 1); /* the thread will set flag to 1 once the\n                             * timeout_mutex is locked. */\n\n    timeout = apr_time_from_sec(5);\n\n    for (i = 0; i < MAX_RETRY; i++) {\n        begin = apr_time_now();\n",
                    "rendered": {
                      "text": "    wait_for_flag(flag, 1); /* the thread will set flag to 1 once the\n                             * timeout_mutex is locked. */\n\n    timeout = apr_time_from_sec(5);\n\n    for (i = 0; i < MAX_RETRY; i++) {\n        begin = apr_time_now();\n",
                      "markdown": "`    wait_for_flag(flag, 1); /* the thread will set flag to 1 once the\n                             * timeout_mutex is locked. */\n\n    timeout = apr_time_from_sec(5);\n\n    for (i = 0; i < MAX_RETRY; i++) {\n        begin = apr_time_now();\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testlock.c"
                },
                "region": {
                  "startLine": 389,
                  "startColumn": 64,
                  "endLine": 389,
                  "endColumn": 73,
                  "snippet": {
                    "text": "            continue;\n        }\n        ABTS_INT_EQUAL(tc, 1, APR_STATUS_IS_TIMEUP(s));\n        ABTS_ASSERT(tc, \"Timer returned too late\", end - begin - timeout < 500000);\n        break;\n    }\n    ABTS_ASSERT(tc, \"Too many retries\", i < MAX_RETRY);\n",
                    "rendered": {
                      "text": "            continue;\n        }\n        ABTS_INT_EQUAL(tc, 1, APR_STATUS_IS_TIMEUP(s));\n        ABTS_ASSERT(tc, \"Timer returned too late\", end - begin - timeout < 500000);\n        break;\n    }\n    ABTS_ASSERT(tc, \"Too many retries\", i < MAX_RETRY);\n",
                      "markdown": "`            continue;\n        }\n        ABTS_INT_EQUAL(tc, 1, APR_STATUS_IS_TIMEUP(s));\n        ABTS_ASSERT(tc, \"Timer returned too late\", end - begin - timeout < 500000);\n        break;\n    }\n    ABTS_ASSERT(tc, \"Too many retries\", i < MAX_RETRY);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testlock.c"
                },
                "region": {
                  "startLine": 375,
                  "startColumn": 3,
                  "endLine": 375,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    ABTS_INT_EQUAL(tc, APR_SUCCESS, s);\n    ABTS_PTR_NOTNULL(tc, timeout_cond);\n\n    timeout = apr_time_from_sec(5);\n\n    for (i = 0; i < MAX_RETRY; i++) {\n        apr_thread_mutex_lock(timeout_mutex);\n",
                    "rendered": {
                      "text": "    ABTS_INT_EQUAL(tc, APR_SUCCESS, s);\n    ABTS_PTR_NOTNULL(tc, timeout_cond);\n\n    timeout = apr_time_from_sec(5);\n\n    for (i = 0; i < MAX_RETRY; i++) {\n        apr_thread_mutex_lock(timeout_mutex);\n",
                      "markdown": "`    ABTS_INT_EQUAL(tc, APR_SUCCESS, s);\n    ABTS_PTR_NOTNULL(tc, timeout_cond);\n\n    timeout = apr_time_from_sec(5);\n\n    for (i = 0; i < MAX_RETRY; i++) {\n        apr_thread_mutex_lock(timeout_mutex);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testlock.c"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 3,
                  "endLine": 251,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    i = 0;\n    x = 0;\n\n    timeout = apr_time_from_sec(5);\n\n    s1 = apr_thread_create(&t1, NULL, thread_mutex_function, &timeout, p);\n    ABTS_INT_EQUAL(tc, APR_SUCCESS, s1);\n",
                    "rendered": {
                      "text": "    i = 0;\n    x = 0;\n\n    timeout = apr_time_from_sec(5);\n\n    s1 = apr_thread_create(&t1, NULL, thread_mutex_function, &timeout, p);\n    ABTS_INT_EQUAL(tc, APR_SUCCESS, s1);\n",
                      "markdown": "`    i = 0;\n    x = 0;\n\n    timeout = apr_time_from_sec(5);\n\n    s1 = apr_thread_create(&t1, NULL, thread_mutex_function, &timeout, p);\n    ABTS_INT_EQUAL(tc, APR_SUCCESS, s1);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testlock.c"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 49,
                  "endLine": 147,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\n    rv = apr_thread_mutex_lock(timeout_mutex);\n    if (rv) {\n        fprintf(stderr, \"testlock: failed to lock timeout mutex, errno %d\\n\", rv);\n        apr_thread_exit(thd, rv);\n    }\n\n",
                    "rendered": {
                      "text": "\n    rv = apr_thread_mutex_lock(timeout_mutex);\n    if (rv) {\n        fprintf(stderr, \"testlock: failed to lock timeout mutex, errno %d\\n\", rv);\n        apr_thread_exit(thd, rv);\n    }\n\n",
                      "markdown": "`\n    rv = apr_thread_mutex_lock(timeout_mutex);\n    if (rv) {\n        fprintf(stderr, \"testlock: failed to lock timeout mutex, errno %d\\n\", rv);\n        apr_thread_exit(thd, rv);\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/teststrmatch.c"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 33,
                  "endLine": 39,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    const char *match = NULL;\n    const char *input1 = \"string that contains a patterN...\";\n    const char *input2 = \"string that contains a pattern...\";\n    const char *input3 = \"pattern at the start of a string\";\n    const char *input4 = \"string that ends with a pattern\";\n    const char *input5 = \"patter\\200n not found, negative chars in input\";\n    const char *input6 = \"patter\\200n, negative chars, contains pattern...\";\n",
                    "rendered": {
                      "text": "    const char *match = NULL;\n    const char *input1 = \"string that contains a patterN...\";\n    const char *input2 = \"string that contains a pattern...\";\n    const char *input3 = \"pattern at the start of a string\";\n    const char *input4 = \"string that ends with a pattern\";\n    const char *input5 = \"patter\\200n not found, negative chars in input\";\n    const char *input6 = \"patter\\200n, negative chars, contains pattern...\";\n",
                      "markdown": "`    const char *match = NULL;\n    const char *input1 = \"string that contains a patterN...\";\n    const char *input2 = \"string that contains a pattern...\";\n    const char *input3 = \"pattern at the start of a string\";\n    const char *input4 = \"string that ends with a pattern\";\n    const char *input5 = \"patter\\200n not found, negative chars in input\";\n    const char *input6 = \"patter\\200n, negative chars, contains pattern...\";\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/teststr.c"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 28,
                  "endLine": 163,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n     rv = apr_strerror(APR_TIMEUP, buf, sizeof buf);\n     ABTS_PTR_EQUAL(tc, buf, rv);\n     ABTS_STR_EQUAL(tc, \"The timeout specified has expired\", buf);\n\n     /* throw some randomish numbers at it to check for robustness */\n     for (n = 1; n < 1000000; n *= 2) {\n",
                    "rendered": {
                      "text": "\n     rv = apr_strerror(APR_TIMEUP, buf, sizeof buf);\n     ABTS_PTR_EQUAL(tc, buf, rv);\n     ABTS_STR_EQUAL(tc, \"The timeout specified has expired\", buf);\n\n     /* throw some randomish numbers at it to check for robustness */\n     for (n = 1; n < 1000000; n *= 2) {\n",
                      "markdown": "`\n     rv = apr_strerror(APR_TIMEUP, buf, sizeof buf);\n     ABTS_PTR_EQUAL(tc, buf, rv);\n     ABTS_STR_EQUAL(tc, \"The timeout specified has expired\", buf);\n\n     /* throw some randomish numbers at it to check for robustness */\n     for (n = 1; n < 1000000; n *= 2) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testrmm.c"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 18,
                  "endLine": 75,
                  "endColumn": 22,
                  "snippet": {
                    "text": "    /* Checking each fragment for address alignment */\n    for (i = 0; i < FRAG_COUNT; i++) {\n        char *c = apr_rmm_addr_get(rmm, off[i]);\n        apr_size_t sc = (apr_size_t)c;\n\n        ABTS_TRUE(tc, !!off[i]);\n        ABTS_TRUE(tc, !(sc & 7));\n",
                    "rendered": {
                      "text": "    /* Checking each fragment for address alignment */\n    for (i = 0; i < FRAG_COUNT; i++) {\n        char *c = apr_rmm_addr_get(rmm, off[i]);\n        apr_size_t sc = (apr_size_t)c;\n\n        ABTS_TRUE(tc, !!off[i]);\n        ABTS_TRUE(tc, !(sc & 7));\n",
                      "markdown": "`    /* Checking each fragment for address alignment */\n    for (i = 0; i < FRAG_COUNT; i++) {\n        char *c = apr_rmm_addr_get(rmm, off[i]);\n        apr_size_t sc = (apr_size_t)c;\n\n        ABTS_TRUE(tc, !!off[i]);\n        ABTS_TRUE(tc, !(sc & 7));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/docs/non_apr_programs"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 8,
                  "endLine": 5,
                  "endColumn": 16,
                  "snippet": {
                    "text": "use APR?  These darn incomplete types don't let me fill out the APR types.\n\nThe APR developers acknowledge that most programs are not using APR, and\nwe don't expect them to migrate to using APR just because APR has been\nreleased.  So, we have provided a way for non-APR'ized programs to interact\nvery cleanly with APR.\n\n",
                    "rendered": {
                      "text": "use APR?  These darn incomplete types don't let me fill out the APR types.\n\nThe APR developers acknowledge that most programs are not using APR, and\nwe don't expect them to migrate to using APR just because APR has been\nreleased.  So, we have provided a way for non-APR'ized programs to interact\nvery cleanly with APR.\n\n",
                      "markdown": "`use APR?  These darn incomplete types don't let me fill out the APR types.\n\nThe APR developers acknowledge that most programs are not using APR, and\nwe don't expect them to migrate to using APR just because APR has been\nreleased.  So, we have provided a way for non-APR'ized programs to interact\nvery cleanly with APR.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/docs/win32_builds.html"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 37,
                  "endLine": 43,
                  "endColumn": 41,
                  "snippet": {
                    "text": "   (E.g. both libapr.dll and libapr.pdb should be copied to the same path.)</p>\n\n<p>The static symbols will only be fully usable if your application does <em>not<em>\n   link with the /pdbtype:sept flag!  At the time your application links to\n   an APR library, the corresponding _src.pdb file should exist in the original\n   path the library was built, or it may be sufficient to keep the _src.pdb file\n   in the same path as the library file.  (E.g. apr.lib and apr_src.pdb should\n",
                    "rendered": {
                      "text": "   (E.g. both libapr.dll and libapr.pdb should be copied to the same path.)</p>\n\n<p>The static symbols will only be fully usable if your application does <em>not<em>\n   link with the /pdbtype:sept flag!  At the time your application links to\n   an APR library, the corresponding _src.pdb file should exist in the original\n   path the library was built, or it may be sufficient to keep the _src.pdb file\n   in the same path as the library file.  (E.g. apr.lib and apr_src.pdb should\n",
                      "markdown": "`   (E.g. both libapr.dll and libapr.pdb should be copied to the same path.)</p>\n\n<p>The static symbols will only be fully usable if your application does <em>not<em>\n   link with the /pdbtype:sept flag!  At the time your application links to\n   an APR library, the corresponding _src.pdb file should exist in the original\n   path the library was built, or it may be sufficient to keep the _src.pdb file\n   in the same path as the library file.  (E.g. apr.lib and apr_src.pdb should\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/docs/win32_builds.html"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 44,
                  "endLine": 43,
                  "endColumn": 50,
                  "snippet": {
                    "text": "   (E.g. both libapr.dll and libapr.pdb should be copied to the same path.)</p>\n\n<p>The static symbols will only be fully usable if your application does <em>not<em>\n   link with the /pdbtype:sept flag!  At the time your application links to\n   an APR library, the corresponding _src.pdb file should exist in the original\n   path the library was built, or it may be sufficient to keep the _src.pdb file\n   in the same path as the library file.  (E.g. apr.lib and apr_src.pdb should\n",
                    "rendered": {
                      "text": "   (E.g. both libapr.dll and libapr.pdb should be copied to the same path.)</p>\n\n<p>The static symbols will only be fully usable if your application does <em>not<em>\n   link with the /pdbtype:sept flag!  At the time your application links to\n   an APR library, the corresponding _src.pdb file should exist in the original\n   path the library was built, or it may be sufficient to keep the _src.pdb file\n   in the same path as the library file.  (E.g. apr.lib and apr_src.pdb should\n",
                      "markdown": "`   (E.g. both libapr.dll and libapr.pdb should be copied to the same path.)</p>\n\n<p>The static symbols will only be fully usable if your application does <em>not<em>\n   link with the /pdbtype:sept flag!  At the time your application links to\n   an APR library, the corresponding _src.pdb file should exist in the original\n   path the library was built, or it may be sufficient to keep the _src.pdb file\n   in the same path as the library file.  (E.g. apr.lib and apr_src.pdb should\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/docs/incomplete_types"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 13,
                  "endLine": 81,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\nAPR is trying hard to provide a balance of incomplete and complete types, \nbut like all things, sometimes the developers make mistakes.  If you are\nusing APR and find that there is an incomplete type that doesn't need to be\nan incomplete type, please let us know, we are more than willing to listen\nand design parts of APR that do not use incomplete types.\n\n",
                    "rendered": {
                      "text": "\nAPR is trying hard to provide a balance of incomplete and complete types, \nbut like all things, sometimes the developers make mistakes.  If you are\nusing APR and find that there is an incomplete type that doesn't need to be\nan incomplete type, please let us know, we are more than willing to listen\nand design parts of APR that do not use incomplete types.\n\n",
                      "markdown": "`\nAPR is trying hard to provide a balance of incomplete and complete types, \nbut like all things, sometimes the developers make mistakes.  If you are\nusing APR and find that there is an incomplete type that doesn't need to be\nan incomplete type, please let us know, we are more than willing to listen\nand design parts of APR that do not use incomplete types.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/docs/incomplete_types"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 40,
                  "endLine": 73,
                  "endColumn": 46,
                  "snippet": {
                    "text": "platforms.\n\nHaving said all of that, sometimes incomplete types just don't make sense.\nFor example, the first implementation of time functions used incomplete types,\nwhich added a layer of complexity that turned out to be unnecessary.  If\na platform cannot provide a simple number that represents the number of seconds\nelapsed since a specified date and time, then APR doesn't really want to\n",
                    "rendered": {
                      "text": "platforms.\n\nHaving said all of that, sometimes incomplete types just don't make sense.\nFor example, the first implementation of time functions used incomplete types,\nwhich added a layer of complexity that turned out to be unnecessary.  If\na platform cannot provide a simple number that represents the number of seconds\nelapsed since a specified date and time, then APR doesn't really want to\n",
                      "markdown": "`platforms.\n\nHaving said all of that, sometimes incomplete types just don't make sense.\nFor example, the first implementation of time functions used incomplete types,\nwhich added a layer of complexity that turned out to be unnecessary.  If\na platform cannot provide a simple number that represents the number of seconds\nelapsed since a specified date and time, then APR doesn't really want to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbm/NWGNUmakefile"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 25,
                  "endLine": 114,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n#\n# If this is specified, it will override VERSION value in\n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                    "rendered": {
                      "text": "\n#\n# If this is specified, it will override VERSION value in\n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                      "markdown": "`\n#\n# If this is specified, it will override VERSION value in\n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbm/NWGNUmakefile"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 30,
                  "endLine": 9,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\t$(EOLIST)\n\n#\n# Get the 'head' of the build environment.  This includes default targets and\n# paths to tools\n#\n\n",
                    "rendered": {
                      "text": "\t$(EOLIST)\n\n#\n# Get the 'head' of the build environment.  This includes default targets and\n# paths to tools\n#\n\n",
                      "markdown": "`\t$(EOLIST)\n\n#\n# Get the 'head' of the build environment.  This includes default targets and\n# paths to tools\n#\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbm/NWGNUmakefile"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 27,
                  "endLine": 23,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                    "rendered": {
                      "text": "#\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                      "markdown": "`#\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_errno.h"
                },
                "region": {
                  "startLine": 623,
                  "startColumn": 7,
                  "endLine": 623,
                  "endColumn": 15,
                  "snippet": {
                    "text": " */\n#define APR_STATUS_IS_ENOTIMPL(s)       ((s) == APR_ENOTIMPL)\n/**\n * Two passwords do not match.\n * @warning\n * always use this test, as platform-specific variances may meet this\n * more than one error code\n",
                    "rendered": {
                      "text": " */\n#define APR_STATUS_IS_ENOTIMPL(s)       ((s) == APR_ENOTIMPL)\n/**\n * Two passwords do not match.\n * @warning\n * always use this test, as platform-specific variances may meet this\n * more than one error code\n",
                      "markdown": "` */\n#define APR_STATUS_IS_ENOTIMPL(s)       ((s) == APR_ENOTIMPL)\n/**\n * Two passwords do not match.\n * @warning\n * always use this test, as platform-specific variances may meet this\n * more than one error code\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_errno.h"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 26,
                  "endLine": 277,
                  "endColumn": 34,
                  "snippet": {
                    "text": " * APR_ENOTIMPL       The APR function has not been implemented on this\n *                    platform, either because nobody has gotten to it yet,\n *                    or the function is impossible on this platform.\n * APR_EMISMATCH      Two passwords do not match.\n * APR_EABSOLUTE      The given path was absolute.\n * APR_ERELATIVE      The given path was relative.\n * APR_EINCOMPLETE    The given path was neither relative nor absolute.\n",
                    "rendered": {
                      "text": " * APR_ENOTIMPL       The APR function has not been implemented on this\n *                    platform, either because nobody has gotten to it yet,\n *                    or the function is impossible on this platform.\n * APR_EMISMATCH      Two passwords do not match.\n * APR_EABSOLUTE      The given path was absolute.\n * APR_ERELATIVE      The given path was relative.\n * APR_EINCOMPLETE    The given path was neither relative nor absolute.\n",
                      "markdown": "` * APR_ENOTIMPL       The APR function has not been implemented on this\n *                    platform, either because nobody has gotten to it yet,\n *                    or the function is impossible on this platform.\n * APR_EMISMATCH      Two passwords do not match.\n * APR_EABSOLUTE      The given path was absolute.\n * APR_ERELATIVE      The given path was relative.\n * APR_EINCOMPLETE    The given path was neither relative nor absolute.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_network_io.h"
                },
                "region": {
                  "startLine": 474,
                  "startColumn": 49,
                  "endLine": 474,
                  "endColumn": 57,
                  "snippet": {
                    "text": " * @remark Results can vary significantly between platforms\n * when processing wildcard socket addresses.\n */\nAPR_DECLARE(apr_status_t) apr_getnameinfo(char **hostname,\n                                          apr_sockaddr_t *sa,\n                                          apr_int32_t flags);\n\n",
                    "rendered": {
                      "text": " * @remark Results can vary significantly between platforms\n * when processing wildcard socket addresses.\n */\nAPR_DECLARE(apr_status_t) apr_getnameinfo(char **hostname,\n                                          apr_sockaddr_t *sa,\n                                          apr_int32_t flags);\n\n",
                      "markdown": "` * @remark Results can vary significantly between platforms\n * when processing wildcard socket addresses.\n */\nAPR_DECLARE(apr_status_t) apr_getnameinfo(char **hostname,\n                                          apr_sockaddr_t *sa,\n                                          apr_int32_t flags);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_network_io.h"
                },
                "region": {
                  "startLine": 423,
                  "startColumn": 54,
                  "endLine": 423,
                  "endColumn": 62,
                  "snippet": {
                    "text": " * @param p The pool for the apr_sockaddr_t and associated storage.\n */\nAPR_DECLARE(apr_status_t) apr_sockaddr_info_get(apr_sockaddr_t **sa,\n                                          const char *hostname,\n                                          apr_int32_t family,\n                                          apr_port_t port,\n                                          apr_int32_t flags,\n",
                    "rendered": {
                      "text": " * @param p The pool for the apr_sockaddr_t and associated storage.\n */\nAPR_DECLARE(apr_status_t) apr_sockaddr_info_get(apr_sockaddr_t **sa,\n                                          const char *hostname,\n                                          apr_int32_t family,\n                                          apr_port_t port,\n                                          apr_int32_t flags,\n",
                      "markdown": "` * @param p The pool for the apr_sockaddr_t and associated storage.\n */\nAPR_DECLARE(apr_status_t) apr_sockaddr_info_get(apr_sockaddr_t **sa,\n                                          const char *hostname,\n                                          apr_int32_t family,\n                                          apr_port_t port,\n                                          apr_int32_t flags,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_network_io.h"
                },
                "region": {
                  "startLine": 243,
                  "startColumn": 10,
                  "endLine": 243,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    /** The pool to use... */\n    apr_pool_t *pool;\n    /** The hostname */\n    char *hostname;\n    /** Either a string of the port number or the service name for the port */\n    char *servname;\n    /** The numeric port */\n",
                    "rendered": {
                      "text": "    /** The pool to use... */\n    apr_pool_t *pool;\n    /** The hostname */\n    char *hostname;\n    /** Either a string of the port number or the service name for the port */\n    char *servname;\n    /** The numeric port */\n",
                      "markdown": "`    /** The pool to use... */\n    apr_pool_t *pool;\n    /** The hostname */\n    char *hostname;\n    /** Either a string of the port number or the service name for the port */\n    char *servname;\n    /** The numeric port */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/pkg/buildpkg.sh"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 52,
                  "endLine": 8,
                  "snippet": {
                    "text": "# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/pkg/buildpkg.sh"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 68,
                  "endLine": 63,
                  "endColumn": 73,
                  "snippet": {
                    "text": "current=`pwd`\ncd $TEMPDIR$PREFIX\necho \"i pkginfo=./pkginfo\" > prototype\nfind . -print | grep -v ./prototype | grep -v ./pkginfo | pkgproto | awk '{print $1\" \"$2\" \"$3\" \"$4\" root bin\"}' >> prototype\nmkdir $TEMPDIR/pkg\npkgmk -r $TEMPDIR$PREFIX -d $TEMPDIR/pkg\n\n",
                    "rendered": {
                      "text": "current=`pwd`\ncd $TEMPDIR$PREFIX\necho \"i pkginfo=./pkginfo\" > prototype\nfind . -print | grep -v ./prototype | grep -v ./pkginfo | pkgproto | awk '{print $1\" \"$2\" \"$3\" \"$4\" root bin\"}' >> prototype\nmkdir $TEMPDIR/pkg\npkgmk -r $TEMPDIR$PREFIX -d $TEMPDIR/pkg\n\n",
                      "markdown": "`current=`pwd`\ncd $TEMPDIR$PREFIX\necho \"i pkginfo=./pkginfo\" > prototype\nfind . -print | grep -v ./prototype | grep -v ./pkginfo | pkgproto | awk '{print $1\" \"$2\" \"$3\" \"$4\" root bin\"}' >> prototype\nmkdir $TEMPDIR/pkg\npkgmk -r $TEMPDIR$PREFIX -d $TEMPDIR/pkg\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/pkg/buildpkg.sh"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 37,
                  "endLine": 63,
                  "endColumn": 43,
                  "snippet": {
                    "text": "current=`pwd`\ncd $TEMPDIR$PREFIX\necho \"i pkginfo=./pkginfo\" > prototype\nfind . -print | grep -v ./prototype | grep -v ./pkginfo | pkgproto | awk '{print $1\" \"$2\" \"$3\" \"$4\" root bin\"}' >> prototype\nmkdir $TEMPDIR/pkg\npkgmk -r $TEMPDIR$PREFIX -d $TEMPDIR/pkg\n\n",
                    "rendered": {
                      "text": "current=`pwd`\ncd $TEMPDIR$PREFIX\necho \"i pkginfo=./pkginfo\" > prototype\nfind . -print | grep -v ./prototype | grep -v ./pkginfo | pkgproto | awk '{print $1\" \"$2\" \"$3\" \"$4\" root bin\"}' >> prototype\nmkdir $TEMPDIR/pkg\npkgmk -r $TEMPDIR$PREFIX -d $TEMPDIR/pkg\n\n",
                      "markdown": "`current=`pwd`\ncd $TEMPDIR$PREFIX\necho \"i pkginfo=./pkginfo\" > prototype\nfind . -print | grep -v ./prototype | grep -v ./pkginfo | pkgproto | awk '{print $1\" \"$2\" \"$3\" \"$4\" root bin\"}' >> prototype\nmkdir $TEMPDIR/pkg\npkgmk -r $TEMPDIR$PREFIX -d $TEMPDIR/pkg\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/pkg/buildpkg.sh"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 15,
                  "endLine": 63,
                  "endColumn": 21,
                  "snippet": {
                    "text": "current=`pwd`\ncd $TEMPDIR$PREFIX\necho \"i pkginfo=./pkginfo\" > prototype\nfind . -print | grep -v ./prototype | grep -v ./pkginfo | pkgproto | awk '{print $1\" \"$2\" \"$3\" \"$4\" root bin\"}' >> prototype\nmkdir $TEMPDIR/pkg\npkgmk -r $TEMPDIR$PREFIX -d $TEMPDIR/pkg\n\n",
                    "rendered": {
                      "text": "current=`pwd`\ncd $TEMPDIR$PREFIX\necho \"i pkginfo=./pkginfo\" > prototype\nfind . -print | grep -v ./prototype | grep -v ./pkginfo | pkgproto | awk '{print $1\" \"$2\" \"$3\" \"$4\" root bin\"}' >> prototype\nmkdir $TEMPDIR/pkg\npkgmk -r $TEMPDIR$PREFIX -d $TEMPDIR/pkg\n\n",
                      "markdown": "`current=`pwd`\ncd $TEMPDIR$PREFIX\necho \"i pkginfo=./pkginfo\" > prototype\nfind . -print | grep -v ./prototype | grep -v ./pkginfo | pkgproto | awk '{print $1\" \"$2\" \"$3\" \"$4\" root bin\"}' >> prototype\nmkdir $TEMPDIR/pkg\npkgmk -r $TEMPDIR$PREFIX -d $TEMPDIR/pkg\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/pkg/buildpkg.sh"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 38,
                  "endLine": 63,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ncurrent=`pwd`\ncd $TEMPDIR$PREFIX\necho \"i pkginfo=./pkginfo\" > prototype\nfind . -print | grep -v ./prototype | grep -v ./pkginfo | pkgproto | awk '{print $1\" \"$2\" \"$3\" \"$4\" root bin\"}' >> prototype\nmkdir $TEMPDIR/pkg\npkgmk -r $TEMPDIR$PREFIX -d $TEMPDIR/pkg\n\n",
                    "rendered": {
                      "text": "\ncurrent=`pwd`\ncd $TEMPDIR$PREFIX\necho \"i pkginfo=./pkginfo\" > prototype\nfind . -print | grep -v ./prototype | grep -v ./pkginfo | pkgproto | awk '{print $1\" \"$2\" \"$3\" \"$4\" root bin\"}' >> prototype\nmkdir $TEMPDIR/pkg\npkgmk -r $TEMPDIR$PREFIX -d $TEMPDIR/pkg\n\n",
                      "markdown": "`\ncurrent=`pwd`\ncd $TEMPDIR$PREFIX\necho \"i pkginfo=./pkginfo\" > prototype\nfind . -print | grep -v ./prototype | grep -v ./pkginfo | pkgproto | awk '{print $1\" \"$2\" \"$3\" \"$4\" root bin\"}' >> prototype\nmkdir $TEMPDIR/pkg\npkgmk -r $TEMPDIR$PREFIX -d $TEMPDIR/pkg\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/pkg/buildpkg.sh"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 19,
                  "endLine": 58,
                  "endColumn": 3,
                  "snippet": {
                    "text": "make\nmake install DESTDIR=$TEMPDIR\nrm $TEMPDIR$PREFIX/lib/apr.exp\n. build/pkg/pkginfo\ncp build/pkg/pkginfo $TEMPDIR$PREFIX\n\ncurrent=`pwd`\ncd $TEMPDIR$PREFIX\n",
                    "rendered": {
                      "text": "make\nmake install DESTDIR=$TEMPDIR\nrm $TEMPDIR$PREFIX/lib/apr.exp\n. build/pkg/pkginfo\ncp build/pkg/pkginfo $TEMPDIR$PREFIX\n\ncurrent=`pwd`\ncd $TEMPDIR$PREFIX\n",
                      "markdown": "`make\nmake install DESTDIR=$TEMPDIR\nrm $TEMPDIR$PREFIX/lib/apr.exp\n. build/pkg/pkginfo\ncp build/pkg/pkginfo $TEMPDIR$PREFIX\n\ncurrent=`pwd`\ncd $TEMPDIR$PREFIX\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/pkg/buildpkg.sh"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 27,
                  "endLine": 32,
                  "endColumn": 32,
                  "snippet": {
                    "text": "do\n  # Normalize\n  case \"$1\" in\n  -*=*) optarg=`echo \"$1\" | sed 's/[-_a-zA-Z0-9]*=//'` ;;\n  *) optarg= ;;\n  esac\n\n",
                    "rendered": {
                      "text": "do\n  # Normalize\n  case \"$1\" in\n  -*=*) optarg=`echo \"$1\" | sed 's/[-_a-zA-Z0-9]*=//'` ;;\n  *) optarg= ;;\n  esac\n\n",
                      "markdown": "`do\n  # Normalize\n  case \"$1\" in\n  -*=*) optarg=`echo \"$1\" | sed 's/[-_a-zA-Z0-9]*=//'` ;;\n  *) optarg= ;;\n  esac\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/pkg/buildpkg.sh"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 19,
                  "endLine": 19,
                  "endColumn": 27,
                  "snippet": {
                    "text": "#\n#\n\n# buildpkg.sh: This script builds a Solaris PKG from the source tree\n#              provided.\n\nPREFIX=/usr/local\n",
                    "rendered": {
                      "text": "#\n#\n\n# buildpkg.sh: This script builds a Solaris PKG from the source tree\n#              provided.\n\nPREFIX=/usr/local\n",
                      "markdown": "`#\n#\n\n# buildpkg.sh: This script builds a Solaris PKG from the source tree\n#              provided.\n\nPREFIX=/usr/local\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/vcpkg/apr-2/vcpkg.json"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 27,
                  "endLine": 37,
                  "endColumn": 36,
                  "snippet": {
                    "text": "      \"description\": \"Build ODBC DBD driver\"\n    },\n    \"dbd-sqlite3\": {\n      \"description\": \"Build SQLite3 DBD driver\",\n      \"dependencies\": [\n        \"sqlite3\"\n      ]\n",
                    "rendered": {
                      "text": "      \"description\": \"Build ODBC DBD driver\"\n    },\n    \"dbd-sqlite3\": {\n      \"description\": \"Build SQLite3 DBD driver\",\n      \"dependencies\": [\n        \"sqlite3\"\n      ]\n",
                      "markdown": "`      \"description\": \"Build ODBC DBD driver\"\n    },\n    \"dbd-sqlite3\": {\n      \"description\": \"Build SQLite3 DBD driver\",\n      \"dependencies\": [\n        \"sqlite3\"\n      ]\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/vcpkg/apr-2/portfile.cmake"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1,
                  "endLine": 4,
                  "endColumn": 9,
                  "snippet": {
                    "text": "set(VERSION 2.0.0)\n#\n# Modify REF to latest commit id from https://github.com/apache/apr\n# Update SHA512 with actual SHA512\n#\nvcpkg_from_github(\n    OUT_SOURCE_PATH SOURCE_PATH\n",
                    "rendered": {
                      "text": "set(VERSION 2.0.0)\n#\n# Modify REF to latest commit id from https://github.com/apache/apr\n# Update SHA512 with actual SHA512\n#\nvcpkg_from_github(\n    OUT_SOURCE_PATH SOURCE_PATH\n",
                      "markdown": "`set(VERSION 2.0.0)\n#\n# Modify REF to latest commit id from https://github.com/apache/apr\n# Update SHA512 with actual SHA512\n#\nvcpkg_from_github(\n    OUT_SOURCE_PATH SOURCE_PATH\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/ax_prog_cc_for_build.m4"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 46,
                  "endLine": 13,
                  "endColumn": 50,
                  "snippet": {
                    "text": "#\n#   This macro searches for a C compiler that generates native executables,\n#   that is a C compiler that surely is not a cross-compiler. This can be\n#   useful if you have to generate source code at compile-time like for\n#   example GCC does.\n#\n#   The macro sets the CC_FOR_BUILD and CPP_FOR_BUILD macros to anything\n",
                    "rendered": {
                      "text": "#\n#   This macro searches for a C compiler that generates native executables,\n#   that is a C compiler that surely is not a cross-compiler. This can be\n#   useful if you have to generate source code at compile-time like for\n#   example GCC does.\n#\n#   The macro sets the CC_FOR_BUILD and CPP_FOR_BUILD macros to anything\n",
                      "markdown": "`#\n#   This macro searches for a C compiler that generates native executables,\n#   that is a C compiler that surely is not a cross-compiler. This can be\n#   useful if you have to generate source code at compile-time like for\n#   example GCC does.\n#\n#   The macro sets the CC_FOR_BUILD and CPP_FOR_BUILD macros to anything\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/run-gcov.sh"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 55,
                  "endLine": 91,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# Remind current dir, so that we can easily navigate in directories\npwd=`pwd`\n\n# gcno files are created at compile time and gcna files at run-time\nfor i in `find ../.. -name \"*.gcno\" | sort`; do\n    # Skip test files\n    if [[ \"$i\" =~ \"test\" ]]; then\n",
                    "rendered": {
                      "text": "# Remind current dir, so that we can easily navigate in directories\npwd=`pwd`\n\n# gcno files are created at compile time and gcna files at run-time\nfor i in `find ../.. -name \"*.gcno\" | sort`; do\n    # Skip test files\n    if [[ \"$i\" =~ \"test\" ]]; then\n",
                      "markdown": "`# Remind current dir, so that we can easily navigate in directories\npwd=`pwd`\n\n# gcno files are created at compile time and gcna files at run-time\nfor i in `find ../.. -name \"*.gcno\" | sort`; do\n    # Skip test files\n    if [[ \"$i\" =~ \"test\" ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/run-gcov.sh"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 24,
                  "endLine": 91,
                  "endColumn": 28,
                  "snippet": {
                    "text": "# Remind current dir, so that we can easily navigate in directories\npwd=`pwd`\n\n# gcno files are created at compile time and gcna files at run-time\nfor i in `find ../.. -name \"*.gcno\" | sort`; do\n    # Skip test files\n    if [[ \"$i\" =~ \"test\" ]]; then\n",
                    "rendered": {
                      "text": "# Remind current dir, so that we can easily navigate in directories\npwd=`pwd`\n\n# gcno files are created at compile time and gcna files at run-time\nfor i in `find ../.. -name \"*.gcno\" | sort`; do\n    # Skip test files\n    if [[ \"$i\" =~ \"test\" ]]; then\n",
                      "markdown": "`# Remind current dir, so that we can easily navigate in directories\npwd=`pwd`\n\n# gcno files are created at compile time and gcna files at run-time\nfor i in `find ../.. -name \"*.gcno\" | sort`; do\n    # Skip test files\n    if [[ \"$i\" =~ \"test\" ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/run-gcov.sh"
                },
                "region": {
                  "startLine": 143,
                  "endLine": 144,
                  "endColumn": 4,
                  "snippet": {
                    "text": "done\n\necho \"</table><p>Last generated `date`</p>\" >> index.html\n\ncat >> index.html << EOF\n</td></tr>\n</table>\n   <!-- FOOTER -->\n",
                    "rendered": {
                      "text": "done\n\necho \"</table><p>Last generated `date`</p>\" >> index.html\n\ncat >> index.html << EOF\n</td></tr>\n</table>\n   <!-- FOOTER -->\n",
                      "markdown": "`done\n\necho \"</table><p>Last generated `date`</p>\" >> index.html\n\ncat >> index.html << EOF\n</td></tr>\n</table>\n   <!-- FOOTER -->\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/run-gcov.sh"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 70,
                  "endLine": 113,
                  "endColumn": 75,
                  "snippet": {
                    "text": "    cd $dir\n\n    # Get the % of test coverage for each of this file\n    percent=`gcov $filename.gcda | grep \"%\" | awk -F'%' {'print $1'} | awk -F':' {'print $2'}`\n\n    # Come back to our base directory\n    cd $pwd\n",
                    "rendered": {
                      "text": "    cd $dir\n\n    # Get the % of test coverage for each of this file\n    percent=`gcov $filename.gcda | grep \"%\" | awk -F'%' {'print $1'} | awk -F':' {'print $2'}`\n\n    # Come back to our base directory\n    cd $pwd\n",
                      "markdown": "`    cd $dir\n\n    # Get the % of test coverage for each of this file\n    percent=`gcov $filename.gcda | grep \"%\" | awk -F'%' {'print $1'} | awk -F':' {'print $2'}`\n\n    # Come back to our base directory\n    cd $pwd\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/run-gcov.sh"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 45,
                  "endLine": 113,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    cd $dir\n\n    # Get the % of test coverage for each of this file\n    percent=`gcov $filename.gcda | grep \"%\" | awk -F'%' {'print $1'} | awk -F':' {'print $2'}`\n\n    # Come back to our base directory\n    cd $pwd\n",
                    "rendered": {
                      "text": "    cd $dir\n\n    # Get the % of test coverage for each of this file\n    percent=`gcov $filename.gcda | grep \"%\" | awk -F'%' {'print $1'} | awk -F':' {'print $2'}`\n\n    # Come back to our base directory\n    cd $pwd\n",
                      "markdown": "`    cd $dir\n\n    # Get the % of test coverage for each of this file\n    percent=`gcov $filename.gcda | grep \"%\" | awk -F'%' {'print $1'} | awk -F':' {'print $2'}`\n\n    # Come back to our base directory\n    cd $pwd\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/run-gcov.sh"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 34,
                  "endLine": 113,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    cd $dir\n\n    # Get the % of test coverage for each of this file\n    percent=`gcov $filename.gcda | grep \"%\" | awk -F'%' {'print $1'} | awk -F':' {'print $2'}`\n\n    # Come back to our base directory\n    cd $pwd\n",
                    "rendered": {
                      "text": "    cd $dir\n\n    # Get the % of test coverage for each of this file\n    percent=`gcov $filename.gcda | grep \"%\" | awk -F'%' {'print $1'} | awk -F':' {'print $2'}`\n\n    # Come back to our base directory\n    cd $pwd\n",
                      "markdown": "`    cd $dir\n\n    # Get the % of test coverage for each of this file\n    percent=`gcov $filename.gcda | grep \"%\" | awk -F'%' {'print $1'} | awk -F':' {'print $2'}`\n\n    # Come back to our base directory\n    cd $pwd\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/run-gcov.sh"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 5,
                  "endLine": 104,
                  "endColumn": 11,
                  "snippet": {
                    "text": "        continue\n    fi\n\n    # Find the directory and base name of this gcno file\n    dir=`dirname -- \"$i\"`\n    basename=`basename \"$i\"`\n    filename=\"${basename%.*}\"\n",
                    "rendered": {
                      "text": "        continue\n    fi\n\n    # Find the directory and base name of this gcno file\n    dir=`dirname -- \"$i\"`\n    basename=`basename \"$i\"`\n    filename=\"${basename%.*}\"\n",
                      "markdown": "`        continue\n    fi\n\n    # Find the directory and base name of this gcno file\n    dir=`dirname -- \"$i\"`\n    basename=`basename \"$i\"`\n    filename=\"${basename%.*}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/run-gcov.sh"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 21,
                  "endLine": 99,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    fi\n\n    # We are only intested in gcno files in .libs directories, because it there\n    # that we'll also find some gcna files\n    if ! [[ \"$i\" =~ \"libs\" ]]; then\n        continue\n    fi\n",
                    "rendered": {
                      "text": "    fi\n\n    # We are only intested in gcno files in .libs directories, because it there\n    # that we'll also find some gcna files\n    if ! [[ \"$i\" =~ \"libs\" ]]; then\n        continue\n    fi\n",
                      "markdown": "`    fi\n\n    # We are only intested in gcno files in .libs directories, because it there\n    # that we'll also find some gcna files\n    if ! [[ \"$i\" =~ \"libs\" ]]; then\n        continue\n    fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/run-gcov.sh"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 35,
                  "endLine": 91,
                  "endColumn": 41,
                  "snippet": {
                    "text": "# Remind current dir, so that we can easily navigate in directories\npwd=`pwd`\n\n# gcno files are created at compile time and gcna files at run-time\nfor i in `find ../.. -name \"*.gcno\" | sort`; do\n    # Skip test files\n    if [[ \"$i\" =~ \"test\" ]]; then\n",
                    "rendered": {
                      "text": "# Remind current dir, so that we can easily navigate in directories\npwd=`pwd`\n\n# gcno files are created at compile time and gcna files at run-time\nfor i in `find ../.. -name \"*.gcno\" | sort`; do\n    # Skip test files\n    if [[ \"$i\" =~ \"test\" ]]; then\n",
                      "markdown": "`# Remind current dir, so that we can easily navigate in directories\npwd=`pwd`\n\n# gcno files are created at compile time and gcna files at run-time\nfor i in `find ../.. -name \"*.gcno\" | sort`; do\n    # Skip test files\n    if [[ \"$i\" =~ \"test\" ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/run-gcov.sh"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 57,
                  "endLine": 10,
                  "endColumn": 4,
                  "snippet": {
                    "text": "cd coverage\n\n# It would be really nice to find a better way to do this than copying the \n# HTML into this script.  But, I am being lazy right now.\ncat > index.html << EOF\n<!-- This is a generated file, do not edit -->\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n",
                    "rendered": {
                      "text": "cd coverage\n\n# It would be really nice to find a better way to do this than copying the \n# HTML into this script.  But, I am being lazy right now.\ncat > index.html << EOF\n<!-- This is a generated file, do not edit -->\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n",
                      "markdown": "`cd coverage\n\n# It would be really nice to find a better way to do this than copying the \n# HTML into this script.  But, I am being lazy right now.\ncat > index.html << EOF\n<!-- This is a generated file, do not edit -->\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/run-gcov.sh"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 28,
                  "endLine": 8,
                  "endColumn": 34,
                  "snippet": {
                    "text": "fi\ncd coverage\n\n# It would be really nice to find a better way to do this than copying the \n# HTML into this script.  But, I am being lazy right now.\ncat > index.html << EOF\n<!-- This is a generated file, do not edit -->\n",
                    "rendered": {
                      "text": "fi\ncd coverage\n\n# It would be really nice to find a better way to do this than copying the \n# HTML into this script.  But, I am being lazy right now.\ncat > index.html << EOF\n<!-- This is a generated file, do not edit -->\n",
                      "markdown": "`fi\ncd coverage\n\n# It would be really nice to find a better way to do this than copying the \n# HTML into this script.  But, I am being lazy right now.\ncat > index.html << EOF\n<!-- This is a generated file, do not edit -->\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/run-gcov.sh"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 20,
                  "endLine": 8,
                  "endColumn": 26,
                  "snippet": {
                    "text": "fi\ncd coverage\n\n# It would be really nice to find a better way to do this than copying the \n# HTML into this script.  But, I am being lazy right now.\ncat > index.html << EOF\n<!-- This is a generated file, do not edit -->\n",
                    "rendered": {
                      "text": "fi\ncd coverage\n\n# It would be really nice to find a better way to do this than copying the \n# HTML into this script.  But, I am being lazy right now.\ncat > index.html << EOF\n<!-- This is a generated file, do not edit -->\n",
                      "markdown": "`fi\ncd coverage\n\n# It would be really nice to find a better way to do this than copying the \n# HTML into this script.  But, I am being lazy right now.\ncat > index.html << EOF\n<!-- This is a generated file, do not edit -->\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_hints.m4"
                },
                "region": {
                  "startLine": 471,
                  "startColumn": 61,
                  "endLine": 471,
                  "endColumn": 69,
                  "snippet": {
                    "text": "            *mingwce)\n                APR_SETIFNULL(apr_has_xthread_files, [0])\n                APR_SETIFNULL(apr_has_user, [0])\n                APR_SETIFNULL(apr_procattr_user_set_requires_password, [0])\n                APR_SETIFNULL(ac_cv_func_sendfile, [no])\n                ;;\n        esac\n",
                    "rendered": {
                      "text": "            *mingwce)\n                APR_SETIFNULL(apr_has_xthread_files, [0])\n                APR_SETIFNULL(apr_has_user, [0])\n                APR_SETIFNULL(apr_procattr_user_set_requires_password, [0])\n                APR_SETIFNULL(ac_cv_func_sendfile, [no])\n                ;;\n        esac\n",
                      "markdown": "`            *mingwce)\n                APR_SETIFNULL(apr_has_xthread_files, [0])\n                APR_SETIFNULL(apr_has_user, [0])\n                APR_SETIFNULL(apr_procattr_user_set_requires_password, [0])\n                APR_SETIFNULL(ac_cv_func_sendfile, [no])\n                ;;\n        esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_hints.m4"
                },
                "region": {
                  "startLine": 462,
                  "startColumn": 61,
                  "endLine": 462,
                  "endColumn": 69,
                  "snippet": {
                    "text": "            *mingw32*)\n                APR_SETIFNULL(apr_has_xthread_files, [1])\n                APR_SETIFNULL(apr_has_user, [1])\n                APR_SETIFNULL(apr_procattr_user_set_requires_password, [1])\n                dnl The real function is TransmitFile(), not sendfile(), but\n                dnl this bypasses the Linux/Solaris/AIX/etc. test and enables\n                dnl the TransmitFile() implementation.\n",
                    "rendered": {
                      "text": "            *mingw32*)\n                APR_SETIFNULL(apr_has_xthread_files, [1])\n                APR_SETIFNULL(apr_has_user, [1])\n                APR_SETIFNULL(apr_procattr_user_set_requires_password, [1])\n                dnl The real function is TransmitFile(), not sendfile(), but\n                dnl this bypasses the Linux/Solaris/AIX/etc. test and enables\n                dnl the TransmitFile() implementation.\n",
                      "markdown": "`            *mingw32*)\n                APR_SETIFNULL(apr_has_xthread_files, [1])\n                APR_SETIFNULL(apr_has_user, [1])\n                APR_SETIFNULL(apr_procattr_user_set_requires_password, [1])\n                dnl The real function is TransmitFile(), not sendfile(), but\n                dnl this bypasses the Linux/Solaris/AIX/etc. test and enables\n                dnl the TransmitFile() implementation.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_hints.m4"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 43,
                  "endLine": 251,
                  "endColumn": 47,
                  "snippet": {
                    "text": "            APR_SETIFNULL(apr_lock_method, [USE_FCNTL_SERIALIZE])\n        fi\n        # readdir64_r error handling seems broken on Solaris (at least\n        # up till 2.8) -- it will return -1 at end-of-directory.\n        APR_SETIFNULL(ac_cv_func_readdir64_r, [no])\n\t;;\n    *-sunos4*)\n",
                    "rendered": {
                      "text": "            APR_SETIFNULL(apr_lock_method, [USE_FCNTL_SERIALIZE])\n        fi\n        # readdir64_r error handling seems broken on Solaris (at least\n        # up till 2.8) -- it will return -1 at end-of-directory.\n        APR_SETIFNULL(ac_cv_func_readdir64_r, [no])\n\t;;\n    *-sunos4*)\n",
                      "markdown": "`            APR_SETIFNULL(apr_lock_method, [USE_FCNTL_SERIALIZE])\n        fi\n        # readdir64_r error handling seems broken on Solaris (at least\n        # up till 2.8) -- it will return -1 at end-of-directory.\n        APR_SETIFNULL(ac_cv_func_readdir64_r, [no])\n\t;;\n    *-sunos4*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_hints.m4"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 54,
                  "endLine": 8,
                  "snippet": {
                    "text": "dnl this work for additional information regarding copyright ownership.\ndnl The ASF licenses this file to You under the Apache License, Version 2.0\ndnl (the \"License\"); you may not use this file except in compliance with\ndnl the License.  You may obtain a copy of the License at\ndnl\ndnl     http://www.apache.org/licenses/LICENSE-2.0\ndnl\ndnl Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "dnl this work for additional information regarding copyright ownership.\ndnl The ASF licenses this file to You under the Apache License, Version 2.0\ndnl (the \"License\"); you may not use this file except in compliance with\ndnl the License.  You may obtain a copy of the License at\ndnl\ndnl     http://www.apache.org/licenses/LICENSE-2.0\ndnl\ndnl Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`dnl this work for additional information regarding copyright ownership.\ndnl The ASF licenses this file to You under the Apache License, Version 2.0\ndnl (the \"License\"); you may not use this file except in compliance with\ndnl the License.  You may obtain a copy of the License at\ndnl\ndnl     http://www.apache.org/licenses/LICENSE-2.0\ndnl\ndnl Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_hints.m4"
                },
                "region": {
                  "startLine": 320,
                  "startColumn": 25,
                  "endLine": 320,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\tAPR_ADDTO(LIBS, [-lPW])\n\t;;\n    *-uts*)\n\tPLATOSVERS=`echo $host | sed 's/^.*,//'`\n\tcase $PLATOSVERS in\n\t    2*) APR_ADDTO(CPPFLAGS, [-DUTS21])\n\t        APR_ADDTO(CFLAGS, [-Xa -eft])\n",
                    "rendered": {
                      "text": "\tAPR_ADDTO(LIBS, [-lPW])\n\t;;\n    *-uts*)\n\tPLATOSVERS=`echo $host | sed 's/^.*,//'`\n\tcase $PLATOSVERS in\n\t    2*) APR_ADDTO(CPPFLAGS, [-DUTS21])\n\t        APR_ADDTO(CFLAGS, [-Xa -eft])\n",
                      "markdown": "`\tAPR_ADDTO(LIBS, [-lPW])\n\t;;\n    *-uts*)\n\tPLATOSVERS=`echo $host | sed 's/^.*,//'`\n\tcase $PLATOSVERS in\n\t    2*) APR_ADDTO(CPPFLAGS, [-DUTS21])\n\t        APR_ADDTO(CFLAGS, [-Xa -eft])\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_hints.m4"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 34,
                  "endLine": 242,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\tAPR_ADDTO(CPPFLAGS, [-DSOLARIS2=$PLATOSVERS -D_POSIX_PTHREAD_SEMANTICS -D_REENTRANT])\n        if test $PLATOSVERS -eq 10; then\n            # pthread_mutex_timedlock is broken on Solaris 10.\n            # It can block without timeout in case of EDEADLK.\n            APR_SETIFNULL(ac_cv_func_pthread_mutex_timedlock, [no])\n        fi\n        if test $PLATOSVERS -ge 10; then\n",
                    "rendered": {
                      "text": "\tAPR_ADDTO(CPPFLAGS, [-DSOLARIS2=$PLATOSVERS -D_POSIX_PTHREAD_SEMANTICS -D_REENTRANT])\n        if test $PLATOSVERS -eq 10; then\n            # pthread_mutex_timedlock is broken on Solaris 10.\n            # It can block without timeout in case of EDEADLK.\n            APR_SETIFNULL(ac_cv_func_pthread_mutex_timedlock, [no])\n        fi\n        if test $PLATOSVERS -ge 10; then\n",
                      "markdown": "`\tAPR_ADDTO(CPPFLAGS, [-DSOLARIS2=$PLATOSVERS -D_POSIX_PTHREAD_SEMANTICS -D_REENTRANT])\n        if test $PLATOSVERS -eq 10; then\n            # pthread_mutex_timedlock is broken on Solaris 10.\n            # It can block without timeout in case of EDEADLK.\n            APR_SETIFNULL(ac_cv_func_pthread_mutex_timedlock, [no])\n        fi\n        if test $PLATOSVERS -ge 10; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_hints.m4"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 29,
                  "endLine": 238,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\tAPR_ADDTO(LIBS, [-lPW -lmalloc])\n\t;;\n    *-solaris2*)\n    \tPLATOSVERS=`echo $host | sed 's/^.*solaris2.//'`\n\tAPR_ADDTO(CPPFLAGS, [-DSOLARIS2=$PLATOSVERS -D_POSIX_PTHREAD_SEMANTICS -D_REENTRANT])\n        if test $PLATOSVERS -eq 10; then\n            # pthread_mutex_timedlock is broken on Solaris 10.\n",
                    "rendered": {
                      "text": "\tAPR_ADDTO(LIBS, [-lPW -lmalloc])\n\t;;\n    *-solaris2*)\n    \tPLATOSVERS=`echo $host | sed 's/^.*solaris2.//'`\n\tAPR_ADDTO(CPPFLAGS, [-DSOLARIS2=$PLATOSVERS -D_POSIX_PTHREAD_SEMANTICS -D_REENTRANT])\n        if test $PLATOSVERS -eq 10; then\n            # pthread_mutex_timedlock is broken on Solaris 10.\n",
                      "markdown": "`\tAPR_ADDTO(LIBS, [-lPW -lmalloc])\n\t;;\n    *-solaris2*)\n    \tPLATOSVERS=`echo $host | sed 's/^.*solaris2.//'`\n\tAPR_ADDTO(CPPFLAGS, [-DSOLARIS2=$PLATOSVERS -D_POSIX_PTHREAD_SEMANTICS -D_REENTRANT])\n        if test $PLATOSVERS -eq 10; then\n            # pthread_mutex_timedlock is broken on Solaris 10.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_hints.m4"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 21,
                  "endLine": 75,
                  "endColumn": 27,
                  "snippet": {
                    "text": "                ;;\n        esac\n        dnl If using xlc, remember it, and give it the right options.\n        if $CC 2>&1 | grep 'xlc' > /dev/null; then\n          APR_SETIFNULL(AIX_XLC, [yes])\n          APR_ADDTO(CFLAGS, [-qHALT=E])\n        fi\n",
                    "rendered": {
                      "text": "                ;;\n        esac\n        dnl If using xlc, remember it, and give it the right options.\n        if $CC 2>&1 | grep 'xlc' > /dev/null; then\n          APR_SETIFNULL(AIX_XLC, [yes])\n          APR_ADDTO(CFLAGS, [-qHALT=E])\n        fi\n",
                      "markdown": "`                ;;\n        esac\n        dnl If using xlc, remember it, and give it the right options.\n        if $CC 2>&1 | grep 'xlc' > /dev/null; then\n          APR_SETIFNULL(AIX_XLC, [yes])\n          APR_ADDTO(CFLAGS, [-qHALT=E])\n        fi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/jlibtool.c"
                },
                "region": {
                  "startLine": 1604,
                  "startColumn": 11,
                  "endLine": 1604,
                  "endColumn": 16,
                  "snippet": {
                    "text": "            }\n\n            cmd_size += strlen(GEN_EXPORTS) + strlen(def_file) + 3;\n            cmd = (char *)malloc(cmd_size);\n            strcpy(cmd, GEN_EXPORTS);\n\n            for (a=0; a < cmd_data->num_obj_files; a++) {\n",
                    "rendered": {
                      "text": "            }\n\n            cmd_size += strlen(GEN_EXPORTS) + strlen(def_file) + 3;\n            cmd = (char *)malloc(cmd_size);\n            strcpy(cmd, GEN_EXPORTS);\n\n            for (a=0; a < cmd_data->num_obj_files; a++) {\n",
                      "markdown": "`            }\n\n            cmd_size += strlen(GEN_EXPORTS) + strlen(def_file) + 3;\n            cmd = (char *)malloc(cmd_size);\n            strcpy(cmd, GEN_EXPORTS);\n\n            for (a=0; a < cmd_data->num_obj_files; a++) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/jlibtool.c"
                },
                "region": {
                  "startLine": 408,
                  "startColumn": 3,
                  "endLine": 408,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    unsigned char *d;\n    const unsigned char *s;\n\n    cmd = (char *)malloc(2 * strlen(str) + 3);\n    d = (unsigned char *)cmd;\n    s = (const unsigned char *)str;\n\n",
                    "rendered": {
                      "text": "    unsigned char *d;\n    const unsigned char *s;\n\n    cmd = (char *)malloc(2 * strlen(str) + 3);\n    d = (unsigned char *)cmd;\n    s = (const unsigned char *)str;\n\n",
                      "markdown": "`    unsigned char *d;\n    const unsigned char *s;\n\n    cmd = (char *)malloc(2 * strlen(str) + 3);\n    d = (unsigned char *)cmd;\n    s = (const unsigned char *)str;\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/jlibtool.c"
                },
                "region": {
                  "startLine": 1320,
                  "startColumn": 35,
                  "endLine": 1320,
                  "endColumn": 41,
                  "snippet": {
                    "text": "                /* Try the normal dir next. */\n                newarg = check_library_exists(cmd_data, arg, pathlen, 0, &libtype);\n                if (!newarg) {\n                    printf(\"Can not find suitable library for %s\\n\", arg);\n                    exit(1);\n                }\n            }\n",
                    "rendered": {
                      "text": "                /* Try the normal dir next. */\n                newarg = check_library_exists(cmd_data, arg, pathlen, 0, &libtype);\n                if (!newarg) {\n                    printf(\"Can not find suitable library for %s\\n\", arg);\n                    exit(1);\n                }\n            }\n",
                      "markdown": "`                /* Try the normal dir next. */\n                newarg = check_library_exists(cmd_data, arg, pathlen, 0, &libtype);\n                if (!newarg) {\n                    printf(\"Can not find suitable library for %s\\n\", arg);\n                    exit(1);\n                }\n            }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/jlibtool.c"
                },
                "region": {
                  "startLine": 1299,
                  "startColumn": 27,
                  "endLine": 1299,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    if (strcmp(ext, \"lo\") == 0) {\n        newarg = check_object_exists(cmd_data, arg, ext - arg);\n        if (!newarg) {\n            printf(\"Can not find suitable object file for %s\\n\", arg);\n            exit(1);\n        }\n        if (cmd_data->mode != mLink) {\n",
                    "rendered": {
                      "text": "    if (strcmp(ext, \"lo\") == 0) {\n        newarg = check_object_exists(cmd_data, arg, ext - arg);\n        if (!newarg) {\n            printf(\"Can not find suitable object file for %s\\n\", arg);\n            exit(1);\n        }\n        if (cmd_data->mode != mLink) {\n",
                      "markdown": "`    if (strcmp(ext, \"lo\") == 0) {\n        newarg = check_object_exists(cmd_data, arg, ext - arg);\n        if (!newarg) {\n            printf(\"Can not find suitable object file for %s\\n\", arg);\n            exit(1);\n        }\n        if (cmd_data->mode != mLink) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/jlibtool.c"
                },
                "region": {
                  "startLine": 316,
                  "startColumn": 21,
                  "endLine": 316,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        va_list ap;\n        int res;\n\n        va_start( ap, fmt );\n        res = vsnprintf( str, n, fmt, ap );\n        va_end( ap );\n        return res;\n",
                    "rendered": {
                      "text": "        va_list ap;\n        int res;\n\n        va_start( ap, fmt );\n        res = vsnprintf( str, n, fmt, ap );\n        va_end( ap );\n        return res;\n",
                      "markdown": "`        va_list ap;\n        int res;\n\n        va_start( ap, fmt );\n        res = vsnprintf( str, n, fmt, ap );\n        va_end( ap );\n        return res;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/NWGNUmakefile"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 30,
                  "endLine": 9,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\t$(EOLIST)\n\n#\n# Get the 'head' of the build environment.  This includes default targets and\n# paths to tools\n#\n\n",
                    "rendered": {
                      "text": "\t$(EOLIST)\n\n#\n# Get the 'head' of the build environment.  This includes default targets and\n# paths to tools\n#\n\n",
                      "markdown": "`\t$(EOLIST)\n\n#\n# Get the 'head' of the build environment.  This includes default targets and\n# paths to tools\n#\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/NWGNUmakefile"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 27,
                  "endLine": 23,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS += \\\n",
                    "rendered": {
                      "text": "#\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS += \\\n",
                      "markdown": "`#\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS += \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/aprconf.py"
                },
                "region": {
                  "startLine": 339,
                  "startColumn": 6,
                  "endLine": 339,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        perror(\"bind for ephemeral port\");\n        exit(1);\n    }\n    /* find ephemeral port */\n    sa_len = sizeof(sa);\n    rc = getsockname(listen_s, (struct sockaddr *)&sa, &sa_len);\n    if (rc < 0) {\n",
                    "rendered": {
                      "text": "        perror(\"bind for ephemeral port\");\n        exit(1);\n    }\n    /* find ephemeral port */\n    sa_len = sizeof(sa);\n    rc = getsockname(listen_s, (struct sockaddr *)&sa, &sa_len);\n    if (rc < 0) {\n",
                      "markdown": "`        perror(\"bind for ephemeral port\");\n        exit(1);\n    }\n    /* find ephemeral port */\n    sa_len = sizeof(sa);\n    rc = getsockname(listen_s, (struct sockaddr *)&sa, &sa_len);\n    if (rc < 0) {\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/aprconf.py"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 6,
                  "endLine": 140,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        perror(\"bind for ephemeral port\");\n        exit(1);\n    }\n    /* find ephemeral port */\n    sa_len = sizeof(sa);\n    rc = getsockname(listen_s, (struct sockaddr *)&sa, &sa_len);\n    if (rc < 0) {\n",
                    "rendered": {
                      "text": "        perror(\"bind for ephemeral port\");\n        exit(1);\n    }\n    /* find ephemeral port */\n    sa_len = sizeof(sa);\n    rc = getsockname(listen_s, (struct sockaddr *)&sa, &sa_len);\n    if (rc < 0) {\n",
                      "markdown": "`        perror(\"bind for ephemeral port\");\n        exit(1);\n    }\n    /* find ephemeral port */\n    sa_len = sizeof(sa);\n    rc = getsockname(listen_s, (struct sockaddr *)&sa, &sa_len);\n    if (rc < 0) {\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/aprconf.py"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 18,
                  "endLine": 7,
                  "snippet": {
                    "text": "\nclass APRConfigureBase:\n    def __init__(self, env):\n        self.env = env\n\n    def Check_apr_big_endian(self, context):\n        import struct\n        context.Message(\"Checking for big endianess... \")\n",
                    "rendered": {
                      "text": "\nclass APRConfigureBase:\n    def __init__(self, env):\n        self.env = env\n\n    def Check_apr_big_endian(self, context):\n        import struct\n        context.Message(\"Checking for big endianess... \")\n",
                      "markdown": "`\nclass APRConfigureBase:\n    def __init__(self, env):\n        self.env = env\n\n    def Check_apr_big_endian(self, context):\n        import struct\n        context.Message(\"Checking for big endianess... \")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/make_nw_export.awk"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 52,
                  "endLine": 7,
                  "snippet": {
                    "text": "# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/make_nw_export.awk"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 29,
                  "endLine": 92,
                  "snippet": {
                    "text": "\nEND {\n    printf(\"Added %d symbols to export list.\\n\", idx) > \"/dev/stderr\"\n    # sort symbols with shell sort\n    increment = int(idx / 2)\n    while (increment > 0) {\n        for (i = increment+1; i <= idx; i++) {\n            j = i\n",
                    "rendered": {
                      "text": "\nEND {\n    printf(\"Added %d symbols to export list.\\n\", idx) > \"/dev/stderr\"\n    # sort symbols with shell sort\n    increment = int(idx / 2)\n    while (increment > 0) {\n        for (i = increment+1; i <= idx; i++) {\n            j = i\n",
                      "markdown": "`\nEND {\n    printf(\"Added %d symbols to export list.\\n\", idx) > \"/dev/stderr\"\n    # sort symbols with shell sort\n    increment = int(idx / 2)\n    while (increment > 0) {\n        for (i = increment+1; i <= idx; i++) {\n            j = i\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/make_nw_export.awk"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 5,
                  "endLine": 91,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\nEND {\n    printf(\"Added %d symbols to export list.\\n\", idx) > \"/dev/stderr\"\n    # sort symbols with shell sort\n    increment = int(idx / 2)\n    while (increment > 0) {\n        for (i = increment+1; i <= idx; i++) {\n",
                    "rendered": {
                      "text": "\nEND {\n    printf(\"Added %d symbols to export list.\\n\", idx) > \"/dev/stderr\"\n    # sort symbols with shell sort\n    increment = int(idx / 2)\n    while (increment > 0) {\n        for (i = increment+1; i <= idx; i++) {\n",
                      "markdown": "`\nEND {\n    printf(\"Added %d symbols to export list.\\n\", idx) > \"/dev/stderr\"\n    # sort symbols with shell sort\n    increment = int(idx / 2)\n    while (increment > 0) {\n        for (i = increment+1; i <= idx; i++) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/mkdir.sh"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 14,
                  "endLine": 19,
                  "endColumn": 19,
                  "snippet": {
                    "text": "errstatus=0\nfor file in ${1+\"$@\"} ; do \n    set fnord `echo \":$file\" |\\\n               sed -e 's/^:\\//%/' -e 's/^://' -e 's/\\// /g' -e 's/^%/\\//'`\n    shift\n    pathcomp=\n    for d in ${1+\"$@\"}; do\n",
                    "rendered": {
                      "text": "errstatus=0\nfor file in ${1+\"$@\"} ; do \n    set fnord `echo \":$file\" |\\\n               sed -e 's/^:\\//%/' -e 's/^://' -e 's/\\// /g' -e 's/^%/\\//'`\n    shift\n    pathcomp=\n    for d in ${1+\"$@\"}; do\n",
                      "markdown": "`errstatus=0\nfor file in ${1+\"$@\"} ; do \n    set fnord `echo \":$file\" |\\\n               sed -e 's/^:\\//%/' -e 's/^://' -e 's/\\// /g' -e 's/^%/\\//'`\n    shift\n    pathcomp=\n    for d in ${1+\"$@\"}; do\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/mkdir.sh"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 6,
                  "endLine": 11,
                  "endColumn": 14,
                  "snippet": {
                    "text": "##  by Ralf S. Engelschall <rse@apache.org>\n##\n#\n# This script falls under the Apache License.\n# See http://www.apache.org/docs/LICENSE\n\n\n",
                    "rendered": {
                      "text": "##  by Ralf S. Engelschall <rse@apache.org>\n##\n#\n# This script falls under the Apache License.\n# See http://www.apache.org/docs/LICENSE\n\n\n",
                      "markdown": "`##  by Ralf S. Engelschall <rse@apache.org>\n##\n#\n# This script falls under the Apache License.\n# See http://www.apache.org/docs/LICENSE\n\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/cvtdsp.pl"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 43,
                  "endLine": 40,
                  "endColumn": 47,
                  "snippet": {
                    "text": "else {\n    print \"Specify -5 or -6 for Visual Studio 5 or 6 (98) .dsp format\\n\";\n    print \"Specify -w3 or -w4 for .dsp build with warning level 3 or 4 (strict)\\n\\n\";\n    print \"Specify -ia64 for build targeted at Itanium (req's psdk tools)\\n\\n\";\n    print \"Specify -p for extreme pool debugging\\n\\n\";\n    print \"Specify -mt to add .manifest embedding\\n\\n\";\n    die \"Missing argument\";\n",
                    "rendered": {
                      "text": "else {\n    print \"Specify -5 or -6 for Visual Studio 5 or 6 (98) .dsp format\\n\";\n    print \"Specify -w3 or -w4 for .dsp build with warning level 3 or 4 (strict)\\n\\n\";\n    print \"Specify -ia64 for build targeted at Itanium (req's psdk tools)\\n\\n\";\n    print \"Specify -p for extreme pool debugging\\n\\n\";\n    print \"Specify -mt to add .manifest embedding\\n\\n\";\n    die \"Missing argument\";\n",
                      "markdown": "`else {\n    print \"Specify -5 or -6 for Visual Studio 5 or 6 (98) .dsp format\\n\";\n    print \"Specify -w3 or -w4 for .dsp build with warning level 3 or 4 (strict)\\n\\n\";\n    print \"Specify -ia64 for build targeted at Itanium (req's psdk tools)\\n\\n\";\n    print \"Specify -p for extreme pool debugging\\n\\n\";\n    print \"Specify -mt to add .manifest embedding\\n\\n\";\n    die \"Missing argument\";\n`"
                    }
                  },
                  "sourceLanguage": "perl"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/cvtdsp.pl"
                },
                "region": {
                  "startLine": 510,
                  "startColumn": 7,
                  "endLine": 510,
                  "endColumn": 12,
                  "snippet": {
                    "text": "InputPath=$toroot/include/ap_release.h $toroot/build/win32/win32ver.awk\n\n\"./$name.rc\" : \\$(SOURCE) \"\\$(INTDIR)\" \"\\$(OUTDIR)\"\n        awk -f $toroot/build/win32/win32ver.awk $name \"Apache HTTP Server\" $toroot/include/ap_release.h $icon> ./Apache.rc\n\n# End Custom Build\n# End Source File\n",
                    "rendered": {
                      "text": "InputPath=$toroot/include/ap_release.h $toroot/build/win32/win32ver.awk\n\n\"./$name.rc\" : \\$(SOURCE) \"\\$(INTDIR)\" \"\\$(OUTDIR)\"\n        awk -f $toroot/build/win32/win32ver.awk $name \"Apache HTTP Server\" $toroot/include/ap_release.h $icon> ./Apache.rc\n\n# End Custom Build\n# End Source File\n",
                      "markdown": "`InputPath=$toroot/include/ap_release.h $toroot/build/win32/win32ver.awk\n\n\"./$name.rc\" : \\$(SOURCE) \"\\$(INTDIR)\" \"\\$(OUTDIR)\"\n        awk -f $toroot/build/win32/win32ver.awk $name \"Apache HTTP Server\" $toroot/include/ap_release.h $icon> ./Apache.rc\n\n# End Custom Build\n# End Source File\n`"
                    }
                  },
                  "sourceLanguage": "perl"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 492,
                  "startColumn": 29,
                  "endLine": 492,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\t;;\n    # The situation for MiNT is a little confusing.  The machine name\n    # can be virtually everything (everything which is not\n    # \"atarist\" or \"atariste\" at least should have a processor\n    # > m68000).  The system name ranges from \"MiNT\" over \"FreeMiNT\"\n    # to the lowercase version \"mint\" (or \"freemint\").  Finally\n    # the system name \"TOS\" denotes a system which is actually not\n",
                    "rendered": {
                      "text": "\t;;\n    # The situation for MiNT is a little confusing.  The machine name\n    # can be virtually everything (everything which is not\n    # \"atarist\" or \"atariste\" at least should have a processor\n    # > m68000).  The system name ranges from \"MiNT\" over \"FreeMiNT\"\n    # to the lowercase version \"mint\" (or \"freemint\").  Finally\n    # the system name \"TOS\" denotes a system which is actually not\n",
                      "markdown": "`\t;;\n    # The situation for MiNT is a little confusing.  The machine name\n    # can be virtually everything (everything which is not\n    # \"atarist\" or \"atariste\" at least should have a processor\n    # > m68000).  The system name ranges from \"MiNT\" over \"FreeMiNT\"\n    # to the lowercase version \"mint\" (or \"freemint\").  Finally\n    # the system name \"TOS\" denotes a system which is actually not\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 60,
                  "endLine": 40,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# The \"shellcheck disable\" line above the timestamp inhibits complaints\n# about features and limitations of the classic Bourne shell that were\n# superseded or lifted in POSIX.  However, this script identifies a wide\n# variety of pre-POSIX systems that do not have POSIX shells at all, and\n# even some reasonably current systems (Solaris 10 as case-in-point) still\n# have a pre-POSIX /bin/sh.\n\n",
                    "rendered": {
                      "text": "# The \"shellcheck disable\" line above the timestamp inhibits complaints\n# about features and limitations of the classic Bourne shell that were\n# superseded or lifted in POSIX.  However, this script identifies a wide\n# variety of pre-POSIX systems that do not have POSIX shells at all, and\n# even some reasonably current systems (Solaris 10 as case-in-point) still\n# have a pre-POSIX /bin/sh.\n\n",
                      "markdown": "`# The \"shellcheck disable\" line above the timestamp inhibits complaints\n# about features and limitations of the classic Bourne shell that were\n# superseded or lifted in POSIX.  However, this script identifies a wide\n# variety of pre-POSIX systems that do not have POSIX shells at all, and\n# even some reasonably current systems (Solaris 10 as case-in-point) still\n# have a pre-POSIX /bin/sh.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 1775,
                  "startColumn": 2,
                  "endLine": 1775,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# shellcheck disable=SC2003\nscript_age=`expr \"$thisyear\" - \"$our_year\"`\nif test \"$script_age\" -lt 3 ; then\n   cat >&2 <<EOF\n\nIf $0 has already been updated, send the following data and any\ninformation you think might be pertinent to config-patches@gnu.org to\n",
                    "rendered": {
                      "text": "# shellcheck disable=SC2003\nscript_age=`expr \"$thisyear\" - \"$our_year\"`\nif test \"$script_age\" -lt 3 ; then\n   cat >&2 <<EOF\n\nIf $0 has already been updated, send the following data and any\ninformation you think might be pertinent to config-patches@gnu.org to\n",
                      "markdown": "`# shellcheck disable=SC2003\nscript_age=`expr \"$thisyear\" - \"$our_year\"`\nif test \"$script_age\" -lt 3 ; then\n   cat >&2 <<EOF\n\nIf $0 has already been updated, send the following data and any\ninformation you think might be pertinent to config-patches@gnu.org to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 1770,
                  "startColumn": 27,
                  "endLine": 1770,
                  "endColumn": 32,
                  "snippet": {
                    "text": "  https://git.savannah.gnu.org/cgit/config.git/plain/config.sub\nEOF\n\nour_year=`echo $timestamp | sed 's,-.*,,'`\nthisyear=`date +%Y`\n# shellcheck disable=SC2003\nscript_age=`expr \"$thisyear\" - \"$our_year\"`\n",
                    "rendered": {
                      "text": "  https://git.savannah.gnu.org/cgit/config.git/plain/config.sub\nEOF\n\nour_year=`echo $timestamp | sed 's,-.*,,'`\nthisyear=`date +%Y`\n# shellcheck disable=SC2003\nscript_age=`expr \"$thisyear\" - \"$our_year\"`\n",
                      "markdown": "`  https://git.savannah.gnu.org/cgit/config.git/plain/config.sub\nEOF\n\nour_year=`echo $timestamp | sed 's,-.*,,'`\nthisyear=`date +%Y`\n# shellcheck disable=SC2003\nscript_age=`expr \"$thisyear\" - \"$our_year\"`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 1762,
                  "startColumn": 39,
                  "endLine": 1762,
                  "endColumn": 47,
                  "snippet": {
                    "text": "cat >&2 <<EOF\n\nThis script (version $timestamp), has failed to recognize the\noperating system you are using. If your script is old, overwrite *all*\ncopies of config.guess and config.sub with the latest versions from:\n\n  https://git.savannah.gnu.org/cgit/config.git/plain/config.guess\n",
                    "rendered": {
                      "text": "cat >&2 <<EOF\n\nThis script (version $timestamp), has failed to recognize the\noperating system you are using. If your script is old, overwrite *all*\ncopies of config.guess and config.sub with the latest versions from:\n\n  https://git.savannah.gnu.org/cgit/config.git/plain/config.guess\n",
                      "markdown": "`cat >&2 <<EOF\n\nThis script (version $timestamp), has failed to recognize the\noperating system you are using. If your script is old, overwrite *all*\ncopies of config.guess and config.sub with the latest versions from:\n\n  https://git.savannah.gnu.org/cgit/config.git/plain/config.guess\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 1761,
                  "startColumn": 4,
                  "endLine": 1761,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\ncat >&2 <<EOF\n\nThis script (version $timestamp), has failed to recognize the\noperating system you are using. If your script is old, overwrite *all*\ncopies of config.guess and config.sub with the latest versions from:\n\n",
                    "rendered": {
                      "text": "\ncat >&2 <<EOF\n\nThis script (version $timestamp), has failed to recognize the\noperating system you are using. If your script is old, overwrite *all*\ncopies of config.guess and config.sub with the latest versions from:\n\n",
                      "markdown": "`\ncat >&2 <<EOF\n\nThis script (version $timestamp), has failed to recognize the\noperating system you are using. If your script is old, overwrite *all*\ncopies of config.guess and config.sub with the latest versions from:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 1758,
                  "endLine": 1759,
                  "endColumn": 4,
                  "snippet": {
                    "text": "EOF\n\t;;\nesac\n\ncat >&2 <<EOF\n\nThis script (version $timestamp), has failed to recognize the\noperating system you are using. If your script is old, overwrite *all*\n",
                    "rendered": {
                      "text": "EOF\n\t;;\nesac\n\ncat >&2 <<EOF\n\nThis script (version $timestamp), has failed to recognize the\noperating system you are using. If your script is old, overwrite *all*\n",
                      "markdown": "`EOF\n\t;;\nesac\n\ncat >&2 <<EOF\n\nThis script (version $timestamp), has failed to recognize the\noperating system you are using. If your script is old, overwrite *all*\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 1751,
                  "endLine": 1751,
                  "endColumn": 5,
                  "snippet": {
                    "text": "case $UNAME_MACHINE:$UNAME_SYSTEM in\n    mips:Linux | mips64:Linux)\n\t# If we got here on MIPS GNU/Linux, output extra information.\n\tcat >&2 <<EOF\n\nNOTE: MIPS GNU/Linux systems require a C compiler to fully recognize\nthe system type. Please install a C compiler and try again.\n",
                    "rendered": {
                      "text": "case $UNAME_MACHINE:$UNAME_SYSTEM in\n    mips:Linux | mips64:Linux)\n\t# If we got here on MIPS GNU/Linux, output extra information.\n\tcat >&2 <<EOF\n\nNOTE: MIPS GNU/Linux systems require a C compiler to fully recognize\nthe system type. Please install a C compiler and try again.\n",
                      "markdown": "`case $UNAME_MACHINE:$UNAME_SYSTEM in\n    mips:Linux | mips64:Linux)\n\t# If we got here on MIPS GNU/Linux, output extra information.\n\tcat >&2 <<EOF\n\nNOTE: MIPS GNU/Linux systems require a C compiler to fully recognize\nthe system type. Please install a C compiler and try again.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 1648,
                  "startColumn": 22,
                  "endLine": 1648,
                  "endColumn": 27,
                  "snippet": {
                    "text": "#define __ARCHITECTURE__ \"m68k\"\n#endif\n  int version;\n  version=`(hostinfo | sed -n 's/.*NeXT Mach \\([0-9]*\\).*/\\1/p') 2>/dev/null`;\n  if (version < 4)\n    printf (\"%s-next-nextstep%d\\n\", __ARCHITECTURE__, version);\n  else\n",
                    "rendered": {
                      "text": "#define __ARCHITECTURE__ \"m68k\"\n#endif\n  int version;\n  version=`(hostinfo | sed -n 's/.*NeXT Mach \\([0-9]*\\).*/\\1/p') 2>/dev/null`;\n  if (version < 4)\n    printf (\"%s-next-nextstep%d\\n\", __ARCHITECTURE__, version);\n  else\n",
                      "markdown": "`#define __ARCHITECTURE__ \"m68k\"\n#endif\n  int version;\n  version=`(hostinfo | sed -n 's/.*NeXT Mach \\([0-9]*\\).*/\\1/p') 2>/dev/null`;\n  if (version < 4)\n    printf (\"%s-next-nextstep%d\\n\", __ARCHITECTURE__, version);\n  else\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 1610,
                  "startColumn": 16,
                  "endLine": 1611,
                  "endColumn": 4,
                  "snippet": {
                    "text": "fi\n\n# No uname command or uname output not recognized.\nset_cc_for_build\ncat > \"$dummy.c\" <<EOF\n#ifdef _SEQUENT_\n#include <sys/types.h>\n#include <sys/utsname.h>\n",
                    "rendered": {
                      "text": "fi\n\n# No uname command or uname output not recognized.\nset_cc_for_build\ncat > \"$dummy.c\" <<EOF\n#ifdef _SEQUENT_\n#include <sys/types.h>\n#include <sys/utsname.h>\n",
                      "markdown": "`fi\n\n# No uname command or uname output not recognized.\nset_cc_for_build\ncat > \"$dummy.c\" <<EOF\n#ifdef _SEQUENT_\n#include <sys/types.h>\n#include <sys/utsname.h>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 1577,
                  "startColumn": 35,
                  "endLine": 1577,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\tGUESS=i386-pc-xenix\n\t;;\n    i*86:skyos:*:*)\n\tSKYOS_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/ .*$//'`\n\tGUESS=$UNAME_MACHINE-pc-skyos$SKYOS_REL\n\t;;\n    i*86:rdos:*:*)\n",
                    "rendered": {
                      "text": "\tGUESS=i386-pc-xenix\n\t;;\n    i*86:skyos:*:*)\n\tSKYOS_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/ .*$//'`\n\tGUESS=$UNAME_MACHINE-pc-skyos$SKYOS_REL\n\t;;\n    i*86:rdos:*:*)\n",
                      "markdown": "`\tGUESS=i386-pc-xenix\n\t;;\n    i*86:skyos:*:*)\n\tSKYOS_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/ .*$//'`\n\tGUESS=$UNAME_MACHINE-pc-skyos$SKYOS_REL\n\t;;\n    i*86:rdos:*:*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 1563,
                  "startColumn": 39,
                  "endLine": 1563,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\tGUESS=mips-sei-seiux$UNAME_RELEASE\n\t;;\n    *:DragonFly:*:*)\n\tDRAGONFLY_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[-(].*//'`\n\tGUESS=$UNAME_MACHINE-unknown-dragonfly$DRAGONFLY_REL\n\t;;\n    *:*VMS:*:*)\n",
                    "rendered": {
                      "text": "\tGUESS=mips-sei-seiux$UNAME_RELEASE\n\t;;\n    *:DragonFly:*:*)\n\tDRAGONFLY_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[-(].*//'`\n\tGUESS=$UNAME_MACHINE-unknown-dragonfly$DRAGONFLY_REL\n\t;;\n    *:*VMS:*:*)\n",
                      "markdown": "`\tGUESS=mips-sei-seiux$UNAME_RELEASE\n\t;;\n    *:DragonFly:*:*)\n\tDRAGONFLY_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[-(].*//'`\n\tGUESS=$UNAME_MACHINE-unknown-dragonfly$DRAGONFLY_REL\n\t;;\n    *:*VMS:*:*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 1485,
                  "startColumn": 4,
                  "endLine": 1485,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\t    # On 10.4-10.6 one might compile for PowerPC via gcc -arch ppc\n\t    if (echo '#ifdef __POWERPC__'; echo IS_PPC; echo '#endif') | \\\n\t\t   (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) | \\\n\t\t   grep IS_PPC >/dev/null\n\t    then\n\t\tUNAME_PROCESSOR=powerpc\n\t    fi\n",
                    "rendered": {
                      "text": "\t    # On 10.4-10.6 one might compile for PowerPC via gcc -arch ppc\n\t    if (echo '#ifdef __POWERPC__'; echo IS_PPC; echo '#endif') | \\\n\t\t   (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) | \\\n\t\t   grep IS_PPC >/dev/null\n\t    then\n\t\tUNAME_PROCESSOR=powerpc\n\t    fi\n",
                      "markdown": "`\t    # On 10.4-10.6 one might compile for PowerPC via gcc -arch ppc\n\t    if (echo '#ifdef __POWERPC__'; echo IS_PPC; echo '#endif') | \\\n\t\t   (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) | \\\n\t\t   grep IS_PPC >/dev/null\n\t    then\n\t\tUNAME_PROCESSOR=powerpc\n\t    fi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 1475,
                  "startColumn": 4,
                  "endLine": 1475,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\tif test \"$CC_FOR_BUILD\" != no_compiler_found; then\n\t    if (echo '#ifdef __LP64__'; echo IS_64BIT_ARCH; echo '#endif') | \\\n\t\t   (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) | \\\n\t\t   grep IS_64BIT_ARCH >/dev/null\n\t    then\n\t\tcase $UNAME_PROCESSOR in\n\t\t    i386) UNAME_PROCESSOR=x86_64 ;;\n",
                    "rendered": {
                      "text": "\tif test \"$CC_FOR_BUILD\" != no_compiler_found; then\n\t    if (echo '#ifdef __LP64__'; echo IS_64BIT_ARCH; echo '#endif') | \\\n\t\t   (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) | \\\n\t\t   grep IS_64BIT_ARCH >/dev/null\n\t    then\n\t\tcase $UNAME_PROCESSOR in\n\t\t    i386) UNAME_PROCESSOR=x86_64 ;;\n",
                      "markdown": "`\tif test \"$CC_FOR_BUILD\" != no_compiler_found; then\n\t    if (echo '#ifdef __LP64__'; echo IS_64BIT_ARCH; echo '#endif') | \\\n\t\t   (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) | \\\n\t\t   grep IS_64BIT_ARCH >/dev/null\n\t    then\n\t\tcase $UNAME_PROCESSOR in\n\t\t    i386) UNAME_PROCESSOR=x86_64 ;;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 1338,
                  "startColumn": 28,
                  "endLine": 1338,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\tOS_REL='.3'\n\ttest -r /etc/.relid \\\n\t    && OS_REL=.`sed -n 's/[^ ]* [^ ]* \\([0-9][0-9]\\).*/\\1/p' < /etc/.relid`\n\t/bin/uname -p 2>/dev/null | grep 86 >/dev/null \\\n\t    && { echo i486-ncr-sysv4.3\"$OS_REL\"; exit; }\n\t/bin/uname -p 2>/dev/null | /bin/grep entium >/dev/null \\\n\t    && { echo i586-ncr-sysv4.3\"$OS_REL\"; exit; }\n",
                    "rendered": {
                      "text": "\tOS_REL='.3'\n\ttest -r /etc/.relid \\\n\t    && OS_REL=.`sed -n 's/[^ ]* [^ ]* \\([0-9][0-9]\\).*/\\1/p' < /etc/.relid`\n\t/bin/uname -p 2>/dev/null | grep 86 >/dev/null \\\n\t    && { echo i486-ncr-sysv4.3\"$OS_REL\"; exit; }\n\t/bin/uname -p 2>/dev/null | /bin/grep entium >/dev/null \\\n\t    && { echo i586-ncr-sysv4.3\"$OS_REL\"; exit; }\n",
                      "markdown": "`\tOS_REL='.3'\n\ttest -r /etc/.relid \\\n\t    && OS_REL=.`sed -n 's/[^ ]* [^ ]* \\([0-9][0-9]\\).*/\\1/p' < /etc/.relid`\n\t/bin/uname -p 2>/dev/null | grep 86 >/dev/null \\\n\t    && { echo i486-ncr-sysv4.3\"$OS_REL\"; exit; }\n\t/bin/uname -p 2>/dev/null | /bin/grep entium >/dev/null \\\n\t    && { echo i586-ncr-sysv4.3\"$OS_REL\"; exit; }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 1332,
                  "startColumn": 28,
                  "endLine": 1332,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\t/bin/uname -p 2>/dev/null | /bin/grep entium >/dev/null \\\n\t  && { echo i586-ncr-sysv4.3\"$OS_REL\"; exit; } ;;\n    3[34]??:*:4.0:* | 3[34]??,*:*:4.0:*)\n\t/bin/uname -p 2>/dev/null | grep 86 >/dev/null \\\n\t  && { echo i486-ncr-sysv4; exit; } ;;\n    NCR*:*:4.2:* | MPRAS*:*:4.2:*)\n\tOS_REL='.3'\n",
                    "rendered": {
                      "text": "\t/bin/uname -p 2>/dev/null | /bin/grep entium >/dev/null \\\n\t  && { echo i586-ncr-sysv4.3\"$OS_REL\"; exit; } ;;\n    3[34]??:*:4.0:* | 3[34]??,*:*:4.0:*)\n\t/bin/uname -p 2>/dev/null | grep 86 >/dev/null \\\n\t  && { echo i486-ncr-sysv4; exit; } ;;\n    NCR*:*:4.2:* | MPRAS*:*:4.2:*)\n\tOS_REL='.3'\n",
                      "markdown": "`\t/bin/uname -p 2>/dev/null | /bin/grep entium >/dev/null \\\n\t  && { echo i586-ncr-sysv4.3\"$OS_REL\"; exit; } ;;\n    3[34]??:*:4.0:* | 3[34]??,*:*:4.0:*)\n\t/bin/uname -p 2>/dev/null | grep 86 >/dev/null \\\n\t  && { echo i486-ncr-sysv4; exit; } ;;\n    NCR*:*:4.2:* | MPRAS*:*:4.2:*)\n\tOS_REL='.3'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 1327,
                  "startColumn": 28,
                  "endLine": 1327,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\tOS_REL=''\n\ttest -r /etc/.relid \\\n\t&& OS_REL=.`sed -n 's/[^ ]* [^ ]* \\([0-9][0-9]\\).*/\\1/p' < /etc/.relid`\n\t/bin/uname -p 2>/dev/null | grep 86 >/dev/null \\\n\t  && { echo i486-ncr-sysv4.3\"$OS_REL\"; exit; }\n\t/bin/uname -p 2>/dev/null | /bin/grep entium >/dev/null \\\n\t  && { echo i586-ncr-sysv4.3\"$OS_REL\"; exit; } ;;\n",
                    "rendered": {
                      "text": "\tOS_REL=''\n\ttest -r /etc/.relid \\\n\t&& OS_REL=.`sed -n 's/[^ ]* [^ ]* \\([0-9][0-9]\\).*/\\1/p' < /etc/.relid`\n\t/bin/uname -p 2>/dev/null | grep 86 >/dev/null \\\n\t  && { echo i486-ncr-sysv4.3\"$OS_REL\"; exit; }\n\t/bin/uname -p 2>/dev/null | /bin/grep entium >/dev/null \\\n\t  && { echo i586-ncr-sysv4.3\"$OS_REL\"; exit; } ;;\n",
                      "markdown": "`\tOS_REL=''\n\ttest -r /etc/.relid \\\n\t&& OS_REL=.`sed -n 's/[^ ]* [^ ]* \\([0-9][0-9]\\).*/\\1/p' < /etc/.relid`\n\t/bin/uname -p 2>/dev/null | grep 86 >/dev/null \\\n\t  && { echo i486-ncr-sysv4.3\"$OS_REL\"; exit; }\n\t/bin/uname -p 2>/dev/null | /bin/grep entium >/dev/null \\\n\t  && { echo i586-ncr-sysv4.3\"$OS_REL\"; exit; } ;;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 1305,
                  "startColumn": 3,
                  "endLine": 1305,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tGUESS=i860-intel-osf1\n\t;;\n    i860:*:4.*:*) # i860-SVR4\n\tif grep Stardent /usr/include/sys/uadmin.h >/dev/null 2>&1 ; then\n\t  GUESS=i860-stardent-sysv$UNAME_RELEASE    # Stardent Vistra i860-SVR4\n\telse # Add other i860-SVR4 vendors below as they are discovered.\n\t  GUESS=i860-unknown-sysv$UNAME_RELEASE     # Unknown i860-SVR4\n",
                    "rendered": {
                      "text": "\tGUESS=i860-intel-osf1\n\t;;\n    i860:*:4.*:*) # i860-SVR4\n\tif grep Stardent /usr/include/sys/uadmin.h >/dev/null 2>&1 ; then\n\t  GUESS=i860-stardent-sysv$UNAME_RELEASE    # Stardent Vistra i860-SVR4\n\telse # Add other i860-SVR4 vendors below as they are discovered.\n\t  GUESS=i860-unknown-sysv$UNAME_RELEASE     # Unknown i860-SVR4\n",
                      "markdown": "`\tGUESS=i860-intel-osf1\n\t;;\n    i860:*:4.*:*) # i860-SVR4\n\tif grep Stardent /usr/include/sys/uadmin.h >/dev/null 2>&1 ; then\n\t  GUESS=i860-stardent-sysv$UNAME_RELEASE    # Stardent Vistra i860-SVR4\n\telse # Add other i860-SVR4 vendors below as they are discovered.\n\t  GUESS=i860-unknown-sysv$UNAME_RELEASE     # Unknown i860-SVR4\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 1294,
                  "startColumn": 39,
                  "endLine": 1294,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t# uname -m prints for DJGPP always 'pc', but it prints nothing about\n\t# the processor, so we play safe by assuming i586.\n\t# Note: whatever this is, it MUST be the same as what config.sub\n\t# prints for the \"djgpp\" host, or else GDB configure will decide that\n\t# this is a cross-build.\n\tGUESS=i586-pc-msdosdjgpp\n\t;;\n",
                    "rendered": {
                      "text": "\t# uname -m prints for DJGPP always 'pc', but it prints nothing about\n\t# the processor, so we play safe by assuming i586.\n\t# Note: whatever this is, it MUST be the same as what config.sub\n\t# prints for the \"djgpp\" host, or else GDB configure will decide that\n\t# this is a cross-build.\n\tGUESS=i586-pc-msdosdjgpp\n\t;;\n",
                      "markdown": "`\t# uname -m prints for DJGPP always 'pc', but it prints nothing about\n\t# the processor, so we play safe by assuming i586.\n\t# Note: whatever this is, it MUST be the same as what config.sub\n\t# prints for the \"djgpp\" host, or else GDB configure will decide that\n\t# this is a cross-build.\n\tGUESS=i586-pc-msdosdjgpp\n\t;;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 1264,
                  "startColumn": 22,
                  "endLine": 1264,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\t;;\n    i*86:*:5:[678]*)\n\t# UnixWare 7.x, OpenUNIX and OpenServer 6.\n\tcase `/bin/uname -X | grep \"^Machine\"` in\n\t    *486*)\t     UNAME_MACHINE=i486 ;;\n\t    *Pentium)\t     UNAME_MACHINE=i586 ;;\n\t    *Pent*|*Celeron) UNAME_MACHINE=i686 ;;\n",
                    "rendered": {
                      "text": "\t;;\n    i*86:*:5:[678]*)\n\t# UnixWare 7.x, OpenUNIX and OpenServer 6.\n\tcase `/bin/uname -X | grep \"^Machine\"` in\n\t    *486*)\t     UNAME_MACHINE=i486 ;;\n\t    *Pentium)\t     UNAME_MACHINE=i586 ;;\n\t    *Pent*|*Celeron) UNAME_MACHINE=i686 ;;\n",
                      "markdown": "`\t;;\n    i*86:*:5:[678]*)\n\t# UnixWare 7.x, OpenUNIX and OpenServer 6.\n\tcase `/bin/uname -X | grep \"^Machine\"` in\n\t    *486*)\t     UNAME_MACHINE=i486 ;;\n\t    *Pentium)\t     UNAME_MACHINE=i586 ;;\n\t    *Pent*|*Celeron) UNAME_MACHINE=i686 ;;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 1256,
                  "startColumn": 3,
                  "endLine": 1256,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\t;;\n    i*86:*:4.*:*)\n\tUNAME_REL=`echo \"$UNAME_RELEASE\" | sed 's/\\/MP$//'`\n\tif grep Novell /usr/include/link.h >/dev/null 2>/dev/null; then\n\t\tGUESS=$UNAME_MACHINE-univel-sysv$UNAME_REL\n\telse\n\t\tGUESS=$UNAME_MACHINE-pc-sysv$UNAME_REL\n",
                    "rendered": {
                      "text": "\t;;\n    i*86:*:4.*:*)\n\tUNAME_REL=`echo \"$UNAME_RELEASE\" | sed 's/\\/MP$//'`\n\tif grep Novell /usr/include/link.h >/dev/null 2>/dev/null; then\n\t\tGUESS=$UNAME_MACHINE-univel-sysv$UNAME_REL\n\telse\n\t\tGUESS=$UNAME_MACHINE-pc-sysv$UNAME_REL\n",
                      "markdown": "`\t;;\n    i*86:*:4.*:*)\n\tUNAME_REL=`echo \"$UNAME_RELEASE\" | sed 's/\\/MP$//'`\n\tif grep Novell /usr/include/link.h >/dev/null 2>/dev/null; then\n\t\tGUESS=$UNAME_MACHINE-univel-sysv$UNAME_REL\n\telse\n\t\tGUESS=$UNAME_MACHINE-pc-sysv$UNAME_REL\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 1255,
                  "startColumn": 35,
                  "endLine": 1255,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\tGUESS=$UNAME_MACHINE-pc-msdosdjgpp\n\t;;\n    i*86:*:4.*:*)\n\tUNAME_REL=`echo \"$UNAME_RELEASE\" | sed 's/\\/MP$//'`\n\tif grep Novell /usr/include/link.h >/dev/null 2>/dev/null; then\n\t\tGUESS=$UNAME_MACHINE-univel-sysv$UNAME_REL\n\telse\n",
                    "rendered": {
                      "text": "\tGUESS=$UNAME_MACHINE-pc-msdosdjgpp\n\t;;\n    i*86:*:4.*:*)\n\tUNAME_REL=`echo \"$UNAME_RELEASE\" | sed 's/\\/MP$//'`\n\tif grep Novell /usr/include/link.h >/dev/null 2>/dev/null; then\n\t\tGUESS=$UNAME_MACHINE-univel-sysv$UNAME_REL\n\telse\n",
                      "markdown": "`\tGUESS=$UNAME_MACHINE-pc-msdosdjgpp\n\t;;\n    i*86:*:4.*:*)\n\tUNAME_REL=`echo \"$UNAME_RELEASE\" | sed 's/\\/MP$//'`\n\tif grep Novell /usr/include/link.h >/dev/null 2>/dev/null; then\n\t\tGUESS=$UNAME_MACHINE-univel-sysv$UNAME_REL\n\telse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 1235,
                  "startColumn": 21,
                  "endLine": 1235,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\tGUESS=$UNAME_MACHINE-pc-sysv4.2uw$UNAME_VERSION\n\t;;\n    i*86:OS/2:*:*)\n\t# If we were able to find 'uname', then EMX Unix compatibility\n\t# is probably installed.\n\tGUESS=$UNAME_MACHINE-pc-os2-emx\n\t;;\n",
                    "rendered": {
                      "text": "\tGUESS=$UNAME_MACHINE-pc-sysv4.2uw$UNAME_VERSION\n\t;;\n    i*86:OS/2:*:*)\n\t# If we were able to find 'uname', then EMX Unix compatibility\n\t# is probably installed.\n\tGUESS=$UNAME_MACHINE-pc-os2-emx\n\t;;\n",
                      "markdown": "`\tGUESS=$UNAME_MACHINE-pc-sysv4.2uw$UNAME_VERSION\n\t;;\n    i*86:OS/2:*:*)\n\t# If we were able to find 'uname', then EMX Unix compatibility\n\t# is probably installed.\n\tGUESS=$UNAME_MACHINE-pc-os2-emx\n\t;;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 1208,
                  "startColumn": 72,
                  "endLine": 1208,
                  "endColumn": 77,
                  "snippet": {
                    "text": "\t    #endif\n\t    #endif\nEOF\n\t    cc_set_abi=`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^ABI' | sed 's, ,,g'`\n\t    eval \"$cc_set_abi\"\n\t    case $ABI in\n\t\tx86) CPU=i686 ;;\n",
                    "rendered": {
                      "text": "\t    #endif\n\t    #endif\nEOF\n\t    cc_set_abi=`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^ABI' | sed 's, ,,g'`\n\t    eval \"$cc_set_abi\"\n\t    case $ABI in\n\t\tx86) CPU=i686 ;;\n",
                      "markdown": "`\t    #endif\n\t    #endif\nEOF\n\t    cc_set_abi=`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^ABI' | sed 's, ,,g'`\n\t    eval \"$cc_set_abi\"\n\t    case $ABI in\n\t\tx86) CPU=i686 ;;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 1208,
                  "startColumn": 58,
                  "endLine": 1208,
                  "endColumn": 64,
                  "snippet": {
                    "text": "\t    #endif\n\t    #endif\nEOF\n\t    cc_set_abi=`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^ABI' | sed 's, ,,g'`\n\t    eval \"$cc_set_abi\"\n\t    case $ABI in\n\t\tx86) CPU=i686 ;;\n",
                    "rendered": {
                      "text": "\t    #endif\n\t    #endif\nEOF\n\t    cc_set_abi=`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^ABI' | sed 's, ,,g'`\n\t    eval \"$cc_set_abi\"\n\t    case $ABI in\n\t\tx86) CPU=i686 ;;\n",
                      "markdown": "`\t    #endif\n\t    #endif\nEOF\n\t    cc_set_abi=`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^ABI' | sed 's, ,,g'`\n\t    eval \"$cc_set_abi\"\n\t    case $ABI in\n\t\tx86) CPU=i686 ;;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 1199,
                  "startColumn": 4,
                  "endLine": 1199,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tLIBCABI=$LIBC\n\tif test \"$CC_FOR_BUILD\" != no_compiler_found; then\n\t    ABI=64\n\t    sed 's/^\t    //' << EOF > \"$dummy.c\"\n\t    #ifdef __i386__\n\t    ABI=x86\n\t    #else\n",
                    "rendered": {
                      "text": "\tLIBCABI=$LIBC\n\tif test \"$CC_FOR_BUILD\" != no_compiler_found; then\n\t    ABI=64\n\t    sed 's/^\t    //' << EOF > \"$dummy.c\"\n\t    #ifdef __i386__\n\t    ABI=x86\n\t    #else\n",
                      "markdown": "`\tLIBCABI=$LIBC\n\tif test \"$CC_FOR_BUILD\" != no_compiler_found; then\n\t    ABI=64\n\t    sed 's/^\t    //' << EOF > \"$dummy.c\"\n\t    #ifdef __i386__\n\t    ABI=x86\n\t    #else\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 1154,
                  "startColumn": 54,
                  "endLine": 1154,
                  "endColumn": 59,
                  "snippet": {
                    "text": "\t;;\n    parisc:Linux:*:* | hppa:Linux:*:*)\n\t# Look for CPU level\n\tcase `grep '^cpu[^a-z]*:' /proc/cpuinfo 2>/dev/null | cut -d' ' -f2` in\n\t  PA7*) GUESS=hppa1.1-unknown-linux-$LIBC ;;\n\t  PA8*) GUESS=hppa2.0-unknown-linux-$LIBC ;;\n\t  *)    GUESS=hppa-unknown-linux-$LIBC ;;\n",
                    "rendered": {
                      "text": "\t;;\n    parisc:Linux:*:* | hppa:Linux:*:*)\n\t# Look for CPU level\n\tcase `grep '^cpu[^a-z]*:' /proc/cpuinfo 2>/dev/null | cut -d' ' -f2` in\n\t  PA7*) GUESS=hppa1.1-unknown-linux-$LIBC ;;\n\t  PA8*) GUESS=hppa2.0-unknown-linux-$LIBC ;;\n\t  *)    GUESS=hppa-unknown-linux-$LIBC ;;\n",
                      "markdown": "`\t;;\n    parisc:Linux:*:* | hppa:Linux:*:*)\n\t# Look for CPU level\n\tcase `grep '^cpu[^a-z]*:' /proc/cpuinfo 2>/dev/null | cut -d' ' -f2` in\n\t  PA7*) GUESS=hppa1.1-unknown-linux-$LIBC ;;\n\t  PA8*) GUESS=hppa2.0-unknown-linux-$LIBC ;;\n\t  *)    GUESS=hppa-unknown-linux-$LIBC ;;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 1133,
                  "startColumn": 55,
                  "endLine": 1133,
                  "endColumn": 61,
                  "snippet": {
                    "text": "\t#endif\n\t#endif\nEOF\n\tcc_set_vars=`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^CPU\\|^MIPS_ENDIAN\\|^LIBCABI'`\n\teval \"$cc_set_vars\"\n\ttest \"x$CPU\" != x && { echo \"$CPU${MIPS_ENDIAN}-unknown-linux-$LIBCABI\"; exit; }\n\t;;\n",
                    "rendered": {
                      "text": "\t#endif\n\t#endif\nEOF\n\tcc_set_vars=`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^CPU\\|^MIPS_ENDIAN\\|^LIBCABI'`\n\teval \"$cc_set_vars\"\n\ttest \"x$CPU\" != x && { echo \"$CPU${MIPS_ENDIAN}-unknown-linux-$LIBCABI\"; exit; }\n\t;;\n",
                      "markdown": "`\t#endif\n\t#endif\nEOF\n\tcc_set_vars=`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^CPU\\|^MIPS_ENDIAN\\|^LIBCABI'`\n\teval \"$cc_set_vars\"\n\ttest \"x$CPU\" != x && { echo \"$CPU${MIPS_ENDIAN}-unknown-linux-$LIBCABI\"; exit; }\n\t;;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 1093,
                  "endLine": 1093,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tset_cc_for_build\n\tIS_GLIBC=0\n\ttest x\"${LIBC}\" = xgnu && IS_GLIBC=1\n\tsed 's/^\t//' << EOF > \"$dummy.c\"\n\t#undef CPU\n\t#undef mips\n\t#undef mipsel\n",
                    "rendered": {
                      "text": "\tset_cc_for_build\n\tIS_GLIBC=0\n\ttest x\"${LIBC}\" = xgnu && IS_GLIBC=1\n\tsed 's/^\t//' << EOF > \"$dummy.c\"\n\t#undef CPU\n\t#undef mips\n\t#undef mipsel\n",
                      "markdown": "`\tset_cc_for_build\n\tIS_GLIBC=0\n\ttest x\"${LIBC}\" = xgnu && IS_GLIBC=1\n\tsed 's/^\t//' << EOF > \"$dummy.c\"\n\t#undef CPU\n\t#undef mips\n\t#undef mipsel\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 1036,
                  "startColumn": 3,
                  "endLine": 1036,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\t    GUESS=$UNAME_MACHINE-unknown-linux-$LIBC\n\telse\n\t    if echo __ARM_PCS_VFP | $CC_FOR_BUILD -E - 2>/dev/null \\\n\t\t| grep -q __ARM_PCS_VFP\n\t    then\n\t\tGUESS=$UNAME_MACHINE-unknown-linux-${LIBC}eabi\n\t    else\n",
                    "rendered": {
                      "text": "\t    GUESS=$UNAME_MACHINE-unknown-linux-$LIBC\n\telse\n\t    if echo __ARM_PCS_VFP | $CC_FOR_BUILD -E - 2>/dev/null \\\n\t\t| grep -q __ARM_PCS_VFP\n\t    then\n\t\tGUESS=$UNAME_MACHINE-unknown-linux-${LIBC}eabi\n\t    else\n",
                      "markdown": "`\t    GUESS=$UNAME_MACHINE-unknown-linux-$LIBC\n\telse\n\t    if echo __ARM_PCS_VFP | $CC_FOR_BUILD -E - 2>/dev/null \\\n\t\t| grep -q __ARM_PCS_VFP\n\t    then\n\t\tGUESS=$UNAME_MACHINE-unknown-linux-${LIBC}eabi\n\t    else\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 1031,
                  "startColumn": 6,
                  "endLine": 1031,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    arm*:Linux:*:*)\n\tset_cc_for_build\n\tif echo __ARM_EABI__ | $CC_FOR_BUILD -E - 2>/dev/null \\\n\t    | grep -q __ARM_EABI__\n\tthen\n\t    GUESS=$UNAME_MACHINE-unknown-linux-$LIBC\n\telse\n",
                    "rendered": {
                      "text": "    arm*:Linux:*:*)\n\tset_cc_for_build\n\tif echo __ARM_EABI__ | $CC_FOR_BUILD -E - 2>/dev/null \\\n\t    | grep -q __ARM_EABI__\n\tthen\n\t    GUESS=$UNAME_MACHINE-unknown-linux-$LIBC\n\telse\n",
                      "markdown": "`    arm*:Linux:*:*)\n\tset_cc_for_build\n\tif echo __ARM_EABI__ | $CC_FOR_BUILD -E - 2>/dev/null \\\n\t    | grep -q __ARM_EABI__\n\tthen\n\t    GUESS=$UNAME_MACHINE-unknown-linux-$LIBC\n\telse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 1021,
                  "startColumn": 36,
                  "endLine": 1021,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\t  EV67)  UNAME_MACHINE=alphaev67 ;;\n\t  EV68*) UNAME_MACHINE=alphaev68 ;;\n\tesac\n\tobjdump --private-headers /bin/sh | grep -q ld.so.1\n\tif test \"$?\" = 0 ; then LIBC=gnulibc1 ; fi\n\tGUESS=$UNAME_MACHINE-unknown-linux-$LIBC\n\t;;\n",
                    "rendered": {
                      "text": "\t  EV67)  UNAME_MACHINE=alphaev67 ;;\n\t  EV68*) UNAME_MACHINE=alphaev68 ;;\n\tesac\n\tobjdump --private-headers /bin/sh | grep -q ld.so.1\n\tif test \"$?\" = 0 ; then LIBC=gnulibc1 ; fi\n\tGUESS=$UNAME_MACHINE-unknown-linux-$LIBC\n\t;;\n",
                      "markdown": "`\t  EV67)  UNAME_MACHINE=alphaev67 ;;\n\t  EV68*) UNAME_MACHINE=alphaev68 ;;\n\tesac\n\tobjdump --private-headers /bin/sh | grep -q ld.so.1\n\tif test \"$?\" = 0 ; then LIBC=gnulibc1 ; fi\n\tGUESS=$UNAME_MACHINE-unknown-linux-$LIBC\n\t;;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 999,
                  "startColumn": 72,
                  "endLine": 999,
                  "endColumn": 77,
                  "snippet": {
                    "text": "\t    #endif\n\t    #endif\nEOF\n\t    cc_set_abi=`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^ABI' | sed 's, ,,g'`\n\t    eval \"$cc_set_abi\"\n\t    case $ABI in\n\t\teabi | eabihf) CPU=armv8l; LIBCABI=$LIBC$ABI ;;\n",
                    "rendered": {
                      "text": "\t    #endif\n\t    #endif\nEOF\n\t    cc_set_abi=`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^ABI' | sed 's, ,,g'`\n\t    eval \"$cc_set_abi\"\n\t    case $ABI in\n\t\teabi | eabihf) CPU=armv8l; LIBCABI=$LIBC$ABI ;;\n",
                      "markdown": "`\t    #endif\n\t    #endif\nEOF\n\t    cc_set_abi=`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^ABI' | sed 's, ,,g'`\n\t    eval \"$cc_set_abi\"\n\t    case $ABI in\n\t\teabi | eabihf) CPU=armv8l; LIBCABI=$LIBC$ABI ;;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 999,
                  "startColumn": 58,
                  "endLine": 999,
                  "endColumn": 64,
                  "snippet": {
                    "text": "\t    #endif\n\t    #endif\nEOF\n\t    cc_set_abi=`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^ABI' | sed 's, ,,g'`\n\t    eval \"$cc_set_abi\"\n\t    case $ABI in\n\t\teabi | eabihf) CPU=armv8l; LIBCABI=$LIBC$ABI ;;\n",
                    "rendered": {
                      "text": "\t    #endif\n\t    #endif\nEOF\n\t    cc_set_abi=`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^ABI' | sed 's, ,,g'`\n\t    eval \"$cc_set_abi\"\n\t    case $ABI in\n\t\teabi | eabihf) CPU=armv8l; LIBCABI=$LIBC$ABI ;;\n",
                      "markdown": "`\t    #endif\n\t    #endif\nEOF\n\t    cc_set_abi=`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^ABI' | sed 's, ,,g'`\n\t    eval \"$cc_set_abi\"\n\t    case $ABI in\n\t\teabi | eabihf) CPU=armv8l; LIBCABI=$LIBC$ABI ;;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 990,
                  "startColumn": 4,
                  "endLine": 990,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tLIBCABI=$LIBC\n\tif test \"$CC_FOR_BUILD\" != no_compiler_found; then\n\t    ABI=64\n\t    sed 's/^\t    //' << EOF > \"$dummy.c\"\n\t    #ifdef __ARM_EABI__\n\t    #ifdef __ARM_PCS_VFP\n\t    ABI=eabihf\n",
                    "rendered": {
                      "text": "\tLIBCABI=$LIBC\n\tif test \"$CC_FOR_BUILD\" != no_compiler_found; then\n\t    ABI=64\n\t    sed 's/^\t    //' << EOF > \"$dummy.c\"\n\t    #ifdef __ARM_EABI__\n\t    #ifdef __ARM_PCS_VFP\n\t    ABI=eabihf\n",
                      "markdown": "`\tLIBCABI=$LIBC\n\tif test \"$CC_FOR_BUILD\" != no_compiler_found; then\n\t    ABI=64\n\t    sed 's/^\t    //' << EOF > \"$dummy.c\"\n\t    #ifdef __ARM_EABI__\n\t    #ifdef __ARM_PCS_VFP\n\t    ABI=eabihf\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 972,
                  "startColumn": 33,
                  "endLine": 972,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    *:GNU/*:*:*)\n\t# other systems with GNU libc and userland\n\tGNU_SYS=`echo \"$UNAME_SYSTEM\" | sed 's,^[^/]*/,,' | tr \"[:upper:]\" \"[:lower:]\"`\n\tGNU_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[-(].*//'`\n\tGUESS=$UNAME_MACHINE-unknown-$GNU_SYS$GNU_REL-$LIBC\n\t;;\n    x86_64:[Mm]anagarm:*:*|i?86:[Mm]anagarm:*:*)\n",
                    "rendered": {
                      "text": "    *:GNU/*:*:*)\n\t# other systems with GNU libc and userland\n\tGNU_SYS=`echo \"$UNAME_SYSTEM\" | sed 's,^[^/]*/,,' | tr \"[:upper:]\" \"[:lower:]\"`\n\tGNU_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[-(].*//'`\n\tGUESS=$UNAME_MACHINE-unknown-$GNU_SYS$GNU_REL-$LIBC\n\t;;\n    x86_64:[Mm]anagarm:*:*|i?86:[Mm]anagarm:*:*)\n",
                      "markdown": "`    *:GNU/*:*:*)\n\t# other systems with GNU libc and userland\n\tGNU_SYS=`echo \"$UNAME_SYSTEM\" | sed 's,^[^/]*/,,' | tr \"[:upper:]\" \"[:lower:]\"`\n\tGNU_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[-(].*//'`\n\tGUESS=$UNAME_MACHINE-unknown-$GNU_SYS$GNU_REL-$LIBC\n\t;;\n    x86_64:[Mm]anagarm:*:*|i?86:[Mm]anagarm:*:*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 971,
                  "startColumn": 32,
                  "endLine": 971,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\t;;\n    *:GNU/*:*:*)\n\t# other systems with GNU libc and userland\n\tGNU_SYS=`echo \"$UNAME_SYSTEM\" | sed 's,^[^/]*/,,' | tr \"[:upper:]\" \"[:lower:]\"`\n\tGNU_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[-(].*//'`\n\tGUESS=$UNAME_MACHINE-unknown-$GNU_SYS$GNU_REL-$LIBC\n\t;;\n",
                    "rendered": {
                      "text": "\t;;\n    *:GNU/*:*:*)\n\t# other systems with GNU libc and userland\n\tGNU_SYS=`echo \"$UNAME_SYSTEM\" | sed 's,^[^/]*/,,' | tr \"[:upper:]\" \"[:lower:]\"`\n\tGNU_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[-(].*//'`\n\tGUESS=$UNAME_MACHINE-unknown-$GNU_SYS$GNU_REL-$LIBC\n\t;;\n",
                      "markdown": "`\t;;\n    *:GNU/*:*:*)\n\t# other systems with GNU libc and userland\n\tGNU_SYS=`echo \"$UNAME_SYSTEM\" | sed 's,^[^/]*/,,' | tr \"[:upper:]\" \"[:lower:]\"`\n\tGNU_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[-(].*//'`\n\tGUESS=$UNAME_MACHINE-unknown-$GNU_SYS$GNU_REL-$LIBC\n\t;;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 966,
                  "startColumn": 33,
                  "endLine": 966,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    *:GNU:*:*)\n\t# the GNU system\n\tGNU_ARCH=`echo \"$UNAME_MACHINE\" | sed -e 's,[-/].*$,,'`\n\tGNU_REL=`echo \"$UNAME_RELEASE\" | sed -e 's,/.*$,,'`\n\tGUESS=$GNU_ARCH-unknown-$LIBC$GNU_REL\n\t;;\n    *:GNU/*:*:*)\n",
                    "rendered": {
                      "text": "    *:GNU:*:*)\n\t# the GNU system\n\tGNU_ARCH=`echo \"$UNAME_MACHINE\" | sed -e 's,[-/].*$,,'`\n\tGNU_REL=`echo \"$UNAME_RELEASE\" | sed -e 's,/.*$,,'`\n\tGUESS=$GNU_ARCH-unknown-$LIBC$GNU_REL\n\t;;\n    *:GNU/*:*:*)\n",
                      "markdown": "`    *:GNU:*:*)\n\t# the GNU system\n\tGNU_ARCH=`echo \"$UNAME_MACHINE\" | sed -e 's,[-/].*$,,'`\n\tGNU_REL=`echo \"$UNAME_RELEASE\" | sed -e 's,/.*$,,'`\n\tGUESS=$GNU_ARCH-unknown-$LIBC$GNU_REL\n\t;;\n    *:GNU/*:*:*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 965,
                  "startColumn": 34,
                  "endLine": 965,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\t;;\n    *:GNU:*:*)\n\t# the GNU system\n\tGNU_ARCH=`echo \"$UNAME_MACHINE\" | sed -e 's,[-/].*$,,'`\n\tGNU_REL=`echo \"$UNAME_RELEASE\" | sed -e 's,/.*$,,'`\n\tGUESS=$GNU_ARCH-unknown-$LIBC$GNU_REL\n\t;;\n",
                    "rendered": {
                      "text": "\t;;\n    *:GNU:*:*)\n\t# the GNU system\n\tGNU_ARCH=`echo \"$UNAME_MACHINE\" | sed -e 's,[-/].*$,,'`\n\tGNU_REL=`echo \"$UNAME_RELEASE\" | sed -e 's,/.*$,,'`\n\tGUESS=$GNU_ARCH-unknown-$LIBC$GNU_REL\n\t;;\n",
                      "markdown": "`\t;;\n    *:GNU:*:*)\n\t# the GNU system\n\tGNU_ARCH=`echo \"$UNAME_MACHINE\" | sed -e 's,[-/].*$,,'`\n\tGNU_REL=`echo \"$UNAME_RELEASE\" | sed -e 's,/.*$,,'`\n\tGUESS=$GNU_ARCH-unknown-$LIBC$GNU_REL\n\t;;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 960,
                  "startColumn": 33,
                  "endLine": 960,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\tGUESS=x86_64-pc-cygwin\n\t;;\n    prep*:SunOS:5.*:*)\n\tSUN_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//'`\n\tGUESS=powerpcle-unknown-solaris2$SUN_REL\n\t;;\n    *:GNU:*:*)\n",
                    "rendered": {
                      "text": "\tGUESS=x86_64-pc-cygwin\n\t;;\n    prep*:SunOS:5.*:*)\n\tSUN_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//'`\n\tGUESS=powerpcle-unknown-solaris2$SUN_REL\n\t;;\n    *:GNU:*:*)\n",
                      "markdown": "`\tGUESS=x86_64-pc-cygwin\n\t;;\n    prep*:SunOS:5.*:*)\n\tSUN_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//'`\n\tGUESS=powerpcle-unknown-solaris2$SUN_REL\n\t;;\n    *:GNU:*:*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 920,
                  "startColumn": 37,
                  "endLine": 920,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\t    i386)\n\t\tUNAME_PROCESSOR=i586 ;;\n\tesac\n\tFREEBSD_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[-(].*//'`\n\tGUESS=$UNAME_PROCESSOR-unknown-freebsd$FREEBSD_REL\n\t;;\n    i*:CYGWIN*:*)\n",
                    "rendered": {
                      "text": "\t    i386)\n\t\tUNAME_PROCESSOR=i586 ;;\n\tesac\n\tFREEBSD_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[-(].*//'`\n\tGUESS=$UNAME_PROCESSOR-unknown-freebsd$FREEBSD_REL\n\t;;\n    i*:CYGWIN*:*)\n",
                      "markdown": "`\t    i386)\n\t\tUNAME_PROCESSOR=i586 ;;\n\tesac\n\tFREEBSD_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[-(].*//'`\n\tGUESS=$UNAME_PROCESSOR-unknown-freebsd$FREEBSD_REL\n\t;;\n    i*:CYGWIN*:*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 908,
                  "startColumn": 41,
                  "endLine": 908,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\t    FREEBSD_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[-(].*//'`\n\t    GUESS=$UNAME_PROCESSOR-unknown-freebsd$FREEBSD_REL-gnueabi\n\telse\n\t    FREEBSD_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[-(].*//'`\n\t    GUESS=$UNAME_PROCESSOR-unknown-freebsd$FREEBSD_REL-gnueabihf\n\tfi\n\t;;\n",
                    "rendered": {
                      "text": "\t    FREEBSD_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[-(].*//'`\n\t    GUESS=$UNAME_PROCESSOR-unknown-freebsd$FREEBSD_REL-gnueabi\n\telse\n\t    FREEBSD_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[-(].*//'`\n\t    GUESS=$UNAME_PROCESSOR-unknown-freebsd$FREEBSD_REL-gnueabihf\n\tfi\n\t;;\n",
                      "markdown": "`\t    FREEBSD_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[-(].*//'`\n\t    GUESS=$UNAME_PROCESSOR-unknown-freebsd$FREEBSD_REL-gnueabi\n\telse\n\t    FREEBSD_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[-(].*//'`\n\t    GUESS=$UNAME_PROCESSOR-unknown-freebsd$FREEBSD_REL-gnueabihf\n\tfi\n\t;;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 905,
                  "startColumn": 41,
                  "endLine": 905,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\tif echo __ARM_PCS_VFP | $CC_FOR_BUILD -E - 2>/dev/null \\\n\t    | grep -q __ARM_PCS_VFP\n\tthen\n\t    FREEBSD_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[-(].*//'`\n\t    GUESS=$UNAME_PROCESSOR-unknown-freebsd$FREEBSD_REL-gnueabi\n\telse\n\t    FREEBSD_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[-(].*//'`\n",
                    "rendered": {
                      "text": "\tif echo __ARM_PCS_VFP | $CC_FOR_BUILD -E - 2>/dev/null \\\n\t    | grep -q __ARM_PCS_VFP\n\tthen\n\t    FREEBSD_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[-(].*//'`\n\t    GUESS=$UNAME_PROCESSOR-unknown-freebsd$FREEBSD_REL-gnueabi\n\telse\n\t    FREEBSD_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[-(].*//'`\n",
                      "markdown": "`\tif echo __ARM_PCS_VFP | $CC_FOR_BUILD -E - 2>/dev/null \\\n\t    | grep -q __ARM_PCS_VFP\n\tthen\n\t    FREEBSD_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[-(].*//'`\n\t    GUESS=$UNAME_PROCESSOR-unknown-freebsd$FREEBSD_REL-gnueabi\n\telse\n\t    FREEBSD_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[-(].*//'`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 903,
                  "startColumn": 6,
                  "endLine": 903,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\tUNAME_PROCESSOR=`uname -p`\n\tset_cc_for_build\n\tif echo __ARM_PCS_VFP | $CC_FOR_BUILD -E - 2>/dev/null \\\n\t    | grep -q __ARM_PCS_VFP\n\tthen\n\t    FREEBSD_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[-(].*//'`\n\t    GUESS=$UNAME_PROCESSOR-unknown-freebsd$FREEBSD_REL-gnueabi\n",
                    "rendered": {
                      "text": "\tUNAME_PROCESSOR=`uname -p`\n\tset_cc_for_build\n\tif echo __ARM_PCS_VFP | $CC_FOR_BUILD -E - 2>/dev/null \\\n\t    | grep -q __ARM_PCS_VFP\n\tthen\n\t    FREEBSD_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[-(].*//'`\n\t    GUESS=$UNAME_PROCESSOR-unknown-freebsd$FREEBSD_REL-gnueabi\n",
                      "markdown": "`\tUNAME_PROCESSOR=`uname -p`\n\tset_cc_for_build\n\tif echo __ARM_PCS_VFP | $CC_FOR_BUILD -E - 2>/dev/null \\\n\t    | grep -q __ARM_PCS_VFP\n\tthen\n\t    FREEBSD_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[-(].*//'`\n\t    GUESS=$UNAME_PROCESSOR-unknown-freebsd$FREEBSD_REL-gnueabi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 887,
                  "startColumn": 96,
                  "endLine": 887,
                  "endColumn": 101,
                  "snippet": {
                    "text": "\t;;\n    5000:UNIX_System_V:4.*:*)\n\tFUJITSU_SYS=`uname -p | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/\\///'`\n\tFUJITSU_REL=`echo \"$UNAME_RELEASE\" | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/ /_/'`\n\tGUESS=sparc-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}\n\t;;\n    i*86:BSD/386:*:* | i*86:BSD/OS:*:* | *:Ascend\\ Embedded/OS:*:*)\n",
                    "rendered": {
                      "text": "\t;;\n    5000:UNIX_System_V:4.*:*)\n\tFUJITSU_SYS=`uname -p | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/\\///'`\n\tFUJITSU_REL=`echo \"$UNAME_RELEASE\" | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/ /_/'`\n\tGUESS=sparc-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}\n\t;;\n    i*86:BSD/386:*:* | i*86:BSD/OS:*:* | *:Ascend\\ Embedded/OS:*:*)\n",
                      "markdown": "`\t;;\n    5000:UNIX_System_V:4.*:*)\n\tFUJITSU_SYS=`uname -p | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/\\///'`\n\tFUJITSU_REL=`echo \"$UNAME_RELEASE\" | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/ /_/'`\n\tGUESS=sparc-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}\n\t;;\n    i*86:BSD/386:*:* | i*86:BSD/OS:*:* | *:Ascend\\ Embedded/OS:*:*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 886,
                  "startColumn": 83,
                  "endLine": 886,
                  "endColumn": 88,
                  "snippet": {
                    "text": "\tGUESS=${FUJITSU_PROC}-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}\n\t;;\n    5000:UNIX_System_V:4.*:*)\n\tFUJITSU_SYS=`uname -p | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/\\///'`\n\tFUJITSU_REL=`echo \"$UNAME_RELEASE\" | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/ /_/'`\n\tGUESS=sparc-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}\n\t;;\n",
                    "rendered": {
                      "text": "\tGUESS=${FUJITSU_PROC}-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}\n\t;;\n    5000:UNIX_System_V:4.*:*)\n\tFUJITSU_SYS=`uname -p | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/\\///'`\n\tFUJITSU_REL=`echo \"$UNAME_RELEASE\" | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/ /_/'`\n\tGUESS=sparc-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}\n\t;;\n",
                      "markdown": "`\tGUESS=${FUJITSU_PROC}-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}\n\t;;\n    5000:UNIX_System_V:4.*:*)\n\tFUJITSU_SYS=`uname -p | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/\\///'`\n\tFUJITSU_REL=`echo \"$UNAME_RELEASE\" | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/ /_/'`\n\tGUESS=sparc-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}\n\t;;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 882,
                  "startColumn": 37,
                  "endLine": 882,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    F30[01]:UNIX_System_V:*:* | F700:UNIX_System_V:*:*)\n\tFUJITSU_PROC=`uname -m | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz`\n\tFUJITSU_SYS=`uname -p | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/\\///'`\n\tFUJITSU_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/ /_/'`\n\tGUESS=${FUJITSU_PROC}-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}\n\t;;\n    5000:UNIX_System_V:4.*:*)\n",
                    "rendered": {
                      "text": "    F30[01]:UNIX_System_V:*:* | F700:UNIX_System_V:*:*)\n\tFUJITSU_PROC=`uname -m | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz`\n\tFUJITSU_SYS=`uname -p | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/\\///'`\n\tFUJITSU_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/ /_/'`\n\tGUESS=${FUJITSU_PROC}-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}\n\t;;\n    5000:UNIX_System_V:4.*:*)\n",
                      "markdown": "`    F30[01]:UNIX_System_V:*:* | F700:UNIX_System_V:*:*)\n\tFUJITSU_PROC=`uname -m | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz`\n\tFUJITSU_SYS=`uname -p | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/\\///'`\n\tFUJITSU_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/ /_/'`\n\tGUESS=${FUJITSU_PROC}-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}\n\t;;\n    5000:UNIX_System_V:4.*:*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 881,
                  "startColumn": 83,
                  "endLine": 881,
                  "endColumn": 88,
                  "snippet": {
                    "text": "\t;;\n    F30[01]:UNIX_System_V:*:* | F700:UNIX_System_V:*:*)\n\tFUJITSU_PROC=`uname -m | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz`\n\tFUJITSU_SYS=`uname -p | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/\\///'`\n\tFUJITSU_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/ /_/'`\n\tGUESS=${FUJITSU_PROC}-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}\n\t;;\n",
                    "rendered": {
                      "text": "\t;;\n    F30[01]:UNIX_System_V:*:* | F700:UNIX_System_V:*:*)\n\tFUJITSU_PROC=`uname -m | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz`\n\tFUJITSU_SYS=`uname -p | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/\\///'`\n\tFUJITSU_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/ /_/'`\n\tGUESS=${FUJITSU_PROC}-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}\n\t;;\n",
                      "markdown": "`\t;;\n    F30[01]:UNIX_System_V:*:* | F700:UNIX_System_V:*:*)\n\tFUJITSU_PROC=`uname -m | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz`\n\tFUJITSU_SYS=`uname -p | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/\\///'`\n\tFUJITSU_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/ /_/'`\n\tGUESS=${FUJITSU_PROC}-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}\n\t;;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 876,
                  "startColumn": 34,
                  "endLine": 876,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\tGUESS=sv1-cray-unicos$CRAY_REL\n\t;;\n    *:UNICOS/mp:*:*)\n\tCRAY_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'`\n\tGUESS=craynv-cray-unicosmp$CRAY_REL\n\t;;\n    F30[01]:UNIX_System_V:*:* | F700:UNIX_System_V:*:*)\n",
                    "rendered": {
                      "text": "\tGUESS=sv1-cray-unicos$CRAY_REL\n\t;;\n    *:UNICOS/mp:*:*)\n\tCRAY_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'`\n\tGUESS=craynv-cray-unicosmp$CRAY_REL\n\t;;\n    F30[01]:UNIX_System_V:*:* | F700:UNIX_System_V:*:*)\n",
                      "markdown": "`\tGUESS=sv1-cray-unicos$CRAY_REL\n\t;;\n    *:UNICOS/mp:*:*)\n\tCRAY_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'`\n\tGUESS=craynv-cray-unicosmp$CRAY_REL\n\t;;\n    F30[01]:UNIX_System_V:*:* | F700:UNIX_System_V:*:*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 872,
                  "startColumn": 34,
                  "endLine": 872,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\tGUESS=alphaev5-cray-unicosmk$CRAY_REL\n\t;;\n    CRAY*SV1:*:*:*)\n\tCRAY_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'`\n\tGUESS=sv1-cray-unicos$CRAY_REL\n\t;;\n    *:UNICOS/mp:*:*)\n",
                    "rendered": {
                      "text": "\tGUESS=alphaev5-cray-unicosmk$CRAY_REL\n\t;;\n    CRAY*SV1:*:*:*)\n\tCRAY_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'`\n\tGUESS=sv1-cray-unicos$CRAY_REL\n\t;;\n    *:UNICOS/mp:*:*)\n",
                      "markdown": "`\tGUESS=alphaev5-cray-unicosmk$CRAY_REL\n\t;;\n    CRAY*SV1:*:*:*)\n\tCRAY_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'`\n\tGUESS=sv1-cray-unicos$CRAY_REL\n\t;;\n    *:UNICOS/mp:*:*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 868,
                  "startColumn": 34,
                  "endLine": 868,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\tGUESS=t90-cray-unicos$CRAY_REL\n\t;;\n    CRAY*T3E:*:*:*)\n\tCRAY_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'`\n\tGUESS=alphaev5-cray-unicosmk$CRAY_REL\n\t;;\n    CRAY*SV1:*:*:*)\n",
                    "rendered": {
                      "text": "\tGUESS=t90-cray-unicos$CRAY_REL\n\t;;\n    CRAY*T3E:*:*:*)\n\tCRAY_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'`\n\tGUESS=alphaev5-cray-unicosmk$CRAY_REL\n\t;;\n    CRAY*SV1:*:*:*)\n",
                      "markdown": "`\tGUESS=t90-cray-unicos$CRAY_REL\n\t;;\n    CRAY*T3E:*:*:*)\n\tCRAY_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'`\n\tGUESS=alphaev5-cray-unicosmk$CRAY_REL\n\t;;\n    CRAY*SV1:*:*:*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 864,
                  "startColumn": 34,
                  "endLine": 864,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\t      -e 's/\\.[^.]*$/.X/'\n\texit ;;\n    CRAY*TS:*:*:*)\n\tCRAY_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'`\n\tGUESS=t90-cray-unicos$CRAY_REL\n\t;;\n    CRAY*T3E:*:*:*)\n",
                    "rendered": {
                      "text": "\t      -e 's/\\.[^.]*$/.X/'\n\texit ;;\n    CRAY*TS:*:*:*)\n\tCRAY_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'`\n\tGUESS=t90-cray-unicos$CRAY_REL\n\t;;\n    CRAY*T3E:*:*:*)\n",
                      "markdown": "`\t      -e 's/\\.[^.]*$/.X/'\n\texit ;;\n    CRAY*TS:*:*:*)\n\tCRAY_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'`\n\tGUESS=t90-cray-unicos$CRAY_REL\n\t;;\n    CRAY*T3E:*:*:*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 859,
                  "startColumn": 2,
                  "endLine": 859,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\t;;\n    CRAY*[A-Z]90:*:*:*)\n\techo \"$UNAME_MACHINE\"-cray-unicos\"$UNAME_RELEASE\" \\\n\t| sed -e 's/CRAY.*\\([A-Z]90\\)/\\1/' \\\n\t      -e y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/ \\\n\t      -e 's/\\.[^.]*$/.X/'\n\texit ;;\n",
                    "rendered": {
                      "text": "\t;;\n    CRAY*[A-Z]90:*:*:*)\n\techo \"$UNAME_MACHINE\"-cray-unicos\"$UNAME_RELEASE\" \\\n\t| sed -e 's/CRAY.*\\([A-Z]90\\)/\\1/' \\\n\t      -e y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/ \\\n\t      -e 's/\\.[^.]*$/.X/'\n\texit ;;\n",
                      "markdown": "`\t;;\n    CRAY*[A-Z]90:*:*:*)\n\techo \"$UNAME_MACHINE\"-cray-unicos\"$UNAME_RELEASE\" \\\n\t| sed -e 's/CRAY.*\\([A-Z]90\\)/\\1/' \\\n\t      -e y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/ \\\n\t      -e 's/\\.[^.]*$/.X/'\n\texit ;;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 854,
                  "startColumn": 34,
                  "endLine": 854,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\tGUESS=c4-convex-bsd\n\t;;\n    CRAY*Y-MP:*:*:*)\n\tCRAY_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'`\n\tGUESS=ymp-cray-unicos$CRAY_REL\n\t;;\n    CRAY*[A-Z]90:*:*:*)\n",
                    "rendered": {
                      "text": "\tGUESS=c4-convex-bsd\n\t;;\n    CRAY*Y-MP:*:*:*)\n\tCRAY_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'`\n\tGUESS=ymp-cray-unicos$CRAY_REL\n\t;;\n    CRAY*[A-Z]90:*:*:*)\n",
                      "markdown": "`\tGUESS=c4-convex-bsd\n\t;;\n    CRAY*Y-MP:*:*:*)\n\tCRAY_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'`\n\tGUESS=ymp-cray-unicos$CRAY_REL\n\t;;\n    CRAY*[A-Z]90:*:*:*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 781,
                  "endLine": 781,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\t;;\n    3050*:HI-UX:*:*)\n\tset_cc_for_build\n\tsed 's/^\t//' << EOF > \"$dummy.c\"\n\t#include <unistd.h>\n\tint\n\tmain ()\n",
                    "rendered": {
                      "text": "\t;;\n    3050*:HI-UX:*:*)\n\tset_cc_for_build\n\tsed 's/^\t//' << EOF > \"$dummy.c\"\n\t#include <unistd.h>\n\tint\n\tmain ()\n",
                      "markdown": "`\t;;\n    3050*:HI-UX:*:*)\n\tset_cc_for_build\n\tsed 's/^\t//' << EOF > \"$dummy.c\"\n\t#include <unistd.h>\n\tint\n\tmain ()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 776,
                  "startColumn": 34,
                  "endLine": 776,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\tGUESS=$HP_ARCH-hp-hpux$HPUX_REV\n\t;;\n    ia64:HP-UX:*:*)\n\tHPUX_REV=`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*.[0B]*//'`\n\tGUESS=ia64-hp-hpux$HPUX_REV\n\t;;\n    3050*:HI-UX:*:*)\n",
                    "rendered": {
                      "text": "\tGUESS=$HP_ARCH-hp-hpux$HPUX_REV\n\t;;\n    ia64:HP-UX:*:*)\n\tHPUX_REV=`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*.[0B]*//'`\n\tGUESS=ia64-hp-hpux$HPUX_REV\n\t;;\n    3050*:HI-UX:*:*)\n",
                      "markdown": "`\tGUESS=$HP_ARCH-hp-hpux$HPUX_REV\n\t;;\n    ia64:HP-UX:*:*)\n\tHPUX_REV=`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*.[0B]*//'`\n\tGUESS=ia64-hp-hpux$HPUX_REV\n\t;;\n    3050*:HI-UX:*:*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 766,
                  "startColumn": 1,
                  "endLine": 766,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\t    # => hppa64-hp-hpux11.23\n\n\t    if echo __LP64__ | (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) |\n\t\tgrep -q __LP64__\n\t    then\n\t\tHP_ARCH=hppa2.0w\n\t    else\n",
                    "rendered": {
                      "text": "\t    # => hppa64-hp-hpux11.23\n\n\t    if echo __LP64__ | (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) |\n\t\tgrep -q __LP64__\n\t    then\n\t\tHP_ARCH=hppa2.0w\n\t    else\n",
                      "markdown": "`\t    # => hppa64-hp-hpux11.23\n\n\t    if echo __LP64__ | (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) |\n\t\tgrep -q __LP64__\n\t    then\n\t\tHP_ARCH=hppa2.0w\n\t    else\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 715,
                  "startColumn": 5,
                  "endLine": 715,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\t\tfi\n\t\tif test \"$HP_ARCH\" = \"\"; then\n\t\t    set_cc_for_build\n\t\t    sed 's/^\t\t//' << EOF > \"$dummy.c\"\n\n\t\t#define _HPUX_SOURCE\n\t\t#include <stdlib.h>\n",
                    "rendered": {
                      "text": "\t\tfi\n\t\tif test \"$HP_ARCH\" = \"\"; then\n\t\t    set_cc_for_build\n\t\t    sed 's/^\t\t//' << EOF > \"$dummy.c\"\n\n\t\t#define _HPUX_SOURCE\n\t\t#include <stdlib.h>\n",
                      "markdown": "`\t\tfi\n\t\tif test \"$HP_ARCH\" = \"\"; then\n\t\t    set_cc_for_build\n\t\t    sed 's/^\t\t//' << EOF > \"$dummy.c\"\n\n\t\t#define _HPUX_SOURCE\n\t\t#include <stdlib.h>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 694,
                  "startColumn": 34,
                  "endLine": 694,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\tGUESS=m68k-hp-bsd4.4\n\t;;\n    9000/[34678]??:HP-UX:*:*)\n\tHPUX_REV=`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*.[0B]*//'`\n\tcase $UNAME_MACHINE in\n\t    9000/31?)            HP_ARCH=m68000 ;;\n\t    9000/[34]??)         HP_ARCH=m68k ;;\n",
                    "rendered": {
                      "text": "\tGUESS=m68k-hp-bsd4.4\n\t;;\n    9000/[34678]??:HP-UX:*:*)\n\tHPUX_REV=`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*.[0B]*//'`\n\tcase $UNAME_MACHINE in\n\t    9000/31?)            HP_ARCH=m68000 ;;\n\t    9000/[34]??)         HP_ARCH=m68k ;;\n",
                      "markdown": "`\tGUESS=m68k-hp-bsd4.4\n\t;;\n    9000/[34678]??:HP-UX:*:*)\n\tHPUX_REV=`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*.[0B]*//'`\n\tcase $UNAME_MACHINE in\n\t    9000/31?)            HP_ARCH=m68000 ;;\n\t    9000/[34]??)         HP_ARCH=m68k ;;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 666,
                  "startColumn": 30,
                  "endLine": 666,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tfi\n\tif test -x /usr/bin/lslpp ; then\n\t\tIBM_REV=`/usr/bin/lslpp -Lqc bos.rte.libc | \\\n\t\t\t   awk -F: '{ print $3 }' | sed s/[0-9]*$/0/`\n\telse\n\t\tIBM_REV=$UNAME_VERSION.$UNAME_RELEASE\n\tfi\n",
                    "rendered": {
                      "text": "\tfi\n\tif test -x /usr/bin/lslpp ; then\n\t\tIBM_REV=`/usr/bin/lslpp -Lqc bos.rte.libc | \\\n\t\t\t   awk -F: '{ print $3 }' | sed s/[0-9]*$/0/`\n\telse\n\t\tIBM_REV=$UNAME_VERSION.$UNAME_RELEASE\n\tfi\n",
                      "markdown": "`\tfi\n\tif test -x /usr/bin/lslpp ; then\n\t\tIBM_REV=`/usr/bin/lslpp -Lqc bos.rte.libc | \\\n\t\t\t   awk -F: '{ print $3 }' | sed s/[0-9]*$/0/`\n\telse\n\t\tIBM_REV=$UNAME_VERSION.$UNAME_RELEASE\n\tfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 666,
                  "startColumn": 5,
                  "endLine": 666,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\tfi\n\tif test -x /usr/bin/lslpp ; then\n\t\tIBM_REV=`/usr/bin/lslpp -Lqc bos.rte.libc | \\\n\t\t\t   awk -F: '{ print $3 }' | sed s/[0-9]*$/0/`\n\telse\n\t\tIBM_REV=$UNAME_VERSION.$UNAME_RELEASE\n\tfi\n",
                    "rendered": {
                      "text": "\tfi\n\tif test -x /usr/bin/lslpp ; then\n\t\tIBM_REV=`/usr/bin/lslpp -Lqc bos.rte.libc | \\\n\t\t\t   awk -F: '{ print $3 }' | sed s/[0-9]*$/0/`\n\telse\n\t\tIBM_REV=$UNAME_VERSION.$UNAME_RELEASE\n\tfi\n",
                      "markdown": "`\tfi\n\tif test -x /usr/bin/lslpp ; then\n\t\tIBM_REV=`/usr/bin/lslpp -Lqc bos.rte.libc | \\\n\t\t\t   awk -F: '{ print $3 }' | sed s/[0-9]*$/0/`\n\telse\n\t\tIBM_REV=$UNAME_VERSION.$UNAME_RELEASE\n\tfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 659,
                  "startColumn": 40,
                  "endLine": 659,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\t;;\n    *:AIX:*:[4567])\n\tIBM_CPU_ID=`/usr/sbin/lsdev -C -c processor -S available | sed 1q | awk '{ print $1 }'`\n\tif /usr/sbin/lsattr -El \"$IBM_CPU_ID\" | grep ' POWER' >/dev/null 2>&1; then\n\t\tIBM_ARCH=rs6000\n\telse\n\t\tIBM_ARCH=powerpc\n",
                    "rendered": {
                      "text": "\t;;\n    *:AIX:*:[4567])\n\tIBM_CPU_ID=`/usr/sbin/lsdev -C -c processor -S available | sed 1q | awk '{ print $1 }'`\n\tif /usr/sbin/lsattr -El \"$IBM_CPU_ID\" | grep ' POWER' >/dev/null 2>&1; then\n\t\tIBM_ARCH=rs6000\n\telse\n\t\tIBM_ARCH=powerpc\n",
                      "markdown": "`\t;;\n    *:AIX:*:[4567])\n\tIBM_CPU_ID=`/usr/sbin/lsdev -C -c processor -S available | sed 1q | awk '{ print $1 }'`\n\tif /usr/sbin/lsattr -El \"$IBM_CPU_ID\" | grep ' POWER' >/dev/null 2>&1; then\n\t\tIBM_ARCH=rs6000\n\telse\n\t\tIBM_ARCH=powerpc\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 658,
                  "startColumn": 68,
                  "endLine": 658,
                  "endColumn": 73,
                  "snippet": {
                    "text": "\tfi\n\t;;\n    *:AIX:*:[4567])\n\tIBM_CPU_ID=`/usr/sbin/lsdev -C -c processor -S available | sed 1q | awk '{ print $1 }'`\n\tif /usr/sbin/lsattr -El \"$IBM_CPU_ID\" | grep ' POWER' >/dev/null 2>&1; then\n\t\tIBM_ARCH=rs6000\n\telse\n",
                    "rendered": {
                      "text": "\tfi\n\t;;\n    *:AIX:*:[4567])\n\tIBM_CPU_ID=`/usr/sbin/lsdev -C -c processor -S available | sed 1q | awk '{ print $1 }'`\n\tif /usr/sbin/lsattr -El \"$IBM_CPU_ID\" | grep ' POWER' >/dev/null 2>&1; then\n\t\tIBM_ARCH=rs6000\n\telse\n",
                      "markdown": "`\tfi\n\t;;\n    *:AIX:*:[4567])\n\tIBM_CPU_ID=`/usr/sbin/lsdev -C -c processor -S available | sed 1q | awk '{ print $1 }'`\n\tif /usr/sbin/lsattr -El \"$IBM_CPU_ID\" | grep ' POWER' >/dev/null 2>&1; then\n\t\tIBM_ARCH=rs6000\n\telse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 658,
                  "startColumn": 59,
                  "endLine": 658,
                  "endColumn": 64,
                  "snippet": {
                    "text": "\tfi\n\t;;\n    *:AIX:*:[4567])\n\tIBM_CPU_ID=`/usr/sbin/lsdev -C -c processor -S available | sed 1q | awk '{ print $1 }'`\n\tif /usr/sbin/lsattr -El \"$IBM_CPU_ID\" | grep ' POWER' >/dev/null 2>&1; then\n\t\tIBM_ARCH=rs6000\n\telse\n",
                    "rendered": {
                      "text": "\tfi\n\t;;\n    *:AIX:*:[4567])\n\tIBM_CPU_ID=`/usr/sbin/lsdev -C -c processor -S available | sed 1q | awk '{ print $1 }'`\n\tif /usr/sbin/lsattr -El \"$IBM_CPU_ID\" | grep ' POWER' >/dev/null 2>&1; then\n\t\tIBM_ARCH=rs6000\n\telse\n",
                      "markdown": "`\tfi\n\t;;\n    *:AIX:*:[4567])\n\tIBM_CPU_ID=`/usr/sbin/lsdev -C -c processor -S available | sed 1q | awk '{ print $1 }'`\n\tif /usr/sbin/lsattr -El \"$IBM_CPU_ID\" | grep ' POWER' >/dev/null 2>&1; then\n\t\tIBM_ARCH=rs6000\n\telse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 651,
                  "startColumn": 5,
                  "endLine": 651,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t\telse\n\t\t\tGUESS=rs6000-ibm-aix3.2.5\n\t\tfi\n\telif grep bos324 /usr/include/stdio.h >/dev/null 2>&1; then\n\t\tGUESS=rs6000-ibm-aix3.2.4\n\telse\n\t\tGUESS=rs6000-ibm-aix3.2\n",
                    "rendered": {
                      "text": "\t\telse\n\t\t\tGUESS=rs6000-ibm-aix3.2.5\n\t\tfi\n\telif grep bos324 /usr/include/stdio.h >/dev/null 2>&1; then\n\t\tGUESS=rs6000-ibm-aix3.2.4\n\telse\n\t\tGUESS=rs6000-ibm-aix3.2\n",
                      "markdown": "`\t\telse\n\t\t\tGUESS=rs6000-ibm-aix3.2.5\n\t\tfi\n\telif grep bos324 /usr/include/stdio.h >/dev/null 2>&1; then\n\t\tGUESS=rs6000-ibm-aix3.2.4\n\telse\n\t\tGUESS=rs6000-ibm-aix3.2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 634,
                  "startColumn": 1,
                  "endLine": 634,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    *:AIX:2:3)\n\tif grep bos325 /usr/include/stdio.h >/dev/null 2>&1; then\n\t\tset_cc_for_build\n\t\tsed 's/^\t\t//' << EOF > \"$dummy.c\"\n\t\t#include <sys/systemcfg.h>\n\n\t\tmain()\n",
                    "rendered": {
                      "text": "    *:AIX:2:3)\n\tif grep bos325 /usr/include/stdio.h >/dev/null 2>&1; then\n\t\tset_cc_for_build\n\t\tsed 's/^\t\t//' << EOF > \"$dummy.c\"\n\t\t#include <sys/systemcfg.h>\n\n\t\tmain()\n",
                      "markdown": "`    *:AIX:2:3)\n\tif grep bos325 /usr/include/stdio.h >/dev/null 2>&1; then\n\t\tset_cc_for_build\n\t\tsed 's/^\t\t//' << EOF > \"$dummy.c\"\n\t\t#include <sys/systemcfg.h>\n\n\t\tmain()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 632,
                  "startColumn": 3,
                  "endLine": 632,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tGUESS=$UNAME_MACHINE-ibm-aix$IBM_REV\n\t;;\n    *:AIX:2:3)\n\tif grep bos325 /usr/include/stdio.h >/dev/null 2>&1; then\n\t\tset_cc_for_build\n\t\tsed 's/^\t\t//' << EOF > \"$dummy.c\"\n\t\t#include <sys/systemcfg.h>\n",
                    "rendered": {
                      "text": "\tGUESS=$UNAME_MACHINE-ibm-aix$IBM_REV\n\t;;\n    *:AIX:2:3)\n\tif grep bos325 /usr/include/stdio.h >/dev/null 2>&1; then\n\t\tset_cc_for_build\n\t\tsed 's/^\t\t//' << EOF > \"$dummy.c\"\n\t\t#include <sys/systemcfg.h>\n",
                      "markdown": "`\tGUESS=$UNAME_MACHINE-ibm-aix$IBM_REV\n\t;;\n    *:AIX:2:3)\n\tif grep bos325 /usr/include/stdio.h >/dev/null 2>&1; then\n\t\tset_cc_for_build\n\t\tsed 's/^\t\t//' << EOF > \"$dummy.c\"\n\t\t#include <sys/systemcfg.h>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 614,
                  "startColumn": 34,
                  "endLine": 614,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\tGUESS=m68k-tektronix-bsd\n\t;;\n    *:IRIX*:*:*)\n\tIRIX_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/-/_/g'`\n\tGUESS=mips-sgi-irix$IRIX_REL\n\t;;\n    ????????:AIX?:[12].1:2)   # AIX 2.2.1 or AIX 2.1.1 is RT/PC AIX.\n",
                    "rendered": {
                      "text": "\tGUESS=m68k-tektronix-bsd\n\t;;\n    *:IRIX*:*:*)\n\tIRIX_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/-/_/g'`\n\tGUESS=mips-sgi-irix$IRIX_REL\n\t;;\n    ????????:AIX?:[12].1:2)   # AIX 2.2.1 or AIX 2.1.1 is RT/PC AIX.\n",
                      "markdown": "`\tGUESS=m68k-tektronix-bsd\n\t;;\n    *:IRIX*:*:*)\n\tIRIX_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/-/_/g'`\n\tGUESS=mips-sgi-irix$IRIX_REL\n\t;;\n    ????????:AIX?:[12].1:2)   # AIX 2.2.1 or AIX 2.1.1 is RT/PC AIX.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 558,
                  "startColumn": 36,
                  "endLine": 558,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\t}\nEOF\n\t$CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" &&\n\t  dummyarg=`echo \"$UNAME_RELEASE\" | sed -n 's/\\([0-9]*\\).*/\\1/p'` &&\n\t  SYSTEM_NAME=`\"$dummy\" \"$dummyarg\"` &&\n\t    { echo \"$SYSTEM_NAME\"; exit; }\n\tGUESS=mips-mips-riscos$UNAME_RELEASE\n",
                    "rendered": {
                      "text": "\t}\nEOF\n\t$CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" &&\n\t  dummyarg=`echo \"$UNAME_RELEASE\" | sed -n 's/\\([0-9]*\\).*/\\1/p'` &&\n\t  SYSTEM_NAME=`\"$dummy\" \"$dummyarg\"` &&\n\t    { echo \"$SYSTEM_NAME\"; exit; }\n\tGUESS=mips-mips-riscos$UNAME_RELEASE\n",
                      "markdown": "`\t}\nEOF\n\t$CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" &&\n\t  dummyarg=`echo \"$UNAME_RELEASE\" | sed -n 's/\\([0-9]*\\).*/\\1/p'` &&\n\t  SYSTEM_NAME=`\"$dummy\" \"$dummyarg\"` &&\n\t    { echo \"$SYSTEM_NAME\"; exit; }\n\tGUESS=mips-mips-riscos$UNAME_RELEASE\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 536,
                  "endLine": 536,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\t;;\n    mips:*:*:UMIPS | mips:*:*:RISCos)\n\tset_cc_for_build\n\tsed 's/^\t//' << EOF > \"$dummy.c\"\n#ifdef __cplusplus\n#include <stdio.h>  /* for printf() prototype */\n\tint main (int argc, char *argv[]) {\n",
                    "rendered": {
                      "text": "\t;;\n    mips:*:*:UMIPS | mips:*:*:RISCos)\n\tset_cc_for_build\n\tsed 's/^\t//' << EOF > \"$dummy.c\"\n#ifdef __cplusplus\n#include <stdio.h>  /* for printf() prototype */\n\tint main (int argc, char *argv[]) {\n",
                      "markdown": "`\t;;\n    mips:*:*:UMIPS | mips:*:*:RISCos)\n\tset_cc_for_build\n\tsed 's/^\t//' << EOF > \"$dummy.c\"\n#ifdef __cplusplus\n#include <stdio.h>  /* for printf() prototype */\n\tint main (int argc, char *argv[]) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 476,
                  "startColumn": 35,
                  "endLine": 476,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\tGUESS=m68k-sun-sunos$UNAME_RELEASE\n\t;;\n    sun*:*:4.2BSD:*)\n\tUNAME_RELEASE=`(sed 1q /etc/motd | awk '{print substr($5,1,3)}') 2>/dev/null`\n\ttest \"x$UNAME_RELEASE\" = x && UNAME_RELEASE=3\n\tcase `/bin/arch` in\n\t    sun3)\n",
                    "rendered": {
                      "text": "\tGUESS=m68k-sun-sunos$UNAME_RELEASE\n\t;;\n    sun*:*:4.2BSD:*)\n\tUNAME_RELEASE=`(sed 1q /etc/motd | awk '{print substr($5,1,3)}') 2>/dev/null`\n\ttest \"x$UNAME_RELEASE\" = x && UNAME_RELEASE=3\n\tcase `/bin/arch` in\n\t    sun3)\n",
                      "markdown": "`\tGUESS=m68k-sun-sunos$UNAME_RELEASE\n\t;;\n    sun*:*:4.2BSD:*)\n\tUNAME_RELEASE=`(sed 1q /etc/motd | awk '{print substr($5,1,3)}') 2>/dev/null`\n\ttest \"x$UNAME_RELEASE\" = x && UNAME_RELEASE=3\n\tcase `/bin/arch` in\n\t    sun3)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 469,
                  "startColumn": 33,
                  "endLine": 469,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\t\t;;\n\tesac\n\t# Japanese Language versions have a version number like '4.1.3-JL'.\n\tSUN_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/-/_/'`\n\tGUESS=sparc-sun-sunos$SUN_REL\n\t;;\n    sun3*:SunOS:*:*)\n",
                    "rendered": {
                      "text": "\t\t;;\n\tesac\n\t# Japanese Language versions have a version number like '4.1.3-JL'.\n\tSUN_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/-/_/'`\n\tGUESS=sparc-sun-sunos$SUN_REL\n\t;;\n    sun3*:SunOS:*:*)\n",
                      "markdown": "`\t\t;;\n\tesac\n\t# Japanese Language versions have a version number like '4.1.3-JL'.\n\tSUN_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/-/_/'`\n\tGUESS=sparc-sun-sunos$SUN_REL\n\t;;\n    sun3*:SunOS:*:*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 459,
                  "startColumn": 33,
                  "endLine": 459,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\t# According to config.sub, this is the proper way to canonicalize\n\t# SunOS6.  Hard to guess exactly what SunOS6 will be like, but\n\t# it's likely to be more like Solaris than SunOS4.\n\tSUN_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//'`\n\tGUESS=sparc-sun-solaris3$SUN_REL\n\t;;\n    sun4*:SunOS:*:*)\n",
                    "rendered": {
                      "text": "\t# According to config.sub, this is the proper way to canonicalize\n\t# SunOS6.  Hard to guess exactly what SunOS6 will be like, but\n\t# it's likely to be more like Solaris than SunOS4.\n\tSUN_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//'`\n\tGUESS=sparc-sun-solaris3$SUN_REL\n\t;;\n    sun4*:SunOS:*:*)\n",
                      "markdown": "`\t# According to config.sub, this is the proper way to canonicalize\n\t# SunOS6.  Hard to guess exactly what SunOS6 will be like, but\n\t# it's likely to be more like Solaris than SunOS4.\n\tSUN_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//'`\n\tGUESS=sparc-sun-solaris3$SUN_REL\n\t;;\n    sun4*:SunOS:*:*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 452,
                  "startColumn": 33,
                  "endLine": 452,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\t\tSUN_ARCH=x86_64\n\t    fi\n\tfi\n\tSUN_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//'`\n\tGUESS=$SUN_ARCH-pc-solaris2$SUN_REL\n\t;;\n    sun4*:SunOS:6*:*)\n",
                    "rendered": {
                      "text": "\t\tSUN_ARCH=x86_64\n\t    fi\n\tfi\n\tSUN_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//'`\n\tGUESS=$SUN_ARCH-pc-solaris2$SUN_REL\n\t;;\n    sun4*:SunOS:6*:*)\n",
                      "markdown": "`\t\tSUN_ARCH=x86_64\n\t    fi\n\tfi\n\tSUN_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//'`\n\tGUESS=$SUN_ARCH-pc-solaris2$SUN_REL\n\t;;\n    sun4*:SunOS:6*:*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 447,
                  "startColumn": 1,
                  "endLine": 447,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\tif test \"$CC_FOR_BUILD\" != no_compiler_found; then\n\t    if (echo '#ifdef __amd64'; echo IS_64BIT_ARCH; echo '#endif') | \\\n\t\t(CCOPTS=\"\" $CC_FOR_BUILD -m64 -E - 2>/dev/null) | \\\n\t\tgrep IS_64BIT_ARCH >/dev/null\n\t    then\n\t\tSUN_ARCH=x86_64\n\t    fi\n",
                    "rendered": {
                      "text": "\tif test \"$CC_FOR_BUILD\" != no_compiler_found; then\n\t    if (echo '#ifdef __amd64'; echo IS_64BIT_ARCH; echo '#endif') | \\\n\t\t(CCOPTS=\"\" $CC_FOR_BUILD -m64 -E - 2>/dev/null) | \\\n\t\tgrep IS_64BIT_ARCH >/dev/null\n\t    then\n\t\tSUN_ARCH=x86_64\n\t    fi\n",
                      "markdown": "`\tif test \"$CC_FOR_BUILD\" != no_compiler_found; then\n\t    if (echo '#ifdef __amd64'; echo IS_64BIT_ARCH; echo '#endif') | \\\n\t\t(CCOPTS=\"\" $CC_FOR_BUILD -m64 -E - 2>/dev/null) | \\\n\t\tgrep IS_64BIT_ARCH >/dev/null\n\t    then\n\t\tSUN_ARCH=x86_64\n\t    fi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 432,
                  "startColumn": 33,
                  "endLine": 432,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\tGUESS=sparc-hal-solaris2$SUN_REL\n\t;;\n    sun4*:SunOS:5.*:* | tadpole*:SunOS:5.*:*)\n\tSUN_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//'`\n\tGUESS=sparc-sun-solaris2$SUN_REL\n\t;;\n    i86pc:AuroraUX:5.*:* | i86xen:AuroraUX:5.*:*)\n",
                    "rendered": {
                      "text": "\tGUESS=sparc-hal-solaris2$SUN_REL\n\t;;\n    sun4*:SunOS:5.*:* | tadpole*:SunOS:5.*:*)\n\tSUN_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//'`\n\tGUESS=sparc-sun-solaris2$SUN_REL\n\t;;\n    i86pc:AuroraUX:5.*:* | i86xen:AuroraUX:5.*:*)\n",
                      "markdown": "`\tGUESS=sparc-hal-solaris2$SUN_REL\n\t;;\n    sun4*:SunOS:5.*:* | tadpole*:SunOS:5.*:*)\n\tSUN_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//'`\n\tGUESS=sparc-sun-solaris2$SUN_REL\n\t;;\n    i86pc:AuroraUX:5.*:* | i86xen:AuroraUX:5.*:*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 428,
                  "startColumn": 33,
                  "endLine": 428,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\tGUESS=$UNAME_MACHINE-ibm-solaris2$SUN_REL\n\t;;\n    sun4H:SunOS:5.*:*)\n\tSUN_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//'`\n\tGUESS=sparc-hal-solaris2$SUN_REL\n\t;;\n    sun4*:SunOS:5.*:* | tadpole*:SunOS:5.*:*)\n",
                    "rendered": {
                      "text": "\tGUESS=$UNAME_MACHINE-ibm-solaris2$SUN_REL\n\t;;\n    sun4H:SunOS:5.*:*)\n\tSUN_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//'`\n\tGUESS=sparc-hal-solaris2$SUN_REL\n\t;;\n    sun4*:SunOS:5.*:* | tadpole*:SunOS:5.*:*)\n",
                      "markdown": "`\tGUESS=$UNAME_MACHINE-ibm-solaris2$SUN_REL\n\t;;\n    sun4H:SunOS:5.*:*)\n\tSUN_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//'`\n\tGUESS=sparc-hal-solaris2$SUN_REL\n\t;;\n    sun4*:SunOS:5.*:* | tadpole*:SunOS:5.*:*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 424,
                  "startColumn": 33,
                  "endLine": 424,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\tesac\n\t;;\n    s390x:SunOS:*:*)\n\tSUN_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//'`\n\tGUESS=$UNAME_MACHINE-ibm-solaris2$SUN_REL\n\t;;\n    sun4H:SunOS:5.*:*)\n",
                    "rendered": {
                      "text": "\tesac\n\t;;\n    s390x:SunOS:*:*)\n\tSUN_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//'`\n\tGUESS=$UNAME_MACHINE-ibm-solaris2$SUN_REL\n\t;;\n    sun4H:SunOS:5.*:*)\n",
                      "markdown": "`\tesac\n\t;;\n    s390x:SunOS:*:*)\n\tSUN_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//'`\n\tGUESS=$UNAME_MACHINE-ibm-solaris2$SUN_REL\n\t;;\n    sun4H:SunOS:5.*:*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 375,
                  "startColumn": 33,
                  "endLine": 375,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\t# A Tn.n version is a released field test version.\n\t# A Xn.n version is an unreleased experimental baselevel.\n\t# 1.2 uses \"1.2\" for uname -r.\n\tOSF_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/^[PVTX]//' | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz`\n\tGUESS=$UNAME_MACHINE-dec-osf$OSF_REL\n\t;;\n    Amiga*:UNIX_System_V:4.0:*)\n",
                    "rendered": {
                      "text": "\t# A Tn.n version is a released field test version.\n\t# A Xn.n version is an unreleased experimental baselevel.\n\t# 1.2 uses \"1.2\" for uname -r.\n\tOSF_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/^[PVTX]//' | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz`\n\tGUESS=$UNAME_MACHINE-dec-osf$OSF_REL\n\t;;\n    Amiga*:UNIX_System_V:4.0:*)\n",
                      "markdown": "`\t# A Tn.n version is a released field test version.\n\t# A Xn.n version is an unreleased experimental baselevel.\n\t# 1.2 uses \"1.2\" for uname -r.\n\tOSF_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/^[PVTX]//' | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz`\n\tGUESS=$UNAME_MACHINE-dec-osf$OSF_REL\n\t;;\n    Amiga*:UNIX_System_V:4.0:*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 337,
                  "startColumn": 93,
                  "endLine": 337,
                  "endColumn": 99,
                  "snippet": {
                    "text": "\t# OSF/1 and Tru64 systems produced since 1995.  I hope that\n\t# covers most systems running today.  This code pipes the CPU\n\t# types through head -n 1, so we only detect the type of CPU 0.\n\tALPHA_CPU_TYPE=`/usr/sbin/psrinfo -v | sed -n -e 's/^  The alpha \\(.*\\) processor.*$/\\1/p' | head -n 1`\n\tcase $ALPHA_CPU_TYPE in\n\t    \"EV4 (21064)\")\n\t\tUNAME_MACHINE=alpha ;;\n",
                    "rendered": {
                      "text": "\t# OSF/1 and Tru64 systems produced since 1995.  I hope that\n\t# covers most systems running today.  This code pipes the CPU\n\t# types through head -n 1, so we only detect the type of CPU 0.\n\tALPHA_CPU_TYPE=`/usr/sbin/psrinfo -v | sed -n -e 's/^  The alpha \\(.*\\) processor.*$/\\1/p' | head -n 1`\n\tcase $ALPHA_CPU_TYPE in\n\t    \"EV4 (21064)\")\n\t\tUNAME_MACHINE=alpha ;;\n",
                      "markdown": "`\t# OSF/1 and Tru64 systems produced since 1995.  I hope that\n\t# covers most systems running today.  This code pipes the CPU\n\t# types through head -n 1, so we only detect the type of CPU 0.\n\tALPHA_CPU_TYPE=`/usr/sbin/psrinfo -v | sed -n -e 's/^  The alpha \\(.*\\) processor.*$/\\1/p' | head -n 1`\n\tcase $ALPHA_CPU_TYPE in\n\t    \"EV4 (21064)\")\n\t\tUNAME_MACHINE=alpha ;;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 337,
                  "startColumn": 39,
                  "endLine": 337,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t# OSF/1 and Tru64 systems produced since 1995.  I hope that\n\t# covers most systems running today.  This code pipes the CPU\n\t# types through head -n 1, so we only detect the type of CPU 0.\n\tALPHA_CPU_TYPE=`/usr/sbin/psrinfo -v | sed -n -e 's/^  The alpha \\(.*\\) processor.*$/\\1/p' | head -n 1`\n\tcase $ALPHA_CPU_TYPE in\n\t    \"EV4 (21064)\")\n\t\tUNAME_MACHINE=alpha ;;\n",
                    "rendered": {
                      "text": "\t# OSF/1 and Tru64 systems produced since 1995.  I hope that\n\t# covers most systems running today.  This code pipes the CPU\n\t# types through head -n 1, so we only detect the type of CPU 0.\n\tALPHA_CPU_TYPE=`/usr/sbin/psrinfo -v | sed -n -e 's/^  The alpha \\(.*\\) processor.*$/\\1/p' | head -n 1`\n\tcase $ALPHA_CPU_TYPE in\n\t    \"EV4 (21064)\")\n\t\tUNAME_MACHINE=alpha ;;\n",
                      "markdown": "`\t# OSF/1 and Tru64 systems produced since 1995.  I hope that\n\t# covers most systems running today.  This code pipes the CPU\n\t# types through head -n 1, so we only detect the type of CPU 0.\n\tALPHA_CPU_TYPE=`/usr/sbin/psrinfo -v | sed -n -e 's/^  The alpha \\(.*\\) processor.*$/\\1/p' | head -n 1`\n\tcase $ALPHA_CPU_TYPE in\n\t    \"EV4 (21064)\")\n\t\tUNAME_MACHINE=alpha ;;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 16,
                  "endLine": 336,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t# According to Compaq, /usr/sbin/psrinfo has been available on\n\t# OSF/1 and Tru64 systems produced since 1995.  I hope that\n\t# covers most systems running today.  This code pipes the CPU\n\t# types through head -n 1, so we only detect the type of CPU 0.\n\tALPHA_CPU_TYPE=`/usr/sbin/psrinfo -v | sed -n -e 's/^  The alpha \\(.*\\) processor.*$/\\1/p' | head -n 1`\n\tcase $ALPHA_CPU_TYPE in\n\t    \"EV4 (21064)\")\n",
                    "rendered": {
                      "text": "\t# According to Compaq, /usr/sbin/psrinfo has been available on\n\t# OSF/1 and Tru64 systems produced since 1995.  I hope that\n\t# covers most systems running today.  This code pipes the CPU\n\t# types through head -n 1, so we only detect the type of CPU 0.\n\tALPHA_CPU_TYPE=`/usr/sbin/psrinfo -v | sed -n -e 's/^  The alpha \\(.*\\) processor.*$/\\1/p' | head -n 1`\n\tcase $ALPHA_CPU_TYPE in\n\t    \"EV4 (21064)\")\n",
                      "markdown": "`\t# According to Compaq, /usr/sbin/psrinfo has been available on\n\t# OSF/1 and Tru64 systems produced since 1995.  I hope that\n\t# covers most systems running today.  This code pipes the CPU\n\t# types through head -n 1, so we only detect the type of CPU 0.\n\tALPHA_CPU_TYPE=`/usr/sbin/psrinfo -v | sed -n -e 's/^  The alpha \\(.*\\) processor.*$/\\1/p' | head -n 1`\n\tcase $ALPHA_CPU_TYPE in\n\t    \"EV4 (21064)\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 330,
                  "startColumn": 37,
                  "endLine": 330,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\t\tUNAME_RELEASE=`/usr/sbin/sizer -v | awk '{print $3}'`\n\t\t;;\n\t*5.*)\n\t\tUNAME_RELEASE=`/usr/sbin/sizer -v | awk '{print $4}'`\n\t\t;;\n\tesac\n\t# According to Compaq, /usr/sbin/psrinfo has been available on\n",
                    "rendered": {
                      "text": "\t\tUNAME_RELEASE=`/usr/sbin/sizer -v | awk '{print $3}'`\n\t\t;;\n\t*5.*)\n\t\tUNAME_RELEASE=`/usr/sbin/sizer -v | awk '{print $4}'`\n\t\t;;\n\tesac\n\t# According to Compaq, /usr/sbin/psrinfo has been available on\n",
                      "markdown": "`\t\tUNAME_RELEASE=`/usr/sbin/sizer -v | awk '{print $3}'`\n\t\t;;\n\t*5.*)\n\t\tUNAME_RELEASE=`/usr/sbin/sizer -v | awk '{print $4}'`\n\t\t;;\n\tesac\n\t# According to Compaq, /usr/sbin/psrinfo has been available on\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 327,
                  "startColumn": 37,
                  "endLine": 327,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\ttrap '' 0\n\tcase $UNAME_RELEASE in\n\t*4.0)\n\t\tUNAME_RELEASE=`/usr/sbin/sizer -v | awk '{print $3}'`\n\t\t;;\n\t*5.*)\n\t\tUNAME_RELEASE=`/usr/sbin/sizer -v | awk '{print $4}'`\n",
                    "rendered": {
                      "text": "\ttrap '' 0\n\tcase $UNAME_RELEASE in\n\t*4.0)\n\t\tUNAME_RELEASE=`/usr/sbin/sizer -v | awk '{print $3}'`\n\t\t;;\n\t*5.*)\n\t\tUNAME_RELEASE=`/usr/sbin/sizer -v | awk '{print $4}'`\n",
                      "markdown": "`\ttrap '' 0\n\tcase $UNAME_RELEASE in\n\t*4.0)\n\t\tUNAME_RELEASE=`/usr/sbin/sizer -v | awk '{print $3}'`\n\t\t;;\n\t*5.*)\n\t\tUNAME_RELEASE=`/usr/sbin/sizer -v | awk '{print $4}'`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 27,
                  "endLine": 289,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\tGUESS=$UNAME_MACHINE_ARCH-unknown-secbsd$UNAME_RELEASE\n\t;;\n    *:LibertyBSD:*:*)\n\tUNAME_MACHINE_ARCH=`arch | sed 's/^.*BSD\\.//'`\n\tGUESS=$UNAME_MACHINE_ARCH-unknown-libertybsd$UNAME_RELEASE\n\t;;\n    *:MidnightBSD:*:*)\n",
                    "rendered": {
                      "text": "\tGUESS=$UNAME_MACHINE_ARCH-unknown-secbsd$UNAME_RELEASE\n\t;;\n    *:LibertyBSD:*:*)\n\tUNAME_MACHINE_ARCH=`arch | sed 's/^.*BSD\\.//'`\n\tGUESS=$UNAME_MACHINE_ARCH-unknown-libertybsd$UNAME_RELEASE\n\t;;\n    *:MidnightBSD:*:*)\n",
                      "markdown": "`\tGUESS=$UNAME_MACHINE_ARCH-unknown-secbsd$UNAME_RELEASE\n\t;;\n    *:LibertyBSD:*:*)\n\tUNAME_MACHINE_ARCH=`arch | sed 's/^.*BSD\\.//'`\n\tGUESS=$UNAME_MACHINE_ARCH-unknown-libertybsd$UNAME_RELEASE\n\t;;\n    *:MidnightBSD:*:*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 285,
                  "startColumn": 27,
                  "endLine": 285,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\tGUESS=$UNAME_MACHINE_ARCH-unknown-openbsd$UNAME_RELEASE\n\t;;\n    *:SecBSD:*:*)\n\tUNAME_MACHINE_ARCH=`arch | sed 's/SecBSD.//'`\n\tGUESS=$UNAME_MACHINE_ARCH-unknown-secbsd$UNAME_RELEASE\n\t;;\n    *:LibertyBSD:*:*)\n",
                    "rendered": {
                      "text": "\tGUESS=$UNAME_MACHINE_ARCH-unknown-openbsd$UNAME_RELEASE\n\t;;\n    *:SecBSD:*:*)\n\tUNAME_MACHINE_ARCH=`arch | sed 's/SecBSD.//'`\n\tGUESS=$UNAME_MACHINE_ARCH-unknown-secbsd$UNAME_RELEASE\n\t;;\n    *:LibertyBSD:*:*)\n",
                      "markdown": "`\tGUESS=$UNAME_MACHINE_ARCH-unknown-openbsd$UNAME_RELEASE\n\t;;\n    *:SecBSD:*:*)\n\tUNAME_MACHINE_ARCH=`arch | sed 's/SecBSD.//'`\n\tGUESS=$UNAME_MACHINE_ARCH-unknown-secbsd$UNAME_RELEASE\n\t;;\n    *:LibertyBSD:*:*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 281,
                  "startColumn": 27,
                  "endLine": 281,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\tGUESS=$UNAME_MACHINE_ARCH-unknown-bitrig$UNAME_RELEASE\n\t;;\n    *:OpenBSD:*:*)\n\tUNAME_MACHINE_ARCH=`arch | sed 's/OpenBSD.//'`\n\tGUESS=$UNAME_MACHINE_ARCH-unknown-openbsd$UNAME_RELEASE\n\t;;\n    *:SecBSD:*:*)\n",
                    "rendered": {
                      "text": "\tGUESS=$UNAME_MACHINE_ARCH-unknown-bitrig$UNAME_RELEASE\n\t;;\n    *:OpenBSD:*:*)\n\tUNAME_MACHINE_ARCH=`arch | sed 's/OpenBSD.//'`\n\tGUESS=$UNAME_MACHINE_ARCH-unknown-openbsd$UNAME_RELEASE\n\t;;\n    *:SecBSD:*:*)\n",
                      "markdown": "`\tGUESS=$UNAME_MACHINE_ARCH-unknown-bitrig$UNAME_RELEASE\n\t;;\n    *:OpenBSD:*:*)\n\tUNAME_MACHINE_ARCH=`arch | sed 's/OpenBSD.//'`\n\tGUESS=$UNAME_MACHINE_ARCH-unknown-openbsd$UNAME_RELEASE\n\t;;\n    *:SecBSD:*:*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 27,
                  "endLine": 277,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\tGUESS=$machine-${os}${release}${abi-}\n\t;;\n    *:Bitrig:*:*)\n\tUNAME_MACHINE_ARCH=`arch | sed 's/Bitrig.//'`\n\tGUESS=$UNAME_MACHINE_ARCH-unknown-bitrig$UNAME_RELEASE\n\t;;\n    *:OpenBSD:*:*)\n",
                    "rendered": {
                      "text": "\tGUESS=$machine-${os}${release}${abi-}\n\t;;\n    *:Bitrig:*:*)\n\tUNAME_MACHINE_ARCH=`arch | sed 's/Bitrig.//'`\n\tGUESS=$UNAME_MACHINE_ARCH-unknown-bitrig$UNAME_RELEASE\n\t;;\n    *:OpenBSD:*:*)\n",
                      "markdown": "`\tGUESS=$machine-${os}${release}${abi-}\n\t;;\n    *:Bitrig:*:*)\n\tUNAME_MACHINE_ARCH=`arch | sed 's/Bitrig.//'`\n\tGUESS=$UNAME_MACHINE_ARCH-unknown-bitrig$UNAME_RELEASE\n\t;;\n    *:OpenBSD:*:*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 268,
                  "startColumn": 56,
                  "endLine": 268,
                  "endColumn": 61,
                  "snippet": {
                    "text": "\t\trelease='-gnu'\n\t\t;;\n\t    *)\n\t\trelease=`echo \"$UNAME_RELEASE\" | sed -e 's/[-_].*//' | cut -d. -f1,2`\n\t\t;;\n\tesac\n\t# Since CPU_TYPE-MANUFACTURER-KERNEL-OPERATING_SYSTEM:\n",
                    "rendered": {
                      "text": "\t\trelease='-gnu'\n\t\t;;\n\t    *)\n\t\trelease=`echo \"$UNAME_RELEASE\" | sed -e 's/[-_].*//' | cut -d. -f1,2`\n\t\t;;\n\tesac\n\t# Since CPU_TYPE-MANUFACTURER-KERNEL-OPERATING_SYSTEM:\n",
                      "markdown": "`\t\trelease='-gnu'\n\t\t;;\n\t    *)\n\t\trelease=`echo \"$UNAME_RELEASE\" | sed -e 's/[-_].*//' | cut -d. -f1,2`\n\t\t;;\n\tesac\n\t# Since CPU_TYPE-MANUFACTURER-KERNEL-OPERATING_SYSTEM:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 268,
                  "startColumn": 34,
                  "endLine": 268,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\t\trelease='-gnu'\n\t\t;;\n\t    *)\n\t\trelease=`echo \"$UNAME_RELEASE\" | sed -e 's/[-_].*//' | cut -d. -f1,2`\n\t\t;;\n\tesac\n\t# Since CPU_TYPE-MANUFACTURER-KERNEL-OPERATING_SYSTEM:\n",
                    "rendered": {
                      "text": "\t\trelease='-gnu'\n\t\t;;\n\t    *)\n\t\trelease=`echo \"$UNAME_RELEASE\" | sed -e 's/[-_].*//' | cut -d. -f1,2`\n\t\t;;\n\tesac\n\t# Since CPU_TYPE-MANUFACTURER-KERNEL-OPERATING_SYSTEM:\n",
                      "markdown": "`\t\trelease='-gnu'\n\t\t;;\n\t    *)\n\t\trelease=`echo \"$UNAME_RELEASE\" | sed -e 's/[-_].*//' | cut -d. -f1,2`\n\t\t;;\n\tesac\n\t# Since CPU_TYPE-MANUFACTURER-KERNEL-OPERATING_SYSTEM:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 35,
                  "endLine": 255,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\tcase $UNAME_MACHINE_ARCH in\n\t    earm*)\n\t\texpr='s/^earmv[0-9]/-eabi/;s/eb$//'\n\t\tabi=`echo \"$UNAME_MACHINE_ARCH\" | sed -e \"$expr\"`\n\t\t;;\n\tesac\n\t# The OS release\n",
                    "rendered": {
                      "text": "\tcase $UNAME_MACHINE_ARCH in\n\t    earm*)\n\t\texpr='s/^earmv[0-9]/-eabi/;s/eb$//'\n\t\tabi=`echo \"$UNAME_MACHINE_ARCH\" | sed -e \"$expr\"`\n\t\t;;\n\tesac\n\t# The OS release\n",
                      "markdown": "`\tcase $UNAME_MACHINE_ARCH in\n\t    earm*)\n\t\texpr='s/^earmv[0-9]/-eabi/;s/eb$//'\n\t\tabi=`echo \"$UNAME_MACHINE_ARCH\" | sed -e \"$expr\"`\n\t\t;;\n\tesac\n\t# The OS release\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 4,
                  "endLine": 238,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\t    arm*|i386|m68k|ns32k|sh3*|sparc|vax)\n\t\tset_cc_for_build\n\t\tif echo __ELF__ | $CC_FOR_BUILD -E - 2>/dev/null \\\n\t\t\t| grep -q __ELF__\n\t\tthen\n\t\t    # Once all utilities can be ECOFF (netbsdecoff) or a.out (netbsdaout).\n\t\t    # Return netbsd for either.  FIX?\n",
                    "rendered": {
                      "text": "\t    arm*|i386|m68k|ns32k|sh3*|sparc|vax)\n\t\tset_cc_for_build\n\t\tif echo __ELF__ | $CC_FOR_BUILD -E - 2>/dev/null \\\n\t\t\t| grep -q __ELF__\n\t\tthen\n\t\t    # Once all utilities can be ECOFF (netbsdecoff) or a.out (netbsdaout).\n\t\t    # Return netbsd for either.  FIX?\n",
                      "markdown": "`\t    arm*|i386|m68k|ns32k|sh3*|sparc|vax)\n\t\tset_cc_for_build\n\t\tif echo __ELF__ | $CC_FOR_BUILD -E - 2>/dev/null \\\n\t\t\t| grep -q __ELF__\n\t\tthen\n\t\t    # Once all utilities can be ECOFF (netbsdecoff) or a.out (netbsdaout).\n\t\t    # Return netbsd for either.  FIX?\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 224,
                  "startColumn": 38,
                  "endLine": 224,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\t    sh5el) machine=sh5le-unknown ;;\n\t    earmv*)\n\t\tarch=`echo \"$UNAME_MACHINE_ARCH\" | sed -e 's,^e\\(armv[0-9]\\).*$,\\1,'`\n\t\tendian=`echo \"$UNAME_MACHINE_ARCH\" | sed -ne 's,^.*\\(eb\\)$,\\1,p'`\n\t\tmachine=${arch}${endian}-unknown\n\t\t;;\n\t    *) machine=$UNAME_MACHINE_ARCH-unknown ;;\n",
                    "rendered": {
                      "text": "\t    sh5el) machine=sh5le-unknown ;;\n\t    earmv*)\n\t\tarch=`echo \"$UNAME_MACHINE_ARCH\" | sed -e 's,^e\\(armv[0-9]\\).*$,\\1,'`\n\t\tendian=`echo \"$UNAME_MACHINE_ARCH\" | sed -ne 's,^.*\\(eb\\)$,\\1,p'`\n\t\tmachine=${arch}${endian}-unknown\n\t\t;;\n\t    *) machine=$UNAME_MACHINE_ARCH-unknown ;;\n",
                      "markdown": "`\t    sh5el) machine=sh5le-unknown ;;\n\t    earmv*)\n\t\tarch=`echo \"$UNAME_MACHINE_ARCH\" | sed -e 's,^e\\(armv[0-9]\\).*$,\\1,'`\n\t\tendian=`echo \"$UNAME_MACHINE_ARCH\" | sed -ne 's,^.*\\(eb\\)$,\\1,p'`\n\t\tmachine=${arch}${endian}-unknown\n\t\t;;\n\t    *) machine=$UNAME_MACHINE_ARCH-unknown ;;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 36,
                  "endLine": 223,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\t    sh3eb) machine=sh-unknown ;;\n\t    sh5el) machine=sh5le-unknown ;;\n\t    earmv*)\n\t\tarch=`echo \"$UNAME_MACHINE_ARCH\" | sed -e 's,^e\\(armv[0-9]\\).*$,\\1,'`\n\t\tendian=`echo \"$UNAME_MACHINE_ARCH\" | sed -ne 's,^.*\\(eb\\)$,\\1,p'`\n\t\tmachine=${arch}${endian}-unknown\n\t\t;;\n",
                    "rendered": {
                      "text": "\t    sh3eb) machine=sh-unknown ;;\n\t    sh5el) machine=sh5le-unknown ;;\n\t    earmv*)\n\t\tarch=`echo \"$UNAME_MACHINE_ARCH\" | sed -e 's,^e\\(armv[0-9]\\).*$,\\1,'`\n\t\tendian=`echo \"$UNAME_MACHINE_ARCH\" | sed -ne 's,^.*\\(eb\\)$,\\1,p'`\n\t\tmachine=${arch}${endian}-unknown\n\t\t;;\n",
                      "markdown": "`\t    sh3eb) machine=sh-unknown ;;\n\t    sh5el) machine=sh5le-unknown ;;\n\t    earmv*)\n\t\tarch=`echo \"$UNAME_MACHINE_ARCH\" | sed -e 's,^e\\(armv[0-9]\\).*$,\\1,'`\n\t\tendian=`echo \"$UNAME_MACHINE_ARCH\" | sed -ne 's,^.*\\(eb\\)$,\\1,p'`\n\t\tmachine=${arch}${endian}-unknown\n\t\t;;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 24,
                  "endLine": 185,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\t# Second heuristic to detect musl libc.\n\tif [ \"$LIBC\" = unknown ] &&\n\t   command -v ldd >/dev/null &&\n\t   ldd --version 2>&1 | grep -q ^musl; then\n\t\tLIBC=musl\n\tfi\n\n",
                    "rendered": {
                      "text": "\t# Second heuristic to detect musl libc.\n\tif [ \"$LIBC\" = unknown ] &&\n\t   command -v ldd >/dev/null &&\n\t   ldd --version 2>&1 | grep -q ^musl; then\n\t\tLIBC=musl\n\tfi\n\n",
                      "markdown": "`\t# Second heuristic to detect musl libc.\n\tif [ \"$LIBC\" = unknown ] &&\n\t   command -v ldd >/dev/null &&\n\t   ldd --version 2>&1 | grep -q ^musl; then\n\t\tLIBC=musl\n\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 70,
                  "endLine": 179,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\t#endif\n\t#endif\n\tEOF\n\tcc_set_libc=`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^LIBC' | sed 's, ,,g'`\n\teval \"$cc_set_libc\"\n\n\t# Second heuristic to detect musl libc.\n",
                    "rendered": {
                      "text": "\t#endif\n\t#endif\n\tEOF\n\tcc_set_libc=`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^LIBC' | sed 's, ,,g'`\n\teval \"$cc_set_libc\"\n\n\t# Second heuristic to detect musl libc.\n",
                      "markdown": "`\t#endif\n\t#endif\n\tEOF\n\tcc_set_libc=`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^LIBC' | sed 's, ,,g'`\n\teval \"$cc_set_libc\"\n\n\t# Second heuristic to detect musl libc.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 55,
                  "endLine": 179,
                  "endColumn": 61,
                  "snippet": {
                    "text": "\t#endif\n\t#endif\n\tEOF\n\tcc_set_libc=`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^LIBC' | sed 's, ,,g'`\n\teval \"$cc_set_libc\"\n\n\t# Second heuristic to detect musl libc.\n",
                    "rendered": {
                      "text": "\t#endif\n\t#endif\n\tEOF\n\tcc_set_libc=`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^LIBC' | sed 's, ,,g'`\n\teval \"$cc_set_libc\"\n\n\t# Second heuristic to detect musl libc.\n",
                      "markdown": "`\t#endif\n\t#endif\n\tEOF\n\tcc_set_libc=`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^LIBC' | sed 's, ,,g'`\n\teval \"$cc_set_libc\"\n\n\t# Second heuristic to detect musl libc.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 157,
                  "endLine": 157,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tLIBC=unknown\n\n\tset_cc_for_build\n\tcat <<-EOF > \"$dummy.c\"\n\t#if defined(__ANDROID__)\n\tLIBC=android\n\t#else\n",
                    "rendered": {
                      "text": "\tLIBC=unknown\n\n\tset_cc_for_build\n\tcat <<-EOF > \"$dummy.c\"\n\t#if defined(__ANDROID__)\n\tLIBC=android\n\t#else\n",
                      "markdown": "`\tLIBC=unknown\n\n\tset_cc_for_build\n\tcat <<-EOF > \"$dummy.c\"\n\t#if defined(__ANDROID__)\n\tLIBC=android\n\t#else\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 19,
                  "endLine": 141,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    esac\n}\n\n# This is needed to find uname on a Pyramid OSx when run in the BSD universe.\n# (ghazi@noc.rutgers.edu 1994-08-24)\nif test -f /.attbin/uname ; then\n\tPATH=$PATH:/.attbin ; export PATH\n",
                    "rendered": {
                      "text": "    esac\n}\n\n# This is needed to find uname on a Pyramid OSx when run in the BSD universe.\n# (ghazi@noc.rutgers.edu 1994-08-24)\nif test -f /.attbin/uname ; then\n\tPATH=$PATH:/.attbin ; export PATH\n",
                      "markdown": "`    esac\n}\n\n# This is needed to find uname on a Pyramid OSx when run in the BSD universe.\n# (ghazi@noc.rutgers.edu 1994-08-24)\nif test -f /.attbin/uname ; then\n\tPATH=$PATH:/.attbin ; export PATH\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 15,
                  "endLine": 45,
                  "endColumn": 20,
                  "snippet": {
                    "text": "# have a pre-POSIX /bin/sh.\n\n\nme=`echo \"$0\" | sed -e 's,.*/,,'`\n\nusage=\"\\\nUsage: $0 [OPTION]\n",
                    "rendered": {
                      "text": "# have a pre-POSIX /bin/sh.\n\n\nme=`echo \"$0\" | sed -e 's,.*/,,'`\n\nusage=\"\\\nUsage: $0 [OPTION]\n",
                      "markdown": "`# have a pre-POSIX /bin/sh.\n\n\nme=`echo \"$0\" | sed -e 's,.*/,,'`\n\nusage=\"\\\nUsage: $0 [OPTION]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 47,
                  "endLine": 39,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\n# The \"shellcheck disable\" line above the timestamp inhibits complaints\n# about features and limitations of the classic Bourne shell that were\n# superseded or lifted in POSIX.  However, this script identifies a wide\n# variety of pre-POSIX systems that do not have POSIX shells at all, and\n# even some reasonably current systems (Solaris 10 as case-in-point) still\n# have a pre-POSIX /bin/sh.\n",
                    "rendered": {
                      "text": "\n# The \"shellcheck disable\" line above the timestamp inhibits complaints\n# about features and limitations of the classic Bourne shell that were\n# superseded or lifted in POSIX.  However, this script identifies a wide\n# variety of pre-POSIX systems that do not have POSIX shells at all, and\n# even some reasonably current systems (Solaris 10 as case-in-point) still\n# have a pre-POSIX /bin/sh.\n",
                      "markdown": "`\n# The \"shellcheck disable\" line above the timestamp inhibits complaints\n# about features and limitations of the classic Bourne shell that were\n# superseded or lifted in POSIX.  However, this script identifies a wide\n# variety of pre-POSIX systems that do not have POSIX shells at all, and\n# even some reasonably current systems (Solaris 10 as case-in-point) still\n# have a pre-POSIX /bin/sh.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 40,
                  "endLine": 31,
                  "endColumn": 48,
                  "snippet": {
                    "text": "#\n# Originally written by Per Bothner; maintained since 2000 by Ben Elliston.\n#\n# You can get the latest version of this script from:\n# https://git.savannah.gnu.org/cgit/config.git/plain/config.guess\n#\n# Please send patches to <config-patches@gnu.org>.\n",
                    "rendered": {
                      "text": "#\n# Originally written by Per Bothner; maintained since 2000 by Ben Elliston.\n#\n# You can get the latest version of this script from:\n# https://git.savannah.gnu.org/cgit/config.git/plain/config.guess\n#\n# Please send patches to <config-patches@gnu.org>.\n",
                      "markdown": "`#\n# Originally written by Per Bothner; maintained since 2000 by Ben Elliston.\n#\n# You can get the latest version of this script from:\n# https://git.savannah.gnu.org/cgit/config.git/plain/config.guess\n#\n# Please send patches to <config-patches@gnu.org>.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.guess"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 15,
                  "endLine": 24,
                  "endColumn": 23,
                  "snippet": {
                    "text": "#\n# As a special exception to the GNU General Public License, if you\n# distribute this file as part of a program that contains a\n# configuration script generated by Autoconf, you may include it under\n# the same distribution terms that you use for the rest of that\n# program.  This Exception is an additional permission under section 7\n# of the GNU General Public License, version 3 (\"GPLv3\").\n",
                    "rendered": {
                      "text": "#\n# As a special exception to the GNU General Public License, if you\n# distribute this file as part of a program that contains a\n# configuration script generated by Autoconf, you may include it under\n# the same distribution terms that you use for the rest of that\n# program.  This Exception is an additional permission under section 7\n# of the GNU General Public License, version 3 (\"GPLv3\").\n",
                      "markdown": "`#\n# As a special exception to the GNU General Public License, if you\n# distribute this file as part of a program that contains a\n# configuration script generated by Autoconf, you may include it under\n# the same distribution terms that you use for the rest of that\n# program.  This Exception is an additional permission under section 7\n# of the GNU General Public License, version 3 (\"GPLv3\").\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                      "markdown": "`\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                    "rendered": {
                      "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                      "markdown": "`\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 15,
                  "endLine": 77,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                    "rendered": {
                      "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                      "markdown": "`#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 27,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                    "rendered": {
                      "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                      "markdown": "`\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                      "markdown": "`\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                    "rendered": {
                      "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                      "markdown": "`# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                    "rendered": {
                      "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                      "markdown": "`# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                    "rendered": {
                      "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                      "markdown": "`\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/applypatch-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 45,
                  "endLine": 13,
                  "endColumn": 53,
                  "snippet": {
                    "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                    "rendered": {
                      "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                      "markdown": "`#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 51,
                  "endLine": 12,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                    "rendered": {
                      "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                      "markdown": "`# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 53,
                  "endLine": 11,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                    "rendered": {
                      "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                      "markdown": "`# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                    "rendered": {
                      "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                      "markdown": "`\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                    "rendered": {
                      "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                      "markdown": "`\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 30,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                    "rendered": {
                      "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                      "markdown": "`\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 28,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                    "rendered": {
                      "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                      "markdown": "`\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                    "rendered": {
                      "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                      "markdown": "`\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 45,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                    "rendered": {
                      "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                      "markdown": "`use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                    "rendered": {
                      "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                      "markdown": "`use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                    "rendered": {
                      "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                      "markdown": "`# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 37,
                  "endLine": 37,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                    "rendered": {
                      "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                      "markdown": "`#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                    "rendered": {
                      "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                      "markdown": "`# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                    "rendered": {
                      "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                      "markdown": "`# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 39,
                  "endLine": 89,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                    "rendered": {
                      "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                      "markdown": "`\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                    "rendered": {
                      "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                      "markdown": "`\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/pre-merge-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 45,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                    "rendered": {
                      "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                      "markdown": "`\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 29,
                  "endLine": 151,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                    "rendered": {
                      "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                      "markdown": "` * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                    "rendered": {
                      "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                      "markdown": "`    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 104,
                  "snippet": {
                    "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                    "rendered": {
                      "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                      "markdown": "`\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                    "rendered": {
                      "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                      "markdown": "`\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                    "rendered": {
                      "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                      "markdown": "`To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                    "rendered": {
                      "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                      "markdown": "`\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                    "rendered": {
                      "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                      "markdown": "`\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 42,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                    "rendered": {
                      "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                      "markdown": "`   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                      "markdown": "`# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 9,
                  "snippet": {
                    "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                    "rendered": {
                      "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                      "markdown": "`esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 26,
                  "snippet": {
                    "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                    "rendered": {
                      "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                      "markdown": "`\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/getuuid.c"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 18,
                  "endLine": 90,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    r.pid = getpid();\n    gettimeofday(&r.t, (struct timezone *)0);\n#endif\n    gethostname(r.hostname, 256);\n    apr_md5_update(&c, (const unsigned char *)&r, sizeof(r));\n    apr_md5_final(seed, &c);\n\n",
                    "rendered": {
                      "text": "    r.pid = getpid();\n    gettimeofday(&r.t, (struct timezone *)0);\n#endif\n    gethostname(r.hostname, 256);\n    apr_md5_update(&c, (const unsigned char *)&r, sizeof(r));\n    apr_md5_final(seed, &c);\n\n",
                      "markdown": "`    r.pid = getpid();\n    gettimeofday(&r.t, (struct timezone *)0);\n#endif\n    gethostname(r.hostname, 256);\n    apr_md5_update(&c, (const unsigned char *)&r, sizeof(r));\n    apr_md5_final(seed, &c);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/getuuid.c"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 13,
                  "endLine": 78,
                  "endColumn": 21,
                  "snippet": {
                    "text": "#else\n        struct timeval t;\n#endif\n        char hostname[257];\n\n    } r;\n\n",
                    "rendered": {
                      "text": "#else\n        struct timeval t;\n#endif\n        char hostname[257];\n\n    } r;\n\n",
                      "markdown": "`#else\n        struct timeval t;\n#endif\n        char hostname[257];\n\n    } r;\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testdbd.c"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 51,
                  "endLine": 220,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    ABTS_STR_EQUAL(tc, \"sqlite3\", apr_dbd_name(driver));\n\n    rv = apr_dbd_open(driver, pool, \"data/sqlite3.db\", &handle);\n    ABTS_ASSERT(tc, apr_psprintf(p, \"failed to open sqlite3 database: %pm\", &rv), rv == APR_SUCCESS);\n    ABTS_PTR_NOTNULL(tc, handle);\n    if (!handle) {\n    \treturn;\n",
                    "rendered": {
                      "text": "    ABTS_STR_EQUAL(tc, \"sqlite3\", apr_dbd_name(driver));\n\n    rv = apr_dbd_open(driver, pool, \"data/sqlite3.db\", &handle);\n    ABTS_ASSERT(tc, apr_psprintf(p, \"failed to open sqlite3 database: %pm\", &rv), rv == APR_SUCCESS);\n    ABTS_PTR_NOTNULL(tc, handle);\n    if (!handle) {\n    \treturn;\n",
                      "markdown": "`    ABTS_STR_EQUAL(tc, \"sqlite3\", apr_dbd_name(driver));\n\n    rv = apr_dbd_open(driver, pool, \"data/sqlite3.db\", &handle);\n    ABTS_ASSERT(tc, apr_psprintf(p, \"failed to open sqlite3 database: %pm\", &rv), rv == APR_SUCCESS);\n    ABTS_PTR_NOTNULL(tc, handle);\n    if (!handle) {\n    \treturn;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testdbd.c"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 52,
                  "endLine": 211,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    apr_dbd_t* handle = NULL;\n\n    rv = apr_dbd_get_driver(pool, \"sqlite3\", &driver);\n    ABTS_ASSERT(tc, apr_psprintf(p, \"failed to fetch sqlite3 driver: %pm\", &rv), rv == APR_SUCCESS);\n    ABTS_PTR_NOTNULL(tc, driver);\n    if (!driver) {\n    \treturn;\n",
                    "rendered": {
                      "text": "    apr_dbd_t* handle = NULL;\n\n    rv = apr_dbd_get_driver(pool, \"sqlite3\", &driver);\n    ABTS_ASSERT(tc, apr_psprintf(p, \"failed to fetch sqlite3 driver: %pm\", &rv), rv == APR_SUCCESS);\n    ABTS_PTR_NOTNULL(tc, driver);\n    if (!driver) {\n    \treturn;\n",
                      "markdown": "`    apr_dbd_t* handle = NULL;\n\n    rv = apr_dbd_get_driver(pool, \"sqlite3\", &driver);\n    ABTS_ASSERT(tc, apr_psprintf(p, \"failed to fetch sqlite3 driver: %pm\", &rv), rv == APR_SUCCESS);\n    ABTS_PTR_NOTNULL(tc, driver);\n    if (!driver) {\n    \treturn;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/NWGNUreadchild"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 25,
                  "endLine": 114,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n#\n# If this is specified, it will override VERSION value in \n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                    "rendered": {
                      "text": "\n#\n# If this is specified, it will override VERSION value in \n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                      "markdown": "`\n#\n# If this is specified, it will override VERSION value in \n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/NWGNUreadchild"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 30,
                  "endLine": 6,
                  "endColumn": 65,
                  "snippet": {
                    "text": "#\n\n#\n# Get the 'head' of the build environment if necessary.  This includes default\n# targets and paths to tools\n#\n\n",
                    "rendered": {
                      "text": "#\n\n#\n# Get the 'head' of the build environment if necessary.  This includes default\n# targets and paths to tools\n#\n\n",
                      "markdown": "`#\n\n#\n# Get the 'head' of the build environment if necessary.  This includes default\n# targets and paths to tools\n#\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/NWGNUreadchild"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 27,
                  "endLine": 15,
                  "endColumn": 31,
                  "snippet": {
                    "text": "endif\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                    "rendered": {
                      "text": "endif\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                      "markdown": "`endif\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testtime.c"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 36,
                  "endLine": 69,
                  "endColumn": 42,
                  "snippet": {
                    "text": "     * that the time will be slightly off, so accept anything between -1 and\n     * 1 second.\n     */\n    ABTS_ASSERT(tc, \"apr_time and OS time do not agree\",\n             (timediff > -2) && (timediff < 2));\n}\n\n",
                    "rendered": {
                      "text": "     * that the time will be slightly off, so accept anything between -1 and\n     * 1 second.\n     */\n    ABTS_ASSERT(tc, \"apr_time and OS time do not agree\",\n             (timediff > -2) && (timediff < 2));\n}\n\n",
                      "markdown": "`     * that the time will be slightly off, so accept anything between -1 and\n     * 1 second.\n     */\n    ABTS_ASSERT(tc, \"apr_time and OS time do not agree\",\n             (timediff > -2) && (timediff < 2));\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_lib.h"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 30,
                  "endLine": 189,
                  "endColumn": 38,
                  "snippet": {
                    "text": " * reason; its value will never be modified by the apr_password_get()\n * function.\n */\nAPR_DECLARE(apr_status_t) apr_password_get(const char *prompt, char *pwbuf,\n                                           apr_size_t *bufsize);\n\n/** @} */\n",
                    "rendered": {
                      "text": " * reason; its value will never be modified by the apr_password_get()\n * function.\n */\nAPR_DECLARE(apr_status_t) apr_password_get(const char *prompt, char *pwbuf,\n                                           apr_size_t *bufsize);\n\n/** @} */\n",
                      "markdown": "` * reason; its value will never be modified by the apr_password_get()\n * function.\n */\nAPR_DECLARE(apr_status_t) apr_password_get(const char *prompt, char *pwbuf,\n                                           apr_size_t *bufsize);\n\n/** @} */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_lib.h"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 55,
                  "endLine": 186,
                  "endColumn": 63,
                  "snippet": {
                    "text": " * @remark If the password entered must be truncated to fit in\n * the provided buffer, APR_ENAMETOOLONG will be returned.\n * Note that the bufsize paramater is passed by reference for no\n * reason; its value will never be modified by the apr_password_get()\n * function.\n */\nAPR_DECLARE(apr_status_t) apr_password_get(const char *prompt, char *pwbuf,\n",
                    "rendered": {
                      "text": " * @remark If the password entered must be truncated to fit in\n * the provided buffer, APR_ENAMETOOLONG will be returned.\n * Note that the bufsize paramater is passed by reference for no\n * reason; its value will never be modified by the apr_password_get()\n * function.\n */\nAPR_DECLARE(apr_status_t) apr_password_get(const char *prompt, char *pwbuf,\n",
                      "markdown": "` * @remark If the password entered must be truncated to fit in\n * the provided buffer, APR_ENAMETOOLONG will be returned.\n * Note that the bufsize paramater is passed by reference for no\n * reason; its value will never be modified by the apr_password_get()\n * function.\n */\nAPR_DECLARE(apr_status_t) apr_password_get(const char *prompt, char *pwbuf,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_lib.h"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 18,
                  "endLine": 183,
                  "endColumn": 26,
                  "snippet": {
                    "text": " * @param prompt The prompt to display\n * @param pwbuf Buffer to store the password\n * @param bufsize The length of the password buffer.\n * @remark If the password entered must be truncated to fit in\n * the provided buffer, APR_ENAMETOOLONG will be returned.\n * Note that the bufsize paramater is passed by reference for no\n * reason; its value will never be modified by the apr_password_get()\n",
                    "rendered": {
                      "text": " * @param prompt The prompt to display\n * @param pwbuf Buffer to store the password\n * @param bufsize The length of the password buffer.\n * @remark If the password entered must be truncated to fit in\n * the provided buffer, APR_ENAMETOOLONG will be returned.\n * Note that the bufsize paramater is passed by reference for no\n * reason; its value will never be modified by the apr_password_get()\n",
                      "markdown": "` * @param prompt The prompt to display\n * @param pwbuf Buffer to store the password\n * @param bufsize The length of the password buffer.\n * @remark If the password entered must be truncated to fit in\n * the provided buffer, APR_ENAMETOOLONG will be returned.\n * Note that the bufsize paramater is passed by reference for no\n * reason; its value will never be modified by the apr_password_get()\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_lib.h"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 36,
                  "endLine": 182,
                  "endColumn": 44,
                  "snippet": {
                    "text": " * Display a prompt and read in the password from stdin.\n * @param prompt The prompt to display\n * @param pwbuf Buffer to store the password\n * @param bufsize The length of the password buffer.\n * @remark If the password entered must be truncated to fit in\n * the provided buffer, APR_ENAMETOOLONG will be returned.\n * Note that the bufsize paramater is passed by reference for no\n",
                    "rendered": {
                      "text": " * Display a prompt and read in the password from stdin.\n * @param prompt The prompt to display\n * @param pwbuf Buffer to store the password\n * @param bufsize The length of the password buffer.\n * @remark If the password entered must be truncated to fit in\n * the provided buffer, APR_ENAMETOOLONG will be returned.\n * Note that the bufsize paramater is passed by reference for no\n",
                      "markdown": "` * Display a prompt and read in the password from stdin.\n * @param prompt The prompt to display\n * @param pwbuf Buffer to store the password\n * @param bufsize The length of the password buffer.\n * @remark If the password entered must be truncated to fit in\n * the provided buffer, APR_ENAMETOOLONG will be returned.\n * Note that the bufsize paramater is passed by reference for no\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_lib.h"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 36,
                  "endLine": 181,
                  "endColumn": 44,
                  "snippet": {
                    "text": "/**\n * Display a prompt and read in the password from stdin.\n * @param prompt The prompt to display\n * @param pwbuf Buffer to store the password\n * @param bufsize The length of the password buffer.\n * @remark If the password entered must be truncated to fit in\n * the provided buffer, APR_ENAMETOOLONG will be returned.\n",
                    "rendered": {
                      "text": "/**\n * Display a prompt and read in the password from stdin.\n * @param prompt The prompt to display\n * @param pwbuf Buffer to store the password\n * @param bufsize The length of the password buffer.\n * @remark If the password entered must be truncated to fit in\n * the provided buffer, APR_ENAMETOOLONG will be returned.\n",
                      "markdown": "`/**\n * Display a prompt and read in the password from stdin.\n * @param prompt The prompt to display\n * @param pwbuf Buffer to store the password\n * @param bufsize The length of the password buffer.\n * @remark If the password entered must be truncated to fit in\n * the provided buffer, APR_ENAMETOOLONG will be returned.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_lib.h"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 36,
                  "endLine": 179,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t\t        va_list ap);\n\n/**\n * Display a prompt and read in the password from stdin.\n * @param prompt The prompt to display\n * @param pwbuf Buffer to store the password\n * @param bufsize The length of the password buffer.\n",
                    "rendered": {
                      "text": "\t\t\t        va_list ap);\n\n/**\n * Display a prompt and read in the password from stdin.\n * @param prompt The prompt to display\n * @param pwbuf Buffer to store the password\n * @param bufsize The length of the password buffer.\n",
                      "markdown": "`\t\t\t        va_list ap);\n\n/**\n * Display a prompt and read in the password from stdin.\n * @param prompt The prompt to display\n * @param pwbuf Buffer to store the password\n * @param bufsize The length of the password buffer.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_sha1.h"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 51,
                  "endLine": 78,
                  "endColumn": 59,
                  "snippet": {
                    "text": " *     secure than Apache's password format, since Apache's (MD5)\n *     password format uses a random eight character salt to generate\n *     one of many possible hashes for the same password.  Netscape\n *     uses plain SHA1 without a salt, so the same password\n *     will always generate the same hash, making it easier\n *     to break since the search space is smaller.\n */\n",
                    "rendered": {
                      "text": " *     secure than Apache's password format, since Apache's (MD5)\n *     password format uses a random eight character salt to generate\n *     one of many possible hashes for the same password.  Netscape\n *     uses plain SHA1 without a salt, so the same password\n *     will always generate the same hash, making it easier\n *     to break since the search space is smaller.\n */\n",
                      "markdown": "` *     secure than Apache's password format, since Apache's (MD5)\n *     password format uses a random eight character salt to generate\n *     one of many possible hashes for the same password.  Netscape\n *     uses plain SHA1 without a salt, so the same password\n *     will always generate the same hash, making it easier\n *     to break since the search space is smaller.\n */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_sha1.h"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 48,
                  "endLine": 77,
                  "endColumn": 56,
                  "snippet": {
                    "text": " * @note SHA1 support is useful for migration purposes, but is less\n *     secure than Apache's password format, since Apache's (MD5)\n *     password format uses a random eight character salt to generate\n *     one of many possible hashes for the same password.  Netscape\n *     uses plain SHA1 without a salt, so the same password\n *     will always generate the same hash, making it easier\n *     to break since the search space is smaller.\n",
                    "rendered": {
                      "text": " * @note SHA1 support is useful for migration purposes, but is less\n *     secure than Apache's password format, since Apache's (MD5)\n *     password format uses a random eight character salt to generate\n *     one of many possible hashes for the same password.  Netscape\n *     uses plain SHA1 without a salt, so the same password\n *     will always generate the same hash, making it easier\n *     to break since the search space is smaller.\n",
                      "markdown": "` * @note SHA1 support is useful for migration purposes, but is less\n *     secure than Apache's password format, since Apache's (MD5)\n *     password format uses a random eight character salt to generate\n *     one of many possible hashes for the same password.  Netscape\n *     uses plain SHA1 without a salt, so the same password\n *     will always generate the same hash, making it easier\n *     to break since the search space is smaller.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_sha1.h"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 7,
                  "endLine": 76,
                  "endColumn": 15,
                  "snippet": {
                    "text": " * @param out The encrypted/encoded password\n * @note SHA1 support is useful for migration purposes, but is less\n *     secure than Apache's password format, since Apache's (MD5)\n *     password format uses a random eight character salt to generate\n *     one of many possible hashes for the same password.  Netscape\n *     uses plain SHA1 without a salt, so the same password\n *     will always generate the same hash, making it easier\n",
                    "rendered": {
                      "text": " * @param out The encrypted/encoded password\n * @note SHA1 support is useful for migration purposes, but is less\n *     secure than Apache's password format, since Apache's (MD5)\n *     password format uses a random eight character salt to generate\n *     one of many possible hashes for the same password.  Netscape\n *     uses plain SHA1 without a salt, so the same password\n *     will always generate the same hash, making it easier\n",
                      "markdown": "` * @param out The encrypted/encoded password\n * @note SHA1 support is useful for migration purposes, but is less\n *     secure than Apache's password format, since Apache's (MD5)\n *     password format uses a random eight character salt to generate\n *     one of many possible hashes for the same password.  Netscape\n *     uses plain SHA1 without a salt, so the same password\n *     will always generate the same hash, making it easier\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_sha1.h"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 28,
                  "endLine": 75,
                  "endColumn": 36,
                  "snippet": {
                    "text": " * @param len The length of the plaintext password\n * @param out The encrypted/encoded password\n * @note SHA1 support is useful for migration purposes, but is less\n *     secure than Apache's password format, since Apache's (MD5)\n *     password format uses a random eight character salt to generate\n *     one of many possible hashes for the same password.  Netscape\n *     uses plain SHA1 without a salt, so the same password\n",
                    "rendered": {
                      "text": " * @param len The length of the plaintext password\n * @param out The encrypted/encoded password\n * @note SHA1 support is useful for migration purposes, but is less\n *     secure than Apache's password format, since Apache's (MD5)\n *     password format uses a random eight character salt to generate\n *     one of many possible hashes for the same password.  Netscape\n *     uses plain SHA1 without a salt, so the same password\n",
                      "markdown": "` * @param len The length of the plaintext password\n * @param out The encrypted/encoded password\n * @note SHA1 support is useful for migration purposes, but is less\n *     secure than Apache's password format, since Apache's (MD5)\n *     password format uses a random eight character salt to generate\n *     one of many possible hashes for the same password.  Netscape\n *     uses plain SHA1 without a salt, so the same password\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_sha1.h"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 36,
                  "endLine": 73,
                  "endColumn": 44,
                  "snippet": {
                    "text": " * and ldap installations.\n * @param clear The plaintext password\n * @param len The length of the plaintext password\n * @param out The encrypted/encoded password\n * @note SHA1 support is useful for migration purposes, but is less\n *     secure than Apache's password format, since Apache's (MD5)\n *     password format uses a random eight character salt to generate\n",
                    "rendered": {
                      "text": " * and ldap installations.\n * @param clear The plaintext password\n * @param len The length of the plaintext password\n * @param out The encrypted/encoded password\n * @note SHA1 support is useful for migration purposes, but is less\n *     secure than Apache's password format, since Apache's (MD5)\n *     password format uses a random eight character salt to generate\n",
                      "markdown": "` * and ldap installations.\n * @param clear The plaintext password\n * @param len The length of the plaintext password\n * @param out The encrypted/encoded password\n * @note SHA1 support is useful for migration purposes, but is less\n *     secure than Apache's password format, since Apache's (MD5)\n *     password format uses a random eight character salt to generate\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_sha1.h"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 42,
                  "endLine": 72,
                  "endColumn": 50,
                  "snippet": {
                    "text": " * makes password file compatible with those commonly use in netscape web\n * and ldap installations.\n * @param clear The plaintext password\n * @param len The length of the plaintext password\n * @param out The encrypted/encoded password\n * @note SHA1 support is useful for migration purposes, but is less\n *     secure than Apache's password format, since Apache's (MD5)\n",
                    "rendered": {
                      "text": " * makes password file compatible with those commonly use in netscape web\n * and ldap installations.\n * @param clear The plaintext password\n * @param len The length of the plaintext password\n * @param out The encrypted/encoded password\n * @note SHA1 support is useful for migration purposes, but is less\n *     secure than Apache's password format, since Apache's (MD5)\n",
                      "markdown": "` * makes password file compatible with those commonly use in netscape web\n * and ldap installations.\n * @param clear The plaintext password\n * @param len The length of the plaintext password\n * @param out The encrypted/encoded password\n * @note SHA1 support is useful for migration purposes, but is less\n *     secure than Apache's password format, since Apache's (MD5)\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_sha1.h"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 30,
                  "endLine": 71,
                  "endColumn": 38,
                  "snippet": {
                    "text": " * Provide a means to SHA1 crypt/encode a plaintext password in a way which\n * makes password file compatible with those commonly use in netscape web\n * and ldap installations.\n * @param clear The plaintext password\n * @param len The length of the plaintext password\n * @param out The encrypted/encoded password\n * @note SHA1 support is useful for migration purposes, but is less\n",
                    "rendered": {
                      "text": " * Provide a means to SHA1 crypt/encode a plaintext password in a way which\n * makes password file compatible with those commonly use in netscape web\n * and ldap installations.\n * @param clear The plaintext password\n * @param len The length of the plaintext password\n * @param out The encrypted/encoded password\n * @note SHA1 support is useful for migration purposes, but is less\n",
                      "markdown": "` * Provide a means to SHA1 crypt/encode a plaintext password in a way which\n * makes password file compatible with those commonly use in netscape web\n * and ldap installations.\n * @param clear The plaintext password\n * @param len The length of the plaintext password\n * @param out The encrypted/encoded password\n * @note SHA1 support is useful for migration purposes, but is less\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_sha1.h"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 9,
                  "endLine": 69,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n/**\n * Provide a means to SHA1 crypt/encode a plaintext password in a way which\n * makes password file compatible with those commonly use in netscape web\n * and ldap installations.\n * @param clear The plaintext password\n * @param len The length of the plaintext password\n",
                    "rendered": {
                      "text": "\n/**\n * Provide a means to SHA1 crypt/encode a plaintext password in a way which\n * makes password file compatible with those commonly use in netscape web\n * and ldap installations.\n * @param clear The plaintext password\n * @param len The length of the plaintext password\n",
                      "markdown": "`\n/**\n * Provide a means to SHA1 crypt/encode a plaintext password in a way which\n * makes password file compatible with those commonly use in netscape web\n * and ldap installations.\n * @param clear The plaintext password\n * @param len The length of the plaintext password\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_sha1.h"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 52,
                  "endLine": 68,
                  "endColumn": 60,
                  "snippet": {
                    "text": "};\n\n/**\n * Provide a means to SHA1 crypt/encode a plaintext password in a way which\n * makes password file compatible with those commonly use in netscape web\n * and ldap installations.\n * @param clear The plaintext password\n",
                    "rendered": {
                      "text": "};\n\n/**\n * Provide a means to SHA1 crypt/encode a plaintext password in a way which\n * makes password file compatible with those commonly use in netscape web\n * and ldap installations.\n * @param clear The plaintext password\n",
                      "markdown": "`};\n\n/**\n * Provide a means to SHA1 crypt/encode a plaintext password in a way which\n * makes password file compatible with those commonly use in netscape web\n * and ldap installations.\n * @param clear The plaintext password\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_sha1.h"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 22,
                  "endLine": 47,
                  "endColumn": 30,
                  "snippet": {
                    "text": " */\n#define APR_SHA1PW_ID \"{SHA}\"\n\n/** length of the SHA Password */\n#define APR_SHA1PW_IDLEN 5\n\n/** @see apr_sha1_ctx_t */\n",
                    "rendered": {
                      "text": " */\n#define APR_SHA1PW_ID \"{SHA}\"\n\n/** length of the SHA Password */\n#define APR_SHA1PW_IDLEN 5\n\n/** @see apr_sha1_ctx_t */\n",
                      "markdown": "` */\n#define APR_SHA1PW_ID \"{SHA}\"\n\n/** length of the SHA Password */\n#define APR_SHA1PW_IDLEN 5\n\n/** @see apr_sha1_ctx_t */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_sha1.h"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 52,
                  "endLine": 42,
                  "endColumn": 60,
                  "snippet": {
                    "text": "#define APR_SHA1_DIGESTSIZE 20\n\n/**\n * Define the Magic String prefix that identifies a password as being\n * hashed using our algorithm.\n */\n#define APR_SHA1PW_ID \"{SHA}\"\n",
                    "rendered": {
                      "text": "#define APR_SHA1_DIGESTSIZE 20\n\n/**\n * Define the Magic String prefix that identifies a password as being\n * hashed using our algorithm.\n */\n#define APR_SHA1PW_ID \"{SHA}\"\n",
                      "markdown": "`#define APR_SHA1_DIGESTSIZE 20\n\n/**\n * Define the Magic String prefix that identifies a password as being\n * hashed using our algorithm.\n */\n#define APR_SHA1PW_ID \"{SHA}\"\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/memory/unix/apr_pools.c"
                },
                "region": {
                  "startLine": 1720,
                  "startColumn": 13,
                  "endLine": 1720,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    }\n\n#if (APR_POOL_DEBUG & APR_POOL_DEBUG_VERBOSE_ALL)\n    rv = apr_env_get(&logpath, \"APR_POOL_DEBUG_LOG\", global_pool);\n\n    /* Don't pass file_stderr directly to apr_file_open() here, since\n     * apr_file_open() can call back to apr_pool_log_event() and that\n",
                    "rendered": {
                      "text": "    }\n\n#if (APR_POOL_DEBUG & APR_POOL_DEBUG_VERBOSE_ALL)\n    rv = apr_env_get(&logpath, \"APR_POOL_DEBUG_LOG\", global_pool);\n\n    /* Don't pass file_stderr directly to apr_file_open() here, since\n     * apr_file_open() can call back to apr_pool_log_event() and that\n",
                      "markdown": "`    }\n\n#if (APR_POOL_DEBUG & APR_POOL_DEBUG_VERBOSE_ALL)\n    rv = apr_env_get(&logpath, \"APR_POOL_DEBUG_LOG\", global_pool);\n\n    /* Don't pass file_stderr directly to apr_file_open() here, since\n     * apr_file_open() can call back to apr_pool_log_event() and that\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/memory/unix/apr_pools.c"
                },
                "region": {
                  "startLine": 2319,
                  "startColumn": 7,
                  "endLine": 2319,
                  "endColumn": 13,
                  "snippet": {
                    "text": "            *psize += (char *)node->endp[index] - (char *)node->beginp[index];\n        }\n\n        node = node->next;\n    }\n\n    return 0;\n",
                    "rendered": {
                      "text": "            *psize += (char *)node->endp[index] - (char *)node->beginp[index];\n        }\n\n        node = node->next;\n    }\n\n    return 0;\n",
                      "markdown": "`            *psize += (char *)node->endp[index] - (char *)node->beginp[index];\n        }\n\n        node = node->next;\n    }\n\n    return 0;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/memory/unix/apr_pools.c"
                },
                "region": {
                  "startLine": 2312,
                  "startColumn": 3,
                  "endLine": 2312,
                  "endColumn": 9,
                  "snippet": {
                    "text": "    debug_node_t *node;\n    apr_size_t index;\n\n    node = pool->nodes;\n\n    while (node) {\n        for (index = 0; index < node->index; index++) {\n",
                    "rendered": {
                      "text": "    debug_node_t *node;\n    apr_size_t index;\n\n    node = pool->nodes;\n\n    while (node) {\n        for (index = 0; index < node->index; index++) {\n",
                      "markdown": "`    debug_node_t *node;\n    apr_size_t index;\n\n    node = pool->nodes;\n\n    while (node) {\n        for (index = 0; index < node->index; index++) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/memory/unix/apr_pools.c"
                },
                "region": {
                  "startLine": 2290,
                  "startColumn": 7,
                  "endLine": 2290,
                  "endColumn": 13,
                  "snippet": {
                    "text": "             }\n        }\n\n        node = node->next;\n    }\n\n    return 0;\n",
                    "rendered": {
                      "text": "             }\n        }\n\n        node = node->next;\n    }\n\n    return 0;\n",
                      "markdown": "`             }\n        }\n\n        node = node->next;\n    }\n\n    return 0;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/memory/unix/apr_pools.c"
                },
                "region": {
                  "startLine": 2279,
                  "startColumn": 3,
                  "endLine": 2279,
                  "endColumn": 9,
                  "snippet": {
                    "text": "    debug_node_t *node;\n    apr_size_t index;\n\n    node = pool->nodes;\n\n    while (node) {\n        for (index = 0; index < node->index; index++) {\n",
                    "rendered": {
                      "text": "    debug_node_t *node;\n    apr_size_t index;\n\n    node = pool->nodes;\n\n    while (node) {\n        for (index = 0; index < node->index; index++) {\n",
                      "markdown": "`    debug_node_t *node;\n    apr_size_t index;\n\n    node = pool->nodes;\n\n    while (node) {\n        for (index = 0; index < node->index; index++) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/memory/unix/apr_pools.c"
                },
                "region": {
                  "startLine": 2237,
                  "startColumn": 3,
                  "endLine": 2237,
                  "endColumn": 9,
                  "snippet": {
                    "text": "    /*\n     * Link the node in\n     */\n    node = pool->nodes;\n    if (node == NULL || node->index == 64) {\n        if ((node = malloc(SIZEOF_DEBUG_NODE_T)) == NULL) {\n            if (pool->abort_fn)\n",
                    "rendered": {
                      "text": "    /*\n     * Link the node in\n     */\n    node = pool->nodes;\n    if (node == NULL || node->index == 64) {\n        if ((node = malloc(SIZEOF_DEBUG_NODE_T)) == NULL) {\n            if (pool->abort_fn)\n",
                      "markdown": "`    /*\n     * Link the node in\n     */\n    node = pool->nodes;\n    if (node == NULL || node->index == 64) {\n        if ((node = malloc(SIZEOF_DEBUG_NODE_T)) == NULL) {\n            if (pool->abort_fn)\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/memory/unix/apr_pools.c"
                },
                "region": {
                  "startLine": 1794,
                  "startColumn": 3,
                  "endLine": 1794,
                  "endColumn": 9,
                  "snippet": {
                    "text": "        return NULL;\n    }\n\n    node = pool->nodes;\n    if (node == NULL || node->index == 64) {\n        if ((node = malloc(SIZEOF_DEBUG_NODE_T)) == NULL) {\n            free(mem);\n",
                    "rendered": {
                      "text": "        return NULL;\n    }\n\n    node = pool->nodes;\n    if (node == NULL || node->index == 64) {\n        if ((node = malloc(SIZEOF_DEBUG_NODE_T)) == NULL) {\n            free(mem);\n",
                      "markdown": "`        return NULL;\n    }\n\n    node = pool->nodes;\n    if (node == NULL || node->index == 64) {\n        if ((node = malloc(SIZEOF_DEBUG_NODE_T)) == NULL) {\n            free(mem);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/memory/unix/apr_pools.c"
                },
                "region": {
                  "startLine": 1443,
                  "startColumn": 7,
                  "endLine": 1443,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    }\n\n    do {\n        node = node->next;\n    }\n    while (free_index < node->free_index);\n\n",
                    "rendered": {
                      "text": "    }\n\n    do {\n        node = node->next;\n    }\n    while (free_index < node->free_index);\n\n",
                      "markdown": "`    }\n\n    do {\n        node = node->next;\n    }\n    while (free_index < node->free_index);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/memory/unix/apr_pools.c"
                },
                "region": {
                  "startLine": 1435,
                  "startColumn": 3,
                  "endLine": 1435,
                  "endColumn": 9,
                  "snippet": {
                    "text": "                            BOUNDARY_SIZE) - BOUNDARY_SIZE) >> BOUNDARY_INDEX;\n\n    active->free_index = (apr_uint32_t)free_index;\n    node = active->next;\n\n    if (free_index >= node->free_index) {\n        pool_concurrency_set_idle(pool);\n",
                    "rendered": {
                      "text": "                            BOUNDARY_SIZE) - BOUNDARY_SIZE) >> BOUNDARY_INDEX;\n\n    active->free_index = (apr_uint32_t)free_index;\n    node = active->next;\n\n    if (free_index >= node->free_index) {\n        pool_concurrency_set_idle(pool);\n",
                      "markdown": "`                            BOUNDARY_SIZE) - BOUNDARY_SIZE) >> BOUNDARY_INDEX;\n\n    active->free_index = (apr_uint32_t)free_index;\n    node = active->next;\n\n    if (free_index >= node->free_index) {\n        pool_concurrency_set_idle(pool);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/memory/unix/apr_pools.c"
                },
                "region": {
                  "startLine": 1423,
                  "startColumn": 3,
                  "endLine": 1423,
                  "endColumn": 9,
                  "snippet": {
                    "text": "    }\n\n    active = pool->active;\n    node = ps.node;\n\n    node->free_index = 0;\n\n",
                    "rendered": {
                      "text": "    }\n\n    active = pool->active;\n    node = ps.node;\n\n    node->free_index = 0;\n\n",
                      "markdown": "`    }\n\n    active = pool->active;\n    node = ps.node;\n\n    node->free_index = 0;\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/memory/unix/apr_pools.c"
                },
                "region": {
                  "startLine": 1290,
                  "startColumn": 7,
                  "endLine": 1290,
                  "endColumn": 13,
                  "snippet": {
                    "text": "            list_insert(active, node);\n        }\n\n        node = pool->active;\n    }\n    else {\n        if ((node = allocator_alloc(pool->allocator, size)) == NULL)\n",
                    "rendered": {
                      "text": "            list_insert(active, node);\n        }\n\n        node = pool->active;\n    }\n    else {\n        if ((node = allocator_alloc(pool->allocator, size)) == NULL)\n",
                      "markdown": "`            list_insert(active, node);\n        }\n\n        node = pool->active;\n    }\n    else {\n        if ((node = allocator_alloc(pool->allocator, size)) == NULL)\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/memory/unix/apr_pools.c"
                },
                "region": {
                  "startLine": 1282,
                  "startColumn": 15,
                  "endLine": 1282,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        node = active->next;\n        if (free_index < node->free_index) {\n            do {\n                node = node->next;\n            }\n            while (free_index < node->free_index);\n\n",
                    "rendered": {
                      "text": "        node = active->next;\n        if (free_index < node->free_index) {\n            do {\n                node = node->next;\n            }\n            while (free_index < node->free_index);\n\n",
                      "markdown": "`        node = active->next;\n        if (free_index < node->free_index) {\n            do {\n                node = node->next;\n            }\n            while (free_index < node->free_index);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/memory/unix/apr_pools.c"
                },
                "region": {
                  "startLine": 1279,
                  "startColumn": 7,
                  "endLine": 1279,
                  "endColumn": 13,
                  "snippet": {
                    "text": "                                BOUNDARY_SIZE) - BOUNDARY_SIZE) >> BOUNDARY_INDEX;\n\n        active->free_index = (apr_uint32_t)free_index;\n        node = active->next;\n        if (free_index < node->free_index) {\n            do {\n                node = node->next;\n",
                    "rendered": {
                      "text": "                                BOUNDARY_SIZE) - BOUNDARY_SIZE) >> BOUNDARY_INDEX;\n\n        active->free_index = (apr_uint32_t)free_index;\n        node = active->next;\n        if (free_index < node->free_index) {\n            do {\n                node = node->next;\n",
                      "markdown": "`                                BOUNDARY_SIZE) - BOUNDARY_SIZE) >> BOUNDARY_INDEX;\n\n        active->free_index = (apr_uint32_t)free_index;\n        node = active->next;\n        if (free_index < node->free_index) {\n            do {\n                node = node->next;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/memory/unix/apr_pools.c"
                },
                "region": {
                  "startLine": 1265,
                  "startColumn": 3,
                  "endLine": 1265,
                  "endColumn": 9,
                  "snippet": {
                    "text": "    if (size < APR_PSPRINTF_MIN_STRINGSIZE)\n        size = APR_PSPRINTF_MIN_STRINGSIZE;\n\n    node = active->next;\n    if (!ps->got_a_new_node && size <= node_free_space(node)) {\n\n        list_remove(node);\n",
                    "rendered": {
                      "text": "    if (size < APR_PSPRINTF_MIN_STRINGSIZE)\n        size = APR_PSPRINTF_MIN_STRINGSIZE;\n\n    node = active->next;\n    if (!ps->got_a_new_node && size <= node_free_space(node)) {\n\n        list_remove(node);\n",
                      "markdown": "`    if (size < APR_PSPRINTF_MIN_STRINGSIZE)\n        size = APR_PSPRINTF_MIN_STRINGSIZE;\n\n    node = active->next;\n    if (!ps->got_a_new_node && size <= node_free_space(node)) {\n\n        list_remove(node);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/memory/unix/apr_pools.c"
                },
                "region": {
                  "startLine": 886,
                  "startColumn": 7,
                  "endLine": 886,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        goto have_mem;\n\n    do {\n        node = node->next;\n    }\n    while (free_index < node->free_index);\n\n",
                    "rendered": {
                      "text": "        goto have_mem;\n\n    do {\n        node = node->next;\n    }\n    while (free_index < node->free_index);\n\n",
                      "markdown": "`        goto have_mem;\n\n    do {\n        node = node->next;\n    }\n    while (free_index < node->free_index);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/memory/unix/apr_pools.c"
                },
                "region": {
                  "startLine": 881,
                  "startColumn": 3,
                  "endLine": 881,
                  "endColumn": 9,
                  "snippet": {
                    "text": "                            BOUNDARY_SIZE) - BOUNDARY_SIZE) >> BOUNDARY_INDEX;\n\n    active->free_index = (apr_uint32_t)free_index;\n    node = active->next;\n    if (free_index >= node->free_index)\n        goto have_mem;\n\n",
                    "rendered": {
                      "text": "                            BOUNDARY_SIZE) - BOUNDARY_SIZE) >> BOUNDARY_INDEX;\n\n    active->free_index = (apr_uint32_t)free_index;\n    node = active->next;\n    if (free_index >= node->free_index)\n        goto have_mem;\n\n",
                      "markdown": "`                            BOUNDARY_SIZE) - BOUNDARY_SIZE) >> BOUNDARY_INDEX;\n\n    active->free_index = (apr_uint32_t)free_index;\n    node = active->next;\n    if (free_index >= node->free_index)\n        goto have_mem;\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/memory/unix/apr_pools.c"
                },
                "region": {
                  "startLine": 854,
                  "startColumn": 3,
                  "endLine": 854,
                  "endColumn": 9,
                  "snippet": {
                    "text": "        goto have_mem;\n    }\n\n    node = active->next;\n    if (size <= node_free_space(node)) {\n        list_remove(node);\n    }\n",
                    "rendered": {
                      "text": "        goto have_mem;\n    }\n\n    node = active->next;\n    if (size <= node_free_space(node)) {\n        list_remove(node);\n    }\n",
                      "markdown": "`        goto have_mem;\n    }\n\n    node = active->next;\n    if (size <= node_free_space(node)) {\n        list_remove(node);\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/memory/unix/apr_pools.c"
                },
                "region": {
                  "startLine": 483,
                  "startColumn": 7,
                  "endLine": 483,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    allocator_unlock(allocator);\n\n    while (freelist != NULL) {\n        node = freelist;\n        freelist = node->next;\n#if APR_ALLOCATOR_USES_MMAP\n        munmap((char *)node - GUARDPAGE_SIZE,\n",
                    "rendered": {
                      "text": "    allocator_unlock(allocator);\n\n    while (freelist != NULL) {\n        node = freelist;\n        freelist = node->next;\n#if APR_ALLOCATOR_USES_MMAP\n        munmap((char *)node - GUARDPAGE_SIZE,\n",
                      "markdown": "`    allocator_unlock(allocator);\n\n    while (freelist != NULL) {\n        node = freelist;\n        freelist = node->next;\n#if APR_ALLOCATOR_USES_MMAP\n        munmap((char *)node - GUARDPAGE_SIZE,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/memory/unix/apr_pools.c"
                },
                "region": {
                  "startLine": 404,
                  "startColumn": 3,
                  "endLine": 404,
                  "endColumn": 9,
                  "snippet": {
                    "text": "        return NULL;\n\n#if APR_ALLOCATOR_GUARD_PAGES\n    node = (apr_memnode_t *)((char *)node + GUARDPAGE_SIZE);\n    if (mprotect(node, size, PROT_READ|PROT_WRITE) != 0) {\n        munmap((char *)node - GUARDPAGE_SIZE, size + 2 * GUARDPAGE_SIZE);\n        return NULL;\n",
                    "rendered": {
                      "text": "        return NULL;\n\n#if APR_ALLOCATOR_GUARD_PAGES\n    node = (apr_memnode_t *)((char *)node + GUARDPAGE_SIZE);\n    if (mprotect(node, size, PROT_READ|PROT_WRITE) != 0) {\n        munmap((char *)node - GUARDPAGE_SIZE, size + 2 * GUARDPAGE_SIZE);\n        return NULL;\n",
                      "markdown": "`        return NULL;\n\n#if APR_ALLOCATOR_GUARD_PAGES\n    node = (apr_memnode_t *)((char *)node + GUARDPAGE_SIZE);\n    if (mprotect(node, size, PROT_READ|PROT_WRITE) != 0) {\n        munmap((char *)node - GUARDPAGE_SIZE, size + 2 * GUARDPAGE_SIZE);\n        return NULL;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/get-version.sh"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 30,
                  "endLine": 35,
                  "endColumn": 35,
                  "snippet": {
                    "text": "  # Yes, ${minor}:${patch}:${minor} is correct due to libtool idiocy.\n  echo ${minor}:${patch}:${minor}\nelse\n  echo \"ERROR: unknown version CMD ($1)\"\n  exit 1\nfi\n",
                    "rendered": {
                      "text": "  # Yes, ${minor}:${patch}:${minor} is correct due to libtool idiocy.\n  echo ${minor}:${patch}:${minor}\nelse\n  echo \"ERROR: unknown version CMD ($1)\"\n  exit 1\nfi\n",
                      "markdown": "`  # Yes, ${minor}:${patch}:${minor} is correct due to libtool idiocy.\n  echo ${minor}:${patch}:${minor}\nelse\n  echo \"ERROR: unknown version CMD ($1)\"\n  exit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/get-version.sh"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 15,
                  "endLine": 16,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\nif test $# != 3; then\n  echo \"USAGE: $0 CMD VERSION_HEADER PREFIX\"\n  echo \"  where CMD is one of: all, major, libtool\"\n  exit 1\nfi\n\n",
                    "rendered": {
                      "text": "\nif test $# != 3; then\n  echo \"USAGE: $0 CMD VERSION_HEADER PREFIX\"\n  echo \"  where CMD is one of: all, major, libtool\"\n  exit 1\nfi\n\n",
                      "markdown": "`\nif test $# != 3; then\n  echo \"USAGE: $0 CMD VERSION_HEADER PREFIX\"\n  echo \"  where CMD is one of: all, major, libtool\"\n  exit 1\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/get-version.sh"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 17,
                  "endLine": 15,
                  "endColumn": 22,
                  "snippet": {
                    "text": "#\n\nif test $# != 3; then\n  echo \"USAGE: $0 CMD VERSION_HEADER PREFIX\"\n  echo \"  where CMD is one of: all, major, libtool\"\n  exit 1\nfi\n",
                    "rendered": {
                      "text": "#\n\nif test $# != 3; then\n  echo \"USAGE: $0 CMD VERSION_HEADER PREFIX\"\n  echo \"  where CMD is one of: all, major, libtool\"\n  exit 1\nfi\n",
                      "markdown": "`#\n\nif test $# != 3; then\n  echo \"USAGE: $0 CMD VERSION_HEADER PREFIX\"\n  echo \"  where CMD is one of: all, major, libtool\"\n  exit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/get-version.sh"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 9,
                  "endLine": 6,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# extract version numbers from a header file\n#\n# USAGE: get-version.sh CMD VERSION_HEADER PREFIX\n#   where CMD is one of: all, major, libtool\n#   where PREFIX is the prefix to {MAJOR|MINOR|PATCH}_VERSION defines\n#\n#   get-version.sh all returns a dotted version number\n",
                    "rendered": {
                      "text": "# extract version numbers from a header file\n#\n# USAGE: get-version.sh CMD VERSION_HEADER PREFIX\n#   where CMD is one of: all, major, libtool\n#   where PREFIX is the prefix to {MAJOR|MINOR|PATCH}_VERSION defines\n#\n#   get-version.sh all returns a dotted version number\n",
                      "markdown": "`# extract version numbers from a header file\n#\n# USAGE: get-version.sh CMD VERSION_HEADER PREFIX\n#   where CMD is one of: all, major, libtool\n#   where PREFIX is the prefix to {MAJOR|MINOR|PATCH}_VERSION defines\n#\n#   get-version.sh all returns a dotted version number\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/get-version.sh"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 23,
                  "endLine": 5,
                  "endColumn": 28,
                  "snippet": {
                    "text": "#\n# extract version numbers from a header file\n#\n# USAGE: get-version.sh CMD VERSION_HEADER PREFIX\n#   where CMD is one of: all, major, libtool\n#   where PREFIX is the prefix to {MAJOR|MINOR|PATCH}_VERSION defines\n#\n",
                    "rendered": {
                      "text": "#\n# extract version numbers from a header file\n#\n# USAGE: get-version.sh CMD VERSION_HEADER PREFIX\n#   where CMD is one of: all, major, libtool\n#   where PREFIX is the prefix to {MAJOR|MINOR|PATCH}_VERSION defines\n#\n",
                      "markdown": "`#\n# extract version numbers from a header file\n#\n# USAGE: get-version.sh CMD VERSION_HEADER PREFIX\n#   where CMD is one of: all, major, libtool\n#   where PREFIX is the prefix to {MAJOR|MINOR|PATCH}_VERSION defines\n#\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/NOTICE"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 8,
                  "endLine": 9,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\nPortions of this software were developed at the National Center\nfor Supercomputing Applications (NCSA) at the University of\nIllinois at Urbana-Champaign.\n\nThis software contains code derived from the RSA Data Security\nInc. MD5 Message-Digest Algorithm.\n",
                    "rendered": {
                      "text": "\nPortions of this software were developed at the National Center\nfor Supercomputing Applications (NCSA) at the University of\nIllinois at Urbana-Champaign.\n\nThis software contains code derived from the RSA Data Security\nInc. MD5 Message-Digest Algorithm.\n",
                      "markdown": "`\nPortions of this software were developed at the National Center\nfor Supercomputing Applications (NCSA) at the University of\nIllinois at Urbana-Champaign.\n\nThis software contains code derived from the RSA Data Security\nInc. MD5 Message-Digest Algorithm.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/NOTICE"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 38,
                  "endLine": 8,
                  "endColumn": 42,
                  "snippet": {
                    "text": "The Apache Software Foundation (http://www.apache.org/).\n\nPortions of this software were developed at the National Center\nfor Supercomputing Applications (NCSA) at the University of\nIllinois at Urbana-Champaign.\n\nThis software contains code derived from the RSA Data Security\n",
                    "rendered": {
                      "text": "The Apache Software Foundation (http://www.apache.org/).\n\nPortions of this software were developed at the National Center\nfor Supercomputing Applications (NCSA) at the University of\nIllinois at Urbana-Champaign.\n\nThis software contains code derived from the RSA Data Security\n",
                      "markdown": "`The Apache Software Foundation (http://www.apache.org/).\n\nPortions of this software were developed at the National Center\nfor Supercomputing Applications (NCSA) at the University of\nIllinois at Urbana-Champaign.\n\nThis software contains code derived from the RSA Data Security\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/NOTICE"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 40,
                  "endLine": 7,
                  "endColumn": 44,
                  "snippet": {
                    "text": "This product includes software developed at\nThe Apache Software Foundation (http://www.apache.org/).\n\nPortions of this software were developed at the National Center\nfor Supercomputing Applications (NCSA) at the University of\nIllinois at Urbana-Champaign.\n\n",
                    "rendered": {
                      "text": "This product includes software developed at\nThe Apache Software Foundation (http://www.apache.org/).\n\nPortions of this software were developed at the National Center\nfor Supercomputing Applications (NCSA) at the University of\nIllinois at Urbana-Champaign.\n\n",
                      "markdown": "`This product includes software developed at\nThe Apache Software Foundation (http://www.apache.org/).\n\nPortions of this software were developed at the National Center\nfor Supercomputing Applications (NCSA) at the University of\nIllinois at Urbana-Champaign.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/NOTICE"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 40,
                  "endLine": 5,
                  "snippet": {
                    "text": "Apache Portable Runtime\nCopyright 2024 The Apache Software Foundation.\n\nThis product includes software developed at\nThe Apache Software Foundation (http://www.apache.org/).\n\nPortions of this software were developed at the National Center\nfor Supercomputing Applications (NCSA) at the University of\n",
                    "rendered": {
                      "text": "Apache Portable Runtime\nCopyright 2024 The Apache Software Foundation.\n\nThis product includes software developed at\nThe Apache Software Foundation (http://www.apache.org/).\n\nPortions of this software were developed at the National Center\nfor Supercomputing Applications (NCSA) at the University of\n",
                      "markdown": "`Apache Portable Runtime\nCopyright 2024 The Apache Software Foundation.\n\nThis product includes software developed at\nThe Apache Software Foundation (http://www.apache.org/).\n\nPortions of this software were developed at the National Center\nfor Supercomputing Applications (NCSA) at the University of\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/buckets/apr_buckets_alloc.c"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 7,
                  "endLine": 198,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        if (!memnode) {\n            return NULL;\n        }\n        node = (node_header_t *)memnode->first_avail;\n        node->alloc = list;\n        node->memnode = memnode;\n        node->size = size;\n",
                    "rendered": {
                      "text": "        if (!memnode) {\n            return NULL;\n        }\n        node = (node_header_t *)memnode->first_avail;\n        node->alloc = list;\n        node->memnode = memnode;\n        node->size = size;\n",
                      "markdown": "`        if (!memnode) {\n            return NULL;\n        }\n        node = (node_header_t *)memnode->first_avail;\n        node->alloc = list;\n        node->memnode = memnode;\n        node->size = size;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/buckets/apr_buckets_alloc.c"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 11,
                  "endLine": 185,
                  "endColumn": 17,
                  "snippet": {
                    "text": "                APR_VALGRIND_NOACCESS(active->first_avail,\n                                      active->endp - active->first_avail);\n            }\n            node = (node_header_t *)active->first_avail;\n            APR_VALGRIND_UNDEFINED(node, SMALL_NODE_SIZE);\n            node->alloc = list;\n            node->memnode = active;\n",
                    "rendered": {
                      "text": "                APR_VALGRIND_NOACCESS(active->first_avail,\n                                      active->endp - active->first_avail);\n            }\n            node = (node_header_t *)active->first_avail;\n            APR_VALGRIND_UNDEFINED(node, SMALL_NODE_SIZE);\n            node->alloc = list;\n            node->memnode = active;\n",
                      "markdown": "`                APR_VALGRIND_NOACCESS(active->first_avail,\n                                      active->endp - active->first_avail);\n            }\n            node = (node_header_t *)active->first_avail;\n            APR_VALGRIND_UNDEFINED(node, SMALL_NODE_SIZE);\n            node->alloc = list;\n            node->memnode = active;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/buckets/apr_buckets_alloc.c"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 11,
                  "endLine": 166,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    size = in_size + SIZEOF_NODE_HEADER_T;\n    if (size <= SMALL_NODE_SIZE) {\n        if (list->freelist) {\n            node = list->freelist;\n            list->freelist = node->next;\n            APR_VALGRIND_UNDEFINED((char *)node + SIZEOF_NODE_HEADER_T,\n                                   SMALL_NODE_SIZE - SIZEOF_NODE_HEADER_T);\n",
                    "rendered": {
                      "text": "    size = in_size + SIZEOF_NODE_HEADER_T;\n    if (size <= SMALL_NODE_SIZE) {\n        if (list->freelist) {\n            node = list->freelist;\n            list->freelist = node->next;\n            APR_VALGRIND_UNDEFINED((char *)node + SIZEOF_NODE_HEADER_T,\n                                   SMALL_NODE_SIZE - SIZEOF_NODE_HEADER_T);\n",
                      "markdown": "`    size = in_size + SIZEOF_NODE_HEADER_T;\n    if (size <= SMALL_NODE_SIZE) {\n        if (list->freelist) {\n            node = list->freelist;\n            list->freelist = node->next;\n            APR_VALGRIND_UNDEFINED((char *)node + SIZEOF_NODE_HEADER_T,\n                                   SMALL_NODE_SIZE - SIZEOF_NODE_HEADER_T);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/jose/apr_jose_decode.c"
                },
                "region": {
                  "startLine": 1677,
                  "startColumn": 56,
                  "endLine": 1677,
                  "endColumn": 60,
                  "snippet": {
                    "text": "        char buf[1024];\n        apr_strerror(status, buf, sizeof(buf));\n        apr_errprintf(&(*jose)->result, pool, NULL, 0,\n                \"Syntax error: JOSE JSON decoding failed at character %\" APR_OFF_T_FMT \": %s\",\n                offset, buf);\n    }\n\n",
                    "rendered": {
                      "text": "        char buf[1024];\n        apr_strerror(status, buf, sizeof(buf));\n        apr_errprintf(&(*jose)->result, pool, NULL, 0,\n                \"Syntax error: JOSE JSON decoding failed at character %\" APR_OFF_T_FMT \": %s\",\n                offset, buf);\n    }\n\n",
                      "markdown": "`        char buf[1024];\n        apr_strerror(status, buf, sizeof(buf));\n        apr_errprintf(&(*jose)->result, pool, NULL, 0,\n                \"Syntax error: JOSE JSON decoding failed at character %\" APR_OFF_T_FMT \": %s\",\n                offset, buf);\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/jose/apr_jose_decode.c"
                },
                "region": {
                  "startLine": 1272,
                  "startColumn": 66,
                  "endLine": 1272,
                  "endColumn": 70,
                  "snippet": {
                    "text": "            char buf[1024];\n            apr_strerror(status, buf, sizeof(buf));\n            apr_errprintf(&(*jose)->result, pool, NULL, 0,\n                    \"Syntax error: JWE 'protected' decoding failed at %\" APR_OFF_T_FMT \": %s\",\n                    offset, buf);\n\n            return status;\n",
                    "rendered": {
                      "text": "            char buf[1024];\n            apr_strerror(status, buf, sizeof(buf));\n            apr_errprintf(&(*jose)->result, pool, NULL, 0,\n                    \"Syntax error: JWE 'protected' decoding failed at %\" APR_OFF_T_FMT \": %s\",\n                    offset, buf);\n\n            return status;\n",
                      "markdown": "`            char buf[1024];\n            apr_strerror(status, buf, sizeof(buf));\n            apr_errprintf(&(*jose)->result, pool, NULL, 0,\n                    \"Syntax error: JWE 'protected' decoding failed at %\" APR_OFF_T_FMT \": %s\",\n                    offset, buf);\n\n            return status;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/jose/apr_jose_decode.c"
                },
                "region": {
                  "startLine": 735,
                  "startColumn": 58,
                  "endLine": 735,
                  "endColumn": 62,
                  "snippet": {
                    "text": "        char buf[1024];\n        apr_strerror(status, buf, sizeof(buf));\n        apr_errprintf(&(*jose)->result, pool, NULL, 0,\n                \"Syntax error: JOSE header decoding failed at %\" APR_OFF_T_FMT \": %s\",\n                offset, buf);\n\n        return status;\n",
                    "rendered": {
                      "text": "        char buf[1024];\n        apr_strerror(status, buf, sizeof(buf));\n        apr_errprintf(&(*jose)->result, pool, NULL, 0,\n                \"Syntax error: JOSE header decoding failed at %\" APR_OFF_T_FMT \": %s\",\n                offset, buf);\n\n        return status;\n",
                      "markdown": "`        char buf[1024];\n        apr_strerror(status, buf, sizeof(buf));\n        apr_errprintf(&(*jose)->result, pool, NULL, 0,\n                \"Syntax error: JOSE header decoding failed at %\" APR_OFF_T_FMT \": %s\",\n                offset, buf);\n\n        return status;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/jose/apr_jose_decode.c"
                },
                "region": {
                  "startLine": 716,
                  "startColumn": 68,
                  "endLine": 716,
                  "endColumn": 72,
                  "snippet": {
                    "text": "            &phs.len);\n    if (!phs.text) {\n        apr_errprintf(&(*jose)->result, pool, NULL, 0,\n                \"Syntax error: JOSE header base64url decoding failed at %\" APR_SIZE_T_FMT \"\",\n                phs.len);\n\n        return APR_BADCH;\n",
                    "rendered": {
                      "text": "            &phs.len);\n    if (!phs.text) {\n        apr_errprintf(&(*jose)->result, pool, NULL, 0,\n                \"Syntax error: JOSE header base64url decoding failed at %\" APR_SIZE_T_FMT \"\",\n                phs.len);\n\n        return APR_BADCH;\n",
                      "markdown": "`            &phs.len);\n    if (!phs.text) {\n        apr_errprintf(&(*jose)->result, pool, NULL, 0,\n                \"Syntax error: JOSE header base64url decoding failed at %\" APR_SIZE_T_FMT \"\",\n                phs.len);\n\n        return APR_BADCH;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/jose/apr_jose_decode.c"
                },
                "region": {
                  "startLine": 622,
                  "startColumn": 64,
                  "endLine": 622,
                  "endColumn": 68,
                  "snippet": {
                    "text": "            dot - left, APR_ENCODE_BASE64URL, &jwe->encryption->tag.len);\n    if (!jwe->encryption->tag.data) {\n        apr_errprintf(&(*jose)->result, pool, NULL, 0,\n                \"Syntax error: JWE tag base64url decoding failed at %\" APR_SIZE_T_FMT \"\",\n                jwe->encryption->tag.len);\n\n        return APR_BADCH;\n",
                    "rendered": {
                      "text": "            dot - left, APR_ENCODE_BASE64URL, &jwe->encryption->tag.len);\n    if (!jwe->encryption->tag.data) {\n        apr_errprintf(&(*jose)->result, pool, NULL, 0,\n                \"Syntax error: JWE tag base64url decoding failed at %\" APR_SIZE_T_FMT \"\",\n                jwe->encryption->tag.len);\n\n        return APR_BADCH;\n",
                      "markdown": "`            dot - left, APR_ENCODE_BASE64URL, &jwe->encryption->tag.len);\n    if (!jwe->encryption->tag.data) {\n        apr_errprintf(&(*jose)->result, pool, NULL, 0,\n                \"Syntax error: JWE tag base64url decoding failed at %\" APR_SIZE_T_FMT \"\",\n                jwe->encryption->tag.len);\n\n        return APR_BADCH;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/jose/apr_jose_decode.c"
                },
                "region": {
                  "startLine": 609,
                  "startColumn": 71,
                  "endLine": 609,
                  "endColumn": 75,
                  "snippet": {
                    "text": "            dot - left, APR_ENCODE_BASE64URL, &jwe->encryption->cipher.len);\n    if (!jwe->encryption->cipher.data) {\n        apr_errprintf(&(*jose)->result, pool, NULL, 0,\n                \"Syntax error: JWE ciphertext base64url decoding failed at %\" APR_SIZE_T_FMT \"\",\n                jwe->encryption->cipher.len);\n\n        return APR_BADCH;\n",
                    "rendered": {
                      "text": "            dot - left, APR_ENCODE_BASE64URL, &jwe->encryption->cipher.len);\n    if (!jwe->encryption->cipher.data) {\n        apr_errprintf(&(*jose)->result, pool, NULL, 0,\n                \"Syntax error: JWE ciphertext base64url decoding failed at %\" APR_SIZE_T_FMT \"\",\n                jwe->encryption->cipher.len);\n\n        return APR_BADCH;\n",
                      "markdown": "`            dot - left, APR_ENCODE_BASE64URL, &jwe->encryption->cipher.len);\n    if (!jwe->encryption->cipher.data) {\n        apr_errprintf(&(*jose)->result, pool, NULL, 0,\n                \"Syntax error: JWE ciphertext base64url decoding failed at %\" APR_SIZE_T_FMT \"\",\n                jwe->encryption->cipher.len);\n\n        return APR_BADCH;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/jose/apr_jose_decode.c"
                },
                "region": {
                  "startLine": 589,
                  "startColumn": 63,
                  "endLine": 589,
                  "endColumn": 67,
                  "snippet": {
                    "text": "            dot - left, APR_ENCODE_BASE64URL, &jwe->encryption->iv.len);\n    if (!jwe->encryption->iv.data) {\n        apr_errprintf(&(*jose)->result, pool, NULL, 0,\n                \"Syntax error: JWE iv base64url decoding failed at %\" APR_SIZE_T_FMT \"\",\n                                        jwe->encryption->iv.len);\n        return APR_BADCH;\n    }\n",
                    "rendered": {
                      "text": "            dot - left, APR_ENCODE_BASE64URL, &jwe->encryption->iv.len);\n    if (!jwe->encryption->iv.data) {\n        apr_errprintf(&(*jose)->result, pool, NULL, 0,\n                \"Syntax error: JWE iv base64url decoding failed at %\" APR_SIZE_T_FMT \"\",\n                                        jwe->encryption->iv.len);\n        return APR_BADCH;\n    }\n",
                      "markdown": "`            dot - left, APR_ENCODE_BASE64URL, &jwe->encryption->iv.len);\n    if (!jwe->encryption->iv.data) {\n        apr_errprintf(&(*jose)->result, pool, NULL, 0,\n                \"Syntax error: JWE iv base64url decoding failed at %\" APR_SIZE_T_FMT \"\",\n                                        jwe->encryption->iv.len);\n        return APR_BADCH;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/jose/apr_jose_decode.c"
                },
                "region": {
                  "startLine": 570,
                  "startColumn": 65,
                  "endLine": 570,
                  "endColumn": 69,
                  "snippet": {
                    "text": "            dot - left, APR_ENCODE_BASE64URL, &jwe->recipient->ekey.len);\n    if (!jwe->recipient->ekey.data) {\n        apr_errprintf(&(*jose)->result, pool, NULL, 0,\n                \"Syntax error: JWE ekey base64url decoding failed at %\" APR_SIZE_T_FMT \"\",\n                jwe->recipient->ekey.len);\n        return APR_BADCH;\n    }\n",
                    "rendered": {
                      "text": "            dot - left, APR_ENCODE_BASE64URL, &jwe->recipient->ekey.len);\n    if (!jwe->recipient->ekey.data) {\n        apr_errprintf(&(*jose)->result, pool, NULL, 0,\n                \"Syntax error: JWE ekey base64url decoding failed at %\" APR_SIZE_T_FMT \"\",\n                jwe->recipient->ekey.len);\n        return APR_BADCH;\n    }\n",
                      "markdown": "`            dot - left, APR_ENCODE_BASE64URL, &jwe->recipient->ekey.len);\n    if (!jwe->recipient->ekey.data) {\n        apr_errprintf(&(*jose)->result, pool, NULL, 0,\n                \"Syntax error: JWE ekey base64url decoding failed at %\" APR_SIZE_T_FMT \"\",\n                jwe->recipient->ekey.len);\n        return APR_BADCH;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/jose/apr_jose_decode.c"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 62,
                  "endLine": 217,
                  "endColumn": 66,
                  "snippet": {
                    "text": "        char buf[1024];\n        apr_strerror(status, buf, sizeof(buf));\n        apr_errprintf(&(*jose)->result, pool, NULL, 0,\n                \"Syntax error: JWS 'protected' decoding failed at %\" APR_OFF_T_FMT \": %s\",\n                offset, buf);\n\n        return status;\n",
                    "rendered": {
                      "text": "        char buf[1024];\n        apr_strerror(status, buf, sizeof(buf));\n        apr_errprintf(&(*jose)->result, pool, NULL, 0,\n                \"Syntax error: JWS 'protected' decoding failed at %\" APR_OFF_T_FMT \": %s\",\n                offset, buf);\n\n        return status;\n",
                      "markdown": "`        char buf[1024];\n        apr_strerror(status, buf, sizeof(buf));\n        apr_errprintf(&(*jose)->result, pool, NULL, 0,\n                \"Syntax error: JWS 'protected' decoding failed at %\" APR_OFF_T_FMT \": %s\",\n                offset, buf);\n\n        return status;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/jose/apr_jose_decode.c"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 50,
                  "endLine": 146,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        char buf[1024];\n        apr_strerror(status, buf, sizeof(buf));\n        apr_errprintf(&(*jose)->result, pool, NULL, 0,\n                \"Syntax error: JWT decoding failed at offset %\" APR_OFF_T_FMT \": %s\",\n                offset, buf);\n\n        return status;\n",
                    "rendered": {
                      "text": "        char buf[1024];\n        apr_strerror(status, buf, sizeof(buf));\n        apr_errprintf(&(*jose)->result, pool, NULL, 0,\n                \"Syntax error: JWT decoding failed at offset %\" APR_OFF_T_FMT \": %s\",\n                offset, buf);\n\n        return status;\n",
                      "markdown": "`        char buf[1024];\n        apr_strerror(status, buf, sizeof(buf));\n        apr_errprintf(&(*jose)->result, pool, NULL, 0,\n                \"Syntax error: JWT decoding failed at offset %\" APR_OFF_T_FMT \": %s\",\n                offset, buf);\n\n        return status;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/jose/apr_jose_decode.c"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 51,
                  "endLine": 104,
                  "endColumn": 55,
                  "snippet": {
                    "text": "        char buf[1024];\n        apr_strerror(status, buf, sizeof(buf));\n        apr_errprintf(&(*jose)->result, pool, NULL, 0,\n                \"Syntax error: JWKS decoding failed at offset %\" APR_OFF_T_FMT \": %s\",\n                offset, buf);\n\n        return status;\n",
                    "rendered": {
                      "text": "        char buf[1024];\n        apr_strerror(status, buf, sizeof(buf));\n        apr_errprintf(&(*jose)->result, pool, NULL, 0,\n                \"Syntax error: JWKS decoding failed at offset %\" APR_OFF_T_FMT \": %s\",\n                offset, buf);\n\n        return status;\n",
                      "markdown": "`        char buf[1024];\n        apr_strerror(status, buf, sizeof(buf));\n        apr_errprintf(&(*jose)->result, pool, NULL, 0,\n                \"Syntax error: JWKS decoding failed at offset %\" APR_OFF_T_FMT \": %s\",\n                offset, buf);\n\n        return status;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/jose/apr_jose_decode.c"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 50,
                  "endLine": 68,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        char buf[1024];\n        apr_strerror(status, buf, sizeof(buf));\n        apr_errprintf(&(*jose)->result, pool, NULL, 0,\n                \"Syntax error: JWK decoding failed at offset %\" APR_OFF_T_FMT \": %s\",\n                                        offset, buf);\n\n        return status;\n",
                    "rendered": {
                      "text": "        char buf[1024];\n        apr_strerror(status, buf, sizeof(buf));\n        apr_errprintf(&(*jose)->result, pool, NULL, 0,\n                \"Syntax error: JWK decoding failed at offset %\" APR_OFF_T_FMT \": %s\",\n                                        offset, buf);\n\n        return status;\n",
                      "markdown": "`        char buf[1024];\n        apr_strerror(status, buf, sizeof(buf));\n        apr_errprintf(&(*jose)->result, pool, NULL, 0,\n                \"Syntax error: JWK decoding failed at offset %\" APR_OFF_T_FMT \": %s\",\n                                        offset, buf);\n\n        return status;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/ldap/apr_ldap.c"
                },
                "region": {
                  "startLine": 1976,
                  "startColumn": 11,
                  "endLine": 1976,
                  "endColumn": 19,
                  "snippet": {
                    "text": "        /*\n         * ldap_simple_bind() is deprecated, so use ldap_sasl_bind() instead. In this\n         * mode mechanism is null, the username is passed in the dn, and the\n         * password is passed as a buffer to cred.\n         */\n\n        err->rc = ldap_sasl_bind(ldap->ld, dn, LDAP_SASL_SIMPLE, &cred,\n",
                    "rendered": {
                      "text": "        /*\n         * ldap_simple_bind() is deprecated, so use ldap_sasl_bind() instead. In this\n         * mode mechanism is null, the username is passed in the dn, and the\n         * password is passed as a buffer to cred.\n         */\n\n        err->rc = ldap_sasl_bind(ldap->ld, dn, LDAP_SASL_SIMPLE, &cred,\n",
                      "markdown": "`        /*\n         * ldap_simple_bind() is deprecated, so use ldap_sasl_bind() instead. In this\n         * mode mechanism is null, the username is passed in the dn, and the\n         * password is passed as a buffer to cred.\n         */\n\n        err->rc = ldap_sasl_bind(ldap->ld, dn, LDAP_SASL_SIMPLE, &cred,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/ldap/apr_ldap.c"
                },
                "region": {
                  "startLine": 1957,
                  "startColumn": 30,
                  "endLine": 1957,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        }\n\n        interaction.id = APR_LDAP_INTERACT_PASS;\n        interaction.prompt = \"Password\";\n\n        payload.status = interact_cb(ldap, 0, &interaction, interact_ctx);\n\n",
                    "rendered": {
                      "text": "        }\n\n        interaction.id = APR_LDAP_INTERACT_PASS;\n        interaction.prompt = \"Password\";\n\n        payload.status = interact_cb(ldap, 0, &interaction, interact_ctx);\n\n",
                      "markdown": "`        }\n\n        interaction.id = APR_LDAP_INTERACT_PASS;\n        interaction.prompt = \"Password\";\n\n        payload.status = interact_cb(ldap, 0, &interaction, interact_ctx);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/ldap/apr_ldap.c"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 31,
                  "endLine": 321,
                  "endColumn": 39,
                  "snippet": {
                    "text": " * ON ENTRY:\n *     ld       Pointer to an LDAP control structure. (input only)\n *     binddnp  Pointer to an Application DName used for binding (in *or* out)\n *     passwdp  Pointer to the password associated with the DName (in *or* out)\n *     methodp  Pointer to the Auth method (output only)\n *     freeit   Flag to indicate if this is a lookup or a free request (input only)\n */\n",
                    "rendered": {
                      "text": " * ON ENTRY:\n *     ld       Pointer to an LDAP control structure. (input only)\n *     binddnp  Pointer to an Application DName used for binding (in *or* out)\n *     passwdp  Pointer to the password associated with the DName (in *or* out)\n *     methodp  Pointer to the Auth method (output only)\n *     freeit   Flag to indicate if this is a lookup or a free request (input only)\n */\n",
                      "markdown": "` * ON ENTRY:\n *     ld       Pointer to an LDAP control structure. (input only)\n *     binddnp  Pointer to an Application DName used for binding (in *or* out)\n *     passwdp  Pointer to the password associated with the DName (in *or* out)\n *     methodp  Pointer to the Auth method (output only)\n *     freeit   Flag to indicate if this is a lookup or a free request (input only)\n */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/ldap/apr_ldap.c"
                },
                "region": {
                  "startLine": 565,
                  "startColumn": 22,
                  "endLine": 565,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        default:\n            result->rc = -1;\n            result->reason = \"LDAP: The OpenLDAP SDK only understands the \"\n                \"PEM (BASE64) file type.\";\n            break;\n        }\n        if (result->rc != LDAP_SUCCESS) {\n",
                    "rendered": {
                      "text": "        default:\n            result->rc = -1;\n            result->reason = \"LDAP: The OpenLDAP SDK only understands the \"\n                \"PEM (BASE64) file type.\";\n            break;\n        }\n        if (result->rc != LDAP_SUCCESS) {\n",
                      "markdown": "`        default:\n            result->rc = -1;\n            result->reason = \"LDAP: The OpenLDAP SDK only understands the \"\n                \"PEM (BASE64) file type.\";\n            break;\n        }\n        if (result->rc != LDAP_SUCCESS) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/ldap/apr_ldap.c"
                },
                "region": {
                  "startLine": 1010,
                  "startColumn": 22,
                  "endLine": 1010,
                  "endColumn": 31,
                  "snippet": {
                    "text": "         * XXX: synchronous ldap function calls with asynchronous calls and using\n         * XXX: ldap_result() with a timeout.\n         */\n        struct timeval timeout = {0};\n\n        timeout.tv_sec = apr_time_sec(invalue->timeout);\n        timeout.tv_usec = apr_time_usec(invalue->timeout);\n",
                    "rendered": {
                      "text": "         * XXX: synchronous ldap function calls with asynchronous calls and using\n         * XXX: ldap_result() with a timeout.\n         */\n        struct timeval timeout = {0};\n\n        timeout.tv_sec = apr_time_sec(invalue->timeout);\n        timeout.tv_usec = apr_time_usec(invalue->timeout);\n",
                      "markdown": "`         * XXX: synchronous ldap function calls with asynchronous calls and using\n         * XXX: ldap_result() with a timeout.\n         */\n        struct timeval timeout = {0};\n\n        timeout.tv_sec = apr_time_sec(invalue->timeout);\n        timeout.tv_usec = apr_time_usec(invalue->timeout);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/ldap/apr_ldap.c"
                },
                "region": {
                  "startLine": 792,
                  "startColumn": 22,
                  "endLine": 792,
                  "endColumn": 31,
                  "snippet": {
                    "text": "         * XXX: synchronous ldap function calls with asynchronous calls and using\n         * XXX: ldap_result() with a timeout.\n         */\n        struct timeval timeout = {0};\n\n        rc = ldap_get_option(ldap ? ldap->ld : NULL, LDAP_OPT_TIMEOUT, &timeout);\n\n",
                    "rendered": {
                      "text": "         * XXX: synchronous ldap function calls with asynchronous calls and using\n         * XXX: ldap_result() with a timeout.\n         */\n        struct timeval timeout = {0};\n\n        rc = ldap_get_option(ldap ? ldap->ld : NULL, LDAP_OPT_TIMEOUT, &timeout);\n\n",
                      "markdown": "`         * XXX: synchronous ldap function calls with asynchronous calls and using\n         * XXX: ldap_result() with a timeout.\n         */\n        struct timeval timeout = {0};\n\n        rc = ldap_get_option(ldap ? ldap->ld : NULL, LDAP_OPT_TIMEOUT, &timeout);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/ldap/apr_ldap.c"
                },
                "region": {
                  "startLine": 476,
                  "startColumn": 13,
                  "endLine": 476,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        }\n    }\n    else if (tls == APR_LDAP_SSL) {\n        ULONG ul = (ULONG) LDAP_OPT_ON;\n        result->rc = ldap_set_option(ldap, LDAP_OPT_SSL, &ul);\n        if (result->rc != LDAP_SUCCESS) {\n            result->reason = \"LDAP: an attempt to set LDAP_OPT_SSL on \"\n",
                    "rendered": {
                      "text": "        }\n    }\n    else if (tls == APR_LDAP_SSL) {\n        ULONG ul = (ULONG) LDAP_OPT_ON;\n        result->rc = ldap_set_option(ldap, LDAP_OPT_SSL, &ul);\n        if (result->rc != LDAP_SUCCESS) {\n            result->reason = \"LDAP: an attempt to set LDAP_OPT_SSL on \"\n",
                      "markdown": "`        }\n    }\n    else if (tls == APR_LDAP_SSL) {\n        ULONG ul = (ULONG) LDAP_OPT_ON;\n        result->rc = ldap_set_option(ldap, LDAP_OPT_SSL, &ul);\n        if (result->rc != LDAP_SUCCESS) {\n            result->reason = \"LDAP: an attempt to set LDAP_OPT_SSL on \"\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/ldap/apr_ldap.c"
                },
                "region": {
                  "startLine": 467,
                  "startColumn": 13,
                  "endLine": 467,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    /* Microsoft SDK */\n#if APR_HAS_MICROSOFT_LDAPSDK\n    if (tls == APR_LDAP_NONE) {\n        ULONG ul = (ULONG) LDAP_OPT_OFF;\n        result->rc = ldap_set_option(ldap, LDAP_OPT_SSL, &ul);\n        if (result->rc != LDAP_SUCCESS) {\n            result->reason = \"LDAP: an attempt to set LDAP_OPT_SSL off \"\n",
                    "rendered": {
                      "text": "    /* Microsoft SDK */\n#if APR_HAS_MICROSOFT_LDAPSDK\n    if (tls == APR_LDAP_NONE) {\n        ULONG ul = (ULONG) LDAP_OPT_OFF;\n        result->rc = ldap_set_option(ldap, LDAP_OPT_SSL, &ul);\n        if (result->rc != LDAP_SUCCESS) {\n            result->reason = \"LDAP: an attempt to set LDAP_OPT_SSL off \"\n",
                      "markdown": "`    /* Microsoft SDK */\n#if APR_HAS_MICROSOFT_LDAPSDK\n    if (tls == APR_LDAP_NONE) {\n        ULONG ul = (ULONG) LDAP_OPT_OFF;\n        result->rc = ldap_set_option(ldap, LDAP_OPT_SSL, &ul);\n        if (result->rc != LDAP_SUCCESS) {\n            result->reason = \"LDAP: an attempt to set LDAP_OPT_SSL off \"\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/passwd/apr_getpass.c"
                },
                "region": {
                  "startLine": 240,
                  "startColumn": 23,
                  "endLine": 240,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#elif defined(HAVE_GETPASS)\n    char *pw_got = getpass(prompt);\n#else /* use the replacement implementation above */\n    char *pw_got = get_password(prompt);\n#endif\n\n    if (!pw_got)\n",
                    "rendered": {
                      "text": "#elif defined(HAVE_GETPASS)\n    char *pw_got = getpass(prompt);\n#else /* use the replacement implementation above */\n    char *pw_got = get_password(prompt);\n#endif\n\n    if (!pw_got)\n",
                      "markdown": "`#elif defined(HAVE_GETPASS)\n    char *pw_got = getpass(prompt);\n#else /* use the replacement implementation above */\n    char *pw_got = get_password(prompt);\n#endif\n\n    if (!pw_got)\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/passwd/apr_getpass.c"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 30,
                  "endLine": 228,
                  "endColumn": 38,
                  "snippet": {
                    "text": " * smaller than our own.\n */\n\nAPR_DECLARE(apr_status_t) apr_password_get(const char *prompt, char *pwbuf, apr_size_t *bufsiz)\n{\n    apr_status_t rv = APR_SUCCESS;\n#if defined(HAVE_GETPASS_R)\n",
                    "rendered": {
                      "text": " * smaller than our own.\n */\n\nAPR_DECLARE(apr_status_t) apr_password_get(const char *prompt, char *pwbuf, apr_size_t *bufsiz)\n{\n    apr_status_t rv = APR_SUCCESS;\n#if defined(HAVE_GETPASS_R)\n",
                      "markdown": "` * smaller than our own.\n */\n\nAPR_DECLARE(apr_status_t) apr_password_get(const char *prompt, char *pwbuf, apr_size_t *bufsiz)\n{\n    apr_status_t rv = APR_SUCCESS;\n#if defined(HAVE_GETPASS_R)\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/passwd/apr_getpass.c"
                },
                "region": {
                  "startLine": 214,
                  "startColumn": 57,
                  "endLine": 214,
                  "endColumn": 65,
                  "snippet": {
                    "text": "#endif /* no getpass or getpassphrase or getpass_r */\n\n/*\n * Use the OS getpass() routine (or our own) to obtain a password from\n * the input stream.\n *\n * Exit values:\n",
                    "rendered": {
                      "text": "#endif /* no getpass or getpassphrase or getpass_r */\n\n/*\n * Use the OS getpass() routine (or our own) to obtain a password from\n * the input stream.\n *\n * Exit values:\n",
                      "markdown": "`#endif /* no getpass or getpassphrase or getpass_r */\n\n/*\n * Use the OS getpass() routine (or our own) to obtain a password from\n * the input stream.\n *\n * Exit values:\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/passwd/apr_getpass.c"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 20,
                  "endLine": 206,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n    attr.c_lflag |= ECHO;\n    tcsetattr(STDIN_FILENO, TCSANOW, &attr);\n    return (char*) &password;\n}\n\n#endif /* no getchar or _getch */\n",
                    "rendered": {
                      "text": "\n    attr.c_lflag |= ECHO;\n    tcsetattr(STDIN_FILENO, TCSANOW, &attr);\n    return (char*) &password;\n}\n\n#endif /* no getchar or _getch */\n",
                      "markdown": "`\n    attr.c_lflag |= ECHO;\n    tcsetattr(STDIN_FILENO, TCSANOW, &attr);\n    return (char*) &password;\n}\n\n#endif /* no getchar or _getch */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/passwd/apr_getpass.c"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 8,
                  "endLine": 201,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    password[n] = '\\0';\n    printf(\"\\n\");\n    if (n > (MAX_STRING_LEN - 1)) {\n        password[MAX_STRING_LEN - 1] = '\\0';\n    }\n\n    attr.c_lflag |= ECHO;\n",
                    "rendered": {
                      "text": "    password[n] = '\\0';\n    printf(\"\\n\");\n    if (n > (MAX_STRING_LEN - 1)) {\n        password[MAX_STRING_LEN - 1] = '\\0';\n    }\n\n    attr.c_lflag |= ECHO;\n",
                      "markdown": "`    password[n] = '\\0';\n    printf(\"\\n\");\n    if (n > (MAX_STRING_LEN - 1)) {\n        password[MAX_STRING_LEN - 1] = '\\0';\n    }\n\n    attr.c_lflag |= ECHO;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/passwd/apr_getpass.c"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 4,
                  "endLine": 198,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        }\n    }\n\n    password[n] = '\\0';\n    printf(\"\\n\");\n    if (n > (MAX_STRING_LEN - 1)) {\n        password[MAX_STRING_LEN - 1] = '\\0';\n",
                    "rendered": {
                      "text": "        }\n    }\n\n    password[n] = '\\0';\n    printf(\"\\n\");\n    if (n > (MAX_STRING_LEN - 1)) {\n        password[MAX_STRING_LEN - 1] = '\\0';\n",
                      "markdown": "`        }\n    }\n\n    password[n] = '\\0';\n    printf(\"\\n\");\n    if (n > (MAX_STRING_LEN - 1)) {\n        password[MAX_STRING_LEN - 1] = '\\0';\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/passwd/apr_getpass.c"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 62,
                  "endLine": 188,
                  "endColumn": 70,
                  "snippet": {
                    "text": "    if (tcsetattr(STDIN_FILENO, TCSAFLUSH, &attr) != 0)\n        return NULL;\n    while ((password[n] = getchar()) != '\\n') {\n        if (n < sizeof(password) - 1 && password[n] >= ' ' && password[n] <= '~') {\n            n++;\n        } else {\n            fprintf(stderr,\"\\n\");\n",
                    "rendered": {
                      "text": "    if (tcsetattr(STDIN_FILENO, TCSAFLUSH, &attr) != 0)\n        return NULL;\n    while ((password[n] = getchar()) != '\\n') {\n        if (n < sizeof(password) - 1 && password[n] >= ' ' && password[n] <= '~') {\n            n++;\n        } else {\n            fprintf(stderr,\"\\n\");\n",
                      "markdown": "`    if (tcsetattr(STDIN_FILENO, TCSAFLUSH, &attr) != 0)\n        return NULL;\n    while ((password[n] = getchar()) != '\\n') {\n        if (n < sizeof(password) - 1 && password[n] >= ' ' && password[n] <= '~') {\n            n++;\n        } else {\n            fprintf(stderr,\"\\n\");\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/passwd/apr_getpass.c"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 40,
                  "endLine": 188,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    if (tcsetattr(STDIN_FILENO, TCSAFLUSH, &attr) != 0)\n        return NULL;\n    while ((password[n] = getchar()) != '\\n') {\n        if (n < sizeof(password) - 1 && password[n] >= ' ' && password[n] <= '~') {\n            n++;\n        } else {\n            fprintf(stderr,\"\\n\");\n",
                    "rendered": {
                      "text": "    if (tcsetattr(STDIN_FILENO, TCSAFLUSH, &attr) != 0)\n        return NULL;\n    while ((password[n] = getchar()) != '\\n') {\n        if (n < sizeof(password) - 1 && password[n] >= ' ' && password[n] <= '~') {\n            n++;\n        } else {\n            fprintf(stderr,\"\\n\");\n",
                      "markdown": "`    if (tcsetattr(STDIN_FILENO, TCSAFLUSH, &attr) != 0)\n        return NULL;\n    while ((password[n] = getchar()) != '\\n') {\n        if (n < sizeof(password) - 1 && password[n] >= ' ' && password[n] <= '~') {\n            n++;\n        } else {\n            fprintf(stderr,\"\\n\");\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/passwd/apr_getpass.c"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 23,
                  "endLine": 188,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    if (tcsetattr(STDIN_FILENO, TCSAFLUSH, &attr) != 0)\n        return NULL;\n    while ((password[n] = getchar()) != '\\n') {\n        if (n < sizeof(password) - 1 && password[n] >= ' ' && password[n] <= '~') {\n            n++;\n        } else {\n            fprintf(stderr,\"\\n\");\n",
                    "rendered": {
                      "text": "    if (tcsetattr(STDIN_FILENO, TCSAFLUSH, &attr) != 0)\n        return NULL;\n    while ((password[n] = getchar()) != '\\n') {\n        if (n < sizeof(password) - 1 && password[n] >= ' ' && password[n] <= '~') {\n            n++;\n        } else {\n            fprintf(stderr,\"\\n\");\n",
                      "markdown": "`    if (tcsetattr(STDIN_FILENO, TCSAFLUSH, &attr) != 0)\n        return NULL;\n    while ((password[n] = getchar()) != '\\n') {\n        if (n < sizeof(password) - 1 && password[n] >= ' ' && password[n] <= '~') {\n            n++;\n        } else {\n            fprintf(stderr,\"\\n\");\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/passwd/apr_getpass.c"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 12,
                  "endLine": 187,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n    if (tcsetattr(STDIN_FILENO, TCSAFLUSH, &attr) != 0)\n        return NULL;\n    while ((password[n] = getchar()) != '\\n') {\n        if (n < sizeof(password) - 1 && password[n] >= ' ' && password[n] <= '~') {\n            n++;\n        } else {\n",
                    "rendered": {
                      "text": "\n    if (tcsetattr(STDIN_FILENO, TCSAFLUSH, &attr) != 0)\n        return NULL;\n    while ((password[n] = getchar()) != '\\n') {\n        if (n < sizeof(password) - 1 && password[n] >= ' ' && password[n] <= '~') {\n            n++;\n        } else {\n",
                      "markdown": "`\n    if (tcsetattr(STDIN_FILENO, TCSAFLUSH, &attr) != 0)\n        return NULL;\n    while ((password[n] = getchar()) != '\\n') {\n        if (n < sizeof(password) - 1 && password[n] >= ' ' && password[n] <= '~') {\n            n++;\n        } else {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/passwd/apr_getpass.c"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 16,
                  "endLine": 176,
                  "endColumn": 24,
                  "snippet": {
                    "text": "static char *get_password(const char *prompt)\n{\n    struct termios attr;\n    static char password[MAX_STRING_LEN];\n    int n=0;\n    fputs(prompt, stderr);\n    fflush(stderr);\n",
                    "rendered": {
                      "text": "static char *get_password(const char *prompt)\n{\n    struct termios attr;\n    static char password[MAX_STRING_LEN];\n    int n=0;\n    fputs(prompt, stderr);\n    fflush(stderr);\n",
                      "markdown": "`static char *get_password(const char *prompt)\n{\n    struct termios attr;\n    static char password[MAX_STRING_LEN];\n    int n=0;\n    fputs(prompt, stderr);\n    fflush(stderr);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/passwd/apr_getpass.c"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 17,
                  "endLine": 173,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n#elif defined (HAVE_TERMIOS_H)\n\nstatic char *get_password(const char *prompt)\n{\n    struct termios attr;\n    static char password[MAX_STRING_LEN];\n",
                    "rendered": {
                      "text": "\n#elif defined (HAVE_TERMIOS_H)\n\nstatic char *get_password(const char *prompt)\n{\n    struct termios attr;\n    static char password[MAX_STRING_LEN];\n",
                      "markdown": "`\n#elif defined (HAVE_TERMIOS_H)\n\nstatic char *get_password(const char *prompt)\n{\n    struct termios attr;\n    static char password[MAX_STRING_LEN];\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/passwd/apr_getpass.c"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 11,
                  "endLine": 168,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n    fputc('\\n', stderr);\n    password[n] = '\\0';\n    return password;\n}\n\n#elif defined (HAVE_TERMIOS_H)\n",
                    "rendered": {
                      "text": "\n    fputc('\\n', stderr);\n    password[n] = '\\0';\n    return password;\n}\n\n#elif defined (HAVE_TERMIOS_H)\n",
                      "markdown": "`\n    fputc('\\n', stderr);\n    password[n] = '\\0';\n    return password;\n}\n\n#elif defined (HAVE_TERMIOS_H)\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/passwd/apr_getpass.c"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 4,
                  "endLine": 167,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    }\n\n    fputc('\\n', stderr);\n    password[n] = '\\0';\n    return password;\n}\n\n",
                    "rendered": {
                      "text": "    }\n\n    fputc('\\n', stderr);\n    password[n] = '\\0';\n    return password;\n}\n\n",
                      "markdown": "`    }\n\n    fputc('\\n', stderr);\n    password[n] = '\\0';\n    return password;\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/passwd/apr_getpass.c"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 12,
                  "endLine": 158,
                  "endColumn": 20,
                  "snippet": {
                    "text": "            n = 0;\n        }\n        else if ((n < sizeof(password) - 1) && !apr_iscntrl(ch)) {\n            password[n++] = ch;\n            fputc('*', stderr);\n        }\n        else {\n",
                    "rendered": {
                      "text": "            n = 0;\n        }\n        else if ((n < sizeof(password) - 1) && !apr_iscntrl(ch)) {\n            password[n++] = ch;\n            fputc('*', stderr);\n        }\n        else {\n",
                      "markdown": "`            n = 0;\n        }\n        else if ((n < sizeof(password) - 1) && !apr_iscntrl(ch)) {\n            password[n++] = ch;\n            fputc('*', stderr);\n        }\n        else {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/passwd/apr_getpass.c"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 29,
                  "endLine": 157,
                  "endColumn": 37,
                  "snippet": {
                    "text": "            fputs(prompt, stderr);\n            n = 0;\n        }\n        else if ((n < sizeof(password) - 1) && !apr_iscntrl(ch)) {\n            password[n++] = ch;\n            fputc('*', stderr);\n        }\n",
                    "rendered": {
                      "text": "            fputs(prompt, stderr);\n            n = 0;\n        }\n        else if ((n < sizeof(password) - 1) && !apr_iscntrl(ch)) {\n            password[n++] = ch;\n            fputc('*', stderr);\n        }\n",
                      "markdown": "`            fputs(prompt, stderr);\n            n = 0;\n        }\n        else if ((n < sizeof(password) - 1) && !apr_iscntrl(ch)) {\n            password[n++] = ch;\n            fputc('*', stderr);\n        }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/passwd/apr_getpass.c"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 12,
                  "endLine": 140,
                  "endColumn": 20,
                  "snippet": {
                    "text": "            }\n        }\n        else if ((ch == '\\b' || ch == 127) && n) /* BS/DEL */ {\n            password[--n] = '\\0';\n            fputs(\"\\b \\b\", stderr);\n        }\n        else if (ch == 3) /* CTRL+C */ {\n",
                    "rendered": {
                      "text": "            }\n        }\n        else if ((ch == '\\b' || ch == 127) && n) /* BS/DEL */ {\n            password[--n] = '\\0';\n            fputs(\"\\b \\b\", stderr);\n        }\n        else if (ch == 3) /* CTRL+C */ {\n",
                      "markdown": "`            }\n        }\n        else if ((ch == '\\b' || ch == 127) && n) /* BS/DEL */ {\n            password[--n] = '\\0';\n            fputs(\"\\b \\b\", stderr);\n        }\n        else if (ch == 3) /* CTRL+C */ {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/passwd/apr_getpass.c"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 16,
                  "endLine": 132,
                  "endColumn": 24,
                  "snippet": {
                    "text": "            ch = (ch << 4) | _getch();\n            /* Catch {DELETE}, {<--}, Num{DEL} and Num{<--} */\n            if ((ch == 0xE53 || ch == 0xE4B || ch == 0x053 || ch == 0x04b) && n) {\n                password[--n] = '\\0';\n                fputs(\"\\b \\b\", stderr);\n            }\n            else {\n",
                    "rendered": {
                      "text": "            ch = (ch << 4) | _getch();\n            /* Catch {DELETE}, {<--}, Num{DEL} and Num{<--} */\n            if ((ch == 0xE53 || ch == 0xE4B || ch == 0x053 || ch == 0x04b) && n) {\n                password[--n] = '\\0';\n                fputs(\"\\b \\b\", stderr);\n            }\n            else {\n",
                      "markdown": "`            ch = (ch << 4) | _getch();\n            /* Catch {DELETE}, {<--}, Num{DEL} and Num{<--} */\n            if ((ch == 0xE53 || ch == 0xE4B || ch == 0x053 || ch == 0x04b) && n) {\n                password[--n] = '\\0';\n                fputs(\"\\b \\b\", stderr);\n            }\n            else {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/passwd/apr_getpass.c"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 16,
                  "endLine": 116,
                  "endColumn": 24,
                  "snippet": {
                    "text": " * The only way is to use the GUI so the getpass should be implemented\n * on per-application basis.\n */\n    static char password[128];\n    int n = 0;\n    int ch;\n\n",
                    "rendered": {
                      "text": " * The only way is to use the GUI so the getpass should be implemented\n * on per-application basis.\n */\n    static char password[128];\n    int n = 0;\n    int ch;\n\n",
                      "markdown": "` * The only way is to use the GUI so the getpass should be implemented\n * on per-application basis.\n */\n    static char password[128];\n    int n = 0;\n    int ch;\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/passwd/apr_getpass.c"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 17,
                  "endLine": 110,
                  "endColumn": 25,
                  "snippet": {
                    "text": " * Windows lacks getpass().  So we'll re-implement it here.\n */\n\nstatic char *get_password(const char *prompt)\n{\n/* WCE lacks console. So the getpass is unsuported\n * The only way is to use the GUI so the getpass should be implemented\n",
                    "rendered": {
                      "text": " * Windows lacks getpass().  So we'll re-implement it here.\n */\n\nstatic char *get_password(const char *prompt)\n{\n/* WCE lacks console. So the getpass is unsuported\n * The only way is to use the GUI so the getpass should be implemented\n",
                      "markdown": "` * Windows lacks getpass().  So we'll re-implement it here.\n */\n\nstatic char *get_password(const char *prompt)\n{\n/* WCE lacks console. So the getpass is unsuported\n * The only way is to use the GUI so the getpass should be implemented\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/passwd/apr_getpass.c"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 21,
                  "endLine": 101,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    fputs(prompt, stderr);\n    fgets((char *) &password, sizeof(password), stdin);\n\n    return (char *) &password;\n}\n\n#elif defined(WIN32)\n",
                    "rendered": {
                      "text": "    fputs(prompt, stderr);\n    fgets((char *) &password, sizeof(password), stdin);\n\n    return (char *) &password;\n}\n\n#elif defined(WIN32)\n",
                      "markdown": "`    fputs(prompt, stderr);\n    fgets((char *) &password, sizeof(password), stdin);\n\n    return (char *) &password;\n}\n\n#elif defined(WIN32)\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/passwd/apr_getpass.c"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 37,
                  "endLine": 99,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    static char password[MAX_STRING_LEN];\n\n    fputs(prompt, stderr);\n    fgets((char *) &password, sizeof(password), stdin);\n\n    return (char *) &password;\n}\n",
                    "rendered": {
                      "text": "    static char password[MAX_STRING_LEN];\n\n    fputs(prompt, stderr);\n    fgets((char *) &password, sizeof(password), stdin);\n\n    return (char *) &password;\n}\n",
                      "markdown": "`    static char password[MAX_STRING_LEN];\n\n    fputs(prompt, stderr);\n    fgets((char *) &password, sizeof(password), stdin);\n\n    return (char *) &password;\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/passwd/apr_getpass.c"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 20,
                  "endLine": 99,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    static char password[MAX_STRING_LEN];\n\n    fputs(prompt, stderr);\n    fgets((char *) &password, sizeof(password), stdin);\n\n    return (char *) &password;\n}\n",
                    "rendered": {
                      "text": "    static char password[MAX_STRING_LEN];\n\n    fputs(prompt, stderr);\n    fgets((char *) &password, sizeof(password), stdin);\n\n    return (char *) &password;\n}\n",
                      "markdown": "`    static char password[MAX_STRING_LEN];\n\n    fputs(prompt, stderr);\n    fgets((char *) &password, sizeof(password), stdin);\n\n    return (char *) &password;\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/passwd/apr_getpass.c"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 16,
                  "endLine": 96,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\nstatic char *get_password(const char *prompt)\n{\n    static char password[MAX_STRING_LEN];\n\n    fputs(prompt, stderr);\n    fgets((char *) &password, sizeof(password), stdin);\n",
                    "rendered": {
                      "text": "\nstatic char *get_password(const char *prompt)\n{\n    static char password[MAX_STRING_LEN];\n\n    fputs(prompt, stderr);\n    fgets((char *) &password, sizeof(password), stdin);\n",
                      "markdown": "`\nstatic char *get_password(const char *prompt)\n{\n    static char password[MAX_STRING_LEN];\n\n    fputs(prompt, stderr);\n    fgets((char *) &password, sizeof(password), stdin);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/passwd/apr_getpass.c"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 17,
                  "endLine": 94,
                  "endColumn": 25,
                  "snippet": {
                    "text": " * issue the prompt and read the results with echo.  (Ugh).\n */\n\nstatic char *get_password(const char *prompt)\n{\n    static char password[MAX_STRING_LEN];\n\n",
                    "rendered": {
                      "text": " * issue the prompt and read the results with echo.  (Ugh).\n */\n\nstatic char *get_password(const char *prompt)\n{\n    static char password[MAX_STRING_LEN];\n\n",
                      "markdown": "` * issue the prompt and read the results with echo.  (Ugh).\n */\n\nstatic char *get_password(const char *prompt)\n{\n    static char password[MAX_STRING_LEN];\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/passwd/apr_getpass.c"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 19,
                  "endLine": 60,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n/* Disable getpass() support when PASS_MAX is defined and is \"small\",\n * for an arbitrary definition of \"small\".\n * HP-UX truncates passwords (PR49496) so we disable getpass() for\n * this platform too.\n */\n#if defined(HAVE_GETPASS) && \\\n",
                    "rendered": {
                      "text": "\n/* Disable getpass() support when PASS_MAX is defined and is \"small\",\n * for an arbitrary definition of \"small\".\n * HP-UX truncates passwords (PR49496) so we disable getpass() for\n * this platform too.\n */\n#if defined(HAVE_GETPASS) && \\\n",
                      "markdown": "`\n/* Disable getpass() support when PASS_MAX is defined and is \"small\",\n * for an arbitrary definition of \"small\".\n * HP-UX truncates passwords (PR49496) so we disable getpass() for\n * this platform too.\n */\n#if defined(HAVE_GETPASS) && \\\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/passwd/apr_getpass.c"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 62,
                  "endLine": 17,
                  "endColumn": 70,
                  "snippet": {
                    "text": " * limitations under the License.\n */\n\n/* apr_password_get.c: abstraction to provide for obtaining a password from the\n * command line in whatever way the OS supports.  In the best case, it's a\n * wrapper for the system library's getpass() routine; otherwise, we\n * use one we define ourselves.\n",
                    "rendered": {
                      "text": " * limitations under the License.\n */\n\n/* apr_password_get.c: abstraction to provide for obtaining a password from the\n * command line in whatever way the OS supports.  In the best case, it's a\n * wrapper for the system library's getpass() routine; otherwise, we\n * use one we define ourselves.\n",
                      "markdown": "` * limitations under the License.\n */\n\n/* apr_password_get.c: abstraction to provide for obtaining a password from the\n * command line in whatever way the OS supports.  In the best case, it's a\n * wrapper for the system library's getpass() routine; otherwise, we\n * use one we define ourselves.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/passwd/apr_getpass.c"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 7,
                  "endLine": 17,
                  "endColumn": 15,
                  "snippet": {
                    "text": " * limitations under the License.\n */\n\n/* apr_password_get.c: abstraction to provide for obtaining a password from the\n * command line in whatever way the OS supports.  In the best case, it's a\n * wrapper for the system library's getpass() routine; otherwise, we\n * use one we define ourselves.\n",
                    "rendered": {
                      "text": " * limitations under the License.\n */\n\n/* apr_password_get.c: abstraction to provide for obtaining a password from the\n * command line in whatever way the OS supports.  In the best case, it's a\n * wrapper for the system library's getpass() routine; otherwise, we\n * use one we define ourselves.\n",
                      "markdown": "` * limitations under the License.\n */\n\n/* apr_password_get.c: abstraction to provide for obtaining a password from the\n * command line in whatever way the OS supports.  In the best case, it's a\n * wrapper for the system library's getpass() routine; otherwise, we\n * use one we define ourselves.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/strings/apr_strings.c"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 7,
                  "endLine": 165,
                  "endColumn": 11,
                  "snippet": {
                    "text": "        }\n\n        memcpy(cp, argp, len);\n        cp += len;\n    }\n\n    va_end(adummy);\n",
                    "rendered": {
                      "text": "        }\n\n        memcpy(cp, argp, len);\n        cp += len;\n    }\n\n    va_end(adummy);\n",
                      "markdown": "`        }\n\n        memcpy(cp, argp, len);\n        cp += len;\n    }\n\n    va_end(adummy);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/strings/apr_strings.c"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 3,
                  "endLine": 149,
                  "endColumn": 7,
                  "snippet": {
                    "text": "    /* Allocate the required string */\n\n    res = (char *) apr_palloc(a, len + 1);\n    cp = res;\n\n    /* Pass two --- copy the argument strings into the result space */\n\n",
                    "rendered": {
                      "text": "    /* Allocate the required string */\n\n    res = (char *) apr_palloc(a, len + 1);\n    cp = res;\n\n    /* Pass two --- copy the argument strings into the result space */\n\n",
                      "markdown": "`    /* Allocate the required string */\n\n    res = (char *) apr_palloc(a, len + 1);\n    cp = res;\n\n    /* Pass two --- copy the argument strings into the result space */\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/strings/apr_snprintf.c"
                },
                "region": {
                  "startLine": 842,
                  "startColumn": 15,
                  "endLine": 842,
                  "endColumn": 20,
                  "snippet": {
                    "text": "                         sizeof(APR_INT64_T_FMT) - 2) == 0)) {\n                /* Need to account for trailing 'd' and null in sizeof() */\n                var_type = IS_QUAD;\n                fmt += (sizeof(APR_INT64_T_FMT) - 2);\n            }\n            else if (*fmt == 'q') {\n                var_type = IS_QUAD;\n",
                    "rendered": {
                      "text": "                         sizeof(APR_INT64_T_FMT) - 2) == 0)) {\n                /* Need to account for trailing 'd' and null in sizeof() */\n                var_type = IS_QUAD;\n                fmt += (sizeof(APR_INT64_T_FMT) - 2);\n            }\n            else if (*fmt == 'q') {\n                var_type = IS_QUAD;\n",
                      "markdown": "`                         sizeof(APR_INT64_T_FMT) - 2) == 0)) {\n                /* Need to account for trailing 'd' and null in sizeof() */\n                var_type = IS_QUAD;\n                fmt += (sizeof(APR_INT64_T_FMT) - 2);\n            }\n            else if (*fmt == 'q') {\n                var_type = IS_QUAD;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/strings/apr_snprintf.c"
                },
                "region": {
                  "startLine": 830,
                  "startColumn": 15,
                  "endLine": 830,
                  "endColumn": 20,
                  "snippet": {
                    "text": "                         sizeof(APR_OFF_T_FMT) - 2) == 0))) {\n                /* Need to account for trailing 'd' and null in sizeof() */\n                var_type = IS_QUAD;\n                fmt += (sizeof(APR_OFF_T_FMT) - 2);\n            }\n            else if ((sizeof(APR_INT64_T_FMT) == 4 &&\n                 fmt[0] == APR_INT64_T_FMT[0] &&\n",
                    "rendered": {
                      "text": "                         sizeof(APR_OFF_T_FMT) - 2) == 0))) {\n                /* Need to account for trailing 'd' and null in sizeof() */\n                var_type = IS_QUAD;\n                fmt += (sizeof(APR_OFF_T_FMT) - 2);\n            }\n            else if ((sizeof(APR_INT64_T_FMT) == 4 &&\n                 fmt[0] == APR_INT64_T_FMT[0] &&\n",
                      "markdown": "`                         sizeof(APR_OFF_T_FMT) - 2) == 0))) {\n                /* Need to account for trailing 'd' and null in sizeof() */\n                var_type = IS_QUAD;\n                fmt += (sizeof(APR_OFF_T_FMT) - 2);\n            }\n            else if ((sizeof(APR_INT64_T_FMT) == 4 &&\n                 fmt[0] == APR_INT64_T_FMT[0] &&\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/helpers/apr_rename.pl"
                },
                "region": {
                  "startLine": 22,
                  "endLine": 23,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nmy $pattern = join '|', keys %names;\n#print \"replacement pattern=$pattern\\n\";\n\nfind sub {\n    chomp;\n    return unless /\\.[ch]$/;\n    my $file = \"$File::Find::dir/$_\";\n",
                    "rendered": {
                      "text": "\nmy $pattern = join '|', keys %names;\n#print \"replacement pattern=$pattern\\n\";\n\nfind sub {\n    chomp;\n    return unless /\\.[ch]$/;\n    my $file = \"$File::Find::dir/$_\";\n",
                      "markdown": "`\nmy $pattern = join '|', keys %names;\n#print \"replacement pattern=$pattern\\n\";\n\nfind sub {\n    chomp;\n    return unless /\\.[ch]$/;\n    my $file = \"$File::Find::dir/$_\";\n`"
                    }
                  },
                  "sourceLanguage": "perl"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/helpers/apr_rename.pl"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 20,
                  "endLine": 15,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\nwhile (<DATA>) {\n    chomp;\n    my($old, $new) = grep { s/^$prefix//o } split;\n    next unless $old and $new;\n    $names{$old} = $new;\n}\n",
                    "rendered": {
                      "text": "\nwhile (<DATA>) {\n    chomp;\n    my($old, $new) = grep { s/^$prefix//o } split;\n    next unless $old and $new;\n    $names{$old} = $new;\n}\n",
                      "markdown": "`\nwhile (<DATA>) {\n    chomp;\n    my($old, $new) = grep { s/^$prefix//o } split;\n    next unless $old and $new;\n    $names{$old} = $new;\n}\n`"
                    }
                  },
                  "sourceLanguage": "perl"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/json/apr_json_decode.c"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 27,
                  "endLine": 171,
                  "endColumn": 31,
                  "snippet": {
                    "text": "                                status = APR_BADCH;\n                                goto out;\n                            }\n                            sc = (sc << 4) | d;\n                        }\n                        cp = ((cp & 0x3ff) << 10) | (sc & 0x3ff);\n                        if ((cp >= 0xd800 && cp < 0xe000) || (cp >= 0x110000)) {\n",
                    "rendered": {
                      "text": "                                status = APR_BADCH;\n                                goto out;\n                            }\n                            sc = (sc << 4) | d;\n                        }\n                        cp = ((cp & 0x3ff) << 10) | (sc & 0x3ff);\n                        if ((cp >= 0xd800 && cp < 0xe000) || (cp >= 0x110000)) {\n",
                      "markdown": "`                                status = APR_BADCH;\n                                goto out;\n                            }\n                            sc = (sc << 4) | d;\n                        }\n                        cp = ((cp & 0x3ff) << 10) | (sc & 0x3ff);\n                        if ((cp >= 0xd800 && cp < 0xe000) || (cp >= 0x110000)) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/json/apr_json_decode.c"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 27,
                  "endLine": 156,
                  "endColumn": 31,
                  "snippet": {
                    "text": "                    }\n                    if (cp >= 0xd800 && cp < 0xdc00) {\n                        /* surrogate pair */\n                        int sc = 0;\n                        if (p + 6 > e) {\n                            status = APR_EOF;\n                            goto out;\n",
                    "rendered": {
                      "text": "                    }\n                    if (cp >= 0xd800 && cp < 0xdc00) {\n                        /* surrogate pair */\n                        int sc = 0;\n                        if (p + 6 > e) {\n                            status = APR_EOF;\n                            goto out;\n",
                      "markdown": "`                    }\n                    if (cp >= 0xd800 && cp < 0xdc00) {\n                        /* surrogate pair */\n                        int sc = 0;\n                        if (p + 6 > e) {\n                            status = APR_EOF;\n                            goto out;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/json/apr_json_decode.c"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 44,
                  "endLine": 179,
                  "endColumn": 48,
                  "snippet": {
                    "text": "                            goto out;\n                        }\n                    }\n                    else if (cp >= 0xdc00 && cp < 0xe000) {\n                        status = APR_BADCH;\n                        goto out;\n                    }\n",
                    "rendered": {
                      "text": "                            goto out;\n                        }\n                    }\n                    else if (cp >= 0xdc00 && cp < 0xe000) {\n                        status = APR_BADCH;\n                        goto out;\n                    }\n",
                      "markdown": "`                            goto out;\n                        }\n                    }\n                    else if (cp >= 0xdc00 && cp < 0xe000) {\n                        status = APR_BADCH;\n                        goto out;\n                    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/json/apr_json_decode.c"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 44,
                  "endLine": 174,
                  "endColumn": 48,
                  "snippet": {
                    "text": "                            sc = (sc << 4) | d;\n                        }\n                        cp = ((cp & 0x3ff) << 10) | (sc & 0x3ff);\n                        if ((cp >= 0xd800 && cp < 0xe000) || (cp >= 0x110000)) {\n                            status = APR_BADCH;\n                            goto out;\n                        }\n",
                    "rendered": {
                      "text": "                            sc = (sc << 4) | d;\n                        }\n                        cp = ((cp & 0x3ff) << 10) | (sc & 0x3ff);\n                        if ((cp >= 0xd800 && cp < 0xe000) || (cp >= 0x110000)) {\n                            status = APR_BADCH;\n                            goto out;\n                        }\n",
                      "markdown": "`                            sc = (sc << 4) | d;\n                        }\n                        cp = ((cp & 0x3ff) << 10) | (sc & 0x3ff);\n                        if ((cp >= 0xd800 && cp < 0xe000) || (cp >= 0x110000)) {\n                            status = APR_BADCH;\n                            goto out;\n                        }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/json/apr_json_decode.c"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 23,
                  "endLine": 173,
                  "endColumn": 27,
                  "snippet": {
                    "text": "                            }\n                            sc = (sc << 4) | d;\n                        }\n                        cp = ((cp & 0x3ff) << 10) | (sc & 0x3ff);\n                        if ((cp >= 0xd800 && cp < 0xe000) || (cp >= 0x110000)) {\n                            status = APR_BADCH;\n                            goto out;\n",
                    "rendered": {
                      "text": "                            }\n                            sc = (sc << 4) | d;\n                        }\n                        cp = ((cp & 0x3ff) << 10) | (sc & 0x3ff);\n                        if ((cp >= 0xd800 && cp < 0xe000) || (cp >= 0x110000)) {\n                            status = APR_BADCH;\n                            goto out;\n",
                      "markdown": "`                            }\n                            sc = (sc << 4) | d;\n                        }\n                        cp = ((cp & 0x3ff) << 10) | (sc & 0x3ff);\n                        if ((cp >= 0xd800 && cp < 0xe000) || (cp >= 0x110000)) {\n                            status = APR_BADCH;\n                            goto out;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/json/apr_json_decode.c"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 39,
                  "endLine": 154,
                  "endColumn": 43,
                  "snippet": {
                    "text": "                        }\n                        cp = (cp << 4) | d;\n                    }\n                    if (cp >= 0xd800 && cp < 0xdc00) {\n                        /* surrogate pair */\n                        int sc = 0;\n                        if (p + 6 > e) {\n",
                    "rendered": {
                      "text": "                        }\n                        cp = (cp << 4) | d;\n                    }\n                    if (cp >= 0xd800 && cp < 0xdc00) {\n                        /* surrogate pair */\n                        int sc = 0;\n                        if (p + 6 > e) {\n",
                      "markdown": "`                        }\n                        cp = (cp << 4) | d;\n                    }\n                    if (cp >= 0xd800 && cp < 0xdc00) {\n                        /* surrogate pair */\n                        int sc = 0;\n                        if (p + 6 > e) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/json/apr_json_decode.c"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 23,
                  "endLine": 152,
                  "endColumn": 27,
                  "snippet": {
                    "text": "                            status = APR_BADCH;\n                            goto out;\n                        }\n                        cp = (cp << 4) | d;\n                    }\n                    if (cp >= 0xd800 && cp < 0xdc00) {\n                        /* surrogate pair */\n",
                    "rendered": {
                      "text": "                            status = APR_BADCH;\n                            goto out;\n                        }\n                        cp = (cp << 4) | d;\n                    }\n                    if (cp >= 0xd800 && cp < 0xdc00) {\n                        /* surrogate pair */\n",
                      "markdown": "`                            status = APR_BADCH;\n                            goto out;\n                        }\n                        cp = (cp << 4) | d;\n                    }\n                    if (cp >= 0xd800 && cp < 0xdc00) {\n                        /* surrogate pair */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/json/apr_json_decode.c"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 29,
                  "endLine": 145,
                  "endColumn": 33,
                  "snippet": {
                    "text": "            case 'u':\n                /* THIS IS REQUIRED TO BE A 4 DIGIT HEX NUMBER */\n                {\n                    int i, d, cp = 0;\n                    for (i = 0, p++; i < 4 && p < e; i++, p++) {\n                        d = hex_to_int(*p);\n                        if (d < 0) {\n",
                    "rendered": {
                      "text": "            case 'u':\n                /* THIS IS REQUIRED TO BE A 4 DIGIT HEX NUMBER */\n                {\n                    int i, d, cp = 0;\n                    for (i = 0, p++; i < 4 && p < e; i++, p++) {\n                        d = hex_to_int(*p);\n                        if (d < 0) {\n",
                      "markdown": "`            case 'u':\n                /* THIS IS REQUIRED TO BE A 4 DIGIT HEX NUMBER */\n                {\n                    int i, d, cp = 0;\n                    for (i = 0, p++; i < 4 && p < e; i++, p++) {\n                        d = hex_to_int(*p);\n                        if (d < 0) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testbuckets.c"
                },
                "region": {
                  "startLine": 449,
                  "startColumn": 42,
                  "endLine": 449,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n    e = apr_brigade_insert_file(bb, f, 0, bignum, p);\n\n    ABTS_ASSERT(tc, \"inserted file was not at end of brigade\",\n                e == APR_BRIGADE_LAST(bb));\n\n    /* check that the total size of inserted buckets is equal to the\n",
                    "rendered": {
                      "text": "\n    e = apr_brigade_insert_file(bb, f, 0, bignum, p);\n\n    ABTS_ASSERT(tc, \"inserted file was not at end of brigade\",\n                e == APR_BRIGADE_LAST(bb));\n\n    /* check that the total size of inserted buckets is equal to the\n",
                      "markdown": "`\n    e = apr_brigade_insert_file(bb, f, 0, bignum, p);\n\n    ABTS_ASSERT(tc, \"inserted file was not at end of brigade\",\n                e == APR_BRIGADE_LAST(bb));\n\n    /* check that the total size of inserted buckets is equal to the\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testmd5.c"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 13,
                  "endLine": 77,
                  "endColumn": 77,
                  "snippet": {
                    "text": "                             \"abcdefghijklmnopqrstuvwxyz01234\"\n                             \"abcdefghijklmnopqrstuvwxyz01234_\";\n        const char *sum =\n            \"\\x93\\x17\\x22\\x78\\xee\\x30\\x82\\xb3\\xeb\\x95\\x33\\xec\\xea\\x78\\xb7\\x89\";\n        unsigned char digest[APR_MD5_DIGESTSIZE];\n        unsigned int i;\n\n",
                    "rendered": {
                      "text": "                             \"abcdefghijklmnopqrstuvwxyz01234\"\n                             \"abcdefghijklmnopqrstuvwxyz01234_\";\n        const char *sum =\n            \"\\x93\\x17\\x22\\x78\\xee\\x30\\x82\\xb3\\xeb\\x95\\x33\\xec\\xea\\x78\\xb7\\x89\";\n        unsigned char digest[APR_MD5_DIGESTSIZE];\n        unsigned int i;\n\n",
                      "markdown": "`                             \"abcdefghijklmnopqrstuvwxyz01234\"\n                             \"abcdefghijklmnopqrstuvwxyz01234_\";\n        const char *sum =\n            \"\\x93\\x17\\x22\\x78\\xee\\x30\\x82\\xb3\\xeb\\x95\\x33\\xec\\xea\\x78\\xb7\\x89\";\n        unsigned char digest[APR_MD5_DIGESTSIZE];\n        unsigned int i;\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testmd5.c"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 6,
                  "endLine": 46,
                  "endColumn": 70,
                  "snippet": {
                    "text": "     \"01234567890aBcDeFASDFGHJKLPOIUYTR\"\n     \"POIUYTREWQZXCVBN  LLLLLLLLLLLLLLL\"\n     \"1\",\n     \"\\xd1\\xa1\\xc0\\x97\\x8a\\x60\\xbb\\xfb\\x2a\\x25\\x46\\x9d\\xa5\\xae\\xd0\\xb0\"}\n};\n\nstatic int num_sums = sizeof(md5sums) / sizeof(md5sums[0]);\n",
                    "rendered": {
                      "text": "     \"01234567890aBcDeFASDFGHJKLPOIUYTR\"\n     \"POIUYTREWQZXCVBN  LLLLLLLLLLLLLLL\"\n     \"1\",\n     \"\\xd1\\xa1\\xc0\\x97\\x8a\\x60\\xbb\\xfb\\x2a\\x25\\x46\\x9d\\xa5\\xae\\xd0\\xb0\"}\n};\n\nstatic int num_sums = sizeof(md5sums) / sizeof(md5sums[0]);\n",
                      "markdown": "`     \"01234567890aBcDeFASDFGHJKLPOIUYTR\"\n     \"POIUYTREWQZXCVBN  LLLLLLLLLLLLLLL\"\n     \"1\",\n     \"\\xd1\\xa1\\xc0\\x97\\x8a\\x60\\xbb\\xfb\\x2a\\x25\\x46\\x9d\\xa5\\xae\\xd0\\xb0\"}\n};\n\nstatic int num_sums = sizeof(md5sums) / sizeof(md5sums[0]);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testmd5.c"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 6,
                  "endLine": 40,
                  "endColumn": 70,
                  "snippet": {
                    "text": "     \"\\xd4\\x1a\\x06\\x2c\\xc5\\xfd\\x6f\\x24\\x67\\x68\\x56\\x7c\\x40\\x8a\\xd5\\x69\"},\n    {\"111111118888888888888888*******%%%%%%%%%%#####\"\n     \"142134u8097289720432098409289nkjlfkjlmn,m..   \",\n     \"\\xb6\\xea\\x5b\\xe8\\xca\\x45\\x8a\\x33\\xf0\\xf1\\x84\\x6f\\xf9\\x65\\xa8\\xe1\"},\n    {\"01234567890aBcDeFASDFGHJKLPOIUYTR\"\n     \"POIUYTREWQZXCVBN  LLLLLLLLLLLLLLL\"\n     \"01234567890aBcDeFASDFGHJKLPOIUYTR\"\n",
                    "rendered": {
                      "text": "     \"\\xd4\\x1a\\x06\\x2c\\xc5\\xfd\\x6f\\x24\\x67\\x68\\x56\\x7c\\x40\\x8a\\xd5\\x69\"},\n    {\"111111118888888888888888*******%%%%%%%%%%#####\"\n     \"142134u8097289720432098409289nkjlfkjlmn,m..   \",\n     \"\\xb6\\xea\\x5b\\xe8\\xca\\x45\\x8a\\x33\\xf0\\xf1\\x84\\x6f\\xf9\\x65\\xa8\\xe1\"},\n    {\"01234567890aBcDeFASDFGHJKLPOIUYTR\"\n     \"POIUYTREWQZXCVBN  LLLLLLLLLLLLLLL\"\n     \"01234567890aBcDeFASDFGHJKLPOIUYTR\"\n",
                      "markdown": "`     \"\\xd4\\x1a\\x06\\x2c\\xc5\\xfd\\x6f\\x24\\x67\\x68\\x56\\x7c\\x40\\x8a\\xd5\\x69\"},\n    {\"111111118888888888888888*******%%%%%%%%%%#####\"\n     \"142134u8097289720432098409289nkjlfkjlmn,m..   \",\n     \"\\xb6\\xea\\x5b\\xe8\\xca\\x45\\x8a\\x33\\xf0\\xf1\\x84\\x6f\\xf9\\x65\\xa8\\xe1\"},\n    {\"01234567890aBcDeFASDFGHJKLPOIUYTR\"\n     \"POIUYTREWQZXCVBN  LLLLLLLLLLLLLLL\"\n     \"01234567890aBcDeFASDFGHJKLPOIUYTR\"\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testmd5.c"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 6,
                  "endLine": 37,
                  "endColumn": 70,
                  "snippet": {
                    "text": "     \"\\xa5\\x25\\x8a\\x89\\x11\\xb2\\x9d\\x1f\\x81\\x75\\x96\\x3b\\x60\\x94\\x49\\xc0\"},\n    {\"01234567890aBcDeFASDFGHJKLPOIUYTR\"\n     \"POIUYTREWQZXCVBN  LLLLLLLLLLLLLLL\",\n     \"\\xd4\\x1a\\x06\\x2c\\xc5\\xfd\\x6f\\x24\\x67\\x68\\x56\\x7c\\x40\\x8a\\xd5\\x69\"},\n    {\"111111118888888888888888*******%%%%%%%%%%#####\"\n     \"142134u8097289720432098409289nkjlfkjlmn,m..   \",\n     \"\\xb6\\xea\\x5b\\xe8\\xca\\x45\\x8a\\x33\\xf0\\xf1\\x84\\x6f\\xf9\\x65\\xa8\\xe1\"},\n",
                    "rendered": {
                      "text": "     \"\\xa5\\x25\\x8a\\x89\\x11\\xb2\\x9d\\x1f\\x81\\x75\\x96\\x3b\\x60\\x94\\x49\\xc0\"},\n    {\"01234567890aBcDeFASDFGHJKLPOIUYTR\"\n     \"POIUYTREWQZXCVBN  LLLLLLLLLLLLLLL\",\n     \"\\xd4\\x1a\\x06\\x2c\\xc5\\xfd\\x6f\\x24\\x67\\x68\\x56\\x7c\\x40\\x8a\\xd5\\x69\"},\n    {\"111111118888888888888888*******%%%%%%%%%%#####\"\n     \"142134u8097289720432098409289nkjlfkjlmn,m..   \",\n     \"\\xb6\\xea\\x5b\\xe8\\xca\\x45\\x8a\\x33\\xf0\\xf1\\x84\\x6f\\xf9\\x65\\xa8\\xe1\"},\n",
                      "markdown": "`     \"\\xa5\\x25\\x8a\\x89\\x11\\xb2\\x9d\\x1f\\x81\\x75\\x96\\x3b\\x60\\x94\\x49\\xc0\"},\n    {\"01234567890aBcDeFASDFGHJKLPOIUYTR\"\n     \"POIUYTREWQZXCVBN  LLLLLLLLLLLLLLL\",\n     \"\\xd4\\x1a\\x06\\x2c\\xc5\\xfd\\x6f\\x24\\x67\\x68\\x56\\x7c\\x40\\x8a\\xd5\\x69\"},\n    {\"111111118888888888888888*******%%%%%%%%%%#####\"\n     \"142134u8097289720432098409289nkjlfkjlmn,m..   \",\n     \"\\xb6\\xea\\x5b\\xe8\\xca\\x45\\x8a\\x33\\xf0\\xf1\\x84\\x6f\\xf9\\x65\\xa8\\xe1\"},\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testmd5.c"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 6,
                  "endLine": 34,
                  "endColumn": 70,
                  "snippet": {
                    "text": "} md5sums[] =\n{\n    {\"Jeff was here!\",\n     \"\\xa5\\x25\\x8a\\x89\\x11\\xb2\\x9d\\x1f\\x81\\x75\\x96\\x3b\\x60\\x94\\x49\\xc0\"},\n    {\"01234567890aBcDeFASDFGHJKLPOIUYTR\"\n     \"POIUYTREWQZXCVBN  LLLLLLLLLLLLLLL\",\n     \"\\xd4\\x1a\\x06\\x2c\\xc5\\xfd\\x6f\\x24\\x67\\x68\\x56\\x7c\\x40\\x8a\\xd5\\x69\"},\n",
                    "rendered": {
                      "text": "} md5sums[] =\n{\n    {\"Jeff was here!\",\n     \"\\xa5\\x25\\x8a\\x89\\x11\\xb2\\x9d\\x1f\\x81\\x75\\x96\\x3b\\x60\\x94\\x49\\xc0\"},\n    {\"01234567890aBcDeFASDFGHJKLPOIUYTR\"\n     \"POIUYTREWQZXCVBN  LLLLLLLLLLLLLLL\",\n     \"\\xd4\\x1a\\x06\\x2c\\xc5\\xfd\\x6f\\x24\\x67\\x68\\x56\\x7c\\x40\\x8a\\xd5\\x69\"},\n",
                      "markdown": "`} md5sums[] =\n{\n    {\"Jeff was here!\",\n     \"\\xa5\\x25\\x8a\\x89\\x11\\xb2\\x9d\\x1f\\x81\\x75\\x96\\x3b\\x60\\x94\\x49\\xc0\"},\n    {\"01234567890aBcDeFASDFGHJKLPOIUYTR\"\n     \"POIUYTREWQZXCVBN  LLLLLLLLLLLLLLL\",\n     \"\\xd4\\x1a\\x06\\x2c\\xc5\\xfd\\x6f\\x24\\x67\\x68\\x56\\x7c\\x40\\x8a\\xd5\\x69\"},\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000805"
          },
          "message": {
            "text": "Backdoor: Long Binary Strings",
            "id": "BD000805"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testmd5.c"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 13,
                  "endLine": 77,
                  "endColumn": 77,
                  "snippet": {
                    "text": "                             \"abcdefghijklmnopqrstuvwxyz01234\"\n                             \"abcdefghijklmnopqrstuvwxyz01234_\";\n        const char *sum =\n            \"\\x93\\x17\\x22\\x78\\xee\\x30\\x82\\xb3\\xeb\\x95\\x33\\xec\\xea\\x78\\xb7\\x89\";\n        unsigned char digest[APR_MD5_DIGESTSIZE];\n        unsigned int i;\n\n",
                    "rendered": {
                      "text": "                             \"abcdefghijklmnopqrstuvwxyz01234\"\n                             \"abcdefghijklmnopqrstuvwxyz01234_\";\n        const char *sum =\n            \"\\x93\\x17\\x22\\x78\\xee\\x30\\x82\\xb3\\xeb\\x95\\x33\\xec\\xea\\x78\\xb7\\x89\";\n        unsigned char digest[APR_MD5_DIGESTSIZE];\n        unsigned int i;\n\n",
                      "markdown": "`                             \"abcdefghijklmnopqrstuvwxyz01234\"\n                             \"abcdefghijklmnopqrstuvwxyz01234_\";\n        const char *sum =\n            \"\\x93\\x17\\x22\\x78\\xee\\x30\\x82\\xb3\\xeb\\x95\\x33\\xec\\xea\\x78\\xb7\\x89\";\n        unsigned char digest[APR_MD5_DIGESTSIZE];\n        unsigned int i;\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000805"
          },
          "message": {
            "text": "Backdoor: Long Binary Strings",
            "id": "BD000805"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testmd5.c"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 6,
                  "endLine": 46,
                  "endColumn": 70,
                  "snippet": {
                    "text": "     \"01234567890aBcDeFASDFGHJKLPOIUYTR\"\n     \"POIUYTREWQZXCVBN  LLLLLLLLLLLLLLL\"\n     \"1\",\n     \"\\xd1\\xa1\\xc0\\x97\\x8a\\x60\\xbb\\xfb\\x2a\\x25\\x46\\x9d\\xa5\\xae\\xd0\\xb0\"}\n};\n\nstatic int num_sums = sizeof(md5sums) / sizeof(md5sums[0]);\n",
                    "rendered": {
                      "text": "     \"01234567890aBcDeFASDFGHJKLPOIUYTR\"\n     \"POIUYTREWQZXCVBN  LLLLLLLLLLLLLLL\"\n     \"1\",\n     \"\\xd1\\xa1\\xc0\\x97\\x8a\\x60\\xbb\\xfb\\x2a\\x25\\x46\\x9d\\xa5\\xae\\xd0\\xb0\"}\n};\n\nstatic int num_sums = sizeof(md5sums) / sizeof(md5sums[0]);\n",
                      "markdown": "`     \"01234567890aBcDeFASDFGHJKLPOIUYTR\"\n     \"POIUYTREWQZXCVBN  LLLLLLLLLLLLLLL\"\n     \"1\",\n     \"\\xd1\\xa1\\xc0\\x97\\x8a\\x60\\xbb\\xfb\\x2a\\x25\\x46\\x9d\\xa5\\xae\\xd0\\xb0\"}\n};\n\nstatic int num_sums = sizeof(md5sums) / sizeof(md5sums[0]);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000805"
          },
          "message": {
            "text": "Backdoor: Long Binary Strings",
            "id": "BD000805"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testmd5.c"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 6,
                  "endLine": 40,
                  "endColumn": 70,
                  "snippet": {
                    "text": "     \"\\xd4\\x1a\\x06\\x2c\\xc5\\xfd\\x6f\\x24\\x67\\x68\\x56\\x7c\\x40\\x8a\\xd5\\x69\"},\n    {\"111111118888888888888888*******%%%%%%%%%%#####\"\n     \"142134u8097289720432098409289nkjlfkjlmn,m..   \",\n     \"\\xb6\\xea\\x5b\\xe8\\xca\\x45\\x8a\\x33\\xf0\\xf1\\x84\\x6f\\xf9\\x65\\xa8\\xe1\"},\n    {\"01234567890aBcDeFASDFGHJKLPOIUYTR\"\n     \"POIUYTREWQZXCVBN  LLLLLLLLLLLLLLL\"\n     \"01234567890aBcDeFASDFGHJKLPOIUYTR\"\n",
                    "rendered": {
                      "text": "     \"\\xd4\\x1a\\x06\\x2c\\xc5\\xfd\\x6f\\x24\\x67\\x68\\x56\\x7c\\x40\\x8a\\xd5\\x69\"},\n    {\"111111118888888888888888*******%%%%%%%%%%#####\"\n     \"142134u8097289720432098409289nkjlfkjlmn,m..   \",\n     \"\\xb6\\xea\\x5b\\xe8\\xca\\x45\\x8a\\x33\\xf0\\xf1\\x84\\x6f\\xf9\\x65\\xa8\\xe1\"},\n    {\"01234567890aBcDeFASDFGHJKLPOIUYTR\"\n     \"POIUYTREWQZXCVBN  LLLLLLLLLLLLLLL\"\n     \"01234567890aBcDeFASDFGHJKLPOIUYTR\"\n",
                      "markdown": "`     \"\\xd4\\x1a\\x06\\x2c\\xc5\\xfd\\x6f\\x24\\x67\\x68\\x56\\x7c\\x40\\x8a\\xd5\\x69\"},\n    {\"111111118888888888888888*******%%%%%%%%%%#####\"\n     \"142134u8097289720432098409289nkjlfkjlmn,m..   \",\n     \"\\xb6\\xea\\x5b\\xe8\\xca\\x45\\x8a\\x33\\xf0\\xf1\\x84\\x6f\\xf9\\x65\\xa8\\xe1\"},\n    {\"01234567890aBcDeFASDFGHJKLPOIUYTR\"\n     \"POIUYTREWQZXCVBN  LLLLLLLLLLLLLLL\"\n     \"01234567890aBcDeFASDFGHJKLPOIUYTR\"\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000805"
          },
          "message": {
            "text": "Backdoor: Long Binary Strings",
            "id": "BD000805"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testmd5.c"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 6,
                  "endLine": 37,
                  "endColumn": 70,
                  "snippet": {
                    "text": "     \"\\xa5\\x25\\x8a\\x89\\x11\\xb2\\x9d\\x1f\\x81\\x75\\x96\\x3b\\x60\\x94\\x49\\xc0\"},\n    {\"01234567890aBcDeFASDFGHJKLPOIUYTR\"\n     \"POIUYTREWQZXCVBN  LLLLLLLLLLLLLLL\",\n     \"\\xd4\\x1a\\x06\\x2c\\xc5\\xfd\\x6f\\x24\\x67\\x68\\x56\\x7c\\x40\\x8a\\xd5\\x69\"},\n    {\"111111118888888888888888*******%%%%%%%%%%#####\"\n     \"142134u8097289720432098409289nkjlfkjlmn,m..   \",\n     \"\\xb6\\xea\\x5b\\xe8\\xca\\x45\\x8a\\x33\\xf0\\xf1\\x84\\x6f\\xf9\\x65\\xa8\\xe1\"},\n",
                    "rendered": {
                      "text": "     \"\\xa5\\x25\\x8a\\x89\\x11\\xb2\\x9d\\x1f\\x81\\x75\\x96\\x3b\\x60\\x94\\x49\\xc0\"},\n    {\"01234567890aBcDeFASDFGHJKLPOIUYTR\"\n     \"POIUYTREWQZXCVBN  LLLLLLLLLLLLLLL\",\n     \"\\xd4\\x1a\\x06\\x2c\\xc5\\xfd\\x6f\\x24\\x67\\x68\\x56\\x7c\\x40\\x8a\\xd5\\x69\"},\n    {\"111111118888888888888888*******%%%%%%%%%%#####\"\n     \"142134u8097289720432098409289nkjlfkjlmn,m..   \",\n     \"\\xb6\\xea\\x5b\\xe8\\xca\\x45\\x8a\\x33\\xf0\\xf1\\x84\\x6f\\xf9\\x65\\xa8\\xe1\"},\n",
                      "markdown": "`     \"\\xa5\\x25\\x8a\\x89\\x11\\xb2\\x9d\\x1f\\x81\\x75\\x96\\x3b\\x60\\x94\\x49\\xc0\"},\n    {\"01234567890aBcDeFASDFGHJKLPOIUYTR\"\n     \"POIUYTREWQZXCVBN  LLLLLLLLLLLLLLL\",\n     \"\\xd4\\x1a\\x06\\x2c\\xc5\\xfd\\x6f\\x24\\x67\\x68\\x56\\x7c\\x40\\x8a\\xd5\\x69\"},\n    {\"111111118888888888888888*******%%%%%%%%%%#####\"\n     \"142134u8097289720432098409289nkjlfkjlmn,m..   \",\n     \"\\xb6\\xea\\x5b\\xe8\\xca\\x45\\x8a\\x33\\xf0\\xf1\\x84\\x6f\\xf9\\x65\\xa8\\xe1\"},\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000805"
          },
          "message": {
            "text": "Backdoor: Long Binary Strings",
            "id": "BD000805"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testmd5.c"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 6,
                  "endLine": 34,
                  "endColumn": 70,
                  "snippet": {
                    "text": "} md5sums[] =\n{\n    {\"Jeff was here!\",\n     \"\\xa5\\x25\\x8a\\x89\\x11\\xb2\\x9d\\x1f\\x81\\x75\\x96\\x3b\\x60\\x94\\x49\\xc0\"},\n    {\"01234567890aBcDeFASDFGHJKLPOIUYTR\"\n     \"POIUYTREWQZXCVBN  LLLLLLLLLLLLLLL\",\n     \"\\xd4\\x1a\\x06\\x2c\\xc5\\xfd\\x6f\\x24\\x67\\x68\\x56\\x7c\\x40\\x8a\\xd5\\x69\"},\n",
                    "rendered": {
                      "text": "} md5sums[] =\n{\n    {\"Jeff was here!\",\n     \"\\xa5\\x25\\x8a\\x89\\x11\\xb2\\x9d\\x1f\\x81\\x75\\x96\\x3b\\x60\\x94\\x49\\xc0\"},\n    {\"01234567890aBcDeFASDFGHJKLPOIUYTR\"\n     \"POIUYTREWQZXCVBN  LLLLLLLLLLLLLLL\",\n     \"\\xd4\\x1a\\x06\\x2c\\xc5\\xfd\\x6f\\x24\\x67\\x68\\x56\\x7c\\x40\\x8a\\xd5\\x69\"},\n",
                      "markdown": "`} md5sums[] =\n{\n    {\"Jeff was here!\",\n     \"\\xa5\\x25\\x8a\\x89\\x11\\xb2\\x9d\\x1f\\x81\\x75\\x96\\x3b\\x60\\x94\\x49\\xc0\"},\n    {\"01234567890aBcDeFASDFGHJKLPOIUYTR\"\n     \"POIUYTREWQZXCVBN  LLLLLLLLLLLLLLL\",\n     \"\\xd4\\x1a\\x06\\x2c\\xc5\\xfd\\x6f\\x24\\x67\\x68\\x56\\x7c\\x40\\x8a\\xd5\\x69\"},\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/NWGNUtestatmc"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 25,
                  "endLine": 113,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n#\n# If this is specified, it will override VERSION value in \n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                    "rendered": {
                      "text": "\n#\n# If this is specified, it will override VERSION value in \n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                      "markdown": "`\n#\n# If this is specified, it will override VERSION value in \n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/NWGNUtestatmc"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 30,
                  "endLine": 6,
                  "endColumn": 65,
                  "snippet": {
                    "text": "#\n\n#\n# Get the 'head' of the build environment if necessary.  This includes default\n# targets and paths to tools\n#\n\n",
                    "rendered": {
                      "text": "#\n\n#\n# Get the 'head' of the build environment if necessary.  This includes default\n# targets and paths to tools\n#\n\n",
                      "markdown": "`#\n\n#\n# Get the 'head' of the build environment if necessary.  This includes default\n# targets and paths to tools\n#\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/NWGNUtestatmc"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 27,
                  "endLine": 15,
                  "endColumn": 31,
                  "snippet": {
                    "text": "endif\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                    "rendered": {
                      "text": "endif\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                      "markdown": "`endif\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/xml/NWGNUmakefile"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 25,
                  "endLine": 158,
                  "endColumn": 40,
                  "snippet": {
                    "text": "NLM_THREAD_NAME\t= \n#\n# If this is specified, it will override VERSION value in \n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                    "rendered": {
                      "text": "NLM_THREAD_NAME\t= \n#\n# If this is specified, it will override VERSION value in \n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                      "markdown": "`NLM_THREAD_NAME\t= \n#\n# If this is specified, it will override VERSION value in \n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/xml/NWGNUmakefile"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 30,
                  "endLine": 9,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\t$(EOLIST) \n\n#\n# Get the 'head' of the build environment.  This includes default targets and\n# paths to tools\n#\n\n",
                    "rendered": {
                      "text": "\t$(EOLIST) \n\n#\n# Get the 'head' of the build environment.  This includes default targets and\n# paths to tools\n#\n\n",
                      "markdown": "`\t$(EOLIST) \n\n#\n# Get the 'head' of the build environment.  This includes default targets and\n# paths to tools\n#\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/xml/NWGNUmakefile"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 27,
                  "endLine": 62,
                  "endColumn": 31,
                  "snippet": {
                    "text": "endif\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                    "rendered": {
                      "text": "endif\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                      "markdown": "`endif\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/private/apu_ldap_internal.h.in"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 23,
                  "endLine": 21,
                  "endColumn": 32,
                  "snippet": {
                    "text": "#define APU_LDAP_INTERNAL_H\n\n/*\n** The following macros control what features APRUTIL will use\n*/\n#define APR_HAVE_LDAP_SASL_INTERACTIVE_BIND @apu_have_ldap_sasl_interactive_bind@\n\n",
                    "rendered": {
                      "text": "#define APU_LDAP_INTERNAL_H\n\n/*\n** The following macros control what features APRUTIL will use\n*/\n#define APR_HAVE_LDAP_SASL_INTERACTIVE_BIND @apu_have_ldap_sasl_interactive_bind@\n\n",
                      "markdown": "`#define APU_LDAP_INTERNAL_H\n\n/*\n** The following macros control what features APRUTIL will use\n*/\n#define APR_HAVE_LDAP_SASL_INTERACTIVE_BIND @apu_have_ldap_sasl_interactive_bind@\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/private/apu_ldap_internal.h.in"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 53,
                  "endLine": 7,
                  "snippet": {
                    "text": " * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": " * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "` * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/private/apu_select_dbm.h.in"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 23,
                  "endLine": 21,
                  "endColumn": 32,
                  "snippet": {
                    "text": "#define APU_SELECT_DBM_H\n\n/*\n** The following macros control what features APRUTIL will use\n*/\n#define APU_USE_SDBM    @apu_use_sdbm@\n#define APU_USE_LMDB    @apu_use_lmdb@\n",
                    "rendered": {
                      "text": "#define APU_SELECT_DBM_H\n\n/*\n** The following macros control what features APRUTIL will use\n*/\n#define APU_USE_SDBM    @apu_use_sdbm@\n#define APU_USE_LMDB    @apu_use_lmdb@\n",
                      "markdown": "`#define APU_SELECT_DBM_H\n\n/*\n** The following macros control what features APRUTIL will use\n*/\n#define APU_USE_SDBM    @apu_use_sdbm@\n#define APU_USE_LMDB    @apu_use_lmdb@\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/private/apu_select_dbm.h.in"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 53,
                  "endLine": 7,
                  "snippet": {
                    "text": " * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": " * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "` * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/private/apu_ldap_internal.hw"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 23,
                  "endLine": 21,
                  "endColumn": 32,
                  "snippet": {
                    "text": "#define APU_LDAP_INTERNAL_H\n\n/*\n** The following macros control what features APRUTIL will use\n*/\n#define APR_HAVE_LDAP_SASL_INTERACTIVE_BIND 0\n\n",
                    "rendered": {
                      "text": "#define APU_LDAP_INTERNAL_H\n\n/*\n** The following macros control what features APRUTIL will use\n*/\n#define APR_HAVE_LDAP_SASL_INTERACTIVE_BIND 0\n\n",
                      "markdown": "`#define APU_LDAP_INTERNAL_H\n\n/*\n** The following macros control what features APRUTIL will use\n*/\n#define APR_HAVE_LDAP_SASL_INTERACTIVE_BIND 0\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/private/apu_ldap_internal.hw"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 53,
                  "endLine": 7,
                  "snippet": {
                    "text": " * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": " * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "` * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apu_want.h.in"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 53,
                  "endLine": 7,
                  "snippet": {
                    "text": " * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": " * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "` * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apu_want.hnw"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 53,
                  "endLine": 7,
                  "snippet": {
                    "text": " * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": " * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "` * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.github/workflows/windows-vcpkg.yml"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 55,
                  "endLine": 39,
                  "endColumn": 66,
                  "snippet": {
                    "text": "      with:\r\n        script: |\r\n          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');\r\n          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');\r\n\r\n    - uses: actions/checkout@v4\r\n\r\n",
                    "rendered": {
                      "text": "      with:\r\n        script: |\r\n          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');\r\n          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');\r\n\r\n    - uses: actions/checkout@v4\r\n\r\n",
                      "markdown": "`      with:\r\n        script: |\r\n          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');\r\n          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');\r\n\r\n    - uses: actions/checkout@v4\r\n\r\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.github/workflows/windows-vcpkg.yml"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 51,
                  "endLine": 38,
                  "endColumn": 62,
                  "snippet": {
                    "text": "      uses: actions/github-script@v7\r\n      with:\r\n        script: |\r\n          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');\r\n          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');\r\n\r\n    - uses: actions/checkout@v4\r\n",
                    "rendered": {
                      "text": "      uses: actions/github-script@v7\r\n      with:\r\n        script: |\r\n          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');\r\n          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');\r\n\r\n    - uses: actions/checkout@v4\r\n",
                      "markdown": "`      uses: actions/github-script@v7\r\n      with:\r\n        script: |\r\n          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');\r\n          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');\r\n\r\n    - uses: actions/checkout@v4\r\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/memcache/apr_memcache.c"
                },
                "region": {
                  "startLine": 1578,
                  "startColumn": 27,
                  "endLine": 1578,
                  "endColumn": 33,
                  "snippet": {
                    "text": "#define STAT_uptime MS_STAT \" uptime \"\n#define STAT_uptime_LEN (sizeof(STAT_uptime)-1)\n\n#define STAT_time MS_STAT \" time \"\n#define STAT_time_LEN (sizeof(STAT_time)-1)\n\n#define STAT_version MS_STAT \" version \"\n",
                    "rendered": {
                      "text": "#define STAT_uptime MS_STAT \" uptime \"\n#define STAT_uptime_LEN (sizeof(STAT_uptime)-1)\n\n#define STAT_time MS_STAT \" time \"\n#define STAT_time_LEN (sizeof(STAT_time)-1)\n\n#define STAT_version MS_STAT \" version \"\n",
                      "markdown": "`#define STAT_uptime MS_STAT \" uptime \"\n#define STAT_uptime_LEN (sizeof(STAT_uptime)-1)\n\n#define STAT_time MS_STAT \" time \"\n#define STAT_time_LEN (sizeof(STAT_time)-1)\n\n#define STAT_version MS_STAT \" version \"\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/misc/win32/apr_app.c"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 21,
                  "endLine": 87,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n    /* MSVCRT will attempt to maintain the wide environment calls\n     * on _putenv(), which is bogus if we've passed a non-ascii\n     * string to _putenv(), since they use MultiByteToWideChar\n     * and breaking the implicit utf-8 assumption we've built.\n     *\n     * Reset _wenviron for good measure.\n",
                    "rendered": {
                      "text": "\n    /* MSVCRT will attempt to maintain the wide environment calls\n     * on _putenv(), which is bogus if we've passed a non-ascii\n     * string to _putenv(), since they use MultiByteToWideChar\n     * and breaking the implicit utf-8 assumption we've built.\n     *\n     * Reset _wenviron for good measure.\n",
                      "markdown": "`\n    /* MSVCRT will attempt to maintain the wide environment calls\n     * on _putenv(), which is bogus if we've passed a non-ascii\n     * string to _putenv(), since they use MultiByteToWideChar\n     * and breaking the implicit utf-8 assumption we've built.\n     *\n     * Reset _wenviron for good measure.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/misc/win32/apr_app.c"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 3,
                  "endLine": 67,
                  "endColumn": 8,
                  "snippet": {
                    "text": "     * separate heap entry for every environment variable\n     * after first change.\n     */\n    env = apr_malloc_dbg((envc + 1) * sizeof(char *), __FILE__, __LINE__);\n\n    for (i = 0; i < envc; i++) {\n        apr_size_t wcount;\n",
                    "rendered": {
                      "text": "     * separate heap entry for every environment variable\n     * after first change.\n     */\n    env = apr_malloc_dbg((envc + 1) * sizeof(char *), __FILE__, __LINE__);\n\n    for (i = 0; i < envc; i++) {\n        apr_size_t wcount;\n",
                      "markdown": "`     * separate heap entry for every environment variable\n     * after first change.\n     */\n    env = apr_malloc_dbg((envc + 1) * sizeof(char *), __FILE__, __LINE__);\n\n    for (i = 0; i < envc; i++) {\n        apr_size_t wcount;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/configure.in"
                },
                "region": {
                  "startLine": 3146,
                  "startColumn": 40,
                  "endLine": 3146,
                  "endColumn": 48,
                  "snippet": {
                    "text": "AC_SUBST(apr_has_xthread_files)\n\nAPR_SETIFNULL(apr_procattr_user_set_requires_password, [0])\nAC_SUBST(apr_procattr_user_set_requires_password)\n\nAPR_SETIFNULL(apr_thread_func, [])\nAC_SUBST(apr_thread_func)\n",
                    "rendered": {
                      "text": "AC_SUBST(apr_has_xthread_files)\n\nAPR_SETIFNULL(apr_procattr_user_set_requires_password, [0])\nAC_SUBST(apr_procattr_user_set_requires_password)\n\nAPR_SETIFNULL(apr_thread_func, [])\nAC_SUBST(apr_thread_func)\n",
                      "markdown": "`AC_SUBST(apr_has_xthread_files)\n\nAPR_SETIFNULL(apr_procattr_user_set_requires_password, [0])\nAC_SUBST(apr_procattr_user_set_requires_password)\n\nAPR_SETIFNULL(apr_thread_func, [])\nAC_SUBST(apr_thread_func)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/configure.in"
                },
                "region": {
                  "startLine": 3145,
                  "startColumn": 45,
                  "endLine": 3145,
                  "endColumn": 53,
                  "snippet": {
                    "text": "APR_SETIFNULL(apr_has_xthread_files, [0])\nAC_SUBST(apr_has_xthread_files)\n\nAPR_SETIFNULL(apr_procattr_user_set_requires_password, [0])\nAC_SUBST(apr_procattr_user_set_requires_password)\n\nAPR_SETIFNULL(apr_thread_func, [])\n",
                    "rendered": {
                      "text": "APR_SETIFNULL(apr_has_xthread_files, [0])\nAC_SUBST(apr_has_xthread_files)\n\nAPR_SETIFNULL(apr_procattr_user_set_requires_password, [0])\nAC_SUBST(apr_procattr_user_set_requires_password)\n\nAPR_SETIFNULL(apr_thread_func, [])\n",
                      "markdown": "`APR_SETIFNULL(apr_has_xthread_files, [0])\nAC_SUBST(apr_has_xthread_files)\n\nAPR_SETIFNULL(apr_procattr_user_set_requires_password, [0])\nAC_SUBST(apr_procattr_user_set_requires_password)\n\nAPR_SETIFNULL(apr_thread_func, [])\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/configure.in"
                },
                "region": {
                  "startLine": 3239,
                  "startColumn": 16,
                  "endLine": 3239,
                  "endColumn": 31,
                  "snippet": {
                    "text": "APR_RESTORE_THE_ENVIRONMENT(CFLAGS, EXTRA_)\nAPR_RESTORE_THE_ENVIRONMENT(LDFLAGS, EXTRA_)\nAPR_RESTORE_THE_ENVIRONMENT(LIBS, EXTRA_)\nAPR_RESTORE_THE_ENVIRONMENT(INCLUDES, EXTRA_)\nAC_SUBST(NOTEST_CPPFLAGS)\nAC_SUBST(NOTEST_CFLAGS)\nAC_SUBST(NOTEST_LDFLAGS)\n",
                    "rendered": {
                      "text": "APR_RESTORE_THE_ENVIRONMENT(CFLAGS, EXTRA_)\nAPR_RESTORE_THE_ENVIRONMENT(LDFLAGS, EXTRA_)\nAPR_RESTORE_THE_ENVIRONMENT(LIBS, EXTRA_)\nAPR_RESTORE_THE_ENVIRONMENT(INCLUDES, EXTRA_)\nAC_SUBST(NOTEST_CPPFLAGS)\nAC_SUBST(NOTEST_CFLAGS)\nAC_SUBST(NOTEST_LDFLAGS)\n",
                      "markdown": "`APR_RESTORE_THE_ENVIRONMENT(CFLAGS, EXTRA_)\nAPR_RESTORE_THE_ENVIRONMENT(LDFLAGS, EXTRA_)\nAPR_RESTORE_THE_ENVIRONMENT(LIBS, EXTRA_)\nAPR_RESTORE_THE_ENVIRONMENT(INCLUDES, EXTRA_)\nAC_SUBST(NOTEST_CPPFLAGS)\nAC_SUBST(NOTEST_CFLAGS)\nAC_SUBST(NOTEST_LDFLAGS)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/configure.in"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 13,
                  "endLine": 124,
                  "endColumn": 28,
                  "snippet": {
                    "text": "APR_SAVE_THE_ENVIRONMENT(CFLAGS)\nAPR_SAVE_THE_ENVIRONMENT(LDFLAGS)\nAPR_SAVE_THE_ENVIRONMENT(LIBS)\nAPR_SAVE_THE_ENVIRONMENT(INCLUDES)\n\ndnl Generate ./config.nice for reproducing runs of configure\ndnl\n",
                    "rendered": {
                      "text": "APR_SAVE_THE_ENVIRONMENT(CFLAGS)\nAPR_SAVE_THE_ENVIRONMENT(LDFLAGS)\nAPR_SAVE_THE_ENVIRONMENT(LIBS)\nAPR_SAVE_THE_ENVIRONMENT(INCLUDES)\n\ndnl Generate ./config.nice for reproducing runs of configure\ndnl\n",
                      "markdown": "`APR_SAVE_THE_ENVIRONMENT(CFLAGS)\nAPR_SAVE_THE_ENVIRONMENT(LDFLAGS)\nAPR_SAVE_THE_ENVIRONMENT(LIBS)\nAPR_SAVE_THE_ENVIRONMENT(INCLUDES)\n\ndnl Generate ./config.nice for reproducing runs of configure\ndnl\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/configure.in"
                },
                "region": {
                  "startLine": 3330,
                  "startColumn": 14,
                  "endLine": 3330,
                  "endColumn": 18,
                  "snippet": {
                    "text": "dnl This section is expanded by configure UNQUOTED so variable \ndnl references must be backslash-escaped as necessary.\n\n# Commands run at the beginning of config.status:\nAPR_SAVE_HEADERS=\"include/apr.h include/arch/unix/apr_private.h\"\nAPR_MAJOR_VERSION=$APR_MAJOR_VERSION\nAPR_PLATFORM=$host\n",
                    "rendered": {
                      "text": "dnl This section is expanded by configure UNQUOTED so variable \ndnl references must be backslash-escaped as necessary.\n\n# Commands run at the beginning of config.status:\nAPR_SAVE_HEADERS=\"include/apr.h include/arch/unix/apr_private.h\"\nAPR_MAJOR_VERSION=$APR_MAJOR_VERSION\nAPR_PLATFORM=$host\n",
                      "markdown": "`dnl This section is expanded by configure UNQUOTED so variable \ndnl references must be backslash-escaped as necessary.\n\n# Commands run at the beginning of config.status:\nAPR_SAVE_HEADERS=\"include/apr.h include/arch/unix/apr_private.h\"\nAPR_MAJOR_VERSION=$APR_MAJOR_VERSION\nAPR_PLATFORM=$host\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/configure.in"
                },
                "region": {
                  "startLine": 3317,
                  "startColumn": 14,
                  "endLine": 3317,
                  "endColumn": 18,
                  "snippet": {
                    "text": "test -d $dir || $MKDIR $dir\n\nAC_CONFIG_COMMANDS([default], [\n# Commands run at the end of config.status:\nfor i in $APR_SAVE_HEADERS; do\n  if cmp -s $i $i.save 2>/dev/null; then\n    mv $i.save $i\n",
                    "rendered": {
                      "text": "test -d $dir || $MKDIR $dir\n\nAC_CONFIG_COMMANDS([default], [\n# Commands run at the end of config.status:\nfor i in $APR_SAVE_HEADERS; do\n  if cmp -s $i $i.save 2>/dev/null; then\n    mv $i.save $i\n",
                      "markdown": "`test -d $dir || $MKDIR $dir\n\nAC_CONFIG_COMMANDS([default], [\n# Commands run at the end of config.status:\nfor i in $APR_SAVE_HEADERS; do\n  if cmp -s $i $i.save 2>/dev/null; then\n    mv $i.save $i\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/configure.in"
                },
                "region": {
                  "startLine": 2586,
                  "startColumn": 1,
                  "endLine": 2586,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\n# See which lock mechanism we'll select by default on this system.\n# The last APR_DECIDE to execute sets the default.\n# At this stage, we match the ordering in Apache 1.3\n# which is (highest to lowest): sysvsem -> fcntl -> flock.\n# POSIX semaphores and cross-process pthread mutexes are not\n# used by default since they have less desirable behaviour when\n",
                    "rendered": {
                      "text": "\n# See which lock mechanism we'll select by default on this system.\n# The last APR_DECIDE to execute sets the default.\n# At this stage, we match the ordering in Apache 1.3\n# which is (highest to lowest): sysvsem -> fcntl -> flock.\n# POSIX semaphores and cross-process pthread mutexes are not\n# used by default since they have less desirable behaviour when\n",
                      "markdown": "`\n# See which lock mechanism we'll select by default on this system.\n# The last APR_DECIDE to execute sets the default.\n# At this stage, we match the ordering in Apache 1.3\n# which is (highest to lowest): sysvsem -> fcntl -> flock.\n# POSIX semaphores and cross-process pthread mutexes are not\n# used by default since they have less desirable behaviour when\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/configure.in"
                },
                "region": {
                  "startLine": 214,
                  "startColumn": 64,
                  "endLine": 214,
                  "endColumn": 68,
                  "snippet": {
                    "text": "dnl preload section from invoking the macro to get compiler info.\nAC_PROG_CC\n\ndnl Check build CC for gen_test_char compiling which is executed at build time.\nAX_PROG_CC_FOR_BUILD\n\ndnl AC_PROG_SED is only avaliable in recent autoconf versions.\n",
                    "rendered": {
                      "text": "dnl preload section from invoking the macro to get compiler info.\nAC_PROG_CC\n\ndnl Check build CC for gen_test_char compiling which is executed at build time.\nAX_PROG_CC_FOR_BUILD\n\ndnl AC_PROG_SED is only avaliable in recent autoconf versions.\n",
                      "markdown": "`dnl preload section from invoking the macro to get compiler info.\nAC_PROG_CC\n\ndnl Check build CC for gen_test_char compiling which is executed at build time.\nAX_PROG_CC_FOR_BUILD\n\ndnl AC_PROG_SED is only avaliable in recent autoconf versions.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/configure.in"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 20,
                  "endLine": 65,
                  "endColumn": 24,
                  "snippet": {
                    "text": " * Darwin 10's default compiler (gcc42) builds for both 64 and\n * 32 bit architectures unless specifically told not to.\n * In those cases, we need to override types depending on how\n * we're being built at compile time.\n * NOTE: This is an ugly work-around for Darwin's\n * concept of universal binaries, a single package\n * (executable, lib, etc...) which contains both 32\n",
                    "rendered": {
                      "text": " * Darwin 10's default compiler (gcc42) builds for both 64 and\n * 32 bit architectures unless specifically told not to.\n * In those cases, we need to override types depending on how\n * we're being built at compile time.\n * NOTE: This is an ugly work-around for Darwin's\n * concept of universal binaries, a single package\n * (executable, lib, etc...) which contains both 32\n",
                      "markdown": "` * Darwin 10's default compiler (gcc42) builds for both 64 and\n * 32 bit architectures unless specifically told not to.\n * In those cases, we need to override types depending on how\n * we're being built at compile time.\n * NOTE: This is an ugly work-around for Darwin's\n * concept of universal binaries, a single package\n * (executable, lib, etc...) which contains both 32\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/configure.in"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 24,
                  "endLine": 52,
                  "endColumn": 28,
                  "snippet": {
                    "text": "#include <apr.h>\n])\n\ndnl Hard-coded inclusion at the tail end of apr_private.h:\nAH_BOTTOM([\n/* switch this on if we have a BeOS version below BONE */\n#if defined(BEOS) && !defined(HAVE_BONE_VERSION)\n",
                    "rendered": {
                      "text": "#include <apr.h>\n])\n\ndnl Hard-coded inclusion at the tail end of apr_private.h:\nAH_BOTTOM([\n/* switch this on if we have a BeOS version below BONE */\n#if defined(BEOS) && !defined(HAVE_BONE_VERSION)\n",
                      "markdown": "`#include <apr.h>\n])\n\ndnl Hard-coded inclusion at the tail end of apr_private.h:\nAH_BOTTOM([\n/* switch this on if we have a BeOS version below BONE */\n#if defined(BEOS) && !defined(HAVE_BONE_VERSION)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/configure.in"
                },
                "region": {
                  "startLine": 3336,
                  "startColumn": 21,
                  "endLine": 3336,
                  "endColumn": 25,
                  "snippet": {
                    "text": "APR_PLATFORM=$host\n\nfor apri in \\${APR_SAVE_HEADERS}; do\n  test -r \\${apri} && mv \\${apri} \\${apri}.save\ndone\n])\n\n",
                    "rendered": {
                      "text": "APR_PLATFORM=$host\n\nfor apri in \\${APR_SAVE_HEADERS}; do\n  test -r \\${apri} && mv \\${apri} \\${apri}.save\ndone\n])\n\n",
                      "markdown": "`APR_PLATFORM=$host\n\nfor apri in \\${APR_SAVE_HEADERS}; do\n  test -r \\${apri} && mv \\${apri} \\${apri}.save\ndone\n])\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/configure.in"
                },
                "region": {
                  "startLine": 3324,
                  "startColumn": 4,
                  "endLine": 3325,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    AC_MSG_NOTICE([$i is unchanged])\n  fi\n  rm -f $i.save\ndone\nchmod +x apr-$APR_MAJOR_VERSION-config\n],[\ndnl This section is expanded by configure UNQUOTED so variable \ndnl references must be backslash-escaped as necessary.\n",
                    "rendered": {
                      "text": "    AC_MSG_NOTICE([$i is unchanged])\n  fi\n  rm -f $i.save\ndone\nchmod +x apr-$APR_MAJOR_VERSION-config\n],[\ndnl This section is expanded by configure UNQUOTED so variable \ndnl references must be backslash-escaped as necessary.\n",
                      "markdown": "`    AC_MSG_NOTICE([$i is unchanged])\n  fi\n  rm -f $i.save\ndone\nchmod +x apr-$APR_MAJOR_VERSION-config\n],[\ndnl This section is expanded by configure UNQUOTED so variable \ndnl references must be backslash-escaped as necessary.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/configure.in"
                },
                "region": {
                  "startLine": 3320,
                  "startColumn": 3,
                  "endLine": 3320,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# Commands run at the end of config.status:\nfor i in $APR_SAVE_HEADERS; do\n  if cmp -s $i $i.save 2>/dev/null; then\n    mv $i.save $i\n    AC_MSG_NOTICE([$i is unchanged])\n  fi\n  rm -f $i.save\n",
                    "rendered": {
                      "text": "# Commands run at the end of config.status:\nfor i in $APR_SAVE_HEADERS; do\n  if cmp -s $i $i.save 2>/dev/null; then\n    mv $i.save $i\n    AC_MSG_NOTICE([$i is unchanged])\n  fi\n  rm -f $i.save\n",
                      "markdown": "`# Commands run at the end of config.status:\nfor i in $APR_SAVE_HEADERS; do\n  if cmp -s $i $i.save 2>/dev/null; then\n    mv $i.save $i\n    AC_MSG_NOTICE([$i is unchanged])\n  fi\n  rm -f $i.save\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/configure.in"
                },
                "region": {
                  "startLine": 3176,
                  "startColumn": 3,
                  "endLine": 3176,
                  "endColumn": 9,
                  "snippet": {
                    "text": "dnl select an XML parser\nAPU_FIND_XML\n\ndnl Find iconv implementations\nAPU_FIND_ICONV\n\ndnl Enable DSO build; must be last:\n",
                    "rendered": {
                      "text": "dnl select an XML parser\nAPU_FIND_XML\n\ndnl Find iconv implementations\nAPU_FIND_ICONV\n\ndnl Enable DSO build; must be last:\n",
                      "markdown": "`dnl select an XML parser\nAPU_FIND_XML\n\ndnl Find iconv implementations\nAPU_FIND_ICONV\n\ndnl Enable DSO build; must be last:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/configure.in"
                },
                "region": {
                  "startLine": 3170,
                  "startColumn": 3,
                  "endLine": 3170,
                  "endColumn": 9,
                  "snippet": {
                    "text": "APU_CHECK_DBD_ORACLE\nAPU_CHECK_DBD_ODBC\n\ndnl Find LDAP backend\nAPU_FIND_LDAP\n\ndnl select an XML parser\n",
                    "rendered": {
                      "text": "APU_CHECK_DBD_ORACLE\nAPU_CHECK_DBD_ODBC\n\ndnl Find LDAP backend\nAPU_FIND_LDAP\n\ndnl select an XML parser\n",
                      "markdown": "`APU_CHECK_DBD_ORACLE\nAPU_CHECK_DBD_ODBC\n\ndnl Find LDAP backend\nAPU_FIND_LDAP\n\ndnl select an XML parser\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/configure.in"
                },
                "region": {
                  "startLine": 3161,
                  "startColumn": 3,
                  "endLine": 3161,
                  "endColumn": 9,
                  "snippet": {
                    "text": "dnl Find crypto libraries\nAPU_CHECK_CRYPTO\n\ndnl Find DBM and DBD backends to use.\nAPU_CHECK_DBM\nAPU_CHECK_DBD\nAPU_CHECK_DBD_MYSQL\n",
                    "rendered": {
                      "text": "dnl Find crypto libraries\nAPU_CHECK_CRYPTO\n\ndnl Find DBM and DBD backends to use.\nAPU_CHECK_DBM\nAPU_CHECK_DBD\nAPU_CHECK_DBD_MYSQL\n",
                      "markdown": "`dnl Find crypto libraries\nAPU_CHECK_CRYPTO\n\ndnl Find DBM and DBD backends to use.\nAPU_CHECK_DBM\nAPU_CHECK_DBD\nAPU_CHECK_DBD_MYSQL\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/configure.in"
                },
                "region": {
                  "startLine": 3158,
                  "startColumn": 3,
                  "endLine": 3158,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\nAPU_PRELOAD\n\ndnl Find crypto libraries\nAPU_CHECK_CRYPTO\n\ndnl Find DBM and DBD backends to use.\n",
                    "rendered": {
                      "text": "\nAPU_PRELOAD\n\ndnl Find crypto libraries\nAPU_CHECK_CRYPTO\n\ndnl Find DBM and DBD backends to use.\n",
                      "markdown": "`\nAPU_PRELOAD\n\ndnl Find crypto libraries\nAPU_CHECK_CRYPTO\n\ndnl Find DBM and DBD backends to use.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/configure.in"
                },
                "region": {
                  "startLine": 2974,
                  "startColumn": 27,
                  "endLine": 2974,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\ndnl ----------------------------- Checking for Time Support \nAC_MSG_NOTICE([])\nAC_MSG_NOTICE([Checking for Time Support...])\n\nAC_CHECK_MEMBERS([struct tm.tm_gmtoff, struct tm.__tm_gmtoff],,,[\n#include <sys/types.h>\n",
                    "rendered": {
                      "text": "\ndnl ----------------------------- Checking for Time Support \nAC_MSG_NOTICE([])\nAC_MSG_NOTICE([Checking for Time Support...])\n\nAC_CHECK_MEMBERS([struct tm.tm_gmtoff, struct tm.__tm_gmtoff],,,[\n#include <sys/types.h>\n",
                      "markdown": "`\ndnl ----------------------------- Checking for Time Support \nAC_MSG_NOTICE([])\nAC_MSG_NOTICE([Checking for Time Support...])\n\nAC_CHECK_MEMBERS([struct tm.tm_gmtoff, struct tm.__tm_gmtoff],,,[\n#include <sys/types.h>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/configure.in"
                },
                "region": {
                  "startLine": 2972,
                  "startColumn": 46,
                  "endLine": 2972,
                  "endColumn": 52,
                  "snippet": {
                    "text": "AC_SUBST(osuuid)\n\n\ndnl ----------------------------- Checking for Time Support \nAC_MSG_NOTICE([])\nAC_MSG_NOTICE([Checking for Time Support...])\n\n",
                    "rendered": {
                      "text": "AC_SUBST(osuuid)\n\n\ndnl ----------------------------- Checking for Time Support \nAC_MSG_NOTICE([])\nAC_MSG_NOTICE([Checking for Time Support...])\n\n",
                      "markdown": "`AC_SUBST(osuuid)\n\n\ndnl ----------------------------- Checking for Time Support \nAC_MSG_NOTICE([])\nAC_MSG_NOTICE([Checking for Time Support...])\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/configure.in"
                },
                "region": {
                  "startLine": 2773,
                  "startColumn": 22,
                  "endLine": 2773,
                  "endColumn": 29,
                  "snippet": {
                    "text": "AC_MSG_CHECKING(if flock locks affect threads in the same process)\nif test \"x$apr_flock_is_global\" = \"xyes\"; then\n  AC_DEFINE(FLOCK_IS_GLOBAL, 1,\n            [Define if flock locks affect threads within the process])\n  AC_MSG_RESULT(yes)\nelse\n  AC_MSG_RESULT(no)\n",
                    "rendered": {
                      "text": "AC_MSG_CHECKING(if flock locks affect threads in the same process)\nif test \"x$apr_flock_is_global\" = \"xyes\"; then\n  AC_DEFINE(FLOCK_IS_GLOBAL, 1,\n            [Define if flock locks affect threads within the process])\n  AC_MSG_RESULT(yes)\nelse\n  AC_MSG_RESULT(no)\n",
                      "markdown": "`AC_MSG_CHECKING(if flock locks affect threads in the same process)\nif test \"x$apr_flock_is_global\" = \"xyes\"; then\n  AC_DEFINE(FLOCK_IS_GLOBAL, 1,\n            [Define if flock locks affect threads within the process])\n  AC_MSG_RESULT(yes)\nelse\n  AC_MSG_RESULT(no)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/configure.in"
                },
                "region": {
                  "startLine": 2770,
                  "startColumn": 18,
                  "endLine": 2770,
                  "endColumn": 25,
                  "snippet": {
                    "text": "  AC_MSG_RESULT(no)\nfi\n\nAC_MSG_CHECKING(if flock locks affect threads in the same process)\nif test \"x$apr_flock_is_global\" = \"xyes\"; then\n  AC_DEFINE(FLOCK_IS_GLOBAL, 1,\n            [Define if flock locks affect threads within the process])\n",
                    "rendered": {
                      "text": "  AC_MSG_RESULT(no)\nfi\n\nAC_MSG_CHECKING(if flock locks affect threads in the same process)\nif test \"x$apr_flock_is_global\" = \"xyes\"; then\n  AC_DEFINE(FLOCK_IS_GLOBAL, 1,\n            [Define if flock locks affect threads within the process])\n",
                      "markdown": "`  AC_MSG_RESULT(no)\nfi\n\nAC_MSG_CHECKING(if flock locks affect threads in the same process)\nif test \"x$apr_flock_is_global\" = \"xyes\"; then\n  AC_DEFINE(FLOCK_IS_GLOBAL, 1,\n            [Define if flock locks affect threads within the process])\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/configure.in"
                },
                "region": {
                  "startLine": 2673,
                  "startColumn": 6,
                  "endLine": 2673,
                  "endColumn": 13,
                  "snippet": {
                    "text": "#include <stdlib.h>\n#endif\nint fd;\nstruct flock proc_mutex_lock_it = {0};\nconst char *fname = \"conftest.fcntl\";\n\nint lockit();\n",
                    "rendered": {
                      "text": "#include <stdlib.h>\n#endif\nint fd;\nstruct flock proc_mutex_lock_it = {0};\nconst char *fname = \"conftest.fcntl\";\n\nint lockit();\n",
                      "markdown": "`#include <stdlib.h>\n#endif\nint fd;\nstruct flock proc_mutex_lock_it = {0};\nconst char *fname = \"conftest.fcntl\";\n\nint lockit();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/configure.in"
                },
                "region": {
                  "startLine": 2532,
                  "startColumn": 53,
                  "endLine": 2532,
                  "endColumn": 59,
                  "snippet": {
                    "text": "    AC_SUBST(have_pthread_mutex_timedlock)\n    # Some systems have setpshared and define PROCESS_SHARED, but don't \n    # really support PROCESS_SHARED locks.  So, we must validate that we \n    # can go through the steps without receiving some sort of system error.\n    # Linux and older versions of AIX have this problem.\n    APR_IFALLYES(header:pthread.h define:PTHREAD_PROCESS_SHARED func:pthread_mutexattr_setpshared, [\n      AC_CACHE_CHECK([for working PROCESS_SHARED locks], apr_cv_process_shared_works, [\n",
                    "rendered": {
                      "text": "    AC_SUBST(have_pthread_mutex_timedlock)\n    # Some systems have setpshared and define PROCESS_SHARED, but don't \n    # really support PROCESS_SHARED locks.  So, we must validate that we \n    # can go through the steps without receiving some sort of system error.\n    # Linux and older versions of AIX have this problem.\n    APR_IFALLYES(header:pthread.h define:PTHREAD_PROCESS_SHARED func:pthread_mutexattr_setpshared, [\n      AC_CACHE_CHECK([for working PROCESS_SHARED locks], apr_cv_process_shared_works, [\n",
                      "markdown": "`    AC_SUBST(have_pthread_mutex_timedlock)\n    # Some systems have setpshared and define PROCESS_SHARED, but don't \n    # really support PROCESS_SHARED locks.  So, we must validate that we \n    # can go through the steps without receiving some sort of system error.\n    # Linux and older versions of AIX have this problem.\n    APR_IFALLYES(header:pthread.h define:PTHREAD_PROCESS_SHARED func:pthread_mutexattr_setpshared, [\n      AC_CACHE_CHECK([for working PROCESS_SHARED locks], apr_cv_process_shared_works, [\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/configure.in"
                },
                "region": {
                  "startLine": 2044,
                  "startColumn": 11,
                  "endLine": 2044,
                  "endColumn": 19,
                  "snippet": {
                    "text": "        ;;\nesac\n\ndnl I would expect much of the above to go away with new compile test\nAPR_CHECK_TYPES_FMT_COMPATIBLE(ssize_t, long, ld, [ssize_t_fmt=\"ld\"], [\nAPR_CHECK_TYPES_FMT_COMPATIBLE(ssize_t, int, d, [ssize_t_fmt=\"d\"])\n])\n",
                    "rendered": {
                      "text": "        ;;\nesac\n\ndnl I would expect much of the above to go away with new compile test\nAPR_CHECK_TYPES_FMT_COMPATIBLE(ssize_t, long, ld, [ssize_t_fmt=\"ld\"], [\nAPR_CHECK_TYPES_FMT_COMPATIBLE(ssize_t, int, d, [ssize_t_fmt=\"d\"])\n])\n",
                      "markdown": "`        ;;\nesac\n\ndnl I would expect much of the above to go away with new compile test\nAPR_CHECK_TYPES_FMT_COMPATIBLE(ssize_t, long, ld, [ssize_t_fmt=\"ld\"], [\nAPR_CHECK_TYPES_FMT_COMPATIBLE(ssize_t, int, d, [ssize_t_fmt=\"d\"])\n])\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/configure.in"
                },
                "region": {
                  "startLine": 1861,
                  "startColumn": 16,
                  "endLine": 1861,
                  "endColumn": 22,
                  "snippet": {
                    "text": "    int_value=int\nfi\n\n# Now we need to find what apr_int64_t (sizeof == 8) will be.\n# The first match is our preference (use inttypes if available).\nAPR_IFALLYES(header:stdint.h header:inttypes.h, hasinttypes=\"1\", hasinttypes=\"0\")\nif test \"$hasinttypes\" = \"1\"; then\n",
                    "rendered": {
                      "text": "    int_value=int\nfi\n\n# Now we need to find what apr_int64_t (sizeof == 8) will be.\n# The first match is our preference (use inttypes if available).\nAPR_IFALLYES(header:stdint.h header:inttypes.h, hasinttypes=\"1\", hasinttypes=\"0\")\nif test \"$hasinttypes\" = \"1\"; then\n",
                      "markdown": "`    int_value=int\nfi\n\n# Now we need to find what apr_int64_t (sizeof == 8) will be.\n# The first match is our preference (use inttypes if available).\nAPR_IFALLYES(header:stdint.h header:inttypes.h, hasinttypes=\"1\", hasinttypes=\"0\")\nif test \"$hasinttypes\" = \"1\"; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/configure.in"
                },
                "region": {
                  "startLine": 1790,
                  "startColumn": 25,
                  "endLine": 1790,
                  "endColumn": 31,
                  "snippet": {
                    "text": "if test \"$netdbh\" = \"1\"; then\n  APR_CHECK_H_ERRNO_FLAG\n  if test \"$ac_cv_h_errno_cflags\" = \"no\"; then\n    AC_MSG_ERROR([can not find h_errno in netdb.h])\n  fi\nfi\n\n",
                    "rendered": {
                      "text": "if test \"$netdbh\" = \"1\"; then\n  APR_CHECK_H_ERRNO_FLAG\n  if test \"$ac_cv_h_errno_cflags\" = \"no\"; then\n    AC_MSG_ERROR([can not find h_errno in netdb.h])\n  fi\nfi\n\n",
                      "markdown": "`if test \"$netdbh\" = \"1\"; then\n  APR_CHECK_H_ERRNO_FLAG\n  if test \"$ac_cv_h_errno_cflags\" = \"no\"; then\n    AC_MSG_ERROR([can not find h_errno in netdb.h])\n  fi\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/configure.in"
                },
                "region": {
                  "startLine": 1389,
                  "startColumn": 17,
                  "endLine": 1389,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    *linux* ) \n        # Linux has problems with MM_SHMT_MMANON even though it reports\n        # that it has it.\n        # FIXME - find exact 2.3 version that MMANON was fixed in.  It is\n        # confirmed fixed in 2.4 series.\n        if test $os_pre24linux -eq 1; then\n            AC_MSG_WARN([Disabling anon mmap() support for Linux pre-2.4])\n",
                    "rendered": {
                      "text": "    *linux* ) \n        # Linux has problems with MM_SHMT_MMANON even though it reports\n        # that it has it.\n        # FIXME - find exact 2.3 version that MMANON was fixed in.  It is\n        # confirmed fixed in 2.4 series.\n        if test $os_pre24linux -eq 1; then\n            AC_MSG_WARN([Disabling anon mmap() support for Linux pre-2.4])\n",
                      "markdown": "`    *linux* ) \n        # Linux has problems with MM_SHMT_MMANON even though it reports\n        # that it has it.\n        # FIXME - find exact 2.3 version that MMANON was fixed in.  It is\n        # confirmed fixed in 2.4 series.\n        if test $os_pre24linux -eq 1; then\n            AC_MSG_WARN([Disabling anon mmap() support for Linux pre-2.4])\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/configure.in"
                },
                "region": {
                  "startLine": 1177,
                  "startColumn": 49,
                  "endLine": 1177,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\nif test \"$apr_cv_epoll_wait_has_reliable_timeout\" = \"yes\"; then\n   AC_DEFINE([HAVE_EPOLL_WAIT_RELIABLE_TIMEOUT], 1,\n             [Define if epoll_wait has a reliable timeout (min)])\nfi\n\n# Check for z/OS async i/o support.  \n",
                    "rendered": {
                      "text": "\nif test \"$apr_cv_epoll_wait_has_reliable_timeout\" = \"yes\"; then\n   AC_DEFINE([HAVE_EPOLL_WAIT_RELIABLE_TIMEOUT], 1,\n             [Define if epoll_wait has a reliable timeout (min)])\nfi\n\n# Check for z/OS async i/o support.  \n",
                      "markdown": "`\nif test \"$apr_cv_epoll_wait_has_reliable_timeout\" = \"yes\"; then\n   AC_DEFINE([HAVE_EPOLL_WAIT_RELIABLE_TIMEOUT], 1,\n             [Define if epoll_wait has a reliable timeout (min)])\nfi\n\n# Check for z/OS async i/o support.  \n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/configure.in"
                },
                "region": {
                  "startLine": 1139,
                  "startColumn": 49,
                  "endLine": 1139,
                  "endColumn": 58,
                  "snippet": {
                    "text": "   AC_DEFINE([HAVE_EPOLL_CREATE1], 1, [Define if epoll_create1 function is supported])\nfi\n\nAC_CACHE_CHECK([whether epoll_wait has a reliable timeout (min)],\n               [apr_cv_epoll_wait_has_reliable_timeout],\n[AC_TRY_RUN([\n#include <unistd.h>\n",
                    "rendered": {
                      "text": "   AC_DEFINE([HAVE_EPOLL_CREATE1], 1, [Define if epoll_create1 function is supported])\nfi\n\nAC_CACHE_CHECK([whether epoll_wait has a reliable timeout (min)],\n               [apr_cv_epoll_wait_has_reliable_timeout],\n[AC_TRY_RUN([\n#include <unistd.h>\n",
                      "markdown": "`   AC_DEFINE([HAVE_EPOLL_CREATE1], 1, [Define if epoll_create1 function is supported])\nfi\n\nAC_CACHE_CHECK([whether epoll_wait has a reliable timeout (min)],\n               [apr_cv_epoll_wait_has_reliable_timeout],\n[AC_TRY_RUN([\n#include <unistd.h>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/configure.in"
                },
                "region": {
                  "startLine": 913,
                  "startColumn": 30,
                  "endLine": 913,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        fi\n        ;;\n    *os390)\n        os_version=`uname -r | sed -e 's/\\.//g'`\n        ;;\n    *)\n        os_version=OS_VERSION_IS_NOT_SET\n",
                    "rendered": {
                      "text": "        fi\n        ;;\n    *os390)\n        os_version=`uname -r | sed -e 's/\\.//g'`\n        ;;\n    *)\n        os_version=OS_VERSION_IS_NOT_SET\n",
                      "markdown": "`        fi\n        ;;\n    *os390)\n        os_version=`uname -r | sed -e 's/\\.//g'`\n        ;;\n    *)\n        os_version=OS_VERSION_IS_NOT_SET\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/configure.in"
                },
                "region": {
                  "startLine": 903,
                  "startColumn": 29,
                  "endLine": 903,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        ;;\n    *linux*)\n        os_major=[`uname -r | sed -e 's/\\([1-9][0-9]*\\)\\..*/\\1/'`]\n        os_minor=[`uname -r | sed -e 's/[1-9][0-9]*\\.\\([0-9]\\+\\)\\..*/\\1/'`]\n        if test $os_major -lt 2 -o \\( $os_major -eq 2 -a $os_minor -lt 4 \\); then\n            AC_MSG_WARN([Configured for pre-2.4 Linux $os_major.$os_minor])\n            os_pre24linux=1\n",
                    "rendered": {
                      "text": "        ;;\n    *linux*)\n        os_major=[`uname -r | sed -e 's/\\([1-9][0-9]*\\)\\..*/\\1/'`]\n        os_minor=[`uname -r | sed -e 's/[1-9][0-9]*\\.\\([0-9]\\+\\)\\..*/\\1/'`]\n        if test $os_major -lt 2 -o \\( $os_major -eq 2 -a $os_minor -lt 4 \\); then\n            AC_MSG_WARN([Configured for pre-2.4 Linux $os_major.$os_minor])\n            os_pre24linux=1\n",
                      "markdown": "`        ;;\n    *linux*)\n        os_major=[`uname -r | sed -e 's/\\([1-9][0-9]*\\)\\..*/\\1/'`]\n        os_minor=[`uname -r | sed -e 's/[1-9][0-9]*\\.\\([0-9]\\+\\)\\..*/\\1/'`]\n        if test $os_major -lt 2 -o \\( $os_major -eq 2 -a $os_minor -lt 4 \\); then\n            AC_MSG_WARN([Configured for pre-2.4 Linux $os_major.$os_minor])\n            os_pre24linux=1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/configure.in"
                },
                "region": {
                  "startLine": 902,
                  "startColumn": 29,
                  "endLine": 902,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        fi\n        ;;\n    *linux*)\n        os_major=[`uname -r | sed -e 's/\\([1-9][0-9]*\\)\\..*/\\1/'`]\n        os_minor=[`uname -r | sed -e 's/[1-9][0-9]*\\.\\([0-9]\\+\\)\\..*/\\1/'`]\n        if test $os_major -lt 2 -o \\( $os_major -eq 2 -a $os_minor -lt 4 \\); then\n            AC_MSG_WARN([Configured for pre-2.4 Linux $os_major.$os_minor])\n",
                    "rendered": {
                      "text": "        fi\n        ;;\n    *linux*)\n        os_major=[`uname -r | sed -e 's/\\([1-9][0-9]*\\)\\..*/\\1/'`]\n        os_minor=[`uname -r | sed -e 's/[1-9][0-9]*\\.\\([0-9]\\+\\)\\..*/\\1/'`]\n        if test $os_major -lt 2 -o \\( $os_major -eq 2 -a $os_minor -lt 4 \\); then\n            AC_MSG_WARN([Configured for pre-2.4 Linux $os_major.$os_minor])\n",
                      "markdown": "`        fi\n        ;;\n    *linux*)\n        os_major=[`uname -r | sed -e 's/\\([1-9][0-9]*\\)\\..*/\\1/'`]\n        os_minor=[`uname -r | sed -e 's/[1-9][0-9]*\\.\\([0-9]\\+\\)\\..*/\\1/'`]\n        if test $os_major -lt 2 -o \\( $os_major -eq 2 -a $os_minor -lt 4 \\); then\n            AC_MSG_WARN([Configured for pre-2.4 Linux $os_major.$os_minor])\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/configure.in"
                },
                "region": {
                  "startLine": 474,
                  "startColumn": 25,
                  "endLine": 474,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\t  ia64-* )\n\t    ;;\n          * )\n\t    if echo \"$CFLAGS \" | grep '+DA' >/dev/null; then :\n\t    else\n\t      APR_ADDTO(CFLAGS,[+DAportable])\n\t    fi \n",
                    "rendered": {
                      "text": "\t  ia64-* )\n\t    ;;\n          * )\n\t    if echo \"$CFLAGS \" | grep '+DA' >/dev/null; then :\n\t    else\n\t      APR_ADDTO(CFLAGS,[+DAportable])\n\t    fi \n",
                      "markdown": "`\t  ia64-* )\n\t    ;;\n          * )\n\t    if echo \"$CFLAGS \" | grep '+DA' >/dev/null; then :\n\t    else\n\t      APR_ADDTO(CFLAGS,[+DAportable])\n\t    fi \n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/configure.in"
                },
                "region": {
                  "startLine": 381,
                  "startColumn": 88,
                  "endLine": 381,
                  "endColumn": 94,
                  "snippet": {
                    "text": "   fi\n])dnl\n\nAC_ARG_ENABLE(maintainer-mode,[  --enable-maintainer-mode  Turn on debugging and compile time warnings],\n  [APR_ADDTO(CFLAGS,-g)\n   if test \"$GCC\" = \"yes\"; then\n     APR_ADDTO(CFLAGS,[-Wall -Wmissing-prototypes -Wstrict-prototypes -Wmissing-declarations])\n",
                    "rendered": {
                      "text": "   fi\n])dnl\n\nAC_ARG_ENABLE(maintainer-mode,[  --enable-maintainer-mode  Turn on debugging and compile time warnings],\n  [APR_ADDTO(CFLAGS,-g)\n   if test \"$GCC\" = \"yes\"; then\n     APR_ADDTO(CFLAGS,[-Wall -Wmissing-prototypes -Wstrict-prototypes -Wmissing-declarations])\n",
                      "markdown": "`   fi\n])dnl\n\nAC_ARG_ENABLE(maintainer-mode,[  --enable-maintainer-mode  Turn on debugging and compile time warnings],\n  [APR_ADDTO(CFLAGS,-g)\n   if test \"$GCC\" = \"yes\"; then\n     APR_ADDTO(CFLAGS,[-Wall -Wmissing-prototypes -Wstrict-prototypes -Wmissing-declarations])\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/configure.in"
                },
                "region": {
                  "startLine": 372,
                  "startColumn": 76,
                  "endLine": 372,
                  "endColumn": 82,
                  "snippet": {
                    "text": "        ;;\nesac\n\nAC_ARG_ENABLE(debug,[  --enable-debug          Turn on debugging and compile time warnings],\n  [APR_ADDTO(CFLAGS,-g)\n   if test \"$GCC\" = \"yes\"; then\n     APR_ADDTO(CFLAGS,-Wall)\n",
                    "rendered": {
                      "text": "        ;;\nesac\n\nAC_ARG_ENABLE(debug,[  --enable-debug          Turn on debugging and compile time warnings],\n  [APR_ADDTO(CFLAGS,-g)\n   if test \"$GCC\" = \"yes\"; then\n     APR_ADDTO(CFLAGS,-Wall)\n",
                      "markdown": "`        ;;\nesac\n\nAC_ARG_ENABLE(debug,[  --enable-debug          Turn on debugging and compile time warnings],\n  [APR_ADDTO(CFLAGS,-g)\n   if test \"$GCC\" = \"yes\"; then\n     APR_ADDTO(CFLAGS,-Wall)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/configure.in"
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 46,
                  "endLine": 289,
                  "endColumn": 52,
                  "snippet": {
                    "text": "        LIBTOOL=\"$apr_builddir/libtool\"\n        LIBTOOL_SRC=\"$apr_srcdir/build/jlibtool.c\"\n        $CC $CFLAGS $CPPFLAGS -o $LIBTOOL $LIBTOOL_SRC\n        eval `$apr_builddir/libtool --config | grep \"^shlibpath_var=[[A-Z_]]*$\"`\n        if test \"x$shlibpath_var\" = \"x\"; then\n            shlibpath_var=REPLACE_WITH_YOUR_SHLIBPATH_VAR\n        fi\n",
                    "rendered": {
                      "text": "        LIBTOOL=\"$apr_builddir/libtool\"\n        LIBTOOL_SRC=\"$apr_srcdir/build/jlibtool.c\"\n        $CC $CFLAGS $CPPFLAGS -o $LIBTOOL $LIBTOOL_SRC\n        eval `$apr_builddir/libtool --config | grep \"^shlibpath_var=[[A-Z_]]*$\"`\n        if test \"x$shlibpath_var\" = \"x\"; then\n            shlibpath_var=REPLACE_WITH_YOUR_SHLIBPATH_VAR\n        fi\n",
                      "markdown": "`        LIBTOOL=\"$apr_builddir/libtool\"\n        LIBTOOL_SRC=\"$apr_srcdir/build/jlibtool.c\"\n        $CC $CFLAGS $CPPFLAGS -o $LIBTOOL $LIBTOOL_SRC\n        eval `$apr_builddir/libtool --config | grep \"^shlibpath_var=[[A-Z_]]*$\"`\n        if test \"x$shlibpath_var\" = \"x\"; then\n            shlibpath_var=REPLACE_WITH_YOUR_SHLIBPATH_VAR\n        fi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/configure.in"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 53,
                  "endLine": 230,
                  "endColumn": 59,
                  "snippet": {
                    "text": "DEFAULT_OSDIR=\"unix\"\nAC_MSG_NOTICE([(Default will be ${DEFAULT_OSDIR})])\n\napr_modules=\"file_io network_io threadproc misc locks time mmap shmem user memory atomic poll support random\"\n\ndnl Checks for programs.\nAC_PROG_MAKE_SET\n",
                    "rendered": {
                      "text": "DEFAULT_OSDIR=\"unix\"\nAC_MSG_NOTICE([(Default will be ${DEFAULT_OSDIR})])\n\napr_modules=\"file_io network_io threadproc misc locks time mmap shmem user memory atomic poll support random\"\n\ndnl Checks for programs.\nAC_PROG_MAKE_SET\n",
                      "markdown": "`DEFAULT_OSDIR=\"unix\"\nAC_MSG_NOTICE([(Default will be ${DEFAULT_OSDIR})])\n\napr_modules=\"file_io network_io threadproc misc locks time mmap shmem user memory atomic poll support random\"\n\ndnl Checks for programs.\nAC_PROG_MAKE_SET\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/configure.in"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 23,
                  "endLine": 167,
                  "endColumn": 31,
                  "snippet": {
                    "text": "AC_SUBST(APR_CROSS_COMPILING)\n\n# Libtool might need this symbol -- it must point to the location of\n# the generated libtool script (not necessarily the \"top\" build dir).\n#\ntop_builddir=\"$apr_builddir\"\nAC_SUBST(top_builddir)\n",
                    "rendered": {
                      "text": "AC_SUBST(APR_CROSS_COMPILING)\n\n# Libtool might need this symbol -- it must point to the location of\n# the generated libtool script (not necessarily the \"top\" build dir).\n#\ntop_builddir=\"$apr_builddir\"\nAC_SUBST(top_builddir)\n",
                      "markdown": "`AC_SUBST(APR_CROSS_COMPILING)\n\n# Libtool might need this symbol -- it must point to the location of\n# the generated libtool script (not necessarily the \"top\" build dir).\n#\ntop_builddir=\"$apr_builddir\"\nAC_SUBST(top_builddir)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/configure.in"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 31,
                  "endLine": 52,
                  "endColumn": 37,
                  "snippet": {
                    "text": "#include <apr.h>\n])\n\ndnl Hard-coded inclusion at the tail end of apr_private.h:\nAH_BOTTOM([\n/* switch this on if we have a BeOS version below BONE */\n#if defined(BEOS) && !defined(HAVE_BONE_VERSION)\n",
                    "rendered": {
                      "text": "#include <apr.h>\n])\n\ndnl Hard-coded inclusion at the tail end of apr_private.h:\nAH_BOTTOM([\n/* switch this on if we have a BeOS version below BONE */\n#if defined(BEOS) && !defined(HAVE_BONE_VERSION)\n",
                      "markdown": "`#include <apr.h>\n])\n\ndnl Hard-coded inclusion at the tail end of apr_private.h:\nAH_BOTTOM([\n/* switch this on if we have a BeOS version below BONE */\n#if defined(BEOS) && !defined(HAVE_BONE_VERSION)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/configure.in"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 14,
                  "endLine": 41,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\nsinclude(build/ax_prog_cc_for_build.m4)\n\ndnl Hard-coded top of apr_private.h:\nAH_TOP([\n#ifndef APR_PRIVATE_H\n#define APR_PRIVATE_H\n",
                    "rendered": {
                      "text": "\nsinclude(build/ax_prog_cc_for_build.m4)\n\ndnl Hard-coded top of apr_private.h:\nAH_TOP([\n#ifndef APR_PRIVATE_H\n#define APR_PRIVATE_H\n",
                      "markdown": "`\nsinclude(build/ax_prog_cc_for_build.m4)\n\ndnl Hard-coded top of apr_private.h:\nAH_TOP([\n#ifndef APR_PRIVATE_H\n#define APR_PRIVATE_H\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/aprenv.py"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 55,
                  "endLine": 83,
                  "endColumn": 59,
                  "snippet": {
                    "text": "    self.AppendUnique(LIBS = ['expat'])\n\n  def is_gcc(self):\n    # TOOD: This detection should be smarter, need look at SCons Internals\n    # for how it works/base it on the Tool selection.\n    return self['CC'] == 'gcc'\n\n",
                    "rendered": {
                      "text": "    self.AppendUnique(LIBS = ['expat'])\n\n  def is_gcc(self):\n    # TOOD: This detection should be smarter, need look at SCons Internals\n    # for how it works/base it on the Tool selection.\n    return self['CC'] == 'gcc'\n\n",
                      "markdown": "`    self.AppendUnique(LIBS = ['expat'])\n\n  def is_gcc(self):\n    # TOOD: This detection should be smarter, need look at SCons Internals\n    # for how it works/base it on the Tool selection.\n    return self['CC'] == 'gcc'\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/aprenv.py"
                },
                "region": {
                  "startLine": 292,
                  "startColumn": 20,
                  "endLine": 292,
                  "endColumn": 26,
                  "snippet": {
                    "text": "      subst['@bigendian@'] = 1\n    else:\n      subst['@bigendian@'] = 0\n    # Now we need to find what apr_int64_t (sizeof == 8) will be.\n    # The first match is our preference.\n    if sizeof_int == 8:\n      subst['@int64_literal@'] = '#define APR_INT64_C(val) (val)'\n",
                    "rendered": {
                      "text": "      subst['@bigendian@'] = 1\n    else:\n      subst['@bigendian@'] = 0\n    # Now we need to find what apr_int64_t (sizeof == 8) will be.\n    # The first match is our preference.\n    if sizeof_int == 8:\n      subst['@int64_literal@'] = '#define APR_INT64_C(val) (val)'\n",
                      "markdown": "`      subst['@bigendian@'] = 1\n    else:\n      subst['@bigendian@'] = 0\n    # Now we need to find what apr_int64_t (sizeof == 8) will be.\n    # The first match is our preference.\n    if sizeof_int == 8:\n      subst['@int64_literal@'] = '#define APR_INT64_C(val) (val)'\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 849,
                  "startColumn": 5,
                  "endLine": 849,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        *hostname = sockaddr->hostname = apr_pstrdup(sockaddr->pool, hptr->h_name);\n        return APR_SUCCESS;\n    }\n    *hostname = NULL;\n#if defined(WIN32)\n    return apr_get_netos_error();\n#elif defined(OS2)\n",
                    "rendered": {
                      "text": "        *hostname = sockaddr->hostname = apr_pstrdup(sockaddr->pool, hptr->h_name);\n        return APR_SUCCESS;\n    }\n    *hostname = NULL;\n#if defined(WIN32)\n    return apr_get_netos_error();\n#elif defined(OS2)\n",
                      "markdown": "`        *hostname = sockaddr->hostname = apr_pstrdup(sockaddr->pool, hptr->h_name);\n        return APR_SUCCESS;\n    }\n    *hostname = NULL;\n#if defined(WIN32)\n    return apr_get_netos_error();\n#elif defined(OS2)\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 846,
                  "startColumn": 30,
                  "endLine": 846,
                  "endColumn": 38,
                  "snippet": {
                    "text": "#endif\n\n    if (hptr) {\n        *hostname = sockaddr->hostname = apr_pstrdup(sockaddr->pool, hptr->h_name);\n        return APR_SUCCESS;\n    }\n    *hostname = NULL;\n",
                    "rendered": {
                      "text": "#endif\n\n    if (hptr) {\n        *hostname = sockaddr->hostname = apr_pstrdup(sockaddr->pool, hptr->h_name);\n        return APR_SUCCESS;\n    }\n    *hostname = NULL;\n",
                      "markdown": "`#endif\n\n    if (hptr) {\n        *hostname = sockaddr->hostname = apr_pstrdup(sockaddr->pool, hptr->h_name);\n        return APR_SUCCESS;\n    }\n    *hostname = NULL;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 846,
                  "startColumn": 9,
                  "endLine": 846,
                  "endColumn": 17,
                  "snippet": {
                    "text": "#endif\n\n    if (hptr) {\n        *hostname = sockaddr->hostname = apr_pstrdup(sockaddr->pool, hptr->h_name);\n        return APR_SUCCESS;\n    }\n    *hostname = NULL;\n",
                    "rendered": {
                      "text": "#endif\n\n    if (hptr) {\n        *hostname = sockaddr->hostname = apr_pstrdup(sockaddr->pool, hptr->h_name);\n        return APR_SUCCESS;\n    }\n    *hostname = NULL;\n",
                      "markdown": "`#endif\n\n    if (hptr) {\n        *hostname = sockaddr->hostname = apr_pstrdup(sockaddr->pool, hptr->h_name);\n        return APR_SUCCESS;\n    }\n    *hostname = NULL;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 835,
                  "startColumn": 9,
                  "endLine": 835,
                  "endColumn": 17,
                  "snippet": {
                    "text": "                           &hs, tmp, GETHOSTBYNAME_BUFLEN, &hosterror);\n#endif /* !defined(GETHOSTBYNAME_R_GLIBC2) */\n    if (!hptr) {\n        *hostname = NULL;\n        return hosterror + APR_OS_START_SYSERR;\n    }\n#endif /* !defined(GETHOSTBYNAME_R_HOSTENT_DATA) */\n",
                    "rendered": {
                      "text": "                           &hs, tmp, GETHOSTBYNAME_BUFLEN, &hosterror);\n#endif /* !defined(GETHOSTBYNAME_R_GLIBC2) */\n    if (!hptr) {\n        *hostname = NULL;\n        return hosterror + APR_OS_START_SYSERR;\n    }\n#endif /* !defined(GETHOSTBYNAME_R_HOSTENT_DATA) */\n",
                      "markdown": "`                           &hs, tmp, GETHOSTBYNAME_BUFLEN, &hosterror);\n#endif /* !defined(GETHOSTBYNAME_R_GLIBC2) */\n    if (!hptr) {\n        *hostname = NULL;\n        return hosterror + APR_OS_START_SYSERR;\n    }\n#endif /* !defined(GETHOSTBYNAME_R_HOSTENT_DATA) */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 803,
                  "startColumn": 26,
                  "endLine": 803,
                  "endColumn": 34,
                  "snippet": {
                    "text": "            return rc + APR_OS_START_EAIERR; /* return the EAI_ error */\n        }\n    }\n    *hostname = sockaddr->hostname = apr_pstrdup(sockaddr->pool,\n                                                 tmphostname);\n    return APR_SUCCESS;\n#else\n",
                    "rendered": {
                      "text": "            return rc + APR_OS_START_EAIERR; /* return the EAI_ error */\n        }\n    }\n    *hostname = sockaddr->hostname = apr_pstrdup(sockaddr->pool,\n                                                 tmphostname);\n    return APR_SUCCESS;\n#else\n",
                      "markdown": "`            return rc + APR_OS_START_EAIERR; /* return the EAI_ error */\n        }\n    }\n    *hostname = sockaddr->hostname = apr_pstrdup(sockaddr->pool,\n                                                 tmphostname);\n    return APR_SUCCESS;\n#else\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 803,
                  "startColumn": 5,
                  "endLine": 803,
                  "endColumn": 13,
                  "snippet": {
                    "text": "            return rc + APR_OS_START_EAIERR; /* return the EAI_ error */\n        }\n    }\n    *hostname = sockaddr->hostname = apr_pstrdup(sockaddr->pool,\n                                                 tmphostname);\n    return APR_SUCCESS;\n#else\n",
                    "rendered": {
                      "text": "            return rc + APR_OS_START_EAIERR; /* return the EAI_ error */\n        }\n    }\n    *hostname = sockaddr->hostname = apr_pstrdup(sockaddr->pool,\n                                                 tmphostname);\n    return APR_SUCCESS;\n#else\n",
                      "markdown": "`            return rc + APR_OS_START_EAIERR; /* return the EAI_ error */\n        }\n    }\n    *hostname = sockaddr->hostname = apr_pstrdup(sockaddr->pool,\n                                                 tmphostname);\n    return APR_SUCCESS;\n#else\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 780,
                  "startColumn": 9,
                  "endLine": 780,
                  "endColumn": 17,
                  "snippet": {
                    "text": "                     tmphostname, sizeof(tmphostname), NULL, 0,\n                     flags != 0 ? flags : NI_NAMEREQD);\n    if (rc != 0) {\n        *hostname = NULL;\n\n#ifndef WIN32\n        /* something went wrong. Look at the EAI_ error code */\n",
                    "rendered": {
                      "text": "                     tmphostname, sizeof(tmphostname), NULL, 0,\n                     flags != 0 ? flags : NI_NAMEREQD);\n    if (rc != 0) {\n        *hostname = NULL;\n\n#ifndef WIN32\n        /* something went wrong. Look at the EAI_ error code */\n",
                      "markdown": "`                     tmphostname, sizeof(tmphostname), NULL, 0,\n                     flags != 0 ? flags : NI_NAMEREQD);\n    if (rc != 0) {\n        *hostname = NULL;\n\n#ifndef WIN32\n        /* something went wrong. Look at the EAI_ error code */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 770,
                  "startColumn": 58,
                  "endLine": 770,
                  "endColumn": 66,
                  "snippet": {
                    "text": "    }\n#if APR_HAVE_SOCKADDR_UN\n    else if (sockaddr->family == APR_UNIX) {\n        *hostname = apr_pstrdup(sockaddr->pool, sockaddr->hostname);\n        return APR_SUCCESS;\n    }\n#endif\n",
                    "rendered": {
                      "text": "    }\n#if APR_HAVE_SOCKADDR_UN\n    else if (sockaddr->family == APR_UNIX) {\n        *hostname = apr_pstrdup(sockaddr->pool, sockaddr->hostname);\n        return APR_SUCCESS;\n    }\n#endif\n",
                      "markdown": "`    }\n#if APR_HAVE_SOCKADDR_UN\n    else if (sockaddr->family == APR_UNIX) {\n        *hostname = apr_pstrdup(sockaddr->pool, sockaddr->hostname);\n        return APR_SUCCESS;\n    }\n#endif\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 770,
                  "startColumn": 9,
                  "endLine": 770,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    }\n#if APR_HAVE_SOCKADDR_UN\n    else if (sockaddr->family == APR_UNIX) {\n        *hostname = apr_pstrdup(sockaddr->pool, sockaddr->hostname);\n        return APR_SUCCESS;\n    }\n#endif\n",
                    "rendered": {
                      "text": "    }\n#if APR_HAVE_SOCKADDR_UN\n    else if (sockaddr->family == APR_UNIX) {\n        *hostname = apr_pstrdup(sockaddr->pool, sockaddr->hostname);\n        return APR_SUCCESS;\n    }\n#endif\n",
                      "markdown": "`    }\n#if APR_HAVE_SOCKADDR_UN\n    else if (sockaddr->family == APR_UNIX) {\n        *hostname = apr_pstrdup(sockaddr->pool, sockaddr->hostname);\n        return APR_SUCCESS;\n    }\n#endif\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 730,
                  "startColumn": 49,
                  "endLine": 730,
                  "endColumn": 57,
                  "snippet": {
                    "text": "    return APR_SUCCESS;\n}\n\nAPR_DECLARE(apr_status_t) apr_getnameinfo(char **hostname,\n                                          apr_sockaddr_t *sockaddr,\n                                          apr_int32_t flags)\n{\n",
                    "rendered": {
                      "text": "    return APR_SUCCESS;\n}\n\nAPR_DECLARE(apr_status_t) apr_getnameinfo(char **hostname,\n                                          apr_sockaddr_t *sockaddr,\n                                          apr_int32_t flags)\n{\n",
                      "markdown": "`    return APR_SUCCESS;\n}\n\nAPR_DECLARE(apr_status_t) apr_getnameinfo(char **hostname,\n                                          apr_sockaddr_t *sockaddr,\n                                          apr_int32_t flags)\n{\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 713,
                  "startColumn": 38,
                  "endLine": 713,
                  "endColumn": 46,
                  "snippet": {
                    "text": "                d->hostname = apr_pstrdup(p, s->hostname);\n            }\n            else {\n                d->hostname = (*dst)->hostname;\n            }\n        }\n        if (s->servname) {\n",
                    "rendered": {
                      "text": "                d->hostname = apr_pstrdup(p, s->hostname);\n            }\n            else {\n                d->hostname = (*dst)->hostname;\n            }\n        }\n        if (s->servname) {\n",
                      "markdown": "`                d->hostname = apr_pstrdup(p, s->hostname);\n            }\n            else {\n                d->hostname = (*dst)->hostname;\n            }\n        }\n        if (s->servname) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 713,
                  "startColumn": 19,
                  "endLine": 713,
                  "endColumn": 27,
                  "snippet": {
                    "text": "                d->hostname = apr_pstrdup(p, s->hostname);\n            }\n            else {\n                d->hostname = (*dst)->hostname;\n            }\n        }\n        if (s->servname) {\n",
                    "rendered": {
                      "text": "                d->hostname = apr_pstrdup(p, s->hostname);\n            }\n            else {\n                d->hostname = (*dst)->hostname;\n            }\n        }\n        if (s->servname) {\n",
                      "markdown": "`                d->hostname = apr_pstrdup(p, s->hostname);\n            }\n            else {\n                d->hostname = (*dst)->hostname;\n            }\n        }\n        if (s->servname) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 710,
                  "startColumn": 48,
                  "endLine": 710,
                  "endColumn": 56,
                  "snippet": {
                    "text": "        }\n        if (s->hostname) {\n            if (s == src || s->hostname != src->hostname) {\n                d->hostname = apr_pstrdup(p, s->hostname);\n            }\n            else {\n                d->hostname = (*dst)->hostname;\n",
                    "rendered": {
                      "text": "        }\n        if (s->hostname) {\n            if (s == src || s->hostname != src->hostname) {\n                d->hostname = apr_pstrdup(p, s->hostname);\n            }\n            else {\n                d->hostname = (*dst)->hostname;\n",
                      "markdown": "`        }\n        if (s->hostname) {\n            if (s == src || s->hostname != src->hostname) {\n                d->hostname = apr_pstrdup(p, s->hostname);\n            }\n            else {\n                d->hostname = (*dst)->hostname;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 710,
                  "startColumn": 19,
                  "endLine": 710,
                  "endColumn": 27,
                  "snippet": {
                    "text": "        }\n        if (s->hostname) {\n            if (s == src || s->hostname != src->hostname) {\n                d->hostname = apr_pstrdup(p, s->hostname);\n            }\n            else {\n                d->hostname = (*dst)->hostname;\n",
                    "rendered": {
                      "text": "        }\n        if (s->hostname) {\n            if (s == src || s->hostname != src->hostname) {\n                d->hostname = apr_pstrdup(p, s->hostname);\n            }\n            else {\n                d->hostname = (*dst)->hostname;\n",
                      "markdown": "`        }\n        if (s->hostname) {\n            if (s == src || s->hostname != src->hostname) {\n                d->hostname = apr_pstrdup(p, s->hostname);\n            }\n            else {\n                d->hostname = (*dst)->hostname;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 709,
                  "startColumn": 48,
                  "endLine": 709,
                  "endColumn": 56,
                  "snippet": {
                    "text": "            d = d->next = apr_pmemdup(p, s, sizeof *s);\n        }\n        if (s->hostname) {\n            if (s == src || s->hostname != src->hostname) {\n                d->hostname = apr_pstrdup(p, s->hostname);\n            }\n            else {\n",
                    "rendered": {
                      "text": "            d = d->next = apr_pmemdup(p, s, sizeof *s);\n        }\n        if (s->hostname) {\n            if (s == src || s->hostname != src->hostname) {\n                d->hostname = apr_pstrdup(p, s->hostname);\n            }\n            else {\n",
                      "markdown": "`            d = d->next = apr_pmemdup(p, s, sizeof *s);\n        }\n        if (s->hostname) {\n            if (s == src || s->hostname != src->hostname) {\n                d->hostname = apr_pstrdup(p, s->hostname);\n            }\n            else {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 709,
                  "startColumn": 31,
                  "endLine": 709,
                  "endColumn": 39,
                  "snippet": {
                    "text": "            d = d->next = apr_pmemdup(p, s, sizeof *s);\n        }\n        if (s->hostname) {\n            if (s == src || s->hostname != src->hostname) {\n                d->hostname = apr_pstrdup(p, s->hostname);\n            }\n            else {\n",
                    "rendered": {
                      "text": "            d = d->next = apr_pmemdup(p, s, sizeof *s);\n        }\n        if (s->hostname) {\n            if (s == src || s->hostname != src->hostname) {\n                d->hostname = apr_pstrdup(p, s->hostname);\n            }\n            else {\n",
                      "markdown": "`            d = d->next = apr_pmemdup(p, s, sizeof *s);\n        }\n        if (s->hostname) {\n            if (s == src || s->hostname != src->hostname) {\n                d->hostname = apr_pstrdup(p, s->hostname);\n            }\n            else {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 708,
                  "startColumn": 15,
                  "endLine": 708,
                  "endColumn": 23,
                  "snippet": {
                    "text": "        else {\n            d = d->next = apr_pmemdup(p, s, sizeof *s);\n        }\n        if (s->hostname) {\n            if (s == src || s->hostname != src->hostname) {\n                d->hostname = apr_pstrdup(p, s->hostname);\n            }\n",
                    "rendered": {
                      "text": "        else {\n            d = d->next = apr_pmemdup(p, s, sizeof *s);\n        }\n        if (s->hostname) {\n            if (s == src || s->hostname != src->hostname) {\n                d->hostname = apr_pstrdup(p, s->hostname);\n            }\n",
                      "markdown": "`        else {\n            d = d->next = apr_pmemdup(p, s, sizeof *s);\n        }\n        if (s->hostname) {\n            if (s == src || s->hostname != src->hostname) {\n                d->hostname = apr_pstrdup(p, s->hostname);\n            }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 691,
                  "startColumn": 30,
                  "endLine": 691,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    }\n#endif\n\n    return find_addresses(sa, hostname, family, port, flags, p);\n}\n\nAPR_DECLARE(apr_status_t) apr_sockaddr_info_copy(apr_sockaddr_t **dst,\n",
                    "rendered": {
                      "text": "    }\n#endif\n\n    return find_addresses(sa, hostname, family, port, flags, p);\n}\n\nAPR_DECLARE(apr_status_t) apr_sockaddr_info_copy(apr_sockaddr_t **dst,\n",
                      "markdown": "`    }\n#endif\n\n    return find_addresses(sa, hostname, family, port, flags, p);\n}\n\nAPR_DECLARE(apr_status_t) apr_sockaddr_info_copy(apr_sockaddr_t **dst,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 663,
                  "startColumn": 45,
                  "endLine": 663,
                  "endColumn": 53,
                  "snippet": {
                    "text": "            (*sa)->pool = p;\n            apr_cpystrn((*sa)->sa.unx.sun_path, hostname,\n                        sizeof((*sa)->sa.unx.sun_path));\n            (*sa)->hostname = apr_pstrdup(p, hostname);\n            (*sa)->family = APR_UNIX;\n            (*sa)->sa.unx.sun_family = APR_UNIX;\n            (*sa)->salen = sizeof(struct sockaddr_un);\n",
                    "rendered": {
                      "text": "            (*sa)->pool = p;\n            apr_cpystrn((*sa)->sa.unx.sun_path, hostname,\n                        sizeof((*sa)->sa.unx.sun_path));\n            (*sa)->hostname = apr_pstrdup(p, hostname);\n            (*sa)->family = APR_UNIX;\n            (*sa)->sa.unx.sun_family = APR_UNIX;\n            (*sa)->salen = sizeof(struct sockaddr_un);\n",
                      "markdown": "`            (*sa)->pool = p;\n            apr_cpystrn((*sa)->sa.unx.sun_path, hostname,\n                        sizeof((*sa)->sa.unx.sun_path));\n            (*sa)->hostname = apr_pstrdup(p, hostname);\n            (*sa)->family = APR_UNIX;\n            (*sa)->sa.unx.sun_family = APR_UNIX;\n            (*sa)->salen = sizeof(struct sockaddr_un);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 663,
                  "startColumn": 19,
                  "endLine": 663,
                  "endColumn": 27,
                  "snippet": {
                    "text": "            (*sa)->pool = p;\n            apr_cpystrn((*sa)->sa.unx.sun_path, hostname,\n                        sizeof((*sa)->sa.unx.sun_path));\n            (*sa)->hostname = apr_pstrdup(p, hostname);\n            (*sa)->family = APR_UNIX;\n            (*sa)->sa.unx.sun_family = APR_UNIX;\n            (*sa)->salen = sizeof(struct sockaddr_un);\n",
                    "rendered": {
                      "text": "            (*sa)->pool = p;\n            apr_cpystrn((*sa)->sa.unx.sun_path, hostname,\n                        sizeof((*sa)->sa.unx.sun_path));\n            (*sa)->hostname = apr_pstrdup(p, hostname);\n            (*sa)->family = APR_UNIX;\n            (*sa)->sa.unx.sun_family = APR_UNIX;\n            (*sa)->salen = sizeof(struct sockaddr_un);\n",
                      "markdown": "`            (*sa)->pool = p;\n            apr_cpystrn((*sa)->sa.unx.sun_path, hostname,\n                        sizeof((*sa)->sa.unx.sun_path));\n            (*sa)->hostname = apr_pstrdup(p, hostname);\n            (*sa)->family = APR_UNIX;\n            (*sa)->sa.unx.sun_family = APR_UNIX;\n            (*sa)->salen = sizeof(struct sockaddr_un);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 661,
                  "startColumn": 48,
                  "endLine": 661,
                  "endColumn": 56,
                  "snippet": {
                    "text": "        if (hostname) {\n            *sa = apr_pcalloc(p, sizeof(apr_sockaddr_t));\n            (*sa)->pool = p;\n            apr_cpystrn((*sa)->sa.unx.sun_path, hostname,\n                        sizeof((*sa)->sa.unx.sun_path));\n            (*sa)->hostname = apr_pstrdup(p, hostname);\n            (*sa)->family = APR_UNIX;\n",
                    "rendered": {
                      "text": "        if (hostname) {\n            *sa = apr_pcalloc(p, sizeof(apr_sockaddr_t));\n            (*sa)->pool = p;\n            apr_cpystrn((*sa)->sa.unx.sun_path, hostname,\n                        sizeof((*sa)->sa.unx.sun_path));\n            (*sa)->hostname = apr_pstrdup(p, hostname);\n            (*sa)->family = APR_UNIX;\n",
                      "markdown": "`        if (hostname) {\n            *sa = apr_pcalloc(p, sizeof(apr_sockaddr_t));\n            (*sa)->pool = p;\n            apr_cpystrn((*sa)->sa.unx.sun_path, hostname,\n                        sizeof((*sa)->sa.unx.sun_path));\n            (*sa)->hostname = apr_pstrdup(p, hostname);\n            (*sa)->family = APR_UNIX;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 658,
                  "startColumn": 12,
                  "endLine": 658,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        family = APR_UNIX;\n    if (family == APR_UNIX) {\n#if APR_HAVE_SOCKADDR_UN\n        if (hostname) {\n            *sa = apr_pcalloc(p, sizeof(apr_sockaddr_t));\n            (*sa)->pool = p;\n            apr_cpystrn((*sa)->sa.unx.sun_path, hostname,\n",
                    "rendered": {
                      "text": "        family = APR_UNIX;\n    if (family == APR_UNIX) {\n#if APR_HAVE_SOCKADDR_UN\n        if (hostname) {\n            *sa = apr_pcalloc(p, sizeof(apr_sockaddr_t));\n            (*sa)->pool = p;\n            apr_cpystrn((*sa)->sa.unx.sun_path, hostname,\n",
                      "markdown": "`        family = APR_UNIX;\n    if (family == APR_UNIX) {\n#if APR_HAVE_SOCKADDR_UN\n        if (hostname) {\n            *sa = apr_pcalloc(p, sizeof(apr_sockaddr_t));\n            (*sa)->pool = p;\n            apr_cpystrn((*sa)->sa.unx.sun_path, hostname,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 654,
                  "startColumn": 45,
                  "endLine": 654,
                  "endColumn": 53,
                  "snippet": {
                    "text": "        }\n#endif\n    }\n    if (family == APR_UNSPEC && hostname && *hostname == '/')\n        family = APR_UNIX;\n    if (family == APR_UNIX) {\n#if APR_HAVE_SOCKADDR_UN\n",
                    "rendered": {
                      "text": "        }\n#endif\n    }\n    if (family == APR_UNSPEC && hostname && *hostname == '/')\n        family = APR_UNIX;\n    if (family == APR_UNIX) {\n#if APR_HAVE_SOCKADDR_UN\n",
                      "markdown": "`        }\n#endif\n    }\n    if (family == APR_UNSPEC && hostname && *hostname == '/')\n        family = APR_UNIX;\n    if (family == APR_UNIX) {\n#if APR_HAVE_SOCKADDR_UN\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 654,
                  "startColumn": 32,
                  "endLine": 654,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        }\n#endif\n    }\n    if (family == APR_UNSPEC && hostname && *hostname == '/')\n        family = APR_UNIX;\n    if (family == APR_UNIX) {\n#if APR_HAVE_SOCKADDR_UN\n",
                    "rendered": {
                      "text": "        }\n#endif\n    }\n    if (family == APR_UNSPEC && hostname && *hostname == '/')\n        family = APR_UNIX;\n    if (family == APR_UNIX) {\n#if APR_HAVE_SOCKADDR_UN\n",
                      "markdown": "`        }\n#endif\n    }\n    if (family == APR_UNSPEC && hostname && *hostname == '/')\n        family = APR_UNIX;\n    if (family == APR_UNIX) {\n#if APR_HAVE_SOCKADDR_UN\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 643,
                  "startColumn": 13,
                  "endLine": 643,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    *sa = NULL;\n\n    if ((masked = flags & (APR_IPV4_ADDR_OK | APR_IPV6_ADDR_OK))) {\n        if (!hostname ||\n            family != APR_UNSPEC ||\n            masked == (APR_IPV4_ADDR_OK | APR_IPV6_ADDR_OK)) {\n            return APR_EINVAL;\n",
                    "rendered": {
                      "text": "    *sa = NULL;\n\n    if ((masked = flags & (APR_IPV4_ADDR_OK | APR_IPV6_ADDR_OK))) {\n        if (!hostname ||\n            family != APR_UNSPEC ||\n            masked == (APR_IPV4_ADDR_OK | APR_IPV6_ADDR_OK)) {\n            return APR_EINVAL;\n",
                      "markdown": "`    *sa = NULL;\n\n    if ((masked = flags & (APR_IPV4_ADDR_OK | APR_IPV6_ADDR_OK))) {\n        if (!hostname ||\n            family != APR_UNSPEC ||\n            masked == (APR_IPV4_ADDR_OK | APR_IPV6_ADDR_OK)) {\n            return APR_EINVAL;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 635,
                  "startColumn": 60,
                  "endLine": 635,
                  "endColumn": 68,
                  "snippet": {
                    "text": "#endif /* end of !HAVE_GETADDRINFO code */\n\nAPR_DECLARE(apr_status_t) apr_sockaddr_info_get(apr_sockaddr_t **sa,\n                                                const char *hostname,\n                                                apr_int32_t family, apr_port_t port,\n                                                apr_int32_t flags, apr_pool_t *p)\n{\n",
                    "rendered": {
                      "text": "#endif /* end of !HAVE_GETADDRINFO code */\n\nAPR_DECLARE(apr_status_t) apr_sockaddr_info_get(apr_sockaddr_t **sa,\n                                                const char *hostname,\n                                                apr_int32_t family, apr_port_t port,\n                                                apr_int32_t flags, apr_pool_t *p)\n{\n",
                      "markdown": "`#endif /* end of !HAVE_GETADDRINFO code */\n\nAPR_DECLARE(apr_status_t) apr_sockaddr_info_get(apr_sockaddr_t **sa,\n                                                const char *hostname,\n                                                apr_int32_t family, apr_port_t port,\n                                                apr_int32_t flags, apr_pool_t *p)\n{\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 616,
                  "startColumn": 40,
                  "endLine": 616,
                  "endColumn": 48,
                  "snippet": {
                    "text": "            *sa = new_sa;\n        }\n        else {\n            new_sa->hostname = prev_sa->hostname;\n            prev_sa->next = new_sa;\n        }\n\n",
                    "rendered": {
                      "text": "            *sa = new_sa;\n        }\n        else {\n            new_sa->hostname = prev_sa->hostname;\n            prev_sa->next = new_sa;\n        }\n\n",
                      "markdown": "`            *sa = new_sa;\n        }\n        else {\n            new_sa->hostname = prev_sa->hostname;\n            prev_sa->next = new_sa;\n        }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 616,
                  "startColumn": 20,
                  "endLine": 616,
                  "endColumn": 28,
                  "snippet": {
                    "text": "            *sa = new_sa;\n        }\n        else {\n            new_sa->hostname = prev_sa->hostname;\n            prev_sa->next = new_sa;\n        }\n\n",
                    "rendered": {
                      "text": "            *sa = new_sa;\n        }\n        else {\n            new_sa->hostname = prev_sa->hostname;\n            prev_sa->next = new_sa;\n        }\n\n",
                      "markdown": "`            *sa = new_sa;\n        }\n        else {\n            new_sa->hostname = prev_sa->hostname;\n            prev_sa->next = new_sa;\n        }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 611,
                  "startColumn": 55,
                  "endLine": 611,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\n        if (!prev_sa) { /* first element in new list */\n            if (orig_hostname) {\n                new_sa->hostname = apr_pstrdup(p, orig_hostname);\n            }\n            *sa = new_sa;\n        }\n",
                    "rendered": {
                      "text": "\n        if (!prev_sa) { /* first element in new list */\n            if (orig_hostname) {\n                new_sa->hostname = apr_pstrdup(p, orig_hostname);\n            }\n            *sa = new_sa;\n        }\n",
                      "markdown": "`\n        if (!prev_sa) { /* first element in new list */\n            if (orig_hostname) {\n                new_sa->hostname = apr_pstrdup(p, orig_hostname);\n            }\n            *sa = new_sa;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 611,
                  "startColumn": 24,
                  "endLine": 611,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n        if (!prev_sa) { /* first element in new list */\n            if (orig_hostname) {\n                new_sa->hostname = apr_pstrdup(p, orig_hostname);\n            }\n            *sa = new_sa;\n        }\n",
                    "rendered": {
                      "text": "\n        if (!prev_sa) { /* first element in new list */\n            if (orig_hostname) {\n                new_sa->hostname = apr_pstrdup(p, orig_hostname);\n            }\n            *sa = new_sa;\n        }\n",
                      "markdown": "`\n        if (!prev_sa) { /* first element in new list */\n            if (orig_hostname) {\n                new_sa->hostname = apr_pstrdup(p, orig_hostname);\n            }\n            *sa = new_sa;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 610,
                  "startColumn": 21,
                  "endLine": 610,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        apr_sockaddr_vars_set(new_sa, AF_INET, port);\n\n        if (!prev_sa) { /* first element in new list */\n            if (orig_hostname) {\n                new_sa->hostname = apr_pstrdup(p, orig_hostname);\n            }\n            *sa = new_sa;\n",
                    "rendered": {
                      "text": "        apr_sockaddr_vars_set(new_sa, AF_INET, port);\n\n        if (!prev_sa) { /* first element in new list */\n            if (orig_hostname) {\n                new_sa->hostname = apr_pstrdup(p, orig_hostname);\n            }\n            *sa = new_sa;\n",
                      "markdown": "`        apr_sockaddr_vars_set(new_sa, AF_INET, port);\n\n        if (!prev_sa) { /* first element in new list */\n            if (orig_hostname) {\n                new_sa->hostname = apr_pstrdup(p, orig_hostname);\n            }\n            *sa = new_sa;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 588,
                  "startColumn": 27,
                  "endLine": 588,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        }\n#endif /* !defined(GETHOSTBYNAME_R_HOSTENT_DATA) */\n#else\n        hp = gethostbyname(hostname);\n#endif\n\n        if (!hp) {\n",
                    "rendered": {
                      "text": "        }\n#endif /* !defined(GETHOSTBYNAME_R_HOSTENT_DATA) */\n#else\n        hp = gethostbyname(hostname);\n#endif\n\n        if (!hp) {\n",
                      "markdown": "`        }\n#endif /* !defined(GETHOSTBYNAME_R_HOSTENT_DATA) */\n#else\n        hp = gethostbyname(hostname);\n#endif\n\n        if (!hp) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 580,
                  "startColumn": 29,
                  "endLine": 580,
                  "endColumn": 37,
                  "snippet": {
                    "text": "                        &hp, &hosterror);\n#else\n        /* Solaris, Irix et alia */\n        hp = gethostbyname_r(hostname, &hs, tmp, GETHOSTBYNAME_BUFLEN - 1,\n                             &hosterror);\n#endif /* !defined(GETHOSTBYNAME_R_GLIBC2) */\n        if (!hp) {\n",
                    "rendered": {
                      "text": "                        &hp, &hosterror);\n#else\n        /* Solaris, Irix et alia */\n        hp = gethostbyname_r(hostname, &hs, tmp, GETHOSTBYNAME_BUFLEN - 1,\n                             &hosterror);\n#endif /* !defined(GETHOSTBYNAME_R_GLIBC2) */\n        if (!hp) {\n",
                      "markdown": "`                        &hp, &hosterror);\n#else\n        /* Solaris, Irix et alia */\n        hp = gethostbyname_r(hostname, &hs, tmp, GETHOSTBYNAME_BUFLEN - 1,\n                             &hosterror);\n#endif /* !defined(GETHOSTBYNAME_R_GLIBC2) */\n        if (!hp) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 576,
                  "startColumn": 24,
                  "endLine": 576,
                  "endColumn": 32,
                  "snippet": {
                    "text": "#else\n#if defined(GETHOSTBYNAME_R_GLIBC2)\n        /* Linux glibc2+ */\n        gethostbyname_r(hostname, &hs, tmp, GETHOSTBYNAME_BUFLEN - 1,\n                        &hp, &hosterror);\n#else\n        /* Solaris, Irix et alia */\n",
                    "rendered": {
                      "text": "#else\n#if defined(GETHOSTBYNAME_R_GLIBC2)\n        /* Linux glibc2+ */\n        gethostbyname_r(hostname, &hs, tmp, GETHOSTBYNAME_BUFLEN - 1,\n                        &hp, &hosterror);\n#else\n        /* Solaris, Irix et alia */\n",
                      "markdown": "`#else\n#if defined(GETHOSTBYNAME_R_GLIBC2)\n        /* Linux glibc2+ */\n        gethostbyname_r(hostname, &hs, tmp, GETHOSTBYNAME_BUFLEN - 1,\n                        &hp, &hosterror);\n#else\n        /* Solaris, Irix et alia */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 571,
                  "startColumn": 24,
                  "endLine": 571,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    defined(HAVE_GETHOSTBYNAME_R) && !defined(BEOS)\n#if defined(GETHOSTBYNAME_R_HOSTENT_DATA)\n        /* AIX, HP/UX, D/UX et alia */\n        gethostbyname_r(hostname, &hs, &hd);\n        hp = &hs;\n#else\n#if defined(GETHOSTBYNAME_R_GLIBC2)\n",
                    "rendered": {
                      "text": "    defined(HAVE_GETHOSTBYNAME_R) && !defined(BEOS)\n#if defined(GETHOSTBYNAME_R_HOSTENT_DATA)\n        /* AIX, HP/UX, D/UX et alia */\n        gethostbyname_r(hostname, &hs, &hd);\n        hp = &hs;\n#else\n#if defined(GETHOSTBYNAME_R_GLIBC2)\n",
                      "markdown": "`    defined(HAVE_GETHOSTBYNAME_R) && !defined(BEOS)\n#if defined(GETHOSTBYNAME_R_HOSTENT_DATA)\n        /* AIX, HP/UX, D/UX et alia */\n        gethostbyname_r(hostname, &hs, &hd);\n        hp = &hs;\n#else\n#if defined(GETHOSTBYNAME_R_GLIBC2)\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 560,
                  "startColumn": 34,
                  "endLine": 560,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    if (*hostname >= '0' && *hostname <= '9' &&\n        strspn(hostname, \"0123456789.\") == strlen(hostname)) {\n\n        ipaddr.s_addr = inet_addr(hostname);\n        addr_list[0] = (char *)&ipaddr;\n        addr_list[1] = NULL; /* just one IP in list */\n        hs.h_addr_list = (char **)addr_list;\n",
                    "rendered": {
                      "text": "    if (*hostname >= '0' && *hostname <= '9' &&\n        strspn(hostname, \"0123456789.\") == strlen(hostname)) {\n\n        ipaddr.s_addr = inet_addr(hostname);\n        addr_list[0] = (char *)&ipaddr;\n        addr_list[1] = NULL; /* just one IP in list */\n        hs.h_addr_list = (char **)addr_list;\n",
                      "markdown": "`    if (*hostname >= '0' && *hostname <= '9' &&\n        strspn(hostname, \"0123456789.\") == strlen(hostname)) {\n\n        ipaddr.s_addr = inet_addr(hostname);\n        addr_list[0] = (char *)&ipaddr;\n        addr_list[1] = NULL; /* just one IP in list */\n        hs.h_addr_list = (char **)addr_list;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 558,
                  "startColumn": 50,
                  "endLine": 558,
                  "endColumn": 58,
                  "snippet": {
                    "text": "    }\n\n    if (*hostname >= '0' && *hostname <= '9' &&\n        strspn(hostname, \"0123456789.\") == strlen(hostname)) {\n\n        ipaddr.s_addr = inet_addr(hostname);\n        addr_list[0] = (char *)&ipaddr;\n",
                    "rendered": {
                      "text": "    }\n\n    if (*hostname >= '0' && *hostname <= '9' &&\n        strspn(hostname, \"0123456789.\") == strlen(hostname)) {\n\n        ipaddr.s_addr = inet_addr(hostname);\n        addr_list[0] = (char *)&ipaddr;\n",
                      "markdown": "`    }\n\n    if (*hostname >= '0' && *hostname <= '9' &&\n        strspn(hostname, \"0123456789.\") == strlen(hostname)) {\n\n        ipaddr.s_addr = inet_addr(hostname);\n        addr_list[0] = (char *)&ipaddr;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 558,
                  "startColumn": 15,
                  "endLine": 558,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    }\n\n    if (*hostname >= '0' && *hostname <= '9' &&\n        strspn(hostname, \"0123456789.\") == strlen(hostname)) {\n\n        ipaddr.s_addr = inet_addr(hostname);\n        addr_list[0] = (char *)&ipaddr;\n",
                    "rendered": {
                      "text": "    }\n\n    if (*hostname >= '0' && *hostname <= '9' &&\n        strspn(hostname, \"0123456789.\") == strlen(hostname)) {\n\n        ipaddr.s_addr = inet_addr(hostname);\n        addr_list[0] = (char *)&ipaddr;\n",
                      "markdown": "`    }\n\n    if (*hostname >= '0' && *hostname <= '9' &&\n        strspn(hostname, \"0123456789.\") == strlen(hostname)) {\n\n        ipaddr.s_addr = inet_addr(hostname);\n        addr_list[0] = (char *)&ipaddr;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 557,
                  "startColumn": 29,
                  "endLine": 557,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        hostname = \"0.0.0.0\";\n    }\n\n    if (*hostname >= '0' && *hostname <= '9' &&\n        strspn(hostname, \"0123456789.\") == strlen(hostname)) {\n\n        ipaddr.s_addr = inet_addr(hostname);\n",
                    "rendered": {
                      "text": "        hostname = \"0.0.0.0\";\n    }\n\n    if (*hostname >= '0' && *hostname <= '9' &&\n        strspn(hostname, \"0123456789.\") == strlen(hostname)) {\n\n        ipaddr.s_addr = inet_addr(hostname);\n",
                      "markdown": "`        hostname = \"0.0.0.0\";\n    }\n\n    if (*hostname >= '0' && *hostname <= '9' &&\n        strspn(hostname, \"0123456789.\") == strlen(hostname)) {\n\n        ipaddr.s_addr = inet_addr(hostname);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 557,
                  "startColumn": 9,
                  "endLine": 557,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        hostname = \"0.0.0.0\";\n    }\n\n    if (*hostname >= '0' && *hostname <= '9' &&\n        strspn(hostname, \"0123456789.\") == strlen(hostname)) {\n\n        ipaddr.s_addr = inet_addr(hostname);\n",
                    "rendered": {
                      "text": "        hostname = \"0.0.0.0\";\n    }\n\n    if (*hostname >= '0' && *hostname <= '9' &&\n        strspn(hostname, \"0123456789.\") == strlen(hostname)) {\n\n        ipaddr.s_addr = inet_addr(hostname);\n",
                      "markdown": "`        hostname = \"0.0.0.0\";\n    }\n\n    if (*hostname >= '0' && *hostname <= '9' &&\n        strspn(hostname, \"0123456789.\") == strlen(hostname)) {\n\n        ipaddr.s_addr = inet_addr(hostname);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 554,
                  "startColumn": 8,
                  "endLine": 554,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\n    if (hostname == NULL) {\n        /* if we are given a NULL hostname, assume '0.0.0.0' */\n        hostname = \"0.0.0.0\";\n    }\n\n    if (*hostname >= '0' && *hostname <= '9' &&\n",
                    "rendered": {
                      "text": "\n    if (hostname == NULL) {\n        /* if we are given a NULL hostname, assume '0.0.0.0' */\n        hostname = \"0.0.0.0\";\n    }\n\n    if (*hostname >= '0' && *hostname <= '9' &&\n",
                      "markdown": "`\n    if (hostname == NULL) {\n        /* if we are given a NULL hostname, assume '0.0.0.0' */\n        hostname = \"0.0.0.0\";\n    }\n\n    if (*hostname >= '0' && *hostname <= '9' &&\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 552,
                  "startColumn": 8,
                  "endLine": 552,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    char *addr_list[2];\n    const char *orig_hostname = hostname;\n\n    if (hostname == NULL) {\n        /* if we are given a NULL hostname, assume '0.0.0.0' */\n        hostname = \"0.0.0.0\";\n    }\n",
                    "rendered": {
                      "text": "    char *addr_list[2];\n    const char *orig_hostname = hostname;\n\n    if (hostname == NULL) {\n        /* if we are given a NULL hostname, assume '0.0.0.0' */\n        hostname = \"0.0.0.0\";\n    }\n",
                      "markdown": "`    char *addr_list[2];\n    const char *orig_hostname = hostname;\n\n    if (hostname == NULL) {\n        /* if we are given a NULL hostname, assume '0.0.0.0' */\n        hostname = \"0.0.0.0\";\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 550,
                  "startColumn": 32,
                  "endLine": 550,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    struct hostent hs;\n    struct in_addr ipaddr;\n    char *addr_list[2];\n    const char *orig_hostname = hostname;\n\n    if (hostname == NULL) {\n        /* if we are given a NULL hostname, assume '0.0.0.0' */\n",
                    "rendered": {
                      "text": "    struct hostent hs;\n    struct in_addr ipaddr;\n    char *addr_list[2];\n    const char *orig_hostname = hostname;\n\n    if (hostname == NULL) {\n        /* if we are given a NULL hostname, assume '0.0.0.0' */\n",
                      "markdown": "`    struct hostent hs;\n    struct in_addr ipaddr;\n    char *addr_list[2];\n    const char *orig_hostname = hostname;\n\n    if (hostname == NULL) {\n        /* if we are given a NULL hostname, assume '0.0.0.0' */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 550,
                  "startColumn": 21,
                  "endLine": 550,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    struct hostent hs;\n    struct in_addr ipaddr;\n    char *addr_list[2];\n    const char *orig_hostname = hostname;\n\n    if (hostname == NULL) {\n        /* if we are given a NULL hostname, assume '0.0.0.0' */\n",
                    "rendered": {
                      "text": "    struct hostent hs;\n    struct in_addr ipaddr;\n    char *addr_list[2];\n    const char *orig_hostname = hostname;\n\n    if (hostname == NULL) {\n        /* if we are given a NULL hostname, assume '0.0.0.0' */\n",
                      "markdown": "`    struct hostent hs;\n    struct in_addr ipaddr;\n    char *addr_list[2];\n    const char *orig_hostname = hostname;\n\n    if (hostname == NULL) {\n        /* if we are given a NULL hostname, assume '0.0.0.0' */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 529,
                  "startColumn": 47,
                  "endLine": 529,
                  "endColumn": 55,
                  "snippet": {
                    "text": "#else /* end of HAVE_GETADDRINFO code */\n\nstatic apr_status_t find_addresses(apr_sockaddr_t **sa,\n                                   const char *hostname, apr_int32_t family,\n                                   apr_port_t port, apr_int32_t flags,\n                                   apr_pool_t *p)\n{\n",
                    "rendered": {
                      "text": "#else /* end of HAVE_GETADDRINFO code */\n\nstatic apr_status_t find_addresses(apr_sockaddr_t **sa,\n                                   const char *hostname, apr_int32_t family,\n                                   apr_port_t port, apr_int32_t flags,\n                                   apr_pool_t *p)\n{\n",
                      "markdown": "`#else /* end of HAVE_GETADDRINFO code */\n\nstatic apr_status_t find_addresses(apr_sockaddr_t **sa,\n                                   const char *hostname, apr_int32_t family,\n                                   apr_port_t port, apr_int32_t flags,\n                                   apr_pool_t *p)\n{\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 523,
                  "startColumn": 29,
                  "endLine": 523,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    }\n#endif\n\n    return call_resolver(sa, hostname, family, port, flags, p);\n}\n\n#else /* end of HAVE_GETADDRINFO code */\n",
                    "rendered": {
                      "text": "    }\n#endif\n\n    return call_resolver(sa, hostname, family, port, flags, p);\n}\n\n#else /* end of HAVE_GETADDRINFO code */\n",
                      "markdown": "`    }\n#endif\n\n    return call_resolver(sa, hostname, family, port, flags, p);\n}\n\n#else /* end of HAVE_GETADDRINFO code */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 512,
                  "startColumn": 47,
                  "endLine": 512,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    }\n#if APR_HAVE_IPV6\n    else if (flags & APR_IPV6_ADDR_OK) {\n        apr_status_t error = call_resolver(sa, hostname, AF_INET6, port, flags, p);\n\n        if (error) {\n            family = AF_INET; /* try again */\n",
                    "rendered": {
                      "text": "    }\n#if APR_HAVE_IPV6\n    else if (flags & APR_IPV6_ADDR_OK) {\n        apr_status_t error = call_resolver(sa, hostname, AF_INET6, port, flags, p);\n\n        if (error) {\n            family = AF_INET; /* try again */\n",
                      "markdown": "`    }\n#if APR_HAVE_IPV6\n    else if (flags & APR_IPV6_ADDR_OK) {\n        apr_status_t error = call_resolver(sa, hostname, AF_INET6, port, flags, p);\n\n        if (error) {\n            family = AF_INET; /* try again */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 500,
                  "startColumn": 47,
                  "endLine": 500,
                  "endColumn": 55,
                  "snippet": {
                    "text": "                                   apr_pool_t *p)\n{\n    if (flags & APR_IPV4_ADDR_OK) {\n        apr_status_t error = call_resolver(sa, hostname, AF_INET, port, flags, p);\n\n#if APR_HAVE_IPV6\n        if (error) {\n",
                    "rendered": {
                      "text": "                                   apr_pool_t *p)\n{\n    if (flags & APR_IPV4_ADDR_OK) {\n        apr_status_t error = call_resolver(sa, hostname, AF_INET, port, flags, p);\n\n#if APR_HAVE_IPV6\n        if (error) {\n",
                      "markdown": "`                                   apr_pool_t *p)\n{\n    if (flags & APR_IPV4_ADDR_OK) {\n        apr_status_t error = call_resolver(sa, hostname, AF_INET, port, flags, p);\n\n#if APR_HAVE_IPV6\n        if (error) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 495,
                  "startColumn": 47,
                  "endLine": 495,
                  "endColumn": 55,
                  "snippet": {
                    "text": "}\n\nstatic apr_status_t find_addresses(apr_sockaddr_t **sa,\n                                   const char *hostname, apr_int32_t family,\n                                   apr_port_t port, apr_int32_t flags,\n                                   apr_pool_t *p)\n{\n",
                    "rendered": {
                      "text": "}\n\nstatic apr_status_t find_addresses(apr_sockaddr_t **sa,\n                                   const char *hostname, apr_int32_t family,\n                                   apr_port_t port, apr_int32_t flags,\n                                   apr_pool_t *p)\n{\n",
                      "markdown": "`}\n\nstatic apr_status_t find_addresses(apr_sockaddr_t **sa,\n                                   const char *hostname, apr_int32_t family,\n                                   apr_port_t port, apr_int32_t flags,\n                                   apr_pool_t *p)\n{\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 474,
                  "startColumn": 40,
                  "endLine": 474,
                  "endColumn": 48,
                  "snippet": {
                    "text": "            *sa = new_sa;\n        }\n        else {\n            new_sa->hostname = prev_sa->hostname;\n            prev_sa->next = new_sa;\n        }\n\n",
                    "rendered": {
                      "text": "            *sa = new_sa;\n        }\n        else {\n            new_sa->hostname = prev_sa->hostname;\n            prev_sa->next = new_sa;\n        }\n\n",
                      "markdown": "`            *sa = new_sa;\n        }\n        else {\n            new_sa->hostname = prev_sa->hostname;\n            prev_sa->next = new_sa;\n        }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 474,
                  "startColumn": 20,
                  "endLine": 474,
                  "endColumn": 28,
                  "snippet": {
                    "text": "            *sa = new_sa;\n        }\n        else {\n            new_sa->hostname = prev_sa->hostname;\n            prev_sa->next = new_sa;\n        }\n\n",
                    "rendered": {
                      "text": "            *sa = new_sa;\n        }\n        else {\n            new_sa->hostname = prev_sa->hostname;\n            prev_sa->next = new_sa;\n        }\n\n",
                      "markdown": "`            *sa = new_sa;\n        }\n        else {\n            new_sa->hostname = prev_sa->hostname;\n            prev_sa->next = new_sa;\n        }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 469,
                  "startColumn": 50,
                  "endLine": 469,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\n        if (!prev_sa) { /* first element in new list */\n            if (hostname) {\n                new_sa->hostname = apr_pstrdup(p, hostname);\n            }\n            *sa = new_sa;\n        }\n",
                    "rendered": {
                      "text": "\n        if (!prev_sa) { /* first element in new list */\n            if (hostname) {\n                new_sa->hostname = apr_pstrdup(p, hostname);\n            }\n            *sa = new_sa;\n        }\n",
                      "markdown": "`\n        if (!prev_sa) { /* first element in new list */\n            if (hostname) {\n                new_sa->hostname = apr_pstrdup(p, hostname);\n            }\n            *sa = new_sa;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 469,
                  "startColumn": 24,
                  "endLine": 469,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n        if (!prev_sa) { /* first element in new list */\n            if (hostname) {\n                new_sa->hostname = apr_pstrdup(p, hostname);\n            }\n            *sa = new_sa;\n        }\n",
                    "rendered": {
                      "text": "\n        if (!prev_sa) { /* first element in new list */\n            if (hostname) {\n                new_sa->hostname = apr_pstrdup(p, hostname);\n            }\n            *sa = new_sa;\n        }\n",
                      "markdown": "`\n        if (!prev_sa) { /* first element in new list */\n            if (hostname) {\n                new_sa->hostname = apr_pstrdup(p, hostname);\n            }\n            *sa = new_sa;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 468,
                  "startColumn": 16,
                  "endLine": 468,
                  "endColumn": 24,
                  "snippet": {
                    "text": "        apr_sockaddr_vars_set(new_sa, ai->ai_family, port);\n\n        if (!prev_sa) { /* first element in new list */\n            if (hostname) {\n                new_sa->hostname = apr_pstrdup(p, hostname);\n            }\n            *sa = new_sa;\n",
                    "rendered": {
                      "text": "        apr_sockaddr_vars_set(new_sa, ai->ai_family, port);\n\n        if (!prev_sa) { /* first element in new list */\n            if (hostname) {\n                new_sa->hostname = apr_pstrdup(p, hostname);\n            }\n            *sa = new_sa;\n",
                      "markdown": "`        apr_sockaddr_vars_set(new_sa, ai->ai_family, port);\n\n        if (!prev_sa) { /* first element in new list */\n            if (hostname) {\n                new_sa->hostname = apr_pstrdup(p, hostname);\n            }\n            *sa = new_sa;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 419,
                  "startColumn": 28,
                  "endLine": 419,
                  "endColumn": 36,
                  "snippet": {
                    "text": "#endif\n                                                             )) {\n        hints.ai_flags &= ~AI_ADDRCONFIG;\n        error = getaddrinfo(hostname, servname, &hints, &ai_list);\n    }\n#endif\n    if (error) {\n",
                    "rendered": {
                      "text": "#endif\n                                                             )) {\n        hints.ai_flags &= ~AI_ADDRCONFIG;\n        error = getaddrinfo(hostname, servname, &hints, &ai_list);\n    }\n#endif\n    if (error) {\n",
                      "markdown": "`#endif\n                                                             )) {\n        hints.ai_flags &= ~AI_ADDRCONFIG;\n        error = getaddrinfo(hostname, servname, &hints, &ai_list);\n    }\n#endif\n    if (error) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 396,
                  "startColumn": 24,
                  "endLine": 396,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        servname = apr_itoa(p, port);\n#endif /* OSF1 */\n    }\n    error = getaddrinfo(hostname, servname, &hints, &ai_list);\n#ifdef HAVE_GAI_ADDRCONFIG\n    /*\n     * Using AI_ADDRCONFIG involves some unfortunate guesswork because it\n",
                    "rendered": {
                      "text": "        servname = apr_itoa(p, port);\n#endif /* OSF1 */\n    }\n    error = getaddrinfo(hostname, servname, &hints, &ai_list);\n#ifdef HAVE_GAI_ADDRCONFIG\n    /*\n     * Using AI_ADDRCONFIG involves some unfortunate guesswork because it\n",
                      "markdown": "`        servname = apr_itoa(p, port);\n#endif /* OSF1 */\n    }\n    error = getaddrinfo(hostname, servname, &hints, &ai_list);\n#ifdef HAVE_GAI_ADDRCONFIG\n    /*\n     * Using AI_ADDRCONFIG involves some unfortunate guesswork because it\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 381,
                  "startColumn": 8,
                  "endLine": 381,
                  "endColumn": 16,
                  "snippet": {
                    "text": "         * by the name listed in /etc/services; a numeric or unknown\n         * servname gets an EAI_SERVICE error.  So just resolve the\n         * appropriate anyaddr and fill in the port later. */\n        hostname = family == AF_INET6 ? \"::\" : \"0.0.0.0\";\n        servname = NULL;\n#ifdef AI_NUMERICHOST\n        hints.ai_flags |= AI_NUMERICHOST;\n",
                    "rendered": {
                      "text": "         * by the name listed in /etc/services; a numeric or unknown\n         * servname gets an EAI_SERVICE error.  So just resolve the\n         * appropriate anyaddr and fill in the port later. */\n        hostname = family == AF_INET6 ? \"::\" : \"0.0.0.0\";\n        servname = NULL;\n#ifdef AI_NUMERICHOST\n        hints.ai_flags |= AI_NUMERICHOST;\n",
                      "markdown": "`         * by the name listed in /etc/services; a numeric or unknown\n         * servname gets an EAI_SERVICE error.  So just resolve the\n         * appropriate anyaddr and fill in the port later. */\n        hostname = family == AF_INET6 ? \"::\" : \"0.0.0.0\";\n        servname = NULL;\n#ifdef AI_NUMERICHOST\n        hints.ai_flags |= AI_NUMERICHOST;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 367,
                  "startColumn": 7,
                  "endLine": 367,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    }\n#endif\n\n    if(hostname == NULL) {\n#ifdef AI_PASSIVE\n        /* If hostname is NULL, assume we are trying to bind to all\n         * interfaces. */\n",
                    "rendered": {
                      "text": "    }\n#endif\n\n    if(hostname == NULL) {\n#ifdef AI_PASSIVE\n        /* If hostname is NULL, assume we are trying to bind to all\n         * interfaces. */\n",
                      "markdown": "`    }\n#endif\n\n    if(hostname == NULL) {\n#ifdef AI_PASSIVE\n        /* If hostname is NULL, assume we are trying to bind to all\n         * interfaces. */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockaddr.c"
                },
                "region": {
                  "startLine": 337,
                  "startColumn": 46,
                  "endLine": 337,
                  "endColumn": 54,
                  "snippet": {
                    "text": "#if defined(HAVE_GETADDRINFO)\n\nstatic apr_status_t call_resolver(apr_sockaddr_t **sa,\n                                  const char *hostname, apr_int32_t family,\n                                  apr_port_t port, apr_int32_t flags,\n                                  apr_pool_t *p)\n{\n",
                    "rendered": {
                      "text": "#if defined(HAVE_GETADDRINFO)\n\nstatic apr_status_t call_resolver(apr_sockaddr_t **sa,\n                                  const char *hostname, apr_int32_t family,\n                                  apr_port_t port, apr_int32_t flags,\n                                  apr_pool_t *p)\n{\n",
                      "markdown": "`#if defined(HAVE_GETADDRINFO)\n\nstatic apr_status_t call_resolver(apr_sockaddr_t **sa,\n                                  const char *hostname, apr_int32_t family,\n                                  apr_port_t port, apr_int32_t flags,\n                                  apr_pool_t *p)\n{\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/unix/sockets.c"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 38,
                  "endLine": 51,
                  "endColumn": 46,
                  "snippet": {
                    "text": "#if APR_HAVE_SOCKADDR_UN\n    if (thesocket->bound && thesocket->local_addr->family == APR_UNIX) {\n        /* XXX: Check for return values ? */\n        unlink(thesocket->local_addr->hostname);\n    }\n#endif\n    if (close(sd) == 0) {\n",
                    "rendered": {
                      "text": "#if APR_HAVE_SOCKADDR_UN\n    if (thesocket->bound && thesocket->local_addr->family == APR_UNIX) {\n        /* XXX: Check for return values ? */\n        unlink(thesocket->local_addr->hostname);\n    }\n#endif\n    if (close(sd) == 0) {\n",
                      "markdown": "`#if APR_HAVE_SOCKADDR_UN\n    if (thesocket->bound && thesocket->local_addr->family == APR_UNIX) {\n        /* XXX: Check for return values ? */\n        unlink(thesocket->local_addr->hostname);\n    }\n#endif\n    if (close(sd) == 0) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/network_io/win32/socket_pipe.c"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 11,
                  "endLine": 88,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    }\n    for (;;) {\n        int ns;\n        int nc = 0;\n        /* Listening socket is nonblocking by now.\n         * The accept should create the socket\n         * immediatelly because we are connected already.\n",
                    "rendered": {
                      "text": "    }\n    for (;;) {\n        int ns;\n        int nc = 0;\n        /* Listening socket is nonblocking by now.\n         * The accept should create the socket\n         * immediatelly because we are connected already.\n",
                      "markdown": "`    }\n    for (;;) {\n        int ns;\n        int nc = 0;\n        /* Listening socket is nonblocking by now.\n         * The accept should create the socket\n         * immediatelly because we are connected already.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/threadproc/beos/proc.c"
                },
                "region": {
                  "startLine": 440,
                  "startColumn": 60,
                  "endLine": 440,
                  "endColumn": 68,
                  "snippet": {
                    "text": "\nAPR_DECLARE(apr_status_t) apr_procattr_user_set(apr_procattr_t *attr,\n                                                const char *username,\n                                                const char *password)\n{\n    return APR_ENOTIMPL;\n}\n",
                    "rendered": {
                      "text": "\nAPR_DECLARE(apr_status_t) apr_procattr_user_set(apr_procattr_t *attr,\n                                                const char *username,\n                                                const char *password)\n{\n    return APR_ENOTIMPL;\n}\n",
                      "markdown": "`\nAPR_DECLARE(apr_status_t) apr_procattr_user_set(apr_procattr_t *attr,\n                                                const char *username,\n                                                const char *password)\n{\n    return APR_ENOTIMPL;\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/threadproc/unix/proc.c"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 60,
                  "endLine": 336,
                  "endColumn": 68,
                  "snippet": {
                    "text": "\nAPR_DECLARE(apr_status_t) apr_procattr_user_set(apr_procattr_t *attr,\n                                                const char *username,\n                                                const char *password)\n{\n    apr_status_t rv;\n    apr_gid_t    gid;\n",
                    "rendered": {
                      "text": "\nAPR_DECLARE(apr_status_t) apr_procattr_user_set(apr_procattr_t *attr,\n                                                const char *username,\n                                                const char *password)\n{\n    apr_status_t rv;\n    apr_gid_t    gid;\n",
                      "markdown": "`\nAPR_DECLARE(apr_status_t) apr_procattr_user_set(apr_procattr_t *attr,\n                                                const char *username,\n                                                const char *password)\n{\n    apr_status_t rv;\n    apr_gid_t    gid;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/threadproc/unix/proc.c"
                },
                "region": {
                  "startLine": 378,
                  "startColumn": 7,
                  "endLine": 378,
                  "endColumn": 12,
                  "snippet": {
                    "text": "                 * Purify will trigger a failure, even if many\n                 * implementations don't.\n                 */\n        env = empty_envp;\n    }\n\n    new->in = attr->parent_in;\n",
                    "rendered": {
                      "text": "                 * Purify will trigger a failure, even if many\n                 * implementations don't.\n                 */\n        env = empty_envp;\n    }\n\n    new->in = attr->parent_in;\n",
                      "markdown": "`                 * Purify will trigger a failure, even if many\n                 * implementations don't.\n                 */\n        env = empty_envp;\n    }\n\n    new->in = attr->parent_in;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/threadproc/netware/proc.c"
                },
                "region": {
                  "startLine": 499,
                  "startColumn": 60,
                  "endLine": 499,
                  "endColumn": 68,
                  "snippet": {
                    "text": "\nAPR_DECLARE(apr_status_t) apr_procattr_user_set(apr_procattr_t *attr,\n                                                const char *username,\n                                                const char *password)\n{\n    /* Always return SUCCESS because NetWare threads don't run as a user */\n    return APR_SUCCESS;\n",
                    "rendered": {
                      "text": "\nAPR_DECLARE(apr_status_t) apr_procattr_user_set(apr_procattr_t *attr,\n                                                const char *username,\n                                                const char *password)\n{\n    /* Always return SUCCESS because NetWare threads don't run as a user */\n    return APR_SUCCESS;\n",
                      "markdown": "`\nAPR_DECLARE(apr_status_t) apr_procattr_user_set(apr_procattr_t *attr,\n                                                const char *username,\n                                                const char *password)\n{\n    /* Always return SUCCESS because NetWare threads don't run as a user */\n    return APR_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/threadproc/win32/proc.c"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 20,
                  "endLine": 280,
                  "endColumn": 28,
                  "snippet": {
                    "text": "            return apr_get_os_error();\n        }\n        if (wpassword)\n            memset(wpassword, 0, wlen * sizeof(apr_wchar_t));\n        /* Get the primary token for user */\n        if (!DuplicateTokenEx(user,\n                              TOKEN_QUERY | TOKEN_DUPLICATE | TOKEN_ASSIGN_PRIMARY,\n",
                    "rendered": {
                      "text": "            return apr_get_os_error();\n        }\n        if (wpassword)\n            memset(wpassword, 0, wlen * sizeof(apr_wchar_t));\n        /* Get the primary token for user */\n        if (!DuplicateTokenEx(user,\n                              TOKEN_QUERY | TOKEN_DUPLICATE | TOKEN_ASSIGN_PRIMARY,\n",
                      "markdown": "`            return apr_get_os_error();\n        }\n        if (wpassword)\n            memset(wpassword, 0, wlen * sizeof(apr_wchar_t));\n        /* Get the primary token for user */\n        if (!DuplicateTokenEx(user,\n                              TOKEN_QUERY | TOKEN_DUPLICATE | TOKEN_ASSIGN_PRIMARY,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/threadproc/win32/proc.c"
                },
                "region": {
                  "startLine": 279,
                  "startColumn": 13,
                  "endLine": 279,
                  "endColumn": 21,
                  "snippet": {
                    "text": "            /* Logon Failed */\n            return apr_get_os_error();\n        }\n        if (wpassword)\n            memset(wpassword, 0, wlen * sizeof(apr_wchar_t));\n        /* Get the primary token for user */\n        if (!DuplicateTokenEx(user,\n",
                    "rendered": {
                      "text": "            /* Logon Failed */\n            return apr_get_os_error();\n        }\n        if (wpassword)\n            memset(wpassword, 0, wlen * sizeof(apr_wchar_t));\n        /* Get the primary token for user */\n        if (!DuplicateTokenEx(user,\n",
                      "markdown": "`            /* Logon Failed */\n            return apr_get_os_error();\n        }\n        if (wpassword)\n            memset(wpassword, 0, wlen * sizeof(apr_wchar_t));\n        /* Get the primary token for user */\n        if (!DuplicateTokenEx(user,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/threadproc/win32/proc.c"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 37,
                  "endLine": 272,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        }\n        if (!LogonUserW(wusername,\n                        NULL,\n                        wpassword ? wpassword : L\"\",\n                        LOGON32_LOGON_NETWORK,\n                        LOGON32_PROVIDER_DEFAULT,\n                        &user)) {\n",
                    "rendered": {
                      "text": "        }\n        if (!LogonUserW(wusername,\n                        NULL,\n                        wpassword ? wpassword : L\"\",\n                        LOGON32_LOGON_NETWORK,\n                        LOGON32_PROVIDER_DEFAULT,\n                        &user)) {\n",
                      "markdown": "`        }\n        if (!LogonUserW(wusername,\n                        NULL,\n                        wpassword ? wpassword : L\"\",\n                        LOGON32_LOGON_NETWORK,\n                        LOGON32_PROVIDER_DEFAULT,\n                        &user)) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/threadproc/win32/proc.c"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 25,
                  "endLine": 272,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        }\n        if (!LogonUserW(wusername,\n                        NULL,\n                        wpassword ? wpassword : L\"\",\n                        LOGON32_LOGON_NETWORK,\n                        LOGON32_PROVIDER_DEFAULT,\n                        &user)) {\n",
                    "rendered": {
                      "text": "        }\n        if (!LogonUserW(wusername,\n                        NULL,\n                        wpassword ? wpassword : L\"\",\n                        LOGON32_LOGON_NETWORK,\n                        LOGON32_PROVIDER_DEFAULT,\n                        &user)) {\n",
                      "markdown": "`        }\n        if (!LogonUserW(wusername,\n                        NULL,\n                        wpassword ? wpassword : L\"\",\n                        LOGON32_LOGON_NETWORK,\n                        LOGON32_PROVIDER_DEFAULT,\n                        &user)) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/threadproc/win32/proc.c"
                },
                "region": {
                  "startLine": 265,
                  "startColumn": 44,
                  "endLine": 265,
                  "endColumn": 52,
                  "snippet": {
                    "text": "                       != APR_SUCCESS) {\n                if (attr->errfn) {\n                    attr->errfn(attr->pool, rv, \"utf8 to utf16 conversion\"\n                                \" failed on password: <redacted>\");\n                }\n                return rv;\n            }\n",
                    "rendered": {
                      "text": "                       != APR_SUCCESS) {\n                if (attr->errfn) {\n                    attr->errfn(attr->pool, rv, \"utf8 to utf16 conversion\"\n                                \" failed on password: <redacted>\");\n                }\n                return rv;\n            }\n",
                      "markdown": "`                       != APR_SUCCESS) {\n                if (attr->errfn) {\n                    attr->errfn(attr->pool, rv, \"utf8 to utf16 conversion\"\n                                \" failed on password: <redacted>\");\n                }\n                return rv;\n            }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/threadproc/win32/proc.c"
                },
                "region": {
                  "startLine": 261,
                  "startColumn": 62,
                  "endLine": 261,
                  "endColumn": 70,
                  "snippet": {
                    "text": "            len = strlen(password) + 1;\n            wlen = len;\n            wpassword = apr_palloc(attr->pool, wlen * sizeof(apr_wchar_t));\n            if ((rv = apr_conv_utf8_to_utf16(password, &len, wpassword, &wlen))\n                       != APR_SUCCESS) {\n                if (attr->errfn) {\n                    attr->errfn(attr->pool, rv, \"utf8 to utf16 conversion\"\n",
                    "rendered": {
                      "text": "            len = strlen(password) + 1;\n            wlen = len;\n            wpassword = apr_palloc(attr->pool, wlen * sizeof(apr_wchar_t));\n            if ((rv = apr_conv_utf8_to_utf16(password, &len, wpassword, &wlen))\n                       != APR_SUCCESS) {\n                if (attr->errfn) {\n                    attr->errfn(attr->pool, rv, \"utf8 to utf16 conversion\"\n",
                      "markdown": "`            len = strlen(password) + 1;\n            wlen = len;\n            wpassword = apr_palloc(attr->pool, wlen * sizeof(apr_wchar_t));\n            if ((rv = apr_conv_utf8_to_utf16(password, &len, wpassword, &wlen))\n                       != APR_SUCCESS) {\n                if (attr->errfn) {\n                    attr->errfn(attr->pool, rv, \"utf8 to utf16 conversion\"\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/threadproc/win32/proc.c"
                },
                "region": {
                  "startLine": 261,
                  "startColumn": 45,
                  "endLine": 261,
                  "endColumn": 53,
                  "snippet": {
                    "text": "            len = strlen(password) + 1;\n            wlen = len;\n            wpassword = apr_palloc(attr->pool, wlen * sizeof(apr_wchar_t));\n            if ((rv = apr_conv_utf8_to_utf16(password, &len, wpassword, &wlen))\n                       != APR_SUCCESS) {\n                if (attr->errfn) {\n                    attr->errfn(attr->pool, rv, \"utf8 to utf16 conversion\"\n",
                    "rendered": {
                      "text": "            len = strlen(password) + 1;\n            wlen = len;\n            wpassword = apr_palloc(attr->pool, wlen * sizeof(apr_wchar_t));\n            if ((rv = apr_conv_utf8_to_utf16(password, &len, wpassword, &wlen))\n                       != APR_SUCCESS) {\n                if (attr->errfn) {\n                    attr->errfn(attr->pool, rv, \"utf8 to utf16 conversion\"\n",
                      "markdown": "`            len = strlen(password) + 1;\n            wlen = len;\n            wpassword = apr_palloc(attr->pool, wlen * sizeof(apr_wchar_t));\n            if ((rv = apr_conv_utf8_to_utf16(password, &len, wpassword, &wlen))\n                       != APR_SUCCESS) {\n                if (attr->errfn) {\n                    attr->errfn(attr->pool, rv, \"utf8 to utf16 conversion\"\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/threadproc/win32/proc.c"
                },
                "region": {
                  "startLine": 260,
                  "startColumn": 13,
                  "endLine": 260,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        if (password) {\n            len = strlen(password) + 1;\n            wlen = len;\n            wpassword = apr_palloc(attr->pool, wlen * sizeof(apr_wchar_t));\n            if ((rv = apr_conv_utf8_to_utf16(password, &len, wpassword, &wlen))\n                       != APR_SUCCESS) {\n                if (attr->errfn) {\n",
                    "rendered": {
                      "text": "        if (password) {\n            len = strlen(password) + 1;\n            wlen = len;\n            wpassword = apr_palloc(attr->pool, wlen * sizeof(apr_wchar_t));\n            if ((rv = apr_conv_utf8_to_utf16(password, &len, wpassword, &wlen))\n                       != APR_SUCCESS) {\n                if (attr->errfn) {\n",
                      "markdown": "`        if (password) {\n            len = strlen(password) + 1;\n            wlen = len;\n            wpassword = apr_palloc(attr->pool, wlen * sizeof(apr_wchar_t));\n            if ((rv = apr_conv_utf8_to_utf16(password, &len, wpassword, &wlen))\n                       != APR_SUCCESS) {\n                if (attr->errfn) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/threadproc/win32/proc.c"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 25,
                  "endLine": 258,
                  "endColumn": 33,
                  "snippet": {
                    "text": "            return rv;\n        }\n        if (password) {\n            len = strlen(password) + 1;\n            wlen = len;\n            wpassword = apr_palloc(attr->pool, wlen * sizeof(apr_wchar_t));\n            if ((rv = apr_conv_utf8_to_utf16(password, &len, wpassword, &wlen))\n",
                    "rendered": {
                      "text": "            return rv;\n        }\n        if (password) {\n            len = strlen(password) + 1;\n            wlen = len;\n            wpassword = apr_palloc(attr->pool, wlen * sizeof(apr_wchar_t));\n            if ((rv = apr_conv_utf8_to_utf16(password, &len, wpassword, &wlen))\n",
                      "markdown": "`            return rv;\n        }\n        if (password) {\n            len = strlen(password) + 1;\n            wlen = len;\n            wpassword = apr_palloc(attr->pool, wlen * sizeof(apr_wchar_t));\n            if ((rv = apr_conv_utf8_to_utf16(password, &len, wpassword, &wlen))\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/threadproc/win32/proc.c"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 12,
                  "endLine": 257,
                  "endColumn": 20,
                  "snippet": {
                    "text": "            }\n            return rv;\n        }\n        if (password) {\n            len = strlen(password) + 1;\n            wlen = len;\n            wpassword = apr_palloc(attr->pool, wlen * sizeof(apr_wchar_t));\n",
                    "rendered": {
                      "text": "            }\n            return rv;\n        }\n        if (password) {\n            len = strlen(password) + 1;\n            wlen = len;\n            wpassword = apr_palloc(attr->pool, wlen * sizeof(apr_wchar_t));\n",
                      "markdown": "`            }\n            return rv;\n        }\n        if (password) {\n            len = strlen(password) + 1;\n            wlen = len;\n            wpassword = apr_palloc(attr->pool, wlen * sizeof(apr_wchar_t));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/threadproc/win32/proc.c"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 18,
                  "endLine": 229,
                  "endColumn": 26,
                  "snippet": {
                    "text": "{\n    HANDLE user;\n    apr_wchar_t *wusername = NULL;\n    apr_wchar_t *wpassword = NULL;\n    apr_status_t rv;\n    apr_size_t len, wlen;\n\n",
                    "rendered": {
                      "text": "{\n    HANDLE user;\n    apr_wchar_t *wusername = NULL;\n    apr_wchar_t *wpassword = NULL;\n    apr_status_t rv;\n    apr_size_t len, wlen;\n\n",
                      "markdown": "`{\n    HANDLE user;\n    apr_wchar_t *wusername = NULL;\n    apr_wchar_t *wpassword = NULL;\n    apr_status_t rv;\n    apr_size_t len, wlen;\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/threadproc/win32/proc.c"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 60,
                  "endLine": 225,
                  "endColumn": 68,
                  "snippet": {
                    "text": "\nAPR_DECLARE(apr_status_t) apr_procattr_user_set(apr_procattr_t *attr,\n                                                const char *username,\n                                                const char *password)\n{\n    HANDLE user;\n    apr_wchar_t *wusername = NULL;\n",
                    "rendered": {
                      "text": "\nAPR_DECLARE(apr_status_t) apr_procattr_user_set(apr_procattr_t *attr,\n                                                const char *username,\n                                                const char *password)\n{\n    HANDLE user;\n    apr_wchar_t *wusername = NULL;\n",
                      "markdown": "`\nAPR_DECLARE(apr_status_t) apr_procattr_user_set(apr_procattr_t *attr,\n                                                const char *username,\n                                                const char *password)\n{\n    HANDLE user;\n    apr_wchar_t *wusername = NULL;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/threadproc/win32/proc.c"
                },
                "region": {
                  "startLine": 422,
                  "startColumn": 3,
                  "endLine": 422,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    unsigned char *d;\n    const unsigned char *s;\n\n    cmd = apr_palloc(p, 2 * strlen(str) + 1);    /* Be safe */\n    d = (unsigned char *)cmd;\n    s = (const unsigned char *)str;\n    for (; *s; ++s) {\n",
                    "rendered": {
                      "text": "    unsigned char *d;\n    const unsigned char *s;\n\n    cmd = apr_palloc(p, 2 * strlen(str) + 1);    /* Be safe */\n    d = (unsigned char *)cmd;\n    s = (const unsigned char *)str;\n    for (; *s; ++s) {\n",
                      "markdown": "`    unsigned char *d;\n    const unsigned char *s;\n\n    cmd = apr_palloc(p, 2 * strlen(str) + 1);    /* Be safe */\n    d = (unsigned char *)cmd;\n    s = (const unsigned char *)str;\n    for (; *s; ++s) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/threadproc/win32/proc.c"
                },
                "region": {
                  "startLine": 1086,
                  "startColumn": 7,
                  "endLine": 1086,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    if (waithow == APR_WAIT)\n        time = INFINITE;\n    else\n        time = 0;\n\n    if ((stat = WaitForSingleObject(proc->hproc, time)) == WAIT_OBJECT_0) {\n        if (GetExitCodeProcess(proc->hproc, &stat)) {\n",
                    "rendered": {
                      "text": "    if (waithow == APR_WAIT)\n        time = INFINITE;\n    else\n        time = 0;\n\n    if ((stat = WaitForSingleObject(proc->hproc, time)) == WAIT_OBJECT_0) {\n        if (GetExitCodeProcess(proc->hproc, &stat)) {\n",
                      "markdown": "`    if (waithow == APR_WAIT)\n        time = INFINITE;\n    else\n        time = 0;\n\n    if ((stat = WaitForSingleObject(proc->hproc, time)) == WAIT_OBJECT_0) {\n        if (GetExitCodeProcess(proc->hproc, &stat)) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/threadproc/win32/proc.c"
                },
                "region": {
                  "startLine": 1084,
                  "startColumn": 7,
                  "endLine": 1084,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    DWORD time;\n\n    if (waithow == APR_WAIT)\n        time = INFINITE;\n    else\n        time = 0;\n\n",
                    "rendered": {
                      "text": "    DWORD time;\n\n    if (waithow == APR_WAIT)\n        time = INFINITE;\n    else\n        time = 0;\n\n",
                      "markdown": "`    DWORD time;\n\n    if (waithow == APR_WAIT)\n        time = INFINITE;\n    else\n        time = 0;\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testmd4.c"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 10,
                  "endLine": 71,
                  "endColumn": 74,
                  "snippet": {
                    "text": "        {\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\n         \"\\x04\\x3f\\x85\\x82\\xf2\\x41\\xdb\\x35\\x1c\\xe6\\x27\\xe1\\x53\\xe7\\xf0\\xe4\"},\n        {\"12345678901234567890123456789012345678901234567890123456789012345678901234567890\",\n         \"\\xe3\\x3b\\x4d\\xdc\\x9c\\x38\\xf2\\x19\\x9c\\x3e\\x7b\\x16\\x4f\\xcc\\x05\\x36\"}\n};\n\nstatic int num_sums = sizeof(md4sums) / sizeof(md4sums[0]);\n",
                    "rendered": {
                      "text": "        {\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\n         \"\\x04\\x3f\\x85\\x82\\xf2\\x41\\xdb\\x35\\x1c\\xe6\\x27\\xe1\\x53\\xe7\\xf0\\xe4\"},\n        {\"12345678901234567890123456789012345678901234567890123456789012345678901234567890\",\n         \"\\xe3\\x3b\\x4d\\xdc\\x9c\\x38\\xf2\\x19\\x9c\\x3e\\x7b\\x16\\x4f\\xcc\\x05\\x36\"}\n};\n\nstatic int num_sums = sizeof(md4sums) / sizeof(md4sums[0]);\n",
                      "markdown": "`        {\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\n         \"\\x04\\x3f\\x85\\x82\\xf2\\x41\\xdb\\x35\\x1c\\xe6\\x27\\xe1\\x53\\xe7\\xf0\\xe4\"},\n        {\"12345678901234567890123456789012345678901234567890123456789012345678901234567890\",\n         \"\\xe3\\x3b\\x4d\\xdc\\x9c\\x38\\xf2\\x19\\x9c\\x3e\\x7b\\x16\\x4f\\xcc\\x05\\x36\"}\n};\n\nstatic int num_sums = sizeof(md4sums) / sizeof(md4sums[0]);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testmd4.c"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 10,
                  "endLine": 69,
                  "endColumn": 74,
                  "snippet": {
                    "text": "        {\"abcdefghijklmnopqrstuvwxyz\",\n         \"\\xd7\\x9e\\x1c\\x30\\x8a\\xa5\\xbb\\xcd\\xee\\xa8\\xed\\x63\\xdf\\x41\\x2d\\xa9\"},\n        {\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\n         \"\\x04\\x3f\\x85\\x82\\xf2\\x41\\xdb\\x35\\x1c\\xe6\\x27\\xe1\\x53\\xe7\\xf0\\xe4\"},\n        {\"12345678901234567890123456789012345678901234567890123456789012345678901234567890\",\n         \"\\xe3\\x3b\\x4d\\xdc\\x9c\\x38\\xf2\\x19\\x9c\\x3e\\x7b\\x16\\x4f\\xcc\\x05\\x36\"}\n};\n",
                    "rendered": {
                      "text": "        {\"abcdefghijklmnopqrstuvwxyz\",\n         \"\\xd7\\x9e\\x1c\\x30\\x8a\\xa5\\xbb\\xcd\\xee\\xa8\\xed\\x63\\xdf\\x41\\x2d\\xa9\"},\n        {\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\n         \"\\x04\\x3f\\x85\\x82\\xf2\\x41\\xdb\\x35\\x1c\\xe6\\x27\\xe1\\x53\\xe7\\xf0\\xe4\"},\n        {\"12345678901234567890123456789012345678901234567890123456789012345678901234567890\",\n         \"\\xe3\\x3b\\x4d\\xdc\\x9c\\x38\\xf2\\x19\\x9c\\x3e\\x7b\\x16\\x4f\\xcc\\x05\\x36\"}\n};\n",
                      "markdown": "`        {\"abcdefghijklmnopqrstuvwxyz\",\n         \"\\xd7\\x9e\\x1c\\x30\\x8a\\xa5\\xbb\\xcd\\xee\\xa8\\xed\\x63\\xdf\\x41\\x2d\\xa9\"},\n        {\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\n         \"\\x04\\x3f\\x85\\x82\\xf2\\x41\\xdb\\x35\\x1c\\xe6\\x27\\xe1\\x53\\xe7\\xf0\\xe4\"},\n        {\"12345678901234567890123456789012345678901234567890123456789012345678901234567890\",\n         \"\\xe3\\x3b\\x4d\\xdc\\x9c\\x38\\xf2\\x19\\x9c\\x3e\\x7b\\x16\\x4f\\xcc\\x05\\x36\"}\n};\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testmd4.c"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 10,
                  "endLine": 67,
                  "endColumn": 74,
                  "snippet": {
                    "text": "        {\"message digest\",\n         \"\\xd9\\x13\\x0a\\x81\\x64\\x54\\x9f\\xe8\\x18\\x87\\x48\\x06\\xe1\\xc7\\x01\\x4b\"},\n        {\"abcdefghijklmnopqrstuvwxyz\",\n         \"\\xd7\\x9e\\x1c\\x30\\x8a\\xa5\\xbb\\xcd\\xee\\xa8\\xed\\x63\\xdf\\x41\\x2d\\xa9\"},\n        {\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\n         \"\\x04\\x3f\\x85\\x82\\xf2\\x41\\xdb\\x35\\x1c\\xe6\\x27\\xe1\\x53\\xe7\\xf0\\xe4\"},\n        {\"12345678901234567890123456789012345678901234567890123456789012345678901234567890\",\n",
                    "rendered": {
                      "text": "        {\"message digest\",\n         \"\\xd9\\x13\\x0a\\x81\\x64\\x54\\x9f\\xe8\\x18\\x87\\x48\\x06\\xe1\\xc7\\x01\\x4b\"},\n        {\"abcdefghijklmnopqrstuvwxyz\",\n         \"\\xd7\\x9e\\x1c\\x30\\x8a\\xa5\\xbb\\xcd\\xee\\xa8\\xed\\x63\\xdf\\x41\\x2d\\xa9\"},\n        {\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\n         \"\\x04\\x3f\\x85\\x82\\xf2\\x41\\xdb\\x35\\x1c\\xe6\\x27\\xe1\\x53\\xe7\\xf0\\xe4\"},\n        {\"12345678901234567890123456789012345678901234567890123456789012345678901234567890\",\n",
                      "markdown": "`        {\"message digest\",\n         \"\\xd9\\x13\\x0a\\x81\\x64\\x54\\x9f\\xe8\\x18\\x87\\x48\\x06\\xe1\\xc7\\x01\\x4b\"},\n        {\"abcdefghijklmnopqrstuvwxyz\",\n         \"\\xd7\\x9e\\x1c\\x30\\x8a\\xa5\\xbb\\xcd\\xee\\xa8\\xed\\x63\\xdf\\x41\\x2d\\xa9\"},\n        {\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\n         \"\\x04\\x3f\\x85\\x82\\xf2\\x41\\xdb\\x35\\x1c\\xe6\\x27\\xe1\\x53\\xe7\\xf0\\xe4\"},\n        {\"12345678901234567890123456789012345678901234567890123456789012345678901234567890\",\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testmd4.c"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 10,
                  "endLine": 65,
                  "endColumn": 74,
                  "snippet": {
                    "text": "        {\"abc\",\n         \"\\xa4\\x48\\x01\\x7a\\xaf\\x21\\xd8\\x52\\x5f\\xc1\\x0a\\xe8\\x7a\\xa6\\x72\\x9d\"},\n        {\"message digest\",\n         \"\\xd9\\x13\\x0a\\x81\\x64\\x54\\x9f\\xe8\\x18\\x87\\x48\\x06\\xe1\\xc7\\x01\\x4b\"},\n        {\"abcdefghijklmnopqrstuvwxyz\",\n         \"\\xd7\\x9e\\x1c\\x30\\x8a\\xa5\\xbb\\xcd\\xee\\xa8\\xed\\x63\\xdf\\x41\\x2d\\xa9\"},\n        {\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\n",
                    "rendered": {
                      "text": "        {\"abc\",\n         \"\\xa4\\x48\\x01\\x7a\\xaf\\x21\\xd8\\x52\\x5f\\xc1\\x0a\\xe8\\x7a\\xa6\\x72\\x9d\"},\n        {\"message digest\",\n         \"\\xd9\\x13\\x0a\\x81\\x64\\x54\\x9f\\xe8\\x18\\x87\\x48\\x06\\xe1\\xc7\\x01\\x4b\"},\n        {\"abcdefghijklmnopqrstuvwxyz\",\n         \"\\xd7\\x9e\\x1c\\x30\\x8a\\xa5\\xbb\\xcd\\xee\\xa8\\xed\\x63\\xdf\\x41\\x2d\\xa9\"},\n        {\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\n",
                      "markdown": "`        {\"abc\",\n         \"\\xa4\\x48\\x01\\x7a\\xaf\\x21\\xd8\\x52\\x5f\\xc1\\x0a\\xe8\\x7a\\xa6\\x72\\x9d\"},\n        {\"message digest\",\n         \"\\xd9\\x13\\x0a\\x81\\x64\\x54\\x9f\\xe8\\x18\\x87\\x48\\x06\\xe1\\xc7\\x01\\x4b\"},\n        {\"abcdefghijklmnopqrstuvwxyz\",\n         \"\\xd7\\x9e\\x1c\\x30\\x8a\\xa5\\xbb\\xcd\\xee\\xa8\\xed\\x63\\xdf\\x41\\x2d\\xa9\"},\n        {\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testmd4.c"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 10,
                  "endLine": 63,
                  "endColumn": 74,
                  "snippet": {
                    "text": "        {\"a\",\n         \"\\xbd\\xe5\\x2c\\xb3\\x1d\\xe3\\x3e\\x46\\x24\\x5e\\x05\\xfb\\xdb\\xd6\\xfb\\x24\"},\n        {\"abc\",\n         \"\\xa4\\x48\\x01\\x7a\\xaf\\x21\\xd8\\x52\\x5f\\xc1\\x0a\\xe8\\x7a\\xa6\\x72\\x9d\"},\n        {\"message digest\",\n         \"\\xd9\\x13\\x0a\\x81\\x64\\x54\\x9f\\xe8\\x18\\x87\\x48\\x06\\xe1\\xc7\\x01\\x4b\"},\n        {\"abcdefghijklmnopqrstuvwxyz\",\n",
                    "rendered": {
                      "text": "        {\"a\",\n         \"\\xbd\\xe5\\x2c\\xb3\\x1d\\xe3\\x3e\\x46\\x24\\x5e\\x05\\xfb\\xdb\\xd6\\xfb\\x24\"},\n        {\"abc\",\n         \"\\xa4\\x48\\x01\\x7a\\xaf\\x21\\xd8\\x52\\x5f\\xc1\\x0a\\xe8\\x7a\\xa6\\x72\\x9d\"},\n        {\"message digest\",\n         \"\\xd9\\x13\\x0a\\x81\\x64\\x54\\x9f\\xe8\\x18\\x87\\x48\\x06\\xe1\\xc7\\x01\\x4b\"},\n        {\"abcdefghijklmnopqrstuvwxyz\",\n",
                      "markdown": "`        {\"a\",\n         \"\\xbd\\xe5\\x2c\\xb3\\x1d\\xe3\\x3e\\x46\\x24\\x5e\\x05\\xfb\\xdb\\xd6\\xfb\\x24\"},\n        {\"abc\",\n         \"\\xa4\\x48\\x01\\x7a\\xaf\\x21\\xd8\\x52\\x5f\\xc1\\x0a\\xe8\\x7a\\xa6\\x72\\x9d\"},\n        {\"message digest\",\n         \"\\xd9\\x13\\x0a\\x81\\x64\\x54\\x9f\\xe8\\x18\\x87\\x48\\x06\\xe1\\xc7\\x01\\x4b\"},\n        {\"abcdefghijklmnopqrstuvwxyz\",\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testmd4.c"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 10,
                  "endLine": 61,
                  "endColumn": 74,
                  "snippet": {
                    "text": "        {\"\",\n         \"\\x31\\xd6\\xcf\\xe0\\xd1\\x6a\\xe9\\x31\\xb7\\x3c\\x59\\xd7\\xe0\\xc0\\x89\\xc0\"},\n        {\"a\",\n         \"\\xbd\\xe5\\x2c\\xb3\\x1d\\xe3\\x3e\\x46\\x24\\x5e\\x05\\xfb\\xdb\\xd6\\xfb\\x24\"},\n        {\"abc\",\n         \"\\xa4\\x48\\x01\\x7a\\xaf\\x21\\xd8\\x52\\x5f\\xc1\\x0a\\xe8\\x7a\\xa6\\x72\\x9d\"},\n        {\"message digest\",\n",
                    "rendered": {
                      "text": "        {\"\",\n         \"\\x31\\xd6\\xcf\\xe0\\xd1\\x6a\\xe9\\x31\\xb7\\x3c\\x59\\xd7\\xe0\\xc0\\x89\\xc0\"},\n        {\"a\",\n         \"\\xbd\\xe5\\x2c\\xb3\\x1d\\xe3\\x3e\\x46\\x24\\x5e\\x05\\xfb\\xdb\\xd6\\xfb\\x24\"},\n        {\"abc\",\n         \"\\xa4\\x48\\x01\\x7a\\xaf\\x21\\xd8\\x52\\x5f\\xc1\\x0a\\xe8\\x7a\\xa6\\x72\\x9d\"},\n        {\"message digest\",\n",
                      "markdown": "`        {\"\",\n         \"\\x31\\xd6\\xcf\\xe0\\xd1\\x6a\\xe9\\x31\\xb7\\x3c\\x59\\xd7\\xe0\\xc0\\x89\\xc0\"},\n        {\"a\",\n         \"\\xbd\\xe5\\x2c\\xb3\\x1d\\xe3\\x3e\\x46\\x24\\x5e\\x05\\xfb\\xdb\\xd6\\xfb\\x24\"},\n        {\"abc\",\n         \"\\xa4\\x48\\x01\\x7a\\xaf\\x21\\xd8\\x52\\x5f\\xc1\\x0a\\xe8\\x7a\\xa6\\x72\\x9d\"},\n        {\"message digest\",\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testmd4.c"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 10,
                  "endLine": 59,
                  "endColumn": 74,
                  "snippet": {
                    "text": "*\n*/\n        {\"\",\n         \"\\x31\\xd6\\xcf\\xe0\\xd1\\x6a\\xe9\\x31\\xb7\\x3c\\x59\\xd7\\xe0\\xc0\\x89\\xc0\"},\n        {\"a\",\n         \"\\xbd\\xe5\\x2c\\xb3\\x1d\\xe3\\x3e\\x46\\x24\\x5e\\x05\\xfb\\xdb\\xd6\\xfb\\x24\"},\n        {\"abc\",\n",
                    "rendered": {
                      "text": "*\n*/\n        {\"\",\n         \"\\x31\\xd6\\xcf\\xe0\\xd1\\x6a\\xe9\\x31\\xb7\\x3c\\x59\\xd7\\xe0\\xc0\\x89\\xc0\"},\n        {\"a\",\n         \"\\xbd\\xe5\\x2c\\xb3\\x1d\\xe3\\x3e\\x46\\x24\\x5e\\x05\\xfb\\xdb\\xd6\\xfb\\x24\"},\n        {\"abc\",\n",
                      "markdown": "`*\n*/\n        {\"\",\n         \"\\x31\\xd6\\xcf\\xe0\\xd1\\x6a\\xe9\\x31\\xb7\\x3c\\x59\\xd7\\xe0\\xc0\\x89\\xc0\"},\n        {\"a\",\n         \"\\xbd\\xe5\\x2c\\xb3\\x1d\\xe3\\x3e\\x46\\x24\\x5e\\x05\\xfb\\xdb\\xd6\\xfb\\x24\"},\n        {\"abc\",\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testmd4.c"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 9,
                  "endLine": 70,
                  "endColumn": 91,
                  "snippet": {
                    "text": "         \"\\xd7\\x9e\\x1c\\x30\\x8a\\xa5\\xbb\\xcd\\xee\\xa8\\xed\\x63\\xdf\\x41\\x2d\\xa9\"},\n        {\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\n         \"\\x04\\x3f\\x85\\x82\\xf2\\x41\\xdb\\x35\\x1c\\xe6\\x27\\xe1\\x53\\xe7\\xf0\\xe4\"},\n        {\"12345678901234567890123456789012345678901234567890123456789012345678901234567890\",\n         \"\\xe3\\x3b\\x4d\\xdc\\x9c\\x38\\xf2\\x19\\x9c\\x3e\\x7b\\x16\\x4f\\xcc\\x05\\x36\"}\n};\n\n",
                    "rendered": {
                      "text": "         \"\\xd7\\x9e\\x1c\\x30\\x8a\\xa5\\xbb\\xcd\\xee\\xa8\\xed\\x63\\xdf\\x41\\x2d\\xa9\"},\n        {\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\n         \"\\x04\\x3f\\x85\\x82\\xf2\\x41\\xdb\\x35\\x1c\\xe6\\x27\\xe1\\x53\\xe7\\xf0\\xe4\"},\n        {\"12345678901234567890123456789012345678901234567890123456789012345678901234567890\",\n         \"\\xe3\\x3b\\x4d\\xdc\\x9c\\x38\\xf2\\x19\\x9c\\x3e\\x7b\\x16\\x4f\\xcc\\x05\\x36\"}\n};\n\n",
                      "markdown": "`         \"\\xd7\\x9e\\x1c\\x30\\x8a\\xa5\\xbb\\xcd\\xee\\xa8\\xed\\x63\\xdf\\x41\\x2d\\xa9\"},\n        {\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\n         \"\\x04\\x3f\\x85\\x82\\xf2\\x41\\xdb\\x35\\x1c\\xe6\\x27\\xe1\\x53\\xe7\\xf0\\xe4\"},\n        {\"12345678901234567890123456789012345678901234567890123456789012345678901234567890\",\n         \"\\xe3\\x3b\\x4d\\xdc\\x9c\\x38\\xf2\\x19\\x9c\\x3e\\x7b\\x16\\x4f\\xcc\\x05\\x36\"}\n};\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testmd4.c"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 9,
                  "endLine": 68,
                  "endColumn": 73,
                  "snippet": {
                    "text": "         \"\\xd9\\x13\\x0a\\x81\\x64\\x54\\x9f\\xe8\\x18\\x87\\x48\\x06\\xe1\\xc7\\x01\\x4b\"},\n        {\"abcdefghijklmnopqrstuvwxyz\",\n         \"\\xd7\\x9e\\x1c\\x30\\x8a\\xa5\\xbb\\xcd\\xee\\xa8\\xed\\x63\\xdf\\x41\\x2d\\xa9\"},\n        {\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\n         \"\\x04\\x3f\\x85\\x82\\xf2\\x41\\xdb\\x35\\x1c\\xe6\\x27\\xe1\\x53\\xe7\\xf0\\xe4\"},\n        {\"12345678901234567890123456789012345678901234567890123456789012345678901234567890\",\n         \"\\xe3\\x3b\\x4d\\xdc\\x9c\\x38\\xf2\\x19\\x9c\\x3e\\x7b\\x16\\x4f\\xcc\\x05\\x36\"}\n",
                    "rendered": {
                      "text": "         \"\\xd9\\x13\\x0a\\x81\\x64\\x54\\x9f\\xe8\\x18\\x87\\x48\\x06\\xe1\\xc7\\x01\\x4b\"},\n        {\"abcdefghijklmnopqrstuvwxyz\",\n         \"\\xd7\\x9e\\x1c\\x30\\x8a\\xa5\\xbb\\xcd\\xee\\xa8\\xed\\x63\\xdf\\x41\\x2d\\xa9\"},\n        {\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\n         \"\\x04\\x3f\\x85\\x82\\xf2\\x41\\xdb\\x35\\x1c\\xe6\\x27\\xe1\\x53\\xe7\\xf0\\xe4\"},\n        {\"12345678901234567890123456789012345678901234567890123456789012345678901234567890\",\n         \"\\xe3\\x3b\\x4d\\xdc\\x9c\\x38\\xf2\\x19\\x9c\\x3e\\x7b\\x16\\x4f\\xcc\\x05\\x36\"}\n",
                      "markdown": "`         \"\\xd9\\x13\\x0a\\x81\\x64\\x54\\x9f\\xe8\\x18\\x87\\x48\\x06\\xe1\\xc7\\x01\\x4b\"},\n        {\"abcdefghijklmnopqrstuvwxyz\",\n         \"\\xd7\\x9e\\x1c\\x30\\x8a\\xa5\\xbb\\xcd\\xee\\xa8\\xed\\x63\\xdf\\x41\\x2d\\xa9\"},\n        {\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\n         \"\\x04\\x3f\\x85\\x82\\xf2\\x41\\xdb\\x35\\x1c\\xe6\\x27\\xe1\\x53\\xe7\\xf0\\xe4\"},\n        {\"12345678901234567890123456789012345678901234567890123456789012345678901234567890\",\n         \"\\xe3\\x3b\\x4d\\xdc\\x9c\\x38\\xf2\\x19\\x9c\\x3e\\x7b\\x16\\x4f\\xcc\\x05\\x36\"}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000805"
          },
          "message": {
            "text": "Backdoor: Long Binary Strings",
            "id": "BD000805"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testmd4.c"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 10,
                  "endLine": 71,
                  "endColumn": 74,
                  "snippet": {
                    "text": "        {\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\n         \"\\x04\\x3f\\x85\\x82\\xf2\\x41\\xdb\\x35\\x1c\\xe6\\x27\\xe1\\x53\\xe7\\xf0\\xe4\"},\n        {\"12345678901234567890123456789012345678901234567890123456789012345678901234567890\",\n         \"\\xe3\\x3b\\x4d\\xdc\\x9c\\x38\\xf2\\x19\\x9c\\x3e\\x7b\\x16\\x4f\\xcc\\x05\\x36\"}\n};\n\nstatic int num_sums = sizeof(md4sums) / sizeof(md4sums[0]);\n",
                    "rendered": {
                      "text": "        {\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\n         \"\\x04\\x3f\\x85\\x82\\xf2\\x41\\xdb\\x35\\x1c\\xe6\\x27\\xe1\\x53\\xe7\\xf0\\xe4\"},\n        {\"12345678901234567890123456789012345678901234567890123456789012345678901234567890\",\n         \"\\xe3\\x3b\\x4d\\xdc\\x9c\\x38\\xf2\\x19\\x9c\\x3e\\x7b\\x16\\x4f\\xcc\\x05\\x36\"}\n};\n\nstatic int num_sums = sizeof(md4sums) / sizeof(md4sums[0]);\n",
                      "markdown": "`        {\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\n         \"\\x04\\x3f\\x85\\x82\\xf2\\x41\\xdb\\x35\\x1c\\xe6\\x27\\xe1\\x53\\xe7\\xf0\\xe4\"},\n        {\"12345678901234567890123456789012345678901234567890123456789012345678901234567890\",\n         \"\\xe3\\x3b\\x4d\\xdc\\x9c\\x38\\xf2\\x19\\x9c\\x3e\\x7b\\x16\\x4f\\xcc\\x05\\x36\"}\n};\n\nstatic int num_sums = sizeof(md4sums) / sizeof(md4sums[0]);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000805"
          },
          "message": {
            "text": "Backdoor: Long Binary Strings",
            "id": "BD000805"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testmd4.c"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 10,
                  "endLine": 69,
                  "endColumn": 74,
                  "snippet": {
                    "text": "        {\"abcdefghijklmnopqrstuvwxyz\",\n         \"\\xd7\\x9e\\x1c\\x30\\x8a\\xa5\\xbb\\xcd\\xee\\xa8\\xed\\x63\\xdf\\x41\\x2d\\xa9\"},\n        {\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\n         \"\\x04\\x3f\\x85\\x82\\xf2\\x41\\xdb\\x35\\x1c\\xe6\\x27\\xe1\\x53\\xe7\\xf0\\xe4\"},\n        {\"12345678901234567890123456789012345678901234567890123456789012345678901234567890\",\n         \"\\xe3\\x3b\\x4d\\xdc\\x9c\\x38\\xf2\\x19\\x9c\\x3e\\x7b\\x16\\x4f\\xcc\\x05\\x36\"}\n};\n",
                    "rendered": {
                      "text": "        {\"abcdefghijklmnopqrstuvwxyz\",\n         \"\\xd7\\x9e\\x1c\\x30\\x8a\\xa5\\xbb\\xcd\\xee\\xa8\\xed\\x63\\xdf\\x41\\x2d\\xa9\"},\n        {\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\n         \"\\x04\\x3f\\x85\\x82\\xf2\\x41\\xdb\\x35\\x1c\\xe6\\x27\\xe1\\x53\\xe7\\xf0\\xe4\"},\n        {\"12345678901234567890123456789012345678901234567890123456789012345678901234567890\",\n         \"\\xe3\\x3b\\x4d\\xdc\\x9c\\x38\\xf2\\x19\\x9c\\x3e\\x7b\\x16\\x4f\\xcc\\x05\\x36\"}\n};\n",
                      "markdown": "`        {\"abcdefghijklmnopqrstuvwxyz\",\n         \"\\xd7\\x9e\\x1c\\x30\\x8a\\xa5\\xbb\\xcd\\xee\\xa8\\xed\\x63\\xdf\\x41\\x2d\\xa9\"},\n        {\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\n         \"\\x04\\x3f\\x85\\x82\\xf2\\x41\\xdb\\x35\\x1c\\xe6\\x27\\xe1\\x53\\xe7\\xf0\\xe4\"},\n        {\"12345678901234567890123456789012345678901234567890123456789012345678901234567890\",\n         \"\\xe3\\x3b\\x4d\\xdc\\x9c\\x38\\xf2\\x19\\x9c\\x3e\\x7b\\x16\\x4f\\xcc\\x05\\x36\"}\n};\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000805"
          },
          "message": {
            "text": "Backdoor: Long Binary Strings",
            "id": "BD000805"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testmd4.c"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 10,
                  "endLine": 67,
                  "endColumn": 74,
                  "snippet": {
                    "text": "        {\"message digest\",\n         \"\\xd9\\x13\\x0a\\x81\\x64\\x54\\x9f\\xe8\\x18\\x87\\x48\\x06\\xe1\\xc7\\x01\\x4b\"},\n        {\"abcdefghijklmnopqrstuvwxyz\",\n         \"\\xd7\\x9e\\x1c\\x30\\x8a\\xa5\\xbb\\xcd\\xee\\xa8\\xed\\x63\\xdf\\x41\\x2d\\xa9\"},\n        {\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\n         \"\\x04\\x3f\\x85\\x82\\xf2\\x41\\xdb\\x35\\x1c\\xe6\\x27\\xe1\\x53\\xe7\\xf0\\xe4\"},\n        {\"12345678901234567890123456789012345678901234567890123456789012345678901234567890\",\n",
                    "rendered": {
                      "text": "        {\"message digest\",\n         \"\\xd9\\x13\\x0a\\x81\\x64\\x54\\x9f\\xe8\\x18\\x87\\x48\\x06\\xe1\\xc7\\x01\\x4b\"},\n        {\"abcdefghijklmnopqrstuvwxyz\",\n         \"\\xd7\\x9e\\x1c\\x30\\x8a\\xa5\\xbb\\xcd\\xee\\xa8\\xed\\x63\\xdf\\x41\\x2d\\xa9\"},\n        {\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\n         \"\\x04\\x3f\\x85\\x82\\xf2\\x41\\xdb\\x35\\x1c\\xe6\\x27\\xe1\\x53\\xe7\\xf0\\xe4\"},\n        {\"12345678901234567890123456789012345678901234567890123456789012345678901234567890\",\n",
                      "markdown": "`        {\"message digest\",\n         \"\\xd9\\x13\\x0a\\x81\\x64\\x54\\x9f\\xe8\\x18\\x87\\x48\\x06\\xe1\\xc7\\x01\\x4b\"},\n        {\"abcdefghijklmnopqrstuvwxyz\",\n         \"\\xd7\\x9e\\x1c\\x30\\x8a\\xa5\\xbb\\xcd\\xee\\xa8\\xed\\x63\\xdf\\x41\\x2d\\xa9\"},\n        {\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\n         \"\\x04\\x3f\\x85\\x82\\xf2\\x41\\xdb\\x35\\x1c\\xe6\\x27\\xe1\\x53\\xe7\\xf0\\xe4\"},\n        {\"12345678901234567890123456789012345678901234567890123456789012345678901234567890\",\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000805"
          },
          "message": {
            "text": "Backdoor: Long Binary Strings",
            "id": "BD000805"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testmd4.c"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 10,
                  "endLine": 65,
                  "endColumn": 74,
                  "snippet": {
                    "text": "        {\"abc\",\n         \"\\xa4\\x48\\x01\\x7a\\xaf\\x21\\xd8\\x52\\x5f\\xc1\\x0a\\xe8\\x7a\\xa6\\x72\\x9d\"},\n        {\"message digest\",\n         \"\\xd9\\x13\\x0a\\x81\\x64\\x54\\x9f\\xe8\\x18\\x87\\x48\\x06\\xe1\\xc7\\x01\\x4b\"},\n        {\"abcdefghijklmnopqrstuvwxyz\",\n         \"\\xd7\\x9e\\x1c\\x30\\x8a\\xa5\\xbb\\xcd\\xee\\xa8\\xed\\x63\\xdf\\x41\\x2d\\xa9\"},\n        {\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\n",
                    "rendered": {
                      "text": "        {\"abc\",\n         \"\\xa4\\x48\\x01\\x7a\\xaf\\x21\\xd8\\x52\\x5f\\xc1\\x0a\\xe8\\x7a\\xa6\\x72\\x9d\"},\n        {\"message digest\",\n         \"\\xd9\\x13\\x0a\\x81\\x64\\x54\\x9f\\xe8\\x18\\x87\\x48\\x06\\xe1\\xc7\\x01\\x4b\"},\n        {\"abcdefghijklmnopqrstuvwxyz\",\n         \"\\xd7\\x9e\\x1c\\x30\\x8a\\xa5\\xbb\\xcd\\xee\\xa8\\xed\\x63\\xdf\\x41\\x2d\\xa9\"},\n        {\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\n",
                      "markdown": "`        {\"abc\",\n         \"\\xa4\\x48\\x01\\x7a\\xaf\\x21\\xd8\\x52\\x5f\\xc1\\x0a\\xe8\\x7a\\xa6\\x72\\x9d\"},\n        {\"message digest\",\n         \"\\xd9\\x13\\x0a\\x81\\x64\\x54\\x9f\\xe8\\x18\\x87\\x48\\x06\\xe1\\xc7\\x01\\x4b\"},\n        {\"abcdefghijklmnopqrstuvwxyz\",\n         \"\\xd7\\x9e\\x1c\\x30\\x8a\\xa5\\xbb\\xcd\\xee\\xa8\\xed\\x63\\xdf\\x41\\x2d\\xa9\"},\n        {\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000805"
          },
          "message": {
            "text": "Backdoor: Long Binary Strings",
            "id": "BD000805"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testmd4.c"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 10,
                  "endLine": 63,
                  "endColumn": 74,
                  "snippet": {
                    "text": "        {\"a\",\n         \"\\xbd\\xe5\\x2c\\xb3\\x1d\\xe3\\x3e\\x46\\x24\\x5e\\x05\\xfb\\xdb\\xd6\\xfb\\x24\"},\n        {\"abc\",\n         \"\\xa4\\x48\\x01\\x7a\\xaf\\x21\\xd8\\x52\\x5f\\xc1\\x0a\\xe8\\x7a\\xa6\\x72\\x9d\"},\n        {\"message digest\",\n         \"\\xd9\\x13\\x0a\\x81\\x64\\x54\\x9f\\xe8\\x18\\x87\\x48\\x06\\xe1\\xc7\\x01\\x4b\"},\n        {\"abcdefghijklmnopqrstuvwxyz\",\n",
                    "rendered": {
                      "text": "        {\"a\",\n         \"\\xbd\\xe5\\x2c\\xb3\\x1d\\xe3\\x3e\\x46\\x24\\x5e\\x05\\xfb\\xdb\\xd6\\xfb\\x24\"},\n        {\"abc\",\n         \"\\xa4\\x48\\x01\\x7a\\xaf\\x21\\xd8\\x52\\x5f\\xc1\\x0a\\xe8\\x7a\\xa6\\x72\\x9d\"},\n        {\"message digest\",\n         \"\\xd9\\x13\\x0a\\x81\\x64\\x54\\x9f\\xe8\\x18\\x87\\x48\\x06\\xe1\\xc7\\x01\\x4b\"},\n        {\"abcdefghijklmnopqrstuvwxyz\",\n",
                      "markdown": "`        {\"a\",\n         \"\\xbd\\xe5\\x2c\\xb3\\x1d\\xe3\\x3e\\x46\\x24\\x5e\\x05\\xfb\\xdb\\xd6\\xfb\\x24\"},\n        {\"abc\",\n         \"\\xa4\\x48\\x01\\x7a\\xaf\\x21\\xd8\\x52\\x5f\\xc1\\x0a\\xe8\\x7a\\xa6\\x72\\x9d\"},\n        {\"message digest\",\n         \"\\xd9\\x13\\x0a\\x81\\x64\\x54\\x9f\\xe8\\x18\\x87\\x48\\x06\\xe1\\xc7\\x01\\x4b\"},\n        {\"abcdefghijklmnopqrstuvwxyz\",\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000805"
          },
          "message": {
            "text": "Backdoor: Long Binary Strings",
            "id": "BD000805"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testmd4.c"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 10,
                  "endLine": 61,
                  "endColumn": 74,
                  "snippet": {
                    "text": "        {\"\",\n         \"\\x31\\xd6\\xcf\\xe0\\xd1\\x6a\\xe9\\x31\\xb7\\x3c\\x59\\xd7\\xe0\\xc0\\x89\\xc0\"},\n        {\"a\",\n         \"\\xbd\\xe5\\x2c\\xb3\\x1d\\xe3\\x3e\\x46\\x24\\x5e\\x05\\xfb\\xdb\\xd6\\xfb\\x24\"},\n        {\"abc\",\n         \"\\xa4\\x48\\x01\\x7a\\xaf\\x21\\xd8\\x52\\x5f\\xc1\\x0a\\xe8\\x7a\\xa6\\x72\\x9d\"},\n        {\"message digest\",\n",
                    "rendered": {
                      "text": "        {\"\",\n         \"\\x31\\xd6\\xcf\\xe0\\xd1\\x6a\\xe9\\x31\\xb7\\x3c\\x59\\xd7\\xe0\\xc0\\x89\\xc0\"},\n        {\"a\",\n         \"\\xbd\\xe5\\x2c\\xb3\\x1d\\xe3\\x3e\\x46\\x24\\x5e\\x05\\xfb\\xdb\\xd6\\xfb\\x24\"},\n        {\"abc\",\n         \"\\xa4\\x48\\x01\\x7a\\xaf\\x21\\xd8\\x52\\x5f\\xc1\\x0a\\xe8\\x7a\\xa6\\x72\\x9d\"},\n        {\"message digest\",\n",
                      "markdown": "`        {\"\",\n         \"\\x31\\xd6\\xcf\\xe0\\xd1\\x6a\\xe9\\x31\\xb7\\x3c\\x59\\xd7\\xe0\\xc0\\x89\\xc0\"},\n        {\"a\",\n         \"\\xbd\\xe5\\x2c\\xb3\\x1d\\xe3\\x3e\\x46\\x24\\x5e\\x05\\xfb\\xdb\\xd6\\xfb\\x24\"},\n        {\"abc\",\n         \"\\xa4\\x48\\x01\\x7a\\xaf\\x21\\xd8\\x52\\x5f\\xc1\\x0a\\xe8\\x7a\\xa6\\x72\\x9d\"},\n        {\"message digest\",\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000805"
          },
          "message": {
            "text": "Backdoor: Long Binary Strings",
            "id": "BD000805"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testmd4.c"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 10,
                  "endLine": 59,
                  "endColumn": 74,
                  "snippet": {
                    "text": "*\n*/\n        {\"\",\n         \"\\x31\\xd6\\xcf\\xe0\\xd1\\x6a\\xe9\\x31\\xb7\\x3c\\x59\\xd7\\xe0\\xc0\\x89\\xc0\"},\n        {\"a\",\n         \"\\xbd\\xe5\\x2c\\xb3\\x1d\\xe3\\x3e\\x46\\x24\\x5e\\x05\\xfb\\xdb\\xd6\\xfb\\x24\"},\n        {\"abc\",\n",
                    "rendered": {
                      "text": "*\n*/\n        {\"\",\n         \"\\x31\\xd6\\xcf\\xe0\\xd1\\x6a\\xe9\\x31\\xb7\\x3c\\x59\\xd7\\xe0\\xc0\\x89\\xc0\"},\n        {\"a\",\n         \"\\xbd\\xe5\\x2c\\xb3\\x1d\\xe3\\x3e\\x46\\x24\\x5e\\x05\\xfb\\xdb\\xd6\\xfb\\x24\"},\n        {\"abc\",\n",
                      "markdown": "`*\n*/\n        {\"\",\n         \"\\x31\\xd6\\xcf\\xe0\\xd1\\x6a\\xe9\\x31\\xb7\\x3c\\x59\\xd7\\xe0\\xc0\\x89\\xc0\"},\n        {\"a\",\n         \"\\xbd\\xe5\\x2c\\xb3\\x1d\\xe3\\x3e\\x46\\x24\\x5e\\x05\\xfb\\xdb\\xd6\\xfb\\x24\"},\n        {\"abc\",\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/xml/apr_xml_xmllite.c"
                },
                "region": {
                  "startLine": 291,
                  "startColumn": 36,
                  "endLine": 291,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        case WC_E_UNIQUEATTRIBUTE:\n            return \"well-formedness constraint: unique attribute spec\";\n        case WC_E_TEXTXMLDECL:\n            return \"text/xmldecl not at the beginning of input\";\n        case WC_E_LEADINGXML:\n            return \"leading \\\"xml\\\"\";\n        case WC_E_TEXTDECL:\n",
                    "rendered": {
                      "text": "        case WC_E_UNIQUEATTRIBUTE:\n            return \"well-formedness constraint: unique attribute spec\";\n        case WC_E_TEXTXMLDECL:\n            return \"text/xmldecl not at the beginning of input\";\n        case WC_E_LEADINGXML:\n            return \"leading \\\"xml\\\"\";\n        case WC_E_TEXTDECL:\n",
                      "markdown": "`        case WC_E_UNIQUEATTRIBUTE:\n            return \"well-formedness constraint: unique attribute spec\";\n        case WC_E_TEXTXMLDECL:\n            return \"text/xmldecl not at the beginning of input\";\n        case WC_E_LEADINGXML:\n            return \"leading \\\"xml\\\"\";\n        case WC_E_TEXTDECL:\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_ring.h"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 10,
                  "endLine": 92,
                  "endColumn": 16,
                  "snippet": {
                    "text": " * element is just before the head.\n */\n#define APR_RING_HEAD(head, elem)            \\\n    struct head {                            \\\n    struct elem * volatile next;             \\\n    struct elem * volatile prev;             \\\n    }\n",
                    "rendered": {
                      "text": " * element is just before the head.\n */\n#define APR_RING_HEAD(head, elem)            \\\n    struct head {                            \\\n    struct elem * volatile next;             \\\n    struct elem * volatile prev;             \\\n    }\n",
                      "markdown": "` * element is just before the head.\n */\n#define APR_RING_HEAD(head, elem)            \\\n    struct head {                            \\\n    struct elem * volatile next;             \\\n    struct elem * volatile prev;             \\\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_thread_proc.h"
                },
                "region": {
                  "startLine": 653,
                  "startColumn": 60,
                  "endLine": 653,
                  "endColumn": 68,
                  "snippet": {
                    "text": " */\nAPR_DECLARE(apr_status_t) apr_procattr_user_set(apr_procattr_t *attr,\n                                                const char *username,\n                                                const char *password);\n\n/**\n * Set the group used for running process\n",
                    "rendered": {
                      "text": " */\nAPR_DECLARE(apr_status_t) apr_procattr_user_set(apr_procattr_t *attr,\n                                                const char *username,\n                                                const char *password);\n\n/**\n * Set the group used for running process\n",
                      "markdown": "` */\nAPR_DECLARE(apr_status_t) apr_procattr_user_set(apr_procattr_t *attr,\n                                                const char *username,\n                                                const char *password);\n\n/**\n * Set the group used for running process\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_thread_proc.h"
                },
                "region": {
                  "startLine": 649,
                  "startColumn": 50,
                  "endLine": 649,
                  "endColumn": 58,
                  "snippet": {
                    "text": " * @param username The username used\n * @param password User password if needed. Password is needed on WIN32\n *                 or any other platform having\n *                 APR_PROCATTR_USER_SET_REQUIRES_PASSWORD set.\n */\nAPR_DECLARE(apr_status_t) apr_procattr_user_set(apr_procattr_t *attr,\n                                                const char *username,\n",
                    "rendered": {
                      "text": " * @param username The username used\n * @param password User password if needed. Password is needed on WIN32\n *                 or any other platform having\n *                 APR_PROCATTR_USER_SET_REQUIRES_PASSWORD set.\n */\nAPR_DECLARE(apr_status_t) apr_procattr_user_set(apr_procattr_t *attr,\n                                                const char *username,\n",
                      "markdown": "` * @param username The username used\n * @param password User password if needed. Password is needed on WIN32\n *                 or any other platform having\n *                 APR_PROCATTR_USER_SET_REQUIRES_PASSWORD set.\n */\nAPR_DECLARE(apr_status_t) apr_procattr_user_set(apr_procattr_t *attr,\n                                                const char *username,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_thread_proc.h"
                },
                "region": {
                  "startLine": 647,
                  "startColumn": 44,
                  "endLine": 647,
                  "endColumn": 52,
                  "snippet": {
                    "text": " * Set the username used for running process\n * @param attr The procattr we care about.\n * @param username The username used\n * @param password User password if needed. Password is needed on WIN32\n *                 or any other platform having\n *                 APR_PROCATTR_USER_SET_REQUIRES_PASSWORD set.\n */\n",
                    "rendered": {
                      "text": " * Set the username used for running process\n * @param attr The procattr we care about.\n * @param username The username used\n * @param password User password if needed. Password is needed on WIN32\n *                 or any other platform having\n *                 APR_PROCATTR_USER_SET_REQUIRES_PASSWORD set.\n */\n",
                      "markdown": "` * Set the username used for running process\n * @param attr The procattr we care about.\n * @param username The username used\n * @param password User password if needed. Password is needed on WIN32\n *                 or any other platform having\n *                 APR_PROCATTR_USER_SET_REQUIRES_PASSWORD set.\n */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_thread_proc.h"
                },
                "region": {
                  "startLine": 647,
                  "startColumn": 24,
                  "endLine": 647,
                  "endColumn": 32,
                  "snippet": {
                    "text": " * Set the username used for running process\n * @param attr The procattr we care about.\n * @param username The username used\n * @param password User password if needed. Password is needed on WIN32\n *                 or any other platform having\n *                 APR_PROCATTR_USER_SET_REQUIRES_PASSWORD set.\n */\n",
                    "rendered": {
                      "text": " * Set the username used for running process\n * @param attr The procattr we care about.\n * @param username The username used\n * @param password User password if needed. Password is needed on WIN32\n *                 or any other platform having\n *                 APR_PROCATTR_USER_SET_REQUIRES_PASSWORD set.\n */\n",
                      "markdown": "` * Set the username used for running process\n * @param attr The procattr we care about.\n * @param username The username used\n * @param password User password if needed. Password is needed on WIN32\n *                 or any other platform having\n *                 APR_PROCATTR_USER_SET_REQUIRES_PASSWORD set.\n */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_thread_proc.h"
                },
                "region": {
                  "startLine": 647,
                  "startColumn": 10,
                  "endLine": 647,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * Set the username used for running process\n * @param attr The procattr we care about.\n * @param username The username used\n * @param password User password if needed. Password is needed on WIN32\n *                 or any other platform having\n *                 APR_PROCATTR_USER_SET_REQUIRES_PASSWORD set.\n */\n",
                    "rendered": {
                      "text": " * Set the username used for running process\n * @param attr The procattr we care about.\n * @param username The username used\n * @param password User password if needed. Password is needed on WIN32\n *                 or any other platform having\n *                 APR_PROCATTR_USER_SET_REQUIRES_PASSWORD set.\n */\n",
                      "markdown": "` * Set the username used for running process\n * @param attr The procattr we care about.\n * @param username The username used\n * @param password User password if needed. Password is needed on WIN32\n *                 or any other platform having\n *                 APR_PROCATTR_USER_SET_REQUIRES_PASSWORD set.\n */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_env.h"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 30,
                  "endLine": 42,
                  "endColumn": 37,
                  "snippet": {
                    "text": " * @param envvar the name of the environment variable\n * @param pool where to allocate @a value and any temporary storage from\n */\nAPR_DECLARE(apr_status_t) apr_env_get(char **value, const char *envvar,\n                                      apr_pool_t *pool);\n\n/**\n",
                    "rendered": {
                      "text": " * @param envvar the name of the environment variable\n * @param pool where to allocate @a value and any temporary storage from\n */\nAPR_DECLARE(apr_status_t) apr_env_get(char **value, const char *envvar,\n                                      apr_pool_t *pool);\n\n/**\n",
                      "markdown": "` * @param envvar the name of the environment variable\n * @param pool where to allocate @a value and any temporary storage from\n */\nAPR_DECLARE(apr_status_t) apr_env_get(char **value, const char *envvar,\n                                      apr_pool_t *pool);\n\n/**\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_env.h"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 17,
                  "endLine": 31,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#endif /* __cplusplus */\n\n/**\n * @defgroup apr_env Functions for manipulating the environment\n * @ingroup APR\n * @{\n */\n",
                    "rendered": {
                      "text": "#endif /* __cplusplus */\n\n/**\n * @defgroup apr_env Functions for manipulating the environment\n * @ingroup APR\n * @{\n */\n",
                      "markdown": "`#endif /* __cplusplus */\n\n/**\n * @defgroup apr_env Functions for manipulating the environment\n * @ingroup APR\n * @{\n */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_env.h"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 14,
                  "endLine": 21,
                  "endColumn": 30,
                  "snippet": {
                    "text": "#define APR_ENV_H\n/**\n * @file apr_env.h\n * @brief APR Environment functions\n */\n#include \"apr_errno.h\"\n#include \"apr_pools.h\"\n",
                    "rendered": {
                      "text": "#define APR_ENV_H\n/**\n * @file apr_env.h\n * @brief APR Environment functions\n */\n#include \"apr_errno.h\"\n#include \"apr_pools.h\"\n",
                      "markdown": "`#define APR_ENV_H\n/**\n * @file apr_env.h\n * @brief APR Environment functions\n */\n#include \"apr_errno.h\"\n#include \"apr_pools.h\"\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/README"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 65,
                  "endLine": 219,
                  "endColumn": 8,
                  "snippet": {
                    "text": "information.\n\nThe U.S. Government Department of Commerce, Bureau of Industry and\nSecurity (BIS), has classified this software as Export Commodity \nControl Number (ECCN) 5D002.C.1, which includes information security\nsoftware using or performing cryptographic functions with asymmetric\nalgorithms.  The form and manner of this Apache Software Foundation\ndistribution makes it eligible for export under the License Exception\n",
                    "rendered": {
                      "text": "information.\n\nThe U.S. Government Department of Commerce, Bureau of Industry and\nSecurity (BIS), has classified this software as Export Commodity \nControl Number (ECCN) 5D002.C.1, which includes information security\nsoftware using or performing cryptographic functions with asymmetric\nalgorithms.  The form and manner of this Apache Software Foundation\ndistribution makes it eligible for export under the License Exception\n",
                      "markdown": "`information.\n\nThe U.S. Government Department of Commerce, Bureau of Industry and\nSecurity (BIS), has classified this software as Export Commodity \nControl Number (ECCN) 5D002.C.1, which includes information security\nsoftware using or performing cryptographic functions with asymmetric\nalgorithms.  The form and manner of this Apache Software Foundation\ndistribution makes it eligible for export under the License Exception\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/README"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 56,
                  "endLine": 73,
                  "snippet": {
                    "text": "\n   APR is already used extensively by the Apache HTTP Server\n   version 2 and the Subversion revision control system, to\n   name but a few.  We list all known projects using APR at\n   http://apr.apache.org/projects.html -- so please let us know\n   if you find our libraries useful in your own projects!\n\n\n",
                    "rendered": {
                      "text": "\n   APR is already used extensively by the Apache HTTP Server\n   version 2 and the Subversion revision control system, to\n   name but a few.  We list all known projects using APR at\n   http://apr.apache.org/projects.html -- so please let us know\n   if you find our libraries useful in your own projects!\n\n\n",
                      "markdown": "`\n   APR is already used extensively by the Apache HTTP Server\n   version 2 and the Subversion revision control system, to\n   name but a few.  We list all known projects using APR at\n   http://apr.apache.org/projects.html -- so please let us know\n   if you find our libraries useful in your own projects!\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/README"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 40,
                  "endLine": 71,
                  "endColumn": 49,
                  "snippet": {
                    "text": "     http://apr.apache.org/versioning.html\n\n   APR is already used extensively by the Apache HTTP Server\n   version 2 and the Subversion revision control system, to\n   name but a few.  We list all known projects using APR at\n   http://apr.apache.org/projects.html -- so please let us know\n   if you find our libraries useful in your own projects!\n",
                    "rendered": {
                      "text": "     http://apr.apache.org/versioning.html\n\n   APR is already used extensively by the Apache HTTP Server\n   version 2 and the Subversion revision control system, to\n   name but a few.  We list all known projects using APR at\n   http://apr.apache.org/projects.html -- so please let us know\n   if you find our libraries useful in your own projects!\n",
                      "markdown": "`     http://apr.apache.org/versioning.html\n\n   APR is already used extensively by the Apache HTTP Server\n   version 2 and the Subversion revision control system, to\n   name but a few.  We list all known projects using APR at\n   http://apr.apache.org/projects.html -- so please let us know\n   if you find our libraries useful in your own projects!\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/README"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 12,
                  "endLine": 139,
                  "endColumn": 17,
                  "snippet": {
                    "text": "   ./testall -v\n\n\nBuilding APR RPM files on Linux\n===============================\n\nRun the following to create SRPMs:\n",
                    "rendered": {
                      "text": "   ./testall -v\n\n\nBuilding APR RPM files on Linux\n===============================\n\nRun the following to create SRPMs:\n",
                      "markdown": "`   ./testall -v\n\n\nBuilding APR RPM files on Linux\n===============================\n\nRun the following to create SRPMs:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/README"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 45,
                  "endLine": 132,
                  "endColumn": 51,
                  "snippet": {
                    "text": "must consider that when setting up all of APR's internal and external\ntype declarations.\n\nFor more verbose output from testall, you may wish to invoke testall\nwith the flag;\n\n   cd test\n",
                    "rendered": {
                      "text": "must consider that when setting up all of APR's internal and external\ntype declarations.\n\nFor more verbose output from testall, you may wish to invoke testall\nwith the flag;\n\n   cd test\n",
                      "markdown": "`must consider that when setting up all of APR's internal and external\ntype declarations.\n\nFor more verbose output from testall, you may wish to invoke testall\nwith the flag;\n\n   cd test\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/README"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 33,
                  "endLine": 79,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\nDatabase Providers\n==================\nInterfaces for copy-left licensed MySQL and gdbm DBD drivers, and \nBerkeley DB DBM all ship as part of the distribution.  To avoid licensing\nincompatibilities, these are not built by default.  To enable support, \nthe corresponding use the --with-{provider} option, but be aware that \n",
                    "rendered": {
                      "text": "\nDatabase Providers\n==================\nInterfaces for copy-left licensed MySQL and gdbm DBD drivers, and \nBerkeley DB DBM all ship as part of the distribution.  To avoid licensing\nincompatibilities, these are not built by default.  To enable support, \nthe corresponding use the --with-{provider} option, but be aware that \n",
                      "markdown": "`\nDatabase Providers\n==================\nInterfaces for copy-left licensed MySQL and gdbm DBD drivers, and \nBerkeley DB DBM all ship as part of the distribution.  To avoid licensing\nincompatibilities, these are not built by default.  To enable support, \nthe corresponding use the --with-{provider} option, but be aware that \n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/README"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 9,
                  "endLine": 74,
                  "endColumn": 15,
                  "snippet": {
                    "text": "   version 2 and the Subversion revision control system, to\n   name but a few.  We list all known projects using APR at\n   http://apr.apache.org/projects.html -- so please let us know\n   if you find our libraries useful in your own projects!\n\n\nDatabase Providers\n",
                    "rendered": {
                      "text": "   version 2 and the Subversion revision control system, to\n   name but a few.  We list all known projects using APR at\n   http://apr.apache.org/projects.html -- so please let us know\n   if you find our libraries useful in your own projects!\n\n\nDatabase Providers\n",
                      "markdown": "`   version 2 and the Subversion revision control system, to\n   name but a few.  We list all known projects using APR at\n   http://apr.apache.org/projects.html -- so please let us know\n   if you find our libraries useful in your own projects!\n\n\nDatabase Providers\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/README"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 23,
                  "endLine": 64,
                  "endColumn": 31,
                  "snippet": {
                    "text": "   Users of APR 0.9 should be aware that migrating to the APR 1.x\n   programming interfaces may require some adjustments; APR 1.x is\n   neither source nor binary compatible with earlier APR 0.9 releases.\n   Users of APR 1.x can expect consistent interfaces and binary backwards\n   compatibility throughout the entire APR 1.x release cycle, as defined\n   in our versioning rules:\n\n",
                    "rendered": {
                      "text": "   Users of APR 0.9 should be aware that migrating to the APR 1.x\n   programming interfaces may require some adjustments; APR 1.x is\n   neither source nor binary compatible with earlier APR 0.9 releases.\n   Users of APR 1.x can expect consistent interfaces and binary backwards\n   compatibility throughout the entire APR 1.x release cycle, as defined\n   in our versioning rules:\n\n",
                      "markdown": "`   Users of APR 0.9 should be aware that migrating to the APR 1.x\n   programming interfaces may require some adjustments; APR 1.x is\n   neither source nor binary compatible with earlier APR 0.9 releases.\n   Users of APR 1.x can expect consistent interfaces and binary backwards\n   compatibility throughout the entire APR 1.x release cycle, as defined\n   in our versioning rules:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/Makefile.in"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 37,
                  "endLine": 150,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\napr.exp: exports.c export_vars.c\n\t@echo \"#! lib@APR_LIBNAME@.so\" > $@\n\t@echo \"* This file was AUTOGENERATED at build time.\" >> $@\n\t@echo \"* Please do not edit by hand.\" >> $@\n\t$(CPP) $(ALL_CPPFLAGS) $(ALL_INCLUDES) exports.c | grep \"ap_hack_\" | sed -e 's/^.*[)]\\(.*\\);$$/\\1/' >> $@\n\t$(CPP) $(ALL_CPPFLAGS) $(ALL_INCLUDES) export_vars.c | sed -e 's/^\\#[^!]*//' | sed -e '/^$$/d' >> $@\n",
                    "rendered": {
                      "text": "\napr.exp: exports.c export_vars.c\n\t@echo \"#! lib@APR_LIBNAME@.so\" > $@\n\t@echo \"* This file was AUTOGENERATED at build time.\" >> $@\n\t@echo \"* Please do not edit by hand.\" >> $@\n\t$(CPP) $(ALL_CPPFLAGS) $(ALL_INCLUDES) exports.c | grep \"ap_hack_\" | sed -e 's/^.*[)]\\(.*\\);$$/\\1/' >> $@\n\t$(CPP) $(ALL_CPPFLAGS) $(ALL_INCLUDES) export_vars.c | sed -e 's/^\\#[^!]*//' | sed -e '/^$$/d' >> $@\n",
                      "markdown": "`\napr.exp: exports.c export_vars.c\n\t@echo \"#! lib@APR_LIBNAME@.so\" > $@\n\t@echo \"* This file was AUTOGENERATED at build time.\" >> $@\n\t@echo \"* Please do not edit by hand.\" >> $@\n\t$(CPP) $(ALL_CPPFLAGS) $(ALL_INCLUDES) exports.c | grep \"ap_hack_\" | sed -e 's/^.*[)]\\(.*\\);$$/\\1/' >> $@\n\t$(CPP) $(ALL_CPPFLAGS) $(ALL_INCLUDES) export_vars.c | sed -e 's/^\\#[^!]*//' | sed -e '/^$$/d' >> $@\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/Makefile.in"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 79,
                  "endLine": 153,
                  "endColumn": 84,
                  "snippet": {
                    "text": "\t@echo \"* This file was AUTOGENERATED at build time.\" >> $@\n\t@echo \"* Please do not edit by hand.\" >> $@\n\t$(CPP) $(ALL_CPPFLAGS) $(ALL_INCLUDES) exports.c | grep \"ap_hack_\" | sed -e 's/^.*[)]\\(.*\\);$$/\\1/' >> $@\n\t$(CPP) $(ALL_CPPFLAGS) $(ALL_INCLUDES) export_vars.c | sed -e 's/^\\#[^!]*//' | sed -e '/^$$/d' >> $@\n\ndox:\n\tdoxygen $(top_srcdir)/docs/doxygen.conf\n",
                    "rendered": {
                      "text": "\t@echo \"* This file was AUTOGENERATED at build time.\" >> $@\n\t@echo \"* Please do not edit by hand.\" >> $@\n\t$(CPP) $(ALL_CPPFLAGS) $(ALL_INCLUDES) exports.c | grep \"ap_hack_\" | sed -e 's/^.*[)]\\(.*\\);$$/\\1/' >> $@\n\t$(CPP) $(ALL_CPPFLAGS) $(ALL_INCLUDES) export_vars.c | sed -e 's/^\\#[^!]*//' | sed -e '/^$$/d' >> $@\n\ndox:\n\tdoxygen $(top_srcdir)/docs/doxygen.conf\n",
                      "markdown": "`\t@echo \"* This file was AUTOGENERATED at build time.\" >> $@\n\t@echo \"* Please do not edit by hand.\" >> $@\n\t$(CPP) $(ALL_CPPFLAGS) $(ALL_INCLUDES) exports.c | grep \"ap_hack_\" | sed -e 's/^.*[)]\\(.*\\);$$/\\1/' >> $@\n\t$(CPP) $(ALL_CPPFLAGS) $(ALL_INCLUDES) export_vars.c | sed -e 's/^\\#[^!]*//' | sed -e '/^$$/d' >> $@\n\ndox:\n\tdoxygen $(top_srcdir)/docs/doxygen.conf\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/Makefile.in"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 55,
                  "endLine": 153,
                  "endColumn": 60,
                  "snippet": {
                    "text": "\t@echo \"* This file was AUTOGENERATED at build time.\" >> $@\n\t@echo \"* Please do not edit by hand.\" >> $@\n\t$(CPP) $(ALL_CPPFLAGS) $(ALL_INCLUDES) exports.c | grep \"ap_hack_\" | sed -e 's/^.*[)]\\(.*\\);$$/\\1/' >> $@\n\t$(CPP) $(ALL_CPPFLAGS) $(ALL_INCLUDES) export_vars.c | sed -e 's/^\\#[^!]*//' | sed -e '/^$$/d' >> $@\n\ndox:\n\tdoxygen $(top_srcdir)/docs/doxygen.conf\n",
                    "rendered": {
                      "text": "\t@echo \"* This file was AUTOGENERATED at build time.\" >> $@\n\t@echo \"* Please do not edit by hand.\" >> $@\n\t$(CPP) $(ALL_CPPFLAGS) $(ALL_INCLUDES) exports.c | grep \"ap_hack_\" | sed -e 's/^.*[)]\\(.*\\);$$/\\1/' >> $@\n\t$(CPP) $(ALL_CPPFLAGS) $(ALL_INCLUDES) export_vars.c | sed -e 's/^\\#[^!]*//' | sed -e '/^$$/d' >> $@\n\ndox:\n\tdoxygen $(top_srcdir)/docs/doxygen.conf\n",
                      "markdown": "`\t@echo \"* This file was AUTOGENERATED at build time.\" >> $@\n\t@echo \"* Please do not edit by hand.\" >> $@\n\t$(CPP) $(ALL_CPPFLAGS) $(ALL_INCLUDES) exports.c | grep \"ap_hack_\" | sed -e 's/^.*[)]\\(.*\\);$$/\\1/' >> $@\n\t$(CPP) $(ALL_CPPFLAGS) $(ALL_INCLUDES) export_vars.c | sed -e 's/^\\#[^!]*//' | sed -e '/^$$/d' >> $@\n\ndox:\n\tdoxygen $(top_srcdir)/docs/doxygen.conf\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/Makefile.in"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 69,
                  "endLine": 152,
                  "endColumn": 74,
                  "snippet": {
                    "text": "\t@echo \"#! lib@APR_LIBNAME@.so\" > $@\n\t@echo \"* This file was AUTOGENERATED at build time.\" >> $@\n\t@echo \"* Please do not edit by hand.\" >> $@\n\t$(CPP) $(ALL_CPPFLAGS) $(ALL_INCLUDES) exports.c | grep \"ap_hack_\" | sed -e 's/^.*[)]\\(.*\\);$$/\\1/' >> $@\n\t$(CPP) $(ALL_CPPFLAGS) $(ALL_INCLUDES) export_vars.c | sed -e 's/^\\#[^!]*//' | sed -e '/^$$/d' >> $@\n\ndox:\n",
                    "rendered": {
                      "text": "\t@echo \"#! lib@APR_LIBNAME@.so\" > $@\n\t@echo \"* This file was AUTOGENERATED at build time.\" >> $@\n\t@echo \"* Please do not edit by hand.\" >> $@\n\t$(CPP) $(ALL_CPPFLAGS) $(ALL_INCLUDES) exports.c | grep \"ap_hack_\" | sed -e 's/^.*[)]\\(.*\\);$$/\\1/' >> $@\n\t$(CPP) $(ALL_CPPFLAGS) $(ALL_INCLUDES) export_vars.c | sed -e 's/^\\#[^!]*//' | sed -e '/^$$/d' >> $@\n\ndox:\n",
                      "markdown": "`\t@echo \"#! lib@APR_LIBNAME@.so\" > $@\n\t@echo \"* This file was AUTOGENERATED at build time.\" >> $@\n\t@echo \"* Please do not edit by hand.\" >> $@\n\t$(CPP) $(ALL_CPPFLAGS) $(ALL_INCLUDES) exports.c | grep \"ap_hack_\" | sed -e 's/^.*[)]\\(.*\\);$$/\\1/' >> $@\n\t$(CPP) $(ALL_CPPFLAGS) $(ALL_INCLUDES) export_vars.c | sed -e 's/^\\#[^!]*//' | sed -e '/^$$/d' >> $@\n\ndox:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/Makefile.in"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 51,
                  "endLine": 152,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\t@echo \"#! lib@APR_LIBNAME@.so\" > $@\n\t@echo \"* This file was AUTOGENERATED at build time.\" >> $@\n\t@echo \"* Please do not edit by hand.\" >> $@\n\t$(CPP) $(ALL_CPPFLAGS) $(ALL_INCLUDES) exports.c | grep \"ap_hack_\" | sed -e 's/^.*[)]\\(.*\\);$$/\\1/' >> $@\n\t$(CPP) $(ALL_CPPFLAGS) $(ALL_INCLUDES) export_vars.c | sed -e 's/^\\#[^!]*//' | sed -e '/^$$/d' >> $@\n\ndox:\n",
                    "rendered": {
                      "text": "\t@echo \"#! lib@APR_LIBNAME@.so\" > $@\n\t@echo \"* This file was AUTOGENERATED at build time.\" >> $@\n\t@echo \"* Please do not edit by hand.\" >> $@\n\t$(CPP) $(ALL_CPPFLAGS) $(ALL_INCLUDES) exports.c | grep \"ap_hack_\" | sed -e 's/^.*[)]\\(.*\\);$$/\\1/' >> $@\n\t$(CPP) $(ALL_CPPFLAGS) $(ALL_INCLUDES) export_vars.c | sed -e 's/^\\#[^!]*//' | sed -e '/^$$/d' >> $@\n\ndox:\n",
                      "markdown": "`\t@echo \"#! lib@APR_LIBNAME@.so\" > $@\n\t@echo \"* This file was AUTOGENERATED at build time.\" >> $@\n\t@echo \"* Please do not edit by hand.\" >> $@\n\t$(CPP) $(ALL_CPPFLAGS) $(ALL_INCLUDES) exports.c | grep \"ap_hack_\" | sed -e 's/^.*[)]\\(.*\\);$$/\\1/' >> $@\n\t$(CPP) $(ALL_CPPFLAGS) $(ALL_INCLUDES) export_vars.c | sed -e 's/^\\#[^!]*//' | sed -e '/^$$/d' >> $@\n\ndox:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/Makefile.in"
                },
                "region": {
                  "startLine": 98,
                  "endLine": 98,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\n# Create apr_rules.mk suitable for the install tree\nbuild/apr_rules.out: build/apr_rules.mk\n\tsed -e 's,^\\(apr_build.*=\\).*$$,\\1$(installbuilddir),' -e 's,^\\(top_build.*=\\).*$$,\\1$(installbuilddir),' < build/apr_rules.mk > $@\n\ninstall: install-modules $(TARGETS)\n\t$(APR_MKDIR) $(DESTDIR)$(libdir) $(DESTDIR)$(bindir) $(DESTDIR)$(installbuilddir) \\\n",
                    "rendered": {
                      "text": "\n# Create apr_rules.mk suitable for the install tree\nbuild/apr_rules.out: build/apr_rules.mk\n\tsed -e 's,^\\(apr_build.*=\\).*$$,\\1$(installbuilddir),' -e 's,^\\(top_build.*=\\).*$$,\\1$(installbuilddir),' < build/apr_rules.mk > $@\n\ninstall: install-modules $(TARGETS)\n\t$(APR_MKDIR) $(DESTDIR)$(libdir) $(DESTDIR)$(bindir) $(DESTDIR)$(installbuilddir) \\\n",
                      "markdown": "`\n# Create apr_rules.mk suitable for the install tree\nbuild/apr_rules.out: build/apr_rules.mk\n\tsed -e 's,^\\(apr_build.*=\\).*$$,\\1$(installbuilddir),' -e 's,^\\(top_build.*=\\).*$$,\\1$(installbuilddir),' < build/apr_rules.mk > $@\n\ninstall: install-modules $(TARGETS)\n\t$(APR_MKDIR) $(DESTDIR)$(libdir) $(DESTDIR)$(bindir) $(DESTDIR)$(installbuilddir) \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/Makefile.in"
                },
                "region": {
                  "startLine": 94,
                  "endLine": 94,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\n# Create apr-config script suitable for the install tree\napr-config.out: $(APR_CONFIG)\n\tsed 's,^\\(location=\\).*$$,\\1installed,' < $(APR_CONFIG) > $@\n\n# Create apr_rules.mk suitable for the install tree\nbuild/apr_rules.out: build/apr_rules.mk\n",
                    "rendered": {
                      "text": "\n# Create apr-config script suitable for the install tree\napr-config.out: $(APR_CONFIG)\n\tsed 's,^\\(location=\\).*$$,\\1installed,' < $(APR_CONFIG) > $@\n\n# Create apr_rules.mk suitable for the install tree\nbuild/apr_rules.out: build/apr_rules.mk\n",
                      "markdown": "`\n# Create apr-config script suitable for the install tree\napr-config.out: $(APR_CONFIG)\n\tsed 's,^\\(location=\\).*$$,\\1installed,' < $(APR_CONFIG) > $@\n\n# Create apr_rules.mk suitable for the install tree\nbuild/apr_rules.out: build/apr_rules.mk\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/Makefile.in"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 19,
                  "endLine": 92,
                  "endColumn": 27,
                  "snippet": {
                    "text": "LDADD_crypto_nss = @LDADD_crypto_nss@\nLDADD_crypto_commoncrypto = @LDADD_crypto_commoncrypto@\n\n# Create apr-config script suitable for the install tree\napr-config.out: $(APR_CONFIG)\n\tsed 's,^\\(location=\\).*$$,\\1installed,' < $(APR_CONFIG) > $@\n\n",
                    "rendered": {
                      "text": "LDADD_crypto_nss = @LDADD_crypto_nss@\nLDADD_crypto_commoncrypto = @LDADD_crypto_commoncrypto@\n\n# Create apr-config script suitable for the install tree\napr-config.out: $(APR_CONFIG)\n\tsed 's,^\\(location=\\).*$$,\\1installed,' < $(APR_CONFIG) > $@\n\n",
                      "markdown": "`LDADD_crypto_nss = @LDADD_crypto_nss@\nLDADD_crypto_commoncrypto = @LDADD_crypto_commoncrypto@\n\n# Create apr-config script suitable for the install tree\napr-config.out: $(APR_CONFIG)\n\tsed 's,^\\(location=\\).*$$,\\1installed,' < $(APR_CONFIG) > $@\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/file_io/unix/flock.c"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 14,
                  "endLine": 91,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n#if defined(HAVE_FCNTL_H)\n    {\n        struct flock l = { 0 };\n\n        l.l_whence = SEEK_SET;  /* count l_start from start of file */\n        l.l_start = 0;          /* lock from start of file */\n",
                    "rendered": {
                      "text": "\n#if defined(HAVE_FCNTL_H)\n    {\n        struct flock l = { 0 };\n\n        l.l_whence = SEEK_SET;  /* count l_start from start of file */\n        l.l_start = 0;          /* lock from start of file */\n",
                      "markdown": "`\n#if defined(HAVE_FCNTL_H)\n    {\n        struct flock l = { 0 };\n\n        l.l_whence = SEEK_SET;  /* count l_start from start of file */\n        l.l_start = 0;          /* lock from start of file */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/file_io/unix/flock.c"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 14,
                  "endLine": 32,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n#if defined(HAVE_FCNTL_H)\n    {\n        struct flock l = { 0 };\n        int fc;\n\n        l.l_whence = SEEK_SET;  /* count l_start from start of file */\n",
                    "rendered": {
                      "text": "\n#if defined(HAVE_FCNTL_H)\n    {\n        struct flock l = { 0 };\n        int fc;\n\n        l.l_whence = SEEK_SET;  /* count l_start from start of file */\n",
                      "markdown": "`\n#if defined(HAVE_FCNTL_H)\n    {\n        struct flock l = { 0 };\n        int fc;\n\n        l.l_whence = SEEK_SET;  /* count l_start from start of file */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/file_io/unix/tempdir.c"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 22,
                  "endLine": 71,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    /* Try the environment first. */\n    for (i = 0; i < (sizeof(try_envs) / sizeof(const char *)); i++) {\n        char *value;\n        apr_err = apr_env_get(&value, try_envs[i], p);\n        if ((apr_err == APR_SUCCESS) && value) {\n            apr_size_t len = strlen(value);\n            if (len && (len < APR_PATH_MAX) && test_tempdir(value, p)) {\n",
                    "rendered": {
                      "text": "    /* Try the environment first. */\n    for (i = 0; i < (sizeof(try_envs) / sizeof(const char *)); i++) {\n        char *value;\n        apr_err = apr_env_get(&value, try_envs[i], p);\n        if ((apr_err == APR_SUCCESS) && value) {\n            apr_size_t len = strlen(value);\n            if (len && (len < APR_PATH_MAX) && test_tempdir(value, p)) {\n",
                      "markdown": "`    /* Try the environment first. */\n    for (i = 0; i < (sizeof(try_envs) / sizeof(const char *)); i++) {\n        char *value;\n        apr_err = apr_env_get(&value, try_envs[i], p);\n        if ((apr_err == APR_SUCCESS) && value) {\n            apr_size_t len = strlen(value);\n            if (len && (len < APR_PATH_MAX) && test_tempdir(value, p)) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/encoding/apr_encode.c"
                },
                "region": {
                  "startLine": 296,
                  "startColumn": 19,
                  "endLine": 296,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        apr_size_t i = 0;\n\n        if (0 == ((flags & APR_ENCODE_BASE64URL))) {\n            base = base64;\n        }\n        else {\n            base = base64url;\n",
                    "rendered": {
                      "text": "        apr_size_t i = 0;\n\n        if (0 == ((flags & APR_ENCODE_BASE64URL))) {\n            base = base64;\n        }\n        else {\n            base = base64url;\n",
                      "markdown": "`        apr_size_t i = 0;\n\n        if (0 == ((flags & APR_ENCODE_BASE64URL))) {\n            base = base64;\n        }\n        else {\n            base = base64url;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/encoding/apr_encode.c"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 19,
                  "endLine": 230,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        apr_size_t i = 0;\n\n        if (0 == ((flags & APR_ENCODE_BASE64URL))) {\n            base = base64;\n        }\n        else {\n            base = base64url;\n",
                    "rendered": {
                      "text": "        apr_size_t i = 0;\n\n        if (0 == ((flags & APR_ENCODE_BASE64URL))) {\n            base = base64;\n        }\n        else {\n            base = base64url;\n",
                      "markdown": "`        apr_size_t i = 0;\n\n        if (0 == ((flags & APR_ENCODE_BASE64URL))) {\n            base = base64;\n        }\n        else {\n            base = base64url;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/encoding/apr_encode.c"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 18,
                  "endLine": 198,
                  "endColumn": 24,
                  "snippet": {
                    "text": "#endif                          /* APR_CHARSET_EBCDIC */\n};\n\nstatic const char base64[] =\n\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nstatic const char base64url[] =\n\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\";\n",
                    "rendered": {
                      "text": "#endif                          /* APR_CHARSET_EBCDIC */\n};\n\nstatic const char base64[] =\n\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nstatic const char base64url[] =\n\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\";\n",
                      "markdown": "`#endif                          /* APR_CHARSET_EBCDIC */\n};\n\nstatic const char base64[] =\n\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nstatic const char base64url[] =\n\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\";\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/internal/testutf.c"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 29,
                  "endLine": 199,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    }\n\n    do {\n        apr_size_t wl = s.wl, nl = sizeof(s.n);\n        rc = apr_conv_utf16_to_utf8(s.w, &wl, s.n, &nl);\n        s.nl = sizeof(s.n) - s.nl;\n        if (rc == APR_INCOMPLETE) {\n",
                    "rendered": {
                      "text": "    }\n\n    do {\n        apr_size_t wl = s.wl, nl = sizeof(s.n);\n        rc = apr_conv_utf16_to_utf8(s.w, &wl, s.n, &nl);\n        s.nl = sizeof(s.n) - s.nl;\n        if (rc == APR_INCOMPLETE) {\n",
                      "markdown": "`    }\n\n    do {\n        apr_size_t wl = s.wl, nl = sizeof(s.n);\n        rc = apr_conv_utf16_to_utf8(s.w, &wl, s.n, &nl);\n        s.nl = sizeof(s.n) - s.nl;\n        if (rc == APR_INCOMPLETE) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/internal/testutf.c"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 18,
                  "endLine": 167,
                  "endColumn": 22,
                  "snippet": {
                    "text": "    ++s.wl;\n\n    do {\n        apr_size_t nl = sizeof(s.n), wl = s.wl;\n        rc = apr_conv_utf16_to_utf8(s.w, &wl, s.n, &nl);\n        s.nl = sizeof(s.n) - nl;\n        if (!wl && rc == APR_SUCCESS) {\n",
                    "rendered": {
                      "text": "    ++s.wl;\n\n    do {\n        apr_size_t nl = sizeof(s.n), wl = s.wl;\n        rc = apr_conv_utf16_to_utf8(s.w, &wl, s.n, &nl);\n        s.nl = sizeof(s.n) - nl;\n        if (!wl && rc == APR_SUCCESS) {\n",
                      "markdown": "`    ++s.wl;\n\n    do {\n        apr_size_t nl = sizeof(s.n), wl = s.wl;\n        rc = apr_conv_utf16_to_utf8(s.w, &wl, s.n, &nl);\n        s.nl = sizeof(s.n) - nl;\n        if (!wl && rc == APR_SUCCESS) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/internal/testutf.c"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 18,
                  "endLine": 115,
                  "endColumn": 22,
                  "snippet": {
                    "text": "    ++s.nl;\n\n    do {\n        apr_size_t nl = s.nl, wl = sizeof(s.w) / 2;\n        rc = apr_conv_utf8_to_utf16(s.n, &nl, s.w, &wl);\n        s.wl = (sizeof(s.w) / 2) - wl;\n        if (!nl && rc == APR_SUCCESS) {\n",
                    "rendered": {
                      "text": "    ++s.nl;\n\n    do {\n        apr_size_t nl = s.nl, wl = sizeof(s.w) / 2;\n        rc = apr_conv_utf8_to_utf16(s.n, &nl, s.w, &wl);\n        s.wl = (sizeof(s.w) / 2) - wl;\n        if (!nl && rc == APR_SUCCESS) {\n",
                      "markdown": "`    ++s.nl;\n\n    do {\n        apr_size_t nl = s.nl, wl = sizeof(s.w) / 2;\n        rc = apr_conv_utf8_to_utf16(s.n, &nl, s.w, &wl);\n        s.wl = (sizeof(s.w) / 2) - wl;\n        if (!nl && rc == APR_SUCCESS) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/internal/Makefile.win"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 34,
                  "endLine": 23,
                  "endColumn": 40,
                  "snippet": {
                    "text": "OUTDIR=Release\n!ENDIF\n\n!IF [$(COMSPEC) /c cl /nologo /? | find \"x64\" >NUL ] == 0\nOUTDIR=x64\\$(OUTDIR)\n!ENDIF\n!ENDIF\n",
                    "rendered": {
                      "text": "OUTDIR=Release\n!ENDIF\n\n!IF [$(COMSPEC) /c cl /nologo /? | find \"x64\" >NUL ] == 0\nOUTDIR=x64\\$(OUTDIR)\n!ENDIF\n!ENDIF\n",
                      "markdown": "`OUTDIR=Release\n!ENDIF\n\n!IF [$(COMSPEC) /c cl /nologo /? | find \"x64\" >NUL ] == 0\nOUTDIR=x64\\$(OUTDIR)\n!ENDIF\n!ENDIF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/README"
                },
                "region": {
                  "startLine": 327,
                  "startColumn": 35,
                  "endLine": 327,
                  "endColumn": 39,
                  "snippet": {
                    "text": "changes will be sent to the original author soon.\n\nThe modified version of CuTest is not currently in any CVS or Subversion\nserver.  In time, it will be hosted at rkbloom.net.\n\nThere are currently no docs for how to write tests, but the teststr and \ntesttime programs should give an idea of how it is done.  In time, a document\n",
                    "rendered": {
                      "text": "changes will be sent to the original author soon.\n\nThe modified version of CuTest is not currently in any CVS or Subversion\nserver.  In time, it will be hosted at rkbloom.net.\n\nThere are currently no docs for how to write tests, but the teststr and \ntesttime programs should give an idea of how it is done.  In time, a document\n",
                      "markdown": "`changes will be sent to the original author soon.\n\nThe modified version of CuTest is not currently in any CVS or Subversion\nserver.  In time, it will be hosted at rkbloom.net.\n\nThere are currently no docs for how to write tests, but the teststr and \ntesttime programs should give an idea of how it is done.  In time, a document\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/README"
                },
                "region": {
                  "startLine": 267,
                  "startColumn": 21,
                  "endLine": 267,
                  "endColumn": 25,
                  "snippet": {
                    "text": "An example test\n---------------\n\nFinally, we will look at a quick test:\n\n/* All tests are passed a CuTest variable.  This is how the suite determines\n * if the test succeeded or failed.\n",
                    "rendered": {
                      "text": "An example test\n---------------\n\nFinally, we will look at a quick test:\n\n/* All tests are passed a CuTest variable.  This is how the suite determines\n * if the test succeeded or failed.\n",
                      "markdown": "`An example test\n---------------\n\nFinally, we will look at a quick test:\n\n/* All tests are passed a CuTest variable.  This is how the suite determines\n * if the test succeeded or failed.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/README"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 19,
                  "endLine": 242,
                  "endColumn": 23,
                  "snippet": {
                    "text": "producing the corresponding RFC822 date string. All we need to do\nafter this is to call the correct test method from the ABTS macros !\n\nYou can take a look at the apr-util/test/testdaterfc.c file for the\ncomplete source code of this unit test.\n\nAlthough this Howto is very small and mostly dedicated to the\n",
                    "rendered": {
                      "text": "producing the corresponding RFC822 date string. All we need to do\nafter this is to call the correct test method from the ABTS macros !\n\nYou can take a look at the apr-util/test/testdaterfc.c file for the\ncomplete source code of this unit test.\n\nAlthough this Howto is very small and mostly dedicated to the\n",
                      "markdown": "`producing the corresponding RFC822 date string. All we need to do\nafter this is to call the correct test method from the ABTS macros !\n\nYou can take a look at the apr-util/test/testdaterfc.c file for the\ncomplete source code of this unit test.\n\nAlthough this Howto is very small and mostly dedicated to the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/README"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 34,
                  "endLine": 231,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\nABTS_INT_EQUAL(tc, 1, 1);\n\nSee, it's easy ! Let's take a look at the complete example :\ntestdaterfc. We want to test our date string parser. For this, we will\nuse some chosen date strings (from mail headers for example) written\nin various formats but that should all be handled by our function, and\n",
                    "rendered": {
                      "text": "\nABTS_INT_EQUAL(tc, 1, 1);\n\nSee, it's easy ! Let's take a look at the complete example :\ntestdaterfc. We want to test our date string parser. For this, we will\nuse some chosen date strings (from mail headers for example) written\nin various formats but that should all be handled by our function, and\n",
                      "markdown": "`\nABTS_INT_EQUAL(tc, 1, 1);\n\nSee, it's easy ! Let's take a look at the complete example :\ntestdaterfc. We want to test our date string parser. For this, we will\nuse some chosen date strings (from mail headers for example) written\nin various formats but that should all be handled by our function, and\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/README"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 17,
                  "endLine": 118,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\nIn this case, we know the test_localstr function failed, and there is an\nAssert in this that failed (I modified the test to fail for this document).\nNow, you can look at what that test does, and why it would have failed.\n\nThere is one other possible output for the test suite (run with -v):\n\n",
                    "rendered": {
                      "text": "\nIn this case, we know the test_localstr function failed, and there is an\nAssert in this that failed (I modified the test to fail for this document).\nNow, you can look at what that test does, and why it would have failed.\n\nThere is one other possible output for the test suite (run with -v):\n\n",
                      "markdown": "`\nIn this case, we know the test_localstr function failed, and there is an\nAssert in this that failed (I modified the test to fail for this document).\nNow, you can look at what that test does, and why it would have failed.\n\nThere is one other possible output for the test suite (run with -v):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/README"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 70,
                  "endLine": 86,
                  "endColumn": 74,
                  "snippet": {
                    "text": "\nKnown test failures are documented in ../STATUS.\n\nThere are a couple of things to look at with this.  First, if you look at the\nfirst function in this document, you should notice that the string passed to\nthe CuSuiteNew function is in the output.  That is why the string should\nexplain the feature you are testing.\n",
                    "rendered": {
                      "text": "\nKnown test failures are documented in ../STATUS.\n\nThere are a couple of things to look at with this.  First, if you look at the\nfirst function in this document, you should notice that the string passed to\nthe CuSuiteNew function is in the output.  That is why the string should\nexplain the feature you are testing.\n",
                      "markdown": "`\nKnown test failures are documented in ../STATUS.\n\nThere are a couple of things to look at with this.  First, if you look at the\nfirst function in this document, you should notice that the string passed to\nthe CuSuiteNew function is in the output.  That is why the string should\nexplain the feature you are testing.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/README"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 36,
                  "endLine": 86,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\nKnown test failures are documented in ../STATUS.\n\nThere are a couple of things to look at with this.  First, if you look at the\nfirst function in this document, you should notice that the string passed to\nthe CuSuiteNew function is in the output.  That is why the string should\nexplain the feature you are testing.\n",
                    "rendered": {
                      "text": "\nKnown test failures are documented in ../STATUS.\n\nThere are a couple of things to look at with this.  First, if you look at the\nfirst function in this document, you should notice that the string passed to\nthe CuSuiteNew function is in the output.  That is why the string should\nexplain the feature you are testing.\n",
                      "markdown": "`\nKnown test failures are documented in ../STATUS.\n\nThere are a couple of things to look at with this.  First, if you look at the\nfirst function in this document, you should notice that the string passed to\nthe CuSuiteNew function is in the output.  That is why the string should\nexplain the feature you are testing.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/README"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 21,
                  "endLine": 5,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\nAll APR tests should be executable in 2 ways, as an individual program, or\nas a part of the full test suite.  The full test suite is controlled with\nthe testall program.  At the beginning of the testall.c file, there is an\narray of functions called tests.  The testall program loops through this \narray calling each function.  Each function returns a CuSuite variable, which\nis then added to the SuiteList.  Once all Suites have been added, the SuiteList\n",
                    "rendered": {
                      "text": "\nAll APR tests should be executable in 2 ways, as an individual program, or\nas a part of the full test suite.  The full test suite is controlled with\nthe testall program.  At the beginning of the testall.c file, there is an\narray of functions called tests.  The testall program loops through this \narray calling each function.  Each function returns a CuSuite variable, which\nis then added to the SuiteList.  Once all Suites have been added, the SuiteList\n",
                      "markdown": "`\nAll APR tests should be executable in 2 ways, as an individual program, or\nas a part of the full test suite.  The full test suite is controlled with\nthe testall program.  At the beginning of the testall.c file, there is an\narray of functions called tests.  The testall program loops through this \narray calling each function.  Each function returns a CuSuite variable, which\nis then added to the SuiteList.  Once all Suites have been added, the SuiteList\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/README"
                },
                "region": {
                  "startLine": 246,
                  "startColumn": 36,
                  "endLine": 246,
                  "endColumn": 42,
                  "snippet": {
                    "text": "complete source code of this unit test.\n\nAlthough this Howto is very small and mostly dedicated to the\ntestdaterfc unit test, I hope you'll find it useful. Good luck !\n\nWriting tests for CuTest (no longer used)\n-----------------------------------------\n",
                    "rendered": {
                      "text": "complete source code of this unit test.\n\nAlthough this Howto is very small and mostly dedicated to the\ntestdaterfc unit test, I hope you'll find it useful. Good luck !\n\nWriting tests for CuTest (no longer used)\n-----------------------------------------\n",
                      "markdown": "`complete source code of this unit test.\n\nAlthough this Howto is very small and mostly dedicated to the\ntestdaterfc unit test, I hope you'll find it useful. Good luck !\n\nWriting tests for CuTest (no longer used)\n-----------------------------------------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/README"
                },
                "region": {
                  "startLine": 233,
                  "startColumn": 34,
                  "endLine": 233,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\nSee, it's easy ! Let's take a look at the complete example :\ntestdaterfc. We want to test our date string parser. For this, we will\nuse some chosen date strings (from mail headers for example) written\nin various formats but that should all be handled by our function, and\ntheir equivalents in correct RFC822 format.\n\n",
                    "rendered": {
                      "text": "\nSee, it's easy ! Let's take a look at the complete example :\ntestdaterfc. We want to test our date string parser. For this, we will\nuse some chosen date strings (from mail headers for example) written\nin various formats but that should all be handled by our function, and\ntheir equivalents in correct RFC822 format.\n\n",
                      "markdown": "`\nSee, it's easy ! Let's take a look at the complete example :\ntestdaterfc. We want to test our date string parser. For this, we will\nuse some chosen date strings (from mail headers for example) written\nin various formats but that should all be handled by our function, and\ntheir equivalents in correct RFC822 format.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/README"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 31,
                  "endLine": 157,
                  "endColumn": 37,
                  "snippet": {
                    "text": "one. During my Google's Summer of Code 2005 project, I discovered a\nsmall bug in the APR-Util's date parsing routines, and I needed to\nwrite a unit test for the fixed code. I decided to write this\ndocumentation because I did not find any. Thanks to Garrett Rooney for\nhis help on writing the unit test !\n\nThe APR and APR-Util libraries provide a platform independent API for\n",
                    "rendered": {
                      "text": "one. During my Google's Summer of Code 2005 project, I discovered a\nsmall bug in the APR-Util's date parsing routines, and I needed to\nwrite a unit test for the fixed code. I decided to write this\ndocumentation because I did not find any. Thanks to Garrett Rooney for\nhis help on writing the unit test !\n\nThe APR and APR-Util libraries provide a platform independent API for\n",
                      "markdown": "`one. During my Google's Summer of Code 2005 project, I discovered a\nsmall bug in the APR-Util's date parsing routines, and I needed to\nwrite a unit test for the fixed code. I decided to write this\ndocumentation because I did not find any. Thanks to Garrett Rooney for\nhis help on writing the unit test !\n\nThe APR and APR-Util libraries provide a platform independent API for\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testmemcache.c"
                },
                "region": {
                  "startLine": 518,
                  "startColumn": 3,
                  "endLine": 518,
                  "endColumn": 11,
                  "snippet": {
                    "text": "    rv = apr_memcache_getp(memcache, pool, prefix, &result, &len, NULL);\n    ABTS_ASSERT(tc, \"get failed\", rv == APR_SUCCESS);\n\n    expect = i + atoi(result);\n\n    rv = apr_memcache_incr(memcache, prefix, i, &new);\n    ABTS_ASSERT(tc, \"incr failed\", rv == APR_SUCCESS);\n",
                    "rendered": {
                      "text": "    rv = apr_memcache_getp(memcache, pool, prefix, &result, &len, NULL);\n    ABTS_ASSERT(tc, \"get failed\", rv == APR_SUCCESS);\n\n    expect = i + atoi(result);\n\n    rv = apr_memcache_incr(memcache, prefix, i, &new);\n    ABTS_ASSERT(tc, \"incr failed\", rv == APR_SUCCESS);\n",
                      "markdown": "`    rv = apr_memcache_getp(memcache, pool, prefix, &result, &len, NULL);\n    ABTS_ASSERT(tc, \"get failed\", rv == APR_SUCCESS);\n\n    expect = i + atoi(result);\n\n    rv = apr_memcache_incr(memcache, prefix, i, &new);\n    ABTS_ASSERT(tc, \"incr failed\", rv == APR_SUCCESS);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testfile.c"
                },
                "region": {
                  "startLine": 1690,
                  "startColumn": 32,
                  "endLine": 1690,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        if (memcmp(readbuf, writebuf, ctx->chunksize) != 0) {\n            ctx->errmsg = apr_psprintf(\n                ctx->pool,\n                \"Unexpected data at file offset %\" APR_OFF_T_FMT,\n                offset);\n            apr_thread_exit(thd, APR_SUCCESS);\n            return NULL;\n",
                    "rendered": {
                      "text": "        if (memcmp(readbuf, writebuf, ctx->chunksize) != 0) {\n            ctx->errmsg = apr_psprintf(\n                ctx->pool,\n                \"Unexpected data at file offset %\" APR_OFF_T_FMT,\n                offset);\n            apr_thread_exit(thd, APR_SUCCESS);\n            return NULL;\n",
                      "markdown": "`        if (memcmp(readbuf, writebuf, ctx->chunksize) != 0) {\n            ctx->errmsg = apr_psprintf(\n                ctx->pool,\n                \"Unexpected data at file offset %\" APR_OFF_T_FMT,\n                offset);\n            apr_thread_exit(thd, APR_SUCCESS);\n            return NULL;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/unsupported/NWGNUdbdfreetds"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 25,
                  "endLine": 135,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n#\n# If this is specified, it will override VERSION value in\n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                    "rendered": {
                      "text": "\n#\n# If this is specified, it will override VERSION value in\n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                      "markdown": "`\n#\n# If this is specified, it will override VERSION value in\n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/unsupported/NWGNUdbdfreetds"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 59,
                  "endLine": 26,
                  "endColumn": 74,
                  "snippet": {
                    "text": "\n# LINK_STATIC = 1\n\n# for now defined here - should finally go into build/NWGNUenvironment.inc\nFREETDS_INC = $(FREETDSSDK)/include\nFREETDS_IMP = $(FREETDSSDK)/lib/libfreetds.imp\nFREETDS_LIB = $(FREETDSSDK)/lib/libfreetds.lib\n",
                    "rendered": {
                      "text": "\n# LINK_STATIC = 1\n\n# for now defined here - should finally go into build/NWGNUenvironment.inc\nFREETDS_INC = $(FREETDSSDK)/include\nFREETDS_IMP = $(FREETDSSDK)/lib/libfreetds.imp\nFREETDS_LIB = $(FREETDSSDK)/lib/libfreetds.lib\n",
                      "markdown": "`\n# LINK_STATIC = 1\n\n# for now defined here - should finally go into build/NWGNUenvironment.inc\nFREETDS_INC = $(FREETDSSDK)/include\nFREETDS_IMP = $(FREETDSSDK)/lib/libfreetds.imp\nFREETDS_LIB = $(FREETDSSDK)/lib/libfreetds.lib\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/unsupported/NWGNUdbdfreetds"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 30,
                  "endLine": 9,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\t$(EOLIST)\n\n#\n# Get the 'head' of the build environment.  This includes default targets and\n# paths to tools\n#\n\n",
                    "rendered": {
                      "text": "\t$(EOLIST)\n\n#\n# Get the 'head' of the build environment.  This includes default targets and\n# paths to tools\n#\n\n",
                      "markdown": "`\t$(EOLIST)\n\n#\n# Get the 'head' of the build environment.  This includes default targets and\n# paths to tools\n#\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/unsupported/NWGNUdbdfreetds"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 27,
                  "endLine": 33,
                  "endColumn": 31,
                  "snippet": {
                    "text": "FREETDS_NLM = libfreetds\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                    "rendered": {
                      "text": "FREETDS_NLM = libfreetds\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                      "markdown": "`FREETDS_NLM = libfreetds\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/NWGNUmakefile"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 25,
                  "endLine": 114,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n#\n# If this is specified, it will override VERSION value in\n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                    "rendered": {
                      "text": "\n#\n# If this is specified, it will override VERSION value in\n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                      "markdown": "`\n#\n# If this is specified, it will override VERSION value in\n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/NWGNUmakefile"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 30,
                  "endLine": 9,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\t$(EOLIST)\n\n#\n# Get the 'head' of the build environment.  This includes default targets and\n# paths to tools\n#\n\n",
                    "rendered": {
                      "text": "\t$(EOLIST)\n\n#\n# Get the 'head' of the build environment.  This includes default targets and\n# paths to tools\n#\n\n",
                      "markdown": "`\t$(EOLIST)\n\n#\n# Get the 'head' of the build environment.  This includes default targets and\n# paths to tools\n#\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/NWGNUmakefile"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 27,
                  "endLine": 23,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                    "rendered": {
                      "text": "#\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                      "markdown": "`#\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/NWGNUdbdsqli2"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 25,
                  "endLine": 133,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n#\n# If this is specified, it will override VERSION value in\n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                    "rendered": {
                      "text": "\n#\n# If this is specified, it will override VERSION value in\n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                      "markdown": "`\n#\n# If this is specified, it will override VERSION value in\n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/NWGNUdbdsqli2"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 59,
                  "endLine": 26,
                  "endColumn": 74,
                  "snippet": {
                    "text": "\n# LINK_STATIC = 1\n\n# for now defined here - should finally go into build/NWGNUenvironment.inc\nSQLITE2_INC = $(SQLITE2SDK)/src\nSQLITE2_IMP = $(SQLITE2SDK)/lsqlite2.imp\nSQLITE2_LIB = $(SQLITE2SDK)/lsqlite2.lib\n",
                    "rendered": {
                      "text": "\n# LINK_STATIC = 1\n\n# for now defined here - should finally go into build/NWGNUenvironment.inc\nSQLITE2_INC = $(SQLITE2SDK)/src\nSQLITE2_IMP = $(SQLITE2SDK)/lsqlite2.imp\nSQLITE2_LIB = $(SQLITE2SDK)/lsqlite2.lib\n",
                      "markdown": "`\n# LINK_STATIC = 1\n\n# for now defined here - should finally go into build/NWGNUenvironment.inc\nSQLITE2_INC = $(SQLITE2SDK)/src\nSQLITE2_IMP = $(SQLITE2SDK)/lsqlite2.imp\nSQLITE2_LIB = $(SQLITE2SDK)/lsqlite2.lib\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/NWGNUdbdsqli2"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 30,
                  "endLine": 9,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\t$(EOLIST)\n\n#\n# Get the 'head' of the build environment.  This includes default targets and\n# paths to tools\n#\n\n",
                    "rendered": {
                      "text": "\t$(EOLIST)\n\n#\n# Get the 'head' of the build environment.  This includes default targets and\n# paths to tools\n#\n\n",
                      "markdown": "`\t$(EOLIST)\n\n#\n# Get the 'head' of the build environment.  This includes default targets and\n# paths to tools\n#\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/NWGNUdbdsqli2"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 27,
                  "endLine": 33,
                  "endColumn": 31,
                  "snippet": {
                    "text": "SQLITE2_NLM = lsqlite2\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                    "rendered": {
                      "text": "SQLITE2_NLM = lsqlite2\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                      "markdown": "`SQLITE2_NLM = lsqlite2\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/arch/netware/apr_private.h"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 27,
                  "endLine": 76,
                  "endColumn": 35,
                  "snippet": {
                    "text": " * a threadsafe, API-equivalent of getpass_r().\n */\n#if (CURRENT_NDK_THRESHOLD < 709060000)\n#define getpass_r       getpassword\n#endif\n\n#ifdef NW_BUILD_IPV6\n",
                    "rendered": {
                      "text": " * a threadsafe, API-equivalent of getpass_r().\n */\n#if (CURRENT_NDK_THRESHOLD < 709060000)\n#define getpass_r       getpassword\n#endif\n\n#ifdef NW_BUILD_IPV6\n",
                      "markdown": "` * a threadsafe, API-equivalent of getpass_r().\n */\n#if (CURRENT_NDK_THRESHOLD < 709060000)\n#define getpass_r       getpassword\n#endif\n\n#ifdef NW_BUILD_IPV6\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/arch/netware/apr_private.h"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 49,
                  "endLine": 72,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\n#define HAVE_GETPASS_R  1\n/*\n * Hack around older NDKs which have only the getpassword() function,\n * a threadsafe, API-equivalent of getpass_r().\n */\n#if (CURRENT_NDK_THRESHOLD < 709060000)\n",
                    "rendered": {
                      "text": "\n#define HAVE_GETPASS_R  1\n/*\n * Hack around older NDKs which have only the getpassword() function,\n * a threadsafe, API-equivalent of getpass_r().\n */\n#if (CURRENT_NDK_THRESHOLD < 709060000)\n",
                      "markdown": "`\n#define HAVE_GETPASS_R  1\n/*\n * Hack around older NDKs which have only the getpassword() function,\n * a threadsafe, API-equivalent of getpass_r().\n */\n#if (CURRENT_NDK_THRESHOLD < 709060000)\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_dbd.h"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 55,
                  "endLine": 139,
                  "endColumn": 63,
                  "snippet": {
                    "text": " *  \"group\" determines which group from configuration file to use (see\n *  MYSQL_READ_DEFAULT_GROUP option of mysql_options() in MySQL manual).\n *  Reconnect is set to 1 by default (i.e. true).\n *  @remarks FreeTDS: the params can have \"username\", \"password\", \"appname\",\n *  \"dbname\", \"host\", \"charset\", \"lang\" and \"server\" keys, each followed by an\n *  equal sign and a value.\n */\n",
                    "rendered": {
                      "text": " *  \"group\" determines which group from configuration file to use (see\n *  MYSQL_READ_DEFAULT_GROUP option of mysql_options() in MySQL manual).\n *  Reconnect is set to 1 by default (i.e. true).\n *  @remarks FreeTDS: the params can have \"username\", \"password\", \"appname\",\n *  \"dbname\", \"host\", \"charset\", \"lang\" and \"server\" keys, each followed by an\n *  equal sign and a value.\n */\n",
                      "markdown": "` *  \"group\" determines which group from configuration file to use (see\n *  MYSQL_READ_DEFAULT_GROUP option of mysql_options() in MySQL manual).\n *  Reconnect is set to 1 by default (i.e. true).\n *  @remarks FreeTDS: the params can have \"username\", \"password\", \"appname\",\n *  \"dbname\", \"host\", \"charset\", \"lang\" and \"server\" keys, each followed by an\n *  equal sign and a value.\n */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_uri.h"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 54,
                  "endLine": 140,
                  "endColumn": 62,
                  "snippet": {
                    "text": " *    APR_URI_UNP_OMITUSER            Just omit user\n *    APR_URI_UNP_OMITPASSWORD        Just omit password\n *    APR_URI_UNP_OMITUSERINFO        Omit \"user:password\\@\" part\n *    APR_URI_UNP_REVEALPASSWORD      Show plain text password (default: show XXXXXXXX)\n *    APR_URI_UNP_OMITPATHINFO        Show \"scheme://user\\@site:port\" only\n *    APR_URI_UNP_OMITQUERY           Omit \"?queryarg\" or \"#fragment\"\n * </PRE>\n",
                    "rendered": {
                      "text": " *    APR_URI_UNP_OMITUSER            Just omit user\n *    APR_URI_UNP_OMITPASSWORD        Just omit password\n *    APR_URI_UNP_OMITUSERINFO        Omit \"user:password\\@\" part\n *    APR_URI_UNP_REVEALPASSWORD      Show plain text password (default: show XXXXXXXX)\n *    APR_URI_UNP_OMITPATHINFO        Show \"scheme://user\\@site:port\" only\n *    APR_URI_UNP_OMITQUERY           Omit \"?queryarg\" or \"#fragment\"\n * </PRE>\n",
                      "markdown": "` *    APR_URI_UNP_OMITUSER            Just omit user\n *    APR_URI_UNP_OMITPASSWORD        Just omit password\n *    APR_URI_UNP_OMITUSERINFO        Omit \"user:password\\@\" part\n *    APR_URI_UNP_REVEALPASSWORD      Show plain text password (default: show XXXXXXXX)\n *    APR_URI_UNP_OMITPATHINFO        Show \"scheme://user\\@site:port\" only\n *    APR_URI_UNP_OMITQUERY           Omit \"?queryarg\" or \"#fragment\"\n * </PRE>\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_uri.h"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 24,
                  "endLine": 140,
                  "endColumn": 32,
                  "snippet": {
                    "text": " *    APR_URI_UNP_OMITUSER            Just omit user\n *    APR_URI_UNP_OMITPASSWORD        Just omit password\n *    APR_URI_UNP_OMITUSERINFO        Omit \"user:password\\@\" part\n *    APR_URI_UNP_REVEALPASSWORD      Show plain text password (default: show XXXXXXXX)\n *    APR_URI_UNP_OMITPATHINFO        Show \"scheme://user\\@site:port\" only\n *    APR_URI_UNP_OMITQUERY           Omit \"?queryarg\" or \"#fragment\"\n * </PRE>\n",
                    "rendered": {
                      "text": " *    APR_URI_UNP_OMITUSER            Just omit user\n *    APR_URI_UNP_OMITPASSWORD        Just omit password\n *    APR_URI_UNP_OMITUSERINFO        Omit \"user:password\\@\" part\n *    APR_URI_UNP_REVEALPASSWORD      Show plain text password (default: show XXXXXXXX)\n *    APR_URI_UNP_OMITPATHINFO        Show \"scheme://user\\@site:port\" only\n *    APR_URI_UNP_OMITQUERY           Omit \"?queryarg\" or \"#fragment\"\n * </PRE>\n",
                      "markdown": "` *    APR_URI_UNP_OMITUSER            Just omit user\n *    APR_URI_UNP_OMITPASSWORD        Just omit password\n *    APR_URI_UNP_OMITUSERINFO        Omit \"user:password\\@\" part\n *    APR_URI_UNP_REVEALPASSWORD      Show plain text password (default: show XXXXXXXX)\n *    APR_URI_UNP_OMITPATHINFO        Show \"scheme://user\\@site:port\" only\n *    APR_URI_UNP_OMITQUERY           Omit \"?queryarg\" or \"#fragment\"\n * </PRE>\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_uri.h"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 49,
                  "endLine": 139,
                  "endColumn": 57,
                  "snippet": {
                    "text": " *    APR_URI_UNP_OMITSITEPART        Suppress \"scheme://user\\@site:port\"\n *    APR_URI_UNP_OMITUSER            Just omit user\n *    APR_URI_UNP_OMITPASSWORD        Just omit password\n *    APR_URI_UNP_OMITUSERINFO        Omit \"user:password\\@\" part\n *    APR_URI_UNP_REVEALPASSWORD      Show plain text password (default: show XXXXXXXX)\n *    APR_URI_UNP_OMITPATHINFO        Show \"scheme://user\\@site:port\" only\n *    APR_URI_UNP_OMITQUERY           Omit \"?queryarg\" or \"#fragment\"\n",
                    "rendered": {
                      "text": " *    APR_URI_UNP_OMITSITEPART        Suppress \"scheme://user\\@site:port\"\n *    APR_URI_UNP_OMITUSER            Just omit user\n *    APR_URI_UNP_OMITPASSWORD        Just omit password\n *    APR_URI_UNP_OMITUSERINFO        Omit \"user:password\\@\" part\n *    APR_URI_UNP_REVEALPASSWORD      Show plain text password (default: show XXXXXXXX)\n *    APR_URI_UNP_OMITPATHINFO        Show \"scheme://user\\@site:port\" only\n *    APR_URI_UNP_OMITQUERY           Omit \"?queryarg\" or \"#fragment\"\n",
                      "markdown": "` *    APR_URI_UNP_OMITSITEPART        Suppress \"scheme://user\\@site:port\"\n *    APR_URI_UNP_OMITUSER            Just omit user\n *    APR_URI_UNP_OMITPASSWORD        Just omit password\n *    APR_URI_UNP_OMITUSERINFO        Omit \"user:password\\@\" part\n *    APR_URI_UNP_REVEALPASSWORD      Show plain text password (default: show XXXXXXXX)\n *    APR_URI_UNP_OMITPATHINFO        Show \"scheme://user\\@site:port\" only\n *    APR_URI_UNP_OMITQUERY           Omit \"?queryarg\" or \"#fragment\"\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_uri.h"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 48,
                  "endLine": 138,
                  "endColumn": 56,
                  "snippet": {
                    "text": " * <PRE>\n *    APR_URI_UNP_OMITSITEPART        Suppress \"scheme://user\\@site:port\"\n *    APR_URI_UNP_OMITUSER            Just omit user\n *    APR_URI_UNP_OMITPASSWORD        Just omit password\n *    APR_URI_UNP_OMITUSERINFO        Omit \"user:password\\@\" part\n *    APR_URI_UNP_REVEALPASSWORD      Show plain text password (default: show XXXXXXXX)\n *    APR_URI_UNP_OMITPATHINFO        Show \"scheme://user\\@site:port\" only\n",
                    "rendered": {
                      "text": " * <PRE>\n *    APR_URI_UNP_OMITSITEPART        Suppress \"scheme://user\\@site:port\"\n *    APR_URI_UNP_OMITUSER            Just omit user\n *    APR_URI_UNP_OMITPASSWORD        Just omit password\n *    APR_URI_UNP_OMITUSERINFO        Omit \"user:password\\@\" part\n *    APR_URI_UNP_REVEALPASSWORD      Show plain text password (default: show XXXXXXXX)\n *    APR_URI_UNP_OMITPATHINFO        Show \"scheme://user\\@site:port\" only\n",
                      "markdown": "` * <PRE>\n *    APR_URI_UNP_OMITSITEPART        Suppress \"scheme://user\\@site:port\"\n *    APR_URI_UNP_OMITUSER            Just omit user\n *    APR_URI_UNP_OMITPASSWORD        Just omit password\n *    APR_URI_UNP_OMITUSERINFO        Omit \"user:password\\@\" part\n *    APR_URI_UNP_REVEALPASSWORD      Show plain text password (default: show XXXXXXXX)\n *    APR_URI_UNP_OMITPATHINFO        Show \"scheme://user\\@site:port\" only\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_uri.h"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 22,
                  "endLine": 138,
                  "endColumn": 30,
                  "snippet": {
                    "text": " * <PRE>\n *    APR_URI_UNP_OMITSITEPART        Suppress \"scheme://user\\@site:port\"\n *    APR_URI_UNP_OMITUSER            Just omit user\n *    APR_URI_UNP_OMITPASSWORD        Just omit password\n *    APR_URI_UNP_OMITUSERINFO        Omit \"user:password\\@\" part\n *    APR_URI_UNP_REVEALPASSWORD      Show plain text password (default: show XXXXXXXX)\n *    APR_URI_UNP_OMITPATHINFO        Show \"scheme://user\\@site:port\" only\n",
                    "rendered": {
                      "text": " * <PRE>\n *    APR_URI_UNP_OMITSITEPART        Suppress \"scheme://user\\@site:port\"\n *    APR_URI_UNP_OMITUSER            Just omit user\n *    APR_URI_UNP_OMITPASSWORD        Just omit password\n *    APR_URI_UNP_OMITUSERINFO        Omit \"user:password\\@\" part\n *    APR_URI_UNP_REVEALPASSWORD      Show plain text password (default: show XXXXXXXX)\n *    APR_URI_UNP_OMITPATHINFO        Show \"scheme://user\\@site:port\" only\n",
                      "markdown": "` * <PRE>\n *    APR_URI_UNP_OMITSITEPART        Suppress \"scheme://user\\@site:port\"\n *    APR_URI_UNP_OMITUSER            Just omit user\n *    APR_URI_UNP_OMITPASSWORD        Just omit password\n *    APR_URI_UNP_OMITUSERINFO        Omit \"user:password\\@\" part\n *    APR_URI_UNP_REVEALPASSWORD      Show plain text password (default: show XXXXXXXX)\n *    APR_URI_UNP_OMITPATHINFO        Show \"scheme://user\\@site:port\" only\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_uri.h"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 16,
                  "endLine": 131,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n/**\n * Unparse a apr_uri_t structure to an URI string.  Optionally\n * suppress the password for security reasons.\n * @param p The pool to allocate out of\n * @param uptr All of the parts of the uri\n * @param flags How to unparse the uri.  One of:\n",
                    "rendered": {
                      "text": "\n/**\n * Unparse a apr_uri_t structure to an URI string.  Optionally\n * suppress the password for security reasons.\n * @param p The pool to allocate out of\n * @param uptr All of the parts of the uri\n * @param flags How to unparse the uri.  One of:\n",
                      "markdown": "`\n/**\n * Unparse a apr_uri_t structure to an URI string.  Optionally\n * suppress the password for security reasons.\n * @param p The pool to allocate out of\n * @param uptr All of the parts of the uri\n * @param flags How to unparse the uri.  One of:\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_uri.h"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 10,
                  "endLine": 93,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    /** user name, as in http://user:passwd\\@host:port/ */\n    char *user;\n    /** password, as in http://user:passwd\\@host:port/ */\n    char *password;\n    /** hostname from URI (or from Host: header) */\n    char *hostname;\n    /** port string (integer representation is in \"port\") */\n",
                    "rendered": {
                      "text": "    /** user name, as in http://user:passwd\\@host:port/ */\n    char *user;\n    /** password, as in http://user:passwd\\@host:port/ */\n    char *password;\n    /** hostname from URI (or from Host: header) */\n    char *hostname;\n    /** port string (integer representation is in \"port\") */\n",
                      "markdown": "`    /** user name, as in http://user:passwd\\@host:port/ */\n    char *user;\n    /** password, as in http://user:passwd\\@host:port/ */\n    char *password;\n    /** hostname from URI (or from Host: header) */\n    char *hostname;\n    /** port string (integer representation is in \"port\") */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_uri.h"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 8,
                  "endLine": 92,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    char *hostinfo;\n    /** user name, as in http://user:passwd\\@host:port/ */\n    char *user;\n    /** password, as in http://user:passwd\\@host:port/ */\n    char *password;\n    /** hostname from URI (or from Host: header) */\n    char *hostname;\n",
                    "rendered": {
                      "text": "    char *hostinfo;\n    /** user name, as in http://user:passwd\\@host:port/ */\n    char *user;\n    /** password, as in http://user:passwd\\@host:port/ */\n    char *password;\n    /** hostname from URI (or from Host: header) */\n    char *hostname;\n",
                      "markdown": "`    char *hostinfo;\n    /** user name, as in http://user:passwd\\@host:port/ */\n    char *user;\n    /** password, as in http://user:passwd\\@host:port/ */\n    char *password;\n    /** hostname from URI (or from Host: header) */\n    char *hostname;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_uri.h"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 24,
                  "endLine": 88,
                  "endColumn": 32,
                  "snippet": {
                    "text": "struct apr_uri_t {\n    /** scheme (\"http\"/\"ftp\"/...) */\n    char *scheme;\n    /** combined [user[:password]\\@]host[:port] */\n    char *hostinfo;\n    /** user name, as in http://user:passwd\\@host:port/ */\n    char *user;\n",
                    "rendered": {
                      "text": "struct apr_uri_t {\n    /** scheme (\"http\"/\"ftp\"/...) */\n    char *scheme;\n    /** combined [user[:password]\\@]host[:port] */\n    char *hostinfo;\n    /** user name, as in http://user:passwd\\@host:port/ */\n    char *user;\n",
                      "markdown": "`struct apr_uri_t {\n    /** scheme (\"http\"/\"ftp\"/...) */\n    char *scheme;\n    /** combined [user[:password]\\@]host[:port] */\n    char *hostinfo;\n    /** user name, as in http://user:passwd\\@host:port/ */\n    char *user;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_uri.h"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 26,
                  "endLine": 73,
                  "endColumn": 34,
                  "snippet": {
                    "text": "#define APR_URI_UNP_OMITUSERINFO    (APR_URI_UNP_OMITUSER | \\\n                                     APR_URI_UNP_OMITPASSWORD)\n/** Show plain text password (default: show XXXXXXXX) */\n#define APR_URI_UNP_REVEALPASSWORD  (1U<<3)\n/** Show \"scheme://user\\@site:port\" only */\n#define APR_URI_UNP_OMITPATHINFO    (1U<<4)\n/** Omit the \"?queryarg\" from the path */\n",
                    "rendered": {
                      "text": "#define APR_URI_UNP_OMITUSERINFO    (APR_URI_UNP_OMITUSER | \\\n                                     APR_URI_UNP_OMITPASSWORD)\n/** Show plain text password (default: show XXXXXXXX) */\n#define APR_URI_UNP_REVEALPASSWORD  (1U<<3)\n/** Show \"scheme://user\\@site:port\" only */\n#define APR_URI_UNP_OMITPATHINFO    (1U<<4)\n/** Omit the \"?queryarg\" from the path */\n",
                      "markdown": "`#define APR_URI_UNP_OMITUSERINFO    (APR_URI_UNP_OMITUSER | \\\n                                     APR_URI_UNP_OMITPASSWORD)\n/** Show plain text password (default: show XXXXXXXX) */\n#define APR_URI_UNP_REVEALPASSWORD  (1U<<3)\n/** Show \"scheme://user\\@site:port\" only */\n#define APR_URI_UNP_OMITPATHINFO    (1U<<4)\n/** Omit the \"?queryarg\" from the path */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_uri.h"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 20,
                  "endLine": 72,
                  "endColumn": 28,
                  "snippet": {
                    "text": "/** omit \"user:password\\@\" part */\n#define APR_URI_UNP_OMITUSERINFO    (APR_URI_UNP_OMITUSER | \\\n                                     APR_URI_UNP_OMITPASSWORD)\n/** Show plain text password (default: show XXXXXXXX) */\n#define APR_URI_UNP_REVEALPASSWORD  (1U<<3)\n/** Show \"scheme://user\\@site:port\" only */\n#define APR_URI_UNP_OMITPATHINFO    (1U<<4)\n",
                    "rendered": {
                      "text": "/** omit \"user:password\\@\" part */\n#define APR_URI_UNP_OMITUSERINFO    (APR_URI_UNP_OMITUSER | \\\n                                     APR_URI_UNP_OMITPASSWORD)\n/** Show plain text password (default: show XXXXXXXX) */\n#define APR_URI_UNP_REVEALPASSWORD  (1U<<3)\n/** Show \"scheme://user\\@site:port\" only */\n#define APR_URI_UNP_OMITPATHINFO    (1U<<4)\n",
                      "markdown": "`/** omit \"user:password\\@\" part */\n#define APR_URI_UNP_OMITUSERINFO    (APR_URI_UNP_OMITUSER | \\\n                                     APR_URI_UNP_OMITPASSWORD)\n/** Show plain text password (default: show XXXXXXXX) */\n#define APR_URI_UNP_REVEALPASSWORD  (1U<<3)\n/** Show \"scheme://user\\@site:port\" only */\n#define APR_URI_UNP_OMITPATHINFO    (1U<<4)\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_uri.h"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 53,
                  "endLine": 71,
                  "endColumn": 61,
                  "snippet": {
                    "text": "#define APR_URI_UNP_OMITPASSWORD    (1U<<2)\n/** omit \"user:password\\@\" part */\n#define APR_URI_UNP_OMITUSERINFO    (APR_URI_UNP_OMITUSER | \\\n                                     APR_URI_UNP_OMITPASSWORD)\n/** Show plain text password (default: show XXXXXXXX) */\n#define APR_URI_UNP_REVEALPASSWORD  (1U<<3)\n/** Show \"scheme://user\\@site:port\" only */\n",
                    "rendered": {
                      "text": "#define APR_URI_UNP_OMITPASSWORD    (1U<<2)\n/** omit \"user:password\\@\" part */\n#define APR_URI_UNP_OMITUSERINFO    (APR_URI_UNP_OMITUSER | \\\n                                     APR_URI_UNP_OMITPASSWORD)\n/** Show plain text password (default: show XXXXXXXX) */\n#define APR_URI_UNP_REVEALPASSWORD  (1U<<3)\n/** Show \"scheme://user\\@site:port\" only */\n",
                      "markdown": "`#define APR_URI_UNP_OMITPASSWORD    (1U<<2)\n/** omit \"user:password\\@\" part */\n#define APR_URI_UNP_OMITUSERINFO    (APR_URI_UNP_OMITUSER | \\\n                                     APR_URI_UNP_OMITPASSWORD)\n/** Show plain text password (default: show XXXXXXXX) */\n#define APR_URI_UNP_REVEALPASSWORD  (1U<<3)\n/** Show \"scheme://user\\@site:port\" only */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_uri.h"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 15,
                  "endLine": 69,
                  "endColumn": 23,
                  "snippet": {
                    "text": "#define APR_URI_UNP_OMITUSER        (1U<<1)\n/** Just omit password */\n#define APR_URI_UNP_OMITPASSWORD    (1U<<2)\n/** omit \"user:password\\@\" part */\n#define APR_URI_UNP_OMITUSERINFO    (APR_URI_UNP_OMITUSER | \\\n                                     APR_URI_UNP_OMITPASSWORD)\n/** Show plain text password (default: show XXXXXXXX) */\n",
                    "rendered": {
                      "text": "#define APR_URI_UNP_OMITUSER        (1U<<1)\n/** Just omit password */\n#define APR_URI_UNP_OMITPASSWORD    (1U<<2)\n/** omit \"user:password\\@\" part */\n#define APR_URI_UNP_OMITUSERINFO    (APR_URI_UNP_OMITUSER | \\\n                                     APR_URI_UNP_OMITPASSWORD)\n/** Show plain text password (default: show XXXXXXXX) */\n",
                      "markdown": "`#define APR_URI_UNP_OMITUSER        (1U<<1)\n/** Just omit password */\n#define APR_URI_UNP_OMITPASSWORD    (1U<<2)\n/** omit \"user:password\\@\" part */\n#define APR_URI_UNP_OMITUSERINFO    (APR_URI_UNP_OMITUSER | \\\n                                     APR_URI_UNP_OMITPASSWORD)\n/** Show plain text password (default: show XXXXXXXX) */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_uri.h"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 24,
                  "endLine": 68,
                  "endColumn": 32,
                  "snippet": {
                    "text": "/** Just omit user */\n#define APR_URI_UNP_OMITUSER        (1U<<1)\n/** Just omit password */\n#define APR_URI_UNP_OMITPASSWORD    (1U<<2)\n/** omit \"user:password\\@\" part */\n#define APR_URI_UNP_OMITUSERINFO    (APR_URI_UNP_OMITUSER | \\\n                                     APR_URI_UNP_OMITPASSWORD)\n",
                    "rendered": {
                      "text": "/** Just omit user */\n#define APR_URI_UNP_OMITUSER        (1U<<1)\n/** Just omit password */\n#define APR_URI_UNP_OMITPASSWORD    (1U<<2)\n/** omit \"user:password\\@\" part */\n#define APR_URI_UNP_OMITUSERINFO    (APR_URI_UNP_OMITUSER | \\\n                                     APR_URI_UNP_OMITPASSWORD)\n",
                      "markdown": "`/** Just omit user */\n#define APR_URI_UNP_OMITUSER        (1U<<1)\n/** Just omit password */\n#define APR_URI_UNP_OMITPASSWORD    (1U<<2)\n/** omit \"user:password\\@\" part */\n#define APR_URI_UNP_OMITUSERINFO    (APR_URI_UNP_OMITUSER | \\\n                                     APR_URI_UNP_OMITPASSWORD)\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_uri.h"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 14,
                  "endLine": 67,
                  "endColumn": 22,
                  "snippet": {
                    "text": "#define APR_URI_UNP_OMITSITEPART    (1U<<0)\n/** Just omit user */\n#define APR_URI_UNP_OMITUSER        (1U<<1)\n/** Just omit password */\n#define APR_URI_UNP_OMITPASSWORD    (1U<<2)\n/** omit \"user:password\\@\" part */\n#define APR_URI_UNP_OMITUSERINFO    (APR_URI_UNP_OMITUSER | \\\n",
                    "rendered": {
                      "text": "#define APR_URI_UNP_OMITSITEPART    (1U<<0)\n/** Just omit user */\n#define APR_URI_UNP_OMITUSER        (1U<<1)\n/** Just omit password */\n#define APR_URI_UNP_OMITPASSWORD    (1U<<2)\n/** omit \"user:password\\@\" part */\n#define APR_URI_UNP_OMITUSERINFO    (APR_URI_UNP_OMITUSER | \\\n",
                      "markdown": "`#define APR_URI_UNP_OMITSITEPART    (1U<<0)\n/** Just omit user */\n#define APR_URI_UNP_OMITUSER        (1U<<1)\n/** Just omit password */\n#define APR_URI_UNP_OMITPASSWORD    (1U<<2)\n/** omit \"user:password\\@\" part */\n#define APR_URI_UNP_OMITUSERINFO    (APR_URI_UNP_OMITUSER | \\\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_uri.h"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 10,
                  "endLine": 95,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    /** password, as in http://user:passwd\\@host:port/ */\n    char *password;\n    /** hostname from URI (or from Host: header) */\n    char *hostname;\n    /** port string (integer representation is in \"port\") */\n    char *port_str;\n    /** the request path (or NULL if only scheme://host was given) */\n",
                    "rendered": {
                      "text": "    /** password, as in http://user:passwd\\@host:port/ */\n    char *password;\n    /** hostname from URI (or from Host: header) */\n    char *hostname;\n    /** port string (integer representation is in \"port\") */\n    char *port_str;\n    /** the request path (or NULL if only scheme://host was given) */\n",
                      "markdown": "`    /** password, as in http://user:passwd\\@host:port/ */\n    char *password;\n    /** hostname from URI (or from Host: header) */\n    char *hostname;\n    /** port string (integer representation is in \"port\") */\n    char *port_str;\n    /** the request path (or NULL if only scheme://host was given) */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr.h.in"
                },
                "region": {
                  "startLine": 323,
                  "startColumn": 80,
                  "endLine": 323,
                  "endColumn": 88,
                  "snippet": {
                    "text": "#define APR_HAS_XTHREAD_FILES     @apr_has_xthread_files@\n#define APR_HAS_OS_UUID           @osuuid@\n\n#define APR_PROCATTR_USER_SET_REQUIRES_PASSWORD @apr_procattr_user_set_requires_password@\n\n/* APR sets APR_FILES_AS_SOCKETS to 1 on systems where it is possible\n * to poll on files/pipes.\n",
                    "rendered": {
                      "text": "#define APR_HAS_XTHREAD_FILES     @apr_has_xthread_files@\n#define APR_HAS_OS_UUID           @osuuid@\n\n#define APR_PROCATTR_USER_SET_REQUIRES_PASSWORD @apr_procattr_user_set_requires_password@\n\n/* APR sets APR_FILES_AS_SOCKETS to 1 on systems where it is possible\n * to poll on files/pipes.\n",
                      "markdown": "`#define APR_HAS_XTHREAD_FILES     @apr_has_xthread_files@\n#define APR_HAS_OS_UUID           @osuuid@\n\n#define APR_PROCATTR_USER_SET_REQUIRES_PASSWORD @apr_procattr_user_set_requires_password@\n\n/* APR sets APR_FILES_AS_SOCKETS to 1 on systems where it is possible\n * to poll on files/pipes.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr.h.in"
                },
                "region": {
                  "startLine": 323,
                  "startColumn": 39,
                  "endLine": 323,
                  "endColumn": 47,
                  "snippet": {
                    "text": "#define APR_HAS_XTHREAD_FILES     @apr_has_xthread_files@\n#define APR_HAS_OS_UUID           @osuuid@\n\n#define APR_PROCATTR_USER_SET_REQUIRES_PASSWORD @apr_procattr_user_set_requires_password@\n\n/* APR sets APR_FILES_AS_SOCKETS to 1 on systems where it is possible\n * to poll on files/pipes.\n",
                    "rendered": {
                      "text": "#define APR_HAS_XTHREAD_FILES     @apr_has_xthread_files@\n#define APR_HAS_OS_UUID           @osuuid@\n\n#define APR_PROCATTR_USER_SET_REQUIRES_PASSWORD @apr_procattr_user_set_requires_password@\n\n/* APR sets APR_FILES_AS_SOCKETS to 1 on systems where it is possible\n * to poll on files/pipes.\n",
                      "markdown": "`#define APR_HAS_XTHREAD_FILES     @apr_has_xthread_files@\n#define APR_HAS_OS_UUID           @osuuid@\n\n#define APR_PROCATTR_USER_SET_REQUIRES_PASSWORD @apr_procattr_user_set_requires_password@\n\n/* APR sets APR_FILES_AS_SOCKETS to 1 on systems where it is possible\n * to poll on files/pipes.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr.h.in"
                },
                "region": {
                  "startLine": 572,
                  "startColumn": 46,
                  "endLine": 572,
                  "endColumn": 50,
                  "snippet": {
                    "text": "/**\n * Declare a dso module's exported module structure as APR_MODULE_DECLARE_DATA.\n *\n * Unless APR_MODULE_DECLARE_STATIC is defined at compile time, symbols \n * declared with APR_MODULE_DECLARE_DATA are always exported.\n * @code\n * module APR_MODULE_DECLARE_DATA mod_tag\n",
                    "rendered": {
                      "text": "/**\n * Declare a dso module's exported module structure as APR_MODULE_DECLARE_DATA.\n *\n * Unless APR_MODULE_DECLARE_STATIC is defined at compile time, symbols \n * declared with APR_MODULE_DECLARE_DATA are always exported.\n * @code\n * module APR_MODULE_DECLARE_DATA mod_tag\n",
                      "markdown": "`/**\n * Declare a dso module's exported module structure as APR_MODULE_DECLARE_DATA.\n *\n * Unless APR_MODULE_DECLARE_STATIC is defined at compile time, symbols \n * declared with APR_MODULE_DECLARE_DATA are always exported.\n * @code\n * module APR_MODULE_DECLARE_DATA mod_tag\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr.h.in"
                },
                "region": {
                  "startLine": 540,
                  "startColumn": 54,
                  "endLine": 540,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\n/**\n * The public APR variables are declared with APR_DECLARE_DATA.\n * This assures the appropriate indirection is invoked at compile time.\n * @see APR_DECLARE @see APR_DECLARE_NONSTD\n * @remark Note that the declaration and implementations use different forms,\n * but both must include the macro.\n",
                    "rendered": {
                      "text": "\n/**\n * The public APR variables are declared with APR_DECLARE_DATA.\n * This assures the appropriate indirection is invoked at compile time.\n * @see APR_DECLARE @see APR_DECLARE_NONSTD\n * @remark Note that the declaration and implementations use different forms,\n * but both must include the macro.\n",
                      "markdown": "`\n/**\n * The public APR variables are declared with APR_DECLARE_DATA.\n * This assures the appropriate indirection is invoked at compile time.\n * @see APR_DECLARE @see APR_DECLARE_NONSTD\n * @remark Note that the declaration and implementations use different forms,\n * but both must include the macro.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr.h.in"
                },
                "region": {
                  "startLine": 364,
                  "startColumn": 20,
                  "endLine": 364,
                  "endColumn": 24,
                  "snippet": {
                    "text": " * Darwin 10's default compiler (gcc42) builds for both 64 and\n * 32 bit architectures unless specifically told not to.\n * In those cases, we need to override types depending on how\n * we're being built at compile time.\n * NOTE: This is an ugly work-around for Darwin's\n * concept of universal binaries, a single package\n * (executable, lib, etc...) which contains both 32\n",
                    "rendered": {
                      "text": " * Darwin 10's default compiler (gcc42) builds for both 64 and\n * 32 bit architectures unless specifically told not to.\n * In those cases, we need to override types depending on how\n * we're being built at compile time.\n * NOTE: This is an ugly work-around for Darwin's\n * concept of universal binaries, a single package\n * (executable, lib, etc...) which contains both 32\n",
                      "markdown": "` * Darwin 10's default compiler (gcc42) builds for both 64 and\n * 32 bit architectures unless specifically told not to.\n * In those cases, we need to override types depending on how\n * we're being built at compile time.\n * NOTE: This is an ugly work-around for Darwin's\n * concept of universal binaries, a single package\n * (executable, lib, etc...) which contains both 32\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr.h.in"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 53,
                  "endLine": 7,
                  "snippet": {
                    "text": " * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": " * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "` * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr.h.in"
                },
                "region": {
                  "startLine": 594,
                  "startColumn": 5,
                  "endLine": 594,
                  "endColumn": 11,
                  "snippet": {
                    "text": " * if ssize_t is a long int we define it to be \"ld\",\n * if ssize_t is neither we declare an error here.\n * I looked for a better way to define this here, but couldn't find one, so\n * to find the logic for this definition search for \"ssize_t_fmt\" in\n * configure.in.\n */\n\n",
                    "rendered": {
                      "text": " * if ssize_t is a long int we define it to be \"ld\",\n * if ssize_t is neither we declare an error here.\n * I looked for a better way to define this here, but couldn't find one, so\n * to find the logic for this definition search for \"ssize_t_fmt\" in\n * configure.in.\n */\n\n",
                      "markdown": "` * if ssize_t is a long int we define it to be \"ld\",\n * if ssize_t is neither we declare an error here.\n * I looked for a better way to define this here, but couldn't find one, so\n * to find the logic for this definition search for \"ssize_t_fmt\" in\n * configure.in.\n */\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr.h.in"
                },
                "region": {
                  "startLine": 593,
                  "startColumn": 62,
                  "endLine": 593,
                  "endColumn": 68,
                  "snippet": {
                    "text": " * If ssize_t is an integer we define it to be \"d\",\n * if ssize_t is a long int we define it to be \"ld\",\n * if ssize_t is neither we declare an error here.\n * I looked for a better way to define this here, but couldn't find one, so\n * to find the logic for this definition search for \"ssize_t_fmt\" in\n * configure.in.\n */\n",
                    "rendered": {
                      "text": " * If ssize_t is an integer we define it to be \"d\",\n * if ssize_t is a long int we define it to be \"ld\",\n * if ssize_t is neither we declare an error here.\n * I looked for a better way to define this here, but couldn't find one, so\n * to find the logic for this definition search for \"ssize_t_fmt\" in\n * configure.in.\n */\n",
                      "markdown": "` * If ssize_t is an integer we define it to be \"d\",\n * if ssize_t is a long int we define it to be \"ld\",\n * if ssize_t is neither we declare an error here.\n * I looked for a better way to define this here, but couldn't find one, so\n * to find the logic for this definition search for \"ssize_t_fmt\" in\n * configure.in.\n */\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/misc/unix/randbyte_os2.inc"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 21,
                  "endLine": 58,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n\n/* Similar in concept to randbyte_hrtimer() but accesses the CPU's internal\n * counters which run at the CPU's MHz speed. We get separate \n * idle / busy / interrupt cycle counts which should provide very good \n * randomness due to interference of hardware events.\n * This only works on newer CPUs (at least PPro or K6) and newer OS/2 versions\n",
                    "rendered": {
                      "text": "\n\n/* Similar in concept to randbyte_hrtimer() but accesses the CPU's internal\n * counters which run at the CPU's MHz speed. We get separate \n * idle / busy / interrupt cycle counts which should provide very good \n * randomness due to interference of hardware events.\n * This only works on newer CPUs (at least PPro or K6) and newer OS/2 versions\n",
                      "markdown": "`\n\n/* Similar in concept to randbyte_hrtimer() but accesses the CPU's internal\n * counters which run at the CPU's MHz speed. We get separate \n * idle / busy / interrupt cycle counts which should provide very good \n * randomness due to interference of hardware events.\n * This only works on newer CPUs (at least PPro or K6) and newer OS/2 versions\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/misc/unix/randbyte_os2.inc"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 10,
                  "endLine": 18,
                  "endColumn": 14,
                  "snippet": {
                    "text": " */\n\n/* The high resolution timer API provides access to the hardware timer \n * running at around 1.1MHz. The amount this changes in a time slice is\n * varies randomly due to system events, hardware interrupts etc\n */\nstatic UCHAR randbyte_hrtimer()\n",
                    "rendered": {
                      "text": " */\n\n/* The high resolution timer API provides access to the hardware timer \n * running at around 1.1MHz. The amount this changes in a time slice is\n * varies randomly due to system events, hardware interrupts etc\n */\nstatic UCHAR randbyte_hrtimer()\n",
                      "markdown": "` */\n\n/* The high resolution timer API provides access to the hardware timer \n * running at around 1.1MHz. The amount this changes in a time slice is\n * varies randomly due to system events, hardware interrupts etc\n */\nstatic UCHAR randbyte_hrtimer()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/misc/unix/randbyte_os2.inc"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 53,
                  "endLine": 7,
                  "snippet": {
                    "text": " * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": " * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "` * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/misc/unix/randbyte_os2.inc"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 60,
                  "endLine": 78,
                  "endColumn": 66,
                  "snippet": {
                    "text": "    ULONG ulBusyLow;            /* Low 32 bits of busy time       */\n    ULONG ulBusyHigh;           /* High 32 bits of busy time      */\n    ULONG ulIntrLow;            /* Low 32 bits of interrupt time  */\n    ULONG ulIntrHigh;           /* High 32 bits of interrupt time */\n} CPUUTIL;\n\n\n",
                    "rendered": {
                      "text": "    ULONG ulBusyLow;            /* Low 32 bits of busy time       */\n    ULONG ulBusyHigh;           /* High 32 bits of busy time      */\n    ULONG ulIntrLow;            /* Low 32 bits of interrupt time  */\n    ULONG ulIntrHigh;           /* High 32 bits of interrupt time */\n} CPUUTIL;\n\n\n",
                      "markdown": "`    ULONG ulBusyLow;            /* Low 32 bits of busy time       */\n    ULONG ulBusyHigh;           /* High 32 bits of busy time      */\n    ULONG ulIntrLow;            /* Low 32 bits of interrupt time  */\n    ULONG ulIntrHigh;           /* High 32 bits of interrupt time */\n} CPUUTIL;\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/misc/unix/randbyte_os2.inc"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 59,
                  "endLine": 77,
                  "endColumn": 65,
                  "snippet": {
                    "text": "    ULONG ulIdleHigh;           /* High 32 bits of idle time      */\n    ULONG ulBusyLow;            /* Low 32 bits of busy time       */\n    ULONG ulBusyHigh;           /* High 32 bits of busy time      */\n    ULONG ulIntrLow;            /* Low 32 bits of interrupt time  */\n    ULONG ulIntrHigh;           /* High 32 bits of interrupt time */\n} CPUUTIL;\n\n",
                    "rendered": {
                      "text": "    ULONG ulIdleHigh;           /* High 32 bits of idle time      */\n    ULONG ulBusyLow;            /* Low 32 bits of busy time       */\n    ULONG ulBusyHigh;           /* High 32 bits of busy time      */\n    ULONG ulIntrLow;            /* Low 32 bits of interrupt time  */\n    ULONG ulIntrHigh;           /* High 32 bits of interrupt time */\n} CPUUTIL;\n\n",
                      "markdown": "`    ULONG ulIdleHigh;           /* High 32 bits of idle time      */\n    ULONG ulBusyLow;            /* Low 32 bits of busy time       */\n    ULONG ulBusyHigh;           /* High 32 bits of busy time      */\n    ULONG ulIntrLow;            /* Low 32 bits of interrupt time  */\n    ULONG ulIntrHigh;           /* High 32 bits of interrupt time */\n} CPUUTIL;\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/misc/unix/randbyte_os2.inc"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 55,
                  "endLine": 76,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    ULONG ulIdleLow;            /* Low 32 bits of idle time       */\n    ULONG ulIdleHigh;           /* High 32 bits of idle time      */\n    ULONG ulBusyLow;            /* Low 32 bits of busy time       */\n    ULONG ulBusyHigh;           /* High 32 bits of busy time      */\n    ULONG ulIntrLow;            /* Low 32 bits of interrupt time  */\n    ULONG ulIntrHigh;           /* High 32 bits of interrupt time */\n} CPUUTIL;\n",
                    "rendered": {
                      "text": "    ULONG ulIdleLow;            /* Low 32 bits of idle time       */\n    ULONG ulIdleHigh;           /* High 32 bits of idle time      */\n    ULONG ulBusyLow;            /* Low 32 bits of busy time       */\n    ULONG ulBusyHigh;           /* High 32 bits of busy time      */\n    ULONG ulIntrLow;            /* Low 32 bits of interrupt time  */\n    ULONG ulIntrHigh;           /* High 32 bits of interrupt time */\n} CPUUTIL;\n",
                      "markdown": "`    ULONG ulIdleLow;            /* Low 32 bits of idle time       */\n    ULONG ulIdleHigh;           /* High 32 bits of idle time      */\n    ULONG ulBusyLow;            /* Low 32 bits of busy time       */\n    ULONG ulBusyHigh;           /* High 32 bits of busy time      */\n    ULONG ulIntrLow;            /* Low 32 bits of interrupt time  */\n    ULONG ulIntrHigh;           /* High 32 bits of interrupt time */\n} CPUUTIL;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/misc/unix/randbyte_os2.inc"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 54,
                  "endLine": 75,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    ULONG ulTimeHigh;           /* High 32 bits of time stamp     */\n    ULONG ulIdleLow;            /* Low 32 bits of idle time       */\n    ULONG ulIdleHigh;           /* High 32 bits of idle time      */\n    ULONG ulBusyLow;            /* Low 32 bits of busy time       */\n    ULONG ulBusyHigh;           /* High 32 bits of busy time      */\n    ULONG ulIntrLow;            /* Low 32 bits of interrupt time  */\n    ULONG ulIntrHigh;           /* High 32 bits of interrupt time */\n",
                    "rendered": {
                      "text": "    ULONG ulTimeHigh;           /* High 32 bits of time stamp     */\n    ULONG ulIdleLow;            /* Low 32 bits of idle time       */\n    ULONG ulIdleHigh;           /* High 32 bits of idle time      */\n    ULONG ulBusyLow;            /* Low 32 bits of busy time       */\n    ULONG ulBusyHigh;           /* High 32 bits of busy time      */\n    ULONG ulIntrLow;            /* Low 32 bits of interrupt time  */\n    ULONG ulIntrHigh;           /* High 32 bits of interrupt time */\n",
                      "markdown": "`    ULONG ulTimeHigh;           /* High 32 bits of time stamp     */\n    ULONG ulIdleLow;            /* Low 32 bits of idle time       */\n    ULONG ulIdleHigh;           /* High 32 bits of idle time      */\n    ULONG ulBusyLow;            /* Low 32 bits of busy time       */\n    ULONG ulBusyHigh;           /* High 32 bits of busy time      */\n    ULONG ulIntrLow;            /* Low 32 bits of interrupt time  */\n    ULONG ulIntrHigh;           /* High 32 bits of interrupt time */\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/misc/unix/randbyte_os2.inc"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 55,
                  "endLine": 74,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    ULONG ulTimeLow;            /* Low 32 bits of time stamp      */\n    ULONG ulTimeHigh;           /* High 32 bits of time stamp     */\n    ULONG ulIdleLow;            /* Low 32 bits of idle time       */\n    ULONG ulIdleHigh;           /* High 32 bits of idle time      */\n    ULONG ulBusyLow;            /* Low 32 bits of busy time       */\n    ULONG ulBusyHigh;           /* High 32 bits of busy time      */\n    ULONG ulIntrLow;            /* Low 32 bits of interrupt time  */\n",
                    "rendered": {
                      "text": "    ULONG ulTimeLow;            /* Low 32 bits of time stamp      */\n    ULONG ulTimeHigh;           /* High 32 bits of time stamp     */\n    ULONG ulIdleLow;            /* Low 32 bits of idle time       */\n    ULONG ulIdleHigh;           /* High 32 bits of idle time      */\n    ULONG ulBusyLow;            /* Low 32 bits of busy time       */\n    ULONG ulBusyHigh;           /* High 32 bits of busy time      */\n    ULONG ulIntrLow;            /* Low 32 bits of interrupt time  */\n",
                      "markdown": "`    ULONG ulTimeLow;            /* Low 32 bits of time stamp      */\n    ULONG ulTimeHigh;           /* High 32 bits of time stamp     */\n    ULONG ulIdleLow;            /* Low 32 bits of idle time       */\n    ULONG ulIdleHigh;           /* High 32 bits of idle time      */\n    ULONG ulBusyLow;            /* Low 32 bits of busy time       */\n    ULONG ulBusyHigh;           /* High 32 bits of busy time      */\n    ULONG ulIntrLow;            /* Low 32 bits of interrupt time  */\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/misc/unix/randbyte_os2.inc"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 54,
                  "endLine": 73,
                  "endColumn": 60,
                  "snippet": {
                    "text": "typedef struct _CPUUTIL {\n    ULONG ulTimeLow;            /* Low 32 bits of time stamp      */\n    ULONG ulTimeHigh;           /* High 32 bits of time stamp     */\n    ULONG ulIdleLow;            /* Low 32 bits of idle time       */\n    ULONG ulIdleHigh;           /* High 32 bits of idle time      */\n    ULONG ulBusyLow;            /* Low 32 bits of busy time       */\n    ULONG ulBusyHigh;           /* High 32 bits of busy time      */\n",
                    "rendered": {
                      "text": "typedef struct _CPUUTIL {\n    ULONG ulTimeLow;            /* Low 32 bits of time stamp      */\n    ULONG ulTimeHigh;           /* High 32 bits of time stamp     */\n    ULONG ulIdleLow;            /* Low 32 bits of idle time       */\n    ULONG ulIdleHigh;           /* High 32 bits of idle time      */\n    ULONG ulBusyLow;            /* Low 32 bits of busy time       */\n    ULONG ulBusyHigh;           /* High 32 bits of busy time      */\n",
                      "markdown": "`typedef struct _CPUUTIL {\n    ULONG ulTimeLow;            /* Low 32 bits of time stamp      */\n    ULONG ulTimeHigh;           /* High 32 bits of time stamp     */\n    ULONG ulIdleLow;            /* Low 32 bits of idle time       */\n    ULONG ulIdleHigh;           /* High 32 bits of idle time      */\n    ULONG ulBusyLow;            /* Low 32 bits of busy time       */\n    ULONG ulBusyHigh;           /* High 32 bits of busy time      */\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/misc/unix/randbyte_os2.inc"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 50,
                  "endLine": 72,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\ntypedef struct _CPUUTIL {\n    ULONG ulTimeLow;            /* Low 32 bits of time stamp      */\n    ULONG ulTimeHigh;           /* High 32 bits of time stamp     */\n    ULONG ulIdleLow;            /* Low 32 bits of idle time       */\n    ULONG ulIdleHigh;           /* High 32 bits of idle time      */\n    ULONG ulBusyLow;            /* Low 32 bits of busy time       */\n",
                    "rendered": {
                      "text": "\ntypedef struct _CPUUTIL {\n    ULONG ulTimeLow;            /* Low 32 bits of time stamp      */\n    ULONG ulTimeHigh;           /* High 32 bits of time stamp     */\n    ULONG ulIdleLow;            /* Low 32 bits of idle time       */\n    ULONG ulIdleHigh;           /* High 32 bits of idle time      */\n    ULONG ulBusyLow;            /* Low 32 bits of busy time       */\n",
                      "markdown": "`\ntypedef struct _CPUUTIL {\n    ULONG ulTimeLow;            /* Low 32 bits of time stamp      */\n    ULONG ulTimeHigh;           /* High 32 bits of time stamp     */\n    ULONG ulIdleLow;            /* Low 32 bits of idle time       */\n    ULONG ulIdleHigh;           /* High 32 bits of idle time      */\n    ULONG ulBusyLow;            /* Low 32 bits of busy time       */\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/misc/unix/randbyte_os2.inc"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 49,
                  "endLine": 71,
                  "endColumn": 55,
                  "snippet": {
                    "text": "#define   CMD_KI_RDCNT    (0x63)\n\ntypedef struct _CPUUTIL {\n    ULONG ulTimeLow;            /* Low 32 bits of time stamp      */\n    ULONG ulTimeHigh;           /* High 32 bits of time stamp     */\n    ULONG ulIdleLow;            /* Low 32 bits of idle time       */\n    ULONG ulIdleHigh;           /* High 32 bits of idle time      */\n",
                    "rendered": {
                      "text": "#define   CMD_KI_RDCNT    (0x63)\n\ntypedef struct _CPUUTIL {\n    ULONG ulTimeLow;            /* Low 32 bits of time stamp      */\n    ULONG ulTimeHigh;           /* High 32 bits of time stamp     */\n    ULONG ulIdleLow;            /* Low 32 bits of idle time       */\n    ULONG ulIdleHigh;           /* High 32 bits of idle time      */\n",
                      "markdown": "`#define   CMD_KI_RDCNT    (0x63)\n\ntypedef struct _CPUUTIL {\n    ULONG ulTimeLow;            /* Low 32 bits of time stamp      */\n    ULONG ulTimeHigh;           /* High 32 bits of time stamp     */\n    ULONG ulIdleLow;            /* Low 32 bits of idle time       */\n    ULONG ulIdleHigh;           /* High 32 bits of idle time      */\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/misc/unix/randbyte_os2.inc"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 57,
                  "endLine": 18,
                  "endColumn": 63,
                  "snippet": {
                    "text": " */\n\n/* The high resolution timer API provides access to the hardware timer \n * running at around 1.1MHz. The amount this changes in a time slice is\n * varies randomly due to system events, hardware interrupts etc\n */\nstatic UCHAR randbyte_hrtimer()\n",
                    "rendered": {
                      "text": " */\n\n/* The high resolution timer API provides access to the hardware timer \n * running at around 1.1MHz. The amount this changes in a time slice is\n * varies randomly due to system events, hardware interrupts etc\n */\nstatic UCHAR randbyte_hrtimer()\n",
                      "markdown": "` */\n\n/* The high resolution timer API provides access to the hardware timer \n * running at around 1.1MHz. The amount this changes in a time slice is\n * varies randomly due to system events, hardware interrupts etc\n */\nstatic UCHAR randbyte_hrtimer()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/misc/win32/internal.c"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 18,
                  "endLine": 93,
                  "endColumn": 24,
                  "snippet": {
                    "text": "                          __FILE__, __LINE__);\n\n    if (ele != elements) {\n        apr_size_t diff = ele - elements;\n        for (arg = 0; arg < args; ++arg) {\n            newarr[arg] += diff;\n        }\n",
                    "rendered": {
                      "text": "                          __FILE__, __LINE__);\n\n    if (ele != elements) {\n        apr_size_t diff = ele - elements;\n        for (arg = 0; arg < args; ++arg) {\n            newarr[arg] += diff;\n        }\n",
                      "markdown": "`                          __FILE__, __LINE__);\n\n    if (ele != elements) {\n        apr_size_t diff = ele - elements;\n        for (arg = 0; arg < args; ++arg) {\n            newarr[arg] += diff;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/misc/win32/start.c"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 21,
                  "endLine": 140,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n    /* MSVCRT will attempt to maintain the wide environment calls\n     * on _putenv(), which is bogus if we've passed a non-ascii\n     * string to _putenv(), since they use MultiByteToWideChar\n     * and breaking the implicit utf-8 assumption we've built.\n     *\n     * Reset _wenviron for good measure.\n",
                    "rendered": {
                      "text": "\n    /* MSVCRT will attempt to maintain the wide environment calls\n     * on _putenv(), which is bogus if we've passed a non-ascii\n     * string to _putenv(), since they use MultiByteToWideChar\n     * and breaking the implicit utf-8 assumption we've built.\n     *\n     * Reset _wenviron for good measure.\n",
                      "markdown": "`\n    /* MSVCRT will attempt to maintain the wide environment calls\n     * on _putenv(), which is bogus if we've passed a non-ascii\n     * string to _putenv(), since they use MultiByteToWideChar\n     * and breaking the implicit utf-8 assumption we've built.\n     *\n     * Reset _wenviron for good measure.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/misc/win32/start.c"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 13,
                  "endLine": 70,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n    assert(newlen && !wsize);\n\n    *retarr = env = apr_malloc_dbg((args + 1) * sizeof(char*),\n                                   __FILE__, __LINE__);\n    for (arg = 0; arg < args; ++arg) {\n        char* p = pstrs;\n",
                    "rendered": {
                      "text": "\n    assert(newlen && !wsize);\n\n    *retarr = env = apr_malloc_dbg((args + 1) * sizeof(char*),\n                                   __FILE__, __LINE__);\n    for (arg = 0; arg < args; ++arg) {\n        char* p = pstrs;\n",
                      "markdown": "`\n    assert(newlen && !wsize);\n\n    *retarr = env = apr_malloc_dbg((args + 1) * sizeof(char*),\n                                   __FILE__, __LINE__);\n    for (arg = 0; arg < args; ++arg) {\n        char* p = pstrs;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/buildconf"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 35,
                  "endLine": 83,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    exit 1\n  fi\n  # Do we need this anymore?\n  echo \"buildconf: Using libtool.m4 at ${ltfile}.\"\n  rm -f build/libtool.m4\n  cp -p $ltfile build/libtool.m4\n\n",
                    "rendered": {
                      "text": "    exit 1\n  fi\n  # Do we need this anymore?\n  echo \"buildconf: Using libtool.m4 at ${ltfile}.\"\n  rm -f build/libtool.m4\n  cp -p $ltfile build/libtool.m4\n\n",
                      "markdown": "`    exit 1\n  fi\n  # Do we need this anymore?\n  echo \"buildconf: Using libtool.m4 at ${ltfile}.\"\n  rm -f build/libtool.m4\n  cp -p $ltfile build/libtool.m4\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/buildconf"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 52,
                  "endLine": 8,
                  "snippet": {
                    "text": "# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n# \n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n# \n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n# \n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/buildconf"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 3,
                  "endLine": 131,
                  "endColumn": 8,
                  "snippet": {
                    "text": "      RELEASE=1\n    fi\n    cat ./build/rpm/apr.spec.in | \\\n    sed -e \"s/APR_VERSION/$VERSION/\" \\\n        -e \"s/APR_RELEASE/$RELEASE/\" \\\n    > apr.spec )\nfi\n",
                    "rendered": {
                      "text": "      RELEASE=1\n    fi\n    cat ./build/rpm/apr.spec.in | \\\n    sed -e \"s/APR_VERSION/$VERSION/\" \\\n        -e \"s/APR_RELEASE/$RELEASE/\" \\\n    > apr.spec )\nfi\n",
                      "markdown": "`      RELEASE=1\n    fi\n    cat ./build/rpm/apr.spec.in | \\\n    sed -e \"s/APR_VERSION/$VERSION/\" \\\n        -e \"s/APR_RELEASE/$RELEASE/\" \\\n    > apr.spec )\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/buildconf"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 3,
                  "endLine": 130,
                  "endColumn": 8,
                  "snippet": {
                    "text": "      VERSION=$REVISION\n      RELEASE=1\n    fi\n    cat ./build/rpm/apr.spec.in | \\\n    sed -e \"s/APR_VERSION/$VERSION/\" \\\n        -e \"s/APR_RELEASE/$RELEASE/\" \\\n    > apr.spec )\n",
                    "rendered": {
                      "text": "      VERSION=$REVISION\n      RELEASE=1\n    fi\n    cat ./build/rpm/apr.spec.in | \\\n    sed -e \"s/APR_VERSION/$VERSION/\" \\\n        -e \"s/APR_RELEASE/$RELEASE/\" \\\n    > apr.spec )\n",
                      "markdown": "`      VERSION=$REVISION\n      RELEASE=1\n    fi\n    cat ./build/rpm/apr.spec.in | \\\n    sed -e \"s/APR_VERSION/$VERSION/\" \\\n        -e \"s/APR_RELEASE/$RELEASE/\" \\\n    > apr.spec )\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/buildconf"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 29,
                  "endLine": 125,
                  "endColumn": 34,
                  "snippet": {
                    "text": "  echo \"buildconf: rebuilding rpm spec file\"\n  ( REVISION=`build/get-version.sh all include/apr_version.h APR`\n    VERSION=`echo $REVISION | cut -d- -s -f1`\n    RELEASE=`echo $REVISION | cut -d- -s -f2`\n    if [ \"x$VERSION\" = \"x\" ]; then\n      VERSION=$REVISION\n      RELEASE=1\n",
                    "rendered": {
                      "text": "  echo \"buildconf: rebuilding rpm spec file\"\n  ( REVISION=`build/get-version.sh all include/apr_version.h APR`\n    VERSION=`echo $REVISION | cut -d- -s -f1`\n    RELEASE=`echo $REVISION | cut -d- -s -f2`\n    if [ \"x$VERSION\" = \"x\" ]; then\n      VERSION=$REVISION\n      RELEASE=1\n",
                      "markdown": "`  echo \"buildconf: rebuilding rpm spec file\"\n  ( REVISION=`build/get-version.sh all include/apr_version.h APR`\n    VERSION=`echo $REVISION | cut -d- -s -f1`\n    RELEASE=`echo $REVISION | cut -d- -s -f2`\n    if [ \"x$VERSION\" = \"x\" ]; then\n      VERSION=$REVISION\n      RELEASE=1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/buildconf"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 29,
                  "endLine": 124,
                  "endColumn": 34,
                  "snippet": {
                    "text": "if [ -f `which cut` ]; then\n  echo \"buildconf: rebuilding rpm spec file\"\n  ( REVISION=`build/get-version.sh all include/apr_version.h APR`\n    VERSION=`echo $REVISION | cut -d- -s -f1`\n    RELEASE=`echo $REVISION | cut -d- -s -f2`\n    if [ \"x$VERSION\" = \"x\" ]; then\n      VERSION=$REVISION\n",
                    "rendered": {
                      "text": "if [ -f `which cut` ]; then\n  echo \"buildconf: rebuilding rpm spec file\"\n  ( REVISION=`build/get-version.sh all include/apr_version.h APR`\n    VERSION=`echo $REVISION | cut -d- -s -f1`\n    RELEASE=`echo $REVISION | cut -d- -s -f2`\n    if [ \"x$VERSION\" = \"x\" ]; then\n      VERSION=$REVISION\n",
                      "markdown": "`if [ -f `which cut` ]; then\n  echo \"buildconf: rebuilding rpm spec file\"\n  ( REVISION=`build/get-version.sh all include/apr_version.h APR`\n    VERSION=`echo $REVISION | cut -d- -s -f1`\n    RELEASE=`echo $REVISION | cut -d- -s -f2`\n    if [ \"x$VERSION\" = \"x\" ]; then\n      VERSION=$REVISION\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/buildconf"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 29,
                  "endLine": 122,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\n# Create RPM Spec file\nif [ -f `which cut` ]; then\n  echo \"buildconf: rebuilding rpm spec file\"\n  ( REVISION=`build/get-version.sh all include/apr_version.h APR`\n    VERSION=`echo $REVISION | cut -d- -s -f1`\n    RELEASE=`echo $REVISION | cut -d- -s -f2`\n",
                    "rendered": {
                      "text": "\n# Create RPM Spec file\nif [ -f `which cut` ]; then\n  echo \"buildconf: rebuilding rpm spec file\"\n  ( REVISION=`build/get-version.sh all include/apr_version.h APR`\n    VERSION=`echo $REVISION | cut -d- -s -f1`\n    RELEASE=`echo $REVISION | cut -d- -s -f2`\n",
                      "markdown": "`\n# Create RPM Spec file\nif [ -f `which cut` ]; then\n  echo \"buildconf: rebuilding rpm spec file\"\n  ( REVISION=`build/get-version.sh all include/apr_version.h APR`\n    VERSION=`echo $REVISION | cut -d- -s -f1`\n    RELEASE=`echo $REVISION | cut -d- -s -f2`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/buildconf"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 8,
                  "endLine": 120,
                  "endColumn": 13,
                  "snippet": {
                    "text": "echo \"buildconf: generating 'make' outputs ...\"\n${PYTHON} build/gen-build.py $verbose make\n\n# Create RPM Spec file\nif [ -f `which cut` ]; then\n  echo \"buildconf: rebuilding rpm spec file\"\n  ( REVISION=`build/get-version.sh all include/apr_version.h APR`\n",
                    "rendered": {
                      "text": "echo \"buildconf: generating 'make' outputs ...\"\n${PYTHON} build/gen-build.py $verbose make\n\n# Create RPM Spec file\nif [ -f `which cut` ]; then\n  echo \"buildconf: rebuilding rpm spec file\"\n  ( REVISION=`build/get-version.sh all include/apr_version.h APR`\n",
                      "markdown": "`echo \"buildconf: generating 'make' outputs ...\"\n${PYTHON} build/gen-build.py $verbose make\n\n# Create RPM Spec file\nif [ -f `which cut` ]; then\n  echo \"buildconf: rebuilding rpm spec file\"\n  ( REVISION=`build/get-version.sh all include/apr_version.h APR`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/buildconf"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 39,
                  "endLine": 96,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Replace top_builddir by apr_builddir.\n# Wouldn't it just be better to define top_builddir??\n# Not sure, would it interfere with httpd top_builddir when bundled?\nmv build/libtool.m4 build/libtool.m4.$$\nsed -e 's/\\(LIBTOOL=.*\\)top_build/\\1apr_build/' < build/libtool.m4.$$ > build/libtool.m4\nrm -f build/libtool.m4.$$\n\n# Clean up any leftovers\n",
                    "rendered": {
                      "text": "# Replace top_builddir by apr_builddir.\n# Wouldn't it just be better to define top_builddir??\n# Not sure, would it interfere with httpd top_builddir when bundled?\nmv build/libtool.m4 build/libtool.m4.$$\nsed -e 's/\\(LIBTOOL=.*\\)top_build/\\1apr_build/' < build/libtool.m4.$$ > build/libtool.m4\nrm -f build/libtool.m4.$$\n\n# Clean up any leftovers\n",
                      "markdown": "`# Replace top_builddir by apr_builddir.\n# Wouldn't it just be better to define top_builddir??\n# Not sure, would it interfere with httpd top_builddir when bundled?\nmv build/libtool.m4 build/libtool.m4.$$\nsed -e 's/\\(LIBTOOL=.*\\)top_build/\\1apr_build/' < build/libtool.m4.$$ > build/libtool.m4\nrm -f build/libtool.m4.$$\n\n# Clean up any leftovers\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/buildconf"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 68,
                  "endLine": 95,
                  "endColumn": 3,
                  "snippet": {
                    "text": "\n# Replace top_builddir by apr_builddir.\n# Wouldn't it just be better to define top_builddir??\n# Not sure, would it interfere with httpd top_builddir when bundled?\nmv build/libtool.m4 build/libtool.m4.$$\nsed -e 's/\\(LIBTOOL=.*\\)top_build/\\1apr_build/' < build/libtool.m4.$$ > build/libtool.m4\nrm -f build/libtool.m4.$$\n\n",
                    "rendered": {
                      "text": "\n# Replace top_builddir by apr_builddir.\n# Wouldn't it just be better to define top_builddir??\n# Not sure, would it interfere with httpd top_builddir when bundled?\nmv build/libtool.m4 build/libtool.m4.$$\nsed -e 's/\\(LIBTOOL=.*\\)top_build/\\1apr_build/' < build/libtool.m4.$$ > build/libtool.m4\nrm -f build/libtool.m4.$$\n\n",
                      "markdown": "`\n# Replace top_builddir by apr_builddir.\n# Wouldn't it just be better to define top_builddir??\n# Not sure, would it interfere with httpd top_builddir when bundled?\nmv build/libtool.m4 build/libtool.m4.$$\nsed -e 's/\\(LIBTOOL=.*\\)top_build/\\1apr_build/' < build/libtool.m4.$$ > build/libtool.m4\nrm -f build/libtool.m4.$$\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/buildconf"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 1,
                  "endLine": 85,
                  "endColumn": 5,
                  "snippet": {
                    "text": "  # Do we need this anymore?\n  echo \"buildconf: Using libtool.m4 at ${ltfile}.\"\n  rm -f build/libtool.m4\n  cp -p $ltfile build/libtool.m4\n\n# libtool 2\nelif test \"$1\" = \"2\"; then\n",
                    "rendered": {
                      "text": "  # Do we need this anymore?\n  echo \"buildconf: Using libtool.m4 at ${ltfile}.\"\n  rm -f build/libtool.m4\n  cp -p $ltfile build/libtool.m4\n\n# libtool 2\nelif test \"$1\" = \"2\"; then\n",
                      "markdown": "`  # Do we need this anymore?\n  echo \"buildconf: Using libtool.m4 at ${ltfile}.\"\n  rm -f build/libtool.m4\n  cp -p $ltfile build/libtool.m4\n\n# libtool 2\nelif test \"$1\" = \"2\"; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/buildconf"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 83,
                  "endLine": 70,
                  "snippet": {
                    "text": "    ltfindcmd=\"`sed -n \\\"/=[^\\\\\\`]/p;/libtool_m4=/{s/.*=/echo /p;q;}\\\" \\\n                   < $libtoolize`\"\n\n    # Get path to libtool.m4 either from LIBTOOL_M4 env var or our libtoolize based script\n    ltfile=${LIBTOOL_M4-`eval \"$ltfindcmd\"`}\n\n    # Expecting the code above to be very portable, but just in case...\n    if [ -z \"$ltfile\" -o ! -f \"$ltfile\" ]; then\n",
                    "rendered": {
                      "text": "    ltfindcmd=\"`sed -n \\\"/=[^\\\\\\`]/p;/libtool_m4=/{s/.*=/echo /p;q;}\\\" \\\n                   < $libtoolize`\"\n\n    # Get path to libtool.m4 either from LIBTOOL_M4 env var or our libtoolize based script\n    ltfile=${LIBTOOL_M4-`eval \"$ltfindcmd\"`}\n\n    # Expecting the code above to be very portable, but just in case...\n    if [ -z \"$ltfile\" -o ! -f \"$ltfile\" ]; then\n",
                      "markdown": "`    ltfindcmd=\"`sed -n \\\"/=[^\\\\\\`]/p;/libtool_m4=/{s/.*=/echo /p;q;}\\\" \\\n                   < $libtoolize`\"\n\n    # Get path to libtool.m4 either from LIBTOOL_M4 env var or our libtoolize based script\n    ltfile=${LIBTOOL_M4-`eval \"$ltfindcmd\"`}\n\n    # Expecting the code above to be very portable, but just in case...\n    if [ -z \"$ltfile\" -o ! -f \"$ltfile\" ]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/buildconf"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 51,
                  "endLine": 69,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    ltfindcmd=\"`sed -n \\\"/=[^\\\\\\`]/p;/libtool_m4=/{s/.*=/echo /p;q;}\\\" \\\n                   < $libtoolize`\"\n\n    # Get path to libtool.m4 either from LIBTOOL_M4 env var or our libtoolize based script\n    ltfile=${LIBTOOL_M4-`eval \"$ltfindcmd\"`}\n\n    # Expecting the code above to be very portable, but just in case...\n",
                    "rendered": {
                      "text": "    ltfindcmd=\"`sed -n \\\"/=[^\\\\\\`]/p;/libtool_m4=/{s/.*=/echo /p;q;}\\\" \\\n                   < $libtoolize`\"\n\n    # Get path to libtool.m4 either from LIBTOOL_M4 env var or our libtoolize based script\n    ltfile=${LIBTOOL_M4-`eval \"$ltfindcmd\"`}\n\n    # Expecting the code above to be very portable, but just in case...\n",
                      "markdown": "`    ltfindcmd=\"`sed -n \\\"/=[^\\\\\\`]/p;/libtool_m4=/{s/.*=/echo /p;q;}\\\" \\\n                   < $libtoolize`\"\n\n    # Get path to libtool.m4 either from LIBTOOL_M4 env var or our libtoolize based script\n    ltfile=${LIBTOOL_M4-`eval \"$ltfindcmd\"`}\n\n    # Expecting the code above to be very portable, but just in case...\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/CHANGES"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 15,
                  "endLine": 135,
                  "endColumn": 21,
                  "snippet": {
                    "text": "     [Moriyoshi Koizumi <mozo mozo jp>]\n\n  *) Add the apr_encode_* API that implements RFC4648 and RFC7515\n     compliant BASE64, BASE64URL, BASE32, BASE32HEX and BASE16\n     encode/decode functions. [Graham Leggett]\n\n  *) Add apr_reslist_acquire_ex() which allows to control acquire order,\n",
                    "rendered": {
                      "text": "     [Moriyoshi Koizumi <mozo mozo jp>]\n\n  *) Add the apr_encode_* API that implements RFC4648 and RFC7515\n     compliant BASE64, BASE64URL, BASE32, BASE32HEX and BASE16\n     encode/decode functions. [Graham Leggett]\n\n  *) Add apr_reslist_acquire_ex() which allows to control acquire order,\n",
                      "markdown": "`     [Moriyoshi Koizumi <mozo mozo jp>]\n\n  *) Add the apr_encode_* API that implements RFC4648 and RFC7515\n     compliant BASE64, BASE64URL, BASE32, BASE32HEX and BASE16\n     encode/decode functions. [Graham Leggett]\n\n  *) Add apr_reslist_acquire_ex() which allows to control acquire order,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/CHANGES"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 49,
                  "endLine": 138,
                  "endColumn": 58,
                  "snippet": {
                    "text": "     compliant BASE64, BASE64URL, BASE32, BASE32HEX and BASE16\n     encode/decode functions. [Graham Leggett]\n\n  *) Add apr_reslist_acquire_ex() which allows to control acquire order,\n     that is LIFO (default) or FIFO.  [Yann Ylavic]\n\n  *) Add apr_pool_tag_get to retrieve the pool tag name.  [Joe Orton]\n",
                    "rendered": {
                      "text": "     compliant BASE64, BASE64URL, BASE32, BASE32HEX and BASE16\n     encode/decode functions. [Graham Leggett]\n\n  *) Add apr_reslist_acquire_ex() which allows to control acquire order,\n     that is LIFO (default) or FIFO.  [Yann Ylavic]\n\n  *) Add apr_pool_tag_get to retrieve the pool tag name.  [Joe Orton]\n",
                      "markdown": "`     compliant BASE64, BASE64URL, BASE32, BASE32HEX and BASE16\n     encode/decode functions. [Graham Leggett]\n\n  *) Add apr_reslist_acquire_ex() which allows to control acquire order,\n     that is LIFO (default) or FIFO.  [Yann Ylavic]\n\n  *) Add apr_pool_tag_get to retrieve the pool tag name.  [Joe Orton]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/CHANGES"
                },
                "region": {
                  "startLine": 267,
                  "startColumn": 57,
                  "endLine": 267,
                  "endColumn": 64,
                  "snippet": {
                    "text": "  *) Hide apr_wait_for_io_or_timeout() from public view and add instead\n     apr_socket_wait() and apr_file_pipe_wait(). [Brian Havard]\n\n  *) Support connecttimeout, readtimeout and writetimeout MySQL options\n     PR 48251 [Marko Kevac <marko kevac.org>]\n\n  *) Transfer the apr-util spec file contents to apr.spec. [Graham\n",
                    "rendered": {
                      "text": "  *) Hide apr_wait_for_io_or_timeout() from public view and add instead\n     apr_socket_wait() and apr_file_pipe_wait(). [Brian Havard]\n\n  *) Support connecttimeout, readtimeout and writetimeout MySQL options\n     PR 48251 [Marko Kevac <marko kevac.org>]\n\n  *) Transfer the apr-util spec file contents to apr.spec. [Graham\n",
                      "markdown": "`  *) Hide apr_wait_for_io_or_timeout() from public view and add instead\n     apr_socket_wait() and apr_file_pipe_wait(). [Brian Havard]\n\n  *) Support connecttimeout, readtimeout and writetimeout MySQL options\n     PR 48251 [Marko Kevac <marko kevac.org>]\n\n  *) Transfer the apr-util spec file contents to apr.spec. [Graham\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/CHANGES"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 64,
                  "endLine": 86,
                  "snippet": {
                    "text": "     modules) and from unrelated pools (usually seen in unit tests).\n     [Graham Leggett]\n\n  *) apr_crypto_openssl: use OPENSSL_init_crypto() to initialise OpenSSL\n     on versions 1.1+. [Graham Leggett]\n\n  *) Fixed: apr_get_oslevel() was returning APR_WIN_XP on Windows 10\n\n",
                    "rendered": {
                      "text": "     modules) and from unrelated pools (usually seen in unit tests).\n     [Graham Leggett]\n\n  *) apr_crypto_openssl: use OPENSSL_init_crypto() to initialise OpenSSL\n     on versions 1.1+. [Graham Leggett]\n\n  *) Fixed: apr_get_oslevel() was returning APR_WIN_XP on Windows 10\n\n",
                      "markdown": "`     modules) and from unrelated pools (usually seen in unit tests).\n     [Graham Leggett]\n\n  *) apr_crypto_openssl: use OPENSSL_init_crypto() to initialise OpenSSL\n     on versions 1.1+. [Graham Leggett]\n\n  *) Fixed: apr_get_oslevel() was returning APR_WIN_XP on Windows 10\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/CHANGES"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 20,
                  "endLine": 59,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n  *) Align apr_mmap()ing offset to a page boundary. [Yann Ylavic]\n\n  *) APR's configure script uses AC_TRY_RUN to detect whether the return type\n     of strerror_r is int. When cross-compiling this defaults to no.\n\n     This commit adds an AC_CACHE_CHECK so users who cross-compile APR may\n",
                    "rendered": {
                      "text": "\n  *) Align apr_mmap()ing offset to a page boundary. [Yann Ylavic]\n\n  *) APR's configure script uses AC_TRY_RUN to detect whether the return type\n     of strerror_r is int. When cross-compiling this defaults to no.\n\n     This commit adds an AC_CACHE_CHECK so users who cross-compile APR may\n",
                      "markdown": "`\n  *) Align apr_mmap()ing offset to a page boundary. [Yann Ylavic]\n\n  *) APR's configure script uses AC_TRY_RUN to detect whether the return type\n     of strerror_r is int. When cross-compiling this defaults to no.\n\n     This commit adds an AC_CACHE_CHECK so users who cross-compile APR may\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/CHANGES"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 43,
                  "endLine": 35,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n  *) New APR_THREAD_LOCAL and apr_thread_current*() API.  [Yann Ylavic]\n\n  *) apr_crypto_openssl: Compatibility with OpenSSL 3.  [Yann Ylavic]\n\n  *) apr-1-config: Fix crosscompiling detection in apr-1-config. PR 66510\n     [Ruediger Pluem]\n",
                    "rendered": {
                      "text": "\n  *) New APR_THREAD_LOCAL and apr_thread_current*() API.  [Yann Ylavic]\n\n  *) apr_crypto_openssl: Compatibility with OpenSSL 3.  [Yann Ylavic]\n\n  *) apr-1-config: Fix crosscompiling detection in apr-1-config. PR 66510\n     [Ruediger Pluem]\n",
                      "markdown": "`\n  *) New APR_THREAD_LOCAL and apr_thread_current*() API.  [Yann Ylavic]\n\n  *) apr_crypto_openssl: Compatibility with OpenSSL 3.  [Yann Ylavic]\n\n  *) apr-1-config: Fix crosscompiling detection in apr-1-config. PR 66510\n     [Ruediger Pluem]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/file_io/unix/mktemp.c"
                },
                "region": {
                  "startLine": 92,
                  "endLine": 92,
                  "endColumn": 64,
                  "snippet": {
                    "text": "#endif\n\nstatic const unsigned char padchar[] =\n\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\nstatic apr_uint32_t randseed=0;\n\nstatic int gettemp(char *path, apr_file_t **doopen, apr_int32_t flags, apr_pool_t *p)\n",
                    "rendered": {
                      "text": "#endif\n\nstatic const unsigned char padchar[] =\n\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\nstatic apr_uint32_t randseed=0;\n\nstatic int gettemp(char *path, apr_file_t **doopen, apr_int32_t flags, apr_pool_t *p)\n",
                      "markdown": "`#endif\n\nstatic const unsigned char padchar[] =\n\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\nstatic apr_uint32_t randseed=0;\n\nstatic int gettemp(char *path, apr_file_t **doopen, apr_int32_t flags, apr_pool_t *p)\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/file_io/netware/filestat.c"
                },
                "region": {
                  "startLine": 344,
                  "startColumn": 15,
                  "endLine": 344,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    else {\n#if !defined(ENOENT) || !defined(ENOTDIR)\n#error ENOENT || ENOTDIR not defined; please see the\n#error comments at this line in the source for a workaround.\n        /*\n         * If ENOENT || ENOTDIR is not defined in one of the your OS's\n         * include files, APR cannot report a good reason why the stat()\n",
                    "rendered": {
                      "text": "    else {\n#if !defined(ENOENT) || !defined(ENOTDIR)\n#error ENOENT || ENOTDIR not defined; please see the\n#error comments at this line in the source for a workaround.\n        /*\n         * If ENOENT || ENOTDIR is not defined in one of the your OS's\n         * include files, APR cannot report a good reason why the stat()\n",
                      "markdown": "`    else {\n#if !defined(ENOENT) || !defined(ENOTDIR)\n#error ENOENT || ENOTDIR not defined; please see the\n#error comments at this line in the source for a workaround.\n        /*\n         * If ENOENT || ENOTDIR is not defined in one of the your OS's\n         * include files, APR cannot report a good reason why the stat()\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testenv.c"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 13,
                  "endLine": 125,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    /** Finally, test ENOENT (first variable) followed by second != ENOENT) */\n    rv = apr_env_get(&value, TEST_ENVVAR_NAME, p);\n    ABTS_INT_EQUAL(tc, APR_ENOENT, rv);\n    rv = apr_env_get(&value, TEST_ENVVAR2_NAME, p);\n    APR_ASSERT_SUCCESS(tc, \"verify second environment variable\", rv);\n    ABTS_STR_EQUAL(tc, TEST_ENVVAR_VALUE, value);\n\n",
                    "rendered": {
                      "text": "    /** Finally, test ENOENT (first variable) followed by second != ENOENT) */\n    rv = apr_env_get(&value, TEST_ENVVAR_NAME, p);\n    ABTS_INT_EQUAL(tc, APR_ENOENT, rv);\n    rv = apr_env_get(&value, TEST_ENVVAR2_NAME, p);\n    APR_ASSERT_SUCCESS(tc, \"verify second environment variable\", rv);\n    ABTS_STR_EQUAL(tc, TEST_ENVVAR_VALUE, value);\n\n",
                      "markdown": "`    /** Finally, test ENOENT (first variable) followed by second != ENOENT) */\n    rv = apr_env_get(&value, TEST_ENVVAR_NAME, p);\n    ABTS_INT_EQUAL(tc, APR_ENOENT, rv);\n    rv = apr_env_get(&value, TEST_ENVVAR2_NAME, p);\n    APR_ASSERT_SUCCESS(tc, \"verify second environment variable\", rv);\n    ABTS_STR_EQUAL(tc, TEST_ENVVAR_VALUE, value);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testenv.c"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 13,
                  "endLine": 123,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    ABTS_STR_EQUAL(tc, TEST_ENVVAR_VALUE, value);\n\n    /** Finally, test ENOENT (first variable) followed by second != ENOENT) */\n    rv = apr_env_get(&value, TEST_ENVVAR_NAME, p);\n    ABTS_INT_EQUAL(tc, APR_ENOENT, rv);\n    rv = apr_env_get(&value, TEST_ENVVAR2_NAME, p);\n    APR_ASSERT_SUCCESS(tc, \"verify second environment variable\", rv);\n",
                    "rendered": {
                      "text": "    ABTS_STR_EQUAL(tc, TEST_ENVVAR_VALUE, value);\n\n    /** Finally, test ENOENT (first variable) followed by second != ENOENT) */\n    rv = apr_env_get(&value, TEST_ENVVAR_NAME, p);\n    ABTS_INT_EQUAL(tc, APR_ENOENT, rv);\n    rv = apr_env_get(&value, TEST_ENVVAR2_NAME, p);\n    APR_ASSERT_SUCCESS(tc, \"verify second environment variable\", rv);\n",
                      "markdown": "`    ABTS_STR_EQUAL(tc, TEST_ENVVAR_VALUE, value);\n\n    /** Finally, test ENOENT (first variable) followed by second != ENOENT) */\n    rv = apr_env_get(&value, TEST_ENVVAR_NAME, p);\n    ABTS_INT_EQUAL(tc, APR_ENOENT, rv);\n    rv = apr_env_get(&value, TEST_ENVVAR2_NAME, p);\n    APR_ASSERT_SUCCESS(tc, \"verify second environment variable\", rv);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testenv.c"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 13,
                  "endLine": 118,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    /** Set second variable + test*/\n    rv = apr_env_set(TEST_ENVVAR2_NAME, TEST_ENVVAR_VALUE, p);\n    APR_ASSERT_SUCCESS(tc, \"set second environment variable\", rv);\n    rv = apr_env_get(&value, TEST_ENVVAR2_NAME, p);\n    APR_ASSERT_SUCCESS(tc, \"get second environment variable\", rv);\n    ABTS_STR_EQUAL(tc, TEST_ENVVAR_VALUE, value);\n\n",
                    "rendered": {
                      "text": "    /** Set second variable + test*/\n    rv = apr_env_set(TEST_ENVVAR2_NAME, TEST_ENVVAR_VALUE, p);\n    APR_ASSERT_SUCCESS(tc, \"set second environment variable\", rv);\n    rv = apr_env_get(&value, TEST_ENVVAR2_NAME, p);\n    APR_ASSERT_SUCCESS(tc, \"get second environment variable\", rv);\n    ABTS_STR_EQUAL(tc, TEST_ENVVAR_VALUE, value);\n\n",
                      "markdown": "`    /** Set second variable + test*/\n    rv = apr_env_set(TEST_ENVVAR2_NAME, TEST_ENVVAR_VALUE, p);\n    APR_ASSERT_SUCCESS(tc, \"set second environment variable\", rv);\n    rv = apr_env_get(&value, TEST_ENVVAR2_NAME, p);\n    APR_ASSERT_SUCCESS(tc, \"get second environment variable\", rv);\n    ABTS_STR_EQUAL(tc, TEST_ENVVAR_VALUE, value);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testenv.c"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 13,
                  "endLine": 112,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    /** Delete and retest */\n    rv = apr_env_delete(TEST_ENVVAR_NAME, p);\n    APR_ASSERT_SUCCESS(tc, \"delete environment variable\", rv);\n    rv = apr_env_get(&value, TEST_ENVVAR_NAME, p);\n    ABTS_INT_EQUAL(tc, APR_ENOENT, rv);\n\n    /** Set second variable + test*/\n",
                    "rendered": {
                      "text": "    /** Delete and retest */\n    rv = apr_env_delete(TEST_ENVVAR_NAME, p);\n    APR_ASSERT_SUCCESS(tc, \"delete environment variable\", rv);\n    rv = apr_env_get(&value, TEST_ENVVAR_NAME, p);\n    ABTS_INT_EQUAL(tc, APR_ENOENT, rv);\n\n    /** Set second variable + test*/\n",
                      "markdown": "`    /** Delete and retest */\n    rv = apr_env_delete(TEST_ENVVAR_NAME, p);\n    APR_ASSERT_SUCCESS(tc, \"delete environment variable\", rv);\n    rv = apr_env_get(&value, TEST_ENVVAR_NAME, p);\n    ABTS_INT_EQUAL(tc, APR_ENOENT, rv);\n\n    /** Set second variable + test*/\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testenv.c"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 13,
                  "endLine": 101,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    /** Set empty string and test that rv != ENOENT) */\n    rv = apr_env_set(TEST_ENVVAR_NAME, \"\", p);\n    APR_ASSERT_SUCCESS(tc, \"set environment variable\", rv);\n    rv = apr_env_get(&value, TEST_ENVVAR_NAME, p);\n    APR_ASSERT_SUCCESS(tc, \"get environment variable\", rv);\n    ABTS_STR_EQUAL(tc, \"\", value);\n\n",
                    "rendered": {
                      "text": "    /** Set empty string and test that rv != ENOENT) */\n    rv = apr_env_set(TEST_ENVVAR_NAME, \"\", p);\n    APR_ASSERT_SUCCESS(tc, \"set environment variable\", rv);\n    rv = apr_env_get(&value, TEST_ENVVAR_NAME, p);\n    APR_ASSERT_SUCCESS(tc, \"get environment variable\", rv);\n    ABTS_STR_EQUAL(tc, \"\", value);\n\n",
                      "markdown": "`    /** Set empty string and test that rv != ENOENT) */\n    rv = apr_env_set(TEST_ENVVAR_NAME, \"\", p);\n    APR_ASSERT_SUCCESS(tc, \"set environment variable\", rv);\n    rv = apr_env_get(&value, TEST_ENVVAR_NAME, p);\n    APR_ASSERT_SUCCESS(tc, \"get environment variable\", rv);\n    ABTS_STR_EQUAL(tc, \"\", value);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testenv.c"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 15,
                  "endLine": 94,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    char *value;\n    apr_status_t rv;\n\n    if (!(have_env_set && have_env_get)) {\n        ABTS_NOT_IMPL(tc, \"apr_env_set (skip test_emptyenv)\");\n        return;\n    }\n",
                    "rendered": {
                      "text": "    char *value;\n    apr_status_t rv;\n\n    if (!(have_env_set && have_env_get)) {\n        ABTS_NOT_IMPL(tc, \"apr_env_set (skip test_emptyenv)\");\n        return;\n    }\n",
                      "markdown": "`    char *value;\n    apr_status_t rv;\n\n    if (!(have_env_set && have_env_get)) {\n        ABTS_NOT_IMPL(tc, \"apr_env_set (skip test_emptyenv)\");\n        return;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testenv.c"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 13,
                  "endLine": 84,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        ABTS_NOT_IMPL(tc, \"apr_env_get (skip sanity check for apr_env_delete)\");\n        return;\n    }\n    rv = apr_env_get(&value, TEST_ENVVAR_NAME, p);\n    ABTS_INT_EQUAL(tc, APR_ENOENT, rv);\n}\n\n",
                    "rendered": {
                      "text": "        ABTS_NOT_IMPL(tc, \"apr_env_get (skip sanity check for apr_env_delete)\");\n        return;\n    }\n    rv = apr_env_get(&value, TEST_ENVVAR_NAME, p);\n    ABTS_INT_EQUAL(tc, APR_ENOENT, rv);\n}\n\n",
                      "markdown": "`        ABTS_NOT_IMPL(tc, \"apr_env_get (skip sanity check for apr_env_delete)\");\n        return;\n    }\n    rv = apr_env_get(&value, TEST_ENVVAR_NAME, p);\n    ABTS_INT_EQUAL(tc, APR_ENOENT, rv);\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testenv.c"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 31,
                  "endLine": 81,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    APR_ASSERT_SUCCESS(tc, \"delete environment variable\", rv);\n\n    if (!have_env_get) {\n        ABTS_NOT_IMPL(tc, \"apr_env_get (skip sanity check for apr_env_delete)\");\n        return;\n    }\n    rv = apr_env_get(&value, TEST_ENVVAR_NAME, p);\n",
                    "rendered": {
                      "text": "    APR_ASSERT_SUCCESS(tc, \"delete environment variable\", rv);\n\n    if (!have_env_get) {\n        ABTS_NOT_IMPL(tc, \"apr_env_get (skip sanity check for apr_env_delete)\");\n        return;\n    }\n    rv = apr_env_get(&value, TEST_ENVVAR_NAME, p);\n",
                      "markdown": "`    APR_ASSERT_SUCCESS(tc, \"delete environment variable\", rv);\n\n    if (!have_env_get) {\n        ABTS_NOT_IMPL(tc, \"apr_env_get (skip sanity check for apr_env_delete)\");\n        return;\n    }\n    rv = apr_env_get(&value, TEST_ENVVAR_NAME, p);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testenv.c"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 14,
                  "endLine": 80,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    }\n    APR_ASSERT_SUCCESS(tc, \"delete environment variable\", rv);\n\n    if (!have_env_get) {\n        ABTS_NOT_IMPL(tc, \"apr_env_get (skip sanity check for apr_env_delete)\");\n        return;\n    }\n",
                    "rendered": {
                      "text": "    }\n    APR_ASSERT_SUCCESS(tc, \"delete environment variable\", rv);\n\n    if (!have_env_get) {\n        ABTS_NOT_IMPL(tc, \"apr_env_get (skip sanity check for apr_env_delete)\");\n        return;\n    }\n",
                      "markdown": "`    }\n    APR_ASSERT_SUCCESS(tc, \"delete environment variable\", rv);\n\n    if (!have_env_get) {\n        ABTS_NOT_IMPL(tc, \"apr_env_get (skip sanity check for apr_env_delete)\");\n        return;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testenv.c"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 31,
                  "endLine": 55,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    rv = apr_env_get(&value, TEST_ENVVAR_NAME, p);\n    have_env_get = (rv != APR_ENOTIMPL);\n    if (!have_env_get) {\n        ABTS_NOT_IMPL(tc, \"apr_env_get\");\n        return;\n    }\n    APR_ASSERT_SUCCESS(tc, \"get environment variable\", rv);\n",
                    "rendered": {
                      "text": "    rv = apr_env_get(&value, TEST_ENVVAR_NAME, p);\n    have_env_get = (rv != APR_ENOTIMPL);\n    if (!have_env_get) {\n        ABTS_NOT_IMPL(tc, \"apr_env_get\");\n        return;\n    }\n    APR_ASSERT_SUCCESS(tc, \"get environment variable\", rv);\n",
                      "markdown": "`    rv = apr_env_get(&value, TEST_ENVVAR_NAME, p);\n    have_env_get = (rv != APR_ENOTIMPL);\n    if (!have_env_get) {\n        ABTS_NOT_IMPL(tc, \"apr_env_get\");\n        return;\n    }\n    APR_ASSERT_SUCCESS(tc, \"get environment variable\", rv);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testenv.c"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 14,
                  "endLine": 54,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n    rv = apr_env_get(&value, TEST_ENVVAR_NAME, p);\n    have_env_get = (rv != APR_ENOTIMPL);\n    if (!have_env_get) {\n        ABTS_NOT_IMPL(tc, \"apr_env_get\");\n        return;\n    }\n",
                    "rendered": {
                      "text": "\n    rv = apr_env_get(&value, TEST_ENVVAR_NAME, p);\n    have_env_get = (rv != APR_ENOTIMPL);\n    if (!have_env_get) {\n        ABTS_NOT_IMPL(tc, \"apr_env_get\");\n        return;\n    }\n",
                      "markdown": "`\n    rv = apr_env_get(&value, TEST_ENVVAR_NAME, p);\n    have_env_get = (rv != APR_ENOTIMPL);\n    if (!have_env_get) {\n        ABTS_NOT_IMPL(tc, \"apr_env_get\");\n        return;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testenv.c"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 9,
                  "endLine": 53,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    }\n\n    rv = apr_env_get(&value, TEST_ENVVAR_NAME, p);\n    have_env_get = (rv != APR_ENOTIMPL);\n    if (!have_env_get) {\n        ABTS_NOT_IMPL(tc, \"apr_env_get\");\n        return;\n",
                    "rendered": {
                      "text": "    }\n\n    rv = apr_env_get(&value, TEST_ENVVAR_NAME, p);\n    have_env_get = (rv != APR_ENOTIMPL);\n    if (!have_env_get) {\n        ABTS_NOT_IMPL(tc, \"apr_env_get\");\n        return;\n",
                      "markdown": "`    }\n\n    rv = apr_env_get(&value, TEST_ENVVAR_NAME, p);\n    have_env_get = (rv != APR_ENOTIMPL);\n    if (!have_env_get) {\n        ABTS_NOT_IMPL(tc, \"apr_env_get\");\n        return;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testenv.c"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 13,
                  "endLine": 52,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        return;\n    }\n\n    rv = apr_env_get(&value, TEST_ENVVAR_NAME, p);\n    have_env_get = (rv != APR_ENOTIMPL);\n    if (!have_env_get) {\n        ABTS_NOT_IMPL(tc, \"apr_env_get\");\n",
                    "rendered": {
                      "text": "        return;\n    }\n\n    rv = apr_env_get(&value, TEST_ENVVAR_NAME, p);\n    have_env_get = (rv != APR_ENOTIMPL);\n    if (!have_env_get) {\n        ABTS_NOT_IMPL(tc, \"apr_env_get\");\n",
                      "markdown": "`        return;\n    }\n\n    rv = apr_env_get(&value, TEST_ENVVAR_NAME, p);\n    have_env_get = (rv != APR_ENOTIMPL);\n    if (!have_env_get) {\n        ABTS_NOT_IMPL(tc, \"apr_env_get\");\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testenv.c"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 31,
                  "endLine": 48,
                  "endColumn": 65,
                  "snippet": {
                    "text": "    apr_status_t rv;\n\n    if (!have_env_set) {\n        ABTS_NOT_IMPL(tc, \"apr_env_set (skip test for apr_env_get)\");\n        return;\n    }\n\n",
                    "rendered": {
                      "text": "    apr_status_t rv;\n\n    if (!have_env_set) {\n        ABTS_NOT_IMPL(tc, \"apr_env_set (skip test for apr_env_get)\");\n        return;\n    }\n\n",
                      "markdown": "`    apr_status_t rv;\n\n    if (!have_env_set) {\n        ABTS_NOT_IMPL(tc, \"apr_env_set (skip test for apr_env_get)\");\n        return;\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testenv.c"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 16,
                  "endLine": 26,
                  "endColumn": 23,
                  "snippet": {
                    "text": "#define TEST_ENVVAR_VALUE \"Just a value that we'll check\"\n\nstatic int have_env_set;\nstatic int have_env_get;\nstatic int have_env_del;\n\nstatic void test_setenv(abts_case *tc, void *data)\n",
                    "rendered": {
                      "text": "#define TEST_ENVVAR_VALUE \"Just a value that we'll check\"\n\nstatic int have_env_set;\nstatic int have_env_get;\nstatic int have_env_del;\n\nstatic void test_setenv(abts_case *tc, void *data)\n",
                      "markdown": "`#define TEST_ENVVAR_VALUE \"Just a value that we'll check\"\n\nstatic int have_env_set;\nstatic int have_env_get;\nstatic int have_env_del;\n\nstatic void test_setenv(abts_case *tc, void *data)\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/NWGNUechod"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 25,
                  "endLine": 114,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n#\n# If this is specified, it will override VERSION value in \n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                    "rendered": {
                      "text": "\n#\n# If this is specified, it will override VERSION value in \n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                      "markdown": "`\n#\n# If this is specified, it will override VERSION value in \n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/NWGNUechod"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 30,
                  "endLine": 6,
                  "endColumn": 65,
                  "snippet": {
                    "text": "#\n\n#\n# Get the 'head' of the build environment if necessary.  This includes default\n# targets and paths to tools\n#\n\n",
                    "rendered": {
                      "text": "#\n\n#\n# Get the 'head' of the build environment if necessary.  This includes default\n# targets and paths to tools\n#\n\n",
                      "markdown": "`#\n\n#\n# Get the 'head' of the build environment if necessary.  This includes default\n# targets and paths to tools\n#\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/NWGNUechod"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 27,
                  "endLine": 15,
                  "endColumn": 31,
                  "snippet": {
                    "text": "endif\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                    "rendered": {
                      "text": "endif\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                      "markdown": "`endif\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testredis.c"
                },
                "region": {
                  "startLine": 440,
                  "startColumn": 3,
                  "endLine": 440,
                  "endColumn": 11,
                  "snippet": {
                    "text": "    rv = apr_redis_getp(redis, pool, prefix, &result, &len, NULL);\n    ABTS_ASSERT(tc, \"get failed\", rv == APR_SUCCESS);\n\n    expect = i + atoi(result);\n\n    rv = apr_redis_incr(redis, prefix, i, &new);\n    ABTS_ASSERT(tc, \"incr failed\", rv == APR_SUCCESS);\n",
                    "rendered": {
                      "text": "    rv = apr_redis_getp(redis, pool, prefix, &result, &len, NULL);\n    ABTS_ASSERT(tc, \"get failed\", rv == APR_SUCCESS);\n\n    expect = i + atoi(result);\n\n    rv = apr_redis_incr(redis, prefix, i, &new);\n    ABTS_ASSERT(tc, \"incr failed\", rv == APR_SUCCESS);\n",
                      "markdown": "`    rv = apr_redis_getp(redis, pool, prefix, &result, &len, NULL);\n    ABTS_ASSERT(tc, \"get failed\", rv == APR_SUCCESS);\n\n    expect = i + atoi(result);\n\n    rv = apr_redis_incr(redis, prefix, i, &new);\n    ABTS_ASSERT(tc, \"incr failed\", rv == APR_SUCCESS);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpipe.c"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 56,
                  "endLine": 213,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    ABTS_INT_EQUAL(tc, 1, APR_STATUS_IS_TIMEUP(rv));\n\n    end_time = apr_time_now();\n    ABTS_ASSERT(tc, \"apr_file_pipe_wait() waited for the time out\", end_time - start_time >= delay);\n\n    nbytes = 4;\n    rv = apr_file_write(writep, \"data\", &nbytes);\n",
                    "rendered": {
                      "text": "    ABTS_INT_EQUAL(tc, 1, APR_STATUS_IS_TIMEUP(rv));\n\n    end_time = apr_time_now();\n    ABTS_ASSERT(tc, \"apr_file_pipe_wait() waited for the time out\", end_time - start_time >= delay);\n\n    nbytes = 4;\n    rv = apr_file_write(writep, \"data\", &nbytes);\n",
                      "markdown": "`    ABTS_INT_EQUAL(tc, 1, APR_STATUS_IS_TIMEUP(rv));\n\n    end_time = apr_time_now();\n    ABTS_ASSERT(tc, \"apr_file_pipe_wait() waited for the time out\", end_time - start_time >= delay);\n\n    nbytes = 4;\n    rv = apr_file_write(writep, \"data\", &nbytes);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpipe.c"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 9,
                  "endLine": 74,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    rv = apr_file_pipe_timeout_get(readp, &timeout);\n    ABTS_INT_EQUAL(tc, APR_SUCCESS, rv);\n    ABTS_ASSERT(tc, \"Timeout mismatch, expected 1 second\",\n\t\t        timeout == apr_time_from_sec(1));\n}\n\nstatic void read_write(abts_case *tc, void *data)\n",
                    "rendered": {
                      "text": "    rv = apr_file_pipe_timeout_get(readp, &timeout);\n    ABTS_INT_EQUAL(tc, APR_SUCCESS, rv);\n    ABTS_ASSERT(tc, \"Timeout mismatch, expected 1 second\",\n\t\t        timeout == apr_time_from_sec(1));\n}\n\nstatic void read_write(abts_case *tc, void *data)\n",
                      "markdown": "`    rv = apr_file_pipe_timeout_get(readp, &timeout);\n    ABTS_INT_EQUAL(tc, APR_SUCCESS, rv);\n    ABTS_ASSERT(tc, \"Timeout mismatch, expected 1 second\",\n\t\t        timeout == apr_time_from_sec(1));\n}\n\nstatic void read_write(abts_case *tc, void *data)\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpipe.c"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 52,
                  "endLine": 66,
                  "endColumn": 61,
                  "snippet": {
                    "text": "\n    rv = apr_file_pipe_timeout_get(writep, &timeout);\n    ABTS_INT_EQUAL(tc, APR_SUCCESS, rv);\n    ABTS_ASSERT(tc, \"Timeout mismatch, expected -1\", timeout == -1);\n\n    rv = apr_file_pipe_timeout_set(readp, apr_time_from_sec(1));\n    ABTS_INT_EQUAL(tc, APR_SUCCESS, rv);\n",
                    "rendered": {
                      "text": "\n    rv = apr_file_pipe_timeout_get(writep, &timeout);\n    ABTS_INT_EQUAL(tc, APR_SUCCESS, rv);\n    ABTS_ASSERT(tc, \"Timeout mismatch, expected -1\", timeout == -1);\n\n    rv = apr_file_pipe_timeout_set(readp, apr_time_from_sec(1));\n    ABTS_INT_EQUAL(tc, APR_SUCCESS, rv);\n",
                      "markdown": "`\n    rv = apr_file_pipe_timeout_get(writep, &timeout);\n    ABTS_INT_EQUAL(tc, APR_SUCCESS, rv);\n    ABTS_ASSERT(tc, \"Timeout mismatch, expected -1\", timeout == -1);\n\n    rv = apr_file_pipe_timeout_set(readp, apr_time_from_sec(1));\n    ABTS_INT_EQUAL(tc, APR_SUCCESS, rv);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testsock.c"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 46,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "            }\n            else {\n                ABTS_PTR_EQUAL(tc, NULL, sa1->hostname);\n                ABTS_PTR_EQUAL(tc, NULL, sa2->hostname);\n            }\n\n        } while ((sa2 = sa2->next, sa1 = sa1->next));\n",
                    "rendered": {
                      "text": "            }\n            else {\n                ABTS_PTR_EQUAL(tc, NULL, sa1->hostname);\n                ABTS_PTR_EQUAL(tc, NULL, sa2->hostname);\n            }\n\n        } while ((sa2 = sa2->next, sa1 = sa1->next));\n",
                      "markdown": "`            }\n            else {\n                ABTS_PTR_EQUAL(tc, NULL, sa1->hostname);\n                ABTS_PTR_EQUAL(tc, NULL, sa2->hostname);\n            }\n\n        } while ((sa2 = sa2->next, sa1 = sa1->next));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testsock.c"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 46,
                  "endLine": 140,
                  "endColumn": 54,
                  "snippet": {
                    "text": "                ABTS_TRUE(tc, sa1->hostname != sa2->hostname);\n            }\n            else {\n                ABTS_PTR_EQUAL(tc, NULL, sa1->hostname);\n                ABTS_PTR_EQUAL(tc, NULL, sa2->hostname);\n            }\n\n",
                    "rendered": {
                      "text": "                ABTS_TRUE(tc, sa1->hostname != sa2->hostname);\n            }\n            else {\n                ABTS_PTR_EQUAL(tc, NULL, sa1->hostname);\n                ABTS_PTR_EQUAL(tc, NULL, sa2->hostname);\n            }\n\n",
                      "markdown": "`                ABTS_TRUE(tc, sa1->hostname != sa2->hostname);\n            }\n            else {\n                ABTS_PTR_EQUAL(tc, NULL, sa1->hostname);\n                ABTS_PTR_EQUAL(tc, NULL, sa2->hostname);\n            }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testsock.c"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 52,
                  "endLine": 137,
                  "endColumn": 60,
                  "snippet": {
                    "text": "                ABTS_PTR_NOTNULL(tc, sa2->hostname);\n                ABTS_STR_EQUAL(tc, *host, sa1->hostname);\n                ABTS_STR_EQUAL(tc, sa1->hostname, sa2->hostname);\n                ABTS_TRUE(tc, sa1->hostname != sa2->hostname);\n            }\n            else {\n                ABTS_PTR_EQUAL(tc, NULL, sa1->hostname);\n",
                    "rendered": {
                      "text": "                ABTS_PTR_NOTNULL(tc, sa2->hostname);\n                ABTS_STR_EQUAL(tc, *host, sa1->hostname);\n                ABTS_STR_EQUAL(tc, sa1->hostname, sa2->hostname);\n                ABTS_TRUE(tc, sa1->hostname != sa2->hostname);\n            }\n            else {\n                ABTS_PTR_EQUAL(tc, NULL, sa1->hostname);\n",
                      "markdown": "`                ABTS_PTR_NOTNULL(tc, sa2->hostname);\n                ABTS_STR_EQUAL(tc, *host, sa1->hostname);\n                ABTS_STR_EQUAL(tc, sa1->hostname, sa2->hostname);\n                ABTS_TRUE(tc, sa1->hostname != sa2->hostname);\n            }\n            else {\n                ABTS_PTR_EQUAL(tc, NULL, sa1->hostname);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testsock.c"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 35,
                  "endLine": 137,
                  "endColumn": 43,
                  "snippet": {
                    "text": "                ABTS_PTR_NOTNULL(tc, sa2->hostname);\n                ABTS_STR_EQUAL(tc, *host, sa1->hostname);\n                ABTS_STR_EQUAL(tc, sa1->hostname, sa2->hostname);\n                ABTS_TRUE(tc, sa1->hostname != sa2->hostname);\n            }\n            else {\n                ABTS_PTR_EQUAL(tc, NULL, sa1->hostname);\n",
                    "rendered": {
                      "text": "                ABTS_PTR_NOTNULL(tc, sa2->hostname);\n                ABTS_STR_EQUAL(tc, *host, sa1->hostname);\n                ABTS_STR_EQUAL(tc, sa1->hostname, sa2->hostname);\n                ABTS_TRUE(tc, sa1->hostname != sa2->hostname);\n            }\n            else {\n                ABTS_PTR_EQUAL(tc, NULL, sa1->hostname);\n",
                      "markdown": "`                ABTS_PTR_NOTNULL(tc, sa2->hostname);\n                ABTS_STR_EQUAL(tc, *host, sa1->hostname);\n                ABTS_STR_EQUAL(tc, sa1->hostname, sa2->hostname);\n                ABTS_TRUE(tc, sa1->hostname != sa2->hostname);\n            }\n            else {\n                ABTS_PTR_EQUAL(tc, NULL, sa1->hostname);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testsock.c"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 55,
                  "endLine": 136,
                  "endColumn": 63,
                  "snippet": {
                    "text": "                ABTS_PTR_NOTNULL(tc, sa1->hostname);\n                ABTS_PTR_NOTNULL(tc, sa2->hostname);\n                ABTS_STR_EQUAL(tc, *host, sa1->hostname);\n                ABTS_STR_EQUAL(tc, sa1->hostname, sa2->hostname);\n                ABTS_TRUE(tc, sa1->hostname != sa2->hostname);\n            }\n            else {\n",
                    "rendered": {
                      "text": "                ABTS_PTR_NOTNULL(tc, sa1->hostname);\n                ABTS_PTR_NOTNULL(tc, sa2->hostname);\n                ABTS_STR_EQUAL(tc, *host, sa1->hostname);\n                ABTS_STR_EQUAL(tc, sa1->hostname, sa2->hostname);\n                ABTS_TRUE(tc, sa1->hostname != sa2->hostname);\n            }\n            else {\n",
                      "markdown": "`                ABTS_PTR_NOTNULL(tc, sa1->hostname);\n                ABTS_PTR_NOTNULL(tc, sa2->hostname);\n                ABTS_STR_EQUAL(tc, *host, sa1->hostname);\n                ABTS_STR_EQUAL(tc, sa1->hostname, sa2->hostname);\n                ABTS_TRUE(tc, sa1->hostname != sa2->hostname);\n            }\n            else {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testsock.c"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 40,
                  "endLine": 136,
                  "endColumn": 48,
                  "snippet": {
                    "text": "                ABTS_PTR_NOTNULL(tc, sa1->hostname);\n                ABTS_PTR_NOTNULL(tc, sa2->hostname);\n                ABTS_STR_EQUAL(tc, *host, sa1->hostname);\n                ABTS_STR_EQUAL(tc, sa1->hostname, sa2->hostname);\n                ABTS_TRUE(tc, sa1->hostname != sa2->hostname);\n            }\n            else {\n",
                    "rendered": {
                      "text": "                ABTS_PTR_NOTNULL(tc, sa1->hostname);\n                ABTS_PTR_NOTNULL(tc, sa2->hostname);\n                ABTS_STR_EQUAL(tc, *host, sa1->hostname);\n                ABTS_STR_EQUAL(tc, sa1->hostname, sa2->hostname);\n                ABTS_TRUE(tc, sa1->hostname != sa2->hostname);\n            }\n            else {\n",
                      "markdown": "`                ABTS_PTR_NOTNULL(tc, sa1->hostname);\n                ABTS_PTR_NOTNULL(tc, sa2->hostname);\n                ABTS_STR_EQUAL(tc, *host, sa1->hostname);\n                ABTS_STR_EQUAL(tc, sa1->hostname, sa2->hostname);\n                ABTS_TRUE(tc, sa1->hostname != sa2->hostname);\n            }\n            else {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testsock.c"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 47,
                  "endLine": 135,
                  "endColumn": 55,
                  "snippet": {
                    "text": "            if (*host) {\n                ABTS_PTR_NOTNULL(tc, sa1->hostname);\n                ABTS_PTR_NOTNULL(tc, sa2->hostname);\n                ABTS_STR_EQUAL(tc, *host, sa1->hostname);\n                ABTS_STR_EQUAL(tc, sa1->hostname, sa2->hostname);\n                ABTS_TRUE(tc, sa1->hostname != sa2->hostname);\n            }\n",
                    "rendered": {
                      "text": "            if (*host) {\n                ABTS_PTR_NOTNULL(tc, sa1->hostname);\n                ABTS_PTR_NOTNULL(tc, sa2->hostname);\n                ABTS_STR_EQUAL(tc, *host, sa1->hostname);\n                ABTS_STR_EQUAL(tc, sa1->hostname, sa2->hostname);\n                ABTS_TRUE(tc, sa1->hostname != sa2->hostname);\n            }\n",
                      "markdown": "`            if (*host) {\n                ABTS_PTR_NOTNULL(tc, sa1->hostname);\n                ABTS_PTR_NOTNULL(tc, sa2->hostname);\n                ABTS_STR_EQUAL(tc, *host, sa1->hostname);\n                ABTS_STR_EQUAL(tc, sa1->hostname, sa2->hostname);\n                ABTS_TRUE(tc, sa1->hostname != sa2->hostname);\n            }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testsock.c"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 42,
                  "endLine": 134,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\n            if (*host) {\n                ABTS_PTR_NOTNULL(tc, sa1->hostname);\n                ABTS_PTR_NOTNULL(tc, sa2->hostname);\n                ABTS_STR_EQUAL(tc, *host, sa1->hostname);\n                ABTS_STR_EQUAL(tc, sa1->hostname, sa2->hostname);\n                ABTS_TRUE(tc, sa1->hostname != sa2->hostname);\n",
                    "rendered": {
                      "text": "\n            if (*host) {\n                ABTS_PTR_NOTNULL(tc, sa1->hostname);\n                ABTS_PTR_NOTNULL(tc, sa2->hostname);\n                ABTS_STR_EQUAL(tc, *host, sa1->hostname);\n                ABTS_STR_EQUAL(tc, sa1->hostname, sa2->hostname);\n                ABTS_TRUE(tc, sa1->hostname != sa2->hostname);\n",
                      "markdown": "`\n            if (*host) {\n                ABTS_PTR_NOTNULL(tc, sa1->hostname);\n                ABTS_PTR_NOTNULL(tc, sa2->hostname);\n                ABTS_STR_EQUAL(tc, *host, sa1->hostname);\n                ABTS_STR_EQUAL(tc, sa1->hostname, sa2->hostname);\n                ABTS_TRUE(tc, sa1->hostname != sa2->hostname);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testsock.c"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 42,
                  "endLine": 133,
                  "endColumn": 50,
                  "snippet": {
                    "text": "            ABTS_INT_EQUAL(tc, ntohs(sa2->sa.sin.sin_port), ntohs(sa1->sa.sin.sin_port));\n\n            if (*host) {\n                ABTS_PTR_NOTNULL(tc, sa1->hostname);\n                ABTS_PTR_NOTNULL(tc, sa2->hostname);\n                ABTS_STR_EQUAL(tc, *host, sa1->hostname);\n                ABTS_STR_EQUAL(tc, sa1->hostname, sa2->hostname);\n",
                    "rendered": {
                      "text": "            ABTS_INT_EQUAL(tc, ntohs(sa2->sa.sin.sin_port), ntohs(sa1->sa.sin.sin_port));\n\n            if (*host) {\n                ABTS_PTR_NOTNULL(tc, sa1->hostname);\n                ABTS_PTR_NOTNULL(tc, sa2->hostname);\n                ABTS_STR_EQUAL(tc, *host, sa1->hostname);\n                ABTS_STR_EQUAL(tc, sa1->hostname, sa2->hostname);\n",
                      "markdown": "`            ABTS_INT_EQUAL(tc, ntohs(sa2->sa.sin.sin_port), ntohs(sa1->sa.sin.sin_port));\n\n            if (*host) {\n                ABTS_PTR_NOTNULL(tc, sa1->hostname);\n                ABTS_PTR_NOTNULL(tc, sa2->hostname);\n                ABTS_STR_EQUAL(tc, *host, sa1->hostname);\n                ABTS_STR_EQUAL(tc, sa1->hostname, sa2->hostname);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testsock.c"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 40,
                  "endLine": 95,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\n    rv = apr_sockaddr_info_get(&sa, \"127.0.0.1\", APR_UNSPEC, 0, 0, p);\n    APR_ASSERT_SUCCESS(tc, \"Problem generating sockaddr\", rv);\n    ABTS_STR_EQUAL(tc, \"127.0.0.1\", sa->hostname);\n    ABTS_INT_EQUAL(tc, 0, sa->port);\n    ABTS_INT_EQUAL(tc, 0, ntohs(sa->sa.sin.sin_port));\n}\n",
                    "rendered": {
                      "text": "\n    rv = apr_sockaddr_info_get(&sa, \"127.0.0.1\", APR_UNSPEC, 0, 0, p);\n    APR_ASSERT_SUCCESS(tc, \"Problem generating sockaddr\", rv);\n    ABTS_STR_EQUAL(tc, \"127.0.0.1\", sa->hostname);\n    ABTS_INT_EQUAL(tc, 0, sa->port);\n    ABTS_INT_EQUAL(tc, 0, ntohs(sa->sa.sin.sin_port));\n}\n",
                      "markdown": "`\n    rv = apr_sockaddr_info_get(&sa, \"127.0.0.1\", APR_UNSPEC, 0, 0, p);\n    APR_ASSERT_SUCCESS(tc, \"Problem generating sockaddr\", rv);\n    ABTS_STR_EQUAL(tc, \"127.0.0.1\", sa->hostname);\n    ABTS_INT_EQUAL(tc, 0, sa->port);\n    ABTS_INT_EQUAL(tc, 0, ntohs(sa->sa.sin.sin_port));\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testsock.c"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 40,
                  "endLine": 88,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\n    rv = apr_sockaddr_info_get(&sa, \"127.0.0.1\", APR_UNSPEC, 80, 0, p);\n    APR_ASSERT_SUCCESS(tc, \"Problem generating sockaddr\", rv);\n    ABTS_STR_EQUAL(tc, \"127.0.0.1\", sa->hostname);\n\n    rc = apr_sockaddr_is_wildcard(sa);\n    ABTS_INT_EQUAL(tc, 0, rc);\n",
                    "rendered": {
                      "text": "\n    rv = apr_sockaddr_info_get(&sa, \"127.0.0.1\", APR_UNSPEC, 80, 0, p);\n    APR_ASSERT_SUCCESS(tc, \"Problem generating sockaddr\", rv);\n    ABTS_STR_EQUAL(tc, \"127.0.0.1\", sa->hostname);\n\n    rc = apr_sockaddr_is_wildcard(sa);\n    ABTS_INT_EQUAL(tc, 0, rc);\n",
                      "markdown": "`\n    rv = apr_sockaddr_info_get(&sa, \"127.0.0.1\", APR_UNSPEC, 80, 0, p);\n    APR_ASSERT_SUCCESS(tc, \"Problem generating sockaddr\", rv);\n    ABTS_STR_EQUAL(tc, \"127.0.0.1\", sa->hostname);\n\n    rc = apr_sockaddr_is_wildcard(sa);\n    ABTS_INT_EQUAL(tc, 0, rc);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testsock.c"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 49,
                  "endLine": 321,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    if (!atreadeof) { /* ... but perhaps not yet; wait a moment */\n        apr_sleep(apr_time_from_msec(5));\n        rv = apr_socket_atreadeof(sock2, &atreadeof);\n        APR_ASSERT_SUCCESS(tc, \"Determine whether at EOF, #4\", rv);\n    }\n    ABTS_INT_EQUAL(tc, 1, atreadeof);\n    wait_child(tc, &proc);\n",
                    "rendered": {
                      "text": "    if (!atreadeof) { /* ... but perhaps not yet; wait a moment */\n        apr_sleep(apr_time_from_msec(5));\n        rv = apr_socket_atreadeof(sock2, &atreadeof);\n        APR_ASSERT_SUCCESS(tc, \"Determine whether at EOF, #4\", rv);\n    }\n    ABTS_INT_EQUAL(tc, 1, atreadeof);\n    wait_child(tc, &proc);\n",
                      "markdown": "`    if (!atreadeof) { /* ... but perhaps not yet; wait a moment */\n        apr_sleep(apr_time_from_msec(5));\n        rv = apr_socket_atreadeof(sock2, &atreadeof);\n        APR_ASSERT_SUCCESS(tc, \"Determine whether at EOF, #4\", rv);\n    }\n    ABTS_INT_EQUAL(tc, 1, atreadeof);\n    wait_child(tc, &proc);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testsock.c"
                },
                "region": {
                  "startLine": 317,
                  "startColumn": 45,
                  "endLine": 317,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\n    /* The child closed the socket as soon as it could... */\n    rv = apr_socket_atreadeof(sock2, &atreadeof);\n    APR_ASSERT_SUCCESS(tc, \"Determine whether at EOF, #3\", rv);\n    if (!atreadeof) { /* ... but perhaps not yet; wait a moment */\n        apr_sleep(apr_time_from_msec(5));\n        rv = apr_socket_atreadeof(sock2, &atreadeof);\n",
                    "rendered": {
                      "text": "\n    /* The child closed the socket as soon as it could... */\n    rv = apr_socket_atreadeof(sock2, &atreadeof);\n    APR_ASSERT_SUCCESS(tc, \"Determine whether at EOF, #3\", rv);\n    if (!atreadeof) { /* ... but perhaps not yet; wait a moment */\n        apr_sleep(apr_time_from_msec(5));\n        rv = apr_socket_atreadeof(sock2, &atreadeof);\n",
                      "markdown": "`\n    /* The child closed the socket as soon as it could... */\n    rv = apr_socket_atreadeof(sock2, &atreadeof);\n    APR_ASSERT_SUCCESS(tc, \"Determine whether at EOF, #3\", rv);\n    if (!atreadeof) { /* ... but perhaps not yet; wait a moment */\n        apr_sleep(apr_time_from_msec(5));\n        rv = apr_socket_atreadeof(sock2, &atreadeof);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testsock.c"
                },
                "region": {
                  "startLine": 304,
                  "startColumn": 45,
                  "endLine": 304,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\n    /* The child is dead, so should be the remote socket */\n    rv = apr_socket_atreadeof(sock2, &atreadeof);\n    APR_ASSERT_SUCCESS(tc, \"Determine whether at EOF, #2\", rv);\n    ABTS_INT_EQUAL(tc, 1, atreadeof);\n\n    rv = apr_socket_close(sock2);\n",
                    "rendered": {
                      "text": "\n    /* The child is dead, so should be the remote socket */\n    rv = apr_socket_atreadeof(sock2, &atreadeof);\n    APR_ASSERT_SUCCESS(tc, \"Determine whether at EOF, #2\", rv);\n    ABTS_INT_EQUAL(tc, 1, atreadeof);\n\n    rv = apr_socket_close(sock2);\n",
                      "markdown": "`\n    /* The child is dead, so should be the remote socket */\n    rv = apr_socket_atreadeof(sock2, &atreadeof);\n    APR_ASSERT_SUCCESS(tc, \"Determine whether at EOF, #2\", rv);\n    ABTS_INT_EQUAL(tc, 1, atreadeof);\n\n    rv = apr_socket_close(sock2);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testsock.c"
                },
                "region": {
                  "startLine": 292,
                  "startColumn": 45,
                  "endLine": 292,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\n    /* Check that the remote socket is still open */\n    rv = apr_socket_atreadeof(sock2, &atreadeof);\n    APR_ASSERT_SUCCESS(tc, \"Determine whether at EOF, #1\", rv);\n    ABTS_INT_EQUAL(tc, 0, atreadeof);\n\n    memset(datastr, 0, STRLEN);\n",
                    "rendered": {
                      "text": "\n    /* Check that the remote socket is still open */\n    rv = apr_socket_atreadeof(sock2, &atreadeof);\n    APR_ASSERT_SUCCESS(tc, \"Determine whether at EOF, #1\", rv);\n    ABTS_INT_EQUAL(tc, 0, atreadeof);\n\n    memset(datastr, 0, STRLEN);\n",
                      "markdown": "`\n    /* Check that the remote socket is still open */\n    rv = apr_socket_atreadeof(sock2, &atreadeof);\n    APR_ASSERT_SUCCESS(tc, \"Determine whether at EOF, #1\", rv);\n    ABTS_INT_EQUAL(tc, 0, atreadeof);\n\n    memset(datastr, 0, STRLEN);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testsock.c"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 43,
                  "endLine": 159,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    APR_ASSERT_SUCCESS(tc, \"Problem generating sockaddr\", rv);\n\n    rv = apr_getservbyname(sa, \"ftp\");\n    APR_ASSERT_SUCCESS(tc, \"Problem getting ftp service\", rv);\n    ABTS_INT_EQUAL(tc, 21, sa->port);\n\n    rv = apr_getservbyname(sa, \"complete_and_utter_rubbish\");\n",
                    "rendered": {
                      "text": "    APR_ASSERT_SUCCESS(tc, \"Problem generating sockaddr\", rv);\n\n    rv = apr_getservbyname(sa, \"ftp\");\n    APR_ASSERT_SUCCESS(tc, \"Problem getting ftp service\", rv);\n    ABTS_INT_EQUAL(tc, 21, sa->port);\n\n    rv = apr_getservbyname(sa, \"complete_and_utter_rubbish\");\n",
                      "markdown": "`    APR_ASSERT_SUCCESS(tc, \"Problem generating sockaddr\", rv);\n\n    rv = apr_getservbyname(sa, \"ftp\");\n    APR_ASSERT_SUCCESS(tc, \"Problem getting ftp service\", rv);\n    ABTS_INT_EQUAL(tc, 21, sa->port);\n\n    rv = apr_getservbyname(sa, \"complete_and_utter_rubbish\");\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testsock.c"
                },
                "region": {
                  "startLine": 708,
                  "startColumn": 35,
                  "endLine": 708,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        ABTS_INT_EQUAL(tc, APR_ENOSPC, apr_sockaddr_ip_getbuf(buf, strlen(TEST_ZONE_ADDR), sa));\n        ABTS_INT_EQUAL(tc, APR_ENOSPC, apr_sockaddr_ip_getbuf(buf, strlen(TEST_ZONE_FULLADDR), sa));\n\n        APR_ASSERT_SUCCESS(tc, \"get IP address\",\n                           apr_sockaddr_ip_getbuf(buf, strlen(TEST_ZONE_FULLADDR) + 1, sa));\n        /* Check for overflow. */\n        ABTS_INT_EQUAL(tc, 'A', buf[strlen(buf) + 1]);\n",
                    "rendered": {
                      "text": "        ABTS_INT_EQUAL(tc, APR_ENOSPC, apr_sockaddr_ip_getbuf(buf, strlen(TEST_ZONE_ADDR), sa));\n        ABTS_INT_EQUAL(tc, APR_ENOSPC, apr_sockaddr_ip_getbuf(buf, strlen(TEST_ZONE_FULLADDR), sa));\n\n        APR_ASSERT_SUCCESS(tc, \"get IP address\",\n                           apr_sockaddr_ip_getbuf(buf, strlen(TEST_ZONE_FULLADDR) + 1, sa));\n        /* Check for overflow. */\n        ABTS_INT_EQUAL(tc, 'A', buf[strlen(buf) + 1]);\n",
                      "markdown": "`        ABTS_INT_EQUAL(tc, APR_ENOSPC, apr_sockaddr_ip_getbuf(buf, strlen(TEST_ZONE_ADDR), sa));\n        ABTS_INT_EQUAL(tc, APR_ENOSPC, apr_sockaddr_ip_getbuf(buf, strlen(TEST_ZONE_FULLADDR), sa));\n\n        APR_ASSERT_SUCCESS(tc, \"get IP address\",\n                           apr_sockaddr_ip_getbuf(buf, strlen(TEST_ZONE_FULLADDR) + 1, sa));\n        /* Check for overflow. */\n        ABTS_INT_EQUAL(tc, 'A', buf[strlen(buf) + 1]);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testsock.c"
                },
                "region": {
                  "startLine": 700,
                  "startColumn": 35,
                  "endLine": 700,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        ABTS_INT_NEQUAL(tc, 0, id); /* Only guarantee is that it should be non-zero */\n\n        /* Check string translation. */\n        APR_ASSERT_SUCCESS(tc, \"get IP address\",\n                           apr_sockaddr_ip_getbuf(buf, 50, sa));\n        ABTS_STR_EQUAL(tc, TEST_ZONE_FULLADDR, buf);\n\n",
                    "rendered": {
                      "text": "        ABTS_INT_NEQUAL(tc, 0, id); /* Only guarantee is that it should be non-zero */\n\n        /* Check string translation. */\n        APR_ASSERT_SUCCESS(tc, \"get IP address\",\n                           apr_sockaddr_ip_getbuf(buf, 50, sa));\n        ABTS_STR_EQUAL(tc, TEST_ZONE_FULLADDR, buf);\n\n",
                      "markdown": "`        ABTS_INT_NEQUAL(tc, 0, id); /* Only guarantee is that it should be non-zero */\n\n        /* Check string translation. */\n        APR_ASSERT_SUCCESS(tc, \"get IP address\",\n                           apr_sockaddr_ip_getbuf(buf, 50, sa));\n        ABTS_STR_EQUAL(tc, TEST_ZONE_FULLADDR, buf);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testsock.c"
                },
                "region": {
                  "startLine": 549,
                  "startColumn": 53,
                  "endLine": 549,
                  "endColumn": 59,
                  "snippet": {
                    "text": "    ABTS_INT_EQUAL(tc, 1, APR_STATUS_IS_TIMEUP(rv));\n\n    end_time = apr_time_now();\n    ABTS_ASSERT(tc, \"apr_socket_wait() waited for the time out\", end_time - start_time >= delay);\n\n    nbytes = 4;\n    rv = apr_socket_send(server_connection, \"data\", &nbytes);\n",
                    "rendered": {
                      "text": "    ABTS_INT_EQUAL(tc, 1, APR_STATUS_IS_TIMEUP(rv));\n\n    end_time = apr_time_now();\n    ABTS_ASSERT(tc, \"apr_socket_wait() waited for the time out\", end_time - start_time >= delay);\n\n    nbytes = 4;\n    rv = apr_socket_send(server_connection, \"data\", &nbytes);\n",
                      "markdown": "`    ABTS_INT_EQUAL(tc, 1, APR_STATUS_IS_TIMEUP(rv));\n\n    end_time = apr_time_now();\n    ABTS_ASSERT(tc, \"apr_socket_wait() waited for the time out\", end_time - start_time >= delay);\n\n    nbytes = 4;\n    rv = apr_socket_send(server_connection, \"data\", &nbytes);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testsock.c"
                },
                "region": {
                  "startLine": 393,
                  "startColumn": 45,
                  "endLine": 393,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\n        memset(buf, 'z', sizeof buf);\n\n        APR_ASSERT_SUCCESS(tc, \"could not get IP address\",\n                           apr_sockaddr_ip_getbuf(buf, 22, sa));\n\n        ABTS_STR_EQUAL(tc, \"0.0.0.0\", buf);\n",
                    "rendered": {
                      "text": "\n        memset(buf, 'z', sizeof buf);\n\n        APR_ASSERT_SUCCESS(tc, \"could not get IP address\",\n                           apr_sockaddr_ip_getbuf(buf, 22, sa));\n\n        ABTS_STR_EQUAL(tc, \"0.0.0.0\", buf);\n",
                      "markdown": "`\n        memset(buf, 'z', sizeof buf);\n\n        APR_ASSERT_SUCCESS(tc, \"could not get IP address\",\n                           apr_sockaddr_ip_getbuf(buf, 22, sa));\n\n        ABTS_STR_EQUAL(tc, \"0.0.0.0\", buf);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testsock.c"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 43,
                  "endLine": 166,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    APR_ASSERT_SUCCESS(tc, \"Problem getting non-existent service\", !rv);\n\n    rv = apr_getservbyname(sa, \"telnet\");\n    APR_ASSERT_SUCCESS(tc, \"Problem getting telnet service\", rv);\n    ABTS_INT_EQUAL(tc, 23, sa->port);\n}\n\n",
                    "rendered": {
                      "text": "    APR_ASSERT_SUCCESS(tc, \"Problem getting non-existent service\", !rv);\n\n    rv = apr_getservbyname(sa, \"telnet\");\n    APR_ASSERT_SUCCESS(tc, \"Problem getting telnet service\", rv);\n    ABTS_INT_EQUAL(tc, 23, sa->port);\n}\n\n",
                      "markdown": "`    APR_ASSERT_SUCCESS(tc, \"Problem getting non-existent service\", !rv);\n\n    rv = apr_getservbyname(sa, \"telnet\");\n    APR_ASSERT_SUCCESS(tc, \"Problem getting telnet service\", rv);\n    ABTS_INT_EQUAL(tc, 23, sa->port);\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testsock.c"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 43,
                  "endLine": 159,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    APR_ASSERT_SUCCESS(tc, \"Problem generating sockaddr\", rv);\n\n    rv = apr_getservbyname(sa, \"ftp\");\n    APR_ASSERT_SUCCESS(tc, \"Problem getting ftp service\", rv);\n    ABTS_INT_EQUAL(tc, 21, sa->port);\n\n    rv = apr_getservbyname(sa, \"complete_and_utter_rubbish\");\n",
                    "rendered": {
                      "text": "    APR_ASSERT_SUCCESS(tc, \"Problem generating sockaddr\", rv);\n\n    rv = apr_getservbyname(sa, \"ftp\");\n    APR_ASSERT_SUCCESS(tc, \"Problem getting ftp service\", rv);\n    ABTS_INT_EQUAL(tc, 21, sa->port);\n\n    rv = apr_getservbyname(sa, \"complete_and_utter_rubbish\");\n",
                      "markdown": "`    APR_ASSERT_SUCCESS(tc, \"Problem generating sockaddr\", rv);\n\n    rv = apr_getservbyname(sa, \"ftp\");\n    APR_ASSERT_SUCCESS(tc, \"Problem getting ftp service\", rv);\n    ABTS_INT_EQUAL(tc, 21, sa->port);\n\n    rv = apr_getservbyname(sa, \"complete_and_utter_rubbish\");\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/apr_dbd_oracle.c"
                },
                "region": {
                  "startLine": 604,
                  "startColumn": 36,
                  "endLine": 604,
                  "endColumn": 44,
                  "snippet": {
                    "text": "#ifdef DEBUG\n        OCIErrorGet(ret->err, 1, NULL, &errorcode, ret->buf,\n                    sizeof(ret->buf), OCI_HTYPE_ERROR);\n        printf(\"OPEN ERROR %d (attr password): %s\\n\", ret->status, ret->buf);\n        break;\n#else\n        if (error) {\n",
                    "rendered": {
                      "text": "#ifdef DEBUG\n        OCIErrorGet(ret->err, 1, NULL, &errorcode, ret->buf,\n                    sizeof(ret->buf), OCI_HTYPE_ERROR);\n        printf(\"OPEN ERROR %d (attr password): %s\\n\", ret->status, ret->buf);\n        break;\n#else\n        if (error) {\n",
                      "markdown": "`#ifdef DEBUG\n        OCIErrorGet(ret->err, 1, NULL, &errorcode, ret->buf,\n                    sizeof(ret->buf), OCI_HTYPE_ERROR);\n        printf(\"OPEN ERROR %d (attr password): %s\\n\", ret->status, ret->buf);\n        break;\n#else\n        if (error) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/apr_dbd_oracle.c"
                },
                "region": {
                  "startLine": 598,
                  "startColumn": 58,
                  "endLine": 598,
                  "endColumn": 66,
                  "snippet": {
                    "text": "        break;\n    }\n    ret->status = OCIAttrSet(ret->auth, OCI_HTYPE_SESSION, fields[1].value,\n                        strlen(fields[1].value), OCI_ATTR_PASSWORD, ret->err);\n    switch (ret->status) {\n    default:\n#ifdef DEBUG\n",
                    "rendered": {
                      "text": "        break;\n    }\n    ret->status = OCIAttrSet(ret->auth, OCI_HTYPE_SESSION, fields[1].value,\n                        strlen(fields[1].value), OCI_ATTR_PASSWORD, ret->err);\n    switch (ret->status) {\n    default:\n#ifdef DEBUG\n",
                      "markdown": "`        break;\n    }\n    ret->status = OCIAttrSet(ret->auth, OCI_HTYPE_SESSION, fields[1].value,\n                        strlen(fields[1].value), OCI_ATTR_PASSWORD, ret->err);\n    switch (ret->status) {\n    default:\n#ifdef DEBUG\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/apr_dbd_oracle.c"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 32,
                  "endLine": 184,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    ub2 type;\n};\n\n/* AFAICT from the docs, the OCIEnv thingey can be used async\n * across threads, so lets have a global one.\n *\n * We'll need shorter-lived envs to deal with requests and connections\n",
                    "rendered": {
                      "text": "    ub2 type;\n};\n\n/* AFAICT from the docs, the OCIEnv thingey can be used async\n * across threads, so lets have a global one.\n *\n * We'll need shorter-lived envs to deal with requests and connections\n",
                      "markdown": "`    ub2 type;\n};\n\n/* AFAICT from the docs, the OCIEnv thingey can be used async\n * across threads, so lets have a global one.\n *\n * We'll need shorter-lived envs to deal with requests and connections\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/apr_dbd_odbc.c"
                },
                "region": {
                  "startLine": 1107,
                  "startColumn": 62,
                  "endLine": 1107,
                  "endColumn": 70,
                  "snippet": {
                    "text": "            rc = SQLConnect(hdbc, datasource,\n                        (SQLSMALLINT)strlen((char *)datasource),\n                        user, (SQLSMALLINT)strlen((char *)user),\n                        password, (SQLSMALLINT)strlen((char *)password));\n        }\n    }\n    if (SQL_SUCCEEDED(rc)) {\n",
                    "rendered": {
                      "text": "            rc = SQLConnect(hdbc, datasource,\n                        (SQLSMALLINT)strlen((char *)datasource),\n                        user, (SQLSMALLINT)strlen((char *)user),\n                        password, (SQLSMALLINT)strlen((char *)password));\n        }\n    }\n    if (SQL_SUCCEEDED(rc)) {\n",
                      "markdown": "`            rc = SQLConnect(hdbc, datasource,\n                        (SQLSMALLINT)strlen((char *)datasource),\n                        user, (SQLSMALLINT)strlen((char *)user),\n                        password, (SQLSMALLINT)strlen((char *)password));\n        }\n    }\n    if (SQL_SUCCEEDED(rc)) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/apr_dbd_odbc.c"
                },
                "region": {
                  "startLine": 1107,
                  "startColumn": 24,
                  "endLine": 1107,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            rc = SQLConnect(hdbc, datasource,\n                        (SQLSMALLINT)strlen((char *)datasource),\n                        user, (SQLSMALLINT)strlen((char *)user),\n                        password, (SQLSMALLINT)strlen((char *)password));\n        }\n    }\n    if (SQL_SUCCEEDED(rc)) {\n",
                    "rendered": {
                      "text": "            rc = SQLConnect(hdbc, datasource,\n                        (SQLSMALLINT)strlen((char *)datasource),\n                        user, (SQLSMALLINT)strlen((char *)user),\n                        password, (SQLSMALLINT)strlen((char *)password));\n        }\n    }\n    if (SQL_SUCCEEDED(rc)) {\n",
                      "markdown": "`            rc = SQLConnect(hdbc, datasource,\n                        (SQLSMALLINT)strlen((char *)datasource),\n                        user, (SQLSMALLINT)strlen((char *)user),\n                        password, (SQLSMALLINT)strlen((char *)password));\n        }\n    }\n    if (SQL_SUCCEEDED(rc)) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/apr_dbd_odbc.c"
                },
                "region": {
                  "startLine": 1077,
                  "startColumn": 32,
                  "endLine": 1077,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        err_htype = SQL_HANDLE_DBC;\n        err_h = hdbc;\n        rc = odbc_parse_params(pool, params, &connect, &datasource, &user,\n                               &password, &defaultBufferSize, &nattrs, &attrs,\n                               &attrvals);\n    }\n    if (SQL_SUCCEEDED(rc)) {\n",
                    "rendered": {
                      "text": "        err_htype = SQL_HANDLE_DBC;\n        err_h = hdbc;\n        rc = odbc_parse_params(pool, params, &connect, &datasource, &user,\n                               &password, &defaultBufferSize, &nattrs, &attrs,\n                               &attrvals);\n    }\n    if (SQL_SUCCEEDED(rc)) {\n",
                      "markdown": "`        err_htype = SQL_HANDLE_DBC;\n        err_h = hdbc;\n        rc = odbc_parse_params(pool, params, &connect, &datasource, &user,\n                               &password, &defaultBufferSize, &nattrs, &attrs,\n                               &attrvals);\n    }\n    if (SQL_SUCCEEDED(rc)) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/apr_dbd_odbc.c"
                },
                "region": {
                  "startLine": 1064,
                  "startColumn": 14,
                  "endLine": 1064,
                  "endColumn": 22,
                  "snippet": {
                    "text": "    int defaultBufferSize = DEFAULT_BUFFER_SIZE;\n    SQLHANDLE err_h = NULL;\n    SQLCHAR  *datasource = (SQLCHAR *)\"\", *user = (SQLCHAR *)\"\",\n             *password = (SQLCHAR *)\"\";\n    int nattrs = 0, *attrs = NULL,  connect = 0;\n    apr_intptr_t *attrvals = NULL;\n\n",
                    "rendered": {
                      "text": "    int defaultBufferSize = DEFAULT_BUFFER_SIZE;\n    SQLHANDLE err_h = NULL;\n    SQLCHAR  *datasource = (SQLCHAR *)\"\", *user = (SQLCHAR *)\"\",\n             *password = (SQLCHAR *)\"\";\n    int nattrs = 0, *attrs = NULL,  connect = 0;\n    apr_intptr_t *attrvals = NULL;\n\n",
                      "markdown": "`    int defaultBufferSize = DEFAULT_BUFFER_SIZE;\n    SQLHANDLE err_h = NULL;\n    SQLCHAR  *datasource = (SQLCHAR *)\"\", *user = (SQLCHAR *)\"\",\n             *password = (SQLCHAR *)\"\";\n    int nattrs = 0, *attrs = NULL,  connect = 0;\n    apr_intptr_t *attrvals = NULL;\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/apr_dbd_odbc.c"
                },
                "region": {
                  "startLine": 868,
                  "startColumn": 13,
                  "endLine": 868,
                  "endColumn": 21,
                  "snippet": {
                    "text": "            *user = (SQLCHAR *)apr_pstrdup(pool, val[i]);\n        }\n        else if (!apr_strnatcasecmp(name[i], \"PASSWORD\")) {\n            *password = (SQLCHAR *)apr_pstrdup(pool, val[i]);\n        }\n        else if (!apr_strnatcasecmp(name[i], \"BUFSIZE\")) {\n            *defaultBufferSize = atoi(val[i]);\n",
                    "rendered": {
                      "text": "            *user = (SQLCHAR *)apr_pstrdup(pool, val[i]);\n        }\n        else if (!apr_strnatcasecmp(name[i], \"PASSWORD\")) {\n            *password = (SQLCHAR *)apr_pstrdup(pool, val[i]);\n        }\n        else if (!apr_strnatcasecmp(name[i], \"BUFSIZE\")) {\n            *defaultBufferSize = atoi(val[i]);\n",
                      "markdown": "`            *user = (SQLCHAR *)apr_pstrdup(pool, val[i]);\n        }\n        else if (!apr_strnatcasecmp(name[i], \"PASSWORD\")) {\n            *password = (SQLCHAR *)apr_pstrdup(pool, val[i]);\n        }\n        else if (!apr_strnatcasecmp(name[i], \"BUFSIZE\")) {\n            *defaultBufferSize = atoi(val[i]);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/apr_dbd_odbc.c"
                },
                "region": {
                  "startLine": 867,
                  "startColumn": 46,
                  "endLine": 867,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        else if (!apr_strnatcasecmp(name[i], \"USER\")) {\n            *user = (SQLCHAR *)apr_pstrdup(pool, val[i]);\n        }\n        else if (!apr_strnatcasecmp(name[i], \"PASSWORD\")) {\n            *password = (SQLCHAR *)apr_pstrdup(pool, val[i]);\n        }\n        else if (!apr_strnatcasecmp(name[i], \"BUFSIZE\")) {\n",
                    "rendered": {
                      "text": "        else if (!apr_strnatcasecmp(name[i], \"USER\")) {\n            *user = (SQLCHAR *)apr_pstrdup(pool, val[i]);\n        }\n        else if (!apr_strnatcasecmp(name[i], \"PASSWORD\")) {\n            *password = (SQLCHAR *)apr_pstrdup(pool, val[i]);\n        }\n        else if (!apr_strnatcasecmp(name[i], \"BUFSIZE\")) {\n",
                      "markdown": "`        else if (!apr_strnatcasecmp(name[i], \"USER\")) {\n            *user = (SQLCHAR *)apr_pstrdup(pool, val[i]);\n        }\n        else if (!apr_strnatcasecmp(name[i], \"PASSWORD\")) {\n            *password = (SQLCHAR *)apr_pstrdup(pool, val[i]);\n        }\n        else if (!apr_strnatcasecmp(name[i], \"BUFSIZE\")) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/apr_dbd_odbc.c"
                },
                "region": {
                  "startLine": 818,
                  "startColumn": 57,
                  "endLine": 818,
                  "endColumn": 65,
                  "snippet": {
                    "text": "/* Parse the parameter string for open */\nstatic apr_status_t odbc_parse_params(apr_pool_t *pool, const char *params,\n                               int *connect, SQLCHAR **datasource,\n                               SQLCHAR **user, SQLCHAR **password,\n                               int *defaultBufferSize, int *nattrs,\n                               int **attrs, apr_intptr_t **attrvals)\n{\n",
                    "rendered": {
                      "text": "/* Parse the parameter string for open */\nstatic apr_status_t odbc_parse_params(apr_pool_t *pool, const char *params,\n                               int *connect, SQLCHAR **datasource,\n                               SQLCHAR **user, SQLCHAR **password,\n                               int *defaultBufferSize, int *nattrs,\n                               int **attrs, apr_intptr_t **attrvals)\n{\n",
                      "markdown": "`/* Parse the parameter string for open */\nstatic apr_status_t odbc_parse_params(apr_pool_t *pool, const char *params,\n                               int *connect, SQLCHAR **datasource,\n                               SQLCHAR **user, SQLCHAR **password,\n                               int *defaultBufferSize, int *nattrs,\n                               int **attrs, apr_intptr_t **attrvals)\n{\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/apr_dbd_odbc.c"
                },
                "region": {
                  "startLine": 972,
                  "startColumn": 8,
                  "endLine": 972,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        if (SQL_SUCCEEDED(rc) && (p < (end - 280)))\n            p += sprintf(p, \"%.256s %.20s \", buffer, sqlstate);\n    }\n    apr_env_get(&logval, \"apr_dbd_odbc_log\", dbc->pool);\n    /* if env var was set or call was init/open (no dbname) - log to stderr */\n    if (logval || !dbc->dbname ) {\n        char timestamp[APR_CTIME_LEN];\n",
                    "rendered": {
                      "text": "        if (SQL_SUCCEEDED(rc) && (p < (end - 280)))\n            p += sprintf(p, \"%.256s %.20s \", buffer, sqlstate);\n    }\n    apr_env_get(&logval, \"apr_dbd_odbc_log\", dbc->pool);\n    /* if env var was set or call was init/open (no dbname) - log to stderr */\n    if (logval || !dbc->dbname ) {\n        char timestamp[APR_CTIME_LEN];\n",
                      "markdown": "`        if (SQL_SUCCEEDED(rc) && (p < (end - 280)))\n            p += sprintf(p, \"%.256s %.20s \", buffer, sqlstate);\n    }\n    apr_env_get(&logval, \"apr_dbd_odbc_log\", dbc->pool);\n    /* if env var was set or call was init/open (no dbname) - log to stderr */\n    if (logval || !dbc->dbname ) {\n        char timestamp[APR_CTIME_LEN];\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/apr_dbd_odbc.c"
                },
                "region": {
                  "startLine": 964,
                  "startColumn": 57,
                  "endLine": 964,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    p = dbc->lastError;\n    end = p + sizeof(dbc->lastError);\n    dbc->lasterrorcode = rc;\n    p += sprintf(p, \"[dbd_odbc] %.64s returned %.30s (%d) at %.24s:%d \",\n                 step, res, rc, SOURCE_FILE, line - 1);\n    for (i = 1, rc = 0; rc == 0; i++) {\n        rc = SQLGetDiagRec(type, h, i, sqlstate, &native, buffer,\n",
                    "rendered": {
                      "text": "    p = dbc->lastError;\n    end = p + sizeof(dbc->lastError);\n    dbc->lasterrorcode = rc;\n    p += sprintf(p, \"[dbd_odbc] %.64s returned %.30s (%d) at %.24s:%d \",\n                 step, res, rc, SOURCE_FILE, line - 1);\n    for (i = 1, rc = 0; rc == 0; i++) {\n        rc = SQLGetDiagRec(type, h, i, sqlstate, &native, buffer,\n",
                      "markdown": "`    p = dbc->lastError;\n    end = p + sizeof(dbc->lastError);\n    dbc->lasterrorcode = rc;\n    p += sprintf(p, \"[dbd_odbc] %.64s returned %.30s (%d) at %.24s:%d \",\n                 step, res, rc, SOURCE_FILE, line - 1);\n    for (i = 1, rc = 0; rc == 0; i++) {\n        rc = SQLGetDiagRec(type, h, i, sqlstate, &native, buffer,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/apr_dbd_sqlite3.c"
                },
                "region": {
                  "startLine": 820,
                  "startColumn": 3,
                  "endLine": 820,
                  "endColumn": 12,
                  "snippet": {
                    "text": "                                   const char **error)\n{\n    apr_dbd_t *sql = NULL;\n    sqlite3 *conn = NULL;\n    int sqlres;\n    if (!params)\n        return NULL;\n",
                    "rendered": {
                      "text": "                                   const char **error)\n{\n    apr_dbd_t *sql = NULL;\n    sqlite3 *conn = NULL;\n    int sqlres;\n    if (!params)\n        return NULL;\n",
                      "markdown": "`                                   const char **error)\n{\n    apr_dbd_t *sql = NULL;\n    sqlite3 *conn = NULL;\n    int sqlres;\n    if (!params)\n        return NULL;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/apr_dbd_sqlite3.c"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 3,
                  "endLine": 66,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\nstruct apr_dbd_results_t {\n    int random;\n    sqlite3 *handle;\n    sqlite3_stmt *stmt;\n    apr_dbd_row_t *next_row;\n    size_t sz;\n",
                    "rendered": {
                      "text": "\nstruct apr_dbd_results_t {\n    int random;\n    sqlite3 *handle;\n    sqlite3_stmt *stmt;\n    apr_dbd_row_t *next_row;\n    size_t sz;\n",
                      "markdown": "`\nstruct apr_dbd_results_t {\n    int random;\n    sqlite3 *handle;\n    sqlite3_stmt *stmt;\n    apr_dbd_row_t *next_row;\n    size_t sz;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/apr_dbd_sqlite3.c"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 3,
                  "endLine": 43,
                  "endColumn": 12,
                  "snippet": {
                    "text": "};\n\nstruct apr_dbd_t {\n    sqlite3 *conn;\n    apr_dbd_transaction_t *trans;\n    apr_pool_t *pool;\n    apr_dbd_prepared_t *prep;\n",
                    "rendered": {
                      "text": "};\n\nstruct apr_dbd_t {\n    sqlite3 *conn;\n    apr_dbd_transaction_t *trans;\n    apr_pool_t *pool;\n    apr_dbd_prepared_t *prep;\n",
                      "markdown": "`};\n\nstruct apr_dbd_t {\n    sqlite3 *conn;\n    apr_dbd_transaction_t *trans;\n    apr_pool_t *pool;\n    apr_dbd_prepared_t *prep;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/NWGNUdbdmysql"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 25,
                  "endLine": 137,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n#\n# If this is specified, it will override VERSION value in\n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                    "rendered": {
                      "text": "\n#\n# If this is specified, it will override VERSION value in\n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                      "markdown": "`\n#\n# If this is specified, it will override VERSION value in\n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/NWGNUdbdmysql"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 59,
                  "endLine": 26,
                  "endColumn": 74,
                  "snippet": {
                    "text": "\n# LINK_STATIC = 1\n\n# for now defined here - should finally go into build/NWGNUenvironment.inc\nMYSQL_INC = $(MYSQLSDK)/include\nMYSQL_IMP = $(MYSQLSDK)/lib/libmysql.imp\nMYSQL_LIB = $(MYSQLSDK)/lib/libmysqlclient_r.lib $(MYSQLSDK)/lib/libz.lib\n",
                    "rendered": {
                      "text": "\n# LINK_STATIC = 1\n\n# for now defined here - should finally go into build/NWGNUenvironment.inc\nMYSQL_INC = $(MYSQLSDK)/include\nMYSQL_IMP = $(MYSQLSDK)/lib/libmysql.imp\nMYSQL_LIB = $(MYSQLSDK)/lib/libmysqlclient_r.lib $(MYSQLSDK)/lib/libz.lib\n",
                      "markdown": "`\n# LINK_STATIC = 1\n\n# for now defined here - should finally go into build/NWGNUenvironment.inc\nMYSQL_INC = $(MYSQLSDK)/include\nMYSQL_IMP = $(MYSQLSDK)/lib/libmysql.imp\nMYSQL_LIB = $(MYSQLSDK)/lib/libmysqlclient_r.lib $(MYSQLSDK)/lib/libz.lib\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/NWGNUdbdmysql"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 30,
                  "endLine": 9,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\t$(EOLIST)\n\n#\n# Get the 'head' of the build environment.  This includes default targets and\n# paths to tools\n#\n\n",
                    "rendered": {
                      "text": "\t$(EOLIST)\n\n#\n# Get the 'head' of the build environment.  This includes default targets and\n# paths to tools\n#\n\n",
                      "markdown": "`\t$(EOLIST)\n\n#\n# Get the 'head' of the build environment.  This includes default targets and\n# paths to tools\n#\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/NWGNUdbdmysql"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 27,
                  "endLine": 36,
                  "endColumn": 31,
                  "snippet": {
                    "text": "endif\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                    "rendered": {
                      "text": "endif\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                      "markdown": "`endif\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/NWGNUdbdmysql"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 71,
                  "endLine": 127,
                  "endColumn": 78,
                  "snippet": {
                    "text": "# This is used by the link '-desc ' directive.\n# If left blank, NLM_NAME will be used.\n#\nNLM_DESCRIPTION\t= Apache Portability Runtime Library $(VERSION_STR) DBD MySQL Driver Module\n\n#\n# This is used by the '-threadname' directive.  If left blank,\n",
                    "rendered": {
                      "text": "# This is used by the link '-desc ' directive.\n# If left blank, NLM_NAME will be used.\n#\nNLM_DESCRIPTION\t= Apache Portability Runtime Library $(VERSION_STR) DBD MySQL Driver Module\n\n#\n# This is used by the '-threadname' directive.  If left blank,\n",
                      "markdown": "`# This is used by the link '-desc ' directive.\n# If left blank, NLM_NAME will be used.\n#\nNLM_DESCRIPTION\t= Apache Portability Runtime Library $(VERSION_STR) DBD MySQL Driver Module\n\n#\n# This is used by the '-threadname' directive.  If left blank,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/NWGNUdbdmysql"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 42,
                  "endLine": 32,
                  "endColumn": 49,
                  "snippet": {
                    "text": "MYSQL_LIB = $(MYSQLSDK)/lib/libmysqlclient_r.lib $(MYSQLSDK)/lib/libz.lib\nMYSQL_NLM = libmysql\nifneq \"$(wildcard $(MYSQL_INC)/mysql.h)\" \"$(MYSQL_INC)/mysql.h\"\n$(error MYSQLSDK does not point to a valid MySQL SDK) \nendif\n\n#\n",
                    "rendered": {
                      "text": "MYSQL_LIB = $(MYSQLSDK)/lib/libmysqlclient_r.lib $(MYSQLSDK)/lib/libz.lib\nMYSQL_NLM = libmysql\nifneq \"$(wildcard $(MYSQL_INC)/mysql.h)\" \"$(MYSQL_INC)/mysql.h\"\n$(error MYSQLSDK does not point to a valid MySQL SDK) \nendif\n\n#\n",
                      "markdown": "`MYSQL_LIB = $(MYSQLSDK)/lib/libmysqlclient_r.lib $(MYSQLSDK)/lib/libz.lib\nMYSQL_NLM = libmysql\nifneq \"$(wildcard $(MYSQL_INC)/mysql.h)\" \"$(MYSQL_INC)/mysql.h\"\n$(error MYSQLSDK does not point to a valid MySQL SDK) \nendif\n\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/NWGNUdbdpgsql"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 25,
                  "endLine": 139,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n#\n# If this is specified, it will override VERSION value in\n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                    "rendered": {
                      "text": "\n#\n# If this is specified, it will override VERSION value in\n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                      "markdown": "`\n#\n# If this is specified, it will override VERSION value in\n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/NWGNUdbdpgsql"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 59,
                  "endLine": 26,
                  "endColumn": 74,
                  "snippet": {
                    "text": "\n# LINK_STATIC = 1\n\n# for now defined here - should finally go into build/NWGNUenvironment.inc\nPGSQL_INC = $(PGSQLSDK)/inc\nPGSQL_IMP = $(PGSQLSDK)/imp/libpq.imp\nPGSQL_LIB = $(PGSQLSDK)/lib/libpq.lib\n",
                    "rendered": {
                      "text": "\n# LINK_STATIC = 1\n\n# for now defined here - should finally go into build/NWGNUenvironment.inc\nPGSQL_INC = $(PGSQLSDK)/inc\nPGSQL_IMP = $(PGSQLSDK)/imp/libpq.imp\nPGSQL_LIB = $(PGSQLSDK)/lib/libpq.lib\n",
                      "markdown": "`\n# LINK_STATIC = 1\n\n# for now defined here - should finally go into build/NWGNUenvironment.inc\nPGSQL_INC = $(PGSQLSDK)/inc\nPGSQL_IMP = $(PGSQLSDK)/imp/libpq.imp\nPGSQL_LIB = $(PGSQLSDK)/lib/libpq.lib\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/NWGNUdbdpgsql"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 30,
                  "endLine": 9,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\t$(EOLIST)\n\n#\n# Get the 'head' of the build environment.  This includes default targets and\n# paths to tools\n#\n\n",
                    "rendered": {
                      "text": "\t$(EOLIST)\n\n#\n# Get the 'head' of the build environment.  This includes default targets and\n# paths to tools\n#\n\n",
                      "markdown": "`\t$(EOLIST)\n\n#\n# Get the 'head' of the build environment.  This includes default targets and\n# paths to tools\n#\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/NWGNUdbdpgsql"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 27,
                  "endLine": 33,
                  "endColumn": 31,
                  "snippet": {
                    "text": "PGSQL_NLM = libpq\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                    "rendered": {
                      "text": "PGSQL_NLM = libpq\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                      "markdown": "`PGSQL_NLM = libpq\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/NWGNUdbdsqli3"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 25,
                  "endLine": 133,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n#\n# If this is specified, it will override VERSION value in\n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                    "rendered": {
                      "text": "\n#\n# If this is specified, it will override VERSION value in\n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                      "markdown": "`\n#\n# If this is specified, it will override VERSION value in\n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/NWGNUdbdsqli3"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 59,
                  "endLine": 26,
                  "endColumn": 74,
                  "snippet": {
                    "text": "\n# LINK_STATIC = 1\n\n# for now defined here - should finally go into build/NWGNUenvironment.inc\nSQLITE3_INC = $(SQLITE3SDK)/src\nSQLITE3_IMP = $(SQLITE3SDK)/lsqlite3.imp\nSQLITE3_LIB = $(SQLITE3SDK)/lsqlite3.lib\n",
                    "rendered": {
                      "text": "\n# LINK_STATIC = 1\n\n# for now defined here - should finally go into build/NWGNUenvironment.inc\nSQLITE3_INC = $(SQLITE3SDK)/src\nSQLITE3_IMP = $(SQLITE3SDK)/lsqlite3.imp\nSQLITE3_LIB = $(SQLITE3SDK)/lsqlite3.lib\n",
                      "markdown": "`\n# LINK_STATIC = 1\n\n# for now defined here - should finally go into build/NWGNUenvironment.inc\nSQLITE3_INC = $(SQLITE3SDK)/src\nSQLITE3_IMP = $(SQLITE3SDK)/lsqlite3.imp\nSQLITE3_LIB = $(SQLITE3SDK)/lsqlite3.lib\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/NWGNUdbdsqli3"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 30,
                  "endLine": 9,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\t$(EOLIST)\n\n#\n# Get the 'head' of the build environment.  This includes default targets and\n# paths to tools\n#\n\n",
                    "rendered": {
                      "text": "\t$(EOLIST)\n\n#\n# Get the 'head' of the build environment.  This includes default targets and\n# paths to tools\n#\n\n",
                      "markdown": "`\t$(EOLIST)\n\n#\n# Get the 'head' of the build environment.  This includes default targets and\n# paths to tools\n#\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/NWGNUdbdsqli3"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 27,
                  "endLine": 33,
                  "endColumn": 31,
                  "snippet": {
                    "text": "SQLITE3_NLM = lsqlite3\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                    "rendered": {
                      "text": "SQLITE3_NLM = lsqlite3\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                      "markdown": "`SQLITE3_NLM = lsqlite3\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/NWGNUdbdsqli3"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 71,
                  "endLine": 123,
                  "endColumn": 80,
                  "snippet": {
                    "text": "# This is used by the link '-desc ' directive.\n# If left blank, NLM_NAME will be used.\n#\nNLM_DESCRIPTION\t= Apache Portability Runtime Library $(VERSION_STR) DBD SQLite3 Driver Module\n\n#\n# This is used by the '-threadname' directive.  If left blank,\n",
                    "rendered": {
                      "text": "# This is used by the link '-desc ' directive.\n# If left blank, NLM_NAME will be used.\n#\nNLM_DESCRIPTION\t= Apache Portability Runtime Library $(VERSION_STR) DBD SQLite3 Driver Module\n\n#\n# This is used by the '-threadname' directive.  If left blank,\n",
                      "markdown": "`# This is used by the link '-desc ' directive.\n# If left blank, NLM_NAME will be used.\n#\nNLM_DESCRIPTION\t= Apache Portability Runtime Library $(VERSION_STR) DBD SQLite3 Driver Module\n\n#\n# This is used by the '-threadname' directive.  If left blank,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apu_want.hw"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 53,
                  "endLine": 7,
                  "snippet": {
                    "text": " * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": " * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "` * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_md5.h"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 30,
                  "endLine": 167,
                  "endColumn": 38,
                  "snippet": {
                    "text": " * @param passwd The password to validate\n * @param hash The password to validate against\n */\nAPR_DECLARE(apr_status_t) apr_password_validate(const char *passwd,\n                                                const char *hash);\n\n\n",
                    "rendered": {
                      "text": " * @param passwd The password to validate\n * @param hash The password to validate against\n */\nAPR_DECLARE(apr_status_t) apr_password_validate(const char *passwd,\n                                                const char *hash);\n\n\n",
                      "markdown": "` * @param passwd The password to validate\n * @param hash The password to validate against\n */\nAPR_DECLARE(apr_status_t) apr_password_validate(const char *passwd,\n                                                const char *hash);\n\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_md5.h"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 19,
                  "endLine": 165,
                  "endColumn": 27,
                  "snippet": {
                    "text": " * that don't support crypt(3), this falls back to a clear text string\n * comparison.\n * @param passwd The password to validate\n * @param hash The password to validate against\n */\nAPR_DECLARE(apr_status_t) apr_password_validate(const char *passwd,\n                                                const char *hash);\n",
                    "rendered": {
                      "text": " * that don't support crypt(3), this falls back to a clear text string\n * comparison.\n * @param passwd The password to validate\n * @param hash The password to validate against\n */\nAPR_DECLARE(apr_status_t) apr_password_validate(const char *passwd,\n                                                const char *hash);\n",
                      "markdown": "` * that don't support crypt(3), this falls back to a clear text string\n * comparison.\n * @param passwd The password to validate\n * @param hash The password to validate against\n */\nAPR_DECLARE(apr_status_t) apr_password_validate(const char *passwd,\n                                                const char *hash);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_md5.h"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 21,
                  "endLine": 164,
                  "endColumn": 29,
                  "snippet": {
                    "text": " * application will be run only on platforms that support it.  On platforms\n * that don't support crypt(3), this falls back to a clear text string\n * comparison.\n * @param passwd The password to validate\n * @param hash The password to validate against\n */\nAPR_DECLARE(apr_status_t) apr_password_validate(const char *passwd,\n",
                    "rendered": {
                      "text": " * application will be run only on platforms that support it.  On platforms\n * that don't support crypt(3), this falls back to a clear text string\n * comparison.\n * @param passwd The password to validate\n * @param hash The password to validate against\n */\nAPR_DECLARE(apr_status_t) apr_password_validate(const char *passwd,\n",
                      "markdown": "` * application will be run only on platforms that support it.  On platforms\n * that don't support crypt(3), this falls back to a clear text string\n * comparison.\n * @param passwd The password to validate\n * @param hash The password to validate against\n */\nAPR_DECLARE(apr_status_t) apr_password_validate(const char *passwd,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_md5.h"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 46,
                  "endLine": 148,
                  "endColumn": 54,
                  "snippet": {
                    "text": " * @param count The cost of the encoding, possible values are 4 to 31\n * @param salt Pointer to binary data to be used as salt for the encoding\n * @param salt_len The size of the salt data (must be >= 16)\n * @param out The string to store the encoded password in\n * @param out_len The size of the result buffer (must be >= 61)\n */\nAPR_DECLARE(apr_status_t) apr_bcrypt_encode(const char *pw,\n",
                    "rendered": {
                      "text": " * @param count The cost of the encoding, possible values are 4 to 31\n * @param salt Pointer to binary data to be used as salt for the encoding\n * @param salt_len The size of the salt data (must be >= 16)\n * @param out The string to store the encoded password in\n * @param out_len The size of the result buffer (must be >= 61)\n */\nAPR_DECLARE(apr_status_t) apr_bcrypt_encode(const char *pw,\n",
                      "markdown": "` * @param count The cost of the encoding, possible values are 4 to 31\n * @param salt Pointer to binary data to be used as salt for the encoding\n * @param salt_len The size of the salt data (must be >= 16)\n * @param out The string to store the encoded password in\n * @param out_len The size of the result buffer (must be >= 61)\n */\nAPR_DECLARE(apr_status_t) apr_bcrypt_encode(const char *pw,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_md5.h"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 17,
                  "endLine": 144,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n/**\n * Encode a password using the bcrypt algorithm\n * @param pw The password to encode\n * @param count The cost of the encoding, possible values are 4 to 31\n * @param salt Pointer to binary data to be used as salt for the encoding\n * @param salt_len The size of the salt data (must be >= 16)\n",
                    "rendered": {
                      "text": "\n/**\n * Encode a password using the bcrypt algorithm\n * @param pw The password to encode\n * @param count The cost of the encoding, possible values are 4 to 31\n * @param salt Pointer to binary data to be used as salt for the encoding\n * @param salt_len The size of the salt data (must be >= 16)\n",
                      "markdown": "`\n/**\n * Encode a password using the bcrypt algorithm\n * @param pw The password to encode\n * @param count The cost of the encoding, possible values are 4 to 31\n * @param salt Pointer to binary data to be used as salt for the encoding\n * @param salt_len The size of the salt data (must be >= 16)\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_md5.h"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 12,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "                                         char *result, apr_size_t nbytes);\n\n/**\n * Encode a password using the bcrypt algorithm\n * @param pw The password to encode\n * @param count The cost of the encoding, possible values are 4 to 31\n * @param salt Pointer to binary data to be used as salt for the encoding\n",
                    "rendered": {
                      "text": "                                         char *result, apr_size_t nbytes);\n\n/**\n * Encode a password using the bcrypt algorithm\n * @param pw The password to encode\n * @param count The cost of the encoding, possible values are 4 to 31\n * @param salt Pointer to binary data to be used as salt for the encoding\n",
                      "markdown": "`                                         char *result, apr_size_t nbytes);\n\n/**\n * Encode a password using the bcrypt algorithm\n * @param pw The password to encode\n * @param count The cost of the encoding, possible values are 4 to 31\n * @param salt Pointer to binary data to be used as salt for the encoding\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_md5.h"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 49,
                  "endLine": 136,
                  "endColumn": 57,
                  "snippet": {
                    "text": " * Encode a password using an MD5 algorithm\n * @param pw The password to encode\n * @param salt The salt string to use for the encoding\n * @param result The string to store the encoded password in\n * @param nbytes The size of the result buffer\n */\nAPR_DECLARE(apr_status_t) apr_md5_encode(const char *pw, const char *salt,\n",
                    "rendered": {
                      "text": " * Encode a password using an MD5 algorithm\n * @param pw The password to encode\n * @param salt The salt string to use for the encoding\n * @param result The string to store the encoded password in\n * @param nbytes The size of the result buffer\n */\nAPR_DECLARE(apr_status_t) apr_md5_encode(const char *pw, const char *salt,\n",
                      "markdown": "` * Encode a password using an MD5 algorithm\n * @param pw The password to encode\n * @param salt The salt string to use for the encoding\n * @param result The string to store the encoded password in\n * @param nbytes The size of the result buffer\n */\nAPR_DECLARE(apr_status_t) apr_md5_encode(const char *pw, const char *salt,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_md5.h"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 17,
                  "endLine": 134,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n/**\n * Encode a password using an MD5 algorithm\n * @param pw The password to encode\n * @param salt The salt string to use for the encoding\n * @param result The string to store the encoded password in\n * @param nbytes The size of the result buffer\n",
                    "rendered": {
                      "text": "\n/**\n * Encode a password using an MD5 algorithm\n * @param pw The password to encode\n * @param salt The salt string to use for the encoding\n * @param result The string to store the encoded password in\n * @param nbytes The size of the result buffer\n",
                      "markdown": "`\n/**\n * Encode a password using an MD5 algorithm\n * @param pw The password to encode\n * @param salt The salt string to use for the encoding\n * @param result The string to store the encoded password in\n * @param nbytes The size of the result buffer\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_md5.h"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 12,
                  "endLine": 133,
                  "endColumn": 20,
                  "snippet": {
                    "text": "                                  apr_size_t inputLen);\n\n/**\n * Encode a password using an MD5 algorithm\n * @param pw The password to encode\n * @param salt The salt string to use for the encoding\n * @param result The string to store the encoded password in\n",
                    "rendered": {
                      "text": "                                  apr_size_t inputLen);\n\n/**\n * Encode a password using an MD5 algorithm\n * @param pw The password to encode\n * @param salt The salt string to use for the encoding\n * @param result The string to store the encoded password in\n",
                      "markdown": "`                                  apr_size_t inputLen);\n\n/**\n * Encode a password using an MD5 algorithm\n * @param pw The password to encode\n * @param salt The salt string to use for the encoding\n * @param result The string to store the encoded password in\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/uri/apr_uri.c"
                },
                "region": {
                  "startLine": 902,
                  "startColumn": 14,
                  "endLine": 902,
                  "endColumn": 22,
                  "snippet": {
                    "text": "    if (s1) {\n        uptr->user = apr_pstrmemdup(p, hostinfo, s1 - hostinfo);\n        ++s1;\n        uptr->password = apr_pstrmemdup(p, s1, s - s1);\n    }\n    else {\n        uptr->user = apr_pstrmemdup(p, hostinfo, s - hostinfo);\n",
                    "rendered": {
                      "text": "    if (s1) {\n        uptr->user = apr_pstrmemdup(p, hostinfo, s1 - hostinfo);\n        ++s1;\n        uptr->password = apr_pstrmemdup(p, s1, s - s1);\n    }\n    else {\n        uptr->user = apr_pstrmemdup(p, hostinfo, s - hostinfo);\n",
                      "markdown": "`    if (s1) {\n        uptr->user = apr_pstrmemdup(p, hostinfo, s1 - hostinfo);\n        ++s1;\n        uptr->password = apr_pstrmemdup(p, s1, s - s1);\n    }\n    else {\n        uptr->user = apr_pstrmemdup(p, hostinfo, s - hostinfo);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/uri/apr_uri.c"
                },
                "region": {
                  "startLine": 897,
                  "startColumn": 37,
                  "endLine": 897,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        goto deal_with_path;\n    }\n\n    /* first colon delimits username:password */\n    s1 = memchr(hostinfo, ':', s - hostinfo);\n    if (s1) {\n        uptr->user = apr_pstrmemdup(p, hostinfo, s1 - hostinfo);\n",
                    "rendered": {
                      "text": "        goto deal_with_path;\n    }\n\n    /* first colon delimits username:password */\n    s1 = memchr(hostinfo, ':', s - hostinfo);\n    if (s1) {\n        uptr->user = apr_pstrmemdup(p, hostinfo, s1 - hostinfo);\n",
                      "markdown": "`        goto deal_with_path;\n    }\n\n    /* first colon delimits username:password */\n    s1 = memchr(hostinfo, ':', s - hostinfo);\n    if (s1) {\n        uptr->user = apr_pstrmemdup(p, hostinfo, s1 - hostinfo);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/uri/apr_uri.c"
                },
                "region": {
                  "startLine": 843,
                  "startColumn": 29,
                  "endLine": 843,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    uri = s;        /* whatever follows hostinfo is start of uri */\n    uptr->hostinfo = apr_pstrmemdup(p, hostinfo, uri - hostinfo);\n\n    /* If there's a username:password@host:port, the @ we want is the last @...\n     * too bad there's no memrchr()... For the C purists, note that hostinfo\n     * is definitely not the first character of the original uri so therefore\n     * &hostinfo[-1] < &hostinfo[0] ... and this loop is valid C.\n",
                    "rendered": {
                      "text": "    uri = s;        /* whatever follows hostinfo is start of uri */\n    uptr->hostinfo = apr_pstrmemdup(p, hostinfo, uri - hostinfo);\n\n    /* If there's a username:password@host:port, the @ we want is the last @...\n     * too bad there's no memrchr()... For the C purists, note that hostinfo\n     * is definitely not the first character of the original uri so therefore\n     * &hostinfo[-1] < &hostinfo[0] ... and this loop is valid C.\n",
                      "markdown": "`    uri = s;        /* whatever follows hostinfo is start of uri */\n    uptr->hostinfo = apr_pstrmemdup(p, hostinfo, uri - hostinfo);\n\n    /* If there's a username:password@host:port, the @ we want is the last @...\n     * too bad there's no memrchr()... For the C purists, note that hostinfo\n     * is definitely not the first character of the original uri so therefore\n     * &hostinfo[-1] < &hostinfo[0] ... and this loop is valid C.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/uri/apr_uri.c"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 68,
                  "endLine": 112,
                  "endColumn": 76,
                  "snippet": {
                    "text": "                              ? uptr->password : \"XXXXXXXX\")\n                          : \"\",\n                      ((uptr->user     && !(flags & APR_URI_UNP_OMITUSER)) ||\n                       (uptr->password && !(flags & APR_URI_UNP_OMITPASSWORD)))\n                          ? \"@\" : \"\",\n                      NULL);\n        }\n",
                    "rendered": {
                      "text": "                              ? uptr->password : \"XXXXXXXX\")\n                          : \"\",\n                      ((uptr->user     && !(flags & APR_URI_UNP_OMITUSER)) ||\n                       (uptr->password && !(flags & APR_URI_UNP_OMITPASSWORD)))\n                          ? \"@\" : \"\",\n                      NULL);\n        }\n",
                      "markdown": "`                              ? uptr->password : \"XXXXXXXX\")\n                          : \"\",\n                      ((uptr->user     && !(flags & APR_URI_UNP_OMITUSER)) ||\n                       (uptr->password && !(flags & APR_URI_UNP_OMITPASSWORD)))\n                          ? \"@\" : \"\",\n                      NULL);\n        }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/uri/apr_uri.c"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 30,
                  "endLine": 112,
                  "endColumn": 38,
                  "snippet": {
                    "text": "                              ? uptr->password : \"XXXXXXXX\")\n                          : \"\",\n                      ((uptr->user     && !(flags & APR_URI_UNP_OMITUSER)) ||\n                       (uptr->password && !(flags & APR_URI_UNP_OMITPASSWORD)))\n                          ? \"@\" : \"\",\n                      NULL);\n        }\n",
                    "rendered": {
                      "text": "                              ? uptr->password : \"XXXXXXXX\")\n                          : \"\",\n                      ((uptr->user     && !(flags & APR_URI_UNP_OMITUSER)) ||\n                       (uptr->password && !(flags & APR_URI_UNP_OMITPASSWORD)))\n                          ? \"@\" : \"\",\n                      NULL);\n        }\n",
                      "markdown": "`                              ? uptr->password : \"XXXXXXXX\")\n                          : \"\",\n                      ((uptr->user     && !(flags & APR_URI_UNP_OMITUSER)) ||\n                       (uptr->password && !(flags & APR_URI_UNP_OMITPASSWORD)))\n                          ? \"@\" : \"\",\n                      NULL);\n        }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/uri/apr_uri.c"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 38,
                  "endLine": 109,
                  "endColumn": 46,
                  "snippet": {
                    "text": "                          ? \":\" : \"\",\n                      (uptr->password && !(flags & APR_URI_UNP_OMITPASSWORD))\n                          ? ((flags & APR_URI_UNP_REVEALPASSWORD)\n                              ? uptr->password : \"XXXXXXXX\")\n                          : \"\",\n                      ((uptr->user     && !(flags & APR_URI_UNP_OMITUSER)) ||\n                       (uptr->password && !(flags & APR_URI_UNP_OMITPASSWORD)))\n",
                    "rendered": {
                      "text": "                          ? \":\" : \"\",\n                      (uptr->password && !(flags & APR_URI_UNP_OMITPASSWORD))\n                          ? ((flags & APR_URI_UNP_REVEALPASSWORD)\n                              ? uptr->password : \"XXXXXXXX\")\n                          : \"\",\n                      ((uptr->user     && !(flags & APR_URI_UNP_OMITUSER)) ||\n                       (uptr->password && !(flags & APR_URI_UNP_OMITPASSWORD)))\n",
                      "markdown": "`                          ? \":\" : \"\",\n                      (uptr->password && !(flags & APR_URI_UNP_OMITPASSWORD))\n                          ? ((flags & APR_URI_UNP_REVEALPASSWORD)\n                              ? uptr->password : \"XXXXXXXX\")\n                          : \"\",\n                      ((uptr->user     && !(flags & APR_URI_UNP_OMITUSER)) ||\n                       (uptr->password && !(flags & APR_URI_UNP_OMITPASSWORD)))\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/uri/apr_uri.c"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 56,
                  "endLine": 108,
                  "endColumn": 64,
                  "snippet": {
                    "text": "                      (uptr->password && !(flags & APR_URI_UNP_OMITPASSWORD))\n                          ? \":\" : \"\",\n                      (uptr->password && !(flags & APR_URI_UNP_OMITPASSWORD))\n                          ? ((flags & APR_URI_UNP_REVEALPASSWORD)\n                              ? uptr->password : \"XXXXXXXX\")\n                          : \"\",\n                      ((uptr->user     && !(flags & APR_URI_UNP_OMITUSER)) ||\n",
                    "rendered": {
                      "text": "                      (uptr->password && !(flags & APR_URI_UNP_OMITPASSWORD))\n                          ? \":\" : \"\",\n                      (uptr->password && !(flags & APR_URI_UNP_OMITPASSWORD))\n                          ? ((flags & APR_URI_UNP_REVEALPASSWORD)\n                              ? uptr->password : \"XXXXXXXX\")\n                          : \"\",\n                      ((uptr->user     && !(flags & APR_URI_UNP_OMITUSER)) ||\n",
                      "markdown": "`                      (uptr->password && !(flags & APR_URI_UNP_OMITPASSWORD))\n                          ? \":\" : \"\",\n                      (uptr->password && !(flags & APR_URI_UNP_OMITPASSWORD))\n                          ? ((flags & APR_URI_UNP_REVEALPASSWORD)\n                              ? uptr->password : \"XXXXXXXX\")\n                          : \"\",\n                      ((uptr->user     && !(flags & APR_URI_UNP_OMITUSER)) ||\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/uri/apr_uri.c"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 67,
                  "endLine": 107,
                  "endColumn": 75,
                  "snippet": {
                    "text": "                          ? uptr->user : \"\",\n                      (uptr->password && !(flags & APR_URI_UNP_OMITPASSWORD))\n                          ? \":\" : \"\",\n                      (uptr->password && !(flags & APR_URI_UNP_OMITPASSWORD))\n                          ? ((flags & APR_URI_UNP_REVEALPASSWORD)\n                              ? uptr->password : \"XXXXXXXX\")\n                          : \"\",\n",
                    "rendered": {
                      "text": "                          ? uptr->user : \"\",\n                      (uptr->password && !(flags & APR_URI_UNP_OMITPASSWORD))\n                          ? \":\" : \"\",\n                      (uptr->password && !(flags & APR_URI_UNP_OMITPASSWORD))\n                          ? ((flags & APR_URI_UNP_REVEALPASSWORD)\n                              ? uptr->password : \"XXXXXXXX\")\n                          : \"\",\n",
                      "markdown": "`                          ? uptr->user : \"\",\n                      (uptr->password && !(flags & APR_URI_UNP_OMITPASSWORD))\n                          ? \":\" : \"\",\n                      (uptr->password && !(flags & APR_URI_UNP_OMITPASSWORD))\n                          ? ((flags & APR_URI_UNP_REVEALPASSWORD)\n                              ? uptr->password : \"XXXXXXXX\")\n                          : \"\",\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/uri/apr_uri.c"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 29,
                  "endLine": 107,
                  "endColumn": 37,
                  "snippet": {
                    "text": "                          ? uptr->user : \"\",\n                      (uptr->password && !(flags & APR_URI_UNP_OMITPASSWORD))\n                          ? \":\" : \"\",\n                      (uptr->password && !(flags & APR_URI_UNP_OMITPASSWORD))\n                          ? ((flags & APR_URI_UNP_REVEALPASSWORD)\n                              ? uptr->password : \"XXXXXXXX\")\n                          : \"\",\n",
                    "rendered": {
                      "text": "                          ? uptr->user : \"\",\n                      (uptr->password && !(flags & APR_URI_UNP_OMITPASSWORD))\n                          ? \":\" : \"\",\n                      (uptr->password && !(flags & APR_URI_UNP_OMITPASSWORD))\n                          ? ((flags & APR_URI_UNP_REVEALPASSWORD)\n                              ? uptr->password : \"XXXXXXXX\")\n                          : \"\",\n",
                      "markdown": "`                          ? uptr->user : \"\",\n                      (uptr->password && !(flags & APR_URI_UNP_OMITPASSWORD))\n                          ? \":\" : \"\",\n                      (uptr->password && !(flags & APR_URI_UNP_OMITPASSWORD))\n                          ? ((flags & APR_URI_UNP_REVEALPASSWORD)\n                              ? uptr->password : \"XXXXXXXX\")\n                          : \"\",\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/uri/apr_uri.c"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 67,
                  "endLine": 105,
                  "endColumn": 75,
                  "snippet": {
                    "text": "            ret = apr_pstrcat(p,\n                      (uptr->user     && !(flags & APR_URI_UNP_OMITUSER))\n                          ? uptr->user : \"\",\n                      (uptr->password && !(flags & APR_URI_UNP_OMITPASSWORD))\n                          ? \":\" : \"\",\n                      (uptr->password && !(flags & APR_URI_UNP_OMITPASSWORD))\n                          ? ((flags & APR_URI_UNP_REVEALPASSWORD)\n",
                    "rendered": {
                      "text": "            ret = apr_pstrcat(p,\n                      (uptr->user     && !(flags & APR_URI_UNP_OMITUSER))\n                          ? uptr->user : \"\",\n                      (uptr->password && !(flags & APR_URI_UNP_OMITPASSWORD))\n                          ? \":\" : \"\",\n                      (uptr->password && !(flags & APR_URI_UNP_OMITPASSWORD))\n                          ? ((flags & APR_URI_UNP_REVEALPASSWORD)\n",
                      "markdown": "`            ret = apr_pstrcat(p,\n                      (uptr->user     && !(flags & APR_URI_UNP_OMITUSER))\n                          ? uptr->user : \"\",\n                      (uptr->password && !(flags & APR_URI_UNP_OMITPASSWORD))\n                          ? \":\" : \"\",\n                      (uptr->password && !(flags & APR_URI_UNP_OMITPASSWORD))\n                          ? ((flags & APR_URI_UNP_REVEALPASSWORD)\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/uri/apr_uri.c"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 29,
                  "endLine": 105,
                  "endColumn": 37,
                  "snippet": {
                    "text": "            ret = apr_pstrcat(p,\n                      (uptr->user     && !(flags & APR_URI_UNP_OMITUSER))\n                          ? uptr->user : \"\",\n                      (uptr->password && !(flags & APR_URI_UNP_OMITPASSWORD))\n                          ? \":\" : \"\",\n                      (uptr->password && !(flags & APR_URI_UNP_OMITPASSWORD))\n                          ? ((flags & APR_URI_UNP_REVEALPASSWORD)\n",
                    "rendered": {
                      "text": "            ret = apr_pstrcat(p,\n                      (uptr->user     && !(flags & APR_URI_UNP_OMITUSER))\n                          ? uptr->user : \"\",\n                      (uptr->password && !(flags & APR_URI_UNP_OMITPASSWORD))\n                          ? \":\" : \"\",\n                      (uptr->password && !(flags & APR_URI_UNP_OMITPASSWORD))\n                          ? ((flags & APR_URI_UNP_REVEALPASSWORD)\n",
                      "markdown": "`            ret = apr_pstrcat(p,\n                      (uptr->user     && !(flags & APR_URI_UNP_OMITUSER))\n                          ? uptr->user : \"\",\n                      (uptr->password && !(flags & APR_URI_UNP_OMITPASSWORD))\n                          ? \":\" : \"\",\n                      (uptr->password && !(flags & APR_URI_UNP_OMITPASSWORD))\n                          ? ((flags & APR_URI_UNP_REVEALPASSWORD)\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/uri/apr_uri.c"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 32,
                  "endLine": 101,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n        /* Construct a \"user:password@\" string, honoring the passed\n         * APR_URI_UNP_ flags: */\n        if (uptr->user || uptr->password) {\n            ret = apr_pstrcat(p,\n                      (uptr->user     && !(flags & APR_URI_UNP_OMITUSER))\n                          ? uptr->user : \"\",\n",
                    "rendered": {
                      "text": "\n        /* Construct a \"user:password@\" string, honoring the passed\n         * APR_URI_UNP_ flags: */\n        if (uptr->user || uptr->password) {\n            ret = apr_pstrcat(p,\n                      (uptr->user     && !(flags & APR_URI_UNP_OMITUSER))\n                          ? uptr->user : \"\",\n",
                      "markdown": "`\n        /* Construct a \"user:password@\" string, honoring the passed\n         * APR_URI_UNP_ flags: */\n        if (uptr->user || uptr->password) {\n            ret = apr_pstrcat(p,\n                      (uptr->user     && !(flags & APR_URI_UNP_OMITUSER))\n                          ? uptr->user : \"\",\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/uri/apr_uri.c"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 29,
                  "endLine": 99,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    /* If suppressing the site part, omit both user name & scheme://hostname */\n    if (!(flags & APR_URI_UNP_OMITSITEPART)) {\n\n        /* Construct a \"user:password@\" string, honoring the passed\n         * APR_URI_UNP_ flags: */\n        if (uptr->user || uptr->password) {\n            ret = apr_pstrcat(p,\n",
                    "rendered": {
                      "text": "    /* If suppressing the site part, omit both user name & scheme://hostname */\n    if (!(flags & APR_URI_UNP_OMITSITEPART)) {\n\n        /* Construct a \"user:password@\" string, honoring the passed\n         * APR_URI_UNP_ flags: */\n        if (uptr->user || uptr->password) {\n            ret = apr_pstrcat(p,\n",
                      "markdown": "`    /* If suppressing the site part, omit both user name & scheme://hostname */\n    if (!(flags & APR_URI_UNP_OMITSITEPART)) {\n\n        /* Construct a \"user:password@\" string, honoring the passed\n         * APR_URI_UNP_ flags: */\n        if (uptr->user || uptr->password) {\n            ret = apr_pstrcat(p,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/uri/apr_uri.c"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 27,
                  "endLine": 88,
                  "endColumn": 35,
                  "snippet": {
                    "text": "}\n\n/* Unparse a apr_uri_t structure to an URI string.\n * Optionally suppress the password for security reasons.\n */\nAPR_DECLARE(char *) apr_uri_unparse(apr_pool_t *p,\n                                    const apr_uri_t *uptr,\n",
                    "rendered": {
                      "text": "}\n\n/* Unparse a apr_uri_t structure to an URI string.\n * Optionally suppress the password for security reasons.\n */\nAPR_DECLARE(char *) apr_uri_unparse(apr_pool_t *p,\n                                    const apr_uri_t *uptr,\n",
                      "markdown": "`}\n\n/* Unparse a apr_uri_t structure to an URI string.\n * Optionally suppress the password for security reasons.\n */\nAPR_DECLARE(char *) apr_uri_unparse(apr_pool_t *p,\n                                    const apr_uri_t *uptr,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/uri/apr_uri.c"
                },
                "region": {
                  "startLine": 951,
                  "startColumn": 10,
                  "endLine": 951,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    if (s == NULL) {\n        return APR_EGENERAL;\n    }\n    uptr->hostname = apr_pstrndup(p, hostinfo, s - hostinfo - v6_offset1);\n    ++s;\n    uptr->port_str = apr_pstrdup(p, s);\n    if (*s != '\\0') {\n",
                    "rendered": {
                      "text": "    if (s == NULL) {\n        return APR_EGENERAL;\n    }\n    uptr->hostname = apr_pstrndup(p, hostinfo, s - hostinfo - v6_offset1);\n    ++s;\n    uptr->port_str = apr_pstrdup(p, s);\n    if (*s != '\\0') {\n",
                      "markdown": "`    if (s == NULL) {\n        return APR_EGENERAL;\n    }\n    uptr->hostname = apr_pstrndup(p, hostinfo, s - hostinfo - v6_offset1);\n    ++s;\n    uptr->port_str = apr_pstrdup(p, s);\n    if (*s != '\\0') {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/uri/apr_uri.c"
                },
                "region": {
                  "startLine": 879,
                  "startColumn": 14,
                  "endLine": 879,
                  "endColumn": 22,
                  "snippet": {
                    "text": "                                            uri - hostinfo - v6_offset2);\n            goto deal_with_path;\n        }\n        uptr->hostname = apr_pstrmemdup(p,\n                                        hostinfo + v6_offset1,\n                                        s - hostinfo - v6_offset2);\n        ++s;\n",
                    "rendered": {
                      "text": "                                            uri - hostinfo - v6_offset2);\n            goto deal_with_path;\n        }\n        uptr->hostname = apr_pstrmemdup(p,\n                                        hostinfo + v6_offset1,\n                                        s - hostinfo - v6_offset2);\n        ++s;\n",
                      "markdown": "`                                            uri - hostinfo - v6_offset2);\n            goto deal_with_path;\n        }\n        uptr->hostname = apr_pstrmemdup(p,\n                                        hostinfo + v6_offset1,\n                                        s - hostinfo - v6_offset2);\n        ++s;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/uri/apr_uri.c"
                },
                "region": {
                  "startLine": 874,
                  "startColumn": 18,
                  "endLine": 874,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        }\n        if (s == NULL) {\n            /* we expect the common case to have no port */\n            uptr->hostname = apr_pstrmemdup(p,\n                                            hostinfo + v6_offset1,\n                                            uri - hostinfo - v6_offset2);\n            goto deal_with_path;\n",
                    "rendered": {
                      "text": "        }\n        if (s == NULL) {\n            /* we expect the common case to have no port */\n            uptr->hostname = apr_pstrmemdup(p,\n                                            hostinfo + v6_offset1,\n                                            uri - hostinfo - v6_offset2);\n            goto deal_with_path;\n",
                      "markdown": "`        }\n        if (s == NULL) {\n            /* we expect the common case to have no port */\n            uptr->hostname = apr_pstrmemdup(p,\n                                            hostinfo + v6_offset1,\n                                            uri - hostinfo - v6_offset2);\n            goto deal_with_path;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/uri/apr_uri.c"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 56,
                  "endLine": 132,
                  "endColumn": 64,
                  "snippet": {
                    "text": "                 uptr->port == 0 ||\n                 uptr->port == apr_uri_port_of_scheme(uptr->scheme));\n\n            ret = apr_pstrcat(p, \"//\", ret, lbrk, uptr->hostname, rbrk,\n                        is_default_port ? \"\" : \":\",\n                        is_default_port ? \"\" : uptr->port_str,\n                        NULL);\n",
                    "rendered": {
                      "text": "                 uptr->port == 0 ||\n                 uptr->port == apr_uri_port_of_scheme(uptr->scheme));\n\n            ret = apr_pstrcat(p, \"//\", ret, lbrk, uptr->hostname, rbrk,\n                        is_default_port ? \"\" : \":\",\n                        is_default_port ? \"\" : uptr->port_str,\n                        NULL);\n",
                      "markdown": "`                 uptr->port == 0 ||\n                 uptr->port == apr_uri_port_of_scheme(uptr->scheme));\n\n            ret = apr_pstrcat(p, \"//\", ret, lbrk, uptr->hostname, rbrk,\n                        is_default_port ? \"\" : \":\",\n                        is_default_port ? \"\" : uptr->port_str,\n                        NULL);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/uri/apr_uri.c"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 29,
                  "endLine": 122,
                  "endColumn": 37,
                  "snippet": {
                    "text": "            int is_default_port;\n            const char *lbrk = \"\", *rbrk = \"\";\n\n            if (strchr(uptr->hostname, ':')) { /* v6 literal */\n                lbrk = \"[\";\n                rbrk = \"]\";\n            }\n",
                    "rendered": {
                      "text": "            int is_default_port;\n            const char *lbrk = \"\", *rbrk = \"\";\n\n            if (strchr(uptr->hostname, ':')) { /* v6 literal */\n                lbrk = \"[\";\n                rbrk = \"]\";\n            }\n",
                      "markdown": "`            int is_default_port;\n            const char *lbrk = \"\", *rbrk = \"\";\n\n            if (strchr(uptr->hostname, ':')) { /* v6 literal */\n                lbrk = \"[\";\n                rbrk = \"]\";\n            }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/uri/apr_uri.c"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 18,
                  "endLine": 118,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        }\n\n        /* Construct scheme://site string */\n        if (uptr->hostname) {\n            int is_default_port;\n            const char *lbrk = \"\", *rbrk = \"\";\n\n",
                    "rendered": {
                      "text": "        }\n\n        /* Construct scheme://site string */\n        if (uptr->hostname) {\n            int is_default_port;\n            const char *lbrk = \"\", *rbrk = \"\";\n\n",
                      "markdown": "`        }\n\n        /* Construct scheme://site string */\n        if (uptr->hostname) {\n            int is_default_port;\n            const char *lbrk = \"\", *rbrk = \"\";\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/config.layout"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 47,
                  "endLine": 9,
                  "endColumn": 51,
                  "snippet": {
                    "text": "##  - when no --enable-layout option is given, the default layout is `apr'\n##  - a trailing plus character (`+') on paths is replaced with a \n##    `/<target>' suffix where <target> is currently hardcoded to 'apr'.\n##    (This may become a configurable parameter at some point.)\n##\n\n#   Classical APR path layout designed for parallel installs.\n",
                    "rendered": {
                      "text": "##  - when no --enable-layout option is given, the default layout is `apr'\n##  - a trailing plus character (`+') on paths is replaced with a \n##    `/<target>' suffix where <target> is currently hardcoded to 'apr'.\n##    (This may become a configurable parameter at some point.)\n##\n\n#   Classical APR path layout designed for parallel installs.\n",
                      "markdown": "`##  - when no --enable-layout option is given, the default layout is `apr'\n##  - a trailing plus character (`+') on paths is replaced with a \n##    `/<target>' suffix where <target> is currently hardcoded to 'apr'.\n##    (This may become a configurable parameter at some point.)\n##\n\n#   Classical APR path layout designed for parallel installs.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/config.layout"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 3,
                  "endLine": 97,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    runtimedir:    ${localstatedir}/run\n</Layout>\n\n#   Red Hat Linux 7.x layout\n<Layout RedHat>\n    prefix:        /usr\n    exec_prefix:   ${prefix}\n",
                    "rendered": {
                      "text": "    runtimedir:    ${localstatedir}/run\n</Layout>\n\n#   Red Hat Linux 7.x layout\n<Layout RedHat>\n    prefix:        /usr\n    exec_prefix:   ${prefix}\n",
                      "markdown": "`    runtimedir:    ${localstatedir}/run\n</Layout>\n\n#   Red Hat Linux 7.x layout\n<Layout RedHat>\n    prefix:        /usr\n    exec_prefix:   ${prefix}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/NWGNUmakefile"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 25,
                  "endLine": 135,
                  "endColumn": 40,
                  "snippet": {
                    "text": "NLM_THREAD_NAME\t=\n#\n# If this is specified, it will override VERSION value in\n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                    "rendered": {
                      "text": "NLM_THREAD_NAME\t=\n#\n# If this is specified, it will override VERSION value in\n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                      "markdown": "`NLM_THREAD_NAME\t=\n#\n# If this is specified, it will override VERSION value in\n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/NWGNUmakefile"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 30,
                  "endLine": 23,
                  "endColumn": 72,
                  "snippet": {
                    "text": "endif\n\n#\n# Get the 'head' of the build environment.  This includes default targets and\n# paths to tools\n#\nifndef APR_WORK\n",
                    "rendered": {
                      "text": "endif\n\n#\n# Get the 'head' of the build environment.  This includes default targets and\n# paths to tools\n#\nifndef APR_WORK\n",
                      "markdown": "`endif\n\n#\n# Get the 'head' of the build environment.  This includes default targets and\n# paths to tools\n#\nifndef APR_WORK\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/NWGNUmakefile"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 27,
                  "endLine": 39,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                    "rendered": {
                      "text": "#\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                      "markdown": "`#\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/README.FREETDS"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 2,
                  "endLine": 8,
                  "endColumn": 10,
                  "snippet": {
                    "text": "to manage maintenance for yourself, you can patch the build and\nwork through issues that affect you, but you're on your own.\n\nWe expect that for most users, the ODBC driver will serve as\nan alternative.\n\nSorry.\n",
                    "rendered": {
                      "text": "to manage maintenance for yourself, you can patch the build and\nwork through issues that affect you, but you're on your own.\n\nWe expect that for most users, the ODBC driver will serve as\nan alternative.\n\nSorry.\n",
                      "markdown": "`to manage maintenance for yourself, you can patch the build and\nwork through issues that affect you, but you're on your own.\n\nWe expect that for most users, the ODBC driver will serve as\nan alternative.\n\nSorry.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/dbm.m4"
                },
                "region": {
                  "startLine": 463,
                  "startColumn": 24,
                  "endLine": 463,
                  "endColumn": 28,
                  "snippet": {
                    "text": "AC_DEFUN([APU_CHECK_DB_ALL], [\n  all_places=$1\n\n  # Start version search at version 6.9\n  db_version=69\n  while [[ $db_version -ge 40 ]]\n  do\n",
                    "rendered": {
                      "text": "AC_DEFUN([APU_CHECK_DB_ALL], [\n  all_places=$1\n\n  # Start version search at version 6.9\n  db_version=69\n  while [[ $db_version -ge 40 ]]\n  do\n",
                      "markdown": "`AC_DEFUN([APU_CHECK_DB_ALL], [\n  all_places=$1\n\n  # Start version search at version 6.9\n  db_version=69\n  while [[ $db_version -ge 40 ]]\n  do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/dbm.m4"
                },
                "region": {
                  "startLine": 437,
                  "startColumn": 26,
                  "endLine": 437,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    ;;\n  db[[456]])\n    db_major=`echo \"$requested\" | sed -e 's/db//'`\n    # Start version search at version x.9\n    db_minor=9\n    while [[ $db_minor -ge 0 ]]\n    do\n",
                    "rendered": {
                      "text": "    ;;\n  db[[456]])\n    db_major=`echo \"$requested\" | sed -e 's/db//'`\n    # Start version search at version x.9\n    db_minor=9\n    while [[ $db_minor -ge 0 ]]\n    do\n",
                      "markdown": "`    ;;\n  db[[456]])\n    db_major=`echo \"$requested\" | sed -e 's/db//'`\n    # Start version search at version x.9\n    db_minor=9\n    while [[ $db_minor -ge 0 ]]\n    do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/dbm.m4"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 54,
                  "endLine": 8,
                  "snippet": {
                    "text": "dnl this work for additional information regarding copyright ownership.\ndnl The ASF licenses this file to You under the Apache License, Version 2.0\ndnl (the \"License\"); you may not use this file except in compliance with\ndnl the License.  You may obtain a copy of the License at\ndnl\ndnl     http://www.apache.org/licenses/LICENSE-2.0\ndnl\ndnl Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "dnl this work for additional information regarding copyright ownership.\ndnl The ASF licenses this file to You under the Apache License, Version 2.0\ndnl (the \"License\"); you may not use this file except in compliance with\ndnl the License.  You may obtain a copy of the License at\ndnl\ndnl     http://www.apache.org/licenses/LICENSE-2.0\ndnl\ndnl Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`dnl this work for additional information regarding copyright ownership.\ndnl The ASF licenses this file to You under the Apache License, Version 2.0\ndnl (the \"License\"); you may not use this file except in compliance with\ndnl the License.  You may obtain a copy of the License at\ndnl\ndnl     http://www.apache.org/licenses/LICENSE-2.0\ndnl\ndnl Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/dbm.m4"
                },
                "region": {
                  "startLine": 738,
                  "startColumn": 18,
                  "endLine": 738,
                  "endColumn": 24,
                  "snippet": {
                    "text": "      ;;\n  esac\n\n  dnl Yes, it'd be nice if we could collate the output in an order\n  dnl so that the AC_MSG_CHECKING would be output before the actual\n  dnl checks, but it isn't happening now.\n  AC_MSG_CHECKING(for default DBM)\n",
                    "rendered": {
                      "text": "      ;;\n  esac\n\n  dnl Yes, it'd be nice if we could collate the output in an order\n  dnl so that the AC_MSG_CHECKING would be output before the actual\n  dnl checks, but it isn't happening now.\n  AC_MSG_CHECKING(for default DBM)\n",
                      "markdown": "`      ;;\n  esac\n\n  dnl Yes, it'd be nice if we could collate the output in an order\n  dnl so that the AC_MSG_CHECKING would be output before the actual\n  dnl checks, but it isn't happening now.\n  AC_MSG_CHECKING(for default DBM)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/dbm.m4"
                },
                "region": {
                  "startLine": 725,
                  "startColumn": 40,
                  "endLine": 725,
                  "endColumn": 45,
                  "snippet": {
                    "text": "      ;;\n    db[[456]][[0-9]])\n      apu_use_db=1\n      apu_default_dbm=`echo $requested | sed -e 's/.$//'`\n      ;;\n    default)\n      dnl ### use more sophisticated DBMs for the default?\n",
                    "rendered": {
                      "text": "      ;;\n    db[[456]][[0-9]])\n      apu_use_db=1\n      apu_default_dbm=`echo $requested | sed -e 's/.$//'`\n      ;;\n    default)\n      dnl ### use more sophisticated DBMs for the default?\n",
                      "markdown": "`      ;;\n    db[[456]][[0-9]])\n      apu_use_db=1\n      apu_default_dbm=`echo $requested | sed -e 's/.$//'`\n      ;;\n    default)\n      dnl ### use more sophisticated DBMs for the default?\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/dbm.m4"
                },
                "region": {
                  "startLine": 688,
                  "startColumn": 48,
                  "endLine": 688,
                  "endColumn": 56,
                  "snippet": {
                    "text": "      [Find the Berkeley DB header and library in `PATH/include' and\n      `PATH/lib'.  If PATH is of the form `HEADER:LIB', then search\n      for header files in HEADER, and the library in LIB.  If you omit\n      the `=PATH' part completely, the configure script will search\n      for Berkeley DB in a number of standard places.])],\n  [\n    if test \"$withval\" = \"yes\"; then\n",
                    "rendered": {
                      "text": "      [Find the Berkeley DB header and library in `PATH/include' and\n      `PATH/lib'.  If PATH is of the form `HEADER:LIB', then search\n      for header files in HEADER, and the library in LIB.  If you omit\n      the `=PATH' part completely, the configure script will search\n      for Berkeley DB in a number of standard places.])],\n  [\n    if test \"$withval\" = \"yes\"; then\n",
                      "markdown": "`      [Find the Berkeley DB header and library in `PATH/include' and\n      `PATH/lib'.  If PATH is of the form `HEADER:LIB', then search\n      for header files in HEADER, and the library in LIB.  If you omit\n      the `=PATH' part completely, the configure script will search\n      for Berkeley DB in a number of standard places.])],\n  [\n    if test \"$withval\" = \"yes\"; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/dbm.m4"
                },
                "region": {
                  "startLine": 679,
                  "startColumn": 27,
                  "endLine": 679,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    LIBS=\"$apu_db_xtra_libs $LIBS\"\n  fi\n\n  dnl We're going to try to find the highest version of Berkeley DB supported.\n  dnl\n  dnl Note that we only do this if the user requested it, since the Sleepycat\n  dnl license is viral and requires distribution of source along with programs\n",
                    "rendered": {
                      "text": "    LIBS=\"$apu_db_xtra_libs $LIBS\"\n  fi\n\n  dnl We're going to try to find the highest version of Berkeley DB supported.\n  dnl\n  dnl Note that we only do this if the user requested it, since the Sleepycat\n  dnl license is viral and requires distribution of source along with programs\n",
                      "markdown": "`    LIBS=\"$apu_db_xtra_libs $LIBS\"\n  fi\n\n  dnl We're going to try to find the highest version of Berkeley DB supported.\n  dnl\n  dnl Note that we only do this if the user requested it, since the Sleepycat\n  dnl license is viral and requires distribution of source along with programs\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/dbm.m4"
                },
                "region": {
                  "startLine": 615,
                  "startColumn": 48,
                  "endLine": 615,
                  "endColumn": 56,
                  "snippet": {
                    "text": "      Find the NDBM header and library in `PATH/include' and \n      `PATH/lib'.  If PATH is of the form `HEADER:LIB', then search \n      for header files in HEADER, and the library in LIB.  If you omit\n      the `=PATH' part completely, the configure script will search\n      for NDBM in a number of standard places.])],\n  [\n    apu_have_ndbm=0\n",
                    "rendered": {
                      "text": "      Find the NDBM header and library in `PATH/include' and \n      `PATH/lib'.  If PATH is of the form `HEADER:LIB', then search \n      for header files in HEADER, and the library in LIB.  If you omit\n      the `=PATH' part completely, the configure script will search\n      for NDBM in a number of standard places.])],\n  [\n    apu_have_ndbm=0\n",
                      "markdown": "`      Find the NDBM header and library in `PATH/include' and \n      `PATH/lib'.  If PATH is of the form `HEADER:LIB', then search \n      for header files in HEADER, and the library in LIB.  If you omit\n      the `=PATH' part completely, the configure script will search\n      for NDBM in a number of standard places.])],\n  [\n    apu_have_ndbm=0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/dbm.m4"
                },
                "region": {
                  "startLine": 612,
                  "startColumn": 5,
                  "endLine": 612,
                  "endColumn": 11,
                  "snippet": {
                    "text": "  ])\n\n  AC_ARG_WITH([ndbm], [APR_HELP_STRING([--with-ndbm=PATH], [\n      Find the NDBM header and library in `PATH/include' and \n      `PATH/lib'.  If PATH is of the form `HEADER:LIB', then search \n      for header files in HEADER, and the library in LIB.  If you omit\n      the `=PATH' part completely, the configure script will search\n",
                    "rendered": {
                      "text": "  ])\n\n  AC_ARG_WITH([ndbm], [APR_HELP_STRING([--with-ndbm=PATH], [\n      Find the NDBM header and library in `PATH/include' and \n      `PATH/lib'.  If PATH is of the form `HEADER:LIB', then search \n      for header files in HEADER, and the library in LIB.  If you omit\n      the `=PATH' part completely, the configure script will search\n",
                      "markdown": "`  ])\n\n  AC_ARG_WITH([ndbm], [APR_HELP_STRING([--with-ndbm=PATH], [\n      Find the NDBM header and library in `PATH/include' and \n      `PATH/lib'.  If PATH is of the form `HEADER:LIB', then search \n      for header files in HEADER, and the library in LIB.  If you omit\n      the `=PATH' part completely, the configure script will search\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/dbm.m4"
                },
                "region": {
                  "startLine": 468,
                  "startColumn": 32,
                  "endLine": 468,
                  "endColumn": 37,
                  "snippet": {
                    "text": "  while [[ $db_version -ge 40 ]]\n  do\n    db_major=`echo $db_version | sed -e 's/.$//'`\n    db_minor=`echo $db_version | sed -e 's/.//'`\n    APU_CHECK_DBXY(\"$all_places\", \"$db_major\", \"$db_minor\")\n    if test \"$apu_have_db\" = \"1\"; then\n      break\n",
                    "rendered": {
                      "text": "  while [[ $db_version -ge 40 ]]\n  do\n    db_major=`echo $db_version | sed -e 's/.$//'`\n    db_minor=`echo $db_version | sed -e 's/.//'`\n    APU_CHECK_DBXY(\"$all_places\", \"$db_major\", \"$db_minor\")\n    if test \"$apu_have_db\" = \"1\"; then\n      break\n",
                      "markdown": "`  while [[ $db_version -ge 40 ]]\n  do\n    db_major=`echo $db_version | sed -e 's/.$//'`\n    db_minor=`echo $db_version | sed -e 's/.//'`\n    APU_CHECK_DBXY(\"$all_places\", \"$db_major\", \"$db_minor\")\n    if test \"$apu_have_db\" = \"1\"; then\n      break\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/dbm.m4"
                },
                "region": {
                  "startLine": 467,
                  "startColumn": 32,
                  "endLine": 467,
                  "endColumn": 37,
                  "snippet": {
                    "text": "  db_version=69\n  while [[ $db_version -ge 40 ]]\n  do\n    db_major=`echo $db_version | sed -e 's/.$//'`\n    db_minor=`echo $db_version | sed -e 's/.//'`\n    APU_CHECK_DBXY(\"$all_places\", \"$db_major\", \"$db_minor\")\n    if test \"$apu_have_db\" = \"1\"; then\n",
                    "rendered": {
                      "text": "  db_version=69\n  while [[ $db_version -ge 40 ]]\n  do\n    db_major=`echo $db_version | sed -e 's/.$//'`\n    db_minor=`echo $db_version | sed -e 's/.//'`\n    APU_CHECK_DBXY(\"$all_places\", \"$db_major\", \"$db_minor\")\n    if test \"$apu_have_db\" = \"1\"; then\n",
                      "markdown": "`  db_version=69\n  while [[ $db_version -ge 40 ]]\n  do\n    db_major=`echo $db_version | sed -e 's/.$//'`\n    db_minor=`echo $db_version | sed -e 's/.//'`\n    APU_CHECK_DBXY(\"$all_places\", \"$db_major\", \"$db_minor\")\n    if test \"$apu_have_db\" = \"1\"; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/dbm.m4"
                },
                "region": {
                  "startLine": 436,
                  "startColumn": 33,
                  "endLine": 436,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    fi\n    ;;\n  db[[456]])\n    db_major=`echo \"$requested\" | sed -e 's/db//'`\n    # Start version search at version x.9\n    db_minor=9\n    while [[ $db_minor -ge 0 ]]\n",
                    "rendered": {
                      "text": "    fi\n    ;;\n  db[[456]])\n    db_major=`echo \"$requested\" | sed -e 's/db//'`\n    # Start version search at version x.9\n    db_minor=9\n    while [[ $db_minor -ge 0 ]]\n",
                      "markdown": "`    fi\n    ;;\n  db[[456]])\n    db_major=`echo \"$requested\" | sed -e 's/db//'`\n    # Start version search at version x.9\n    db_minor=9\n    while [[ $db_minor -ge 0 ]]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/dbm.m4"
                },
                "region": {
                  "startLine": 429,
                  "startColumn": 33,
                  "endLine": 429,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    ;;\n  db[[456]][[0-9]])\n    db_major=`echo \"$requested\" | sed -e 's/db//' -e 's/.$//'`\n    db_minor=`echo \"$requested\" | sed -e 's/db//' -e 's/.//'`\n    APU_CHECK_DBXY(\"$check_places\", \"$db_major\", \"$db_minor\")\n    if test \"$apu_db_version\" != \"$db_major\"; then\n      AC_MSG_ERROR(Berkeley db$db_major not found)\n",
                    "rendered": {
                      "text": "    ;;\n  db[[456]][[0-9]])\n    db_major=`echo \"$requested\" | sed -e 's/db//' -e 's/.$//'`\n    db_minor=`echo \"$requested\" | sed -e 's/db//' -e 's/.//'`\n    APU_CHECK_DBXY(\"$check_places\", \"$db_major\", \"$db_minor\")\n    if test \"$apu_db_version\" != \"$db_major\"; then\n      AC_MSG_ERROR(Berkeley db$db_major not found)\n",
                      "markdown": "`    ;;\n  db[[456]][[0-9]])\n    db_major=`echo \"$requested\" | sed -e 's/db//' -e 's/.$//'`\n    db_minor=`echo \"$requested\" | sed -e 's/db//' -e 's/.//'`\n    APU_CHECK_DBXY(\"$check_places\", \"$db_major\", \"$db_minor\")\n    if test \"$apu_db_version\" != \"$db_major\"; then\n      AC_MSG_ERROR(Berkeley db$db_major not found)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/dbm.m4"
                },
                "region": {
                  "startLine": 428,
                  "startColumn": 33,
                  "endLine": 428,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    fi\n    ;;\n  db[[456]][[0-9]])\n    db_major=`echo \"$requested\" | sed -e 's/db//' -e 's/.$//'`\n    db_minor=`echo \"$requested\" | sed -e 's/db//' -e 's/.//'`\n    APU_CHECK_DBXY(\"$check_places\", \"$db_major\", \"$db_minor\")\n    if test \"$apu_db_version\" != \"$db_major\"; then\n",
                    "rendered": {
                      "text": "    fi\n    ;;\n  db[[456]][[0-9]])\n    db_major=`echo \"$requested\" | sed -e 's/db//' -e 's/.$//'`\n    db_minor=`echo \"$requested\" | sed -e 's/db//' -e 's/.//'`\n    APU_CHECK_DBXY(\"$check_places\", \"$db_major\", \"$db_minor\")\n    if test \"$apu_db_version\" != \"$db_major\"; then\n",
                      "markdown": "`    fi\n    ;;\n  db[[456]][[0-9]])\n    db_major=`echo \"$requested\" | sed -e 's/db//' -e 's/.$//'`\n    db_minor=`echo \"$requested\" | sed -e 's/db//' -e 's/.//'`\n    APU_CHECK_DBXY(\"$check_places\", \"$db_major\", \"$db_minor\")\n    if test \"$apu_db_version\" != \"$db_major\"; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/dbm.m4"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 5,
                  "endLine": 210,
                  "endColumn": 11,
                  "snippet": {
                    "text": "dnl   an appropriate version installed, or `no' otherwise.\ndnl\ndnl   This macro uses the Berkeley DB library function `db_version' to\ndnl   find the version.  If the library installed doesn't have this\ndnl   function, then this macro assumes it is too old.\n\ndnl   NOTE: This is pretty messed up.  It seems that the FreeBSD port of\n",
                    "rendered": {
                      "text": "dnl   an appropriate version installed, or `no' otherwise.\ndnl\ndnl   This macro uses the Berkeley DB library function `db_version' to\ndnl   find the version.  If the library installed doesn't have this\ndnl   function, then this macro assumes it is too old.\n\ndnl   NOTE: This is pretty messed up.  It seems that the FreeBSD port of\n",
                      "markdown": "`dnl   an appropriate version installed, or `no' otherwise.\ndnl\ndnl   This macro uses the Berkeley DB library function `db_version' to\ndnl   find the version.  If the library installed doesn't have this\ndnl   function, then this macro assumes it is too old.\n\ndnl   NOTE: This is pretty messed up.  It seems that the FreeBSD port of\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/dbm.m4"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 23,
                  "endLine": 176,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    ;;\n  *\":\"*)\n    header=\"`echo $found | sed -e 's/:.*$//'`\"\n    lib=\"`echo $found | sed -e 's/^.*://'`\"\n\n    APR_ADDTO(INCLUDES, [-I$header])\n    APR_ADDTO(LDFLAGS, [-L$lib])\n",
                    "rendered": {
                      "text": "    ;;\n  *\":\"*)\n    header=\"`echo $found | sed -e 's/:.*$//'`\"\n    lib=\"`echo $found | sed -e 's/^.*://'`\"\n\n    APR_ADDTO(INCLUDES, [-I$header])\n    APR_ADDTO(LDFLAGS, [-L$lib])\n",
                      "markdown": "`    ;;\n  *\":\"*)\n    header=\"`echo $found | sed -e 's/:.*$//'`\"\n    lib=\"`echo $found | sed -e 's/^.*://'`\"\n\n    APR_ADDTO(INCLUDES, [-I$header])\n    APR_ADDTO(LDFLAGS, [-L$lib])\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/dbm.m4"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 26,
                  "endLine": 175,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    apu_have_db=1\n    ;;\n  *\":\"*)\n    header=\"`echo $found | sed -e 's/:.*$//'`\"\n    lib=\"`echo $found | sed -e 's/^.*://'`\"\n\n    APR_ADDTO(INCLUDES, [-I$header])\n",
                    "rendered": {
                      "text": "    apu_have_db=1\n    ;;\n  *\":\"*)\n    header=\"`echo $found | sed -e 's/:.*$//'`\"\n    lib=\"`echo $found | sed -e 's/^.*://'`\"\n\n    APR_ADDTO(INCLUDES, [-I$header])\n",
                      "markdown": "`    apu_have_db=1\n    ;;\n  *\":\"*)\n    header=\"`echo $found | sed -e 's/:.*$//'`\"\n    lib=\"`echo $found | sed -e 's/^.*://'`\"\n\n    APR_ADDTO(INCLUDES, [-I$header])\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/dbm.m4"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 22,
                  "endLine": 122,
                  "endColumn": 27,
                  "snippet": {
                    "text": "            # switches.\n            changequote(,)\n            cache_id=\"`echo apu_cv_check_berkeley_db_$1_$2_$3_${bdb_header}_${bdb_libname}_in_${bdb_place} \\\n                     | sed -e 's/[^a-zA-Z0-9_]/_/g'`\"\n            changequote([,])\n\n            AC_MSG_CHECKING([for -l$bdb_libname])\n",
                    "rendered": {
                      "text": "            # switches.\n            changequote(,)\n            cache_id=\"`echo apu_cv_check_berkeley_db_$1_$2_$3_${bdb_header}_${bdb_libname}_in_${bdb_place} \\\n                     | sed -e 's/[^a-zA-Z0-9_]/_/g'`\"\n            changequote([,])\n\n            AC_MSG_CHECKING([for -l$bdb_libname])\n",
                      "markdown": "`            # switches.\n            changequote(,)\n            cache_id=\"`echo apu_cv_check_berkeley_db_$1_$2_$3_${bdb_header}_${bdb_libname}_in_${bdb_place} \\\n                     | sed -e 's/[^a-zA-Z0-9_]/_/g'`\"\n            changequote([,])\n\n            AC_MSG_CHECKING([for -l$bdb_libname])\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/dbm.m4"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 18,
                  "endLine": 111,
                  "endColumn": 23,
                  "snippet": {
                    "text": "        # Clear the header cache variable for each location\n        changequote(,)\n        cache_id=\"`echo ac_cv_header_${bdb_header} \\\n                 | sed -e 's/[^a-zA-Z0-9_]/_/g'`\"\n        changequote([,])\n        unset $cache_id\n        AC_CHECK_HEADER([$bdb_header], [\n",
                    "rendered": {
                      "text": "        # Clear the header cache variable for each location\n        changequote(,)\n        cache_id=\"`echo ac_cv_header_${bdb_header} \\\n                 | sed -e 's/[^a-zA-Z0-9_]/_/g'`\"\n        changequote([,])\n        unset $cache_id\n        AC_CHECK_HEADER([$bdb_header], [\n",
                      "markdown": "`        # Clear the header cache variable for each location\n        changequote(,)\n        cache_id=\"`echo ac_cv_header_${bdb_header} \\\n                 | sed -e 's/[^a-zA-Z0-9_]/_/g'`\"\n        changequote([,])\n        unset $cache_id\n        AC_CHECK_HEADER([$bdb_header], [\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/dbm.m4"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 31,
                  "endLine": 83,
                  "endColumn": 36,
                  "snippet": {
                    "text": "      ;;\n      *\":\"* )\n        header=\"`echo $bdb_place | sed -e 's/:.*$//'`\"\n        lib=\"`echo $bdb_place | sed -e 's/^.*://'`\"\n        CPPFLAGS=\"$CPPFLAGS -I$header\"\n        LDFLAGS=\"$LDFLAGS -L$lib\"\n        description=\"$header and $lib\"\n",
                    "rendered": {
                      "text": "      ;;\n      *\":\"* )\n        header=\"`echo $bdb_place | sed -e 's/:.*$//'`\"\n        lib=\"`echo $bdb_place | sed -e 's/^.*://'`\"\n        CPPFLAGS=\"$CPPFLAGS -I$header\"\n        LDFLAGS=\"$LDFLAGS -L$lib\"\n        description=\"$header and $lib\"\n",
                      "markdown": "`      ;;\n      *\":\"* )\n        header=\"`echo $bdb_place | sed -e 's/:.*$//'`\"\n        lib=\"`echo $bdb_place | sed -e 's/^.*://'`\"\n        CPPFLAGS=\"$CPPFLAGS -I$header\"\n        LDFLAGS=\"$LDFLAGS -L$lib\"\n        description=\"$header and $lib\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/dbm.m4"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 34,
                  "endLine": 82,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        description=\"the standard places\"\n      ;;\n      *\":\"* )\n        header=\"`echo $bdb_place | sed -e 's/:.*$//'`\"\n        lib=\"`echo $bdb_place | sed -e 's/^.*://'`\"\n        CPPFLAGS=\"$CPPFLAGS -I$header\"\n        LDFLAGS=\"$LDFLAGS -L$lib\"\n",
                    "rendered": {
                      "text": "        description=\"the standard places\"\n      ;;\n      *\":\"* )\n        header=\"`echo $bdb_place | sed -e 's/:.*$//'`\"\n        lib=\"`echo $bdb_place | sed -e 's/^.*://'`\"\n        CPPFLAGS=\"$CPPFLAGS -I$header\"\n        LDFLAGS=\"$LDFLAGS -L$lib\"\n",
                      "markdown": "`        description=\"the standard places\"\n      ;;\n      *\":\"* )\n        header=\"`echo $bdb_place | sed -e 's/:.*$//'`\"\n        lib=\"`echo $bdb_place | sed -e 's/^.*://'`\"\n        CPPFLAGS=\"$CPPFLAGS -I$header\"\n        LDFLAGS=\"$LDFLAGS -L$lib\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/dbm.m4"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 54,
                  "endLine": 46,
                  "endColumn": 62,
                  "snippet": {
                    "text": "dnl\ndnl   We cache the results of individual searches under particular\ndnl   prefixes, not the overall result of whether we found Berkeley\ndnl   DB.  That way, the user can re-run the configure script with\ndnl   different --with-berkeley-db switch values, without interference\ndnl   from the cache.\n\n",
                    "rendered": {
                      "text": "dnl\ndnl   We cache the results of individual searches under particular\ndnl   prefixes, not the overall result of whether we found Berkeley\ndnl   DB.  That way, the user can re-run the configure script with\ndnl   different --with-berkeley-db switch values, without interference\ndnl   from the cache.\n\n",
                      "markdown": "`dnl\ndnl   We cache the results of individual searches under particular\ndnl   prefixes, not the overall result of whether we found Berkeley\ndnl   DB.  That way, the user can re-run the configure script with\ndnl   different --with-berkeley-db switch values, without interference\ndnl   from the cache.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/dbm.m4"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 47,
                  "endLine": 40,
                  "endColumn": 53,
                  "snippet": {
                    "text": "dnl\ndnl   This macro also checks for the `--with-berkeley-db=PATH' flag;\ndnl   if given, the macro will use the PATH specified, and the\ndnl   configuration script will die if it can't find the library.  If\ndnl   the user gives the `--without-berkeley-db' flag, the entire\ndnl   search is skipped.\ndnl\n",
                    "rendered": {
                      "text": "dnl\ndnl   This macro also checks for the `--with-berkeley-db=PATH' flag;\ndnl   if given, the macro will use the PATH specified, and the\ndnl   configuration script will die if it can't find the library.  If\ndnl   the user gives the `--without-berkeley-db' flag, the entire\ndnl   search is skipped.\ndnl\n",
                      "markdown": "`dnl\ndnl   This macro also checks for the `--with-berkeley-db=PATH' flag;\ndnl   if given, the macro will use the PATH specified, and the\ndnl   configuration script will die if it can't find the library.  If\ndnl   the user gives the `--without-berkeley-db' flag, the entire\ndnl   search is skipped.\ndnl\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/dbm.m4"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 19,
                  "endLine": 40,
                  "endColumn": 27,
                  "snippet": {
                    "text": "dnl\ndnl   This macro also checks for the `--with-berkeley-db=PATH' flag;\ndnl   if given, the macro will use the PATH specified, and the\ndnl   configuration script will die if it can't find the library.  If\ndnl   the user gives the `--without-berkeley-db' flag, the entire\ndnl   search is skipped.\ndnl\n",
                    "rendered": {
                      "text": "dnl\ndnl   This macro also checks for the `--with-berkeley-db=PATH' flag;\ndnl   if given, the macro will use the PATH specified, and the\ndnl   configuration script will die if it can't find the library.  If\ndnl   the user gives the `--without-berkeley-db' flag, the entire\ndnl   search is skipped.\ndnl\n",
                      "markdown": "`dnl\ndnl   This macro also checks for the `--with-berkeley-db=PATH' flag;\ndnl   if given, the macro will use the PATH specified, and the\ndnl   configuration script will die if it can't find the library.  If\ndnl   the user gives the `--without-berkeley-db' flag, the entire\ndnl   search is skipped.\ndnl\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/dbm.m4"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 11,
                  "endLine": 33,
                  "endColumn": 17,
                  "snippet": {
                    "text": "dnl   is a list of names of the library to attempt to link against,\ndnl   typically 'db' and 'db4'.\ndnl\ndnl   If we find a useable version, set CPPFLAGS and LIBS as\ndnl   appropriate, and set the shell variable `apu_have_db' to\ndnl   `1', and apu_db_lib to the matching lib name, and apu_db_header\ndnl   to the header to use.  Otherwise, set `apu_have_db' to `0'.\n",
                    "rendered": {
                      "text": "dnl   is a list of names of the library to attempt to link against,\ndnl   typically 'db' and 'db4'.\ndnl\ndnl   If we find a useable version, set CPPFLAGS and LIBS as\ndnl   appropriate, and set the shell variable `apu_have_db' to\ndnl   `1', and apu_db_lib to the matching lib name, and apu_db_header\ndnl   to the header to use.  Otherwise, set `apu_have_db' to `0'.\n",
                      "markdown": "`dnl   is a list of names of the library to attempt to link against,\ndnl   typically 'db' and 'db4'.\ndnl\ndnl   If we find a useable version, set CPPFLAGS and LIBS as\ndnl   appropriate, and set the shell variable `apu_have_db' to\ndnl   `1', and apu_db_lib to the matching lib name, and apu_db_header\ndnl   to the header to use.  Otherwise, set `apu_have_db' to `0'.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/find_apr.m4"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 40,
                  "endLine": 167,
                  "endColumn": 44,
                  "snippet": {
                    "text": "              apr_acceptable=\"yes\"\n              $5\n              if test \"$apr_acceptable\" != \"yes\"; then\n                AC_MSG_WARN([skipped APR at $apr_config, version not acceptable])\n                continue\n              fi])\n              apr_found=\"yes\"\n",
                    "rendered": {
                      "text": "              apr_acceptable=\"yes\"\n              $5\n              if test \"$apr_acceptable\" != \"yes\"; then\n                AC_MSG_WARN([skipped APR at $apr_config, version not acceptable])\n                continue\n              fi])\n              apr_found=\"yes\"\n",
                      "markdown": "`              apr_acceptable=\"yes\"\n              $5\n              if test \"$apr_acceptable\" != \"yes\"; then\n                AC_MSG_WARN([skipped APR at $apr_config, version not acceptable])\n                continue\n              fi])\n              apr_found=\"yes\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/find_apr.m4"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 36,
                  "endLine": 153,
                  "endColumn": 40,
                  "snippet": {
                    "text": "          apr_acceptable=\"yes\"\n          $5\n          if test \"$apr_acceptable\" != \"yes\"; then\n            AC_MSG_WARN([skipped APR at $apr_config, version not acceptable])\n            continue\n          fi])\n          apr_found=\"yes\"\n",
                    "rendered": {
                      "text": "          apr_acceptable=\"yes\"\n          $5\n          if test \"$apr_acceptable\" != \"yes\"; then\n            AC_MSG_WARN([skipped APR at $apr_config, version not acceptable])\n            continue\n          fi])\n          apr_found=\"yes\"\n",
                      "markdown": "`          apr_acceptable=\"yes\"\n          $5\n          if test \"$apr_acceptable\" != \"yes\"; then\n            AC_MSG_WARN([skipped APR at $apr_config, version not acceptable])\n            continue\n          fi])\n          apr_found=\"yes\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/find_apr.m4"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 54,
                  "endLine": 8,
                  "snippet": {
                    "text": "dnl this work for additional information regarding copyright ownership.\ndnl The ASF licenses this file to You under the Apache License, Version 2.0\ndnl (the \"License\"); you may not use this file except in compliance with\ndnl the License.  You may obtain a copy of the License at\ndnl\ndnl     http://www.apache.org/licenses/LICENSE-2.0\ndnl\ndnl Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "dnl this work for additional information regarding copyright ownership.\ndnl The ASF licenses this file to You under the Apache License, Version 2.0\ndnl (the \"License\"); you may not use this file except in compliance with\ndnl the License.  You may obtain a copy of the License at\ndnl\ndnl     http://www.apache.org/licenses/LICENSE-2.0\ndnl\ndnl Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`dnl this work for additional information regarding copyright ownership.\ndnl The ASF licenses this file to You under the Apache License, Version 2.0\ndnl (the \"License\"); you may not use this file except in compliance with\ndnl the License.  You may obtain a copy of the License at\ndnl\ndnl     http://www.apache.org/licenses/LICENSE-2.0\ndnl\ndnl Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/find_apr.m4"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 33,
                  "endLine": 184,
                  "endColumn": 39,
                  "snippet": {
                    "text": "      apr_bundled_major=\"`sed -n '/#define.*APR_MAJOR_VERSION/s/^[^0-9]*\\([0-9]*\\).*$/\\1/p' \\\"$1/include/apr_version.h\\\"`\"\n      case $apr_bundled_major in\n        \"\")\n          AC_MSG_ERROR([failed to find major version of bundled APR])\n        ;;\n        0)\n          apr_temp_apr_config_file=\"apr-config\"\n",
                    "rendered": {
                      "text": "      apr_bundled_major=\"`sed -n '/#define.*APR_MAJOR_VERSION/s/^[^0-9]*\\([0-9]*\\).*$/\\1/p' \\\"$1/include/apr_version.h\\\"`\"\n      case $apr_bundled_major in\n        \"\")\n          AC_MSG_ERROR([failed to find major version of bundled APR])\n        ;;\n        0)\n          apr_temp_apr_config_file=\"apr-config\"\n",
                      "markdown": "`      apr_bundled_major=\"`sed -n '/#define.*APR_MAJOR_VERSION/s/^[^0-9]*\\([0-9]*\\).*$/\\1/p' \\\"$1/include/apr_version.h\\\"`\"\n      case $apr_bundled_major in\n        \"\")\n          AC_MSG_ERROR([failed to find major version of bundled APR])\n        ;;\n        0)\n          apr_temp_apr_config_file=\"apr-config\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/find_apr.m4"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 50,
                  "endLine": 20,
                  "endColumn": 56,
                  "snippet": {
                    "text": "dnl\ndnl find_apr.m4 : locate the APR include files and libraries\ndnl\ndnl This macro file can be used by applications to find and use the APR\ndnl library. It provides a standardized mechanism for using APR. It supports\ndnl embedding APR into the application source, or locating an installed\ndnl copy of APR.\n",
                    "rendered": {
                      "text": "dnl\ndnl find_apr.m4 : locate the APR include files and libraries\ndnl\ndnl This macro file can be used by applications to find and use the APR\ndnl library. It provides a standardized mechanism for using APR. It supports\ndnl embedding APR into the application source, or locating an installed\ndnl copy of APR.\n",
                      "markdown": "`dnl\ndnl find_apr.m4 : locate the APR include files and libraries\ndnl\ndnl This macro file can be used by applications to find and use the APR\ndnl library. It provides a standardized mechanism for using APR. It supports\ndnl embedding APR into the application source, or locating an installed\ndnl copy of APR.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/aplibtool.c"
                },
                "region": {
                  "startLine": 817,
                  "startColumn": 11,
                  "endLine": 817,
                  "endColumn": 16,
                  "snippet": {
                    "text": "            }\n\n            cmd_size += strlen(GEN_EXPORTS) + strlen(def_file) + 3;\n            cmd = (char *)malloc(cmd_size);\n            strcpy(cmd, GEN_EXPORTS);\n\n            for (a=0; a < cmd_data->num_obj_files; a++) {\n",
                    "rendered": {
                      "text": "            }\n\n            cmd_size += strlen(GEN_EXPORTS) + strlen(def_file) + 3;\n            cmd = (char *)malloc(cmd_size);\n            strcpy(cmd, GEN_EXPORTS);\n\n            for (a=0; a < cmd_data->num_obj_files; a++) {\n",
                      "markdown": "`            }\n\n            cmd_size += strlen(GEN_EXPORTS) + strlen(def_file) + 3;\n            cmd = (char *)malloc(cmd_size);\n            strcpy(cmd, GEN_EXPORTS);\n\n            for (a=0; a < cmd_data->num_obj_files; a++) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/aplibtool.c"
                },
                "region": {
                  "startLine": 631,
                  "startColumn": 3,
                  "endLine": 631,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    unsigned char *d;\n    const unsigned char *s;\n\n    cmd = (char *)malloc(2 * strlen(str) + 1);\n    d = (unsigned char *)cmd;\n    s = (const unsigned char *)str;\n\n",
                    "rendered": {
                      "text": "    unsigned char *d;\n    const unsigned char *s;\n\n    cmd = (char *)malloc(2 * strlen(str) + 1);\n    d = (unsigned char *)cmd;\n    s = (const unsigned char *)str;\n\n",
                      "markdown": "`    unsigned char *d;\n    const unsigned char *s;\n\n    cmd = (char *)malloc(2 * strlen(str) + 1);\n    d = (unsigned char *)cmd;\n    s = (const unsigned char *)str;\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_common.m4"
                },
                "region": {
                  "startLine": 565,
                  "startColumn": 30,
                  "endLine": 565,
                  "endColumn": 34,
                  "snippet": {
                    "text": "dnl  Decide if d_type is available in the dirent structure \ndnl  on this platform.  Not part of the Single UNIX Spec.\ndnl  Note that this is worthless without DT_xxx macros, so\ndnl  look for one while we are at it.\ndnl\nAC_DEFUN([APR_CHECK_DIRENT_TYPE], [\nAC_CACHE_CHECK([for file type member of struct dirent], apr_cv_dirent_type,[\n",
                    "rendered": {
                      "text": "dnl  Decide if d_type is available in the dirent structure \ndnl  on this platform.  Not part of the Single UNIX Spec.\ndnl  Note that this is worthless without DT_xxx macros, so\ndnl  look for one while we are at it.\ndnl\nAC_DEFUN([APR_CHECK_DIRENT_TYPE], [\nAC_CACHE_CHECK([for file type member of struct dirent], apr_cv_dirent_type,[\n",
                      "markdown": "`dnl  Decide if d_type is available in the dirent structure \ndnl  on this platform.  Not part of the Single UNIX Spec.\ndnl  Note that this is worthless without DT_xxx macros, so\ndnl  look for one while we are at it.\ndnl\nAC_DEFUN([APR_CHECK_DIRENT_TYPE], [\nAC_CACHE_CHECK([for file type member of struct dirent], apr_cv_dirent_type,[\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_common.m4"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 54,
                  "endLine": 8,
                  "snippet": {
                    "text": "dnl this work for additional information regarding copyright ownership.\ndnl The ASF licenses this file to You under the Apache License, Version 2.0\ndnl (the \"License\"); you may not use this file except in compliance with\ndnl the License.  You may obtain a copy of the License at\ndnl\ndnl     http://www.apache.org/licenses/LICENSE-2.0\ndnl\ndnl Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "dnl this work for additional information regarding copyright ownership.\ndnl The ASF licenses this file to You under the Apache License, Version 2.0\ndnl (the \"License\"); you may not use this file except in compliance with\ndnl the License.  You may obtain a copy of the License at\ndnl\ndnl     http://www.apache.org/licenses/LICENSE-2.0\ndnl\ndnl Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`dnl this work for additional information regarding copyright ownership.\ndnl The ASF licenses this file to You under the Apache License, Version 2.0\ndnl (the \"License\"); you may not use this file except in compliance with\ndnl the License.  You may obtain a copy of the License at\ndnl\ndnl     http://www.apache.org/licenses/LICENSE-2.0\ndnl\ndnl Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_common.m4"
                },
                "region": {
                  "startLine": 952,
                  "startColumn": 37,
                  "endLine": 952,
                  "endColumn": 42,
                  "snippet": {
                    "text": "dnl\nAC_DEFUN([APR_CHECK_TYPES_FMT_COMPATIBLE], [\ndefine([apr_cvname], apr_cv_typematch_[]translit([$1], [ ], [_])_[]translit([$2], [ ], [_])_[][$3])\nAC_CACHE_CHECK([whether $1 and $2 use fmt %$3], apr_cvname, [\nAPR_TRY_COMPILE_NO_WARNING([#include <sys/types.h>\n#include <stdio.h>\n#ifdef HAVE_STDINT_H\n",
                    "rendered": {
                      "text": "dnl\nAC_DEFUN([APR_CHECK_TYPES_FMT_COMPATIBLE], [\ndefine([apr_cvname], apr_cv_typematch_[]translit([$1], [ ], [_])_[]translit([$2], [ ], [_])_[][$3])\nAC_CACHE_CHECK([whether $1 and $2 use fmt %$3], apr_cvname, [\nAPR_TRY_COMPILE_NO_WARNING([#include <sys/types.h>\n#include <stdio.h>\n#ifdef HAVE_STDINT_H\n",
                      "markdown": "`dnl\nAC_DEFUN([APR_CHECK_TYPES_FMT_COMPATIBLE], [\ndefine([apr_cvname], apr_cv_typematch_[]translit([$1], [ ], [_])_[]translit([$2], [ ], [_])_[][$3])\nAC_CACHE_CHECK([whether $1 and $2 use fmt %$3], apr_cvname, [\nAPR_TRY_COMPILE_NO_WARNING([#include <sys/types.h>\n#include <stdio.h>\n#ifdef HAVE_STDINT_H\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_common.m4"
                },
                "region": {
                  "startLine": 930,
                  "startColumn": 34,
                  "endLine": 930,
                  "endColumn": 40,
                  "snippet": {
                    "text": "  MKDEP=\"true\"\n  for i in \"$CC -MM\" \"$CC -M\" \"$CPP -MM\" \"$CPP -M\" \"cpp -M\"; do\n    AC_MSG_CHECKING([if $i can create proper make dependencies])\n    if $i conftest.c 2>/dev/null | grep 'conftest.o: conftest.c' >/dev/null; then\n      MKDEP=$i\n      AC_MSG_RESULT(yes)\n      break;\n",
                    "rendered": {
                      "text": "  MKDEP=\"true\"\n  for i in \"$CC -MM\" \"$CC -M\" \"$CPP -MM\" \"$CPP -M\" \"cpp -M\"; do\n    AC_MSG_CHECKING([if $i can create proper make dependencies])\n    if $i conftest.c 2>/dev/null | grep 'conftest.o: conftest.c' >/dev/null; then\n      MKDEP=$i\n      AC_MSG_RESULT(yes)\n      break;\n",
                      "markdown": "`  MKDEP=\"true\"\n  for i in \"$CC -MM\" \"$CC -M\" \"$CPP -MM\" \"$CPP -M\" \"cpp -M\"; do\n    AC_MSG_CHECKING([if $i can create proper make dependencies])\n    if $i conftest.c 2>/dev/null | grep 'conftest.o: conftest.c' >/dev/null; then\n      MKDEP=$i\n      AC_MSG_RESULT(yes)\n      break;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_common.m4"
                },
                "region": {
                  "startLine": 923,
                  "startColumn": 1,
                  "endLine": 923,
                  "endColumn": 6,
                  "snippet": {
                    "text": "else\n  rm -f conftest.c\ndnl <sys/types.h> should be available everywhere!\n  cat > conftest.c <<EOF\n#include <sys/types.h>\n  int main(int argc, const char *argv[]) { return 0; }\nEOF\n",
                    "rendered": {
                      "text": "else\n  rm -f conftest.c\ndnl <sys/types.h> should be available everywhere!\n  cat > conftest.c <<EOF\n#include <sys/types.h>\n  int main(int argc, const char *argv[]) { return 0; }\nEOF\n",
                      "markdown": "`else\n  rm -f conftest.c\ndnl <sys/types.h> should be available everywhere!\n  cat > conftest.c <<EOF\n#include <sys/types.h>\n  int main(int argc, const char *argv[]) { return 0; }\nEOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_common.m4"
                },
                "region": {
                  "startLine": 750,
                  "startColumn": 20,
                  "endLine": 750,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    val=`echo $val | sed -e 's:\\(.\\)/*$:\\1:'`\n    val=`echo $val | sed -e 's:[\\$]\\([a-z_]*\\):${\\1}:g'`\n    if test \"$autosuffix\" = \"yes\"; then\n      if echo $val | grep apache >/dev/null; then\n        addtarget=no\n      else\n        addtarget=yes\n",
                    "rendered": {
                      "text": "    val=`echo $val | sed -e 's:\\(.\\)/*$:\\1:'`\n    val=`echo $val | sed -e 's:[\\$]\\([a-z_]*\\):${\\1}:g'`\n    if test \"$autosuffix\" = \"yes\"; then\n      if echo $val | grep apache >/dev/null; then\n        addtarget=no\n      else\n        addtarget=yes\n",
                      "markdown": "`    val=`echo $val | sed -e 's:\\(.\\)/*$:\\1:'`\n    val=`echo $val | sed -e 's:[\\$]\\([a-z_]*\\):${\\1}:g'`\n    if test \"$autosuffix\" = \"yes\"; then\n      if echo $val | grep apache >/dev/null; then\n        addtarget=no\n      else\n        addtarget=yes\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_common.m4"
                },
                "region": {
                  "startLine": 748,
                  "startColumn": 20,
                  "endLine": 748,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        ;;\n    esac\n    val=`echo $val | sed -e 's:\\(.\\)/*$:\\1:'`\n    val=`echo $val | sed -e 's:[\\$]\\([a-z_]*\\):${\\1}:g'`\n    if test \"$autosuffix\" = \"yes\"; then\n      if echo $val | grep apache >/dev/null; then\n        addtarget=no\n",
                    "rendered": {
                      "text": "        ;;\n    esac\n    val=`echo $val | sed -e 's:\\(.\\)/*$:\\1:'`\n    val=`echo $val | sed -e 's:[\\$]\\([a-z_]*\\):${\\1}:g'`\n    if test \"$autosuffix\" = \"yes\"; then\n      if echo $val | grep apache >/dev/null; then\n        addtarget=no\n",
                      "markdown": "`        ;;\n    esac\n    val=`echo $val | sed -e 's:\\(.\\)/*$:\\1:'`\n    val=`echo $val | sed -e 's:[\\$]\\([a-z_]*\\):${\\1}:g'`\n    if test \"$autosuffix\" = \"yes\"; then\n      if echo $val | grep apache >/dev/null; then\n        addtarget=no\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_common.m4"
                },
                "region": {
                  "startLine": 747,
                  "startColumn": 20,
                  "endLine": 747,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        autosuffix=no\n        ;;\n    esac\n    val=`echo $val | sed -e 's:\\(.\\)/*$:\\1:'`\n    val=`echo $val | sed -e 's:[\\$]\\([a-z_]*\\):${\\1}:g'`\n    if test \"$autosuffix\" = \"yes\"; then\n      if echo $val | grep apache >/dev/null; then\n",
                    "rendered": {
                      "text": "        autosuffix=no\n        ;;\n    esac\n    val=`echo $val | sed -e 's:\\(.\\)/*$:\\1:'`\n    val=`echo $val | sed -e 's:[\\$]\\([a-z_]*\\):${\\1}:g'`\n    if test \"$autosuffix\" = \"yes\"; then\n      if echo $val | grep apache >/dev/null; then\n",
                      "markdown": "`        autosuffix=no\n        ;;\n    esac\n    val=`echo $val | sed -e 's:\\(.\\)/*$:\\1:'`\n    val=`echo $val | sed -e 's:[\\$]\\([a-z_]*\\):${\\1}:g'`\n    if test \"$autosuffix\" = \"yes\"; then\n      if echo $val | grep apache >/dev/null; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_common.m4"
                },
                "region": {
                  "startLine": 739,
                  "startColumn": 24,
                  "endLine": 739,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    eval \"val=\\\"\\$$var\\\"\"\n    case $val in\n      *+)\n        val=`echo $val | sed -e 's;\\+$;;'`\n        eval \"$var=\\\"\\$val\\\"\"\n        autosuffix=yes\n        ;;\n",
                    "rendered": {
                      "text": "    eval \"val=\\\"\\$$var\\\"\"\n    case $val in\n      *+)\n        val=`echo $val | sed -e 's;\\+$;;'`\n        eval \"$var=\\\"\\$val\\\"\"\n        autosuffix=yes\n        ;;\n",
                      "markdown": "`    eval \"val=\\\"\\$$var\\\"\"\n    case $val in\n      *+)\n        val=`echo $val | sed -e 's;\\+$;;'`\n        eval \"$var=\\\"\\$val\\\"\"\n        autosuffix=yes\n        ;;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_common.m4"
                },
                "region": {
                  "startLine": 728,
                  "startColumn": 29,
                  "endLine": 728,
                  "endColumn": 35,
                  "snippet": {
                    "text": "      $1 > $pldconf\n  layout_name=$2\n  if test ! -s $pldconf; then\n    echo \"** Error: unable to find layout $layout_name\"\n    exit 1\n  fi\n  . $pldconf\n",
                    "rendered": {
                      "text": "      $1 > $pldconf\n  layout_name=$2\n  if test ! -s $pldconf; then\n    echo \"** Error: unable to find layout $layout_name\"\n    exit 1\n  fi\n  . $pldconf\n",
                      "markdown": "`      $1 > $pldconf\n  layout_name=$2\n  if test ! -s $pldconf; then\n    echo \"** Error: unable to find layout $layout_name\"\n    exit 1\n  fi\n  . $pldconf\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_common.m4"
                },
                "region": {
                  "startLine": 719,
                  "startColumn": 1,
                  "endLine": 719,
                  "endColumn": 6,
                  "snippet": {
                    "text": "  esac\n  pldconf=./config.pld\n  changequote({,})\n  sed -e \"1s/[ \t]*<[lL]ayout[ \t]*$2[ \t]*>[ \t]*//;1t\" \\\n      -e \"1,/[ \t]*<[lL]ayout[ \t]*$2[ \t]*>[ \t]*/d\" \\\n      -e '/[ \t]*<\\/Layout>[ \t]*/,$d' \\\n      -e \"s/^[ \t]*//g\" \\\n",
                    "rendered": {
                      "text": "  esac\n  pldconf=./config.pld\n  changequote({,})\n  sed -e \"1s/[ \t]*<[lL]ayout[ \t]*$2[ \t]*>[ \t]*//;1t\" \\\n      -e \"1,/[ \t]*<[lL]ayout[ \t]*$2[ \t]*>[ \t]*/d\" \\\n      -e '/[ \t]*<\\/Layout>[ \t]*/,$d' \\\n      -e \"s/^[ \t]*//g\" \\\n",
                      "markdown": "`  esac\n  pldconf=./config.pld\n  changequote({,})\n  sed -e \"1s/[ \t]*<[lL]ayout[ \t]*$2[ \t]*>[ \t]*//;1t\" \\\n      -e \"1,/[ \t]*<[lL]ayout[ \t]*$2[ \t]*>[ \t]*/d\" \\\n      -e '/[ \t]*<\\/Layout>[ \t]*/,$d' \\\n      -e \"s/^[ \t]*//g\" \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_common.m4"
                },
                "region": {
                  "startLine": 711,
                  "startColumn": 31,
                  "endLine": 711,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    exit 1\n  fi\n  # Catch layout names including a slash which will otherwise\n  # confuse the heck out of the sed script.\n  case $2 in\n  */*) \n    echo \"** Error: $2 is not a valid layout name\"\n",
                    "rendered": {
                      "text": "    exit 1\n  fi\n  # Catch layout names including a slash which will otherwise\n  # confuse the heck out of the sed script.\n  case $2 in\n  */*) \n    echo \"** Error: $2 is not a valid layout name\"\n",
                      "markdown": "`    exit 1\n  fi\n  # Catch layout names including a slash which will otherwise\n  # confuse the heck out of the sed script.\n  case $2 in\n  */*) \n    echo \"** Error: $2 is not a valid layout name\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_common.m4"
                },
                "region": {
                  "startLine": 686,
                  "startColumn": 30,
                  "endLine": 686,
                  "endColumn": 35,
                  "snippet": {
                    "text": "# check if the stripping was successful\nif test \"x$2\" != \"x${ap_stripped}\"; then\n    # it was, so strip of any leading slashes\n    $1=\"`echo ${ap_stripped} | sed -e 's#^/*##'`\"\nelse\n    # it wasn't so return the original\n    $1=\"$2\"\n",
                    "rendered": {
                      "text": "# check if the stripping was successful\nif test \"x$2\" != \"x${ap_stripped}\"; then\n    # it was, so strip of any leading slashes\n    $1=\"`echo ${ap_stripped} | sed -e 's#^/*##'`\"\nelse\n    # it wasn't so return the original\n    $1=\"$2\"\n",
                      "markdown": "`# check if the stripping was successful\nif test \"x$2\" != \"x${ap_stripped}\"; then\n    # it was, so strip of any leading slashes\n    $1=\"`echo ${ap_stripped} | sed -e 's#^/*##'`\"\nelse\n    # it wasn't so return the original\n    $1=\"$2\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_common.m4"
                },
                "region": {
                  "startLine": 682,
                  "startColumn": 22,
                  "endLine": 682,
                  "endColumn": 27,
                  "snippet": {
                    "text": "dnl APR_PATH_RELATIVE(final_path, $orig_path, $prefix)\ndnl    $final_path now contains \"bar\"\nAC_DEFUN([APR_PATH_RELATIVE], [\nap_stripped=`echo $2 | sed -e \"s#^$3##\"`\n# check if the stripping was successful\nif test \"x$2\" != \"x${ap_stripped}\"; then\n    # it was, so strip of any leading slashes\n",
                    "rendered": {
                      "text": "dnl APR_PATH_RELATIVE(final_path, $orig_path, $prefix)\ndnl    $final_path now contains \"bar\"\nAC_DEFUN([APR_PATH_RELATIVE], [\nap_stripped=`echo $2 | sed -e \"s#^$3##\"`\n# check if the stripping was successful\nif test \"x$2\" != \"x${ap_stripped}\"; then\n    # it was, so strip of any leading slashes\n",
                      "markdown": "`dnl APR_PATH_RELATIVE(final_path, $orig_path, $prefix)\ndnl    $final_path now contains \"bar\"\nAC_DEFUN([APR_PATH_RELATIVE], [\nap_stripped=`echo $2 | sed -e \"s#^$3##\"`\n# check if the stripping was successful\nif test \"x$2\" != \"x${ap_stripped}\"; then\n    # it was, so strip of any leading slashes\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_common.m4"
                },
                "region": {
                  "startLine": 621,
                  "startColumn": 28,
                  "endLine": 621,
                  "endColumn": 33,
                  "snippet": {
                    "text": "for aprt_i in $1\ndo\n    ac_safe=`echo \"$aprt_i\" | sed 'y%./+-%__p_%'`\n    aprt_2=`echo \"$aprt_i\" | sed -e 's%/%_%g' -e 's/\\.//g' -e 's/-//g'`\n    if eval \"test \\\"`echo '$ac_cv_header_'$ac_safe`\\\" = yes\"; then\n       eval \"ifelse($2,,$aprt_2,$2)=ifelse($3,yes,yes,1)\"\n    else\n",
                    "rendered": {
                      "text": "for aprt_i in $1\ndo\n    ac_safe=`echo \"$aprt_i\" | sed 'y%./+-%__p_%'`\n    aprt_2=`echo \"$aprt_i\" | sed -e 's%/%_%g' -e 's/\\.//g' -e 's/-//g'`\n    if eval \"test \\\"`echo '$ac_cv_header_'$ac_safe`\\\" = yes\"; then\n       eval \"ifelse($2,,$aprt_2,$2)=ifelse($3,yes,yes,1)\"\n    else\n",
                      "markdown": "`for aprt_i in $1\ndo\n    ac_safe=`echo \"$aprt_i\" | sed 'y%./+-%__p_%'`\n    aprt_2=`echo \"$aprt_i\" | sed -e 's%/%_%g' -e 's/\\.//g' -e 's/-//g'`\n    if eval \"test \\\"`echo '$ac_cv_header_'$ac_safe`\\\" = yes\"; then\n       eval \"ifelse($2,,$aprt_2,$2)=ifelse($3,yes,yes,1)\"\n    else\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_common.m4"
                },
                "region": {
                  "startLine": 620,
                  "startColumn": 29,
                  "endLine": 620,
                  "endColumn": 34,
                  "snippet": {
                    "text": "AC_CHECK_HEADERS($1)\nfor aprt_i in $1\ndo\n    ac_safe=`echo \"$aprt_i\" | sed 'y%./+-%__p_%'`\n    aprt_2=`echo \"$aprt_i\" | sed -e 's%/%_%g' -e 's/\\.//g' -e 's/-//g'`\n    if eval \"test \\\"`echo '$ac_cv_header_'$ac_safe`\\\" = yes\"; then\n       eval \"ifelse($2,,$aprt_2,$2)=ifelse($3,yes,yes,1)\"\n",
                    "rendered": {
                      "text": "AC_CHECK_HEADERS($1)\nfor aprt_i in $1\ndo\n    ac_safe=`echo \"$aprt_i\" | sed 'y%./+-%__p_%'`\n    aprt_2=`echo \"$aprt_i\" | sed -e 's%/%_%g' -e 's/\\.//g' -e 's/-//g'`\n    if eval \"test \\\"`echo '$ac_cv_header_'$ac_safe`\\\" = yes\"; then\n       eval \"ifelse($2,,$aprt_2,$2)=ifelse($3,yes,yes,1)\"\n",
                      "markdown": "`AC_CHECK_HEADERS($1)\nfor aprt_i in $1\ndo\n    ac_safe=`echo \"$aprt_i\" | sed 'y%./+-%__p_%'`\n    aprt_2=`echo \"$aprt_i\" | sed -e 's%/%_%g' -e 's/\\.//g' -e 's/-//g'`\n    if eval \"test \\\"`echo '$ac_cv_header_'$ac_safe`\\\" = yes\"; then\n       eval \"ifelse($2,,$aprt_2,$2)=ifelse($3,yes,yes,1)\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_common.m4"
                },
                "region": {
                  "startLine": 610,
                  "startColumn": 34,
                  "endLine": 610,
                  "endColumn": 40,
                  "snippet": {
                    "text": "changequote([,])\n\ndnl APR_FLAG_HEADERS(HEADER-FILE ... [, FLAG-TO-SET ] [, \"yes\" ])\ndnl  we set FLAG-TO-SET to 1 if we find HEADER-FILE, otherwise we set to 0\ndnl  if FLAG-TO-SET is null, we automagically determine it's name\ndnl  by changing all \"/\" to \"_\" in the HEADER-FILE and dropping\ndnl  all \".\" and \"-\" chars. If the 3rd parameter is \"yes\" then instead of\n",
                    "rendered": {
                      "text": "changequote([,])\n\ndnl APR_FLAG_HEADERS(HEADER-FILE ... [, FLAG-TO-SET ] [, \"yes\" ])\ndnl  we set FLAG-TO-SET to 1 if we find HEADER-FILE, otherwise we set to 0\ndnl  if FLAG-TO-SET is null, we automagically determine it's name\ndnl  by changing all \"/\" to \"_\" in the HEADER-FILE and dropping\ndnl  all \".\" and \"-\" chars. If the 3rd parameter is \"yes\" then instead of\n",
                      "markdown": "`changequote([,])\n\ndnl APR_FLAG_HEADERS(HEADER-FILE ... [, FLAG-TO-SET ] [, \"yes\" ])\ndnl  we set FLAG-TO-SET to 1 if we find HEADER-FILE, otherwise we set to 0\ndnl  if FLAG-TO-SET is null, we automagically determine it's name\ndnl  by changing all \"/\" to \"_\" in the HEADER-FILE and dropping\ndnl  all \".\" and \"-\" chars. If the 3rd parameter is \"yes\" then instead of\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_common.m4"
                },
                "region": {
                  "startLine": 527,
                  "startColumn": 33,
                  "endLine": 527,
                  "endColumn": 39,
                  "snippet": {
                    "text": "dnl\ndnl  Decide if d_fileno or d_ino are available in the dirent\ndnl  structure on this platform.  Single UNIX Spec says d_ino,\ndnl  BSD uses d_fileno.  Undef to find the real beast.\ndnl\nAC_DEFUN([APR_CHECK_DIRENT_INODE], [\nAC_CACHE_CHECK([for inode member of struct dirent], apr_cv_dirent_inode, [\n",
                    "rendered": {
                      "text": "dnl\ndnl  Decide if d_fileno or d_ino are available in the dirent\ndnl  structure on this platform.  Single UNIX Spec says d_ino,\ndnl  BSD uses d_fileno.  Undef to find the real beast.\ndnl\nAC_DEFUN([APR_CHECK_DIRENT_INODE], [\nAC_CACHE_CHECK([for inode member of struct dirent], apr_cv_dirent_inode, [\n",
                      "markdown": "`dnl\ndnl  Decide if d_fileno or d_ino are available in the dirent\ndnl  structure on this platform.  Single UNIX Spec says d_ino,\ndnl  BSD uses d_fileno.  Undef to find the real beast.\ndnl\nAC_DEFUN([APR_CHECK_DIRENT_INODE], [\nAC_CACHE_CHECK([for inode member of struct dirent], apr_cv_dirent_inode, [\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_common.m4"
                },
                "region": {
                  "startLine": 381,
                  "startColumn": 38,
                  "endLine": 381,
                  "endColumn": 43,
                  "snippet": {
                    "text": "            ac_var=\"ac_cv_header_$ac_item\"\n            ;;\n        file )\n            ac_item=`echo \"$ac_item\" | sed 'y%./+-%__p_%'`\n            ac_var=\"ac_cv_file_$ac_item\"\n            ;;\n        func )   ac_var=\"ac_cv_func_$ac_item\"   ;;\n",
                    "rendered": {
                      "text": "            ac_var=\"ac_cv_header_$ac_item\"\n            ;;\n        file )\n            ac_item=`echo \"$ac_item\" | sed 'y%./+-%__p_%'`\n            ac_var=\"ac_cv_file_$ac_item\"\n            ;;\n        func )   ac_var=\"ac_cv_func_$ac_item\"   ;;\n",
                      "markdown": "`            ac_var=\"ac_cv_header_$ac_item\"\n            ;;\n        file )\n            ac_item=`echo \"$ac_item\" | sed 'y%./+-%__p_%'`\n            ac_var=\"ac_cv_file_$ac_item\"\n            ;;\n        func )   ac_var=\"ac_cv_func_$ac_item\"   ;;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_common.m4"
                },
                "region": {
                  "startLine": 377,
                  "startColumn": 38,
                  "endLine": 377,
                  "endColumn": 43,
                  "snippet": {
                    "text": "    ac_item=`echo \"$ac_spec\" | sed -e 's/^.*://'`\n    case $ac_type in\n        header )\n            ac_item=`echo \"$ac_item\" | sed 'y%./+-%__p_%'`\n            ac_var=\"ac_cv_header_$ac_item\"\n            ;;\n        file )\n",
                    "rendered": {
                      "text": "    ac_item=`echo \"$ac_spec\" | sed -e 's/^.*://'`\n    case $ac_type in\n        header )\n            ac_item=`echo \"$ac_item\" | sed 'y%./+-%__p_%'`\n            ac_var=\"ac_cv_header_$ac_item\"\n            ;;\n        file )\n",
                      "markdown": "`    ac_item=`echo \"$ac_spec\" | sed -e 's/^.*://'`\n    case $ac_type in\n        header )\n            ac_item=`echo \"$ac_item\" | sed 'y%./+-%__p_%'`\n            ac_var=\"ac_cv_header_$ac_item\"\n            ;;\n        file )\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_common.m4"
                },
                "region": {
                  "startLine": 374,
                  "startColumn": 30,
                  "endLine": 374,
                  "endColumn": 35,
                  "snippet": {
                    "text": "ac_rc=yes\nfor ac_spec in $1; do\n    ac_type=`echo \"$ac_spec\" | sed -e 's/:.*$//'`\n    ac_item=`echo \"$ac_spec\" | sed -e 's/^.*://'`\n    case $ac_type in\n        header )\n            ac_item=`echo \"$ac_item\" | sed 'y%./+-%__p_%'`\n",
                    "rendered": {
                      "text": "ac_rc=yes\nfor ac_spec in $1; do\n    ac_type=`echo \"$ac_spec\" | sed -e 's/:.*$//'`\n    ac_item=`echo \"$ac_spec\" | sed -e 's/^.*://'`\n    case $ac_type in\n        header )\n            ac_item=`echo \"$ac_item\" | sed 'y%./+-%__p_%'`\n",
                      "markdown": "`ac_rc=yes\nfor ac_spec in $1; do\n    ac_type=`echo \"$ac_spec\" | sed -e 's/:.*$//'`\n    ac_item=`echo \"$ac_spec\" | sed -e 's/^.*://'`\n    case $ac_type in\n        header )\n            ac_item=`echo \"$ac_item\" | sed 'y%./+-%__p_%'`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_common.m4"
                },
                "region": {
                  "startLine": 373,
                  "startColumn": 30,
                  "endLine": 373,
                  "endColumn": 35,
                  "snippet": {
                    "text": "define(APR_IFALLYES,[dnl\nac_rc=yes\nfor ac_spec in $1; do\n    ac_type=`echo \"$ac_spec\" | sed -e 's/:.*$//'`\n    ac_item=`echo \"$ac_spec\" | sed -e 's/^.*://'`\n    case $ac_type in\n        header )\n",
                    "rendered": {
                      "text": "define(APR_IFALLYES,[dnl\nac_rc=yes\nfor ac_spec in $1; do\n    ac_type=`echo \"$ac_spec\" | sed -e 's/:.*$//'`\n    ac_item=`echo \"$ac_spec\" | sed -e 's/^.*://'`\n    case $ac_type in\n        header )\n",
                      "markdown": "`define(APR_IFALLYES,[dnl\nac_rc=yes\nfor ac_spec in $1; do\n    ac_type=`echo \"$ac_spec\" | sed -e 's/:.*$//'`\n    ac_item=`echo \"$ac_spec\" | sed -e 's/^.*://'`\n    case $ac_type in\n        header )\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_common.m4"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 22,
                  "endLine": 216,
                  "endColumn": 27,
                  "snippet": {
                    "text": "  if test \"x$apr_ste_save_$1\" = \"x$$1\"; then\n    $2$1=\n  else\n    $2$1=`echo \"$$1\" | sed -e \"s%${apr_ste_save_$1}%%\"`\n    $1=\"$apr_ste_save_$1\"\n  fi\nfi\n",
                    "rendered": {
                      "text": "  if test \"x$apr_ste_save_$1\" = \"x$$1\"; then\n    $2$1=\n  else\n    $2$1=`echo \"$$1\" | sed -e \"s%${apr_ste_save_$1}%%\"`\n    $1=\"$apr_ste_save_$1\"\n  fi\nfi\n",
                      "markdown": "`  if test \"x$apr_ste_save_$1\" = \"x$$1\"; then\n    $2$1=\n  else\n    $2$1=`echo \"$$1\" | sed -e \"s%${apr_ste_save_$1}%%\"`\n    $1=\"$apr_ste_save_$1\"\n  fi\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_common.m4"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 21,
                  "endLine": 104,
                  "endColumn": 27,
                  "snippet": {
                    "text": "dnl\ndnl APR_SUBDIR_CONFIG(dir [, sub-package-cmdline-args, args-to-drop])\ndnl\ndnl dir: directory to find configure in\ndnl sub-package-cmdline-args: arguments to add to the invocation (optional)\ndnl args-to-drop: arguments to drop from the invocation (optional)\ndnl\n",
                    "rendered": {
                      "text": "dnl\ndnl APR_SUBDIR_CONFIG(dir [, sub-package-cmdline-args, args-to-drop])\ndnl\ndnl dir: directory to find configure in\ndnl sub-package-cmdline-args: arguments to add to the invocation (optional)\ndnl args-to-drop: arguments to drop from the invocation (optional)\ndnl\n",
                      "markdown": "`dnl\ndnl APR_SUBDIR_CONFIG(dir [, sub-package-cmdline-args, args-to-drop])\ndnl\ndnl dir: directory to find configure in\ndnl sub-package-cmdline-args: arguments to add to the invocation (optional)\ndnl args-to-drop: arguments to drop from the invocation (optional)\ndnl\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_common.m4"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 1,
                  "endLine": 78,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    echo \"\\\"[$]arg\\\" \\\\\" >> $1\n  done\n  echo '\"[$]@\"' >> $1\n  chmod +x $1\n])dnl\n\ndnl APR_MKDIR_P_CHECK(fallback-mkdir-p)\n",
                    "rendered": {
                      "text": "    echo \"\\\"[$]arg\\\" \\\\\" >> $1\n  done\n  echo '\"[$]@\"' >> $1\n  chmod +x $1\n])dnl\n\ndnl APR_MKDIR_P_CHECK(fallback-mkdir-p)\n",
                      "markdown": "`    echo \"\\\"[$]arg\\\" \\\\\" >> $1\n  done\n  echo '\"[$]@\"' >> $1\n  chmod +x $1\n])dnl\n\ndnl APR_MKDIR_P_CHECK(fallback-mkdir-p)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_common.m4"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 1,
                  "endLine": 28,
                  "endColumn": 6,
                  "snippet": {
                    "text": "dnl\nAC_DEFUN([APR_CONFIG_NICE], [\n  rm -f $1\n  cat >$1<<EOF\n#! /bin/sh\n#\n# Created by configure\n",
                    "rendered": {
                      "text": "dnl\nAC_DEFUN([APR_CONFIG_NICE], [\n  rm -f $1\n  cat >$1<<EOF\n#! /bin/sh\n#\n# Created by configure\n",
                      "markdown": "`dnl\nAC_DEFUN([APR_CONFIG_NICE], [\n  rm -f $1\n  cat >$1<<EOF\n#! /bin/sh\n#\n# Created by configure\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/nw_ver.awk"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 52,
                  "endLine": 7,
                  "snippet": {
                    "text": "# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/NWGNUenvironment.inc"
                },
                "region": {
                  "startLine": 271,
                  "startColumn": 57,
                  "endLine": 272,
                  "endColumn": 4,
                  "snippet": {
                    "text": "ECHONL\t= $(ComSpec) /c echo.\nMKDIR\t= $(shell if not exist $(subst /,\\,$1)\\NUL md 2>NUL $(subst /,\\,$1))\nCOPY\t= copy /y 2>NUL $(subst /,\\,$1) $(subst /,\\,$2)\nCOPYR\t= xcopy /y /e 2>NUL $(subst /,\\,$1) $(subst /,\\,$2)\nCAT\t= type\nendif\n\nifdef IPV6\n",
                    "rendered": {
                      "text": "ECHONL\t= $(ComSpec) /c echo.\nMKDIR\t= $(shell if not exist $(subst /,\\,$1)\\NUL md 2>NUL $(subst /,\\,$1))\nCOPY\t= copy /y 2>NUL $(subst /,\\,$1) $(subst /,\\,$2)\nCOPYR\t= xcopy /y /e 2>NUL $(subst /,\\,$1) $(subst /,\\,$2)\nCAT\t= type\nendif\n\nifdef IPV6\n",
                      "markdown": "`ECHONL\t= $(ComSpec) /c echo.\nMKDIR\t= $(shell if not exist $(subst /,\\,$1)\\NUL md 2>NUL $(subst /,\\,$1))\nCOPY\t= copy /y 2>NUL $(subst /,\\,$1) $(subst /,\\,$2)\nCOPYR\t= xcopy /y /e 2>NUL $(subst /,\\,$1) $(subst /,\\,$2)\nCAT\t= type\nendif\n\nifdef IPV6\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/NWGNUenvironment.inc"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 5,
                  "endLine": 260,
                  "snippet": {
                    "text": "COPYR\t= cp -ar $1 $2\nECHONL\t= echo \"\"\nDL\t= '\nCAT\t= cat\nelse\nifeq \"$(OS)\" \"Windows_NT\"\nDEL\t= $(shell if exist $(subst /,\\,$1) del /q /f 2>NUL $(subst /,\\,$1))\nRMDIR\t= $(shell if exist $(subst /,\\,$1)\\NUL rd /q /s 2>NUL $(subst /,\\,$1))\n",
                    "rendered": {
                      "text": "COPYR\t= cp -ar $1 $2\nECHONL\t= echo \"\"\nDL\t= '\nCAT\t= cat\nelse\nifeq \"$(OS)\" \"Windows_NT\"\nDEL\t= $(shell if exist $(subst /,\\,$1) del /q /f 2>NUL $(subst /,\\,$1))\nRMDIR\t= $(shell if exist $(subst /,\\,$1)\\NUL rd /q /s 2>NUL $(subst /,\\,$1))\n",
                      "markdown": "`COPYR\t= cp -ar $1 $2\nECHONL\t= echo \"\"\nDL\t= '\nCAT\t= cat\nelse\nifeq \"$(OS)\" \"Windows_NT\"\nDEL\t= $(shell if exist $(subst /,\\,$1) del /q /f 2>NUL $(subst /,\\,$1))\nRMDIR\t= $(shell if exist $(subst /,\\,$1)\\NUL rd /q /s 2>NUL $(subst /,\\,$1))\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/NWGNUenvironment.inc"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 6,
                  "endLine": 259,
                  "endColumn": 4,
                  "snippet": {
                    "text": "COPY\t= cp -av $1 $2\nCOPYR\t= cp -ar $1 $2\nECHONL\t= echo \"\"\nDL\t= '\nCAT\t= cat\nelse\nifeq \"$(OS)\" \"Windows_NT\"\nDEL\t= $(shell if exist $(subst /,\\,$1) del /q /f 2>NUL $(subst /,\\,$1))\n",
                    "rendered": {
                      "text": "COPY\t= cp -av $1 $2\nCOPYR\t= cp -ar $1 $2\nECHONL\t= echo \"\"\nDL\t= '\nCAT\t= cat\nelse\nifeq \"$(OS)\" \"Windows_NT\"\nDEL\t= $(shell if exist $(subst /,\\,$1) del /q /f 2>NUL $(subst /,\\,$1))\n",
                      "markdown": "`COPY\t= cp -av $1 $2\nCOPYR\t= cp -ar $1 $2\nECHONL\t= echo \"\"\nDL\t= '\nCAT\t= cat\nelse\nifeq \"$(OS)\" \"Windows_NT\"\nDEL\t= $(shell if exist $(subst /,\\,$1) del /q /f 2>NUL $(subst /,\\,$1))\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/NWGNUenvironment.inc"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 7,
                  "endLine": 256,
                  "endColumn": 11,
                  "snippet": {
                    "text": "RMDIR\t= rm -rf $1\nMKDIR\t= mkdir -p $1\nCOPY\t= cp -av $1 $2\nCOPYR\t= cp -ar $1 $2\nECHONL\t= echo \"\"\nDL\t= '\nCAT\t= cat\n",
                    "rendered": {
                      "text": "RMDIR\t= rm -rf $1\nMKDIR\t= mkdir -p $1\nCOPY\t= cp -av $1 $2\nCOPYR\t= cp -ar $1 $2\nECHONL\t= echo \"\"\nDL\t= '\nCAT\t= cat\n",
                      "markdown": "`RMDIR\t= rm -rf $1\nMKDIR\t= mkdir -p $1\nCOPY\t= cp -av $1 $2\nCOPYR\t= cp -ar $1 $2\nECHONL\t= echo \"\"\nDL\t= '\nCAT\t= cat\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/NWGNUenvironment.inc"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 6,
                  "endLine": 255,
                  "endColumn": 10,
                  "snippet": {
                    "text": "DEL\t= rm -f $1\nRMDIR\t= rm -rf $1\nMKDIR\t= mkdir -p $1\nCOPY\t= cp -av $1 $2\nCOPYR\t= cp -ar $1 $2\nECHONL\t= echo \"\"\nDL\t= '\n",
                    "rendered": {
                      "text": "DEL\t= rm -f $1\nRMDIR\t= rm -rf $1\nMKDIR\t= mkdir -p $1\nCOPY\t= cp -av $1 $2\nCOPYR\t= cp -ar $1 $2\nECHONL\t= echo \"\"\nDL\t= '\n",
                      "markdown": "`DEL\t= rm -f $1\nRMDIR\t= rm -rf $1\nMKDIR\t= mkdir -p $1\nCOPY\t= cp -av $1 $2\nCOPYR\t= cp -ar $1 $2\nECHONL\t= echo \"\"\nDL\t= '\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/NWGNUenvironment.inc"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 5,
                  "endLine": 246,
                  "snippet": {
                    "text": "\n\n# Setup build tools\nAWK\t= awk\n\n#\n# Declare Command and tool macros here\n#\n",
                    "rendered": {
                      "text": "\n\n# Setup build tools\nAWK\t= awk\n\n#\n# Declare Command and tool macros here\n#\n",
                      "markdown": "`\n\n# Setup build tools\nAWK\t= awk\n\n#\n# Declare Command and tool macros here\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/NWGNUenvironment.inc"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 19,
                  "endLine": 245,
                  "endColumn": 4,
                  "snippet": {
                    "text": "CFLAGS\t+= -include apr_arch_pre_nw.h\n\n\n# Setup build tools\nAWK\t= awk\n\n#\n# Declare Command and tool macros here\n",
                    "rendered": {
                      "text": "CFLAGS\t+= -include apr_arch_pre_nw.h\n\n\n# Setup build tools\nAWK\t= awk\n\n#\n# Declare Command and tool macros here\n",
                      "markdown": "`CFLAGS\t+= -include apr_arch_pre_nw.h\n\n\n# Setup build tools\nAWK\t= awk\n\n#\n# Declare Command and tool macros here\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apu-conf.m4"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 54,
                  "endLine": 8,
                  "snippet": {
                    "text": "dnl this work for additional information regarding copyright ownership.\ndnl The ASF licenses this file to You under the Apache License, Version 2.0\ndnl (the \"License\"); you may not use this file except in compliance with\ndnl the License.  You may obtain a copy of the License at\ndnl\ndnl     http://www.apache.org/licenses/LICENSE-2.0\ndnl\ndnl Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "dnl this work for additional information regarding copyright ownership.\ndnl The ASF licenses this file to You under the Apache License, Version 2.0\ndnl (the \"License\"); you may not use this file except in compliance with\ndnl the License.  You may obtain a copy of the License at\ndnl\ndnl     http://www.apache.org/licenses/LICENSE-2.0\ndnl\ndnl Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`dnl this work for additional information regarding copyright ownership.\ndnl The ASF licenses this file to You under the Apache License, Version 2.0\ndnl (the \"License\"); you may not use this file except in compliance with\ndnl the License.  You may obtain a copy of the License at\ndnl\ndnl     http://www.apache.org/licenses/LICENSE-2.0\ndnl\ndnl Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apu-conf.m4"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 25,
                  "endLine": 27,
                  "endColumn": 33,
                  "snippet": {
                    "text": "dnl\nAC_DEFUN([APU_FIND_APR], [\n\n  dnl use the find_apr.m4 script to locate APR. sets apr_found and apr_config\n  APR_FIND_APR(,,,[2])\n  if test \"$apr_found\" = \"no\"; then\n    AC_MSG_ERROR(APR could not be located. Please use the --with-apr option.)\n",
                    "rendered": {
                      "text": "dnl\nAC_DEFUN([APU_FIND_APR], [\n\n  dnl use the find_apr.m4 script to locate APR. sets apr_found and apr_config\n  APR_FIND_APR(,,,[2])\n  if test \"$apr_found\" = \"no\"; then\n    AC_MSG_ERROR(APR could not be located. Please use the --with-apr option.)\n",
                      "markdown": "`dnl\nAC_DEFUN([APU_FIND_APR], [\n\n  dnl use the find_apr.m4 script to locate APR. sets apr_found and apr_config\n  APR_FIND_APR(,,,[2])\n  if test \"$apr_found\" = \"no\"; then\n    AC_MSG_ERROR(APR could not be located. Please use the --with-apr option.)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/NWGNUhead.inc"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 31,
                  "endLine": 5,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# Obtain the global build environment\n#\n\ninclude $(APR_WORK)/build/NWGNUenvironment.inc\n\n#\n# Define base targets and rules\n",
                    "rendered": {
                      "text": "# Obtain the global build environment\n#\n\ninclude $(APR_WORK)/build/NWGNUenvironment.inc\n\n#\n# Define base targets and rules\n",
                      "markdown": "`# Obtain the global build environment\n#\n\ninclude $(APR_WORK)/build/NWGNUenvironment.inc\n\n#\n# Define base targets and rules\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_rules.mk.in"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 1,
                  "endLine": 51,
                  "endColumn": 5,
                  "snippet": {
                    "text": "DEFS=@DEFS@\n\n# anything added to the standard flags by configure is moved to EXTRA_*\n# at the end of the process.\n#\nEXTRA_CFLAGS=@EXTRA_CFLAGS@\nEXTRA_CPPFLAGS=@EXTRA_CPPFLAGS@\n",
                    "rendered": {
                      "text": "DEFS=@DEFS@\n\n# anything added to the standard flags by configure is moved to EXTRA_*\n# at the end of the process.\n#\nEXTRA_CFLAGS=@EXTRA_CFLAGS@\nEXTRA_CPPFLAGS=@EXTRA_CPPFLAGS@\n",
                      "markdown": "`DEFS=@DEFS@\n\n# anything added to the standard flags by configure is moved to EXTRA_*\n# at the end of the process.\n#\nEXTRA_CFLAGS=@EXTRA_CFLAGS@\nEXTRA_CPPFLAGS=@EXTRA_CPPFLAGS@\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_rules.mk.in"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 55,
                  "endLine": 42,
                  "endColumn": 59,
                  "snippet": {
                    "text": "LIBTOOL=@LIBTOOL@\n\n# compilation and linking flags that are supposed to be set only by the user.\n# configure adds to them for tests, but we restore them at the end.\n#\nCFLAGS=@CFLAGS@\nCPPFLAGS=@CPPFLAGS@\n",
                    "rendered": {
                      "text": "LIBTOOL=@LIBTOOL@\n\n# compilation and linking flags that are supposed to be set only by the user.\n# configure adds to them for tests, but we restore them at the end.\n#\nCFLAGS=@CFLAGS@\nCPPFLAGS=@CPPFLAGS@\n",
                      "markdown": "`LIBTOOL=@LIBTOOL@\n\n# compilation and linking flags that are supposed to be set only by the user.\n# configure adds to them for tests, but we restore them at the end.\n#\nCFLAGS=@CFLAGS@\nCPPFLAGS=@CPPFLAGS@\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_rules.mk.in"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 52,
                  "endLine": 7,
                  "snippet": {
                    "text": "# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_rules.mk.in"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 49,
                  "endLine": 189,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t$(RM) -f .deps; \\\n\t\tlist='$(srcdir)/*.c'; \\\n\t\tfor i in $$list; do \\\n\t\t\t$(MKDEP) $(ALL_CPPFLAGS) $(ALL_INCLUDES) $$i | sed 's/\\.o:/.lo:/' >> .deps; \\\n\t\tdone; \\\n\tfi\n\n",
                    "rendered": {
                      "text": "\t\t$(RM) -f .deps; \\\n\t\tlist='$(srcdir)/*.c'; \\\n\t\tfor i in $$list; do \\\n\t\t\t$(MKDEP) $(ALL_CPPFLAGS) $(ALL_INCLUDES) $$i | sed 's/\\.o:/.lo:/' >> .deps; \\\n\t\tdone; \\\n\tfi\n\n",
                      "markdown": "`\t\t$(RM) -f .deps; \\\n\t\tlist='$(srcdir)/*.c'; \\\n\t\tfor i in $$list; do \\\n\t\t\t$(MKDEP) $(ALL_CPPFLAGS) $(ALL_INCLUDES) $$i | sed 's/\\.o:/.lo:/' >> .deps; \\\n\t\tdone; \\\n\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_rules.mk.in"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 20,
                  "endLine": 139,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\tfi\n\nclean-recursive distclean-recursive extraclean-recursive:\n\t@otarget=`echo $@ | sed s/-recursive//`; \\\n\tlist='$(CLEAN_SUBDIRS)'; \\\n\tfor i in $$list; do \\\n\t    if test -f \"$$i/Makefile\"; then \\\n",
                    "rendered": {
                      "text": "\tfi\n\nclean-recursive distclean-recursive extraclean-recursive:\n\t@otarget=`echo $@ | sed s/-recursive//`; \\\n\tlist='$(CLEAN_SUBDIRS)'; \\\n\tfor i in $$list; do \\\n\t    if test -f \"$$i/Makefile\"; then \\\n",
                      "markdown": "`\tfi\n\nclean-recursive distclean-recursive extraclean-recursive:\n\t@otarget=`echo $@ | sed s/-recursive//`; \\\n\tlist='$(CLEAN_SUBDIRS)'; \\\n\tfor i in $$list; do \\\n\t    if test -f \"$$i/Makefile\"; then \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_rules.mk.in"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 20,
                  "endLine": 118,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n\nall-recursive depend-recursive:\n\t@otarget=`echo $@ | sed s/-recursive//`; \\\n\tlist='$(SOURCE_DIRS)'; \\\n\tfor i in $$list; do \\\n\t    if test -f \"$$i/Makefile\"; then \\\n",
                    "rendered": {
                      "text": "\n\nall-recursive depend-recursive:\n\t@otarget=`echo $@ | sed s/-recursive//`; \\\n\tlist='$(SOURCE_DIRS)'; \\\n\tfor i in $$list; do \\\n\t    if test -f \"$$i/Makefile\"; then \\\n",
                      "markdown": "`\n\nall-recursive depend-recursive:\n\t@otarget=`echo $@ | sed s/-recursive//`; \\\n\tlist='$(SOURCE_DIRS)'; \\\n\tfor i in $$list; do \\\n\t    if test -f \"$$i/Makefile\"; then \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_rules.mk.in"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 11,
                  "endLine": 88,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n# The set of object files that will be linked into the target library.\n# The build-outputs.mk specifies a different set for each platform. The\n# configure script will select the appropriate set.\n#\nOBJECTS      = @OBJECTS_PLATFORM@\n\n",
                    "rendered": {
                      "text": "\n# The set of object files that will be linked into the target library.\n# The build-outputs.mk specifies a different set for each platform. The\n# configure script will select the appropriate set.\n#\nOBJECTS      = @OBJECTS_PLATFORM@\n\n",
                      "markdown": "`\n# The set of object files that will be linked into the target library.\n# The build-outputs.mk specifies a different set for each platform. The\n# configure script will select the appropriate set.\n#\nOBJECTS      = @OBJECTS_PLATFORM@\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_threads.m4"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 54,
                  "endLine": 8,
                  "snippet": {
                    "text": "dnl this work for additional information regarding copyright ownership.\ndnl The ASF licenses this file to You under the Apache License, Version 2.0\ndnl (the \"License\"); you may not use this file except in compliance with\ndnl the License.  You may obtain a copy of the License at\ndnl\ndnl     http://www.apache.org/licenses/LICENSE-2.0\ndnl\ndnl Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "dnl this work for additional information regarding copyright ownership.\ndnl The ASF licenses this file to You under the Apache License, Version 2.0\ndnl (the \"License\"); you may not use this file except in compliance with\ndnl the License.  You may obtain a copy of the License at\ndnl\ndnl     http://www.apache.org/licenses/LICENSE-2.0\ndnl\ndnl Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`dnl this work for additional information regarding copyright ownership.\ndnl The ASF licenses this file to You under the Apache License, Version 2.0\ndnl (the \"License\"); you may not use this file except in compliance with\ndnl the License.  You may obtain a copy of the License at\ndnl\ndnl     http://www.apache.org/licenses/LICENSE-2.0\ndnl\ndnl Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_threads.m4"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 10,
                  "endLine": 122,
                  "endColumn": 16,
                  "snippet": {
                    "text": "dnl\ndnl APR_PTHREADS_CHECK()\ndnl\ndnl Try to find a way to enable POSIX threads.  Sets the \ndnl pthreads_working variable to \"yes\" on success.\ndnl\nAC_DEFUN([APR_PTHREADS_CHECK], [\n",
                    "rendered": {
                      "text": "dnl\ndnl APR_PTHREADS_CHECK()\ndnl\ndnl Try to find a way to enable POSIX threads.  Sets the \ndnl pthreads_working variable to \"yes\" on success.\ndnl\nAC_DEFUN([APR_PTHREADS_CHECK], [\n",
                      "markdown": "`dnl\ndnl APR_PTHREADS_CHECK()\ndnl\ndnl Try to find a way to enable POSIX threads.  Sets the \ndnl pthreads_working variable to \"yes\" on success.\ndnl\nAC_DEFUN([APR_PTHREADS_CHECK], [\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/dso.m4"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 54,
                  "endLine": 8,
                  "snippet": {
                    "text": "dnl this work for additional information regarding copyright ownership.\ndnl The ASF licenses this file to You under the Apache License, Version 2.0\ndnl (the \"License\"); you may not use this file except in compliance with\ndnl the License.  You may obtain a copy of the License at\ndnl\ndnl     http://www.apache.org/licenses/LICENSE-2.0\ndnl\ndnl Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "dnl this work for additional information regarding copyright ownership.\ndnl The ASF licenses this file to You under the Apache License, Version 2.0\ndnl (the \"License\"); you may not use this file except in compliance with\ndnl the License.  You may obtain a copy of the License at\ndnl\ndnl     http://www.apache.org/licenses/LICENSE-2.0\ndnl\ndnl Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`dnl this work for additional information regarding copyright ownership.\ndnl The ASF licenses this file to You under the Apache License, Version 2.0\ndnl (the \"License\"); you may not use this file except in compliance with\ndnl the License.  You may obtain a copy of the License at\ndnl\ndnl     http://www.apache.org/licenses/LICENSE-2.0\ndnl\ndnl Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/dso.m4"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 39,
                  "endLine": 57,
                  "endColumn": 44,
                  "snippet": {
                    "text": "     if test $apu_have_mysql = 1; then\n       for flag in $LDADD_dbd_mysql\n       do\n         dir=`echo $flag | grep \"^-L\" | sed s:-L::`\n         if test \"x$dir\" != 'x'; then\n           if test -f \"$dir/libmysqlclient_r.la\"; then\n             LDADD_dbd_mysql=$dir/libmysqlclient_r.la\n",
                    "rendered": {
                      "text": "     if test $apu_have_mysql = 1; then\n       for flag in $LDADD_dbd_mysql\n       do\n         dir=`echo $flag | grep \"^-L\" | sed s:-L::`\n         if test \"x$dir\" != 'x'; then\n           if test -f \"$dir/libmysqlclient_r.la\"; then\n             LDADD_dbd_mysql=$dir/libmysqlclient_r.la\n",
                      "markdown": "`     if test $apu_have_mysql = 1; then\n       for flag in $LDADD_dbd_mysql\n       do\n         dir=`echo $flag | grep \"^-L\" | sed s:-L::`\n         if test \"x$dir\" != 'x'; then\n           if test -f \"$dir/libmysqlclient_r.la\"; then\n             LDADD_dbd_mysql=$dir/libmysqlclient_r.la\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/dso.m4"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 26,
                  "endLine": 57,
                  "endColumn": 32,
                  "snippet": {
                    "text": "     if test $apu_have_mysql = 1; then\n       for flag in $LDADD_dbd_mysql\n       do\n         dir=`echo $flag | grep \"^-L\" | sed s:-L::`\n         if test \"x$dir\" != 'x'; then\n           if test -f \"$dir/libmysqlclient_r.la\"; then\n             LDADD_dbd_mysql=$dir/libmysqlclient_r.la\n",
                    "rendered": {
                      "text": "     if test $apu_have_mysql = 1; then\n       for flag in $LDADD_dbd_mysql\n       do\n         dir=`echo $flag | grep \"^-L\" | sed s:-L::`\n         if test \"x$dir\" != 'x'; then\n           if test -f \"$dir/libmysqlclient_r.la\"; then\n             LDADD_dbd_mysql=$dir/libmysqlclient_r.la\n",
                      "markdown": "`     if test $apu_have_mysql = 1; then\n       for flag in $LDADD_dbd_mysql\n       do\n         dir=`echo $flag | grep \"^-L\" | sed s:-L::`\n         if test \"x$dir\" != 'x'; then\n           if test -f \"$dir/libmysqlclient_r.la\"; then\n             LDADD_dbd_mysql=$dir/libmysqlclient_r.la\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/dso.m4"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 27,
                  "endLine": 53,
                  "endColumn": 34,
                  "snippet": {
                    "text": "     test $apu_have_ldap = 1 && objs=\"$objs ldap/apr_ldap.lo\"\n     EXTRA_OBJECTS=\"$EXTRA_OBJECTS $objs\"\n\n     # Use libtool *.la for mysql if available\n     if test $apu_have_mysql = 1; then\n       for flag in $LDADD_dbd_mysql\n       do\n",
                    "rendered": {
                      "text": "     test $apu_have_ldap = 1 && objs=\"$objs ldap/apr_ldap.lo\"\n     EXTRA_OBJECTS=\"$EXTRA_OBJECTS $objs\"\n\n     # Use libtool *.la for mysql if available\n     if test $apu_have_mysql = 1; then\n       for flag in $LDADD_dbd_mysql\n       do\n",
                      "markdown": "`     test $apu_have_ldap = 1 && objs=\"$objs ldap/apr_ldap.lo\"\n     EXTRA_OBJECTS=\"$EXTRA_OBJECTS $objs\"\n\n     # Use libtool *.la for mysql if available\n     if test $apu_have_mysql = 1; then\n       for flag in $LDADD_dbd_mysql\n       do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/apr_md4.c"
                },
                "region": {
                  "startLine": 354,
                  "startColumn": 3,
                  "endLine": 354,
                  "endColumn": 7,
                  "snippet": {
                    "text": "    HH (a, b, c, d, x[ 3], S31); /* 45 */\n    HH (d, a, b, c, x[11], S32); /* 46 */\n    HH (c, d, a, b, x[ 7], S33); /* 47 */\n    HH (b, c, d, a, x[15], S34); /* 48 */\n\n    state[0] += a;\n    state[1] += b;\n",
                    "rendered": {
                      "text": "    HH (a, b, c, d, x[ 3], S31); /* 45 */\n    HH (d, a, b, c, x[11], S32); /* 46 */\n    HH (c, d, a, b, x[ 7], S33); /* 47 */\n    HH (b, c, d, a, x[15], S34); /* 48 */\n\n    state[0] += a;\n    state[1] += b;\n",
                      "markdown": "`    HH (a, b, c, d, x[ 3], S31); /* 45 */\n    HH (d, a, b, c, x[11], S32); /* 46 */\n    HH (c, d, a, b, x[ 7], S33); /* 47 */\n    HH (b, c, d, a, x[15], S34); /* 48 */\n\n    state[0] += a;\n    state[1] += b;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/apr_md4.c"
                },
                "region": {
                  "startLine": 353,
                  "startColumn": 3,
                  "endLine": 353,
                  "endColumn": 7,
                  "snippet": {
                    "text": "    HH (b, c, d, a, x[13], S34); /* 44 */\n    HH (a, b, c, d, x[ 3], S31); /* 45 */\n    HH (d, a, b, c, x[11], S32); /* 46 */\n    HH (c, d, a, b, x[ 7], S33); /* 47 */\n    HH (b, c, d, a, x[15], S34); /* 48 */\n\n    state[0] += a;\n",
                    "rendered": {
                      "text": "    HH (b, c, d, a, x[13], S34); /* 44 */\n    HH (a, b, c, d, x[ 3], S31); /* 45 */\n    HH (d, a, b, c, x[11], S32); /* 46 */\n    HH (c, d, a, b, x[ 7], S33); /* 47 */\n    HH (b, c, d, a, x[15], S34); /* 48 */\n\n    state[0] += a;\n",
                      "markdown": "`    HH (b, c, d, a, x[13], S34); /* 44 */\n    HH (a, b, c, d, x[ 3], S31); /* 45 */\n    HH (d, a, b, c, x[11], S32); /* 46 */\n    HH (c, d, a, b, x[ 7], S33); /* 47 */\n    HH (b, c, d, a, x[15], S34); /* 48 */\n\n    state[0] += a;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/apr_md4.c"
                },
                "region": {
                  "startLine": 352,
                  "startColumn": 3,
                  "endLine": 352,
                  "endColumn": 7,
                  "snippet": {
                    "text": "    HH (c, d, a, b, x[ 5], S33); /* 43 */\n    HH (b, c, d, a, x[13], S34); /* 44 */\n    HH (a, b, c, d, x[ 3], S31); /* 45 */\n    HH (d, a, b, c, x[11], S32); /* 46 */\n    HH (c, d, a, b, x[ 7], S33); /* 47 */\n    HH (b, c, d, a, x[15], S34); /* 48 */\n\n",
                    "rendered": {
                      "text": "    HH (c, d, a, b, x[ 5], S33); /* 43 */\n    HH (b, c, d, a, x[13], S34); /* 44 */\n    HH (a, b, c, d, x[ 3], S31); /* 45 */\n    HH (d, a, b, c, x[11], S32); /* 46 */\n    HH (c, d, a, b, x[ 7], S33); /* 47 */\n    HH (b, c, d, a, x[15], S34); /* 48 */\n\n",
                      "markdown": "`    HH (c, d, a, b, x[ 5], S33); /* 43 */\n    HH (b, c, d, a, x[13], S34); /* 44 */\n    HH (a, b, c, d, x[ 3], S31); /* 45 */\n    HH (d, a, b, c, x[11], S32); /* 46 */\n    HH (c, d, a, b, x[ 7], S33); /* 47 */\n    HH (b, c, d, a, x[15], S34); /* 48 */\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/apr_md4.c"
                },
                "region": {
                  "startLine": 351,
                  "startColumn": 3,
                  "endLine": 351,
                  "endColumn": 7,
                  "snippet": {
                    "text": "    HH (d, a, b, c, x[ 9], S32); /* 42 */\n    HH (c, d, a, b, x[ 5], S33); /* 43 */\n    HH (b, c, d, a, x[13], S34); /* 44 */\n    HH (a, b, c, d, x[ 3], S31); /* 45 */\n    HH (d, a, b, c, x[11], S32); /* 46 */\n    HH (c, d, a, b, x[ 7], S33); /* 47 */\n    HH (b, c, d, a, x[15], S34); /* 48 */\n",
                    "rendered": {
                      "text": "    HH (d, a, b, c, x[ 9], S32); /* 42 */\n    HH (c, d, a, b, x[ 5], S33); /* 43 */\n    HH (b, c, d, a, x[13], S34); /* 44 */\n    HH (a, b, c, d, x[ 3], S31); /* 45 */\n    HH (d, a, b, c, x[11], S32); /* 46 */\n    HH (c, d, a, b, x[ 7], S33); /* 47 */\n    HH (b, c, d, a, x[15], S34); /* 48 */\n",
                      "markdown": "`    HH (d, a, b, c, x[ 9], S32); /* 42 */\n    HH (c, d, a, b, x[ 5], S33); /* 43 */\n    HH (b, c, d, a, x[13], S34); /* 44 */\n    HH (a, b, c, d, x[ 3], S31); /* 45 */\n    HH (d, a, b, c, x[11], S32); /* 46 */\n    HH (c, d, a, b, x[ 7], S33); /* 47 */\n    HH (b, c, d, a, x[15], S34); /* 48 */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/apr_md4.c"
                },
                "region": {
                  "startLine": 350,
                  "startColumn": 3,
                  "endLine": 350,
                  "endColumn": 7,
                  "snippet": {
                    "text": "    HH (a, b, c, d, x[ 1], S31); /* 41 */\n    HH (d, a, b, c, x[ 9], S32); /* 42 */\n    HH (c, d, a, b, x[ 5], S33); /* 43 */\n    HH (b, c, d, a, x[13], S34); /* 44 */\n    HH (a, b, c, d, x[ 3], S31); /* 45 */\n    HH (d, a, b, c, x[11], S32); /* 46 */\n    HH (c, d, a, b, x[ 7], S33); /* 47 */\n",
                    "rendered": {
                      "text": "    HH (a, b, c, d, x[ 1], S31); /* 41 */\n    HH (d, a, b, c, x[ 9], S32); /* 42 */\n    HH (c, d, a, b, x[ 5], S33); /* 43 */\n    HH (b, c, d, a, x[13], S34); /* 44 */\n    HH (a, b, c, d, x[ 3], S31); /* 45 */\n    HH (d, a, b, c, x[11], S32); /* 46 */\n    HH (c, d, a, b, x[ 7], S33); /* 47 */\n",
                      "markdown": "`    HH (a, b, c, d, x[ 1], S31); /* 41 */\n    HH (d, a, b, c, x[ 9], S32); /* 42 */\n    HH (c, d, a, b, x[ 5], S33); /* 43 */\n    HH (b, c, d, a, x[13], S34); /* 44 */\n    HH (a, b, c, d, x[ 3], S31); /* 45 */\n    HH (d, a, b, c, x[11], S32); /* 46 */\n    HH (c, d, a, b, x[ 7], S33); /* 47 */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/apr_md4.c"
                },
                "region": {
                  "startLine": 349,
                  "startColumn": 3,
                  "endLine": 349,
                  "endColumn": 7,
                  "snippet": {
                    "text": "    HH (b, c, d, a, x[14], S34); /* 40 */\n    HH (a, b, c, d, x[ 1], S31); /* 41 */\n    HH (d, a, b, c, x[ 9], S32); /* 42 */\n    HH (c, d, a, b, x[ 5], S33); /* 43 */\n    HH (b, c, d, a, x[13], S34); /* 44 */\n    HH (a, b, c, d, x[ 3], S31); /* 45 */\n    HH (d, a, b, c, x[11], S32); /* 46 */\n",
                    "rendered": {
                      "text": "    HH (b, c, d, a, x[14], S34); /* 40 */\n    HH (a, b, c, d, x[ 1], S31); /* 41 */\n    HH (d, a, b, c, x[ 9], S32); /* 42 */\n    HH (c, d, a, b, x[ 5], S33); /* 43 */\n    HH (b, c, d, a, x[13], S34); /* 44 */\n    HH (a, b, c, d, x[ 3], S31); /* 45 */\n    HH (d, a, b, c, x[11], S32); /* 46 */\n",
                      "markdown": "`    HH (b, c, d, a, x[14], S34); /* 40 */\n    HH (a, b, c, d, x[ 1], S31); /* 41 */\n    HH (d, a, b, c, x[ 9], S32); /* 42 */\n    HH (c, d, a, b, x[ 5], S33); /* 43 */\n    HH (b, c, d, a, x[13], S34); /* 44 */\n    HH (a, b, c, d, x[ 3], S31); /* 45 */\n    HH (d, a, b, c, x[11], S32); /* 46 */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/apr_md4.c"
                },
                "region": {
                  "startLine": 348,
                  "startColumn": 3,
                  "endLine": 348,
                  "endColumn": 7,
                  "snippet": {
                    "text": "    HH (c, d, a, b, x[ 6], S33); /* 39 */\n    HH (b, c, d, a, x[14], S34); /* 40 */\n    HH (a, b, c, d, x[ 1], S31); /* 41 */\n    HH (d, a, b, c, x[ 9], S32); /* 42 */\n    HH (c, d, a, b, x[ 5], S33); /* 43 */\n    HH (b, c, d, a, x[13], S34); /* 44 */\n    HH (a, b, c, d, x[ 3], S31); /* 45 */\n",
                    "rendered": {
                      "text": "    HH (c, d, a, b, x[ 6], S33); /* 39 */\n    HH (b, c, d, a, x[14], S34); /* 40 */\n    HH (a, b, c, d, x[ 1], S31); /* 41 */\n    HH (d, a, b, c, x[ 9], S32); /* 42 */\n    HH (c, d, a, b, x[ 5], S33); /* 43 */\n    HH (b, c, d, a, x[13], S34); /* 44 */\n    HH (a, b, c, d, x[ 3], S31); /* 45 */\n",
                      "markdown": "`    HH (c, d, a, b, x[ 6], S33); /* 39 */\n    HH (b, c, d, a, x[14], S34); /* 40 */\n    HH (a, b, c, d, x[ 1], S31); /* 41 */\n    HH (d, a, b, c, x[ 9], S32); /* 42 */\n    HH (c, d, a, b, x[ 5], S33); /* 43 */\n    HH (b, c, d, a, x[13], S34); /* 44 */\n    HH (a, b, c, d, x[ 3], S31); /* 45 */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/apr_md4.c"
                },
                "region": {
                  "startLine": 347,
                  "startColumn": 3,
                  "endLine": 347,
                  "endColumn": 7,
                  "snippet": {
                    "text": "    HH (d, a, b, c, x[10], S32); /* 38 */\n    HH (c, d, a, b, x[ 6], S33); /* 39 */\n    HH (b, c, d, a, x[14], S34); /* 40 */\n    HH (a, b, c, d, x[ 1], S31); /* 41 */\n    HH (d, a, b, c, x[ 9], S32); /* 42 */\n    HH (c, d, a, b, x[ 5], S33); /* 43 */\n    HH (b, c, d, a, x[13], S34); /* 44 */\n",
                    "rendered": {
                      "text": "    HH (d, a, b, c, x[10], S32); /* 38 */\n    HH (c, d, a, b, x[ 6], S33); /* 39 */\n    HH (b, c, d, a, x[14], S34); /* 40 */\n    HH (a, b, c, d, x[ 1], S31); /* 41 */\n    HH (d, a, b, c, x[ 9], S32); /* 42 */\n    HH (c, d, a, b, x[ 5], S33); /* 43 */\n    HH (b, c, d, a, x[13], S34); /* 44 */\n",
                      "markdown": "`    HH (d, a, b, c, x[10], S32); /* 38 */\n    HH (c, d, a, b, x[ 6], S33); /* 39 */\n    HH (b, c, d, a, x[14], S34); /* 40 */\n    HH (a, b, c, d, x[ 1], S31); /* 41 */\n    HH (d, a, b, c, x[ 9], S32); /* 42 */\n    HH (c, d, a, b, x[ 5], S33); /* 43 */\n    HH (b, c, d, a, x[13], S34); /* 44 */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/apr_md4.c"
                },
                "region": {
                  "startLine": 346,
                  "startColumn": 3,
                  "endLine": 346,
                  "endColumn": 7,
                  "snippet": {
                    "text": "    HH (a, b, c, d, x[ 2], S31); /* 37 */\n    HH (d, a, b, c, x[10], S32); /* 38 */\n    HH (c, d, a, b, x[ 6], S33); /* 39 */\n    HH (b, c, d, a, x[14], S34); /* 40 */\n    HH (a, b, c, d, x[ 1], S31); /* 41 */\n    HH (d, a, b, c, x[ 9], S32); /* 42 */\n    HH (c, d, a, b, x[ 5], S33); /* 43 */\n",
                    "rendered": {
                      "text": "    HH (a, b, c, d, x[ 2], S31); /* 37 */\n    HH (d, a, b, c, x[10], S32); /* 38 */\n    HH (c, d, a, b, x[ 6], S33); /* 39 */\n    HH (b, c, d, a, x[14], S34); /* 40 */\n    HH (a, b, c, d, x[ 1], S31); /* 41 */\n    HH (d, a, b, c, x[ 9], S32); /* 42 */\n    HH (c, d, a, b, x[ 5], S33); /* 43 */\n",
                      "markdown": "`    HH (a, b, c, d, x[ 2], S31); /* 37 */\n    HH (d, a, b, c, x[10], S32); /* 38 */\n    HH (c, d, a, b, x[ 6], S33); /* 39 */\n    HH (b, c, d, a, x[14], S34); /* 40 */\n    HH (a, b, c, d, x[ 1], S31); /* 41 */\n    HH (d, a, b, c, x[ 9], S32); /* 42 */\n    HH (c, d, a, b, x[ 5], S33); /* 43 */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/apr_md4.c"
                },
                "region": {
                  "startLine": 345,
                  "startColumn": 3,
                  "endLine": 345,
                  "endColumn": 7,
                  "snippet": {
                    "text": "    HH (b, c, d, a, x[12], S34); /* 36 */\n    HH (a, b, c, d, x[ 2], S31); /* 37 */\n    HH (d, a, b, c, x[10], S32); /* 38 */\n    HH (c, d, a, b, x[ 6], S33); /* 39 */\n    HH (b, c, d, a, x[14], S34); /* 40 */\n    HH (a, b, c, d, x[ 1], S31); /* 41 */\n    HH (d, a, b, c, x[ 9], S32); /* 42 */\n",
                    "rendered": {
                      "text": "    HH (b, c, d, a, x[12], S34); /* 36 */\n    HH (a, b, c, d, x[ 2], S31); /* 37 */\n    HH (d, a, b, c, x[10], S32); /* 38 */\n    HH (c, d, a, b, x[ 6], S33); /* 39 */\n    HH (b, c, d, a, x[14], S34); /* 40 */\n    HH (a, b, c, d, x[ 1], S31); /* 41 */\n    HH (d, a, b, c, x[ 9], S32); /* 42 */\n",
                      "markdown": "`    HH (b, c, d, a, x[12], S34); /* 36 */\n    HH (a, b, c, d, x[ 2], S31); /* 37 */\n    HH (d, a, b, c, x[10], S32); /* 38 */\n    HH (c, d, a, b, x[ 6], S33); /* 39 */\n    HH (b, c, d, a, x[14], S34); /* 40 */\n    HH (a, b, c, d, x[ 1], S31); /* 41 */\n    HH (d, a, b, c, x[ 9], S32); /* 42 */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/apr_md4.c"
                },
                "region": {
                  "startLine": 344,
                  "startColumn": 3,
                  "endLine": 344,
                  "endColumn": 7,
                  "snippet": {
                    "text": "    HH (c, d, a, b, x[ 4], S33); /* 35 */\n    HH (b, c, d, a, x[12], S34); /* 36 */\n    HH (a, b, c, d, x[ 2], S31); /* 37 */\n    HH (d, a, b, c, x[10], S32); /* 38 */\n    HH (c, d, a, b, x[ 6], S33); /* 39 */\n    HH (b, c, d, a, x[14], S34); /* 40 */\n    HH (a, b, c, d, x[ 1], S31); /* 41 */\n",
                    "rendered": {
                      "text": "    HH (c, d, a, b, x[ 4], S33); /* 35 */\n    HH (b, c, d, a, x[12], S34); /* 36 */\n    HH (a, b, c, d, x[ 2], S31); /* 37 */\n    HH (d, a, b, c, x[10], S32); /* 38 */\n    HH (c, d, a, b, x[ 6], S33); /* 39 */\n    HH (b, c, d, a, x[14], S34); /* 40 */\n    HH (a, b, c, d, x[ 1], S31); /* 41 */\n",
                      "markdown": "`    HH (c, d, a, b, x[ 4], S33); /* 35 */\n    HH (b, c, d, a, x[12], S34); /* 36 */\n    HH (a, b, c, d, x[ 2], S31); /* 37 */\n    HH (d, a, b, c, x[10], S32); /* 38 */\n    HH (c, d, a, b, x[ 6], S33); /* 39 */\n    HH (b, c, d, a, x[14], S34); /* 40 */\n    HH (a, b, c, d, x[ 1], S31); /* 41 */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/apr_md4.c"
                },
                "region": {
                  "startLine": 343,
                  "startColumn": 3,
                  "endLine": 343,
                  "endColumn": 7,
                  "snippet": {
                    "text": "    HH (d, a, b, c, x[ 8], S32); /* 34 */\n    HH (c, d, a, b, x[ 4], S33); /* 35 */\n    HH (b, c, d, a, x[12], S34); /* 36 */\n    HH (a, b, c, d, x[ 2], S31); /* 37 */\n    HH (d, a, b, c, x[10], S32); /* 38 */\n    HH (c, d, a, b, x[ 6], S33); /* 39 */\n    HH (b, c, d, a, x[14], S34); /* 40 */\n",
                    "rendered": {
                      "text": "    HH (d, a, b, c, x[ 8], S32); /* 34 */\n    HH (c, d, a, b, x[ 4], S33); /* 35 */\n    HH (b, c, d, a, x[12], S34); /* 36 */\n    HH (a, b, c, d, x[ 2], S31); /* 37 */\n    HH (d, a, b, c, x[10], S32); /* 38 */\n    HH (c, d, a, b, x[ 6], S33); /* 39 */\n    HH (b, c, d, a, x[14], S34); /* 40 */\n",
                      "markdown": "`    HH (d, a, b, c, x[ 8], S32); /* 34 */\n    HH (c, d, a, b, x[ 4], S33); /* 35 */\n    HH (b, c, d, a, x[12], S34); /* 36 */\n    HH (a, b, c, d, x[ 2], S31); /* 37 */\n    HH (d, a, b, c, x[10], S32); /* 38 */\n    HH (c, d, a, b, x[ 6], S33); /* 39 */\n    HH (b, c, d, a, x[14], S34); /* 40 */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/apr_md4.c"
                },
                "region": {
                  "startLine": 342,
                  "startColumn": 3,
                  "endLine": 342,
                  "endColumn": 7,
                  "snippet": {
                    "text": "    HH (a, b, c, d, x[ 0], S31); /* 33 */\n    HH (d, a, b, c, x[ 8], S32); /* 34 */\n    HH (c, d, a, b, x[ 4], S33); /* 35 */\n    HH (b, c, d, a, x[12], S34); /* 36 */\n    HH (a, b, c, d, x[ 2], S31); /* 37 */\n    HH (d, a, b, c, x[10], S32); /* 38 */\n    HH (c, d, a, b, x[ 6], S33); /* 39 */\n",
                    "rendered": {
                      "text": "    HH (a, b, c, d, x[ 0], S31); /* 33 */\n    HH (d, a, b, c, x[ 8], S32); /* 34 */\n    HH (c, d, a, b, x[ 4], S33); /* 35 */\n    HH (b, c, d, a, x[12], S34); /* 36 */\n    HH (a, b, c, d, x[ 2], S31); /* 37 */\n    HH (d, a, b, c, x[10], S32); /* 38 */\n    HH (c, d, a, b, x[ 6], S33); /* 39 */\n",
                      "markdown": "`    HH (a, b, c, d, x[ 0], S31); /* 33 */\n    HH (d, a, b, c, x[ 8], S32); /* 34 */\n    HH (c, d, a, b, x[ 4], S33); /* 35 */\n    HH (b, c, d, a, x[12], S34); /* 36 */\n    HH (a, b, c, d, x[ 2], S31); /* 37 */\n    HH (d, a, b, c, x[10], S32); /* 38 */\n    HH (c, d, a, b, x[ 6], S33); /* 39 */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/apr_md4.c"
                },
                "region": {
                  "startLine": 341,
                  "startColumn": 3,
                  "endLine": 341,
                  "endColumn": 7,
                  "snippet": {
                    "text": "    /* Round 3 */\n    HH (a, b, c, d, x[ 0], S31); /* 33 */\n    HH (d, a, b, c, x[ 8], S32); /* 34 */\n    HH (c, d, a, b, x[ 4], S33); /* 35 */\n    HH (b, c, d, a, x[12], S34); /* 36 */\n    HH (a, b, c, d, x[ 2], S31); /* 37 */\n    HH (d, a, b, c, x[10], S32); /* 38 */\n",
                    "rendered": {
                      "text": "    /* Round 3 */\n    HH (a, b, c, d, x[ 0], S31); /* 33 */\n    HH (d, a, b, c, x[ 8], S32); /* 34 */\n    HH (c, d, a, b, x[ 4], S33); /* 35 */\n    HH (b, c, d, a, x[12], S34); /* 36 */\n    HH (a, b, c, d, x[ 2], S31); /* 37 */\n    HH (d, a, b, c, x[10], S32); /* 38 */\n",
                      "markdown": "`    /* Round 3 */\n    HH (a, b, c, d, x[ 0], S31); /* 33 */\n    HH (d, a, b, c, x[ 8], S32); /* 34 */\n    HH (c, d, a, b, x[ 4], S33); /* 35 */\n    HH (b, c, d, a, x[12], S34); /* 36 */\n    HH (a, b, c, d, x[ 2], S31); /* 37 */\n    HH (d, a, b, c, x[10], S32); /* 38 */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/apr_md4.c"
                },
                "region": {
                  "startLine": 340,
                  "startColumn": 3,
                  "endLine": 340,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\n    /* Round 3 */\n    HH (a, b, c, d, x[ 0], S31); /* 33 */\n    HH (d, a, b, c, x[ 8], S32); /* 34 */\n    HH (c, d, a, b, x[ 4], S33); /* 35 */\n    HH (b, c, d, a, x[12], S34); /* 36 */\n    HH (a, b, c, d, x[ 2], S31); /* 37 */\n",
                    "rendered": {
                      "text": "\n    /* Round 3 */\n    HH (a, b, c, d, x[ 0], S31); /* 33 */\n    HH (d, a, b, c, x[ 8], S32); /* 34 */\n    HH (c, d, a, b, x[ 4], S33); /* 35 */\n    HH (b, c, d, a, x[12], S34); /* 36 */\n    HH (a, b, c, d, x[ 2], S31); /* 37 */\n",
                      "markdown": "`\n    /* Round 3 */\n    HH (a, b, c, d, x[ 0], S31); /* 33 */\n    HH (d, a, b, c, x[ 8], S32); /* 34 */\n    HH (c, d, a, b, x[ 4], S33); /* 35 */\n    HH (b, c, d, a, x[12], S34); /* 36 */\n    HH (a, b, c, d, x[ 2], S31); /* 37 */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/apr_md4.c"
                },
                "region": {
                  "startLine": 339,
                  "startColumn": 3,
                  "endLine": 339,
                  "endColumn": 7,
                  "snippet": {
                    "text": "    GG (b, c, d, a, x[15], S24); /* 32 */\n\n    /* Round 3 */\n    HH (a, b, c, d, x[ 0], S31); /* 33 */\n    HH (d, a, b, c, x[ 8], S32); /* 34 */\n    HH (c, d, a, b, x[ 4], S33); /* 35 */\n    HH (b, c, d, a, x[12], S34); /* 36 */\n",
                    "rendered": {
                      "text": "    GG (b, c, d, a, x[15], S24); /* 32 */\n\n    /* Round 3 */\n    HH (a, b, c, d, x[ 0], S31); /* 33 */\n    HH (d, a, b, c, x[ 8], S32); /* 34 */\n    HH (c, d, a, b, x[ 4], S33); /* 35 */\n    HH (b, c, d, a, x[12], S34); /* 36 */\n",
                      "markdown": "`    GG (b, c, d, a, x[15], S24); /* 32 */\n\n    /* Round 3 */\n    HH (a, b, c, d, x[ 0], S31); /* 33 */\n    HH (d, a, b, c, x[ 8], S32); /* 34 */\n    HH (c, d, a, b, x[ 4], S33); /* 35 */\n    HH (b, c, d, a, x[12], S34); /* 36 */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/apr_sha1.c"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 51,
                  "endLine": 31,
                  "endColumn": 59,
                  "snippet": {
                    "text": " *     secure than Apache's password format, since Apache's (MD5)\n *     password format uses a random eight character salt to generate\n *     one of many possible hashes for the same password.  Netscape\n *     uses plain SHA1 without a salt, so the same password\n *     will always generate the same hash, making it easier\n *     to break since the search space is smaller.\n *\n",
                    "rendered": {
                      "text": " *     secure than Apache's password format, since Apache's (MD5)\n *     password format uses a random eight character salt to generate\n *     one of many possible hashes for the same password.  Netscape\n *     uses plain SHA1 without a salt, so the same password\n *     will always generate the same hash, making it easier\n *     to break since the search space is smaller.\n *\n",
                      "markdown": "` *     secure than Apache's password format, since Apache's (MD5)\n *     password format uses a random eight character salt to generate\n *     one of many possible hashes for the same password.  Netscape\n *     uses plain SHA1 without a salt, so the same password\n *     will always generate the same hash, making it easier\n *     to break since the search space is smaller.\n *\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/apr_sha1.c"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 48,
                  "endLine": 30,
                  "endColumn": 56,
                  "snippet": {
                    "text": " * Note: SHA1 support is useful for migration purposes, but is less\n *     secure than Apache's password format, since Apache's (MD5)\n *     password format uses a random eight character salt to generate\n *     one of many possible hashes for the same password.  Netscape\n *     uses plain SHA1 without a salt, so the same password\n *     will always generate the same hash, making it easier\n *     to break since the search space is smaller.\n",
                    "rendered": {
                      "text": " * Note: SHA1 support is useful for migration purposes, but is less\n *     secure than Apache's password format, since Apache's (MD5)\n *     password format uses a random eight character salt to generate\n *     one of many possible hashes for the same password.  Netscape\n *     uses plain SHA1 without a salt, so the same password\n *     will always generate the same hash, making it easier\n *     to break since the search space is smaller.\n",
                      "markdown": "` * Note: SHA1 support is useful for migration purposes, but is less\n *     secure than Apache's password format, since Apache's (MD5)\n *     password format uses a random eight character salt to generate\n *     one of many possible hashes for the same password.  Netscape\n *     uses plain SHA1 without a salt, so the same password\n *     will always generate the same hash, making it easier\n *     to break since the search space is smaller.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/apr_sha1.c"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 7,
                  "endLine": 29,
                  "endColumn": 15,
                  "snippet": {
                    "text": " *\n * Note: SHA1 support is useful for migration purposes, but is less\n *     secure than Apache's password format, since Apache's (MD5)\n *     password format uses a random eight character salt to generate\n *     one of many possible hashes for the same password.  Netscape\n *     uses plain SHA1 without a salt, so the same password\n *     will always generate the same hash, making it easier\n",
                    "rendered": {
                      "text": " *\n * Note: SHA1 support is useful for migration purposes, but is less\n *     secure than Apache's password format, since Apache's (MD5)\n *     password format uses a random eight character salt to generate\n *     one of many possible hashes for the same password.  Netscape\n *     uses plain SHA1 without a salt, so the same password\n *     will always generate the same hash, making it easier\n",
                      "markdown": "` *\n * Note: SHA1 support is useful for migration purposes, but is less\n *     secure than Apache's password format, since Apache's (MD5)\n *     password format uses a random eight character salt to generate\n *     one of many possible hashes for the same password.  Netscape\n *     uses plain SHA1 without a salt, so the same password\n *     will always generate the same hash, making it easier\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/apr_sha1.c"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 28,
                  "endLine": 28,
                  "endColumn": 36,
                  "snippet": {
                    "text": " * by Clinton Wong <clintdw@netcom.com>, who also notes that:\n *\n * Note: SHA1 support is useful for migration purposes, but is less\n *     secure than Apache's password format, since Apache's (MD5)\n *     password format uses a random eight character salt to generate\n *     one of many possible hashes for the same password.  Netscape\n *     uses plain SHA1 without a salt, so the same password\n",
                    "rendered": {
                      "text": " * by Clinton Wong <clintdw@netcom.com>, who also notes that:\n *\n * Note: SHA1 support is useful for migration purposes, but is less\n *     secure than Apache's password format, since Apache's (MD5)\n *     password format uses a random eight character salt to generate\n *     one of many possible hashes for the same password.  Netscape\n *     uses plain SHA1 without a salt, so the same password\n",
                      "markdown": "` * by Clinton Wong <clintdw@netcom.com>, who also notes that:\n *\n * Note: SHA1 support is useful for migration purposes, but is less\n *     secure than Apache's password format, since Apache's (MD5)\n *     password format uses a random eight character salt to generate\n *     one of many possible hashes for the same password.  Netscape\n *     uses plain SHA1 without a salt, so the same password\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/apr_sha1.c"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 21,
                  "endLine": 23,
                  "endColumn": 29,
                  "snippet": {
                    "text": " *     apr_sha1_base64(const char *clear, int len, char *out);\n *\n * provides a means to SHA1 crypt/encode a plaintext password in\n * a way which makes password files compatible with those commonly\n * used in netscape web and ldap installations. It was put together\n * by Clinton Wong <clintdw@netcom.com>, who also notes that:\n *\n",
                    "rendered": {
                      "text": " *     apr_sha1_base64(const char *clear, int len, char *out);\n *\n * provides a means to SHA1 crypt/encode a plaintext password in\n * a way which makes password files compatible with those commonly\n * used in netscape web and ldap installations. It was put together\n * by Clinton Wong <clintdw@netcom.com>, who also notes that:\n *\n",
                      "markdown": "` *     apr_sha1_base64(const char *clear, int len, char *out);\n *\n * provides a means to SHA1 crypt/encode a plaintext password in\n * a way which makes password files compatible with those commonly\n * used in netscape web and ldap installations. It was put together\n * by Clinton Wong <clintdw@netcom.com>, who also notes that:\n *\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/apr_sha1.c"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 53,
                  "endLine": 22,
                  "endColumn": 61,
                  "snippet": {
                    "text": " *\n *     apr_sha1_base64(const char *clear, int len, char *out);\n *\n * provides a means to SHA1 crypt/encode a plaintext password in\n * a way which makes password files compatible with those commonly\n * used in netscape web and ldap installations. It was put together\n * by Clinton Wong <clintdw@netcom.com>, who also notes that:\n",
                    "rendered": {
                      "text": " *\n *     apr_sha1_base64(const char *clear, int len, char *out);\n *\n * provides a means to SHA1 crypt/encode a plaintext password in\n * a way which makes password files compatible with those commonly\n * used in netscape web and ldap installations. It was put together\n * by Clinton Wong <clintdw@netcom.com>, who also notes that:\n",
                      "markdown": "` *\n *     apr_sha1_base64(const char *clear, int len, char *out);\n *\n * provides a means to SHA1 crypt/encode a plaintext password in\n * a way which makes password files compatible with those commonly\n * used in netscape web and ldap installations. It was put together\n * by Clinton Wong <clintdw@netcom.com>, who also notes that:\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/apr_sha1.c"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 11,
                  "endLine": 199,
                  "endColumn": 15,
                  "snippet": {
                    "text": "            cp[1] = ct[2];\n            cp[2] = ct[1];\n            cp[3] = ct[0];\n            cp += sizeof(apr_uint32_t);\n        }\n    }\n}\n",
                    "rendered": {
                      "text": "            cp[1] = ct[2];\n            cp[2] = ct[1];\n            cp[3] = ct[0];\n            cp += sizeof(apr_uint32_t);\n        }\n    }\n}\n",
                      "markdown": "`            cp[1] = ct[2];\n            cp[2] = ct[1];\n            cp[3] = ct[0];\n            cp += sizeof(apr_uint32_t);\n        }\n    }\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/apr_sha1.c"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 7,
                  "endLine": 189,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n    if (isLittleEndian()) { /* do the swap only if it is little endian */\n        count /= sizeof(apr_uint32_t);\n        cp = (apr_byte_t *) buffer;\n        for (i = 0; i < count; ++i) {\n            ct[0] = cp[0];\n            ct[1] = cp[1];\n",
                    "rendered": {
                      "text": "\n    if (isLittleEndian()) { /* do the swap only if it is little endian */\n        count /= sizeof(apr_uint32_t);\n        cp = (apr_byte_t *) buffer;\n        for (i = 0; i < count; ++i) {\n            ct[0] = cp[0];\n            ct[1] = cp[1];\n",
                      "markdown": "`\n    if (isLittleEndian()) { /* do the swap only if it is little endian */\n        count /= sizeof(apr_uint32_t);\n        cp = (apr_byte_t *) buffer;\n        for (i = 0; i < count; ++i) {\n            ct[0] = cp[0];\n            ct[1] = cp[1];\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/apr_passwd.c"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 30,
                  "endLine": 108,
                  "endColumn": 38,
                  "snippet": {
                    "text": " * they match, or APR_EMISMATCH if they don't.  If the platform doesn't\n * support crypt, then the default check is against a clear text string.\n */\nAPR_DECLARE(apr_status_t) apr_password_validate(const char *passwd,\n                                                const char *hash)\n{\n    char sample[200];\n",
                    "rendered": {
                      "text": " * they match, or APR_EMISMATCH if they don't.  If the platform doesn't\n * support crypt, then the default check is against a clear text string.\n */\nAPR_DECLARE(apr_status_t) apr_password_validate(const char *passwd,\n                                                const char *hash)\n{\n    char sample[200];\n",
                      "markdown": "` * they match, or APR_EMISMATCH if they don't.  If the platform doesn't\n * support crypt, then the default check is against a clear text string.\n */\nAPR_DECLARE(apr_status_t) apr_password_validate(const char *passwd,\n                                                const char *hash)\n{\n    char sample[200];\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/apr_passwd.c"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 40,
                  "endLine": 104,
                  "endColumn": 48,
                  "snippet": {
                    "text": "/*\n * Validate a plaintext password against a smashed one.  Uses either\n * crypt() (if available) or apr_md5_encode() or apr_sha1_base64(), depending\n * upon the format of the smashed input password.  Returns APR_SUCCESS if\n * they match, or APR_EMISMATCH if they don't.  If the platform doesn't\n * support crypt, then the default check is against a clear text string.\n */\n",
                    "rendered": {
                      "text": "/*\n * Validate a plaintext password against a smashed one.  Uses either\n * crypt() (if available) or apr_md5_encode() or apr_sha1_base64(), depending\n * upon the format of the smashed input password.  Returns APR_SUCCESS if\n * they match, or APR_EMISMATCH if they don't.  If the platform doesn't\n * support crypt, then the default check is against a clear text string.\n */\n",
                      "markdown": "`/*\n * Validate a plaintext password against a smashed one.  Uses either\n * crypt() (if available) or apr_md5_encode() or apr_sha1_base64(), depending\n * upon the format of the smashed input password.  Returns APR_SUCCESS if\n * they match, or APR_EMISMATCH if they don't.  If the platform doesn't\n * support crypt, then the default check is against a clear text string.\n */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/apr_passwd.c"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 24,
                  "endLine": 102,
                  "endColumn": 32,
                  "snippet": {
                    "text": "#endif\n\n/*\n * Validate a plaintext password against a smashed one.  Uses either\n * crypt() (if available) or apr_md5_encode() or apr_sha1_base64(), depending\n * upon the format of the smashed input password.  Returns APR_SUCCESS if\n * they match, or APR_EMISMATCH if they don't.  If the platform doesn't\n",
                    "rendered": {
                      "text": "#endif\n\n/*\n * Validate a plaintext password against a smashed one.  Uses either\n * crypt() (if available) or apr_md5_encode() or apr_sha1_base64(), depending\n * upon the format of the smashed input password.  Returns APR_SUCCESS if\n * they match, or APR_EMISMATCH if they don't.  If the platform doesn't\n",
                      "markdown": "`#endif\n\n/*\n * Validate a plaintext password against a smashed one.  Uses either\n * crypt() (if available) or apr_md5_encode() or apr_sha1_base64(), depending\n * upon the format of the smashed input password.  Returns APR_SUCCESS if\n * they match, or APR_EMISMATCH if they don't.  If the platform doesn't\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/apr_passwd.c"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 11,
                  "endLine": 90,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n#else\n\n#error apr_password_validate() is not threadsafe.  rebuild APR without thread support.\n\n#endif\n#endif\n",
                    "rendered": {
                      "text": "\n#else\n\n#error apr_password_validate() is not threadsafe.  rebuild APR without thread support.\n\n#endif\n#endif\n",
                      "markdown": "`\n#else\n\n#error apr_password_validate() is not threadsafe.  rebuild APR without thread support.\n\n#endif\n#endif\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/apr_crypto.c"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 7,
                  "endLine": 158,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    apr_size_t i;\n\n    for (i = 0; i < size; ++i) {\n        diff |= p1[i] ^ p2[i];\n    }\n\n    return 1 & ((diff - 1) >> 8);\n",
                    "rendered": {
                      "text": "    apr_size_t i;\n\n    for (i = 0; i < size; ++i) {\n        diff |= p1[i] ^ p2[i];\n    }\n\n    return 1 & ((diff - 1) >> 8);\n",
                      "markdown": "`    apr_size_t i;\n\n    for (i = 0; i < size; ++i) {\n        diff |= p1[i] ^ p2[i];\n    }\n\n    return 1 & ((diff - 1) >> 8);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/apr_crypto.c"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 17,
                  "endLine": 154,
                  "endColumn": 23,
                  "snippet": {
                    "text": "{\n    const unsigned char *p1 = buf1;\n    const unsigned char *p2 = buf2;\n    unsigned char diff = 0;\n    apr_size_t i;\n\n    for (i = 0; i < size; ++i) {\n",
                    "rendered": {
                      "text": "{\n    const unsigned char *p1 = buf1;\n    const unsigned char *p2 = buf2;\n    unsigned char diff = 0;\n    apr_size_t i;\n\n    for (i = 0; i < size; ++i) {\n",
                      "markdown": "`{\n    const unsigned char *p1 = buf1;\n    const unsigned char *p2 = buf2;\n    unsigned char diff = 0;\n    apr_size_t i;\n\n    for (i = 0; i < size; ++i) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/crypt_blowfish.c"
                },
                "region": {
                  "startLine": 830,
                  "startColumn": 21,
                  "endLine": 830,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t\tchar o[7 + 22 + 31 + 1 + 1 + 1];\n\t} buf;\n\n/* Hash the supplied password */\n\t_crypt_output_magic(setting, output, size);\n\tretval = BF_crypt(key, setting, output, size, 16);\n\tsave_errno = errno;\n",
                    "rendered": {
                      "text": "\t\tchar o[7 + 22 + 31 + 1 + 1 + 1];\n\t} buf;\n\n/* Hash the supplied password */\n\t_crypt_output_magic(setting, output, size);\n\tretval = BF_crypt(key, setting, output, size, 16);\n\tsave_errno = errno;\n",
                      "markdown": "`\t\tchar o[7 + 22 + 31 + 1 + 1 + 1];\n\t} buf;\n\n/* Hash the supplied password */\n\t_crypt_output_magic(setting, output, size);\n\tretval = BF_crypt(key, setting, output, size, 16);\n\tsave_errno = errno;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/crypt_blowfish.c"
                },
                "region": {
                  "startLine": 806,
                  "startColumn": 60,
                  "endLine": 806,
                  "endColumn": 68,
                  "snippet": {
                    "text": " * from incorrectly-computed hashes - merely fixing whatever broke is not\n * enough.  Thus, a proactive measure like this self-test is needed.\n *\n * 2. We don't want to leave sensitive data from our actual password hash\n * computation on the stack or in registers.  Previous revisions of the code\n * would do explicit cleanups, but simply running the self-test after hash\n * computation is more reliable.\n",
                    "rendered": {
                      "text": " * from incorrectly-computed hashes - merely fixing whatever broke is not\n * enough.  Thus, a proactive measure like this self-test is needed.\n *\n * 2. We don't want to leave sensitive data from our actual password hash\n * computation on the stack or in registers.  Previous revisions of the code\n * would do explicit cleanups, but simply running the self-test after hash\n * computation is more reliable.\n",
                      "markdown": "` * from incorrectly-computed hashes - merely fixing whatever broke is not\n * enough.  Thus, a proactive measure like this self-test is needed.\n *\n * 2. We don't want to leave sensitive data from our actual password hash\n * computation on the stack or in registers.  Previous revisions of the code\n * would do explicit cleanups, but simply running the self-test after hash\n * computation is more reliable.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/crypt_blowfish.c"
                },
                "region": {
                  "startLine": 638,
                  "startColumn": 47,
                  "endLine": 638,
                  "endColumn": 55,
                  "snippet": {
                    "text": " *\n * It is crucial that we don't do the same to the expanded key used in the main\n * Eksblowfish loop.  By doing it to only one of these two, we deviate from a\n * state that could be directly specified by a password to the buggy algorithm\n * (and to the fully correct one as well, but that's a side-effect).\n */\n\tinitial[0] ^= sign;\n",
                    "rendered": {
                      "text": " *\n * It is crucial that we don't do the same to the expanded key used in the main\n * Eksblowfish loop.  By doing it to only one of these two, we deviate from a\n * state that could be directly specified by a password to the buggy algorithm\n * (and to the fully correct one as well, but that's a side-effect).\n */\n\tinitial[0] ^= sign;\n",
                      "markdown": "` *\n * It is crucial that we don't do the same to the expanded key used in the main\n * Eksblowfish loop.  By doing it to only one of these two, we deviate from a\n * state that could be directly specified by a password to the buggy algorithm\n * (and to the fully correct one as well, but that's a side-effect).\n */\n\tinitial[0] ^= sign;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/crypt_blowfish.c"
                },
                "region": {
                  "startLine": 620,
                  "startColumn": 3,
                  "endLine": 620,
                  "endColumn": 11,
                  "snippet": {
                    "text": " * exactly the same result.  If so and if \"sign\" is non-zero, which indicates\n * that there was a non-benign sign extension, this means that we have a\n * collision between the correctly computed hash for this password and a set of\n * passwords that could be supplied to the buggy algorithm.  Our safety measure\n * is meant to protect from such many-buggy to one-correct collisions, by\n * deviating from the correct algorithm in such cases.  Let's check for this.\n */\n",
                    "rendered": {
                      "text": " * exactly the same result.  If so and if \"sign\" is non-zero, which indicates\n * that there was a non-benign sign extension, this means that we have a\n * collision between the correctly computed hash for this password and a set of\n * passwords that could be supplied to the buggy algorithm.  Our safety measure\n * is meant to protect from such many-buggy to one-correct collisions, by\n * deviating from the correct algorithm in such cases.  Let's check for this.\n */\n",
                      "markdown": "` * exactly the same result.  If so and if \"sign\" is non-zero, which indicates\n * that there was a non-benign sign extension, this means that we have a\n * collision between the correctly computed hash for this password and a set of\n * passwords that could be supplied to the buggy algorithm.  Our safety measure\n * is meant to protect from such many-buggy to one-correct collisions, by\n * deviating from the correct algorithm in such cases.  Let's check for this.\n */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/crypt_blowfish.c"
                },
                "region": {
                  "startLine": 619,
                  "startColumn": 58,
                  "endLine": 619,
                  "endColumn": 66,
                  "snippet": {
                    "text": " * At this point, \"diff\" is zero iff the correct and buggy algorithms produced\n * exactly the same result.  If so and if \"sign\" is non-zero, which indicates\n * that there was a non-benign sign extension, this means that we have a\n * collision between the correctly computed hash for this password and a set of\n * passwords that could be supplied to the buggy algorithm.  Our safety measure\n * is meant to protect from such many-buggy to one-correct collisions, by\n * deviating from the correct algorithm in such cases.  Let's check for this.\n",
                    "rendered": {
                      "text": " * At this point, \"diff\" is zero iff the correct and buggy algorithms produced\n * exactly the same result.  If so and if \"sign\" is non-zero, which indicates\n * that there was a non-benign sign extension, this means that we have a\n * collision between the correctly computed hash for this password and a set of\n * passwords that could be supplied to the buggy algorithm.  Our safety measure\n * is meant to protect from such many-buggy to one-correct collisions, by\n * deviating from the correct algorithm in such cases.  Let's check for this.\n",
                      "markdown": "` * At this point, \"diff\" is zero iff the correct and buggy algorithms produced\n * exactly the same result.  If so and if \"sign\" is non-zero, which indicates\n * that there was a non-benign sign extension, this means that we have a\n * collision between the correctly computed hash for this password and a set of\n * passwords that could be supplied to the buggy algorithm.  Our safety measure\n * is meant to protect from such many-buggy to one-correct collisions, by\n * deviating from the correct algorithm in such cases.  Let's check for this.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/crypt_blowfish.c"
                },
                "region": {
                  "startLine": 570,
                  "startColumn": 67,
                  "endLine": 570,
                  "endColumn": 75,
                  "snippet": {
                    "text": " *\n * We use an approach that tries to minimize side-channel leaks of password\n * information - that is, we mostly use fixed-cost bitwise operations instead\n * of branches or table lookups.  (One conditional branch based on password\n * length remains.  It is not part of the bug aftermath, though, and is\n * difficult and possibly unreasonable to avoid given the use of C strings by\n * the caller, which results in similar timing leaks anyway.)\n",
                    "rendered": {
                      "text": " *\n * We use an approach that tries to minimize side-channel leaks of password\n * information - that is, we mostly use fixed-cost bitwise operations instead\n * of branches or table lookups.  (One conditional branch based on password\n * length remains.  It is not part of the bug aftermath, though, and is\n * difficult and possibly unreasonable to avoid given the use of C strings by\n * the caller, which results in similar timing leaks anyway.)\n",
                      "markdown": "` *\n * We use an approach that tries to minimize side-channel leaks of password\n * information - that is, we mostly use fixed-cost bitwise operations instead\n * of branches or table lookups.  (One conditional branch based on password\n * length remains.  It is not part of the bug aftermath, though, and is\n * difficult and possibly unreasonable to avoid given the use of C strings by\n * the caller, which results in similar timing leaks anyway.)\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/crypt_blowfish.c"
                },
                "region": {
                  "startLine": 568,
                  "startColumn": 67,
                  "endLine": 568,
                  "endColumn": 75,
                  "snippet": {
                    "text": " * reasonable tradeoff to use when authenticating against existing hashes that\n * are not reliably known to have been computed with the correct algorithm.\n *\n * We use an approach that tries to minimize side-channel leaks of password\n * information - that is, we mostly use fixed-cost bitwise operations instead\n * of branches or table lookups.  (One conditional branch based on password\n * length remains.  It is not part of the bug aftermath, though, and is\n",
                    "rendered": {
                      "text": " * reasonable tradeoff to use when authenticating against existing hashes that\n * are not reliably known to have been computed with the correct algorithm.\n *\n * We use an approach that tries to minimize side-channel leaks of password\n * information - that is, we mostly use fixed-cost bitwise operations instead\n * of branches or table lookups.  (One conditional branch based on password\n * length remains.  It is not part of the bug aftermath, though, and is\n",
                      "markdown": "` * reasonable tradeoff to use when authenticating against existing hashes that\n * are not reliably known to have been computed with the correct algorithm.\n *\n * We use an approach that tries to minimize side-channel leaks of password\n * information - that is, we mostly use fixed-cost bitwise operations instead\n * of branches or table lookups.  (One conditional branch based on password\n * length remains.  It is not part of the bug aftermath, though, and is\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/crypt_blowfish.c"
                },
                "region": {
                  "startLine": 562,
                  "startColumn": 9,
                  "endLine": 562,
                  "endColumn": 17,
                  "snippet": {
                    "text": " * characters with the 8th bit set (although only a percentage of those in a\n * collision-producing way), the anti-collision safety measure affects\n * only a subset of passwords containing the '\\xff' character (not even all of\n * those passwords, just some of them).  This character is not found in valid\n * UTF-8 sequences and is rarely used in popular 8-bit character encodings.\n * Thus, the safety measure is unlikely to cause much annoyance, and is a\n * reasonable tradeoff to use when authenticating against existing hashes that\n",
                    "rendered": {
                      "text": " * characters with the 8th bit set (although only a percentage of those in a\n * collision-producing way), the anti-collision safety measure affects\n * only a subset of passwords containing the '\\xff' character (not even all of\n * those passwords, just some of them).  This character is not found in valid\n * UTF-8 sequences and is rarely used in popular 8-bit character encodings.\n * Thus, the safety measure is unlikely to cause much annoyance, and is a\n * reasonable tradeoff to use when authenticating against existing hashes that\n",
                      "markdown": "` * characters with the 8th bit set (although only a percentage of those in a\n * collision-producing way), the anti-collision safety measure affects\n * only a subset of passwords containing the '\\xff' character (not even all of\n * those passwords, just some of them).  This character is not found in valid\n * UTF-8 sequences and is rarely used in popular 8-bit character encodings.\n * Thus, the safety measure is unlikely to cause much annoyance, and is a\n * reasonable tradeoff to use when authenticating against existing hashes that\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/crypt_blowfish.c"
                },
                "region": {
                  "startLine": 561,
                  "startColumn": 20,
                  "endLine": 561,
                  "endColumn": 28,
                  "snippet": {
                    "text": " * While the bug itself affected the majority of passwords containing\n * characters with the 8th bit set (although only a percentage of those in a\n * collision-producing way), the anti-collision safety measure affects\n * only a subset of passwords containing the '\\xff' character (not even all of\n * those passwords, just some of them).  This character is not found in valid\n * UTF-8 sequences and is rarely used in popular 8-bit character encodings.\n * Thus, the safety measure is unlikely to cause much annoyance, and is a\n",
                    "rendered": {
                      "text": " * While the bug itself affected the majority of passwords containing\n * characters with the 8th bit set (although only a percentage of those in a\n * collision-producing way), the anti-collision safety measure affects\n * only a subset of passwords containing the '\\xff' character (not even all of\n * those passwords, just some of them).  This character is not found in valid\n * UTF-8 sequences and is rarely used in popular 8-bit character encodings.\n * Thus, the safety measure is unlikely to cause much annoyance, and is a\n",
                      "markdown": "` * While the bug itself affected the majority of passwords containing\n * characters with the 8th bit set (although only a percentage of those in a\n * collision-producing way), the anti-collision safety measure affects\n * only a subset of passwords containing the '\\xff' character (not even all of\n * those passwords, just some of them).  This character is not found in valid\n * UTF-8 sequences and is rarely used in popular 8-bit character encodings.\n * Thus, the safety measure is unlikely to cause much annoyance, and is a\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/crypt_blowfish.c"
                },
                "region": {
                  "startLine": 558,
                  "startColumn": 49,
                  "endLine": 558,
                  "endColumn": 57,
                  "snippet": {
                    "text": " * multiple inputs to the buggy algorithm there exist easily found inputs to\n * the correct algorithm that produce the same hash.  Thus, we optionally\n * deviate from the correct algorithm just enough to avoid such collisions.\n * While the bug itself affected the majority of passwords containing\n * characters with the 8th bit set (although only a percentage of those in a\n * collision-producing way), the anti-collision safety measure affects\n * only a subset of passwords containing the '\\xff' character (not even all of\n",
                    "rendered": {
                      "text": " * multiple inputs to the buggy algorithm there exist easily found inputs to\n * the correct algorithm that produce the same hash.  Thus, we optionally\n * deviate from the correct algorithm just enough to avoid such collisions.\n * While the bug itself affected the majority of passwords containing\n * characters with the 8th bit set (although only a percentage of those in a\n * collision-producing way), the anti-collision safety measure affects\n * only a subset of passwords containing the '\\xff' character (not even all of\n",
                      "markdown": "` * multiple inputs to the buggy algorithm there exist easily found inputs to\n * the correct algorithm that produce the same hash.  Thus, we optionally\n * deviate from the correct algorithm just enough to avoid such collisions.\n * While the bug itself affected the majority of passwords containing\n * characters with the 8th bit set (although only a percentage of those in a\n * collision-producing way), the anti-collision safety measure affects\n * only a subset of passwords containing the '\\xff' character (not even all of\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/crypt_blowfish.c"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 15,
                  "endLine": 32,
                  "endColumn": 23,
                  "snippet": {
                    "text": " *\n * This implementation is mostly compatible with OpenBSD's bcrypt.c (prefix\n * \"$2a$\") by Niels Provos <provos at citi.umich.edu>, and uses some of his\n * ideas.  The password hashing algorithm was designed by David Mazieres\n * <dm at lcs.mit.edu>.  For more information on the level of compatibility,\n * prefer refer to the comments in BF_set_key() below and to the included\n * crypt(3) man page.\n",
                    "rendered": {
                      "text": " *\n * This implementation is mostly compatible with OpenBSD's bcrypt.c (prefix\n * \"$2a$\") by Niels Provos <provos at citi.umich.edu>, and uses some of his\n * ideas.  The password hashing algorithm was designed by David Mazieres\n * <dm at lcs.mit.edu>.  For more information on the level of compatibility,\n * prefer refer to the comments in BF_set_key() below and to the included\n * crypt(3) man page.\n",
                      "markdown": "` *\n * This implementation is mostly compatible with OpenBSD's bcrypt.c (prefix\n * \"$2a$\") by Niels Provos <provos at citi.umich.edu>, and uses some of his\n * ideas.  The password hashing algorithm was designed by David Mazieres\n * <dm at lcs.mit.edu>.  For more information on the level of compatibility,\n * prefer refer to the comments in BF_set_key() below and to the included\n * crypt(3) man page.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/crypt_blowfish.c"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 64,
                  "endLine": 7,
                  "endColumn": 72,
                  "snippet": {
                    "text": " *\thttp://www.openwall.com/crypt/\n *\n * This code comes from John the Ripper password cracker, with reentrant\n * and crypt(3) interfaces added, but optimizations specific to password\n * cracking removed.\n *\n * Written by Solar Designer <solar at openwall.com> in 1998-2011.\n",
                    "rendered": {
                      "text": " *\thttp://www.openwall.com/crypt/\n *\n * This code comes from John the Ripper password cracker, with reentrant\n * and crypt(3) interfaces added, but optimizations specific to password\n * cracking removed.\n *\n * Written by Solar Designer <solar at openwall.com> in 1998-2011.\n",
                      "markdown": "` *\thttp://www.openwall.com/crypt/\n *\n * This code comes from John the Ripper password cracker, with reentrant\n * and crypt(3) interfaces added, but optimizations specific to password\n * cracking removed.\n *\n * Written by Solar Designer <solar at openwall.com> in 1998-2011.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/crypt_blowfish.c"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 40,
                  "endLine": 6,
                  "endColumn": 48,
                  "snippet": {
                    "text": " *\n *\thttp://www.openwall.com/crypt/\n *\n * This code comes from John the Ripper password cracker, with reentrant\n * and crypt(3) interfaces added, but optimizations specific to password\n * cracking removed.\n *\n",
                    "rendered": {
                      "text": " *\n *\thttp://www.openwall.com/crypt/\n *\n * This code comes from John the Ripper password cracker, with reentrant\n * and crypt(3) interfaces added, but optimizations specific to password\n * cracking removed.\n *\n",
                      "markdown": "` *\n *\thttp://www.openwall.com/crypt/\n *\n * This code comes from John the Ripper password cracker, with reentrant\n * and crypt(3) interfaces added, but optimizations specific to password\n * cracking removed.\n *\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/crypt_blowfish.c"
                },
                "region": {
                  "startLine": 817,
                  "startColumn": 28,
                  "endLine": 817,
                  "endColumn": 52,
                  "snippet": {
                    "text": "char *_crypt_blowfish_rn(const char *key, const char *setting,\n\tchar *output, apr_size_t size)\n{\n\tconst char *test_key = \"8b \\xd0\\xc1\\xd2\\xcf\\xcc\\xd8\";\n\tconst char *test_setting = \"$2a$00$abcdefghijklmnopqrstuu\";\n\tstatic const char * const test_hash[2] =\n\t\t{\"VUrPmXD6q/nVSSp7pNDhCR9071IfIRe\\0\\x55\", /* $2x$ */\n",
                    "rendered": {
                      "text": "char *_crypt_blowfish_rn(const char *key, const char *setting,\n\tchar *output, apr_size_t size)\n{\n\tconst char *test_key = \"8b \\xd0\\xc1\\xd2\\xcf\\xcc\\xd8\";\n\tconst char *test_setting = \"$2a$00$abcdefghijklmnopqrstuu\";\n\tstatic const char * const test_hash[2] =\n\t\t{\"VUrPmXD6q/nVSSp7pNDhCR9071IfIRe\\0\\x55\", /* $2x$ */\n",
                      "markdown": "`char *_crypt_blowfish_rn(const char *key, const char *setting,\n\tchar *output, apr_size_t size)\n{\n\tconst char *test_key = \"8b \\xd0\\xc1\\xd2\\xcf\\xcc\\xd8\";\n\tconst char *test_setting = \"$2a$00$abcdefghijklmnopqrstuu\";\n\tstatic const char * const test_hash[2] =\n\t\t{\"VUrPmXD6q/nVSSp7pNDhCR9071IfIRe\\0\\x55\", /* $2x$ */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/crypt_blowfish.c"
                },
                "region": {
                  "startLine": 626,
                  "endLine": 626,
                  "endColumn": 6,
                  "snippet": {
                    "text": " */\n\tdiff |= diff >> 16; /* still zero iff exact match */\n\tdiff &= 0xffff; /* ditto */\n\tdiff += 0xffff; /* bit 16 set iff \"diff\" was non-zero (on non-match) */\n\tsign <<= 9; /* move the non-benign sign extension flag to bit 16 */\n\tsign &= ~diff & safety; /* action needed? */\n\n",
                    "rendered": {
                      "text": " */\n\tdiff |= diff >> 16; /* still zero iff exact match */\n\tdiff &= 0xffff; /* ditto */\n\tdiff += 0xffff; /* bit 16 set iff \"diff\" was non-zero (on non-match) */\n\tsign <<= 9; /* move the non-benign sign extension flag to bit 16 */\n\tsign &= ~diff & safety; /* action needed? */\n\n",
                      "markdown": "` */\n\tdiff |= diff >> 16; /* still zero iff exact match */\n\tdiff &= 0xffff; /* ditto */\n\tdiff += 0xffff; /* bit 16 set iff \"diff\" was non-zero (on non-match) */\n\tsign <<= 9; /* move the non-benign sign extension flag to bit 16 */\n\tsign &= ~diff & safety; /* action needed? */\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/crypt_blowfish.c"
                },
                "region": {
                  "startLine": 625,
                  "endLine": 625,
                  "endColumn": 6,
                  "snippet": {
                    "text": " * deviating from the correct algorithm in such cases.  Let's check for this.\n */\n\tdiff |= diff >> 16; /* still zero iff exact match */\n\tdiff &= 0xffff; /* ditto */\n\tdiff += 0xffff; /* bit 16 set iff \"diff\" was non-zero (on non-match) */\n\tsign <<= 9; /* move the non-benign sign extension flag to bit 16 */\n\tsign &= ~diff & safety; /* action needed? */\n",
                    "rendered": {
                      "text": " * deviating from the correct algorithm in such cases.  Let's check for this.\n */\n\tdiff |= diff >> 16; /* still zero iff exact match */\n\tdiff &= 0xffff; /* ditto */\n\tdiff += 0xffff; /* bit 16 set iff \"diff\" was non-zero (on non-match) */\n\tsign <<= 9; /* move the non-benign sign extension flag to bit 16 */\n\tsign &= ~diff & safety; /* action needed? */\n",
                      "markdown": "` * deviating from the correct algorithm in such cases.  Let's check for this.\n */\n\tdiff |= diff >> 16; /* still zero iff exact match */\n\tdiff &= 0xffff; /* ditto */\n\tdiff += 0xffff; /* bit 16 set iff \"diff\" was non-zero (on non-match) */\n\tsign <<= 9; /* move the non-benign sign extension flag to bit 16 */\n\tsign &= ~diff & safety; /* action needed? */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/crypt_blowfish.c"
                },
                "region": {
                  "startLine": 624,
                  "startColumn": 8,
                  "endLine": 624,
                  "endColumn": 14,
                  "snippet": {
                    "text": " * is meant to protect from such many-buggy to one-correct collisions, by\n * deviating from the correct algorithm in such cases.  Let's check for this.\n */\n\tdiff |= diff >> 16; /* still zero iff exact match */\n\tdiff &= 0xffff; /* ditto */\n\tdiff += 0xffff; /* bit 16 set iff \"diff\" was non-zero (on non-match) */\n\tsign <<= 9; /* move the non-benign sign extension flag to bit 16 */\n",
                    "rendered": {
                      "text": " * is meant to protect from such many-buggy to one-correct collisions, by\n * deviating from the correct algorithm in such cases.  Let's check for this.\n */\n\tdiff |= diff >> 16; /* still zero iff exact match */\n\tdiff &= 0xffff; /* ditto */\n\tdiff += 0xffff; /* bit 16 set iff \"diff\" was non-zero (on non-match) */\n\tsign <<= 9; /* move the non-benign sign extension flag to bit 16 */\n",
                      "markdown": "` * is meant to protect from such many-buggy to one-correct collisions, by\n * deviating from the correct algorithm in such cases.  Let's check for this.\n */\n\tdiff |= diff >> 16; /* still zero iff exact match */\n\tdiff &= 0xffff; /* ditto */\n\tdiff += 0xffff; /* bit 16 set iff \"diff\" was non-zero (on non-match) */\n\tsign <<= 9; /* move the non-benign sign extension flag to bit 16 */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/crypt_blowfish.c"
                },
                "region": {
                  "startLine": 624,
                  "endLine": 624,
                  "endColumn": 6,
                  "snippet": {
                    "text": " * is meant to protect from such many-buggy to one-correct collisions, by\n * deviating from the correct algorithm in such cases.  Let's check for this.\n */\n\tdiff |= diff >> 16; /* still zero iff exact match */\n\tdiff &= 0xffff; /* ditto */\n\tdiff += 0xffff; /* bit 16 set iff \"diff\" was non-zero (on non-match) */\n\tsign <<= 9; /* move the non-benign sign extension flag to bit 16 */\n",
                    "rendered": {
                      "text": " * is meant to protect from such many-buggy to one-correct collisions, by\n * deviating from the correct algorithm in such cases.  Let's check for this.\n */\n\tdiff |= diff >> 16; /* still zero iff exact match */\n\tdiff &= 0xffff; /* ditto */\n\tdiff += 0xffff; /* bit 16 set iff \"diff\" was non-zero (on non-match) */\n\tsign <<= 9; /* move the non-benign sign extension flag to bit 16 */\n",
                      "markdown": "` * is meant to protect from such many-buggy to one-correct collisions, by\n * deviating from the correct algorithm in such cases.  Let's check for this.\n */\n\tdiff |= diff >> 16; /* still zero iff exact match */\n\tdiff &= 0xffff; /* ditto */\n\tdiff += 0xffff; /* bit 16 set iff \"diff\" was non-zero (on non-match) */\n\tsign <<= 9; /* move the non-benign sign extension flag to bit 16 */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/crypt_blowfish.c"
                },
                "region": {
                  "startLine": 609,
                  "startColumn": 1,
                  "endLine": 609,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\t\t\telse\n\t\t\t\tptr++;\n\t\t}\n\t\tdiff |= tmp[0] ^ tmp[1]; /* Non-zero on any differences */\n\n\t\texpanded[i] = tmp[bug];\n\t\tinitial[i] = BF_init_state.P[i] ^ tmp[bug];\n",
                    "rendered": {
                      "text": "\t\t\telse\n\t\t\t\tptr++;\n\t\t}\n\t\tdiff |= tmp[0] ^ tmp[1]; /* Non-zero on any differences */\n\n\t\texpanded[i] = tmp[bug];\n\t\tinitial[i] = BF_init_state.P[i] ^ tmp[bug];\n",
                      "markdown": "`\t\t\telse\n\t\t\t\tptr++;\n\t\t}\n\t\tdiff |= tmp[0] ^ tmp[1]; /* Non-zero on any differences */\n\n\t\texpanded[i] = tmp[bug];\n\t\tinitial[i] = BF_init_state.P[i] ^ tmp[bug];\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/crypt_blowfish.c"
                },
                "region": {
                  "startLine": 587,
                  "startColumn": 7,
                  "endLine": 587,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\tbug = (unsigned int)flags & 1;\n\tsafety = ((BF_word)flags & 2) << 15;\n\n\tsign = diff = 0;\n\n\tfor (i = 0; i < BF_N + 2; i++) {\n\t\ttmp[0] = tmp[1] = 0;\n",
                    "rendered": {
                      "text": "\tbug = (unsigned int)flags & 1;\n\tsafety = ((BF_word)flags & 2) << 15;\n\n\tsign = diff = 0;\n\n\tfor (i = 0; i < BF_N + 2; i++) {\n\t\ttmp[0] = tmp[1] = 0;\n",
                      "markdown": "`\tbug = (unsigned int)flags & 1;\n\tsafety = ((BF_word)flags & 2) << 15;\n\n\tsign = diff = 0;\n\n\tfor (i = 0; i < BF_N + 2; i++) {\n\t\ttmp[0] = tmp[1] = 0;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/apr_md5.c"
                },
                "region": {
                  "startLine": 555,
                  "startColumn": 11,
                  "endLine": 555,
                  "endColumn": 19,
                  "snippet": {
                    "text": "#endif\n\n    /*\n     * The password first, since that is what is most unknown\n     */\n    apr_md5_update(&ctx, pw, strlen(pw));\n\n",
                    "rendered": {
                      "text": "#endif\n\n    /*\n     * The password first, since that is what is most unknown\n     */\n    apr_md5_update(&ctx, pw, strlen(pw));\n\n",
                      "markdown": "`#endif\n\n    /*\n     * The password first, since that is what is most unknown\n     */\n    apr_md5_update(&ctx, pw, strlen(pw));\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/apr_md5.c"
                },
                "region": {
                  "startLine": 509,
                  "startColumn": 47,
                  "endLine": 509,
                  "endColumn": 55,
                  "snippet": {
                    "text": "{\n    /*\n     * Minimum size is 8 bytes for salt, plus 1 for the trailing NUL,\n     * plus 4 for the '$' separators, plus the password hash itself.\n     * Let's leave a goodly amount of leeway.\n     */\n\n",
                    "rendered": {
                      "text": "{\n    /*\n     * Minimum size is 8 bytes for salt, plus 1 for the trailing NUL,\n     * plus 4 for the '$' separators, plus the password hash itself.\n     * Let's leave a goodly amount of leeway.\n     */\n\n",
                      "markdown": "`{\n    /*\n     * Minimum size is 8 bytes for salt, plus 1 for the trailing NUL,\n     * plus 4 for the '$' separators, plus the password hash itself.\n     * Let's leave a goodly amount of leeway.\n     */\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/apr_md5.c"
                },
                "region": {
                  "startLine": 488,
                  "startColumn": 21,
                  "endLine": 488,
                  "endColumn": 29,
                  "snippet": {
                    "text": "static const char * const apr1_id = \"$apr1$\";\n\n/*\n * The following MD5 password encryption code was largely borrowed from\n * the FreeBSD 3.0 /usr/src/lib/libcrypt/crypt.c file, which is\n * licenced as stated at the top of this file.\n */\n",
                    "rendered": {
                      "text": "static const char * const apr1_id = \"$apr1$\";\n\n/*\n * The following MD5 password encryption code was largely borrowed from\n * the FreeBSD 3.0 /usr/src/lib/libcrypt/crypt.c file, which is\n * licenced as stated at the top of this file.\n */\n",
                      "markdown": "`static const char * const apr1_id = \"$apr1$\";\n\n/*\n * The following MD5 password encryption code was largely borrowed from\n * the FreeBSD 3.0 /usr/src/lib/libcrypt/crypt.c file, which is\n * licenced as stated at the top of this file.\n */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/crypto/apr_md5.c"
                },
                "region": {
                  "startLine": 482,
                  "startColumn": 52,
                  "endLine": 482,
                  "endColumn": 60,
                  "snippet": {
                    "text": "#endif\n\n/*\n * Define the Magic String prefix that identifies a password as being\n * hashed using our algorithm.\n */\nstatic const char * const apr1_id = \"$apr1$\";\n",
                    "rendered": {
                      "text": "#endif\n\n/*\n * Define the Magic String prefix that identifies a password as being\n * hashed using our algorithm.\n */\nstatic const char * const apr1_id = \"$apr1$\";\n",
                      "markdown": "`#endif\n\n/*\n * Define the Magic String prefix that identifies a password as being\n * hashed using our algorithm.\n */\nstatic const char * const apr1_id = \"$apr1$\";\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/Makefile.in"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 73,
                  "endLine": 211,
                  "endColumn": 78,
                  "snippet": {
                    "text": "\t\t\t\tfi; \\\n\t\t\tdone; \\\n\t        else \\\n\t\t\t@shlibpath_var@=\"`echo \"../dbm/.libs:../dbd/.libs:$$@shlibpath_var@\" | sed -e 's/::*$$//'`\" \\\n\t\t\t./$$prog -v; \\\n\t\t\tstatus=$$?; \\\n\t\t\tif test $$status != 0; then \\\n",
                    "rendered": {
                      "text": "\t\t\t\tfi; \\\n\t\t\tdone; \\\n\t        else \\\n\t\t\t@shlibpath_var@=\"`echo \"../dbm/.libs:../dbd/.libs:$$@shlibpath_var@\" | sed -e 's/::*$$//'`\" \\\n\t\t\t./$$prog -v; \\\n\t\t\tstatus=$$?; \\\n\t\t\tif test $$status != 0; then \\\n",
                      "markdown": "`\t\t\t\tfi; \\\n\t\t\tdone; \\\n\t        else \\\n\t\t\t@shlibpath_var@=\"`echo \"../dbm/.libs:../dbd/.libs:$$@shlibpath_var@\" | sed -e 's/::*$$//'`\" \\\n\t\t\t./$$prog -v; \\\n\t\t\tstatus=$$?; \\\n\t\t\tif test $$status != 0; then \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/Makefile.in"
                },
                "region": {
                  "startLine": 202,
                  "startColumn": 74,
                  "endLine": 202,
                  "endColumn": 79,
                  "snippet": {
                    "text": "\t\t\tdone; \\\n\t\telif test \"$$prog\" = 'sendfile@EXEEXT@'; then \\\n\t\t\tfor mode in blocking nonblocking timeout; do \\\n\t\t\t\t@shlibpath_var@=\"`echo \"../dbm/.libs:../dbd/.libs:$$@shlibpath_var@\" | sed -e 's/::*$$//'`\" \\\n\t\t\t\t./$$prog client $$mode startserver 127.0.0.1; \\\n\t\t\t\tstatus=$$?; \\\n\t\t\t\tif test $$status != 0; then \\\n",
                    "rendered": {
                      "text": "\t\t\tdone; \\\n\t\telif test \"$$prog\" = 'sendfile@EXEEXT@'; then \\\n\t\t\tfor mode in blocking nonblocking timeout; do \\\n\t\t\t\t@shlibpath_var@=\"`echo \"../dbm/.libs:../dbd/.libs:$$@shlibpath_var@\" | sed -e 's/::*$$//'`\" \\\n\t\t\t\t./$$prog client $$mode startserver 127.0.0.1; \\\n\t\t\t\tstatus=$$?; \\\n\t\t\t\tif test $$status != 0; then \\\n",
                      "markdown": "`\t\t\tdone; \\\n\t\telif test \"$$prog\" = 'sendfile@EXEEXT@'; then \\\n\t\t\tfor mode in blocking nonblocking timeout; do \\\n\t\t\t\t@shlibpath_var@=\"`echo \"../dbm/.libs:../dbd/.libs:$$@shlibpath_var@\" | sed -e 's/::*$$//'`\" \\\n\t\t\t\t./$$prog client $$mode startserver 127.0.0.1; \\\n\t\t\t\tstatus=$$?; \\\n\t\t\t\tif test $$status != 0; then \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/Makefile.in"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 75,
                  "endLine": 191,
                  "endColumn": 80,
                  "snippet": {
                    "text": "\t        if test \"$$prog\" = 'dbd@EXEEXT@'; then \\\n\t\t\tfor driver in none @apu_dbd_tests@; do \\\n\t\t\t\tif test \"$$driver\" != 'none'; then \\\n\t\t\t\t\t@shlibpath_var@=\"`echo \"../dbm/.libs:../dbd/.libs:$$@shlibpath_var@\" | sed -e 's/::*$$//'`\" \\\n\t\t\t\t\t./$$prog $$driver; \\\n\t\t\t\t\tstatus=$$?; \\\n\t\t\t\t\tif test $$status != 0; then \\\n",
                    "rendered": {
                      "text": "\t        if test \"$$prog\" = 'dbd@EXEEXT@'; then \\\n\t\t\tfor driver in none @apu_dbd_tests@; do \\\n\t\t\t\tif test \"$$driver\" != 'none'; then \\\n\t\t\t\t\t@shlibpath_var@=\"`echo \"../dbm/.libs:../dbd/.libs:$$@shlibpath_var@\" | sed -e 's/::*$$//'`\" \\\n\t\t\t\t\t./$$prog $$driver; \\\n\t\t\t\t\tstatus=$$?; \\\n\t\t\t\t\tif test $$status != 0; then \\\n",
                      "markdown": "`\t        if test \"$$prog\" = 'dbd@EXEEXT@'; then \\\n\t\t\tfor driver in none @apu_dbd_tests@; do \\\n\t\t\t\tif test \"$$driver\" != 'none'; then \\\n\t\t\t\t\t@shlibpath_var@=\"`echo \"../dbm/.libs:../dbd/.libs:$$@shlibpath_var@\" | sed -e 's/::*$$//'`\" \\\n\t\t\t\t\t./$$prog $$driver; \\\n\t\t\t\t\tstatus=$$?; \\\n\t\t\t\t\tif test $$status != 0; then \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/Makefile.in"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 28,
                  "endLine": 97,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\t$(LINK_PROG) $(OBJECTS_testall) $(ALL_LIBS)\n# For VPATH builds; where we have no ./data, copy us some data\n# if we wait until 'make check', then 'make; ./testall' fails;\n\tif test ! -d \"./data\"; then cp -r $(srcdir)/data data; fi\n\nOBJECTS_testlockperf = testlockperf.lo $(LOCAL_LIBS)\ntestlockperf@EXEEXT@: $(OBJECTS_testlockperf)\n",
                    "rendered": {
                      "text": "\t$(LINK_PROG) $(OBJECTS_testall) $(ALL_LIBS)\n# For VPATH builds; where we have no ./data, copy us some data\n# if we wait until 'make check', then 'make; ./testall' fails;\n\tif test ! -d \"./data\"; then cp -r $(srcdir)/data data; fi\n\nOBJECTS_testlockperf = testlockperf.lo $(LOCAL_LIBS)\ntestlockperf@EXEEXT@: $(OBJECTS_testlockperf)\n",
                      "markdown": "`\t$(LINK_PROG) $(OBJECTS_testall) $(ALL_LIBS)\n# For VPATH builds; where we have no ./data, copy us some data\n# if we wait until 'make check', then 'make; ./testall' fails;\n\tif test ! -d \"./data\"; then cp -r $(srcdir)/data data; fi\n\nOBJECTS_testlockperf = testlockperf.lo $(LOCAL_LIBS)\ntestlockperf@EXEEXT@: $(OBJECTS_testlockperf)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testuri.c"
                },
                "region": {
                  "startLine": 291,
                  "startColumn": 36,
                  "endLine": 291,
                  "endColumn": 44,
                  "snippet": {
                    "text": "            ABTS_STR_EQUAL(tc, info.scheme, NULL);\n            ABTS_STR_EQUAL(tc, info.hostinfo, NULL);\n            ABTS_STR_EQUAL(tc, info.user, NULL);\n            ABTS_STR_EQUAL(tc, info.password, NULL);\n            ABTS_STR_EQUAL(tc, info.hostname, NULL);\n            ABTS_STR_EQUAL(tc, info.port_str, NULL);\n            ABTS_STR_EQUAL(tc, info.path, t->path);\n",
                    "rendered": {
                      "text": "            ABTS_STR_EQUAL(tc, info.scheme, NULL);\n            ABTS_STR_EQUAL(tc, info.hostinfo, NULL);\n            ABTS_STR_EQUAL(tc, info.user, NULL);\n            ABTS_STR_EQUAL(tc, info.password, NULL);\n            ABTS_STR_EQUAL(tc, info.hostname, NULL);\n            ABTS_STR_EQUAL(tc, info.port_str, NULL);\n            ABTS_STR_EQUAL(tc, info.path, t->path);\n",
                      "markdown": "`            ABTS_STR_EQUAL(tc, info.scheme, NULL);\n            ABTS_STR_EQUAL(tc, info.hostinfo, NULL);\n            ABTS_STR_EQUAL(tc, info.user, NULL);\n            ABTS_STR_EQUAL(tc, info.password, NULL);\n            ABTS_STR_EQUAL(tc, info.hostname, NULL);\n            ABTS_STR_EQUAL(tc, info.port_str, NULL);\n            ABTS_STR_EQUAL(tc, info.path, t->path);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testuri.c"
                },
                "region": {
                  "startLine": 283,
                  "startColumn": 60,
                  "endLine": 283,
                  "endColumn": 68,
                  "snippet": {
                    "text": "            ABTS_STR_EQUAL(tc, t->user, info.user);\n            ABTS_INT_EQUAL(tc, t->port, info.port);\n\n            s = apr_uri_unparse(p, &info, APR_URI_UNP_REVEALPASSWORD);\n            ABTS_STR_EQUAL(tc, t->uri, s);\n\n            s = apr_uri_unparse(p, &info, APR_URI_UNP_OMITSITEPART);\n",
                    "rendered": {
                      "text": "            ABTS_STR_EQUAL(tc, t->user, info.user);\n            ABTS_INT_EQUAL(tc, t->port, info.port);\n\n            s = apr_uri_unparse(p, &info, APR_URI_UNP_REVEALPASSWORD);\n            ABTS_STR_EQUAL(tc, t->uri, s);\n\n            s = apr_uri_unparse(p, &info, APR_URI_UNP_OMITSITEPART);\n",
                      "markdown": "`            ABTS_STR_EQUAL(tc, t->user, info.user);\n            ABTS_INT_EQUAL(tc, t->port, info.port);\n\n            s = apr_uri_unparse(p, &info, APR_URI_UNP_REVEALPASSWORD);\n            ABTS_STR_EQUAL(tc, t->uri, s);\n\n            s = apr_uri_unparse(p, &info, APR_URI_UNP_OMITSITEPART);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testuri.c"
                },
                "region": {
                  "startLine": 275,
                  "startColumn": 49,
                  "endLine": 275,
                  "endColumn": 57,
                  "snippet": {
                    "text": "            ABTS_STR_EQUAL(tc, t->scheme, info.scheme);\n            ABTS_STR_EQUAL(tc, t->hostinfo, info.hostinfo);\n            ABTS_STR_EQUAL(tc, t->user, info.user);\n            ABTS_STR_EQUAL(tc, t->password, info.password);\n            ABTS_STR_EQUAL(tc, t->hostname, info.hostname);\n            ABTS_STR_EQUAL(tc, t->port_str, info.port_str);\n            ABTS_STR_EQUAL(tc, t->path, info.path);\n",
                    "rendered": {
                      "text": "            ABTS_STR_EQUAL(tc, t->scheme, info.scheme);\n            ABTS_STR_EQUAL(tc, t->hostinfo, info.hostinfo);\n            ABTS_STR_EQUAL(tc, t->user, info.user);\n            ABTS_STR_EQUAL(tc, t->password, info.password);\n            ABTS_STR_EQUAL(tc, t->hostname, info.hostname);\n            ABTS_STR_EQUAL(tc, t->port_str, info.port_str);\n            ABTS_STR_EQUAL(tc, t->path, info.path);\n",
                      "markdown": "`            ABTS_STR_EQUAL(tc, t->scheme, info.scheme);\n            ABTS_STR_EQUAL(tc, t->hostinfo, info.hostinfo);\n            ABTS_STR_EQUAL(tc, t->user, info.user);\n            ABTS_STR_EQUAL(tc, t->password, info.password);\n            ABTS_STR_EQUAL(tc, t->hostname, info.hostname);\n            ABTS_STR_EQUAL(tc, t->port_str, info.port_str);\n            ABTS_STR_EQUAL(tc, t->path, info.path);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testuri.c"
                },
                "region": {
                  "startLine": 275,
                  "startColumn": 34,
                  "endLine": 275,
                  "endColumn": 42,
                  "snippet": {
                    "text": "            ABTS_STR_EQUAL(tc, t->scheme, info.scheme);\n            ABTS_STR_EQUAL(tc, t->hostinfo, info.hostinfo);\n            ABTS_STR_EQUAL(tc, t->user, info.user);\n            ABTS_STR_EQUAL(tc, t->password, info.password);\n            ABTS_STR_EQUAL(tc, t->hostname, info.hostname);\n            ABTS_STR_EQUAL(tc, t->port_str, info.port_str);\n            ABTS_STR_EQUAL(tc, t->path, info.path);\n",
                    "rendered": {
                      "text": "            ABTS_STR_EQUAL(tc, t->scheme, info.scheme);\n            ABTS_STR_EQUAL(tc, t->hostinfo, info.hostinfo);\n            ABTS_STR_EQUAL(tc, t->user, info.user);\n            ABTS_STR_EQUAL(tc, t->password, info.password);\n            ABTS_STR_EQUAL(tc, t->hostname, info.hostname);\n            ABTS_STR_EQUAL(tc, t->port_str, info.port_str);\n            ABTS_STR_EQUAL(tc, t->path, info.path);\n",
                      "markdown": "`            ABTS_STR_EQUAL(tc, t->scheme, info.scheme);\n            ABTS_STR_EQUAL(tc, t->hostinfo, info.hostinfo);\n            ABTS_STR_EQUAL(tc, t->user, info.user);\n            ABTS_STR_EQUAL(tc, t->password, info.password);\n            ABTS_STR_EQUAL(tc, t->hostname, info.hostname);\n            ABTS_STR_EQUAL(tc, t->port_str, info.port_str);\n            ABTS_STR_EQUAL(tc, t->path, info.path);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testuri.c"
                },
                "region": {
                  "startLine": 246,
                  "startColumn": 64,
                  "endLine": 246,
                  "endColumn": 72,
                  "snippet": {
                    "text": "                \"  is_initialized:   %u\\n\"\n                \"  dns_looked_up:    %u\\n\"\n                \"  dns_resolved:     %u\\n\",\n                info->scheme, info->hostinfo, info->user, info->password,\n                info->hostname, info->port_str, info->path, info->query,\n                info->fragment, info->hostent, info->port, info->is_initialized,\n                info->dns_looked_up, info->dns_resolved);\n",
                    "rendered": {
                      "text": "                \"  is_initialized:   %u\\n\"\n                \"  dns_looked_up:    %u\\n\"\n                \"  dns_resolved:     %u\\n\",\n                info->scheme, info->hostinfo, info->user, info->password,\n                info->hostname, info->port_str, info->path, info->query,\n                info->fragment, info->hostent, info->port, info->is_initialized,\n                info->dns_looked_up, info->dns_resolved);\n",
                      "markdown": "`                \"  is_initialized:   %u\\n\"\n                \"  dns_looked_up:    %u\\n\"\n                \"  dns_resolved:     %u\\n\",\n                info->scheme, info->hostinfo, info->user, info->password,\n                info->hostname, info->port_str, info->path, info->query,\n                info->fragment, info->hostent, info->port, info->is_initialized,\n                info->dns_looked_up, info->dns_resolved);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testuri.c"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 19,
                  "endLine": 235,
                  "endColumn": 27,
                  "snippet": {
                    "text": "                \"  scheme:           %s\\n\"\n                \"  hostinfo:         %s\\n\"\n                \"  user:             %s\\n\"\n                \"  password:         %s\\n\"\n                \"  hostname:         %s\\n\"\n                \"  port_str:         %s\\n\"\n                \"  path:             %s\\n\"\n",
                    "rendered": {
                      "text": "                \"  scheme:           %s\\n\"\n                \"  hostinfo:         %s\\n\"\n                \"  user:             %s\\n\"\n                \"  password:         %s\\n\"\n                \"  hostname:         %s\\n\"\n                \"  port_str:         %s\\n\"\n                \"  path:             %s\\n\"\n",
                      "markdown": "`                \"  scheme:           %s\\n\"\n                \"  hostinfo:         %s\\n\"\n                \"  user:             %s\\n\"\n                \"  password:         %s\\n\"\n                \"  hostname:         %s\\n\"\n                \"  port_str:         %s\\n\"\n                \"  path:             %s\\n\"\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testuri.c"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 16,
                  "endLine": 31,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    const char *scheme;\n    const char *hostinfo;\n    const char *user;\n    const char *password;\n    const char *hostname;\n    const char *port_str;\n    const char *path;\n",
                    "rendered": {
                      "text": "    const char *scheme;\n    const char *hostinfo;\n    const char *user;\n    const char *password;\n    const char *hostname;\n    const char *port_str;\n    const char *path;\n",
                      "markdown": "`    const char *scheme;\n    const char *hostinfo;\n    const char *user;\n    const char *password;\n    const char *hostname;\n    const char *port_str;\n    const char *path;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testuri.c"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 49,
                  "endLine": 315,
                  "endColumn": 57,
                  "snippet": {
                    "text": "        rv = apr_uri_parse_hostinfo(p, t->hostinfo, &info);\n        ABTS_INT_EQUAL(tc, t->rv, rv);\n        if (t->rv == APR_SUCCESS) {\n            ABTS_STR_EQUAL(tc, t->hostname, info.hostname);\n            ABTS_STR_EQUAL(tc, t->port_str, info.port_str);\n            ABTS_INT_EQUAL(tc, t->port, info.port);\n        }\n",
                    "rendered": {
                      "text": "        rv = apr_uri_parse_hostinfo(p, t->hostinfo, &info);\n        ABTS_INT_EQUAL(tc, t->rv, rv);\n        if (t->rv == APR_SUCCESS) {\n            ABTS_STR_EQUAL(tc, t->hostname, info.hostname);\n            ABTS_STR_EQUAL(tc, t->port_str, info.port_str);\n            ABTS_INT_EQUAL(tc, t->port, info.port);\n        }\n",
                      "markdown": "`        rv = apr_uri_parse_hostinfo(p, t->hostinfo, &info);\n        ABTS_INT_EQUAL(tc, t->rv, rv);\n        if (t->rv == APR_SUCCESS) {\n            ABTS_STR_EQUAL(tc, t->hostname, info.hostname);\n            ABTS_STR_EQUAL(tc, t->port_str, info.port_str);\n            ABTS_INT_EQUAL(tc, t->port, info.port);\n        }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testuri.c"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 34,
                  "endLine": 315,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        rv = apr_uri_parse_hostinfo(p, t->hostinfo, &info);\n        ABTS_INT_EQUAL(tc, t->rv, rv);\n        if (t->rv == APR_SUCCESS) {\n            ABTS_STR_EQUAL(tc, t->hostname, info.hostname);\n            ABTS_STR_EQUAL(tc, t->port_str, info.port_str);\n            ABTS_INT_EQUAL(tc, t->port, info.port);\n        }\n",
                    "rendered": {
                      "text": "        rv = apr_uri_parse_hostinfo(p, t->hostinfo, &info);\n        ABTS_INT_EQUAL(tc, t->rv, rv);\n        if (t->rv == APR_SUCCESS) {\n            ABTS_STR_EQUAL(tc, t->hostname, info.hostname);\n            ABTS_STR_EQUAL(tc, t->port_str, info.port_str);\n            ABTS_INT_EQUAL(tc, t->port, info.port);\n        }\n",
                      "markdown": "`        rv = apr_uri_parse_hostinfo(p, t->hostinfo, &info);\n        ABTS_INT_EQUAL(tc, t->rv, rv);\n        if (t->rv == APR_SUCCESS) {\n            ABTS_STR_EQUAL(tc, t->hostname, info.hostname);\n            ABTS_STR_EQUAL(tc, t->port_str, info.port_str);\n            ABTS_INT_EQUAL(tc, t->port, info.port);\n        }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testuri.c"
                },
                "region": {
                  "startLine": 292,
                  "startColumn": 36,
                  "endLine": 292,
                  "endColumn": 44,
                  "snippet": {
                    "text": "            ABTS_STR_EQUAL(tc, info.hostinfo, NULL);\n            ABTS_STR_EQUAL(tc, info.user, NULL);\n            ABTS_STR_EQUAL(tc, info.password, NULL);\n            ABTS_STR_EQUAL(tc, info.hostname, NULL);\n            ABTS_STR_EQUAL(tc, info.port_str, NULL);\n            ABTS_STR_EQUAL(tc, info.path, t->path);\n            ABTS_STR_EQUAL(tc, info.query, t->query);\n",
                    "rendered": {
                      "text": "            ABTS_STR_EQUAL(tc, info.hostinfo, NULL);\n            ABTS_STR_EQUAL(tc, info.user, NULL);\n            ABTS_STR_EQUAL(tc, info.password, NULL);\n            ABTS_STR_EQUAL(tc, info.hostname, NULL);\n            ABTS_STR_EQUAL(tc, info.port_str, NULL);\n            ABTS_STR_EQUAL(tc, info.path, t->path);\n            ABTS_STR_EQUAL(tc, info.query, t->query);\n",
                      "markdown": "`            ABTS_STR_EQUAL(tc, info.hostinfo, NULL);\n            ABTS_STR_EQUAL(tc, info.user, NULL);\n            ABTS_STR_EQUAL(tc, info.password, NULL);\n            ABTS_STR_EQUAL(tc, info.hostname, NULL);\n            ABTS_STR_EQUAL(tc, info.port_str, NULL);\n            ABTS_STR_EQUAL(tc, info.path, t->path);\n            ABTS_STR_EQUAL(tc, info.query, t->query);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testuri.c"
                },
                "region": {
                  "startLine": 276,
                  "startColumn": 49,
                  "endLine": 276,
                  "endColumn": 57,
                  "snippet": {
                    "text": "            ABTS_STR_EQUAL(tc, t->hostinfo, info.hostinfo);\n            ABTS_STR_EQUAL(tc, t->user, info.user);\n            ABTS_STR_EQUAL(tc, t->password, info.password);\n            ABTS_STR_EQUAL(tc, t->hostname, info.hostname);\n            ABTS_STR_EQUAL(tc, t->port_str, info.port_str);\n            ABTS_STR_EQUAL(tc, t->path, info.path);\n            ABTS_STR_EQUAL(tc, t->query, info.query);\n",
                    "rendered": {
                      "text": "            ABTS_STR_EQUAL(tc, t->hostinfo, info.hostinfo);\n            ABTS_STR_EQUAL(tc, t->user, info.user);\n            ABTS_STR_EQUAL(tc, t->password, info.password);\n            ABTS_STR_EQUAL(tc, t->hostname, info.hostname);\n            ABTS_STR_EQUAL(tc, t->port_str, info.port_str);\n            ABTS_STR_EQUAL(tc, t->path, info.path);\n            ABTS_STR_EQUAL(tc, t->query, info.query);\n",
                      "markdown": "`            ABTS_STR_EQUAL(tc, t->hostinfo, info.hostinfo);\n            ABTS_STR_EQUAL(tc, t->user, info.user);\n            ABTS_STR_EQUAL(tc, t->password, info.password);\n            ABTS_STR_EQUAL(tc, t->hostname, info.hostname);\n            ABTS_STR_EQUAL(tc, t->port_str, info.port_str);\n            ABTS_STR_EQUAL(tc, t->path, info.path);\n            ABTS_STR_EQUAL(tc, t->query, info.query);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testuri.c"
                },
                "region": {
                  "startLine": 276,
                  "startColumn": 34,
                  "endLine": 276,
                  "endColumn": 42,
                  "snippet": {
                    "text": "            ABTS_STR_EQUAL(tc, t->hostinfo, info.hostinfo);\n            ABTS_STR_EQUAL(tc, t->user, info.user);\n            ABTS_STR_EQUAL(tc, t->password, info.password);\n            ABTS_STR_EQUAL(tc, t->hostname, info.hostname);\n            ABTS_STR_EQUAL(tc, t->port_str, info.port_str);\n            ABTS_STR_EQUAL(tc, t->path, info.path);\n            ABTS_STR_EQUAL(tc, t->query, info.query);\n",
                    "rendered": {
                      "text": "            ABTS_STR_EQUAL(tc, t->hostinfo, info.hostinfo);\n            ABTS_STR_EQUAL(tc, t->user, info.user);\n            ABTS_STR_EQUAL(tc, t->password, info.password);\n            ABTS_STR_EQUAL(tc, t->hostname, info.hostname);\n            ABTS_STR_EQUAL(tc, t->port_str, info.port_str);\n            ABTS_STR_EQUAL(tc, t->path, info.path);\n            ABTS_STR_EQUAL(tc, t->query, info.query);\n",
                      "markdown": "`            ABTS_STR_EQUAL(tc, t->hostinfo, info.hostinfo);\n            ABTS_STR_EQUAL(tc, t->user, info.user);\n            ABTS_STR_EQUAL(tc, t->password, info.password);\n            ABTS_STR_EQUAL(tc, t->hostname, info.hostname);\n            ABTS_STR_EQUAL(tc, t->port_str, info.port_str);\n            ABTS_STR_EQUAL(tc, t->path, info.path);\n            ABTS_STR_EQUAL(tc, t->query, info.query);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testuri.c"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 22,
                  "endLine": 247,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                \"  dns_looked_up:    %u\\n\"\n                \"  dns_resolved:     %u\\n\",\n                info->scheme, info->hostinfo, info->user, info->password,\n                info->hostname, info->port_str, info->path, info->query,\n                info->fragment, info->hostent, info->port, info->is_initialized,\n                info->dns_looked_up, info->dns_resolved);\n    }\n",
                    "rendered": {
                      "text": "                \"  dns_looked_up:    %u\\n\"\n                \"  dns_resolved:     %u\\n\",\n                info->scheme, info->hostinfo, info->user, info->password,\n                info->hostname, info->port_str, info->path, info->query,\n                info->fragment, info->hostent, info->port, info->is_initialized,\n                info->dns_looked_up, info->dns_resolved);\n    }\n",
                      "markdown": "`                \"  dns_looked_up:    %u\\n\"\n                \"  dns_resolved:     %u\\n\",\n                info->scheme, info->hostinfo, info->user, info->password,\n                info->hostname, info->port_str, info->path, info->query,\n                info->fragment, info->hostent, info->port, info->is_initialized,\n                info->dns_looked_up, info->dns_resolved);\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testuri.c"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 19,
                  "endLine": 236,
                  "endColumn": 27,
                  "snippet": {
                    "text": "                \"  hostinfo:         %s\\n\"\n                \"  user:             %s\\n\"\n                \"  password:         %s\\n\"\n                \"  hostname:         %s\\n\"\n                \"  port_str:         %s\\n\"\n                \"  path:             %s\\n\"\n                \"  query:            %s\\n\"\n",
                    "rendered": {
                      "text": "                \"  hostinfo:         %s\\n\"\n                \"  user:             %s\\n\"\n                \"  password:         %s\\n\"\n                \"  hostname:         %s\\n\"\n                \"  port_str:         %s\\n\"\n                \"  path:             %s\\n\"\n                \"  query:            %s\\n\"\n",
                      "markdown": "`                \"  hostinfo:         %s\\n\"\n                \"  user:             %s\\n\"\n                \"  password:         %s\\n\"\n                \"  hostname:         %s\\n\"\n                \"  port_str:         %s\\n\"\n                \"  path:             %s\\n\"\n                \"  query:            %s\\n\"\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testuri.c"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 16,
                  "endLine": 191,
                  "endColumn": 24,
                  "snippet": {
                    "text": "struct uph_test {\n    const char *hostinfo;\n    apr_status_t rv;\n    const char *hostname;\n    const char *port_str;\n    apr_port_t port;\n};\n",
                    "rendered": {
                      "text": "struct uph_test {\n    const char *hostinfo;\n    apr_status_t rv;\n    const char *hostname;\n    const char *port_str;\n    apr_port_t port;\n};\n",
                      "markdown": "`struct uph_test {\n    const char *hostinfo;\n    apr_status_t rv;\n    const char *hostname;\n    const char *port_str;\n    apr_port_t port;\n};\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testuri.c"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 16,
                  "endLine": 32,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    const char *hostinfo;\n    const char *user;\n    const char *password;\n    const char *hostname;\n    const char *port_str;\n    const char *path;\n    const char *query;\n",
                    "rendered": {
                      "text": "    const char *hostinfo;\n    const char *user;\n    const char *password;\n    const char *hostname;\n    const char *port_str;\n    const char *path;\n    const char *query;\n",
                      "markdown": "`    const char *hostinfo;\n    const char *user;\n    const char *password;\n    const char *hostname;\n    const char *port_str;\n    const char *path;\n    const char *query;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testlockperf.c"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 3,
                  "endLine": 193,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n    mutex_counter = 0;\n\n    timeout = apr_time_from_sec(5);\n\n    printf(\"apr_thread_mutex_t Tests\\n\");\n    printf(\"%-60s\", \"    Initializing the apr_thread_mutex_t (TIMED)\");\n",
                    "rendered": {
                      "text": "\n    mutex_counter = 0;\n\n    timeout = apr_time_from_sec(5);\n\n    printf(\"apr_thread_mutex_t Tests\\n\");\n    printf(\"%-60s\", \"    Initializing the apr_thread_mutex_t (TIMED)\");\n",
                      "markdown": "`\n    mutex_counter = 0;\n\n    timeout = apr_time_from_sec(5);\n\n    printf(\"apr_thread_mutex_t Tests\\n\");\n    printf(\"%-60s\", \"    Initializing the apr_thread_mutex_t (TIMED)\");\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testprocmutex.c"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 66,
                  "endLine": 212,
                  "endColumn": 72,
                  "snippet": {
                    "text": "             */\n            if (rv != APR_SUCCESS) {\n                ABTS_ASSERT(tc,\n                            apr_psprintf(p, \"%s_timedlock() should time out => %pm\",\n                                         mech->name, &rv),\n                            APR_STATUS_IS_TIMEUP(rv));\n            }\n",
                    "rendered": {
                      "text": "             */\n            if (rv != APR_SUCCESS) {\n                ABTS_ASSERT(tc,\n                            apr_psprintf(p, \"%s_timedlock() should time out => %pm\",\n                                         mech->name, &rv),\n                            APR_STATUS_IS_TIMEUP(rv));\n            }\n",
                      "markdown": "`             */\n            if (rv != APR_SUCCESS) {\n                ABTS_ASSERT(tc,\n                            apr_psprintf(p, \"%s_timedlock() should time out => %pm\",\n                                         mech->name, &rv),\n                            APR_STATUS_IS_TIMEUP(rv));\n            }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/NWGNUmod_test"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 25,
                  "endLine": 114,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n#\n# If this is specified, it will override VERSION value in \n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                    "rendered": {
                      "text": "\n#\n# If this is specified, it will override VERSION value in \n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                      "markdown": "`\n#\n# If this is specified, it will override VERSION value in \n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/NWGNUmod_test"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 30,
                  "endLine": 6,
                  "endColumn": 65,
                  "snippet": {
                    "text": "#\n\n#\n# Get the 'head' of the build environment if necessary.  This includes default\n# targets and paths to tools\n#\n\n",
                    "rendered": {
                      "text": "#\n\n#\n# Get the 'head' of the build environment if necessary.  This includes default\n# targets and paths to tools\n#\n\n",
                      "markdown": "`#\n\n#\n# Get the 'head' of the build environment if necessary.  This includes default\n# targets and paths to tools\n#\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/NWGNUmod_test"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 27,
                  "endLine": 15,
                  "endColumn": 31,
                  "snippet": {
                    "text": "endif\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                    "rendered": {
                      "text": "endif\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                      "markdown": "`endif\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/docs/APRDesign.html"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 9,
                  "endLine": 97,
                  "endColumn": 17,
                  "snippet": {
                    "text": "<li>memory<br>\n\tPool-based memory allocation\n<li>passwd<br>\n\tReading passwords from the terminal\n<li>tables<br>\n\tTables and hashes\n<li>network_io<br>\n",
                    "rendered": {
                      "text": "<li>memory<br>\n\tPool-based memory allocation\n<li>passwd<br>\n\tReading passwords from the terminal\n<li>tables<br>\n\tTables and hashes\n<li>network_io<br>\n",
                      "markdown": "`<li>memory<br>\n\tPool-based memory allocation\n<li>passwd<br>\n\tReading passwords from the terminal\n<li>tables<br>\n\tTables and hashes\n<li>network_io<br>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/docs/APRDesign.html"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 68,
                  "endLine": 274,
                  "endColumn": 72,
                  "snippet": {
                    "text": "4) APR_OS_START_USEERR\tThis is platform dependent, and is the offset at which\n\t\t\tAPR apps can begin to add their own error codes.\n\n3) APR_OS_START_SYSERR\tThis is platform dependent, and is the offset at which\n\t\t\tsystem error values begin.\n</pre>\n\n",
                    "rendered": {
                      "text": "4) APR_OS_START_USEERR\tThis is platform dependent, and is the offset at which\n\t\t\tAPR apps can begin to add their own error codes.\n\n3) APR_OS_START_SYSERR\tThis is platform dependent, and is the offset at which\n\t\t\tsystem error values begin.\n</pre>\n\n",
                      "markdown": "`4) APR_OS_START_USEERR\tThis is platform dependent, and is the offset at which\n\t\t\tAPR apps can begin to add their own error codes.\n\n3) APR_OS_START_SYSERR\tThis is platform dependent, and is the offset at which\n\t\t\tsystem error values begin.\n</pre>\n\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/docs/APRDesign.html"
                },
                "region": {
                  "startLine": 271,
                  "startColumn": 68,
                  "endLine": 271,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\t\t\tAPR_SUCCESS does not make sense.  APR status codes in \n\t\t\tthis range should be name APR_* (i.e. APR_DETACH)\n\n4) APR_OS_START_USEERR\tThis is platform dependent, and is the offset at which\n\t\t\tAPR apps can begin to add their own error codes.\n\n3) APR_OS_START_SYSERR\tThis is platform dependent, and is the offset at which\n",
                    "rendered": {
                      "text": "\t\t\tAPR_SUCCESS does not make sense.  APR status codes in \n\t\t\tthis range should be name APR_* (i.e. APR_DETACH)\n\n4) APR_OS_START_USEERR\tThis is platform dependent, and is the offset at which\n\t\t\tAPR apps can begin to add their own error codes.\n\n3) APR_OS_START_SYSERR\tThis is platform dependent, and is the offset at which\n",
                      "markdown": "`\t\t\tAPR_SUCCESS does not make sense.  APR status codes in \n\t\t\tthis range should be name APR_* (i.e. APR_DETACH)\n\n4) APR_OS_START_USEERR\tThis is platform dependent, and is the offset at which\n\t\t\tAPR apps can begin to add their own error codes.\n\n3) APR_OS_START_SYSERR\tThis is platform dependent, and is the offset at which\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/docs/APRDesign.html"
                },
                "region": {
                  "startLine": 265,
                  "startColumn": 68,
                  "endLine": 265,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\t\t\tfail.  APR errors in this range should be named \n\t\t\tAPR_E* (i.e. APR_ENOSOCKET)\n\n2) APR_OS_START_STATUS\tThis is platform dependent, and is the offset at which\n\t\t\tAPR status values start.  Status values do not indicate\n\t\t\tsuccess or failure, and should be returned if \n\t\t\tAPR_SUCCESS does not make sense.  APR status codes in \n",
                    "rendered": {
                      "text": "\t\t\tfail.  APR errors in this range should be named \n\t\t\tAPR_E* (i.e. APR_ENOSOCKET)\n\n2) APR_OS_START_STATUS\tThis is platform dependent, and is the offset at which\n\t\t\tAPR status values start.  Status values do not indicate\n\t\t\tsuccess or failure, and should be returned if \n\t\t\tAPR_SUCCESS does not make sense.  APR status codes in \n",
                      "markdown": "`\t\t\tfail.  APR errors in this range should be named \n\t\t\tAPR_E* (i.e. APR_ENOSOCKET)\n\n2) APR_OS_START_STATUS\tThis is platform dependent, and is the offset at which\n\t\t\tAPR status values start.  Status values do not indicate\n\t\t\tsuccess or failure, and should be returned if \n\t\t\tAPR_SUCCESS does not make sense.  APR status codes in \n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/docs/APRDesign.html"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 67,
                  "endLine": 259,
                  "endColumn": 71,
                  "snippet": {
                    "text": "\t\t\t(This has no name because it isn't actually defined, \n                        but for completeness we are discussing it here).\n\n1) APR_OS_START_ERROR\tThis is platform dependent, and is the offset at which\n\t\t\tAPR errors start to be defined.  Error values are \n\t\t\tdefined as anything which caused the APR function to \n\t\t\tfail.  APR errors in this range should be named \n",
                    "rendered": {
                      "text": "\t\t\t(This has no name because it isn't actually defined, \n                        but for completeness we are discussing it here).\n\n1) APR_OS_START_ERROR\tThis is platform dependent, and is the offset at which\n\t\t\tAPR errors start to be defined.  Error values are \n\t\t\tdefined as anything which caused the APR function to \n\t\t\tfail.  APR errors in this range should be named \n",
                      "markdown": "`\t\t\t(This has no name because it isn't actually defined, \n                        but for completeness we are discussing it here).\n\n1) APR_OS_START_ERROR\tThis is platform dependent, and is the offset at which\n\t\t\tAPR errors start to be defined.  Error values are \n\t\t\tdefined as anything which caused the APR function to \n\t\t\tfail.  APR errors in this range should be named \n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/docs/APRDesign.html"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 27,
                  "endLine": 231,
                  "endColumn": 35,
                  "snippet": {
                    "text": "<p>For an actual example, look at any file in the include directory.  The \nreason the docs are in the header files is to ensure that the docs always\nreflect the current code.  If you change parameters or return values for a\nfunction, please be sure to update the documentation.</p>\n\n<h2>APR Error reporting</h2>\n\n",
                    "rendered": {
                      "text": "<p>For an actual example, look at any file in the include directory.  The \nreason the docs are in the header files is to ensure that the docs always\nreflect the current code.  If you change parameters or return values for a\nfunction, please be sure to update the documentation.</p>\n\n<h2>APR Error reporting</h2>\n\n",
                      "markdown": "`<p>For an actual example, look at any file in the include directory.  The \nreason the docs are in the header files is to ensure that the docs always\nreflect the current code.  If you change parameters or return values for a\nfunction, please be sure to update the documentation.</p>\n\n<h2>APR Error reporting</h2>\n\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/docs/APRDesign.html"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 30,
                  "endLine": 228,
                  "endColumn": 34,
                  "snippet": {
                    "text": "     */ \n</pre>\n\n<p>For an actual example, look at any file in the include directory.  The \nreason the docs are in the header files is to ensure that the docs always\nreflect the current code.  If you change parameters or return values for a\nfunction, please be sure to update the documentation.</p>\n",
                    "rendered": {
                      "text": "     */ \n</pre>\n\n<p>For an actual example, look at any file in the include directory.  The \nreason the docs are in the header files is to ensure that the docs always\nreflect the current code.  If you change parameters or return values for a\nfunction, please be sure to update the documentation.</p>\n",
                      "markdown": "`     */ \n</pre>\n\n<p>For an actual example, look at any file in the include directory.  The \nreason the docs are in the header files is to ensure that the docs always\nreflect the current code.  If you change parameters or return values for a\nfunction, please be sure to update the documentation.</p>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/docs/APRDesign.html"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 71,
                  "endLine": 118,
                  "endColumn": 75,
                  "snippet": {
                    "text": "<p>Each type has a base directory.  Inside this base directory, are\nsubdirectories, which contain the actual code.  These subdirectories are named\nafter the platforms the are compiled on.  Unix is also used as a common\ndirectory.  If the code you are writing is POSIX based, you should look at the\ncode in the unix directory.  A good rule of thumb, is that if more than half\nyour code needs to be ifdef'ed out, and the structures required for your code\nare substantively different from the POSIX code, you should create a new\n",
                    "rendered": {
                      "text": "<p>Each type has a base directory.  Inside this base directory, are\nsubdirectories, which contain the actual code.  These subdirectories are named\nafter the platforms the are compiled on.  Unix is also used as a common\ndirectory.  If the code you are writing is POSIX based, you should look at the\ncode in the unix directory.  A good rule of thumb, is that if more than half\nyour code needs to be ifdef'ed out, and the structures required for your code\nare substantively different from the POSIX code, you should create a new\n",
                      "markdown": "`<p>Each type has a base directory.  Inside this base directory, are\nsubdirectories, which contain the actual code.  These subdirectories are named\nafter the platforms the are compiled on.  Unix is also used as a common\ndirectory.  If the code you are writing is POSIX based, you should look at the\ncode in the unix directory.  A good rule of thumb, is that if more than half\nyour code needs to be ifdef'ed out, and the structures required for your code\nare substantively different from the POSIX code, you should create a new\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/docs/APRDesign.html"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 55,
                  "endLine": 66,
                  "endColumn": 59,
                  "snippet": {
                    "text": "\n<p>If your OS of choice does not have mmap'ed files, APR_HAS_MMAP should \nevaluate to zero, and all ap_mmap_* functions should not be defined.  The \nsecond step is a precaution that will allow us to break at compile time if a \nprogrammer tries to use unsupported functions.</p>\n\n<h2>APR types</h2>\n",
                    "rendered": {
                      "text": "\n<p>If your OS of choice does not have mmap'ed files, APR_HAS_MMAP should \nevaluate to zero, and all ap_mmap_* functions should not be defined.  The \nsecond step is a precaution that will allow us to break at compile time if a \nprogrammer tries to use unsupported functions.</p>\n\n<h2>APR types</h2>\n",
                      "markdown": "`\n<p>If your OS of choice does not have mmap'ed files, APR_HAS_MMAP should \nevaluate to zero, and all ap_mmap_* functions should not be defined.  The \nsecond step is a precaution that will allow us to break at compile time if a \nprogrammer tries to use unsupported functions.</p>\n\n<h2>APR types</h2>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/docs/APRDesign.html"
                },
                "region": {
                  "startLine": 344,
                  "startColumn": 39,
                  "endLine": 344,
                  "endColumn": 45,
                  "snippet": {
                    "text": "</ol>\n\n<p>The problem with option number one is that it takes time to convert error \ncodes to a common code, and most of the time programs want to just output \nan error string.  If we convert all errors to a common subset, we have four \nsteps to output an error string:</p>\n\n",
                    "rendered": {
                      "text": "</ol>\n\n<p>The problem with option number one is that it takes time to convert error \ncodes to a common code, and most of the time programs want to just output \nan error string.  If we convert all errors to a common subset, we have four \nsteps to output an error string:</p>\n\n",
                      "markdown": "`</ol>\n\n<p>The problem with option number one is that it takes time to convert error \ncodes to a common code, and most of the time programs want to just output \nan error string.  If we convert all errors to a common subset, we have four \nsteps to output an error string:</p>\n\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/docs/APRDesign.html"
                },
                "region": {
                  "startLine": 343,
                  "startColumn": 54,
                  "endLine": 343,
                  "endColumn": 60,
                  "snippet": {
                    "text": "<li>  Return platform specific error codes and convert them when necessary.  \n</ol>\n\n<p>The problem with option number one is that it takes time to convert error \ncodes to a common code, and most of the time programs want to just output \nan error string.  If we convert all errors to a common subset, we have four \nsteps to output an error string:</p>\n",
                    "rendered": {
                      "text": "<li>  Return platform specific error codes and convert them when necessary.  \n</ol>\n\n<p>The problem with option number one is that it takes time to convert error \ncodes to a common code, and most of the time programs want to just output \nan error string.  If we convert all errors to a common subset, we have four \nsteps to output an error string:</p>\n",
                      "markdown": "`<li>  Return platform specific error codes and convert them when necessary.  \n</ol>\n\n<p>The problem with option number one is that it takes time to convert error \ncodes to a common code, and most of the time programs want to just output \nan error string.  If we convert all errors to a common subset, we have four \nsteps to output an error string:</p>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/docs/APRDesign.html"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 60,
                  "endLine": 315,
                  "endColumn": 66,
                  "snippet": {
                    "text": "<p>These two examples implement the same function for two different platforms.\nObviously even if the underlying problem is the same on both platforms, this\nwill result in two different error codes being returned.  This is OKAY, and\nis correct for APR.  APR relies on the fact that most of the time an error\noccurs, the program logs the error and continues, it does not try to\nprogramatically solve the problem.  This does not mean we have not provided\nsupport for programmatically solving the problem, it just isn't the default\n",
                    "rendered": {
                      "text": "<p>These two examples implement the same function for two different platforms.\nObviously even if the underlying problem is the same on both platforms, this\nwill result in two different error codes being returned.  This is OKAY, and\nis correct for APR.  APR relies on the fact that most of the time an error\noccurs, the program logs the error and continues, it does not try to\nprogramatically solve the problem.  This does not mean we have not provided\nsupport for programmatically solving the problem, it just isn't the default\n",
                      "markdown": "`<p>These two examples implement the same function for two different platforms.\nObviously even if the underlying problem is the same on both platforms, this\nwill result in two different error codes being returned.  This is OKAY, and\nis correct for APR.  APR relies on the fact that most of the time an error\noccurs, the program logs the error and continues, it does not try to\nprogramatically solve the problem.  This does not mean we have not provided\nsupport for programmatically solving the problem, it just isn't the default\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/docs/APRDesign.html"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 66,
                  "endLine": 235,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\n<h2>APR Error reporting</h2>\n\n<p>Most APR functions should return an ap_status_t type.  The only time an\nAPR function does not return an ap_status_t is if it absolutely CAN NOT\nfail.  Examples of this would be filling out an array when you know you are\nnot beyond the array's range.  If it cannot fail on your platform, but it\n",
                    "rendered": {
                      "text": "\n<h2>APR Error reporting</h2>\n\n<p>Most APR functions should return an ap_status_t type.  The only time an\nAPR function does not return an ap_status_t is if it absolutely CAN NOT\nfail.  Examples of this would be filling out an array when you know you are\nnot beyond the array's range.  If it cannot fail on your platform, but it\n",
                      "markdown": "`\n<h2>APR Error reporting</h2>\n\n<p>Most APR functions should return an ap_status_t type.  The only time an\nAPR function does not return an ap_status_t is if it absolutely CAN NOT\nfail.  Examples of this would be filling out an array when you know you are\nnot beyond the array's range.  If it cannot fail on your platform, but it\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/docs/APRDesign.html"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 22,
                  "endLine": 161,
                  "endColumn": 28,
                  "snippet": {
                    "text": "<ul>\n<li>The first exception to this rule is if the type can only reasonably be \nimplemented one way.  For example, time is a complete type because there \nis only one reasonable time implementation.\n\n<li>The second exception to the incomplete type rule can be found in \napr_portable.h.  This file defines the native types for each platform.  \n",
                    "rendered": {
                      "text": "<ul>\n<li>The first exception to this rule is if the type can only reasonably be \nimplemented one way.  For example, time is a complete type because there \nis only one reasonable time implementation.\n\n<li>The second exception to the incomplete type rule can be found in \napr_portable.h.  This file defines the native types for each platform.  \n",
                      "markdown": "`<ul>\n<li>The first exception to this rule is if the type can only reasonably be \nimplemented one way.  For example, time is a complete type because there \nis only one reasonable time implementation.\n\n<li>The second exception to the incomplete type rule can be found in \napr_portable.h.  This file defines the native types for each platform.  \n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/docs/APRDesign.html"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 34,
                  "endLine": 160,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n<ul>\n<li>The first exception to this rule is if the type can only reasonably be \nimplemented one way.  For example, time is a complete type because there \nis only one reasonable time implementation.\n\n<li>The second exception to the incomplete type rule can be found in \n",
                    "rendered": {
                      "text": "\n<ul>\n<li>The first exception to this rule is if the type can only reasonably be \nimplemented one way.  For example, time is a complete type because there \nis only one reasonable time implementation.\n\n<li>The second exception to the incomplete type rule can be found in \n",
                      "markdown": "`\n<ul>\n<li>The first exception to this rule is if the type can only reasonably be \nimplemented one way.  For example, time is a complete type because there \nis only one reasonable time implementation.\n\n<li>The second exception to the incomplete type rule can be found in \n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/docs/APRDesign.html"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 26,
                  "endLine": 142,
                  "endColumn": 31,
                  "snippet": {
                    "text": "<p>Obviously, BeOS does not have a directory.  This is because BeOS is currently\nusing the Unix directory for it's file_io.</p>\n\n<p>There are a few special top level directories.  These are test and include.\nTest is a directory which stores all test programs.  It is expected\nthat if a new type is developed, there will also be a new test program, to\nhelp people port this new type to different platforms.  A small document\n",
                    "rendered": {
                      "text": "<p>Obviously, BeOS does not have a directory.  This is because BeOS is currently\nusing the Unix directory for it's file_io.</p>\n\n<p>There are a few special top level directories.  These are test and include.\nTest is a directory which stores all test programs.  It is expected\nthat if a new type is developed, there will also be a new test program, to\nhelp people port this new type to different platforms.  A small document\n",
                      "markdown": "`<p>Obviously, BeOS does not have a directory.  This is because BeOS is currently\nusing the Unix directory for it's file_io.</p>\n\n<p>There are a few special top level directories.  These are test and include.\nTest is a directory which stores all test programs.  It is expected\nthat if a new type is developed, there will also be a new test program, to\nhelp people port this new type to different platforms.  A small document\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/docs/APRDesign.html"
                },
                "region": {
                  "startLine": 81,
                  "endLine": 82,
                  "snippet": {
                    "text": "<li>poll<br>\n\tPolling I/O\n<li>time<br>\n\tTime\n<li>user<br>\n\tUsers and groups\n<li>locks<br>\n\tProcess and thread locks (critical sections)\n",
                    "rendered": {
                      "text": "<li>poll<br>\n\tPolling I/O\n<li>time<br>\n\tTime\n<li>user<br>\n\tUsers and groups\n<li>locks<br>\n\tProcess and thread locks (critical sections)\n",
                      "markdown": "`<li>poll<br>\n\tPolling I/O\n<li>time<br>\n\tTime\n<li>user<br>\n\tUsers and groups\n<li>locks<br>\n\tProcess and thread locks (critical sections)\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/docs/APRDesign.html"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 66,
                  "endLine": 66,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\n<p>If your OS of choice does not have mmap'ed files, APR_HAS_MMAP should \nevaluate to zero, and all ap_mmap_* functions should not be defined.  The \nsecond step is a precaution that will allow us to break at compile time if a \nprogrammer tries to use unsupported functions.</p>\n\n<h2>APR types</h2>\n",
                    "rendered": {
                      "text": "\n<p>If your OS of choice does not have mmap'ed files, APR_HAS_MMAP should \nevaluate to zero, and all ap_mmap_* functions should not be defined.  The \nsecond step is a precaution that will allow us to break at compile time if a \nprogrammer tries to use unsupported functions.</p>\n\n<h2>APR types</h2>\n",
                      "markdown": "`\n<p>If your OS of choice does not have mmap'ed files, APR_HAS_MMAP should \nevaluate to zero, and all ap_mmap_* functions should not be defined.  The \nsecond step is a precaution that will allow us to break at compile time if a \nprogrammer tries to use unsupported functions.</p>\n\n<h2>APR types</h2>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/docs/APRDesign.html"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 75,
                  "endLine": 48,
                  "endColumn": 7,
                  "snippet": {
                    "text": "<h2>APR Features</h2>\n\n<p>One of the goals of APR is to provide a common set of features across all \nplatforms.  This is an admirable goal, it is also not realistic.  We cannot\nexpect to be able to implement ALL features on ALL platforms.  So we are\ngoing to do the next best thing.  Provide a common interface to ALL APR \nfeatures on MOST platforms.</p>\n\n",
                    "rendered": {
                      "text": "<h2>APR Features</h2>\n\n<p>One of the goals of APR is to provide a common set of features across all \nplatforms.  This is an admirable goal, it is also not realistic.  We cannot\nexpect to be able to implement ALL features on ALL platforms.  So we are\ngoing to do the next best thing.  Provide a common interface to ALL APR \nfeatures on MOST platforms.</p>\n\n",
                      "markdown": "`<h2>APR Features</h2>\n\n<p>One of the goals of APR is to provide a common set of features across all \nplatforms.  This is an admirable goal, it is also not realistic.  We cannot\nexpect to be able to implement ALL features on ALL platforms.  So we are\ngoing to do the next best thing.  Provide a common interface to ALL APR \nfeatures on MOST platforms.</p>\n\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/docs/APRDesign.html"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 16,
                  "endLine": 39,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\tIn other words, if the definition is going to be used in a public APR \n\theader file, such as apr_general.h, Windows needs it.\n        \n        The only time it is safe to add a macro or test without also adding \n        the macro to apr*.h[n]w, is if the macro tells APR how to build.  For\n        example, a test for a header file does not need to be added to Windows.\n</strong></p>\n",
                    "rendered": {
                      "text": "\tIn other words, if the definition is going to be used in a public APR \n\theader file, such as apr_general.h, Windows needs it.\n        \n        The only time it is safe to add a macro or test without also adding \n        the macro to apr*.h[n]w, is if the macro tells APR how to build.  For\n        example, a test for a header file does not need to be added to Windows.\n</strong></p>\n",
                      "markdown": "`\tIn other words, if the definition is going to be used in a public APR \n\theader file, such as apr_general.h, Windows needs it.\n        \n        The only time it is safe to add a macro or test without also adding \n        the macro to apr*.h[n]w, is if the macro tells APR how to build.  For\n        example, a test for a header file does not need to be added to Windows.\n</strong></p>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/docs/canonical_filenames.html"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 34,
                  "endLine": 31,
                  "endColumn": 38,
                  "snippet": {
                    "text": "In general, 'this' must be eliminated from the path where it occurs.\nThe syntax \"path/./\" and \"path/\" are both aliases to path.  However,\nthis isn't file system independent, since the double slash \"//\" has\na special meaning on OS2 and Win32 at the start of the path name,\nand is invalid on those platforms before the \"//server/share/\" UNC\nroot path is completed.  Finally, as noted above, \"//./volume/\" is\nlegal root syntax on WinNT, and perhaps others.</p>\n",
                    "rendered": {
                      "text": "In general, 'this' must be eliminated from the path where it occurs.\nThe syntax \"path/./\" and \"path/\" are both aliases to path.  However,\nthis isn't file system independent, since the double slash \"//\" has\na special meaning on OS2 and Win32 at the start of the path name,\nand is invalid on those platforms before the \"//server/share/\" UNC\nroot path is completed.  Finally, as noted above, \"//./volume/\" is\nlegal root syntax on WinNT, and perhaps others.</p>\n",
                      "markdown": "`In general, 'this' must be eliminated from the path where it occurs.\nThe syntax \"path/./\" and \"path/\" are both aliases to path.  However,\nthis isn't file system independent, since the double slash \"//\" has\na special meaning on OS2 and Win32 at the start of the path name,\nand is invalid on those platforms before the \"//server/share/\" UNC\nroot path is completed.  Finally, as noted above, \"//./volume/\" is\nlegal root syntax on WinNT, and perhaps others.</p>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/private/apu_select_dbm.hw"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 23,
                  "endLine": 21,
                  "endColumn": 32,
                  "snippet": {
                    "text": "#define APU_SELECT_DBM_H\n\n/*\n** The following macros control what features APRUTIL will use\n*/\n#define APU_USE_SDBM    1\n#define APU_USE_GDBM    0\n",
                    "rendered": {
                      "text": "#define APU_SELECT_DBM_H\n\n/*\n** The following macros control what features APRUTIL will use\n*/\n#define APU_USE_SDBM    1\n#define APU_USE_GDBM    0\n",
                      "markdown": "`#define APU_SELECT_DBM_H\n\n/*\n** The following macros control what features APRUTIL will use\n*/\n#define APU_USE_SDBM    1\n#define APU_USE_GDBM    0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/private/apu_select_dbm.hw"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 53,
                  "endLine": 7,
                  "snippet": {
                    "text": " * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": " * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "` * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_ldap.h"
                },
                "region": {
                  "startLine": 928,
                  "startColumn": 104,
                  "endLine": 928,
                  "endColumn": 112,
                  "snippet": {
                    "text": "t */\n    APR_LDAP_INTERACT_AUTHNAME = 0x4002,          /**< SASL username to authenticate */\n    APR_LDAP_INTERACT_USER = 0x4001,              /**< SASL username to use for proxy authorization */\n    APR_LDAP_INTERACT_PASS = 0x4004,              /**< SASL password for the provided username / Simple password for a simple bind */\n    APR_LDAP_INTERACT_NOECHOPROMPT = 0x4006,      /**< SASL generic prompt for input with input echoing disabled */\n    APR_LDAP_INTERACT_ECHOPROMPT = 0x4005,        /**< SASL generic prompt for input with input echoing enabled */\n} apr_ldap_bind_interact_e;\n\n\n/**\n * During apr",
                    "rendered": {
                      "text": "t */\n    APR_LDAP_INTERACT_AUTHNAME = 0x4002,          /**< SASL username to authenticate */\n    APR_LDAP_INTERACT_USER = 0x4001,              /**< SASL username to use for proxy authorization */\n    APR_LDAP_INTERACT_PASS = 0x4004,              /**< SASL password for the provided username / Simple password for a simple bind */\n    APR_LDAP_INTERACT_NOECHOPROMPT = 0x4006,      /**< SASL generic prompt for input with input echoing disabled */\n    APR_LDAP_INTERACT_ECHOPROMPT = 0x4005,        /**< SASL generic prompt for input with input echoing enabled */\n} apr_ldap_bind_interact_e;\n\n\n/**\n * During apr",
                      "markdown": "`t */\n    APR_LDAP_INTERACT_AUTHNAME = 0x4002,          /**< SASL username to authenticate */\n    APR_LDAP_INTERACT_USER = 0x4001,              /**< SASL username to use for proxy authorization */\n    APR_LDAP_INTERACT_PASS = 0x4004,              /**< SASL password for the provided username / Simple password for a simple bind */\n    APR_LDAP_INTERACT_NOECHOPROMPT = 0x4006,      /**< SASL generic prompt for input with input echoing disabled */\n    APR_LDAP_INTERACT_ECHOPROMPT = 0x4005,        /**< SASL generic prompt for input with input echoing enabled */\n} apr_ldap_bind_interact_e;\n\n\n/**\n * During apr`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_ldap.h"
                },
                "region": {
                  "startLine": 928,
                  "startColumn": 60,
                  "endLine": 928,
                  "endColumn": 68,
                  "snippet": {
                    "text": "**< SASL realm for the authentication attempt */\n    APR_LDAP_INTERACT_AUTHNAME = 0x4002,          /**< SASL username to authenticate */\n    APR_LDAP_INTERACT_USER = 0x4001,              /**< SASL username to use for proxy authorization */\n    APR_LDAP_INTERACT_PASS = 0x4004,              /**< SASL password for the provided username / Simple password for a simple bind */\n    APR_LDAP_INTERACT_NOECHOPROMPT = 0x4006,      /**< SASL generic prompt for input with input echoing disabled */\n    APR_LDAP_INTERACT_ECHOPROMPT = 0x4005,        /**< SASL generic prompt for input with input echoing enabled */\n} a",
                    "rendered": {
                      "text": "**< SASL realm for the authentication attempt */\n    APR_LDAP_INTERACT_AUTHNAME = 0x4002,          /**< SASL username to authenticate */\n    APR_LDAP_INTERACT_USER = 0x4001,              /**< SASL username to use for proxy authorization */\n    APR_LDAP_INTERACT_PASS = 0x4004,              /**< SASL password for the provided username / Simple password for a simple bind */\n    APR_LDAP_INTERACT_NOECHOPROMPT = 0x4006,      /**< SASL generic prompt for input with input echoing disabled */\n    APR_LDAP_INTERACT_ECHOPROMPT = 0x4005,        /**< SASL generic prompt for input with input echoing enabled */\n} a",
                      "markdown": "`**< SASL realm for the authentication attempt */\n    APR_LDAP_INTERACT_AUTHNAME = 0x4002,          /**< SASL username to authenticate */\n    APR_LDAP_INTERACT_USER = 0x4001,              /**< SASL username to use for proxy authorization */\n    APR_LDAP_INTERACT_PASS = 0x4004,              /**< SASL password for the provided username / Simple password for a simple bind */\n    APR_LDAP_INTERACT_NOECHOPROMPT = 0x4006,      /**< SASL generic prompt for input with input echoing disabled */\n    APR_LDAP_INTERACT_ECHOPROMPT = 0x4005,        /**< SASL generic prompt for input with input echoing enabled */\n} a`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_ldap.h"
                },
                "region": {
                  "startLine": 714,
                  "startColumn": 16,
                  "endLine": 714,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    /** Path, file, uri or nickname of the certificate */\n    const char *path;\n    /** Optional password, can be NULL */\n    const char *password;\n} apr_ldap_opt_tls_cert_t;\n\n\n",
                    "rendered": {
                      "text": "    /** Path, file, uri or nickname of the certificate */\n    const char *path;\n    /** Optional password, can be NULL */\n    const char *password;\n} apr_ldap_opt_tls_cert_t;\n\n\n",
                      "markdown": "`    /** Path, file, uri or nickname of the certificate */\n    const char *path;\n    /** Optional password, can be NULL */\n    const char *password;\n} apr_ldap_opt_tls_cert_t;\n\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr_ldap.h"
                },
                "region": {
                  "startLine": 713,
                  "startColumn": 17,
                  "endLine": 713,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    int type;\n    /** Path, file, uri or nickname of the certificate */\n    const char *path;\n    /** Optional password, can be NULL */\n    const char *password;\n} apr_ldap_opt_tls_cert_t;\n\n",
                    "rendered": {
                      "text": "    int type;\n    /** Path, file, uri or nickname of the certificate */\n    const char *path;\n    /** Optional password, can be NULL */\n    const char *password;\n} apr_ldap_opt_tls_cert_t;\n\n",
                      "markdown": "`    int type;\n    /** Path, file, uri or nickname of the certificate */\n    const char *path;\n    /** Optional password, can be NULL */\n    const char *password;\n} apr_ldap_opt_tls_cert_t;\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr.hwc"
                },
                "region": {
                  "startLine": 337,
                  "startColumn": 39,
                  "endLine": 337,
                  "endColumn": 47,
                  "snippet": {
                    "text": "#define APR_HAS_XTHREAD_FILES     1\n#define APR_HAS_OS_UUID           1\n\n#define APR_PROCATTR_USER_SET_REQUIRES_PASSWORD 1\n\n/* APR sets APR_FILES_AS_SOCKETS to 1 on systems where it is possible\n * to poll on files/pipes.\n",
                    "rendered": {
                      "text": "#define APR_HAS_XTHREAD_FILES     1\n#define APR_HAS_OS_UUID           1\n\n#define APR_PROCATTR_USER_SET_REQUIRES_PASSWORD 1\n\n/* APR sets APR_FILES_AS_SOCKETS to 1 on systems where it is possible\n * to poll on files/pipes.\n",
                      "markdown": "`#define APR_HAS_XTHREAD_FILES     1\n#define APR_HAS_OS_UUID           1\n\n#define APR_PROCATTR_USER_SET_REQUIRES_PASSWORD 1\n\n/* APR sets APR_FILES_AS_SOCKETS to 1 on systems where it is possible\n * to poll on files/pipes.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr.hwc"
                },
                "region": {
                  "startLine": 576,
                  "startColumn": 46,
                  "endLine": 576,
                  "endColumn": 50,
                  "snippet": {
                    "text": "/**\n * Declare a dso module's exported module structure as APR_MODULE_DECLARE_DATA.\n *\n * Unless APR_MODULE_DECLARE_STATIC is defined at compile time, symbols\n * declared with APR_MODULE_DECLARE_DATA are always exported.\n * @code\n * module APR_MODULE_DECLARE_DATA mod_tag\n",
                    "rendered": {
                      "text": "/**\n * Declare a dso module's exported module structure as APR_MODULE_DECLARE_DATA.\n *\n * Unless APR_MODULE_DECLARE_STATIC is defined at compile time, symbols\n * declared with APR_MODULE_DECLARE_DATA are always exported.\n * @code\n * module APR_MODULE_DECLARE_DATA mod_tag\n",
                      "markdown": "`/**\n * Declare a dso module's exported module structure as APR_MODULE_DECLARE_DATA.\n *\n * Unless APR_MODULE_DECLARE_STATIC is defined at compile time, symbols\n * declared with APR_MODULE_DECLARE_DATA are always exported.\n * @code\n * module APR_MODULE_DECLARE_DATA mod_tag\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr.hwc"
                },
                "region": {
                  "startLine": 544,
                  "startColumn": 54,
                  "endLine": 544,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\n/**\n * The public APR variables are declared with APR_DECLARE_DATA.\n * This assures the appropriate indirection is invoked at compile time.\n * @see APR_DECLARE @see APR_DECLARE_NONSTD\n * @remark Note that the declaration and implementations use different forms,\n * but both must include the macro.\n",
                    "rendered": {
                      "text": "\n/**\n * The public APR variables are declared with APR_DECLARE_DATA.\n * This assures the appropriate indirection is invoked at compile time.\n * @see APR_DECLARE @see APR_DECLARE_NONSTD\n * @remark Note that the declaration and implementations use different forms,\n * but both must include the macro.\n",
                      "markdown": "`\n/**\n * The public APR variables are declared with APR_DECLARE_DATA.\n * This assures the appropriate indirection is invoked at compile time.\n * @see APR_DECLARE @see APR_DECLARE_NONSTD\n * @remark Note that the declaration and implementations use different forms,\n * but both must include the macro.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr.hwc"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 53,
                  "endLine": 7,
                  "snippet": {
                    "text": " * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": " * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "` * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr.hw"
                },
                "region": {
                  "startLine": 347,
                  "startColumn": 39,
                  "endLine": 347,
                  "endColumn": 47,
                  "snippet": {
                    "text": "#define APR_HAS_XTHREAD_FILES     1\n#define APR_HAS_OS_UUID           1\n\n#define APR_PROCATTR_USER_SET_REQUIRES_PASSWORD 1\n\n/* APR sets APR_FILES_AS_SOCKETS to 1 on systems where it is possible\n * to poll on files/pipes.\n",
                    "rendered": {
                      "text": "#define APR_HAS_XTHREAD_FILES     1\n#define APR_HAS_OS_UUID           1\n\n#define APR_PROCATTR_USER_SET_REQUIRES_PASSWORD 1\n\n/* APR sets APR_FILES_AS_SOCKETS to 1 on systems where it is possible\n * to poll on files/pipes.\n",
                      "markdown": "`#define APR_HAS_XTHREAD_FILES     1\n#define APR_HAS_OS_UUID           1\n\n#define APR_PROCATTR_USER_SET_REQUIRES_PASSWORD 1\n\n/* APR sets APR_FILES_AS_SOCKETS to 1 on systems where it is possible\n * to poll on files/pipes.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr.hw"
                },
                "region": {
                  "startLine": 586,
                  "startColumn": 46,
                  "endLine": 586,
                  "endColumn": 50,
                  "snippet": {
                    "text": "/**\n * Declare a dso module's exported module structure as APR_MODULE_DECLARE_DATA.\n *\n * Unless APR_MODULE_DECLARE_STATIC is defined at compile time, symbols\n * declared with APR_MODULE_DECLARE_DATA are always exported.\n * @code\n * module APR_MODULE_DECLARE_DATA mod_tag\n",
                    "rendered": {
                      "text": "/**\n * Declare a dso module's exported module structure as APR_MODULE_DECLARE_DATA.\n *\n * Unless APR_MODULE_DECLARE_STATIC is defined at compile time, symbols\n * declared with APR_MODULE_DECLARE_DATA are always exported.\n * @code\n * module APR_MODULE_DECLARE_DATA mod_tag\n",
                      "markdown": "`/**\n * Declare a dso module's exported module structure as APR_MODULE_DECLARE_DATA.\n *\n * Unless APR_MODULE_DECLARE_STATIC is defined at compile time, symbols\n * declared with APR_MODULE_DECLARE_DATA are always exported.\n * @code\n * module APR_MODULE_DECLARE_DATA mod_tag\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr.hw"
                },
                "region": {
                  "startLine": 554,
                  "startColumn": 54,
                  "endLine": 554,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\n/**\n * The public APR variables are declared with APR_DECLARE_DATA.\n * This assures the appropriate indirection is invoked at compile time.\n * @see APR_DECLARE @see APR_DECLARE_NONSTD\n * @remark Note that the declaration and implementations use different forms,\n * but both must include the macro.\n",
                    "rendered": {
                      "text": "\n/**\n * The public APR variables are declared with APR_DECLARE_DATA.\n * This assures the appropriate indirection is invoked at compile time.\n * @see APR_DECLARE @see APR_DECLARE_NONSTD\n * @remark Note that the declaration and implementations use different forms,\n * but both must include the macro.\n",
                      "markdown": "`\n/**\n * The public APR variables are declared with APR_DECLARE_DATA.\n * This assures the appropriate indirection is invoked at compile time.\n * @see APR_DECLARE @see APR_DECLARE_NONSTD\n * @remark Note that the declaration and implementations use different forms,\n * but both must include the macro.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr.hw"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 53,
                  "endLine": 7,
                  "snippet": {
                    "text": " * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": " * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "` * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.github/workflows/windows.yml"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 12,
                  "endLine": 147,
                  "snippet": {
                    "text": "\n    - name: Build\n      # Build your program with the given configuration\n      shell: cmd\n      run: |\n        call \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\Tools\\VsDevCmd.bat\" -arch=${{ matrix.arch }}\n        cmake --build ${{github.workspace}}/build --config ${{ matrix.build-type }}\n\n",
                    "rendered": {
                      "text": "\n    - name: Build\n      # Build your program with the given configuration\n      shell: cmd\n      run: |\n        call \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\Tools\\VsDevCmd.bat\" -arch=${{ matrix.arch }}\n        cmake --build ${{github.workspace}}/build --config ${{ matrix.build-type }}\n\n",
                      "markdown": "`\n    - name: Build\n      # Build your program with the given configuration\n      shell: cmd\n      run: |\n        call \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\Tools\\VsDevCmd.bat\" -arch=${{ matrix.arch }}\n        cmake --build ${{github.workspace}}/build --config ${{ matrix.build-type }}\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.github/workflows/windows.yml"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 12,
                  "endLine": 132,
                  "snippet": {
                    "text": "    - name: Configure CMake\n      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.\n      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type\n      shell: cmd\n      run: |\n        call \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\Tools\\VsDevCmd.bat\" -arch=${{ matrix.arch }}\n        cmake -B ${{github.workspace}}/build ^\n          -G \"${{ matrix.generator }}\" ^\n",
                    "rendered": {
                      "text": "    - name: Configure CMake\n      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.\n      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type\n      shell: cmd\n      run: |\n        call \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\Tools\\VsDevCmd.bat\" -arch=${{ matrix.arch }}\n        cmake -B ${{github.workspace}}/build ^\n          -G \"${{ matrix.generator }}\" ^\n",
                      "markdown": "`    - name: Configure CMake\n      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.\n      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type\n      shell: cmd\n      run: |\n        call \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\Tools\\VsDevCmd.bat\" -arch=${{ matrix.arch }}\n        cmake -B ${{github.workspace}}/build ^\n          -G \"${{ matrix.generator }}\" ^\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.github/workflows/windows.yml"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 21,
                  "endLine": 106,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            generator: Ninja\n            build-shared: OFF\n            dso-build: OFF\n            packages: sqlite3 openssl libiconv libpq[core]\n            config: >-\n              -DAPU_HAVE_ODBC=ON\n              -DAPU_HAVE_SQLITE3=ON\n",
                    "rendered": {
                      "text": "            generator: Ninja\n            build-shared: OFF\n            dso-build: OFF\n            packages: sqlite3 openssl libiconv libpq[core]\n            config: >-\n              -DAPU_HAVE_ODBC=ON\n              -DAPU_HAVE_SQLITE3=ON\n",
                      "markdown": "`            generator: Ninja\n            build-shared: OFF\n            dso-build: OFF\n            packages: sqlite3 openssl libiconv libpq[core]\n            config: >-\n              -DAPU_HAVE_ODBC=ON\n              -DAPU_HAVE_SQLITE3=ON\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.github/workflows/windows.yml"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 38,
                  "endLine": 98,
                  "endColumn": 47,
                  "snippet": {
                    "text": "              -DAPU_HAVE_PGSQL=ON\n              -DAPU_HAVE_CRYPTO=ON\n              -DAPU_HAVE_ICONV=ON\n          - name: \"Static: All (ODBC + Sqlite3 + PostgreSQL + Crypto + Iconv)\"\n            os: windows-latest\n            triplet: x64-windows-static\n            arch: x64\n",
                    "rendered": {
                      "text": "              -DAPU_HAVE_PGSQL=ON\n              -DAPU_HAVE_CRYPTO=ON\n              -DAPU_HAVE_ICONV=ON\n          - name: \"Static: All (ODBC + Sqlite3 + PostgreSQL + Crypto + Iconv)\"\n            os: windows-latest\n            triplet: x64-windows-static\n            arch: x64\n",
                      "markdown": "`              -DAPU_HAVE_PGSQL=ON\n              -DAPU_HAVE_CRYPTO=ON\n              -DAPU_HAVE_ICONV=ON\n          - name: \"Static: All (ODBC + Sqlite3 + PostgreSQL + Crypto + Iconv)\"\n            os: windows-latest\n            triplet: x64-windows-static\n            arch: x64\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.github/workflows/windows.yml"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 21,
                  "endLine": 91,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            generator: Ninja\n            build-shared: ON\n            dso-build: ON\n            packages: sqlite3 openssl libiconv libpq[core]\n            config: >-\n              -DAPU_HAVE_ODBC=ON\n              -DAPU_HAVE_SQLITE3=ON\n",
                    "rendered": {
                      "text": "            generator: Ninja\n            build-shared: ON\n            dso-build: ON\n            packages: sqlite3 openssl libiconv libpq[core]\n            config: >-\n              -DAPU_HAVE_ODBC=ON\n              -DAPU_HAVE_SQLITE3=ON\n",
                      "markdown": "`            generator: Ninja\n            build-shared: ON\n            dso-build: ON\n            packages: sqlite3 openssl libiconv libpq[core]\n            config: >-\n              -DAPU_HAVE_ODBC=ON\n              -DAPU_HAVE_SQLITE3=ON\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.github/workflows/windows.yml"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 38,
                  "endLine": 83,
                  "endColumn": 47,
                  "snippet": {
                    "text": "              -DAPU_HAVE_ODBC=OFF\n              -DAPU_HAVE_SQLITE3=OFF\n              -DAPU_HAVE_CRYPTO=OFF\n          - name: \"Shared: All (ODBC + Sqlite3 + PostgreSQL + Crypto + Iconv)\"\n            os: windows-latest\n            triplet: x64-windows\n            arch: x64\n",
                    "rendered": {
                      "text": "              -DAPU_HAVE_ODBC=OFF\n              -DAPU_HAVE_SQLITE3=OFF\n              -DAPU_HAVE_CRYPTO=OFF\n          - name: \"Shared: All (ODBC + Sqlite3 + PostgreSQL + Crypto + Iconv)\"\n            os: windows-latest\n            triplet: x64-windows\n            arch: x64\n",
                      "markdown": "`              -DAPU_HAVE_ODBC=OFF\n              -DAPU_HAVE_SQLITE3=OFF\n              -DAPU_HAVE_CRYPTO=OFF\n          - name: \"Shared: All (ODBC + Sqlite3 + PostgreSQL + Crypto + Iconv)\"\n            os: windows-latest\n            triplet: x64-windows\n            arch: x64\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.github/workflows/linux.yml"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 53,
                  "endLine": 85,
                  "endColumn": 59,
                  "snippet": {
                    "text": "      run: ./configure --prefix=/tmp/apr ${{ matrix.config }}\n    - if: ${{ matrix.config-output != '' }}\n      name: check for expected configure output ${{ matrix.config-output }}\n      run: for var in ${{ matrix.config-output }}; do grep \"^#define *${var} *1\" include/apr.h; done\n    - name: make\n      run: make $MARGS\n    - name: install\n",
                    "rendered": {
                      "text": "      run: ./configure --prefix=/tmp/apr ${{ matrix.config }}\n    - if: ${{ matrix.config-output != '' }}\n      name: check for expected configure output ${{ matrix.config-output }}\n      run: for var in ${{ matrix.config-output }}; do grep \"^#define *${var} *1\" include/apr.h; done\n    - name: make\n      run: make $MARGS\n    - name: install\n",
                      "markdown": "`      run: ./configure --prefix=/tmp/apr ${{ matrix.config }}\n    - if: ${{ matrix.config-output != '' }}\n      name: check for expected configure output ${{ matrix.config-output }}\n      run: for var in ${{ matrix.config-output }}; do grep \"^#define *${var} *1\" include/apr.h; done\n    - name: make\n      run: make $MARGS\n    - name: install\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.github/workflows/linux.yml"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 15,
                  "endLine": 74,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    name: ${{ matrix.name }}\n    steps:\n    - name: Install prerequisites\n      run: sudo apt-get install libtool libtool-bin ${{ matrix.packages }}\n    - uses: actions/checkout@v4\n    # https://github.com/actions/runner-images/issues/9491#issuecomment-1989718917\n    - name: Workaround ASAN issue in Ubuntu 22.04 runners\n",
                    "rendered": {
                      "text": "    name: ${{ matrix.name }}\n    steps:\n    - name: Install prerequisites\n      run: sudo apt-get install libtool libtool-bin ${{ matrix.packages }}\n    - uses: actions/checkout@v4\n    # https://github.com/actions/runner-images/issues/9491#issuecomment-1989718917\n    - name: Workaround ASAN issue in Ubuntu 22.04 runners\n",
                      "markdown": "`    name: ${{ matrix.name }}\n    steps:\n    - name: Install prerequisites\n      run: sudo apt-get install libtool libtool-bin ${{ matrix.packages }}\n    - uses: actions/checkout@v4\n    # https://github.com/actions/runner-images/issues/9491#issuecomment-1989718917\n    - name: Workaround ASAN issue in Ubuntu 22.04 runners\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.github/workflows/macos.yml"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 45,
                  "endLine": 28,
                  "snippet": {
                    "text": "    name: ${{ matrix.name }}\n    steps:\n    - name: Install prerequisites\n      run: brew install libtool autoconf make bash\n    - uses: actions/checkout@v4\n    - name: buildconf\n      run: ./buildconf\n    - name: configure\n",
                    "rendered": {
                      "text": "    name: ${{ matrix.name }}\n    steps:\n    - name: Install prerequisites\n      run: brew install libtool autoconf make bash\n    - uses: actions/checkout@v4\n    - name: buildconf\n      run: ./buildconf\n    - name: configure\n",
                      "markdown": "`    name: ${{ matrix.name }}\n    steps:\n    - name: Install prerequisites\n      run: brew install libtool autoconf make bash\n    - uses: actions/checkout@v4\n    - name: buildconf\n      run: ./buildconf\n    - name: configure\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.github/workflows/macos.yml"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 45,
                  "endLine": 28,
                  "snippet": {
                    "text": "    name: ${{ matrix.name }}\n    steps:\n    - name: Install prerequisites\n      run: brew install libtool autoconf make bash\n    - uses: actions/checkout@v4\n    - name: buildconf\n      run: ./buildconf\n    - name: configure\n",
                    "rendered": {
                      "text": "    name: ${{ matrix.name }}\n    steps:\n    - name: Install prerequisites\n      run: brew install libtool autoconf make bash\n    - uses: actions/checkout@v4\n    - name: buildconf\n      run: ./buildconf\n    - name: configure\n",
                      "markdown": "`    name: ${{ matrix.name }}\n    steps:\n    - name: Install prerequisites\n      run: brew install libtool autoconf make bash\n    - uses: actions/checkout@v4\n    - name: buildconf\n      run: ./buildconf\n    - name: configure\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/apr-config.in"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 23,
                  "endLine": 229,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    # If the LA_FILE exists where we think it should be, use it.  If we're\n    # installed and the LA_FILE does not exist, assume to use -L/-l\n    # (the LA_FILE may not have been installed).  If we're building ourselves,\n    # we'll assume that at some point the .la file be created.\n    if test -f \"$LA_FILE\"; then\n        flags=\"$flags $LA_FILE\"\n    elif test \"$location\" = \"installed\"; then\n",
                    "rendered": {
                      "text": "    # If the LA_FILE exists where we think it should be, use it.  If we're\n    # installed and the LA_FILE does not exist, assume to use -L/-l\n    # (the LA_FILE may not have been installed).  If we're building ourselves,\n    # we'll assume that at some point the .la file be created.\n    if test -f \"$LA_FILE\"; then\n        flags=\"$flags $LA_FILE\"\n    elif test \"$location\" = \"installed\"; then\n",
                      "markdown": "`    # If the LA_FILE exists where we think it should be, use it.  If we're\n    # installed and the LA_FILE does not exist, assume to use -L/-l\n    # (the LA_FILE may not have been installed).  If we're building ourselves,\n    # we'll assume that at some point the .la file be created.\n    if test -f \"$LA_FILE\"; then\n        flags=\"$flags $LA_FILE\"\n    elif test \"$location\" = \"installed\"; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/apr-config.in"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 52,
                  "endLine": 8,
                  "snippet": {
                    "text": "# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/apr-config.in"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 29,
                  "endLine": 130,
                  "endColumn": 34,
                  "snippet": {
                    "text": "while test $# -gt 0; do\n    # Normalize the prefix.\n    case \"$1\" in\n    -*=*) optarg=`echo \"$1\" | sed 's/[-_a-zA-Z0-9]*=//'` ;;\n    *) optarg= ;;\n    esac\n\n",
                    "rendered": {
                      "text": "while test $# -gt 0; do\n    # Normalize the prefix.\n    case \"$1\" in\n    -*=*) optarg=`echo \"$1\" | sed 's/[-_a-zA-Z0-9]*=//'` ;;\n    *) optarg= ;;\n    esac\n\n",
                      "markdown": "`while test $# -gt 0; do\n    # Normalize the prefix.\n    case \"$1\" in\n    -*=*) optarg=`echo \"$1\" | sed 's/[-_a-zA-Z0-9]*=//'` ;;\n    *) optarg= ;;\n    esac\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/apr-config.in"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 61,
                  "endLine": 94,
                  "endColumn": 66,
                  "snippet": {
                    "text": "  --installbuilddir print APR build helper directory\n  --link-ld         print link switch(es) for linking to APR\n  --link-libtool    print the libtool inputs for linking to APR\n  --shlib-path-var  print the name of the shared library path env var\n  --apr-la-file     print the path to the .la file, if available\n  --apr-so-ext      print the extensions of shared objects on this platform\n  --apr-lib-target  print the libtool target information\n",
                    "rendered": {
                      "text": "  --installbuilddir print APR build helper directory\n  --link-ld         print link switch(es) for linking to APR\n  --link-libtool    print the libtool inputs for linking to APR\n  --shlib-path-var  print the name of the shared library path env var\n  --apr-la-file     print the path to the .la file, if available\n  --apr-so-ext      print the extensions of shared objects on this platform\n  --apr-lib-target  print the libtool target information\n",
                      "markdown": "`  --installbuilddir print APR build helper directory\n  --link-ld         print link switch(es) for linking to APR\n  --link-libtool    print the libtool inputs for linking to APR\n  --shlib-path-var  print the name of the shared library path env var\n  --apr-la-file     print the path to the .la file, if available\n  --apr-so-ext      print the extensions of shared objects on this platform\n  --apr-lib-target  print the libtool target information\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/apr-config.in"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 3,
                  "endLine": 76,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nshow_usage()\n{\n    cat << EOF\nUsage: apr-$APR_MAJOR_VERSION-config [OPTION]\n\nKnown values for OPTION are:\n",
                    "rendered": {
                      "text": "\nshow_usage()\n{\n    cat << EOF\nUsage: apr-$APR_MAJOR_VERSION-config [OPTION]\n\nKnown values for OPTION are:\n",
                      "markdown": "`\nshow_usage()\n{\n    cat << EOF\nUsage: apr-$APR_MAJOR_VERSION-config [OPTION]\n\nKnown values for OPTION are:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/apr-config.in"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 5,
                  "endLine": 18,
                  "endColumn": 13,
                  "snippet": {
                    "text": "# limitations under the License.\n#\n\n# APR script designed to allow easy command line access to APR configuration\n# parameters.\n\nAPR_MAJOR_VERSION=\"@APR_MAJOR_VERSION@\"\n",
                    "rendered": {
                      "text": "# limitations under the License.\n#\n\n# APR script designed to allow easy command line access to APR configuration\n# parameters.\n\nAPR_MAJOR_VERSION=\"@APR_MAJOR_VERSION@\"\n",
                      "markdown": "`# limitations under the License.\n#\n\n# APR script designed to allow easy command line access to APR configuration\n# parameters.\n\nAPR_MAJOR_VERSION=\"@APR_MAJOR_VERSION@\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build.conf"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 26,
                  "endLine": 48,
                  "endColumn": 32,
                  "snippet": {
                    "text": "# pattern will be: SUBDIR/PLATFORM/*.c\nplatform_dirs =\n  dso file_io locks memory misc mmap network_io poll random\n  shmem support threadproc time user atomic\n\n# all the public headers\nheaders = include/*.h\n",
                    "rendered": {
                      "text": "# pattern will be: SUBDIR/PLATFORM/*.c\nplatform_dirs =\n  dso file_io locks memory misc mmap network_io poll random\n  shmem support threadproc time user atomic\n\n# all the public headers\nheaders = include/*.h\n",
                      "markdown": "`# pattern will be: SUBDIR/PLATFORM/*.c\nplatform_dirs =\n  dso file_io locks memory misc mmap network_io poll random\n  shmem support threadproc time user atomic\n\n# all the public headers\nheaders = include/*.h\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.sub"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 60,
                  "endLine": 58,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# The \"shellcheck disable\" line above the timestamp inhibits complaints\n# about features and limitations of the classic Bourne shell that were\n# superseded or lifted in POSIX.  However, this script identifies a wide\n# variety of pre-POSIX systems that do not have POSIX shells at all, and\n# even some reasonably current systems (Solaris 10 as case-in-point) still\n# have a pre-POSIX /bin/sh.\n\n",
                    "rendered": {
                      "text": "# The \"shellcheck disable\" line above the timestamp inhibits complaints\n# about features and limitations of the classic Bourne shell that were\n# superseded or lifted in POSIX.  However, this script identifies a wide\n# variety of pre-POSIX systems that do not have POSIX shells at all, and\n# even some reasonably current systems (Solaris 10 as case-in-point) still\n# have a pre-POSIX /bin/sh.\n\n",
                      "markdown": "`# The \"shellcheck disable\" line above the timestamp inhibits complaints\n# about features and limitations of the classic Bourne shell that were\n# superseded or lifted in POSIX.  However, this script identifies a wide\n# variety of pre-POSIX systems that do not have POSIX shells at all, and\n# even some reasonably current systems (Solaris 10 as case-in-point) still\n# have a pre-POSIX /bin/sh.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.sub"
                },
                "region": {
                  "startLine": 1517,
                  "startColumn": 66,
                  "endLine": 1518,
                  "snippet": {
                    "text": "# machine or put another way, the most popular os provided with the machine.\n\n# Note that if you're going to try to match \"-MANUFACTURER\" here (say,\n# \"-sun\"), then you have to tell the case statement up towards the top\n# that MANUFACTURER isn't an operating system.  Otherwise, code above\n# will signal an error saying that MANUFACTURER isn't an operating\n# system, and we'll never get to this point.\n\n",
                    "rendered": {
                      "text": "# machine or put another way, the most popular os provided with the machine.\n\n# Note that if you're going to try to match \"-MANUFACTURER\" here (say,\n# \"-sun\"), then you have to tell the case statement up towards the top\n# that MANUFACTURER isn't an operating system.  Otherwise, code above\n# will signal an error saying that MANUFACTURER isn't an operating\n# system, and we'll never get to this point.\n\n",
                      "markdown": "`# machine or put another way, the most popular os provided with the machine.\n\n# Note that if you're going to try to match \"-MANUFACTURER\" here (say,\n# \"-sun\"), then you have to tell the case statement up towards the top\n# that MANUFACTURER isn't an operating system.  Otherwise, code above\n# will signal an error saying that MANUFACTURER isn't an operating\n# system, and we'll never get to this point.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.sub"
                },
                "region": {
                  "startLine": 1454,
                  "startColumn": 18,
                  "endLine": 1454,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\t\t;;\n\t# Preserve the version number of sinix5.\n\tsinix5.*)\n\t\tos=`echo \"$os\" | sed -e 's|sinix|sysv|'`\n\t\t;;\n\tsinix*)\n\t\tos=sysv4\n",
                    "rendered": {
                      "text": "\t\t;;\n\t# Preserve the version number of sinix5.\n\tsinix5.*)\n\t\tos=`echo \"$os\" | sed -e 's|sinix|sysv|'`\n\t\t;;\n\tsinix*)\n\t\tos=sysv4\n",
                      "markdown": "`\t\t;;\n\t# Preserve the version number of sinix5.\n\tsinix5.*)\n\t\tos=`echo \"$os\" | sed -e 's|sinix|sysv|'`\n\t\t;;\n\tsinix*)\n\t\tos=sysv4\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.sub"
                },
                "region": {
                  "startLine": 1420,
                  "startColumn": 18,
                  "endLine": 1420,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\t\tos=`echo \"$os\" | sed -e 's|sunos5|solaris2|'`\n\t\t;;\n\tsunos6*)\n\t\tos=`echo \"$os\" | sed -e 's|sunos6|solaris3|'`\n\t\t;;\n\twince*)\n\t\tos=wince\n",
                    "rendered": {
                      "text": "\t\tos=`echo \"$os\" | sed -e 's|sunos5|solaris2|'`\n\t\t;;\n\tsunos6*)\n\t\tos=`echo \"$os\" | sed -e 's|sunos6|solaris3|'`\n\t\t;;\n\twince*)\n\t\tos=wince\n",
                      "markdown": "`\t\tos=`echo \"$os\" | sed -e 's|sunos5|solaris2|'`\n\t\t;;\n\tsunos6*)\n\t\tos=`echo \"$os\" | sed -e 's|sunos6|solaris3|'`\n\t\t;;\n\twince*)\n\t\tos=wince\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.sub"
                },
                "region": {
                  "startLine": 1417,
                  "startColumn": 18,
                  "endLine": 1417,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\t\tos=os400\n\t\t;;\n\tsunos5*)\n\t\tos=`echo \"$os\" | sed -e 's|sunos5|solaris2|'`\n\t\t;;\n\tsunos6*)\n\t\tos=`echo \"$os\" | sed -e 's|sunos6|solaris3|'`\n",
                    "rendered": {
                      "text": "\t\tos=os400\n\t\t;;\n\tsunos5*)\n\t\tos=`echo \"$os\" | sed -e 's|sunos5|solaris2|'`\n\t\t;;\n\tsunos6*)\n\t\tos=`echo \"$os\" | sed -e 's|sunos6|solaris3|'`\n",
                      "markdown": "`\t\tos=os400\n\t\t;;\n\tsunos5*)\n\t\tos=`echo \"$os\" | sed -e 's|sunos5|solaris2|'`\n\t\t;;\n\tsunos6*)\n\t\tos=`echo \"$os\" | sed -e 's|sunos6|solaris3|'`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.sub"
                },
                "region": {
                  "startLine": 1408,
                  "startColumn": 18,
                  "endLine": 1408,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\t\tos=lynxos\n\t\t;;\n\tmac[0-9]*)\n\t\tos=`echo \"$os\" | sed -e 's|mac|macos|'`\n\t\t;;\n\topened*)\n\t\tos=openedition\n",
                    "rendered": {
                      "text": "\t\tos=lynxos\n\t\t;;\n\tmac[0-9]*)\n\t\tos=`echo \"$os\" | sed -e 's|mac|macos|'`\n\t\t;;\n\topened*)\n\t\tos=openedition\n",
                      "markdown": "`\t\tos=lynxos\n\t\t;;\n\tmac[0-9]*)\n\t\tos=`echo \"$os\" | sed -e 's|mac|macos|'`\n\t\t;;\n\topened*)\n\t\tos=openedition\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.sub"
                },
                "region": {
                  "startLine": 1378,
                  "startColumn": 18,
                  "endLine": 1378,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\t\tos=sco3.2v4\n\t\t;;\n\tsco3.2.[4-9]*)\n\t\tos=`echo \"$os\" | sed -e 's/sco3.2./sco3.2v/'`\n\t\t;;\n\tsco*v* | scout)\n\t\t# Don't match below\n",
                    "rendered": {
                      "text": "\t\tos=sco3.2v4\n\t\t;;\n\tsco3.2.[4-9]*)\n\t\tos=`echo \"$os\" | sed -e 's/sco3.2./sco3.2v/'`\n\t\t;;\n\tsco*v* | scout)\n\t\t# Don't match below\n",
                      "markdown": "`\t\tos=sco3.2v4\n\t\t;;\n\tsco3.2.[4-9]*)\n\t\tos=`echo \"$os\" | sed -e 's/sco3.2./sco3.2v/'`\n\t\t;;\n\tsco*v* | scout)\n\t\t# Don't match below\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.sub"
                },
                "region": {
                  "startLine": 1349,
                  "startColumn": 18,
                  "endLine": 1349,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\t\tos=cnk\n\t\t;;\n\tsolaris1 | solaris1.*)\n\t\tos=`echo \"$os\" | sed -e 's|solaris1|sunos4|'`\n\t\t;;\n\tsolaris)\n\t\tos=solaris2\n",
                    "rendered": {
                      "text": "\t\tos=cnk\n\t\t;;\n\tsolaris1 | solaris1.*)\n\t\tos=`echo \"$os\" | sed -e 's|solaris1|sunos4|'`\n\t\t;;\n\tsolaris)\n\t\tos=solaris2\n",
                      "markdown": "`\t\tos=cnk\n\t\t;;\n\tsolaris1 | solaris1.*)\n\t\tos=`echo \"$os\" | sed -e 's|solaris1|sunos4|'`\n\t\t;;\n\tsolaris)\n\t\tos=solaris2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.sub"
                },
                "region": {
                  "startLine": 1328,
                  "startColumn": 24,
                  "endLine": 1328,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t\t;;\n\tmanagarm*)\n\t\tkernel=managarm\n\t\tos=`echo \"$basic_os\" | sed -e 's|managarm|mlibc|'`\n\t\t;;\n\t*)\n\t\tkernel=\n",
                    "rendered": {
                      "text": "\t\t;;\n\tmanagarm*)\n\t\tkernel=managarm\n\t\tos=`echo \"$basic_os\" | sed -e 's|managarm|mlibc|'`\n\t\t;;\n\t*)\n\t\tkernel=\n",
                      "markdown": "`\t\t;;\n\tmanagarm*)\n\t\tkernel=managarm\n\t\tos=`echo \"$basic_os\" | sed -e 's|managarm|mlibc|'`\n\t\t;;\n\t*)\n\t\tkernel=\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.sub"
                },
                "region": {
                  "startLine": 1324,
                  "startColumn": 24,
                  "endLine": 1324,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t\t;;\n\tlinux*)\n\t\tkernel=linux\n\t\tos=`echo \"$basic_os\" | sed -e 's|linux|gnu|'`\n\t\t;;\n\tmanagarm*)\n\t\tkernel=managarm\n",
                    "rendered": {
                      "text": "\t\t;;\n\tlinux*)\n\t\tkernel=linux\n\t\tos=`echo \"$basic_os\" | sed -e 's|linux|gnu|'`\n\t\t;;\n\tmanagarm*)\n\t\tkernel=managarm\n",
                      "markdown": "`\t\t;;\n\tlinux*)\n\t\tkernel=linux\n\t\tos=`echo \"$basic_os\" | sed -e 's|linux|gnu|'`\n\t\t;;\n\tmanagarm*)\n\t\tkernel=managarm\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.sub"
                },
                "region": {
                  "startLine": 1320,
                  "startColumn": 24,
                  "endLine": 1320,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t# Default OS when just kernel was specified\n\tnto*)\n\t\tkernel=nto\n\t\tos=`echo \"$basic_os\" | sed -e 's|nto|qnx|'`\n\t\t;;\n\tlinux*)\n\t\tkernel=linux\n",
                    "rendered": {
                      "text": "\t# Default OS when just kernel was specified\n\tnto*)\n\t\tkernel=nto\n\t\tos=`echo \"$basic_os\" | sed -e 's|nto|qnx|'`\n\t\t;;\n\tlinux*)\n\t\tkernel=linux\n",
                      "markdown": "`\t# Default OS when just kernel was specified\n\tnto*)\n\t\tkernel=nto\n\t\tos=`echo \"$basic_os\" | sed -e 's|nto|qnx|'`\n\t\t;;\n\tlinux*)\n\t\tkernel=linux\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.sub"
                },
                "region": {
                  "startLine": 1307,
                  "startColumn": 24,
                  "endLine": 1307,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t\t;;\n\tnto-qnx*)\n\t\tkernel=nto\n\t\tos=`echo \"$basic_os\" | sed -e 's|nto-qnx|qnx|'`\n\t\t;;\n\t*-*)\n\t\t# shellcheck disable=SC2162\n",
                    "rendered": {
                      "text": "\t\t;;\n\tnto-qnx*)\n\t\tkernel=nto\n\t\tos=`echo \"$basic_os\" | sed -e 's|nto-qnx|qnx|'`\n\t\t;;\n\t*-*)\n\t\t# shellcheck disable=SC2162\n",
                      "markdown": "`\t\t;;\n\tnto-qnx*)\n\t\tkernel=nto\n\t\tos=`echo \"$basic_os\" | sed -e 's|nto-qnx|qnx|'`\n\t\t;;\n\t*-*)\n\t\t# shellcheck disable=SC2162\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.sub"
                },
                "region": {
                  "startLine": 1303,
                  "startColumn": 24,
                  "endLine": 1303,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t\t;;\n\tos2-emx)\n\t\tkernel=os2\n\t\tos=`echo \"$basic_os\" | sed -e 's|os2-emx|emx|'`\n\t\t;;\n\tnto-qnx*)\n\t\tkernel=nto\n",
                    "rendered": {
                      "text": "\t\t;;\n\tos2-emx)\n\t\tkernel=os2\n\t\tos=`echo \"$basic_os\" | sed -e 's|os2-emx|emx|'`\n\t\t;;\n\tnto-qnx*)\n\t\tkernel=nto\n",
                      "markdown": "`\t\t;;\n\tos2-emx)\n\t\tkernel=os2\n\t\tos=`echo \"$basic_os\" | sed -e 's|os2-emx|emx|'`\n\t\t;;\n\tnto-qnx*)\n\t\tkernel=nto\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.sub"
                },
                "region": {
                  "startLine": 1299,
                  "startColumn": 24,
                  "endLine": 1299,
                  "endColumn": 29,
                  "snippet": {
                    "text": "case $basic_os in\n\tgnu/linux*)\n\t\tkernel=linux\n\t\tos=`echo \"$basic_os\" | sed -e 's|gnu/linux|gnu|'`\n\t\t;;\n\tos2-emx)\n\t\tkernel=os2\n",
                    "rendered": {
                      "text": "case $basic_os in\n\tgnu/linux*)\n\t\tkernel=linux\n\t\tos=`echo \"$basic_os\" | sed -e 's|gnu/linux|gnu|'`\n\t\t;;\n\tos2-emx)\n\t\tkernel=os2\n",
                      "markdown": "`case $basic_os in\n\tgnu/linux*)\n\t\tkernel=linux\n\t\tos=`echo \"$basic_os\" | sed -e 's|gnu/linux|gnu|'`\n\t\t;;\n\tos2-emx)\n\t\tkernel=os2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.sub"
                },
                "region": {
                  "startLine": 1128,
                  "startColumn": 20,
                  "endLine": 1128,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\t\tcpu=x86_64\n\t\t;;\n\txscale-* | xscalee[bl]-*)\n\t\tcpu=`echo \"$cpu\" | sed 's/^xscale/arm/'`\n\t\t;;\n\tarm64-* | aarch64le-*)\n\t\tcpu=aarch64\n",
                    "rendered": {
                      "text": "\t\tcpu=x86_64\n\t\t;;\n\txscale-* | xscalee[bl]-*)\n\t\tcpu=`echo \"$cpu\" | sed 's/^xscale/arm/'`\n\t\t;;\n\tarm64-* | aarch64le-*)\n\t\tcpu=aarch64\n",
                      "markdown": "`\t\tcpu=x86_64\n\t\t;;\n\txscale-* | xscalee[bl]-*)\n\t\tcpu=`echo \"$cpu\" | sed 's/^xscale/arm/'`\n\t\t;;\n\tarm64-* | aarch64le-*)\n\t\tcpu=aarch64\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.sub"
                },
                "region": {
                  "startLine": 1110,
                  "startColumn": 20,
                  "endLine": 1110,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\t\tcpu=mipsisa64sb1el\n\t\t;;\n\tsh5e[lb]-*)\n\t\tcpu=`echo \"$cpu\" | sed 's/^\\(sh.\\)e\\(.\\)$/\\1\\2e/'`\n\t\t;;\n\tspur-*)\n\t\tcpu=spur\n",
                    "rendered": {
                      "text": "\t\tcpu=mipsisa64sb1el\n\t\t;;\n\tsh5e[lb]-*)\n\t\tcpu=`echo \"$cpu\" | sed 's/^\\(sh.\\)e\\(.\\)$/\\1\\2e/'`\n\t\t;;\n\tspur-*)\n\t\tcpu=spur\n",
                      "markdown": "`\t\tcpu=mipsisa64sb1el\n\t\t;;\n\tsh5e[lb]-*)\n\t\tcpu=`echo \"$cpu\" | sed 's/^\\(sh.\\)e\\(.\\)$/\\1\\2e/'`\n\t\t;;\n\tspur-*)\n\t\tcpu=spur\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.sub"
                },
                "region": {
                  "startLine": 936,
                  "startColumn": 33,
                  "endLine": 936,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\t\t;;\n\tleon-*|leon[3-9]-*)\n\t\tcpu=sparc\n\t\tvendor=`echo \"$basic_machine\" | sed 's/-.*//'`\n\t\t;;\n\n\t*-*)\n",
                    "rendered": {
                      "text": "\t\t;;\n\tleon-*|leon[3-9]-*)\n\t\tcpu=sparc\n\t\tvendor=`echo \"$basic_machine\" | sed 's/-.*//'`\n\t\t;;\n\n\t*-*)\n",
                      "markdown": "`\t\t;;\n\tleon-*|leon[3-9]-*)\n\t\tcpu=sparc\n\t\tvendor=`echo \"$basic_machine\" | sed 's/-.*//'`\n\t\t;;\n\n\t*-*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.sub"
                },
                "region": {
                  "startLine": 803,
                  "startColumn": 18,
                  "endLine": 803,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\t\tbasic_os=sysv\n\t\t;;\n\ti*86sol2)\n\t\tcpu=`echo \"$1\" | sed -e 's/86.*/86/'`\n\t\tvendor=pc\n\t\tbasic_os=solaris2\n\t\t;;\n",
                    "rendered": {
                      "text": "\t\tbasic_os=sysv\n\t\t;;\n\ti*86sol2)\n\t\tcpu=`echo \"$1\" | sed -e 's/86.*/86/'`\n\t\tvendor=pc\n\t\tbasic_os=solaris2\n\t\t;;\n",
                      "markdown": "`\t\tbasic_os=sysv\n\t\t;;\n\ti*86sol2)\n\t\tcpu=`echo \"$1\" | sed -e 's/86.*/86/'`\n\t\tvendor=pc\n\t\tbasic_os=solaris2\n\t\t;;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.sub"
                },
                "region": {
                  "startLine": 798,
                  "startColumn": 18,
                  "endLine": 798,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\t\tbasic_os=sysv4\n\t\t;;\n\ti*86v)\n\t\tcpu=`echo \"$1\" | sed -e 's/86.*/86/'`\n\t\tvendor=pc\n\t\tbasic_os=sysv\n\t\t;;\n",
                    "rendered": {
                      "text": "\t\tbasic_os=sysv4\n\t\t;;\n\ti*86v)\n\t\tcpu=`echo \"$1\" | sed -e 's/86.*/86/'`\n\t\tvendor=pc\n\t\tbasic_os=sysv\n\t\t;;\n",
                      "markdown": "`\t\tbasic_os=sysv4\n\t\t;;\n\ti*86v)\n\t\tcpu=`echo \"$1\" | sed -e 's/86.*/86/'`\n\t\tvendor=pc\n\t\tbasic_os=sysv\n\t\t;;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.sub"
                },
                "region": {
                  "startLine": 793,
                  "startColumn": 18,
                  "endLine": 793,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\t\tbasic_os=sysv32\n\t\t;;\n\ti*86v4*)\n\t\tcpu=`echo \"$1\" | sed -e 's/86.*/86/'`\n\t\tvendor=pc\n\t\tbasic_os=sysv4\n\t\t;;\n",
                    "rendered": {
                      "text": "\t\tbasic_os=sysv32\n\t\t;;\n\ti*86v4*)\n\t\tcpu=`echo \"$1\" | sed -e 's/86.*/86/'`\n\t\tvendor=pc\n\t\tbasic_os=sysv4\n\t\t;;\n",
                      "markdown": "`\t\tbasic_os=sysv32\n\t\t;;\n\ti*86v4*)\n\t\tcpu=`echo \"$1\" | sed -e 's/86.*/86/'`\n\t\tvendor=pc\n\t\tbasic_os=sysv4\n\t\t;;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.sub"
                },
                "region": {
                  "startLine": 788,
                  "startColumn": 18,
                  "endLine": 788,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\t\tvendor=hp\n\t\t;;\n\ti*86v32)\n\t\tcpu=`echo \"$1\" | sed -e 's/86.*/86/'`\n\t\tvendor=pc\n\t\tbasic_os=sysv32\n\t\t;;\n",
                    "rendered": {
                      "text": "\t\tvendor=hp\n\t\t;;\n\ti*86v32)\n\t\tcpu=`echo \"$1\" | sed -e 's/86.*/86/'`\n\t\tvendor=pc\n\t\tbasic_os=sysv32\n\t\t;;\n",
                      "markdown": "`\t\tvendor=hp\n\t\t;;\n\ti*86v32)\n\t\tcpu=`echo \"$1\" | sed -e 's/86.*/86/'`\n\t\tvendor=pc\n\t\tbasic_os=sysv32\n\t\t;;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.sub"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 15,
                  "endLine": 62,
                  "endColumn": 20,
                  "snippet": {
                    "text": "# even some reasonably current systems (Solaris 10 as case-in-point) still\n# have a pre-POSIX /bin/sh.\n\nme=`echo \"$0\" | sed -e 's,.*/,,'`\n\nusage=\"\\\nUsage: $0 [OPTION] CPU-MFR-OPSYS or ALIAS\n",
                    "rendered": {
                      "text": "# even some reasonably current systems (Solaris 10 as case-in-point) still\n# have a pre-POSIX /bin/sh.\n\nme=`echo \"$0\" | sed -e 's,.*/,,'`\n\nusage=\"\\\nUsage: $0 [OPTION] CPU-MFR-OPSYS or ALIAS\n",
                      "markdown": "`# even some reasonably current systems (Solaris 10 as case-in-point) still\n# have a pre-POSIX /bin/sh.\n\nme=`echo \"$0\" | sed -e 's,.*/,,'`\n\nusage=\"\\\nUsage: $0 [OPTION] CPU-MFR-OPSYS or ALIAS\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.sub"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 47,
                  "endLine": 57,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\n# The \"shellcheck disable\" line above the timestamp inhibits complaints\n# about features and limitations of the classic Bourne shell that were\n# superseded or lifted in POSIX.  However, this script identifies a wide\n# variety of pre-POSIX systems that do not have POSIX shells at all, and\n# even some reasonably current systems (Solaris 10 as case-in-point) still\n# have a pre-POSIX /bin/sh.\n",
                    "rendered": {
                      "text": "\n# The \"shellcheck disable\" line above the timestamp inhibits complaints\n# about features and limitations of the classic Bourne shell that were\n# superseded or lifted in POSIX.  However, this script identifies a wide\n# variety of pre-POSIX systems that do not have POSIX shells at all, and\n# even some reasonably current systems (Solaris 10 as case-in-point) still\n# have a pre-POSIX /bin/sh.\n",
                      "markdown": "`\n# The \"shellcheck disable\" line above the timestamp inhibits complaints\n# about features and limitations of the classic Bourne shell that were\n# superseded or lifted in POSIX.  However, this script identifies a wide\n# variety of pre-POSIX systems that do not have POSIX shells at all, and\n# even some reasonably current systems (Solaris 10 as case-in-point) still\n# have a pre-POSIX /bin/sh.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.sub"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 40,
                  "endLine": 37,
                  "endColumn": 48,
                  "snippet": {
                    "text": "# If it is invalid, we print an error message on stderr and exit with code 1.\n# Otherwise, we print the canonical config type on stdout and succeed.\n\n# You can get the latest version of this script from:\n# https://git.savannah.gnu.org/cgit/config.git/plain/config.sub\n\n# This file is supposed to be the same for all GNU packages\n",
                    "rendered": {
                      "text": "# If it is invalid, we print an error message on stderr and exit with code 1.\n# Otherwise, we print the canonical config type on stdout and succeed.\n\n# You can get the latest version of this script from:\n# https://git.savannah.gnu.org/cgit/config.git/plain/config.sub\n\n# This file is supposed to be the same for all GNU packages\n",
                      "markdown": "`# If it is invalid, we print an error message on stderr and exit with code 1.\n# Otherwise, we print the canonical config type on stdout and succeed.\n\n# You can get the latest version of this script from:\n# https://git.savannah.gnu.org/cgit/config.git/plain/config.sub\n\n# This file is supposed to be the same for all GNU packages\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/config.sub"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 15,
                  "endLine": 24,
                  "endColumn": 23,
                  "snippet": {
                    "text": "#\n# As a special exception to the GNU General Public License, if you\n# distribute this file as part of a program that contains a\n# configuration script generated by Autoconf, you may include it under\n# the same distribution terms that you use for the rest of that\n# program.  This Exception is an additional permission under section 7\n# of the GNU General Public License, version 3 (\"GPLv3\").\n",
                    "rendered": {
                      "text": "#\n# As a special exception to the GNU General Public License, if you\n# distribute this file as part of a program that contains a\n# configuration script generated by Autoconf, you may include it under\n# the same distribution terms that you use for the rest of that\n# program.  This Exception is an additional permission under section 7\n# of the GNU General Public License, version 3 (\"GPLv3\").\n",
                      "markdown": "`#\n# As a special exception to the GNU General Public License, if you\n# distribute this file as part of a program that contains a\n# configuration script generated by Autoconf, you may include it under\n# the same distribution terms that you use for the rest of that\n# program.  This Exception is an additional permission under section 7\n# of the GNU General Public License, version 3 (\"GPLv3\").\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/MakeEtags"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 22,
                  "endLine": 33,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\nignore=AP_DECLARE,AP_DECLARE_NONSTD,__declspec,APR_DECLARE,APR_DECLARE_NONSTD\n\n# Create an etags file at the root of the source\n# tree, then create symbol links to it from each\n# directory in the source tree.  By passing etags\n# absolute pathnames we get a tag file that is\n",
                    "rendered": {
                      "text": "\nignore=AP_DECLARE,AP_DECLARE_NONSTD,__declspec,APR_DECLARE,APR_DECLARE_NONSTD\n\n# Create an etags file at the root of the source\n# tree, then create symbol links to it from each\n# directory in the source tree.  By passing etags\n# absolute pathnames we get a tag file that is\n",
                      "markdown": "`\nignore=AP_DECLARE,AP_DECLARE_NONSTD,__declspec,APR_DECLARE,APR_DECLARE_NONSTD\n\n# Create an etags file at the root of the source\n# tree, then create symbol links to it from each\n# directory in the source tree.  By passing etags\n# absolute pathnames we get a tag file that is\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/MakeEtags"
                },
                "region": {
                  "startLine": 38,
                  "endLine": 39,
                  "endColumn": 5,
                  "snippet": {
                    "text": "# directory in the source tree.  By passing etags\n# absolute pathnames we get a tag file that is\n# NOT portable when we move the directory tree.\n\nfind . -name '*.[ch]' -print | $etags -I \"$ignore\"  -L -\n\n",
                    "rendered": {
                      "text": "# directory in the source tree.  By passing etags\n# absolute pathnames we get a tag file that is\n# NOT portable when we move the directory tree.\n\nfind . -name '*.[ch]' -print | $etags -I \"$ignore\"  -L -\n\n",
                      "markdown": "`# directory in the source tree.  By passing etags\n# absolute pathnames we get a tag file that is\n# NOT portable when we move the directory tree.\n\nfind . -name '*.[ch]' -print | $etags -I \"$ignore\"  -L -\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/MakeEtags"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 33,
                  "endLine": 11,
                  "endColumn": 40,
                  "snippet": {
                    "text": "# This script falls under the Apache License.\n# See http://www.apache.org/docs/LICENSE\n\n# Once you have created ./TAGS in emacs you'll need to setup\n# tag-table-alist with an entry to assure it finds the single ./TAGS\n# file from the many source directories.  Something along these lines:\n# (setq tag-table-alist\n",
                    "rendered": {
                      "text": "# This script falls under the Apache License.\n# See http://www.apache.org/docs/LICENSE\n\n# Once you have created ./TAGS in emacs you'll need to setup\n# tag-table-alist with an entry to assure it finds the single ./TAGS\n# file from the many source directories.  Something along these lines:\n# (setq tag-table-alist\n",
                      "markdown": "`# This script falls under the Apache License.\n# See http://www.apache.org/docs/LICENSE\n\n# Once you have created ./TAGS in emacs you'll need to setup\n# tag-table-alist with an entry to assure it finds the single ./TAGS\n# file from the many source directories.  Something along these lines:\n# (setq tag-table-alist\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/MakeEtags"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 6,
                  "endLine": 8,
                  "endColumn": 14,
                  "snippet": {
                    "text": "#   > build/MakeEtags\n# and will create a TAGS file in the top source directory.\n\n# This script falls under the Apache License.\n# See http://www.apache.org/docs/LICENSE\n\n# Once you have created ./TAGS in emacs you'll need to setup\n",
                    "rendered": {
                      "text": "#   > build/MakeEtags\n# and will create a TAGS file in the top source directory.\n\n# This script falls under the Apache License.\n# See http://www.apache.org/docs/LICENSE\n\n# Once you have created ./TAGS in emacs you'll need to setup\n",
                      "markdown": "`#   > build/MakeEtags\n# and will create a TAGS file in the top source directory.\n\n# This script falls under the Apache License.\n# See http://www.apache.org/docs/LICENSE\n\n# Once you have created ./TAGS in emacs you'll need to setup\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/MakeEtags"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 36,
                  "endLine": 6,
                  "endColumn": 41,
                  "snippet": {
                    "text": "# This file illustrates how to generate a useful TAGS file via etags\n# for emacs.  This should be invoked from the top source directory i.e.:\n#   > build/MakeEtags\n# and will create a TAGS file in the top source directory.\n\n# This script falls under the Apache License.\n# See http://www.apache.org/docs/LICENSE\n",
                    "rendered": {
                      "text": "# This file illustrates how to generate a useful TAGS file via etags\n# for emacs.  This should be invoked from the top source directory i.e.:\n#   > build/MakeEtags\n# and will create a TAGS file in the top source directory.\n\n# This script falls under the Apache License.\n# See http://www.apache.org/docs/LICENSE\n",
                      "markdown": "`# This file illustrates how to generate a useful TAGS file via etags\n# for emacs.  This should be invoked from the top source directory i.e.:\n#   > build/MakeEtags\n# and will create a TAGS file in the top source directory.\n\n# This script falls under the Apache License.\n# See http://www.apache.org/docs/LICENSE\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/MakeEtags"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 45,
                  "endLine": 4,
                  "endColumn": 50,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# This file illustrates how to generate a useful TAGS file via etags\n# for emacs.  This should be invoked from the top source directory i.e.:\n#   > build/MakeEtags\n# and will create a TAGS file in the top source directory.\n\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# This file illustrates how to generate a useful TAGS file via etags\n# for emacs.  This should be invoked from the top source directory i.e.:\n#   > build/MakeEtags\n# and will create a TAGS file in the top source directory.\n\n",
                      "markdown": "`#!/bin/sh\n\n# This file illustrates how to generate a useful TAGS file via etags\n# for emacs.  This should be invoked from the top source directory i.e.:\n#   > build/MakeEtags\n# and will create a TAGS file in the top source directory.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apu-hints.m4"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 54,
                  "endLine": 8,
                  "snippet": {
                    "text": "dnl this work for additional information regarding copyright ownership.\ndnl The ASF licenses this file to You under the Apache License, Version 2.0\ndnl (the \"License\"); you may not use this file except in compliance with\ndnl the License.  You may obtain a copy of the License at\ndnl\ndnl     http://www.apache.org/licenses/LICENSE-2.0\ndnl\ndnl Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "dnl this work for additional information regarding copyright ownership.\ndnl The ASF licenses this file to You under the Apache License, Version 2.0\ndnl (the \"License\"); you may not use this file except in compliance with\ndnl the License.  You may obtain a copy of the License at\ndnl\ndnl     http://www.apache.org/licenses/LICENSE-2.0\ndnl\ndnl Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`dnl this work for additional information regarding copyright ownership.\ndnl The ASF licenses this file to You under the Apache License, Version 2.0\ndnl (the \"License\"); you may not use this file except in compliance with\ndnl the License.  You may obtain a copy of the License at\ndnl\ndnl     http://www.apache.org/licenses/LICENSE-2.0\ndnl\ndnl Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/PrintPath"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 52,
                  "endLine": 9,
                  "snippet": {
                    "text": "# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/PrintPath"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 3,
                  "endLine": 89,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    # Here is how we test to see if test/[] can handle -x\n    testfile=\"pp.t.$$\"\n\n    cat > $testfile <<ENDTEST\n#!/bin/sh\nif [ -x / ] || [ -x /bin ] || [ -x /bin/ls ]; then\n    exit 0\n",
                    "rendered": {
                      "text": "    # Here is how we test to see if test/[] can handle -x\n    testfile=\"pp.t.$$\"\n\n    cat > $testfile <<ENDTEST\n#!/bin/sh\nif [ -x / ] || [ -x /bin ] || [ -x /bin/ls ]; then\n    exit 0\n",
                      "markdown": "`    # Here is how we test to see if test/[] can handle -x\n    testfile=\"pp.t.$$\"\n\n    cat > $testfile <<ENDTEST\n#!/bin/sh\nif [ -x / ] || [ -x /bin ] || [ -x /bin/ls ]; then\n    exit 0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/PrintPath"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 4,
                  "endLine": 82,
                  "endColumn": 9,
                  "snippet": {
                    "text": "else\n    ext=\"\"\t# No default extensions\n    pathname=`echo $pathname |\n     sed 's/^:/.:/\n\t  s/::/:.:/g\n\t  s/:$/:./\n\t  s/:/ /g' `\n",
                    "rendered": {
                      "text": "else\n    ext=\"\"\t# No default extensions\n    pathname=`echo $pathname |\n     sed 's/^:/.:/\n\t  s/::/:.:/g\n\t  s/:$/:./\n\t  s/:/ /g' `\n",
                      "markdown": "`else\n    ext=\"\"\t# No default extensions\n    pathname=`echo $pathname |\n     sed 's/^:/.:/\n\t  s/::/:.:/g\n\t  s/:$/:./\n\t  s/:/ /g' `\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/PrintPath"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 4,
                  "endLine": 73,
                  "endColumn": 9,
                  "snippet": {
                    "text": "then\n    ext=\".exe\"\n    pathname=`echo -E $pathname |\n     sed 's/^;/.;/\n\t  s/;;/;.;/g\n\t  s/;$/;./\n\t  s/;/ /g\n",
                    "rendered": {
                      "text": "then\n    ext=\".exe\"\n    pathname=`echo -E $pathname |\n     sed 's/^;/.;/\n\t  s/;;/;.;/g\n\t  s/;$/;./\n\t  s/;/ /g\n",
                      "markdown": "`then\n    ext=\".exe\"\n    pathname=`echo -E $pathname |\n     sed 's/^;/.;/\n\t  s/;;/;.;/g\n\t  s/;$/;./\n\t  s/;/ /g\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/PrintPath"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 30,
                  "endLine": 51,
                  "endColumn": 35,
                  "snippet": {
                    "text": "do\n    case $args in\n\t-s  ) echo=\"no\" ;;\n\t-p* ) pathname=\"`echo $args | sed 's/^..//'`\" ;;\n\t*   ) programs=\"$programs $args\" ;;\n    esac\ndone\n",
                    "rendered": {
                      "text": "do\n    case $args in\n\t-s  ) echo=\"no\" ;;\n\t-p* ) pathname=\"`echo $args | sed 's/^..//'`\" ;;\n\t*   ) programs=\"$programs $args\" ;;\n    esac\ndone\n",
                      "markdown": "`do\n    case $args in\n\t-s  ) echo=\"no\" ;;\n\t-p* ) pathname=\"`echo $args | sed 's/^..//'`\" ;;\n\t*   ) programs=\"$programs $args\" ;;\n    esac\ndone\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/PrintPath"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 1,
                  "endLine": 40,
                  "endColumn": 7,
                  "snippet": {
                    "text": "echo=\"yes\"\n\n##\n# Find out what OS we are running for later on\n##\nos=`(uname) 2>/dev/null`\n\n",
                    "rendered": {
                      "text": "echo=\"yes\"\n\n##\n# Find out what OS we are running for later on\n##\nos=`(uname) 2>/dev/null`\n\n",
                      "markdown": "`echo=\"yes\"\n\n##\n# Find out what OS we are running for later on\n##\nos=`(uname) 2>/dev/null`\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/xml.m4"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 54,
                  "endLine": 8,
                  "snippet": {
                    "text": "dnl this work for additional information regarding copyright ownership.\ndnl The ASF licenses this file to You under the Apache License, Version 2.0\ndnl (the \"License\"); you may not use this file except in compliance with\ndnl the License.  You may obtain a copy of the License at\ndnl\ndnl     http://www.apache.org/licenses/LICENSE-2.0\ndnl\ndnl Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "dnl this work for additional information regarding copyright ownership.\ndnl The ASF licenses this file to You under the Apache License, Version 2.0\ndnl (the \"License\"); you may not use this file except in compliance with\ndnl the License.  You may obtain a copy of the License at\ndnl\ndnl     http://www.apache.org/licenses/LICENSE-2.0\ndnl\ndnl Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`dnl this work for additional information regarding copyright ownership.\ndnl The ASF licenses this file to You under the Apache License, Version 2.0\ndnl (the \"License\"); you may not use this file except in compliance with\ndnl the License.  You may obtain a copy of the License at\ndnl\ndnl     http://www.apache.org/licenses/LICENSE-2.0\ndnl\ndnl Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/xml.m4"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 17,
                  "endLine": 208,
                  "endColumn": 23,
                  "snippet": {
                    "text": "])\n\ndnl\ndnl APU_FIND_XML: Find an XML library\ndnl\ndnl Logic: we need exactly one but not both XML libraries\ndnl        Make expat the default for back-compatibility.\n",
                    "rendered": {
                      "text": "])\n\ndnl\ndnl APU_FIND_XML: Find an XML library\ndnl\ndnl Logic: we need exactly one but not both XML libraries\ndnl        Make expat the default for back-compatibility.\n",
                      "markdown": "`])\n\ndnl\ndnl APU_FIND_XML: Find an XML library\ndnl\ndnl Logic: we need exactly one but not both XML libraries\ndnl        Make expat the default for back-compatibility.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/install.sh"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 26,
                  "endLine": 101,
                  "endColumn": 33,
                  "snippet": {
                    "text": "#  Move or copy the file name to the temp name\n$instcmd $src $dsttmp\n\n#  And set any options; do chmod last to preserve setuid bits\nif [ \"x$chowncmd\" != \"x\" ]; then $chowncmd $dsttmp; fi\nif [ \"x$chgrpcmd\" != \"x\" ]; then $chgrpcmd $dsttmp; fi\nif [ \"x$stripcmd\" != \"x\" ]; then $stripcmd $dsttmp; fi\n",
                    "rendered": {
                      "text": "#  Move or copy the file name to the temp name\n$instcmd $src $dsttmp\n\n#  And set any options; do chmod last to preserve setuid bits\nif [ \"x$chowncmd\" != \"x\" ]; then $chowncmd $dsttmp; fi\nif [ \"x$chgrpcmd\" != \"x\" ]; then $chgrpcmd $dsttmp; fi\nif [ \"x$stripcmd\" != \"x\" ]; then $stripcmd $dsttmp; fi\n",
                      "markdown": "`#  Move or copy the file name to the temp name\n$instcmd $src $dsttmp\n\n#  And set any options; do chmod last to preserve setuid bits\nif [ \"x$chowncmd\" != \"x\" ]; then $chowncmd $dsttmp; fi\nif [ \"x$chgrpcmd\" != \"x\" ]; then $chgrpcmd $dsttmp; fi\nif [ \"x$stripcmd\" != \"x\" ]; then $stripcmd $dsttmp; fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/install.sh"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 6,
                  "endLine": 11,
                  "endColumn": 14,
                  "snippet": {
                    "text": "##  by Ralf S. Engelschall <rse@apache.org>\n##\n#\n# This script falls under the Apache License.\n# See http://www.apache.org/docs/LICENSE\n\n\n",
                    "rendered": {
                      "text": "##  by Ralf S. Engelschall <rse@apache.org>\n##\n#\n# This script falls under the Apache License.\n# See http://www.apache.org/docs/LICENSE\n\n\n",
                      "markdown": "`##  by Ralf S. Engelschall <rse@apache.org>\n##\n#\n# This script falls under the Apache License.\n# See http://www.apache.org/docs/LICENSE\n\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/install.sh"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 36,
                  "endLine": 3,
                  "endColumn": 44,
                  "snippet": {
                    "text": "#!/bin/sh\n##\n##  install.sh -- install a program, script or datafile\n##\n##  Based on `install-sh' from the X Consortium's X11R5 distribution\n##  as of 89/12/18 which is freely available.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n##\n##  install.sh -- install a program, script or datafile\n##\n##  Based on `install-sh' from the X Consortium's X11R5 distribution\n##  as of 89/12/18 which is freely available.\n",
                      "markdown": "`#!/bin/sh\n##\n##  install.sh -- install a program, script or datafile\n##\n##  Based on `install-sh' from the X Consortium's X11R5 distribution\n##  as of 89/12/18 which is freely available.\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/crypto.m4"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 40,
                  "endLine": 8,
                  "snippet": {
                    "text": "dnl\ndnl Licensed under the Apache License, Version 2.0 (the \"License\");\ndnl you may not use this file except in compliance with the License.\ndnl You may obtain a copy of the License at\ndnl\ndnl     http://www.apache.org/licenses/LICENSE-2.0\ndnl\ndnl Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "dnl\ndnl Licensed under the Apache License, Version 2.0 (the \"License\");\ndnl you may not use this file except in compliance with the License.\ndnl You may obtain a copy of the License at\ndnl\ndnl     http://www.apache.org/licenses/LICENSE-2.0\ndnl\ndnl Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`dnl\ndnl Licensed under the Apache License, Version 2.0 (the \"License\");\ndnl you may not use this file except in compliance with the License.\ndnl You may obtain a copy of the License at\ndnl\ndnl     http://www.apache.org/licenses/LICENSE-2.0\ndnl\ndnl Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/crypto.m4"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 66,
                  "endLine": 144,
                  "endColumn": 75,
                  "snippet": {
                    "text": "          EVP_EncryptInit_ex(ctx, EVP_aes_128_cbc(), NULL, key, iv);\n          EVP_CIPHER_CTX_free(ctx); ],\n        [AC_MSG_RESULT([yes])]\n        [AC_DEFINE([CRYPTO_OPENSSL_CONST_BUFFERS], 1, [Define that OpenSSL uses const buffers])],\n        [AC_MSG_RESULT([no])])\n\n  fi  \n",
                    "rendered": {
                      "text": "          EVP_EncryptInit_ex(ctx, EVP_aes_128_cbc(), NULL, key, iv);\n          EVP_CIPHER_CTX_free(ctx); ],\n        [AC_MSG_RESULT([yes])]\n        [AC_DEFINE([CRYPTO_OPENSSL_CONST_BUFFERS], 1, [Define that OpenSSL uses const buffers])],\n        [AC_MSG_RESULT([no])])\n\n  fi  \n",
                      "markdown": "`          EVP_EncryptInit_ex(ctx, EVP_aes_128_cbc(), NULL, key, iv);\n          EVP_CIPHER_CTX_free(ctx); ],\n        [AC_MSG_RESULT([yes])]\n        [AC_DEFINE([CRYPTO_OPENSSL_CONST_BUFFERS], 1, [Define that OpenSSL uses const buffers])],\n        [AC_MSG_RESULT([no])])\n\n  fi  \n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/crypto.m4"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 32,
                  "endLine": 112,
                  "endColumn": 41,
                  "snippet": {
                    "text": "      APR_ADDTO(CPPFLAGS, [$openssl_CPPFLAGS])\n      APR_ADDTO(LDFLAGS, [$openssl_LDFLAGS])\n\n      AC_MSG_NOTICE(checking for openssl in $withval)\n      AC_CHECK_HEADERS(openssl/x509.h, [openssl_have_headers=1])\n      AC_CHECK_LIB(crypto, EVP_CIPHER_CTX_new, openssl_have_libs=1)\n      if test \"$openssl_have_headers\" = \"1\" && test \"$openssl_have_libs\" = \"1\"; then\n",
                    "rendered": {
                      "text": "      APR_ADDTO(CPPFLAGS, [$openssl_CPPFLAGS])\n      APR_ADDTO(LDFLAGS, [$openssl_LDFLAGS])\n\n      AC_MSG_NOTICE(checking for openssl in $withval)\n      AC_CHECK_HEADERS(openssl/x509.h, [openssl_have_headers=1])\n      AC_CHECK_LIB(crypto, EVP_CIPHER_CTX_new, openssl_have_libs=1)\n      if test \"$openssl_have_headers\" = \"1\" && test \"$openssl_have_libs\" = \"1\"; then\n",
                      "markdown": "`      APR_ADDTO(CPPFLAGS, [$openssl_CPPFLAGS])\n      APR_ADDTO(LDFLAGS, [$openssl_LDFLAGS])\n\n      AC_MSG_NOTICE(checking for openssl in $withval)\n      AC_CHECK_HEADERS(openssl/x509.h, [openssl_have_headers=1])\n      AC_CHECK_LIB(crypto, EVP_CIPHER_CTX_new, openssl_have_libs=1)\n      if test \"$openssl_have_headers\" = \"1\" && test \"$openssl_have_libs\" = \"1\"; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/crypto.m4"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 38,
                  "endLine": 71,
                  "endColumn": 47,
                  "snippet": {
                    "text": "      if test \"$apu_have_crypto\" = \"0\"; then\n        AC_ERROR([Crypto was requested but no crypto library could be enabled; specify the location of a crypto library using --with-openssl, --with-nss, and/or --with-commoncrypto.])\n      elif test \"$apu_have_openssl\" = \"1\"; then\n        dnl PRNG only implemented with openssl for now\n        apu_have_crypto_prng=1\n      fi\n    fi\n",
                    "rendered": {
                      "text": "      if test \"$apu_have_crypto\" = \"0\"; then\n        AC_ERROR([Crypto was requested but no crypto library could be enabled; specify the location of a crypto library using --with-openssl, --with-nss, and/or --with-commoncrypto.])\n      elif test \"$apu_have_openssl\" = \"1\"; then\n        dnl PRNG only implemented with openssl for now\n        apu_have_crypto_prng=1\n      fi\n    fi\n",
                      "markdown": "`      if test \"$apu_have_crypto\" = \"0\"; then\n        AC_ERROR([Crypto was requested but no crypto library could be enabled; specify the location of a crypto library using --with-openssl, --with-nss, and/or --with-commoncrypto.])\n      elif test \"$apu_have_openssl\" = \"1\"; then\n        dnl PRNG only implemented with openssl for now\n        apu_have_crypto_prng=1\n      fi\n    fi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/NWGNUtail.inc"
                },
                "region": {
                  "startLine": 367,
                  "startColumn": 93,
                  "endLine": 367,
                  "endColumn": 136,
                  "snippet": {
                    "text": "\nifndef NO_LICENSE_FILE\n\n$(OBJDIR)/%.nlm: NWGNU% $(APRBUILD)/NWGNUhead.inc $(APRBUILD)/NWGNUtail.inc $(APRBUILD)/NWGNUenvironment.inc $(CUSTOM_INI) $(VERSION_INC) FORCE\n\t@echo $(DL)Calling $<$(DL)\n\t$(MAKE) -f $< $(MAKECMDGOALS) RELEASE=$(RELEASE)\n\t@$(ECHONL)\n",
                    "rendered": {
                      "text": "\nifndef NO_LICENSE_FILE\n\n$(OBJDIR)/%.nlm: NWGNU% $(APRBUILD)/NWGNUhead.inc $(APRBUILD)/NWGNUtail.inc $(APRBUILD)/NWGNUenvironment.inc $(CUSTOM_INI) $(VERSION_INC) FORCE\n\t@echo $(DL)Calling $<$(DL)\n\t$(MAKE) -f $< $(MAKECMDGOALS) RELEASE=$(RELEASE)\n\t@$(ECHONL)\n",
                      "markdown": "`\nifndef NO_LICENSE_FILE\n\n$(OBJDIR)/%.nlm: NWGNU% $(APRBUILD)/NWGNUhead.inc $(APRBUILD)/NWGNUtail.inc $(APRBUILD)/NWGNUenvironment.inc $(CUSTOM_INI) $(VERSION_INC) FORCE\n\t@echo $(DL)Calling $<$(DL)\n\t$(MAKE) -f $< $(MAKECMDGOALS) RELEASE=$(RELEASE)\n\t@$(ECHONL)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/NWGNUtail.inc"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 93,
                  "endLine": 230,
                  "endColumn": 108,
                  "snippet": {
                    "text": "\nelse # We must have more than one target library so load the individual makefiles\n\n$(OBJDIR)/%.lib: NWGNU% $(APRBUILD)/NWGNUhead.inc $(APRBUILD)/NWGNUtail.inc $(APRBUILD)/NWGNUenvironment.inc FORCE\n\t@echo $(DL)Calling $<$(DL)\n\t$(MAKE) -f $< $(MAKECMDGOALS) RELEASE=$(RELEASE)\n\n",
                    "rendered": {
                      "text": "\nelse # We must have more than one target library so load the individual makefiles\n\n$(OBJDIR)/%.lib: NWGNU% $(APRBUILD)/NWGNUhead.inc $(APRBUILD)/NWGNUtail.inc $(APRBUILD)/NWGNUenvironment.inc FORCE\n\t@echo $(DL)Calling $<$(DL)\n\t$(MAKE) -f $< $(MAKECMDGOALS) RELEASE=$(RELEASE)\n\n",
                      "markdown": "`\nelse # We must have more than one target library so load the individual makefiles\n\n$(OBJDIR)/%.lib: NWGNU% $(APRBUILD)/NWGNUhead.inc $(APRBUILD)/NWGNUtail.inc $(APRBUILD)/NWGNUenvironment.inc FORCE\n\t@echo $(DL)Calling $<$(DL)\n\t$(MAKE) -f $< $(MAKECMDGOALS) RELEASE=$(RELEASE)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/NWGNUtail.inc"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 21,
                  "endLine": 93,
                  "endColumn": 36,
                  "snippet": {
                    "text": "LIB_NAME\t\t\t= $(basename $(notdir $(TARGET_lib)))\n$(LIB_NAME)_LIBLST_DEPENDS\t= \\\n\t\t\t\t$(FILES_lib_objs) \\\n\t\t\t\t$(APRBUILD)/NWGNUenvironment.inc \\\n\t\t\t\tNWGNUmakefile \\\n\t\t\t\t$(APRBUILD)/NWGNUtail.inc \\\n\t\t\t\t$(CUSTOM_INI) \\\n",
                    "rendered": {
                      "text": "LIB_NAME\t\t\t= $(basename $(notdir $(TARGET_lib)))\n$(LIB_NAME)_LIBLST_DEPENDS\t= \\\n\t\t\t\t$(FILES_lib_objs) \\\n\t\t\t\t$(APRBUILD)/NWGNUenvironment.inc \\\n\t\t\t\tNWGNUmakefile \\\n\t\t\t\t$(APRBUILD)/NWGNUtail.inc \\\n\t\t\t\t$(CUSTOM_INI) \\\n",
                      "markdown": "`LIB_NAME\t\t\t= $(basename $(notdir $(TARGET_lib)))\n$(LIB_NAME)_LIBLST_DEPENDS\t= \\\n\t\t\t\t$(FILES_lib_objs) \\\n\t\t\t\t$(APRBUILD)/NWGNUenvironment.inc \\\n\t\t\t\tNWGNUmakefile \\\n\t\t\t\t$(APRBUILD)/NWGNUtail.inc \\\n\t\t\t\t$(CUSTOM_INI) \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/NWGNUtail.inc"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 21,
                  "endLine": 82,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n$(NLM_NAME)_LINKOPT_DEPENDS\t= \\\n\t\t\t\t$(TARGET_lib) \\\n\t\t\t\t$(APRBUILD)/NWGNUenvironment.inc \\\n\t\t\t\tNWGNUmakefile \\\n\t\t\t\t$(APRBUILD)/NWGNUtail.inc \\\n\t\t\t\t$(CUSTOM_INI) \\\n",
                    "rendered": {
                      "text": "\n$(NLM_NAME)_LINKOPT_DEPENDS\t= \\\n\t\t\t\t$(TARGET_lib) \\\n\t\t\t\t$(APRBUILD)/NWGNUenvironment.inc \\\n\t\t\t\tNWGNUmakefile \\\n\t\t\t\t$(APRBUILD)/NWGNUtail.inc \\\n\t\t\t\t$(CUSTOM_INI) \\\n",
                      "markdown": "`\n$(NLM_NAME)_LINKOPT_DEPENDS\t= \\\n\t\t\t\t$(TARGET_lib) \\\n\t\t\t\t$(APRBUILD)/NWGNUenvironment.inc \\\n\t\t\t\tNWGNUmakefile \\\n\t\t\t\t$(APRBUILD)/NWGNUtail.inc \\\n\t\t\t\t$(CUSTOM_INI) \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/NWGNUtail.inc"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 21,
                  "endLine": 74,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\nCPPOPT_DEPENDS\t\t\t= \\\n\t\t\t\t$(APRBUILD)/NWGNUhead.inc \\\n\t\t\t\t$(APRBUILD)/NWGNUenvironment.inc \\\n\t\t\t\t$(APRBUILD)/NWGNUtail.inc \\\n\t\t\t\tNWGNUmakefile \\\n\t\t\t\t$(CUSTOM_INI) \\\n",
                    "rendered": {
                      "text": "\nCPPOPT_DEPENDS\t\t\t= \\\n\t\t\t\t$(APRBUILD)/NWGNUhead.inc \\\n\t\t\t\t$(APRBUILD)/NWGNUenvironment.inc \\\n\t\t\t\t$(APRBUILD)/NWGNUtail.inc \\\n\t\t\t\tNWGNUmakefile \\\n\t\t\t\t$(CUSTOM_INI) \\\n",
                      "markdown": "`\nCPPOPT_DEPENDS\t\t\t= \\\n\t\t\t\t$(APRBUILD)/NWGNUhead.inc \\\n\t\t\t\t$(APRBUILD)/NWGNUenvironment.inc \\\n\t\t\t\t$(APRBUILD)/NWGNUtail.inc \\\n\t\t\t\tNWGNUmakefile \\\n\t\t\t\t$(CUSTOM_INI) \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/NWGNUtail.inc"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 21,
                  "endLine": 66,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\nCCOPT_DEPENDS\t\t\t= \\\n\t\t\t\t$(APRBUILD)/NWGNUhead.inc \\\n\t\t\t\t$(APRBUILD)/NWGNUenvironment.inc \\\n\t\t\t\t$(APRBUILD)/NWGNUtail.inc \\\n\t\t\t\tNWGNUmakefile \\\n\t\t\t\t$(CUSTOM_INI) \\\n",
                    "rendered": {
                      "text": "\nCCOPT_DEPENDS\t\t\t= \\\n\t\t\t\t$(APRBUILD)/NWGNUhead.inc \\\n\t\t\t\t$(APRBUILD)/NWGNUenvironment.inc \\\n\t\t\t\t$(APRBUILD)/NWGNUtail.inc \\\n\t\t\t\tNWGNUmakefile \\\n\t\t\t\t$(CUSTOM_INI) \\\n",
                      "markdown": "`\nCCOPT_DEPENDS\t\t\t= \\\n\t\t\t\t$(APRBUILD)/NWGNUhead.inc \\\n\t\t\t\t$(APRBUILD)/NWGNUenvironment.inc \\\n\t\t\t\t$(APRBUILD)/NWGNUtail.inc \\\n\t\t\t\tNWGNUmakefile \\\n\t\t\t\t$(CUSTOM_INI) \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/NWGNUtail.inc"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 52,
                  "endLine": 2,
                  "endColumn": 56,
                  "snippet": {
                    "text": "#\n# This contains final targets and should be included at the end of any\n# NWGNUmakefile file\n#\n\n",
                    "rendered": {
                      "text": "#\n# This contains final targets and should be included at the end of any\n# NWGNUmakefile file\n#\n\n",
                      "markdown": "`#\n# This contains final targets and should be included at the end of any\n# NWGNUmakefile file\n#\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/gen-build.py"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 31,
                  "endLine": 235,
                  "endColumn": 36,
                  "snippet": {
                    "text": "      # print hdr, deps\n      start = len(deps)\n      for dep in list(deps.keys()):\n        deps.update(header_deps.get(dep, {}))\n      if len(deps) != start:\n        altered = 1\n\n",
                    "rendered": {
                      "text": "      # print hdr, deps\n      start = len(deps)\n      for dep in list(deps.keys()):\n        deps.update(header_deps.get(dep, {}))\n      if len(deps) != start:\n        altered = 1\n\n",
                      "markdown": "`      # print hdr, deps\n      start = len(deps)\n      for dep in list(deps.keys()):\n        deps.update(header_deps.get(dep, {}))\n      if len(deps) != start:\n        altered = 1\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/gen-build.py"
                },
                "region": {
                  "startLine": 202,
                  "startColumn": 24,
                  "endLine": 202,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    # what headers does this file include, along with the implied headers\n    deps = extract_deps(file, legal_deps)\n    for hdr in list(deps.keys()):\n      deps.update(h_deps.get(hdr, {}))\n\n    vals = list(deps.values())\n    vals.sort()\n",
                    "rendered": {
                      "text": "    # what headers does this file include, along with the implied headers\n    deps = extract_deps(file, legal_deps)\n    for hdr in list(deps.keys()):\n      deps.update(h_deps.get(hdr, {}))\n\n    vals = list(deps.values())\n    vals.sort()\n",
                      "markdown": "`    # what headers does this file include, along with the implied headers\n    deps = extract_deps(file, legal_deps)\n    for hdr in list(deps.keys()):\n      deps.update(h_deps.get(hdr, {}))\n\n    vals = list(deps.values())\n    vals.sort()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/gen-build.py"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 23,
                  "endLine": 161,
                  "endColumn": 28,
                  "snippet": {
                    "text": "      f.write('OBJECTS_%s = %s\\n' % (lib, flat_objects))\n\n      if parser.has_option(lib, 'target'):\n        target = parser.get(lib, 'target')\n        f.write('MODULE_%s = %s\\n' % (lib, target))\n        f.write('%s: $(OBJECTS_%s)\\n' % (target, lib))\n        f.write('\\t$(LINK_LIBRARY) -o $@ $(OBJECTS_%s) $(LDADD_%s)\\n' % (lib, lib))\n",
                    "rendered": {
                      "text": "      f.write('OBJECTS_%s = %s\\n' % (lib, flat_objects))\n\n      if parser.has_option(lib, 'target'):\n        target = parser.get(lib, 'target')\n        f.write('MODULE_%s = %s\\n' % (lib, target))\n        f.write('%s: $(OBJECTS_%s)\\n' % (target, lib))\n        f.write('\\t$(LINK_LIBRARY) -o $@ $(OBJECTS_%s) $(LDADD_%s)\\n' % (lib, lib))\n",
                      "markdown": "`      f.write('OBJECTS_%s = %s\\n' % (lib, flat_objects))\n\n      if parser.has_option(lib, 'target'):\n        target = parser.get(lib, 'target')\n        f.write('MODULE_%s = %s\\n' % (lib, target))\n        f.write('%s: $(OBJECTS_%s)\\n' % (target, lib))\n        f.write('\\t$(LINK_LIBRARY) -o $@ $(OBJECTS_%s) $(LDADD_%s)\\n' % (lib, lib))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/gen-build.py"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 30,
                  "endLine": 155,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    libs = parser.get('options', 'libraries')\n\n    for lib in libs.split():\n      files = get_files(parser.get(lib, 'paths'))\n      objects, _unused = write_objects(f, legal_deps, h_deps, files)\n      flat_objects = \" \".join(objects)\n      f.write('OBJECTS_%s = %s\\n' % (lib, flat_objects))\n",
                    "rendered": {
                      "text": "    libs = parser.get('options', 'libraries')\n\n    for lib in libs.split():\n      files = get_files(parser.get(lib, 'paths'))\n      objects, _unused = write_objects(f, legal_deps, h_deps, files)\n      flat_objects = \" \".join(objects)\n      f.write('OBJECTS_%s = %s\\n' % (lib, flat_objects))\n",
                      "markdown": "`    libs = parser.get('options', 'libraries')\n\n    for lib in libs.split():\n      files = get_files(parser.get(lib, 'paths'))\n      objects, _unused = write_objects(f, legal_deps, h_deps, files)\n      flat_objects = \" \".join(objects)\n      f.write('OBJECTS_%s = %s\\n' % (lib, flat_objects))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/gen-build.py"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 17,
                  "endLine": 152,
                  "endColumn": 22,
                  "snippet": {
                    "text": "      f.write('\\n')\n\n  if parser.has_option('options', 'libraries'):\n    libs = parser.get('options', 'libraries')\n\n    for lib in libs.split():\n      files = get_files(parser.get(lib, 'paths'))\n",
                    "rendered": {
                      "text": "      f.write('\\n')\n\n  if parser.has_option('options', 'libraries'):\n    libs = parser.get('options', 'libraries')\n\n    for lib in libs.split():\n      files = get_files(parser.get(lib, 'paths'))\n",
                      "markdown": "`      f.write('\\n')\n\n  if parser.has_option('options', 'libraries'):\n    libs = parser.get('options', 'libraries')\n\n    for lib in libs.split():\n      files = get_files(parser.get(lib, 'paths'))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/gen-build.py"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 23,
                  "endLine": 144,
                  "endColumn": 28,
                  "snippet": {
                    "text": "      f.write('OBJECTS_%s = %s\\n' % (mod, flat_objects))\n\n      if parser.has_option(mod, 'target'):\n        target = parser.get(mod, 'target')\n        f.write('MODULE_%s = %s\\n' % (mod, target))\n        f.write('%s: %s\\n' % (target, flat_objects))\n        f.write('\\t$(LINK_MODULE) -o $@ $(OBJECTS_%s) $(LDADD_%s)\\n' % (mod, mod))\n",
                    "rendered": {
                      "text": "      f.write('OBJECTS_%s = %s\\n' % (mod, flat_objects))\n\n      if parser.has_option(mod, 'target'):\n        target = parser.get(mod, 'target')\n        f.write('MODULE_%s = %s\\n' % (mod, target))\n        f.write('%s: %s\\n' % (target, flat_objects))\n        f.write('\\t$(LINK_MODULE) -o $@ $(OBJECTS_%s) $(LDADD_%s)\\n' % (mod, mod))\n",
                      "markdown": "`      f.write('OBJECTS_%s = %s\\n' % (mod, flat_objects))\n\n      if parser.has_option(mod, 'target'):\n        target = parser.get(mod, 'target')\n        f.write('MODULE_%s = %s\\n' % (mod, target))\n        f.write('%s: %s\\n' % (target, flat_objects))\n        f.write('\\t$(LINK_MODULE) -o $@ $(OBJECTS_%s) $(LDADD_%s)\\n' % (mod, mod))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/gen-build.py"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 30,
                  "endLine": 138,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    modules = parser.get('options', 'modules')\n\n    for mod in modules.split():\n      files = get_files(parser.get(mod, 'paths'))\n      objects, _unused = write_objects(f, legal_deps, h_deps, files)\n      flat_objects = \" \".join(objects)\n      f.write('OBJECTS_%s = %s\\n' % (mod, flat_objects))\n",
                    "rendered": {
                      "text": "    modules = parser.get('options', 'modules')\n\n    for mod in modules.split():\n      files = get_files(parser.get(mod, 'paths'))\n      objects, _unused = write_objects(f, legal_deps, h_deps, files)\n      flat_objects = \" \".join(objects)\n      f.write('OBJECTS_%s = %s\\n' % (mod, flat_objects))\n",
                      "markdown": "`    modules = parser.get('options', 'modules')\n\n    for mod in modules.split():\n      files = get_files(parser.get(mod, 'paths'))\n      objects, _unused = write_objects(f, legal_deps, h_deps, files)\n      flat_objects = \" \".join(objects)\n      f.write('OBJECTS_%s = %s\\n' % (mod, flat_objects))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/gen-build.py"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 20,
                  "endLine": 135,
                  "endColumn": 25,
                  "snippet": {
                    "text": "  f.write('SOURCE_DIRS = %s $(EXTRA_SOURCE_DIRS)\\n\\n' % \" \".join(dirs.keys()))\n\n  if parser.has_option('options', 'modules'):\n    modules = parser.get('options', 'modules')\n\n    for mod in modules.split():\n      files = get_files(parser.get(mod, 'paths'))\n",
                    "rendered": {
                      "text": "  f.write('SOURCE_DIRS = %s $(EXTRA_SOURCE_DIRS)\\n\\n' % \" \".join(dirs.keys()))\n\n  if parser.has_option('options', 'modules'):\n    modules = parser.get('options', 'modules')\n\n    for mod in modules.split():\n      files = get_files(parser.get(mod, 'paths'))\n",
                      "markdown": "`  f.write('SOURCE_DIRS = %s $(EXTRA_SOURCE_DIRS)\\n\\n' % \" \".join(dirs.keys()))\n\n  if parser.has_option('options', 'modules'):\n    modules = parser.get('options', 'modules')\n\n    for mod in modules.split():\n      files = get_files(parser.get(mod, 'paths'))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/gen-build.py"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 24,
                  "endLine": 97,
                  "endColumn": 29,
                  "snippet": {
                    "text": "            inherit_parent[inherit_files[0]] = []\n          inherit_parent[inherit_files[0]].append(inherit_line)\n\n    for subdir in parser.get('options', 'platform_dirs').split():\n      path = '%s/%s' % (subdir, platform)\n      if not os.path.exists(path):\n        # this subdir doesn't have a subdir for this platform, so we'll\n",
                    "rendered": {
                      "text": "            inherit_parent[inherit_files[0]] = []\n          inherit_parent[inherit_files[0]].append(inherit_line)\n\n    for subdir in parser.get('options', 'platform_dirs').split():\n      path = '%s/%s' % (subdir, platform)\n      if not os.path.exists(path):\n        # this subdir doesn't have a subdir for this platform, so we'll\n",
                      "markdown": "`            inherit_parent[inherit_files[0]] = []\n          inherit_parent[inherit_files[0]].append(inherit_line)\n\n    for subdir in parser.get('options', 'platform_dirs').split():\n      path = '%s/%s' % (subdir, platform)\n      if not os.path.exists(path):\n        # this subdir doesn't have a subdir for this platform, so we'll\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/gen-build.py"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 26,
                  "endLine": 67,
                  "endColumn": 31,
                  "snippet": {
                    "text": "  f.write('# DO NOT EDIT. AUTOMATICALLY GENERATED.\\n\\n')\n\n  # write out the platform-independent files\n  files = get_files(parser.get('options', 'paths'))\n  objects, dirs = write_objects(f, legal_deps, h_deps, files)\n  f.write('\\nOBJECTS_all = %s\\n\\n' % \" \".join(objects))\n\n",
                    "rendered": {
                      "text": "  f.write('# DO NOT EDIT. AUTOMATICALLY GENERATED.\\n\\n')\n\n  # write out the platform-independent files\n  files = get_files(parser.get('options', 'paths'))\n  objects, dirs = write_objects(f, legal_deps, h_deps, files)\n  f.write('\\nOBJECTS_all = %s\\n\\n' % \" \".join(objects))\n\n",
                      "markdown": "`  f.write('# DO NOT EDIT. AUTOMATICALLY GENERATED.\\n\\n')\n\n  # write out the platform-independent files\n  files = get_files(parser.get('options', 'paths'))\n  objects, dirs = write_objects(f, legal_deps, h_deps, files)\n  f.write('\\nOBJECTS_all = %s\\n\\n' % \" \".join(objects))\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/gen-build.py"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 28,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "  else:\n    dsp_file = None\n\n  headers = get_files(parser.get('options', 'headers'))\n\n  # compute the relevant headers, along with the implied includes\n  legal_deps = { }\n",
                    "rendered": {
                      "text": "  else:\n    dsp_file = None\n\n  headers = get_files(parser.get('options', 'headers'))\n\n  # compute the relevant headers, along with the implied includes\n  legal_deps = { }\n",
                      "markdown": "`  else:\n    dsp_file = None\n\n  headers = get_files(parser.get('options', 'headers'))\n\n  # compute the relevant headers, along with the implied includes\n  legal_deps = { }\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/gen-build.py"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 21,
                  "endLine": 47,
                  "endColumn": 26,
                  "snippet": {
                    "text": "  parser.read('build.conf')\n\n  if parser.has_option('options', 'dsp'):\n    dsp_file = parser.get('options', 'dsp')\n  else:\n    dsp_file = None\n\n",
                    "rendered": {
                      "text": "  parser.read('build.conf')\n\n  if parser.has_option('options', 'dsp'):\n    dsp_file = parser.get('options', 'dsp')\n  else:\n    dsp_file = None\n\n",
                      "markdown": "`  parser.read('build.conf')\n\n  if parser.has_option('options', 'dsp'):\n    dsp_file = parser.get('options', 'dsp')\n  else:\n    dsp_file = None\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/gen-build.py"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 3,
                  "endLine": 176,
                  "endColumn": 9,
                  "snippet": {
                    "text": "      alldirs[d] = None\n      d = os.path.dirname(d)\n\n  # Sort so 'foo' is before 'foo/bar'\n  keys = list(alldirs.keys())\n  keys.sort()\n  f.write('BUILD_DIRS = %s\\n\\n' % \" \".join(keys))\n",
                    "rendered": {
                      "text": "      alldirs[d] = None\n      d = os.path.dirname(d)\n\n  # Sort so 'foo' is before 'foo/bar'\n  keys = list(alldirs.keys())\n  keys.sort()\n  f.write('BUILD_DIRS = %s\\n\\n' % \" \".join(keys))\n",
                      "markdown": "`      alldirs[d] = None\n      d = os.path.dirname(d)\n\n  # Sort so 'foo' is before 'foo/bar'\n  keys = list(alldirs.keys())\n  keys.sort()\n  f.write('BUILD_DIRS = %s\\n\\n' % \" \".join(keys))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_network.m4"
                },
                "region": {
                  "startLine": 570,
                  "startColumn": 62,
                  "endLine": 570,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\nif test \"$apr_cv_tcp_nodelay_with_cork\" = \"yes\"; then\n  AC_DEFINE([HAVE_TCP_NODELAY_WITH_CORK], 1,\n            [Define if TCP_NODELAY and TCP_CORK can be enabled at the same time])\nfi\n])\n\n",
                    "rendered": {
                      "text": "\nif test \"$apr_cv_tcp_nodelay_with_cork\" = \"yes\"; then\n  AC_DEFINE([HAVE_TCP_NODELAY_WITH_CORK], 1,\n            [Define if TCP_NODELAY and TCP_CORK can be enabled at the same time])\nfi\n])\n\n",
                      "markdown": "`\nif test \"$apr_cv_tcp_nodelay_with_cork\" = \"yes\"; then\n  AC_DEFINE([HAVE_TCP_NODELAY_WITH_CORK], 1,\n            [Define if TCP_NODELAY and TCP_CORK can be enabled at the same time])\nfi\n])\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_network.m4"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 54,
                  "endLine": 8,
                  "snippet": {
                    "text": "dnl this work for additional information regarding copyright ownership.\ndnl The ASF licenses this file to You under the Apache License, Version 2.0\ndnl (the \"License\"); you may not use this file except in compliance with\ndnl the License.  You may obtain a copy of the License at\ndnl\ndnl     http://www.apache.org/licenses/LICENSE-2.0\ndnl\ndnl Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "dnl this work for additional information regarding copyright ownership.\ndnl The ASF licenses this file to You under the Apache License, Version 2.0\ndnl (the \"License\"); you may not use this file except in compliance with\ndnl the License.  You may obtain a copy of the License at\ndnl\ndnl     http://www.apache.org/licenses/LICENSE-2.0\ndnl\ndnl Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`dnl this work for additional information regarding copyright ownership.\ndnl The ASF licenses this file to You under the Apache License, Version 2.0\ndnl (the \"License\"); you may not use this file except in compliance with\ndnl the License.  You may obtain a copy of the License at\ndnl\ndnl     http://www.apache.org/licenses/LICENSE-2.0\ndnl\ndnl Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_network.m4"
                },
                "region": {
                  "startLine": 677,
                  "startColumn": 22,
                  "endLine": 677,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        exit(1);\n    }\n    sa_len = sizeof sa;\n    /* 1 second select timeout */\n    tv.tv_sec = 1;\n    tv.tv_usec = 0;\n    /* Set up fd set */\n",
                    "rendered": {
                      "text": "        exit(1);\n    }\n    sa_len = sizeof sa;\n    /* 1 second select timeout */\n    tv.tv_sec = 1;\n    tv.tv_usec = 0;\n    /* Set up fd set */\n",
                      "markdown": "`        exit(1);\n    }\n    sa_len = sizeof sa;\n    /* 1 second select timeout */\n    tv.tv_sec = 1;\n    tv.tv_usec = 0;\n    /* Set up fd set */\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_network.m4"
                },
                "region": {
                  "startLine": 641,
                  "startColumn": 6,
                  "endLine": 641,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        perror(\"bind for ephemeral port\");\n        exit(1);\n    }\n    /* find ephemeral port */\n    sa_len = sizeof(sa);\n    rc = getsockname(listen_s, (struct sockaddr *)&sa, &sa_len);\n    if (rc < 0) {\n",
                    "rendered": {
                      "text": "        perror(\"bind for ephemeral port\");\n        exit(1);\n    }\n    /* find ephemeral port */\n    sa_len = sizeof(sa);\n    rc = getsockname(listen_s, (struct sockaddr *)&sa, &sa_len);\n    if (rc < 0) {\n",
                      "markdown": "`        perror(\"bind for ephemeral port\");\n        exit(1);\n    }\n    /* find ephemeral port */\n    sa_len = sizeof(sa);\n    rc = getsockname(listen_s, (struct sockaddr *)&sa, &sa_len);\n    if (rc < 0) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/apr_network.m4"
                },
                "region": {
                  "startLine": 459,
                  "startColumn": 6,
                  "endLine": 459,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        perror(\"bind for ephemeral port\");\n        exit(1);\n    }\n    /* find ephemeral port */\n    sa_len = sizeof(sa);\n    rc = getsockname(listen_s, (struct sockaddr *)&sa, &sa_len);\n    if (rc < 0) {\n",
                    "rendered": {
                      "text": "        perror(\"bind for ephemeral port\");\n        exit(1);\n    }\n    /* find ephemeral port */\n    sa_len = sizeof(sa);\n    rc = getsockname(listen_s, (struct sockaddr *)&sa, &sa_len);\n    if (rc < 0) {\n",
                      "markdown": "`        perror(\"bind for ephemeral port\");\n        exit(1);\n    }\n    /* find ephemeral port */\n    sa_len = sizeof(sa);\n    rc = getsockname(listen_s, (struct sockaddr *)&sa, &sa_len);\n    if (rc < 0) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/locks/unix/proc_mutex.c"
                },
                "region": {
                  "startLine": 1009,
                  "startColumn": 13,
                  "endLine": 1009,
                  "endColumn": 20,
                  "snippet": {
                    "text": "#if APR_HAS_FCNTL_SERIALIZE\n\nstatic struct flock proc_mutex_lock_it;\nstatic struct flock proc_mutex_unlock_it;\n\nstatic apr_status_t proc_mutex_fcntl_release(apr_proc_mutex_t *);\n\n",
                    "rendered": {
                      "text": "#if APR_HAS_FCNTL_SERIALIZE\n\nstatic struct flock proc_mutex_lock_it;\nstatic struct flock proc_mutex_unlock_it;\n\nstatic apr_status_t proc_mutex_fcntl_release(apr_proc_mutex_t *);\n\n",
                      "markdown": "`#if APR_HAS_FCNTL_SERIALIZE\n\nstatic struct flock proc_mutex_lock_it;\nstatic struct flock proc_mutex_unlock_it;\n\nstatic apr_status_t proc_mutex_fcntl_release(apr_proc_mutex_t *);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/locks/unix/proc_mutex.c"
                },
                "region": {
                  "startLine": 1008,
                  "startColumn": 13,
                  "endLine": 1008,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n#if APR_HAS_FCNTL_SERIALIZE\n\nstatic struct flock proc_mutex_lock_it;\nstatic struct flock proc_mutex_unlock_it;\n\nstatic apr_status_t proc_mutex_fcntl_release(apr_proc_mutex_t *);\n",
                    "rendered": {
                      "text": "\n#if APR_HAS_FCNTL_SERIALIZE\n\nstatic struct flock proc_mutex_lock_it;\nstatic struct flock proc_mutex_unlock_it;\n\nstatic apr_status_t proc_mutex_fcntl_release(apr_proc_mutex_t *);\n",
                      "markdown": "`\n#if APR_HAS_FCNTL_SERIALIZE\n\nstatic struct flock proc_mutex_lock_it;\nstatic struct flock proc_mutex_unlock_it;\n\nstatic apr_status_t proc_mutex_fcntl_release(apr_proc_mutex_t *);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/locks/unix/proc_mutex.c"
                },
                "region": {
                  "startLine": 812,
                  "startColumn": 11,
                  "endLine": 812,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        {\n            struct timespec abstime;\n\n            timeout += apr_time_now();\n            abstime.tv_sec = apr_time_sec(timeout);\n            abstime.tv_nsec = apr_time_usec(timeout) * 1000; /* nanoseconds */\n\n",
                    "rendered": {
                      "text": "        {\n            struct timespec abstime;\n\n            timeout += apr_time_now();\n            abstime.tv_sec = apr_time_sec(timeout);\n            abstime.tv_nsec = apr_time_usec(timeout) * 1000; /* nanoseconds */\n\n",
                      "markdown": "`        {\n            struct timespec abstime;\n\n            timeout += apr_time_now();\n            abstime.tv_sec = apr_time_sec(timeout);\n            abstime.tv_nsec = apr_time_usec(timeout) * 1000; /* nanoseconds */\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/locks/unix/proc_mutex.c"
                },
                "region": {
                  "startLine": 736,
                  "startColumn": 15,
                  "endLine": 736,
                  "endColumn": 24,
                  "snippet": {
                    "text": "            struct timespec abstime;\n\n            if (timeout > 0) {\n                timeout += apr_time_now();\n                abstime.tv_sec = apr_time_sec(timeout);\n                abstime.tv_nsec = apr_time_usec(timeout) * 1000; /* nanoseconds */\n            }\n",
                    "rendered": {
                      "text": "            struct timespec abstime;\n\n            if (timeout > 0) {\n                timeout += apr_time_now();\n                abstime.tv_sec = apr_time_sec(timeout);\n                abstime.tv_nsec = apr_time_usec(timeout) * 1000; /* nanoseconds */\n            }\n",
                      "markdown": "`            struct timespec abstime;\n\n            if (timeout > 0) {\n                timeout += apr_time_now();\n                abstime.tv_sec = apr_time_sec(timeout);\n                abstime.tv_nsec = apr_time_usec(timeout) * 1000; /* nanoseconds */\n            }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/locks/unix/proc_mutex.c"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 7,
                  "endLine": 230,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        int rc;\n        struct timespec abstime;\n\n        timeout += apr_time_now();\n        abstime.tv_sec = apr_time_sec(timeout);\n        abstime.tv_nsec = apr_time_usec(timeout) * 1000; /* nanoseconds */\n\n",
                    "rendered": {
                      "text": "        int rc;\n        struct timespec abstime;\n\n        timeout += apr_time_now();\n        abstime.tv_sec = apr_time_sec(timeout);\n        abstime.tv_nsec = apr_time_usec(timeout) * 1000; /* nanoseconds */\n\n",
                      "markdown": "`        int rc;\n        struct timespec abstime;\n\n        timeout += apr_time_now();\n        abstime.tv_sec = apr_time_sec(timeout);\n        abstime.tv_nsec = apr_time_usec(timeout) * 1000; /* nanoseconds */\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/locks/unix/proc_mutex.c"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 11,
                  "endLine": 85,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        }\n        else {\n            apr_sleep(timeout);\n            timeout = 0;\n        }\n    }\n    return rv;\n",
                    "rendered": {
                      "text": "        }\n        else {\n            apr_sleep(timeout);\n            timeout = 0;\n        }\n    }\n    return rv;\n",
                      "markdown": "`        }\n        else {\n            apr_sleep(timeout);\n            timeout = 0;\n        }\n    }\n    return rv;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/locks/unix/proc_mutex.c"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 11,
                  "endLine": 81,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        }\n        if (timeout > SLEEP_TIME) {\n            apr_sleep(SLEEP_TIME);\n            timeout -= SLEEP_TIME;\n        }\n        else {\n            apr_sleep(timeout);\n",
                    "rendered": {
                      "text": "        }\n        if (timeout > SLEEP_TIME) {\n            apr_sleep(SLEEP_TIME);\n            timeout -= SLEEP_TIME;\n        }\n        else {\n            apr_sleep(timeout);\n",
                      "markdown": "`        }\n        if (timeout > SLEEP_TIME) {\n            apr_sleep(SLEEP_TIME);\n            timeout -= SLEEP_TIME;\n        }\n        else {\n            apr_sleep(timeout);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/locks/unix/thread_mutex.c"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 7,
                  "endLine": 235,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    else {\n        struct timespec abstime;\n\n        timeout += apr_time_now();\n        abstime.tv_sec = apr_time_sec(timeout);\n        abstime.tv_nsec = apr_time_usec(timeout) * 1000; /* nanoseconds */\n\n",
                    "rendered": {
                      "text": "    else {\n        struct timespec abstime;\n\n        timeout += apr_time_now();\n        abstime.tv_sec = apr_time_sec(timeout);\n        abstime.tv_nsec = apr_time_usec(timeout) * 1000; /* nanoseconds */\n\n",
                      "markdown": "`    else {\n        struct timespec abstime;\n\n        timeout += apr_time_now();\n        abstime.tv_sec = apr_time_sec(timeout);\n        abstime.tv_nsec = apr_time_usec(timeout) * 1000; /* nanoseconds */\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/locks/unix/global_mutex.c"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 15,
                  "endLine": 160,
                  "endColumn": 24,
                  "snippet": {
                    "text": "        if (expiry) {\n            timeout = expiry - apr_time_now();\n            if (timeout < 0) {\n                timeout = 0;\n            }\n        }\n    }\n",
                    "rendered": {
                      "text": "        if (expiry) {\n            timeout = expiry - apr_time_now();\n            if (timeout < 0) {\n                timeout = 0;\n            }\n        }\n    }\n",
                      "markdown": "`        if (expiry) {\n            timeout = expiry - apr_time_now();\n            if (timeout < 0) {\n                timeout = 0;\n            }\n        }\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/locks/unix/global_mutex.c"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 11,
                  "endLine": 158,
                  "endColumn": 20,
                  "snippet": {
                    "text": "            return rv;\n        }\n        if (expiry) {\n            timeout = expiry - apr_time_now();\n            if (timeout < 0) {\n                timeout = 0;\n            }\n",
                    "rendered": {
                      "text": "            return rv;\n        }\n        if (expiry) {\n            timeout = expiry - apr_time_now();\n            if (timeout < 0) {\n                timeout = 0;\n            }\n",
                      "markdown": "`            return rv;\n        }\n        if (expiry) {\n            timeout = expiry - apr_time_now();\n            if (timeout < 0) {\n                timeout = 0;\n            }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/locks/netware/thread_cond.c"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 17,
                  "endLine": 76,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        rc = NXCondWait(cond->cond, mutex->mutex);\n    }\n    else {\n        timeout = timeout * 1000 / NXGetSystemTick();\n        rc = NXCondTimedWait(cond->cond, mutex->mutex, timeout);\n        if (rc == NX_ETIMEDOUT) {\n            return APR_TIMEUP;\n",
                    "rendered": {
                      "text": "        rc = NXCondWait(cond->cond, mutex->mutex);\n    }\n    else {\n        timeout = timeout * 1000 / NXGetSystemTick();\n        rc = NXCondTimedWait(cond->cond, mutex->mutex, timeout);\n        if (rc == NX_ETIMEDOUT) {\n            return APR_TIMEUP;\n",
                      "markdown": "`        rc = NXCondWait(cond->cond, mutex->mutex);\n    }\n    else {\n        timeout = timeout * 1000 / NXGetSystemTick();\n        rc = NXCondTimedWait(cond->cond, mutex->mutex, timeout);\n        if (rc == NX_ETIMEDOUT) {\n            return APR_TIMEUP;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/locks/netware/thread_cond.c"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 7,
                  "endLine": 76,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        rc = NXCondWait(cond->cond, mutex->mutex);\n    }\n    else {\n        timeout = timeout * 1000 / NXGetSystemTick();\n        rc = NXCondTimedWait(cond->cond, mutex->mutex, timeout);\n        if (rc == NX_ETIMEDOUT) {\n            return APR_TIMEUP;\n",
                    "rendered": {
                      "text": "        rc = NXCondWait(cond->cond, mutex->mutex);\n    }\n    else {\n        timeout = timeout * 1000 / NXGetSystemTick();\n        rc = NXCondTimedWait(cond->cond, mutex->mutex, timeout);\n        if (rc == NX_ETIMEDOUT) {\n            return APR_TIMEUP;\n",
                      "markdown": "`        rc = NXCondWait(cond->cond, mutex->mutex);\n    }\n    else {\n        timeout = timeout * 1000 / NXGetSystemTick();\n        rc = NXCondTimedWait(cond->cond, mutex->mutex, timeout);\n        if (rc == NX_ETIMEDOUT) {\n            return APR_TIMEUP;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/threadproc/os2/proc.c"
                },
                "region": {
                  "startLine": 659,
                  "startColumn": 60,
                  "endLine": 659,
                  "endColumn": 68,
                  "snippet": {
                    "text": "\nAPR_DECLARE(apr_status_t) apr_procattr_user_set(apr_procattr_t *attr,\n                                                const char *username,\n                                                const char *password)\n{\n    return APR_ENOTIMPL;\n}\n",
                    "rendered": {
                      "text": "\nAPR_DECLARE(apr_status_t) apr_procattr_user_set(apr_procattr_t *attr,\n                                                const char *username,\n                                                const char *password)\n{\n    return APR_ENOTIMPL;\n}\n",
                      "markdown": "`\nAPR_DECLARE(apr_status_t) apr_procattr_user_set(apr_procattr_t *attr,\n                                                const char *username,\n                                                const char *password)\n{\n    return APR_ENOTIMPL;\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/strings/apr_cpystrn.c"
                },
                "region": {
                  "startLine": 278,
                  "startColumn": 7,
                  "endLine": 278,
                  "endColumn": 13,
                  "snippet": {
                    "text": "            return 0;           /*   Match up to n characters */\n        if (!(*p && *q))\n            return *p - *q;\n        diff = apr_tolower(*p) - apr_tolower(*q);\n        if (diff)\n            return diff;\n    }\n",
                    "rendered": {
                      "text": "            return 0;           /*   Match up to n characters */\n        if (!(*p && *q))\n            return *p - *q;\n        diff = apr_tolower(*p) - apr_tolower(*q);\n        if (diff)\n            return diff;\n    }\n",
                      "markdown": "`            return 0;           /*   Match up to n characters */\n        if (!(*p && *q))\n            return *p - *q;\n        diff = apr_tolower(*p) - apr_tolower(*q);\n        if (diff)\n            return diff;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/strings/apr_cpystrn.c"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 11,
                  "endLine": 253,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    const char *p = a;\n    const char *q = b;\n    for (p = a, q = b; *p && *q; p++, q++) {\n        int diff = apr_tolower(*p) - apr_tolower(*q);\n        if (diff)\n            return diff;\n    }\n",
                    "rendered": {
                      "text": "    const char *p = a;\n    const char *q = b;\n    for (p = a, q = b; *p && *q; p++, q++) {\n        int diff = apr_tolower(*p) - apr_tolower(*q);\n        if (diff)\n            return diff;\n    }\n",
                      "markdown": "`    const char *p = a;\n    const char *q = b;\n    for (p = a, q = b; *p && *q; p++, q++) {\n        int diff = apr_tolower(*p) - apr_tolower(*q);\n        if (diff)\n            return diff;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/strings/apr_cpystrn.c"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 44,
                  "endLine": 179,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        DETERMINE_NEXTSTRING(cp, isquoted);\n        cp++;\n        (*argv_out)[argnum] = apr_palloc(token_context, cp - ct);\n        apr_cpystrn((*argv_out)[argnum], ct, cp - ct);\n        cleaned = dirty = (*argv_out)[argnum];\n        REMOVE_ESCAPE_CHARS(cleaned, dirty, escaped);\n    }\n",
                    "rendered": {
                      "text": "        DETERMINE_NEXTSTRING(cp, isquoted);\n        cp++;\n        (*argv_out)[argnum] = apr_palloc(token_context, cp - ct);\n        apr_cpystrn((*argv_out)[argnum], ct, cp - ct);\n        cleaned = dirty = (*argv_out)[argnum];\n        REMOVE_ESCAPE_CHARS(cleaned, dirty, escaped);\n    }\n",
                      "markdown": "`        DETERMINE_NEXTSTRING(cp, isquoted);\n        cp++;\n        (*argv_out)[argnum] = apr_palloc(token_context, cp - ct);\n        apr_cpystrn((*argv_out)[argnum], ct, cp - ct);\n        cleaned = dirty = (*argv_out)[argnum];\n        REMOVE_ESCAPE_CHARS(cleaned, dirty, escaped);\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/strings/apr_cpystrn.c"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 55,
                  "endLine": 178,
                  "endColumn": 59,
                  "snippet": {
                    "text": "        ct = cp;\n        DETERMINE_NEXTSTRING(cp, isquoted);\n        cp++;\n        (*argv_out)[argnum] = apr_palloc(token_context, cp - ct);\n        apr_cpystrn((*argv_out)[argnum], ct, cp - ct);\n        cleaned = dirty = (*argv_out)[argnum];\n        REMOVE_ESCAPE_CHARS(cleaned, dirty, escaped);\n",
                    "rendered": {
                      "text": "        ct = cp;\n        DETERMINE_NEXTSTRING(cp, isquoted);\n        cp++;\n        (*argv_out)[argnum] = apr_palloc(token_context, cp - ct);\n        apr_cpystrn((*argv_out)[argnum], ct, cp - ct);\n        cleaned = dirty = (*argv_out)[argnum];\n        REMOVE_ESCAPE_CHARS(cleaned, dirty, escaped);\n",
                      "markdown": "`        ct = cp;\n        DETERMINE_NEXTSTRING(cp, isquoted);\n        cp++;\n        (*argv_out)[argnum] = apr_palloc(token_context, cp - ct);\n        apr_cpystrn((*argv_out)[argnum], ct, cp - ct);\n        cleaned = dirty = (*argv_out)[argnum];\n        REMOVE_ESCAPE_CHARS(cleaned, dirty, escaped);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/strings/apr_cpystrn.c"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 3,
                  "endLine": 149,
                  "endColumn": 7,
                  "snippet": {
                    "text": "    } \\\n    *cleaned = 0;        /* last line of macro... */\n\n    cp = arg_str;\n    SKIP_WHITESPACE(cp);\n    ct = cp;\n\n",
                    "rendered": {
                      "text": "    } \\\n    *cleaned = 0;        /* last line of macro... */\n\n    cp = arg_str;\n    SKIP_WHITESPACE(cp);\n    ct = cp;\n\n",
                      "markdown": "`    } \\\n    *cleaned = 0;        /* last line of macro... */\n\n    cp = arg_str;\n    SKIP_WHITESPACE(cp);\n    ct = cp;\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 27,
                  "endLine": 195,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    APR_ASSERT_FAILURE(tc, \"wrong bcrypt password should not validate\",\n                       apr_password_validate(pass2, hash));\n    APR_ASSERT_SUCCESS(tc, \"bcrypt password validated\",\n                       apr_password_validate(pass3, hash2));\n}\n\n\n",
                    "rendered": {
                      "text": "    APR_ASSERT_FAILURE(tc, \"wrong bcrypt password should not validate\",\n                       apr_password_validate(pass2, hash));\n    APR_ASSERT_SUCCESS(tc, \"bcrypt password validated\",\n                       apr_password_validate(pass3, hash2));\n}\n\n\n",
                      "markdown": "`    APR_ASSERT_FAILURE(tc, \"wrong bcrypt password should not validate\",\n                       apr_password_validate(pass2, hash));\n    APR_ASSERT_SUCCESS(tc, \"bcrypt password validated\",\n                       apr_password_validate(pass3, hash2));\n}\n\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 35,
                  "endLine": 194,
                  "endColumn": 43,
                  "snippet": {
                    "text": "                       apr_password_validate(pass, hash));\n    APR_ASSERT_FAILURE(tc, \"wrong bcrypt password should not validate\",\n                       apr_password_validate(pass2, hash));\n    APR_ASSERT_SUCCESS(tc, \"bcrypt password validated\",\n                       apr_password_validate(pass3, hash2));\n}\n\n",
                    "rendered": {
                      "text": "                       apr_password_validate(pass, hash));\n    APR_ASSERT_FAILURE(tc, \"wrong bcrypt password should not validate\",\n                       apr_password_validate(pass2, hash));\n    APR_ASSERT_SUCCESS(tc, \"bcrypt password validated\",\n                       apr_password_validate(pass3, hash2));\n}\n\n",
                      "markdown": "`                       apr_password_validate(pass, hash));\n    APR_ASSERT_FAILURE(tc, \"wrong bcrypt password should not validate\",\n                       apr_password_validate(pass2, hash));\n    APR_ASSERT_SUCCESS(tc, \"bcrypt password validated\",\n                       apr_password_validate(pass3, hash2));\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 27,
                  "endLine": 193,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    APR_ASSERT_SUCCESS(tc, \"bcrypt password validated\",\n                       apr_password_validate(pass, hash));\n    APR_ASSERT_FAILURE(tc, \"wrong bcrypt password should not validate\",\n                       apr_password_validate(pass2, hash));\n    APR_ASSERT_SUCCESS(tc, \"bcrypt password validated\",\n                       apr_password_validate(pass3, hash2));\n}\n",
                    "rendered": {
                      "text": "    APR_ASSERT_SUCCESS(tc, \"bcrypt password validated\",\n                       apr_password_validate(pass, hash));\n    APR_ASSERT_FAILURE(tc, \"wrong bcrypt password should not validate\",\n                       apr_password_validate(pass2, hash));\n    APR_ASSERT_SUCCESS(tc, \"bcrypt password validated\",\n                       apr_password_validate(pass3, hash2));\n}\n",
                      "markdown": "`    APR_ASSERT_SUCCESS(tc, \"bcrypt password validated\",\n                       apr_password_validate(pass, hash));\n    APR_ASSERT_FAILURE(tc, \"wrong bcrypt password should not validate\",\n                       apr_password_validate(pass2, hash));\n    APR_ASSERT_SUCCESS(tc, \"bcrypt password validated\",\n                       apr_password_validate(pass3, hash2));\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 41,
                  "endLine": 192,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\n    APR_ASSERT_SUCCESS(tc, \"bcrypt password validated\",\n                       apr_password_validate(pass, hash));\n    APR_ASSERT_FAILURE(tc, \"wrong bcrypt password should not validate\",\n                       apr_password_validate(pass2, hash));\n    APR_ASSERT_SUCCESS(tc, \"bcrypt password validated\",\n                       apr_password_validate(pass3, hash2));\n",
                    "rendered": {
                      "text": "\n    APR_ASSERT_SUCCESS(tc, \"bcrypt password validated\",\n                       apr_password_validate(pass, hash));\n    APR_ASSERT_FAILURE(tc, \"wrong bcrypt password should not validate\",\n                       apr_password_validate(pass2, hash));\n    APR_ASSERT_SUCCESS(tc, \"bcrypt password validated\",\n                       apr_password_validate(pass3, hash2));\n",
                      "markdown": "`\n    APR_ASSERT_SUCCESS(tc, \"bcrypt password validated\",\n                       apr_password_validate(pass, hash));\n    APR_ASSERT_FAILURE(tc, \"wrong bcrypt password should not validate\",\n                       apr_password_validate(pass2, hash));\n    APR_ASSERT_SUCCESS(tc, \"bcrypt password validated\",\n                       apr_password_validate(pass3, hash2));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 27,
                  "endLine": 191,
                  "endColumn": 35,
                  "snippet": {
                    "text": "                                         sizeof(hash)));\n\n    APR_ASSERT_SUCCESS(tc, \"bcrypt password validated\",\n                       apr_password_validate(pass, hash));\n    APR_ASSERT_FAILURE(tc, \"wrong bcrypt password should not validate\",\n                       apr_password_validate(pass2, hash));\n    APR_ASSERT_SUCCESS(tc, \"bcrypt password validated\",\n",
                    "rendered": {
                      "text": "                                         sizeof(hash)));\n\n    APR_ASSERT_SUCCESS(tc, \"bcrypt password validated\",\n                       apr_password_validate(pass, hash));\n    APR_ASSERT_FAILURE(tc, \"wrong bcrypt password should not validate\",\n                       apr_password_validate(pass2, hash));\n    APR_ASSERT_SUCCESS(tc, \"bcrypt password validated\",\n",
                      "markdown": "`                                         sizeof(hash)));\n\n    APR_ASSERT_SUCCESS(tc, \"bcrypt password validated\",\n                       apr_password_validate(pass, hash));\n    APR_ASSERT_FAILURE(tc, \"wrong bcrypt password should not validate\",\n                       apr_password_validate(pass2, hash));\n    APR_ASSERT_SUCCESS(tc, \"bcrypt password validated\",\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 35,
                  "endLine": 190,
                  "endColumn": 43,
                  "snippet": {
                    "text": "                       apr_bcrypt_encode(pass, 5, salt, sizeof(salt), hash,\n                                         sizeof(hash)));\n\n    APR_ASSERT_SUCCESS(tc, \"bcrypt password validated\",\n                       apr_password_validate(pass, hash));\n    APR_ASSERT_FAILURE(tc, \"wrong bcrypt password should not validate\",\n                       apr_password_validate(pass2, hash));\n",
                    "rendered": {
                      "text": "                       apr_bcrypt_encode(pass, 5, salt, sizeof(salt), hash,\n                                         sizeof(hash)));\n\n    APR_ASSERT_SUCCESS(tc, \"bcrypt password validated\",\n                       apr_password_validate(pass, hash));\n    APR_ASSERT_FAILURE(tc, \"wrong bcrypt password should not validate\",\n                       apr_password_validate(pass2, hash));\n",
                      "markdown": "`                       apr_bcrypt_encode(pass, 5, salt, sizeof(salt), hash,\n                                         sizeof(hash)));\n\n    APR_ASSERT_SUCCESS(tc, \"bcrypt password validated\",\n                       apr_password_validate(pass, hash));\n    APR_ASSERT_FAILURE(tc, \"wrong bcrypt password should not validate\",\n                       apr_password_validate(pass2, hash));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 42,
                  "endLine": 186,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    const char *hash2 = \"$2a$08$qipUJiI9fySUN38hcbz.lucXvAmtgowKOWYtB9y3CXyl6lTknruou\";\n    const char *pass3 = \"foobar\";\n\n    APR_ASSERT_SUCCESS(tc, \"bcrypt encode password\",\n                       apr_bcrypt_encode(pass, 5, salt, sizeof(salt), hash,\n                                         sizeof(hash)));\n\n",
                    "rendered": {
                      "text": "    const char *hash2 = \"$2a$08$qipUJiI9fySUN38hcbz.lucXvAmtgowKOWYtB9y3CXyl6lTknruou\";\n    const char *pass3 = \"foobar\";\n\n    APR_ASSERT_SUCCESS(tc, \"bcrypt encode password\",\n                       apr_bcrypt_encode(pass, 5, salt, sizeof(salt), hash,\n                                         sizeof(hash)));\n\n",
                      "markdown": "`    const char *hash2 = \"$2a$08$qipUJiI9fySUN38hcbz.lucXvAmtgowKOWYtB9y3CXyl6lTknruou\";\n    const char *pass3 = \"foobar\";\n\n    APR_ASSERT_SUCCESS(tc, \"bcrypt encode password\",\n                       apr_bcrypt_encode(pass, 5, salt, sizeof(salt), hash,\n                                         sizeof(hash)));\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 66,
                  "endLine": 170,
                  "endColumn": 74,
                  "snippet": {
                    "text": "    int i = 0;\n    while (glibc_sha_pws[i].password) {\n        APR_ASSERT_SUCCESS(tc, \"check for valid glibc crypt-sha password\",\n                           apr_password_validate(glibc_sha_pws[i].password,\n                                                 glibc_sha_pws[i].hash));\n        i++;\n    }\n",
                    "rendered": {
                      "text": "    int i = 0;\n    while (glibc_sha_pws[i].password) {\n        APR_ASSERT_SUCCESS(tc, \"check for valid glibc crypt-sha password\",\n                           apr_password_validate(glibc_sha_pws[i].password,\n                                                 glibc_sha_pws[i].hash));\n        i++;\n    }\n",
                      "markdown": "`    int i = 0;\n    while (glibc_sha_pws[i].password) {\n        APR_ASSERT_SUCCESS(tc, \"check for valid glibc crypt-sha password\",\n                           apr_password_validate(glibc_sha_pws[i].password,\n                                                 glibc_sha_pws[i].hash));\n        i++;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 31,
                  "endLine": 170,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    int i = 0;\n    while (glibc_sha_pws[i].password) {\n        APR_ASSERT_SUCCESS(tc, \"check for valid glibc crypt-sha password\",\n                           apr_password_validate(glibc_sha_pws[i].password,\n                                                 glibc_sha_pws[i].hash));\n        i++;\n    }\n",
                    "rendered": {
                      "text": "    int i = 0;\n    while (glibc_sha_pws[i].password) {\n        APR_ASSERT_SUCCESS(tc, \"check for valid glibc crypt-sha password\",\n                           apr_password_validate(glibc_sha_pws[i].password,\n                                                 glibc_sha_pws[i].hash));\n        i++;\n    }\n",
                      "markdown": "`    int i = 0;\n    while (glibc_sha_pws[i].password) {\n        APR_ASSERT_SUCCESS(tc, \"check for valid glibc crypt-sha password\",\n                           apr_password_validate(glibc_sha_pws[i].password,\n                                                 glibc_sha_pws[i].hash));\n        i++;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 64,
                  "endLine": 169,
                  "endColumn": 72,
                  "snippet": {
                    "text": "{\n    int i = 0;\n    while (glibc_sha_pws[i].password) {\n        APR_ASSERT_SUCCESS(tc, \"check for valid glibc crypt-sha password\",\n                           apr_password_validate(glibc_sha_pws[i].password,\n                                                 glibc_sha_pws[i].hash));\n        i++;\n",
                    "rendered": {
                      "text": "{\n    int i = 0;\n    while (glibc_sha_pws[i].password) {\n        APR_ASSERT_SUCCESS(tc, \"check for valid glibc crypt-sha password\",\n                           apr_password_validate(glibc_sha_pws[i].password,\n                                                 glibc_sha_pws[i].hash));\n        i++;\n",
                      "markdown": "`{\n    int i = 0;\n    while (glibc_sha_pws[i].password) {\n        APR_ASSERT_SUCCESS(tc, \"check for valid glibc crypt-sha password\",\n                           apr_password_validate(glibc_sha_pws[i].password,\n                                                 glibc_sha_pws[i].hash));\n        i++;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 28,
                  "endLine": 168,
                  "endColumn": 36,
                  "snippet": {
                    "text": "static void test_glibc_shapass(abts_case *tc, void *data)\n{\n    int i = 0;\n    while (glibc_sha_pws[i].password) {\n        APR_ASSERT_SUCCESS(tc, \"check for valid glibc crypt-sha password\",\n                           apr_password_validate(glibc_sha_pws[i].password,\n                                                 glibc_sha_pws[i].hash));\n",
                    "rendered": {
                      "text": "static void test_glibc_shapass(abts_case *tc, void *data)\n{\n    int i = 0;\n    while (glibc_sha_pws[i].password) {\n        APR_ASSERT_SUCCESS(tc, \"check for valid glibc crypt-sha password\",\n                           apr_password_validate(glibc_sha_pws[i].password,\n                                                 glibc_sha_pws[i].hash));\n",
                      "markdown": "`static void test_glibc_shapass(abts_case *tc, void *data)\n{\n    int i = 0;\n    while (glibc_sha_pws[i].password) {\n        APR_ASSERT_SUCCESS(tc, \"check for valid glibc crypt-sha password\",\n                           apr_password_validate(glibc_sha_pws[i].password,\n                                                 glibc_sha_pws[i].hash));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 16,
                  "endLine": 153,
                  "endColumn": 24,
                  "snippet": {
                    "text": "#ifdef GLIBCSHA_ALGO_SUPPORTED\n\nstatic struct {\n    const char *password;\n    const char *hash;\n} glibc_sha_pws[] = {\n    /* SHA256 */\n",
                    "rendered": {
                      "text": "#ifdef GLIBCSHA_ALGO_SUPPORTED\n\nstatic struct {\n    const char *password;\n    const char *hash;\n} glibc_sha_pws[] = {\n    /* SHA256 */\n",
                      "markdown": "`#ifdef GLIBCSHA_ALGO_SUPPORTED\n\nstatic struct {\n    const char *password;\n    const char *hash;\n} glibc_sha_pws[] = {\n    /* SHA256 */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 27,
                  "endLine": 147,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    APR_ASSERT_SUCCESS(tc, \"MD5 password validated\",\n                       apr_password_validate(pass, hash));\n    APR_ASSERT_FAILURE(tc, \"wrong MD5 password should not validate\",\n                       apr_password_validate(pass2, hash));\n}\n\n#ifdef GLIBCSHA_ALGO_SUPPORTED\n",
                    "rendered": {
                      "text": "    APR_ASSERT_SUCCESS(tc, \"MD5 password validated\",\n                       apr_password_validate(pass, hash));\n    APR_ASSERT_FAILURE(tc, \"wrong MD5 password should not validate\",\n                       apr_password_validate(pass2, hash));\n}\n\n#ifdef GLIBCSHA_ALGO_SUPPORTED\n",
                      "markdown": "`    APR_ASSERT_SUCCESS(tc, \"MD5 password validated\",\n                       apr_password_validate(pass, hash));\n    APR_ASSERT_FAILURE(tc, \"wrong MD5 password should not validate\",\n                       apr_password_validate(pass2, hash));\n}\n\n#ifdef GLIBCSHA_ALGO_SUPPORTED\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 38,
                  "endLine": 146,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n    APR_ASSERT_SUCCESS(tc, \"MD5 password validated\",\n                       apr_password_validate(pass, hash));\n    APR_ASSERT_FAILURE(tc, \"wrong MD5 password should not validate\",\n                       apr_password_validate(pass2, hash));\n}\n\n",
                    "rendered": {
                      "text": "\n    APR_ASSERT_SUCCESS(tc, \"MD5 password validated\",\n                       apr_password_validate(pass, hash));\n    APR_ASSERT_FAILURE(tc, \"wrong MD5 password should not validate\",\n                       apr_password_validate(pass2, hash));\n}\n\n",
                      "markdown": "`\n    APR_ASSERT_SUCCESS(tc, \"MD5 password validated\",\n                       apr_password_validate(pass, hash));\n    APR_ASSERT_FAILURE(tc, \"wrong MD5 password should not validate\",\n                       apr_password_validate(pass2, hash));\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 27,
                  "endLine": 145,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    apr_md5_encode(pass, salt, hash, sizeof hash);\n\n    APR_ASSERT_SUCCESS(tc, \"MD5 password validated\",\n                       apr_password_validate(pass, hash));\n    APR_ASSERT_FAILURE(tc, \"wrong MD5 password should not validate\",\n                       apr_password_validate(pass2, hash));\n}\n",
                    "rendered": {
                      "text": "    apr_md5_encode(pass, salt, hash, sizeof hash);\n\n    APR_ASSERT_SUCCESS(tc, \"MD5 password validated\",\n                       apr_password_validate(pass, hash));\n    APR_ASSERT_FAILURE(tc, \"wrong MD5 password should not validate\",\n                       apr_password_validate(pass2, hash));\n}\n",
                      "markdown": "`    apr_md5_encode(pass, salt, hash, sizeof hash);\n\n    APR_ASSERT_SUCCESS(tc, \"MD5 password validated\",\n                       apr_password_validate(pass, hash));\n    APR_ASSERT_FAILURE(tc, \"wrong MD5 password should not validate\",\n                       apr_password_validate(pass2, hash));\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 32,
                  "endLine": 144,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n    apr_md5_encode(pass, salt, hash, sizeof hash);\n\n    APR_ASSERT_SUCCESS(tc, \"MD5 password validated\",\n                       apr_password_validate(pass, hash));\n    APR_ASSERT_FAILURE(tc, \"wrong MD5 password should not validate\",\n                       apr_password_validate(pass2, hash));\n",
                    "rendered": {
                      "text": "\n    apr_md5_encode(pass, salt, hash, sizeof hash);\n\n    APR_ASSERT_SUCCESS(tc, \"MD5 password validated\",\n                       apr_password_validate(pass, hash));\n    APR_ASSERT_FAILURE(tc, \"wrong MD5 password should not validate\",\n                       apr_password_validate(pass2, hash));\n",
                      "markdown": "`\n    apr_md5_encode(pass, salt, hash, sizeof hash);\n\n    APR_ASSERT_SUCCESS(tc, \"MD5 password validated\",\n                       apr_password_validate(pass, hash));\n    APR_ASSERT_FAILURE(tc, \"wrong MD5 password should not validate\",\n                       apr_password_validate(pass2, hash));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 27,
                  "endLine": 133,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    APR_ASSERT_SUCCESS(tc, \"SHA1 password validated\",\n                       apr_password_validate(pass, hash));\n    APR_ASSERT_FAILURE(tc, \"wrong SHA1 password should not validate\",\n                       apr_password_validate(pass2, hash));\n}\n\nstatic void test_md5pass(abts_case *tc, void *data)\n",
                    "rendered": {
                      "text": "    APR_ASSERT_SUCCESS(tc, \"SHA1 password validated\",\n                       apr_password_validate(pass, hash));\n    APR_ASSERT_FAILURE(tc, \"wrong SHA1 password should not validate\",\n                       apr_password_validate(pass2, hash));\n}\n\nstatic void test_md5pass(abts_case *tc, void *data)\n",
                      "markdown": "`    APR_ASSERT_SUCCESS(tc, \"SHA1 password validated\",\n                       apr_password_validate(pass, hash));\n    APR_ASSERT_FAILURE(tc, \"wrong SHA1 password should not validate\",\n                       apr_password_validate(pass2, hash));\n}\n\nstatic void test_md5pass(abts_case *tc, void *data)\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 39,
                  "endLine": 132,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\n    APR_ASSERT_SUCCESS(tc, \"SHA1 password validated\",\n                       apr_password_validate(pass, hash));\n    APR_ASSERT_FAILURE(tc, \"wrong SHA1 password should not validate\",\n                       apr_password_validate(pass2, hash));\n}\n\n",
                    "rendered": {
                      "text": "\n    APR_ASSERT_SUCCESS(tc, \"SHA1 password validated\",\n                       apr_password_validate(pass, hash));\n    APR_ASSERT_FAILURE(tc, \"wrong SHA1 password should not validate\",\n                       apr_password_validate(pass2, hash));\n}\n\n",
                      "markdown": "`\n    APR_ASSERT_SUCCESS(tc, \"SHA1 password validated\",\n                       apr_password_validate(pass, hash));\n    APR_ASSERT_FAILURE(tc, \"wrong SHA1 password should not validate\",\n                       apr_password_validate(pass2, hash));\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 27,
                  "endLine": 131,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    apr_sha1_base64(pass, (unsigned int)strlen(pass), hash);\n\n    APR_ASSERT_SUCCESS(tc, \"SHA1 password validated\",\n                       apr_password_validate(pass, hash));\n    APR_ASSERT_FAILURE(tc, \"wrong SHA1 password should not validate\",\n                       apr_password_validate(pass2, hash));\n}\n",
                    "rendered": {
                      "text": "    apr_sha1_base64(pass, (unsigned int)strlen(pass), hash);\n\n    APR_ASSERT_SUCCESS(tc, \"SHA1 password validated\",\n                       apr_password_validate(pass, hash));\n    APR_ASSERT_FAILURE(tc, \"wrong SHA1 password should not validate\",\n                       apr_password_validate(pass2, hash));\n}\n",
                      "markdown": "`    apr_sha1_base64(pass, (unsigned int)strlen(pass), hash);\n\n    APR_ASSERT_SUCCESS(tc, \"SHA1 password validated\",\n                       apr_password_validate(pass, hash));\n    APR_ASSERT_FAILURE(tc, \"wrong SHA1 password should not validate\",\n                       apr_password_validate(pass2, hash));\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 33,
                  "endLine": 130,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n    apr_sha1_base64(pass, (unsigned int)strlen(pass), hash);\n\n    APR_ASSERT_SUCCESS(tc, \"SHA1 password validated\",\n                       apr_password_validate(pass, hash));\n    APR_ASSERT_FAILURE(tc, \"wrong SHA1 password should not validate\",\n                       apr_password_validate(pass2, hash));\n",
                    "rendered": {
                      "text": "\n    apr_sha1_base64(pass, (unsigned int)strlen(pass), hash);\n\n    APR_ASSERT_SUCCESS(tc, \"SHA1 password validated\",\n                       apr_password_validate(pass, hash));\n    APR_ASSERT_FAILURE(tc, \"wrong SHA1 password should not validate\",\n                       apr_password_validate(pass2, hash));\n",
                      "markdown": "`\n    apr_sha1_base64(pass, (unsigned int)strlen(pass), hash);\n\n    APR_ASSERT_SUCCESS(tc, \"SHA1 password validated\",\n                       apr_password_validate(pass, hash));\n    APR_ASSERT_FAILURE(tc, \"wrong SHA1 password should not validate\",\n                       apr_password_validate(pass2, hash));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 49,
                  "endLine": 80,
                  "endColumn": 57,
                  "snippet": {
                    "text": "    for (i = 0; i < num_passwords; i++) {\n        APR_ASSERT_SUCCESS(tc, \"check for valid password\",\n                           apr_password_validate(passwords[i].password,\n                                                 passwords[i].hash));\n    }\n}\n\n",
                    "rendered": {
                      "text": "    for (i = 0; i < num_passwords; i++) {\n        APR_ASSERT_SUCCESS(tc, \"check for valid password\",\n                           apr_password_validate(passwords[i].password,\n                                                 passwords[i].hash));\n    }\n}\n\n",
                      "markdown": "`    for (i = 0; i < num_passwords; i++) {\n        APR_ASSERT_SUCCESS(tc, \"check for valid password\",\n                           apr_password_validate(passwords[i].password,\n                                                 passwords[i].hash));\n    }\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 62,
                  "endLine": 79,
                  "endColumn": 70,
                  "snippet": {
                    "text": "\n    for (i = 0; i < num_passwords; i++) {\n        APR_ASSERT_SUCCESS(tc, \"check for valid password\",\n                           apr_password_validate(passwords[i].password,\n                                                 passwords[i].hash));\n    }\n}\n",
                    "rendered": {
                      "text": "\n    for (i = 0; i < num_passwords; i++) {\n        APR_ASSERT_SUCCESS(tc, \"check for valid password\",\n                           apr_password_validate(passwords[i].password,\n                                                 passwords[i].hash));\n    }\n}\n",
                      "markdown": "`\n    for (i = 0; i < num_passwords; i++) {\n        APR_ASSERT_SUCCESS(tc, \"check for valid password\",\n                           apr_password_validate(passwords[i].password,\n                                                 passwords[i].hash));\n    }\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 49,
                  "endLine": 79,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\n    for (i = 0; i < num_passwords; i++) {\n        APR_ASSERT_SUCCESS(tc, \"check for valid password\",\n                           apr_password_validate(passwords[i].password,\n                                                 passwords[i].hash));\n    }\n}\n",
                    "rendered": {
                      "text": "\n    for (i = 0; i < num_passwords; i++) {\n        APR_ASSERT_SUCCESS(tc, \"check for valid password\",\n                           apr_password_validate(passwords[i].password,\n                                                 passwords[i].hash));\n    }\n}\n",
                      "markdown": "`\n    for (i = 0; i < num_passwords; i++) {\n        APR_ASSERT_SUCCESS(tc, \"check for valid password\",\n                           apr_password_validate(passwords[i].password,\n                                                 passwords[i].hash));\n    }\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 31,
                  "endLine": 79,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\n    for (i = 0; i < num_passwords; i++) {\n        APR_ASSERT_SUCCESS(tc, \"check for valid password\",\n                           apr_password_validate(passwords[i].password,\n                                                 passwords[i].hash));\n    }\n}\n",
                    "rendered": {
                      "text": "\n    for (i = 0; i < num_passwords; i++) {\n        APR_ASSERT_SUCCESS(tc, \"check for valid password\",\n                           apr_password_validate(passwords[i].password,\n                                                 passwords[i].hash));\n    }\n}\n",
                      "markdown": "`\n    for (i = 0; i < num_passwords; i++) {\n        APR_ASSERT_SUCCESS(tc, \"check for valid password\",\n                           apr_password_validate(passwords[i].password,\n                                                 passwords[i].hash));\n    }\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 48,
                  "endLine": 78,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    int i;\n\n    for (i = 0; i < num_passwords; i++) {\n        APR_ASSERT_SUCCESS(tc, \"check for valid password\",\n                           apr_password_validate(passwords[i].password,\n                                                 passwords[i].hash));\n    }\n",
                    "rendered": {
                      "text": "    int i;\n\n    for (i = 0; i < num_passwords; i++) {\n        APR_ASSERT_SUCCESS(tc, \"check for valid password\",\n                           apr_password_validate(passwords[i].password,\n                                                 passwords[i].hash));\n    }\n",
                      "markdown": "`    int i;\n\n    for (i = 0; i < num_passwords; i++) {\n        APR_ASSERT_SUCCESS(tc, \"check for valid password\",\n                           apr_password_validate(passwords[i].password,\n                                                 passwords[i].hash));\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 24,
                  "endLine": 77,
                  "endColumn": 32,
                  "snippet": {
                    "text": "{\n    int i;\n\n    for (i = 0; i < num_passwords; i++) {\n        APR_ASSERT_SUCCESS(tc, \"check for valid password\",\n                           apr_password_validate(passwords[i].password,\n                                                 passwords[i].hash));\n",
                    "rendered": {
                      "text": "{\n    int i;\n\n    for (i = 0; i < num_passwords; i++) {\n        APR_ASSERT_SUCCESS(tc, \"check for valid password\",\n                           apr_password_validate(passwords[i].password,\n                                                 passwords[i].hash));\n",
                      "markdown": "`{\n    int i;\n\n    for (i = 0; i < num_passwords; i++) {\n        APR_ASSERT_SUCCESS(tc, \"check for valid password\",\n                           apr_password_validate(passwords[i].password,\n                                                 passwords[i].hash));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 54,
                  "endLine": 71,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    {\"pass7\", \"nHQ3BbF0Y9vpI\"},\n    {\"pass8\", \"nHZA1rViSldQk\"}\n};\nstatic int num_passwords = sizeof(passwords) / sizeof(passwords[0]);\n\nstatic void test_crypt(abts_case *tc, void *data)\n{\n",
                    "rendered": {
                      "text": "    {\"pass7\", \"nHQ3BbF0Y9vpI\"},\n    {\"pass8\", \"nHZA1rViSldQk\"}\n};\nstatic int num_passwords = sizeof(passwords) / sizeof(passwords[0]);\n\nstatic void test_crypt(abts_case *tc, void *data)\n{\n",
                      "markdown": "`    {\"pass7\", \"nHQ3BbF0Y9vpI\"},\n    {\"pass8\", \"nHZA1rViSldQk\"}\n};\nstatic int num_passwords = sizeof(passwords) / sizeof(passwords[0]);\n\nstatic void test_crypt(abts_case *tc, void *data)\n{\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 34,
                  "endLine": 71,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    {\"pass7\", \"nHQ3BbF0Y9vpI\"},\n    {\"pass8\", \"nHZA1rViSldQk\"}\n};\nstatic int num_passwords = sizeof(passwords) / sizeof(passwords[0]);\n\nstatic void test_crypt(abts_case *tc, void *data)\n{\n",
                    "rendered": {
                      "text": "    {\"pass7\", \"nHQ3BbF0Y9vpI\"},\n    {\"pass8\", \"nHZA1rViSldQk\"}\n};\nstatic int num_passwords = sizeof(passwords) / sizeof(passwords[0]);\n\nstatic void test_crypt(abts_case *tc, void *data)\n{\n",
                      "markdown": "`    {\"pass7\", \"nHQ3BbF0Y9vpI\"},\n    {\"pass8\", \"nHZA1rViSldQk\"}\n};\nstatic int num_passwords = sizeof(passwords) / sizeof(passwords[0]);\n\nstatic void test_crypt(abts_case *tc, void *data)\n{\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 15,
                  "endLine": 71,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    {\"pass7\", \"nHQ3BbF0Y9vpI\"},\n    {\"pass8\", \"nHZA1rViSldQk\"}\n};\nstatic int num_passwords = sizeof(passwords) / sizeof(passwords[0]);\n\nstatic void test_crypt(abts_case *tc, void *data)\n{\n",
                    "rendered": {
                      "text": "    {\"pass7\", \"nHQ3BbF0Y9vpI\"},\n    {\"pass8\", \"nHZA1rViSldQk\"}\n};\nstatic int num_passwords = sizeof(passwords) / sizeof(passwords[0]);\n\nstatic void test_crypt(abts_case *tc, void *data)\n{\n",
                      "markdown": "`    {\"pass7\", \"nHQ3BbF0Y9vpI\"},\n    {\"pass8\", \"nHZA1rViSldQk\"}\n};\nstatic int num_passwords = sizeof(passwords) / sizeof(passwords[0]);\n\nstatic void test_crypt(abts_case *tc, void *data)\n{\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 14,
                  "endLine": 59,
                  "endColumn": 22,
                  "snippet": {
                    "text": "  htpasswd -b passwords pass5 pass5\n  htpasswd -b passwords pass6 pass6\n  htpasswd -b passwords pass7 pass7\n  htpasswd -b passwords pass8 pass8\n  (insert Perl one-liner to convert to initializer :) )\n */\n    {\"pass1\", \"1fWDc9QWYCWrQ\"},\n",
                    "rendered": {
                      "text": "  htpasswd -b passwords pass5 pass5\n  htpasswd -b passwords pass6 pass6\n  htpasswd -b passwords pass7 pass7\n  htpasswd -b passwords pass8 pass8\n  (insert Perl one-liner to convert to initializer :) )\n */\n    {\"pass1\", \"1fWDc9QWYCWrQ\"},\n",
                      "markdown": "`  htpasswd -b passwords pass5 pass5\n  htpasswd -b passwords pass6 pass6\n  htpasswd -b passwords pass7 pass7\n  htpasswd -b passwords pass8 pass8\n  (insert Perl one-liner to convert to initializer :) )\n */\n    {\"pass1\", \"1fWDc9QWYCWrQ\"},\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 2,
                  "endLine": 59,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  htpasswd -b passwords pass5 pass5\n  htpasswd -b passwords pass6 pass6\n  htpasswd -b passwords pass7 pass7\n  htpasswd -b passwords pass8 pass8\n  (insert Perl one-liner to convert to initializer :) )\n */\n    {\"pass1\", \"1fWDc9QWYCWrQ\"},\n",
                    "rendered": {
                      "text": "  htpasswd -b passwords pass5 pass5\n  htpasswd -b passwords pass6 pass6\n  htpasswd -b passwords pass7 pass7\n  htpasswd -b passwords pass8 pass8\n  (insert Perl one-liner to convert to initializer :) )\n */\n    {\"pass1\", \"1fWDc9QWYCWrQ\"},\n",
                      "markdown": "`  htpasswd -b passwords pass5 pass5\n  htpasswd -b passwords pass6 pass6\n  htpasswd -b passwords pass7 pass7\n  htpasswd -b passwords pass8 pass8\n  (insert Perl one-liner to convert to initializer :) )\n */\n    {\"pass1\", \"1fWDc9QWYCWrQ\"},\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 14,
                  "endLine": 58,
                  "endColumn": 22,
                  "snippet": {
                    "text": "  htpasswd -b passwords pass4 pass4\n  htpasswd -b passwords pass5 pass5\n  htpasswd -b passwords pass6 pass6\n  htpasswd -b passwords pass7 pass7\n  htpasswd -b passwords pass8 pass8\n  (insert Perl one-liner to convert to initializer :) )\n */\n",
                    "rendered": {
                      "text": "  htpasswd -b passwords pass4 pass4\n  htpasswd -b passwords pass5 pass5\n  htpasswd -b passwords pass6 pass6\n  htpasswd -b passwords pass7 pass7\n  htpasswd -b passwords pass8 pass8\n  (insert Perl one-liner to convert to initializer :) )\n */\n",
                      "markdown": "`  htpasswd -b passwords pass4 pass4\n  htpasswd -b passwords pass5 pass5\n  htpasswd -b passwords pass6 pass6\n  htpasswd -b passwords pass7 pass7\n  htpasswd -b passwords pass8 pass8\n  (insert Perl one-liner to convert to initializer :) )\n */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 2,
                  "endLine": 58,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  htpasswd -b passwords pass4 pass4\n  htpasswd -b passwords pass5 pass5\n  htpasswd -b passwords pass6 pass6\n  htpasswd -b passwords pass7 pass7\n  htpasswd -b passwords pass8 pass8\n  (insert Perl one-liner to convert to initializer :) )\n */\n",
                    "rendered": {
                      "text": "  htpasswd -b passwords pass4 pass4\n  htpasswd -b passwords pass5 pass5\n  htpasswd -b passwords pass6 pass6\n  htpasswd -b passwords pass7 pass7\n  htpasswd -b passwords pass8 pass8\n  (insert Perl one-liner to convert to initializer :) )\n */\n",
                      "markdown": "`  htpasswd -b passwords pass4 pass4\n  htpasswd -b passwords pass5 pass5\n  htpasswd -b passwords pass6 pass6\n  htpasswd -b passwords pass7 pass7\n  htpasswd -b passwords pass8 pass8\n  (insert Perl one-liner to convert to initializer :) )\n */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 14,
                  "endLine": 57,
                  "endColumn": 22,
                  "snippet": {
                    "text": "  htpasswd -b passwords pass3 pass3\n  htpasswd -b passwords pass4 pass4\n  htpasswd -b passwords pass5 pass5\n  htpasswd -b passwords pass6 pass6\n  htpasswd -b passwords pass7 pass7\n  htpasswd -b passwords pass8 pass8\n  (insert Perl one-liner to convert to initializer :) )\n",
                    "rendered": {
                      "text": "  htpasswd -b passwords pass3 pass3\n  htpasswd -b passwords pass4 pass4\n  htpasswd -b passwords pass5 pass5\n  htpasswd -b passwords pass6 pass6\n  htpasswd -b passwords pass7 pass7\n  htpasswd -b passwords pass8 pass8\n  (insert Perl one-liner to convert to initializer :) )\n",
                      "markdown": "`  htpasswd -b passwords pass3 pass3\n  htpasswd -b passwords pass4 pass4\n  htpasswd -b passwords pass5 pass5\n  htpasswd -b passwords pass6 pass6\n  htpasswd -b passwords pass7 pass7\n  htpasswd -b passwords pass8 pass8\n  (insert Perl one-liner to convert to initializer :) )\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 2,
                  "endLine": 57,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  htpasswd -b passwords pass3 pass3\n  htpasswd -b passwords pass4 pass4\n  htpasswd -b passwords pass5 pass5\n  htpasswd -b passwords pass6 pass6\n  htpasswd -b passwords pass7 pass7\n  htpasswd -b passwords pass8 pass8\n  (insert Perl one-liner to convert to initializer :) )\n",
                    "rendered": {
                      "text": "  htpasswd -b passwords pass3 pass3\n  htpasswd -b passwords pass4 pass4\n  htpasswd -b passwords pass5 pass5\n  htpasswd -b passwords pass6 pass6\n  htpasswd -b passwords pass7 pass7\n  htpasswd -b passwords pass8 pass8\n  (insert Perl one-liner to convert to initializer :) )\n",
                      "markdown": "`  htpasswd -b passwords pass3 pass3\n  htpasswd -b passwords pass4 pass4\n  htpasswd -b passwords pass5 pass5\n  htpasswd -b passwords pass6 pass6\n  htpasswd -b passwords pass7 pass7\n  htpasswd -b passwords pass8 pass8\n  (insert Perl one-liner to convert to initializer :) )\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 14,
                  "endLine": 56,
                  "endColumn": 22,
                  "snippet": {
                    "text": "  htpasswd -b passwords pass2 pass2\n  htpasswd -b passwords pass3 pass3\n  htpasswd -b passwords pass4 pass4\n  htpasswd -b passwords pass5 pass5\n  htpasswd -b passwords pass6 pass6\n  htpasswd -b passwords pass7 pass7\n  htpasswd -b passwords pass8 pass8\n",
                    "rendered": {
                      "text": "  htpasswd -b passwords pass2 pass2\n  htpasswd -b passwords pass3 pass3\n  htpasswd -b passwords pass4 pass4\n  htpasswd -b passwords pass5 pass5\n  htpasswd -b passwords pass6 pass6\n  htpasswd -b passwords pass7 pass7\n  htpasswd -b passwords pass8 pass8\n",
                      "markdown": "`  htpasswd -b passwords pass2 pass2\n  htpasswd -b passwords pass3 pass3\n  htpasswd -b passwords pass4 pass4\n  htpasswd -b passwords pass5 pass5\n  htpasswd -b passwords pass6 pass6\n  htpasswd -b passwords pass7 pass7\n  htpasswd -b passwords pass8 pass8\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 2,
                  "endLine": 56,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  htpasswd -b passwords pass2 pass2\n  htpasswd -b passwords pass3 pass3\n  htpasswd -b passwords pass4 pass4\n  htpasswd -b passwords pass5 pass5\n  htpasswd -b passwords pass6 pass6\n  htpasswd -b passwords pass7 pass7\n  htpasswd -b passwords pass8 pass8\n",
                    "rendered": {
                      "text": "  htpasswd -b passwords pass2 pass2\n  htpasswd -b passwords pass3 pass3\n  htpasswd -b passwords pass4 pass4\n  htpasswd -b passwords pass5 pass5\n  htpasswd -b passwords pass6 pass6\n  htpasswd -b passwords pass7 pass7\n  htpasswd -b passwords pass8 pass8\n",
                      "markdown": "`  htpasswd -b passwords pass2 pass2\n  htpasswd -b passwords pass3 pass3\n  htpasswd -b passwords pass4 pass4\n  htpasswd -b passwords pass5 pass5\n  htpasswd -b passwords pass6 pass6\n  htpasswd -b passwords pass7 pass7\n  htpasswd -b passwords pass8 pass8\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 14,
                  "endLine": 55,
                  "endColumn": 22,
                  "snippet": {
                    "text": "  htpasswd -c -b passwords pass1 pass1\n  htpasswd -b passwords pass2 pass2\n  htpasswd -b passwords pass3 pass3\n  htpasswd -b passwords pass4 pass4\n  htpasswd -b passwords pass5 pass5\n  htpasswd -b passwords pass6 pass6\n  htpasswd -b passwords pass7 pass7\n",
                    "rendered": {
                      "text": "  htpasswd -c -b passwords pass1 pass1\n  htpasswd -b passwords pass2 pass2\n  htpasswd -b passwords pass3 pass3\n  htpasswd -b passwords pass4 pass4\n  htpasswd -b passwords pass5 pass5\n  htpasswd -b passwords pass6 pass6\n  htpasswd -b passwords pass7 pass7\n",
                      "markdown": "`  htpasswd -c -b passwords pass1 pass1\n  htpasswd -b passwords pass2 pass2\n  htpasswd -b passwords pass3 pass3\n  htpasswd -b passwords pass4 pass4\n  htpasswd -b passwords pass5 pass5\n  htpasswd -b passwords pass6 pass6\n  htpasswd -b passwords pass7 pass7\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 2,
                  "endLine": 55,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  htpasswd -c -b passwords pass1 pass1\n  htpasswd -b passwords pass2 pass2\n  htpasswd -b passwords pass3 pass3\n  htpasswd -b passwords pass4 pass4\n  htpasswd -b passwords pass5 pass5\n  htpasswd -b passwords pass6 pass6\n  htpasswd -b passwords pass7 pass7\n",
                    "rendered": {
                      "text": "  htpasswd -c -b passwords pass1 pass1\n  htpasswd -b passwords pass2 pass2\n  htpasswd -b passwords pass3 pass3\n  htpasswd -b passwords pass4 pass4\n  htpasswd -b passwords pass5 pass5\n  htpasswd -b passwords pass6 pass6\n  htpasswd -b passwords pass7 pass7\n",
                      "markdown": "`  htpasswd -c -b passwords pass1 pass1\n  htpasswd -b passwords pass2 pass2\n  htpasswd -b passwords pass3 pass3\n  htpasswd -b passwords pass4 pass4\n  htpasswd -b passwords pass5 pass5\n  htpasswd -b passwords pass6 pass6\n  htpasswd -b passwords pass7 pass7\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 14,
                  "endLine": 54,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n  htpasswd -c -b passwords pass1 pass1\n  htpasswd -b passwords pass2 pass2\n  htpasswd -b passwords pass3 pass3\n  htpasswd -b passwords pass4 pass4\n  htpasswd -b passwords pass5 pass5\n  htpasswd -b passwords pass6 pass6\n",
                    "rendered": {
                      "text": "\n  htpasswd -c -b passwords pass1 pass1\n  htpasswd -b passwords pass2 pass2\n  htpasswd -b passwords pass3 pass3\n  htpasswd -b passwords pass4 pass4\n  htpasswd -b passwords pass5 pass5\n  htpasswd -b passwords pass6 pass6\n",
                      "markdown": "`\n  htpasswd -c -b passwords pass1 pass1\n  htpasswd -b passwords pass2 pass2\n  htpasswd -b passwords pass3 pass3\n  htpasswd -b passwords pass4 pass4\n  htpasswd -b passwords pass5 pass5\n  htpasswd -b passwords pass6 pass6\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 2,
                  "endLine": 54,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n  htpasswd -c -b passwords pass1 pass1\n  htpasswd -b passwords pass2 pass2\n  htpasswd -b passwords pass3 pass3\n  htpasswd -b passwords pass4 pass4\n  htpasswd -b passwords pass5 pass5\n  htpasswd -b passwords pass6 pass6\n",
                    "rendered": {
                      "text": "\n  htpasswd -c -b passwords pass1 pass1\n  htpasswd -b passwords pass2 pass2\n  htpasswd -b passwords pass3 pass3\n  htpasswd -b passwords pass4 pass4\n  htpasswd -b passwords pass5 pass5\n  htpasswd -b passwords pass6 pass6\n",
                      "markdown": "`\n  htpasswd -c -b passwords pass1 pass1\n  htpasswd -b passwords pass2 pass2\n  htpasswd -b passwords pass3 pass3\n  htpasswd -b passwords pass4 pass4\n  htpasswd -b passwords pass5 pass5\n  htpasswd -b passwords pass6 pass6\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 14,
                  "endLine": 53,
                  "endColumn": 22,
                  "snippet": {
                    "text": "  passwords and hashes created with Apache's htpasswd utility like this:\n\n  htpasswd -c -b passwords pass1 pass1\n  htpasswd -b passwords pass2 pass2\n  htpasswd -b passwords pass3 pass3\n  htpasswd -b passwords pass4 pass4\n  htpasswd -b passwords pass5 pass5\n",
                    "rendered": {
                      "text": "  passwords and hashes created with Apache's htpasswd utility like this:\n\n  htpasswd -c -b passwords pass1 pass1\n  htpasswd -b passwords pass2 pass2\n  htpasswd -b passwords pass3 pass3\n  htpasswd -b passwords pass4 pass4\n  htpasswd -b passwords pass5 pass5\n",
                      "markdown": "`  passwords and hashes created with Apache's htpasswd utility like this:\n\n  htpasswd -c -b passwords pass1 pass1\n  htpasswd -b passwords pass2 pass2\n  htpasswd -b passwords pass3 pass3\n  htpasswd -b passwords pass4 pass4\n  htpasswd -b passwords pass5 pass5\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 2,
                  "endLine": 53,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  passwords and hashes created with Apache's htpasswd utility like this:\n\n  htpasswd -c -b passwords pass1 pass1\n  htpasswd -b passwords pass2 pass2\n  htpasswd -b passwords pass3 pass3\n  htpasswd -b passwords pass4 pass4\n  htpasswd -b passwords pass5 pass5\n",
                    "rendered": {
                      "text": "  passwords and hashes created with Apache's htpasswd utility like this:\n\n  htpasswd -c -b passwords pass1 pass1\n  htpasswd -b passwords pass2 pass2\n  htpasswd -b passwords pass3 pass3\n  htpasswd -b passwords pass4 pass4\n  htpasswd -b passwords pass5 pass5\n",
                      "markdown": "`  passwords and hashes created with Apache's htpasswd utility like this:\n\n  htpasswd -c -b passwords pass1 pass1\n  htpasswd -b passwords pass2 pass2\n  htpasswd -b passwords pass3 pass3\n  htpasswd -b passwords pass4 pass4\n  htpasswd -b passwords pass5 pass5\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 17,
                  "endLine": 52,
                  "endColumn": 25,
                  "snippet": {
                    "text": "/*\n  passwords and hashes created with Apache's htpasswd utility like this:\n\n  htpasswd -c -b passwords pass1 pass1\n  htpasswd -b passwords pass2 pass2\n  htpasswd -b passwords pass3 pass3\n  htpasswd -b passwords pass4 pass4\n",
                    "rendered": {
                      "text": "/*\n  passwords and hashes created with Apache's htpasswd utility like this:\n\n  htpasswd -c -b passwords pass1 pass1\n  htpasswd -b passwords pass2 pass2\n  htpasswd -b passwords pass3 pass3\n  htpasswd -b passwords pass4 pass4\n",
                      "markdown": "`/*\n  passwords and hashes created with Apache's htpasswd utility like this:\n\n  htpasswd -c -b passwords pass1 pass1\n  htpasswd -b passwords pass2 pass2\n  htpasswd -b passwords pass3 pass3\n  htpasswd -b passwords pass4 pass4\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 2,
                  "endLine": 52,
                  "endColumn": 10,
                  "snippet": {
                    "text": "/*\n  passwords and hashes created with Apache's htpasswd utility like this:\n\n  htpasswd -c -b passwords pass1 pass1\n  htpasswd -b passwords pass2 pass2\n  htpasswd -b passwords pass3 pass3\n  htpasswd -b passwords pass4 pass4\n",
                    "rendered": {
                      "text": "/*\n  passwords and hashes created with Apache's htpasswd utility like this:\n\n  htpasswd -c -b passwords pass1 pass1\n  htpasswd -b passwords pass2 pass2\n  htpasswd -b passwords pass3 pass3\n  htpasswd -b passwords pass4 pass4\n",
                      "markdown": "`/*\n  passwords and hashes created with Apache's htpasswd utility like this:\n\n  htpasswd -c -b passwords pass1 pass1\n  htpasswd -b passwords pass2 pass2\n  htpasswd -b passwords pass3 pass3\n  htpasswd -b passwords pass4 pass4\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 45,
                  "endLine": 50,
                  "endColumn": 53,
                  "snippet": {
                    "text": "} passwords[] =\n{\n/*\n  passwords and hashes created with Apache's htpasswd utility like this:\n\n  htpasswd -c -b passwords pass1 pass1\n  htpasswd -b passwords pass2 pass2\n",
                    "rendered": {
                      "text": "} passwords[] =\n{\n/*\n  passwords and hashes created with Apache's htpasswd utility like this:\n\n  htpasswd -c -b passwords pass1 pass1\n  htpasswd -b passwords pass2 pass2\n",
                      "markdown": "`} passwords[] =\n{\n/*\n  passwords and hashes created with Apache's htpasswd utility like this:\n\n  htpasswd -c -b passwords pass1 pass1\n  htpasswd -b passwords pass2 pass2\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 2,
                  "endLine": 50,
                  "endColumn": 10,
                  "snippet": {
                    "text": "} passwords[] =\n{\n/*\n  passwords and hashes created with Apache's htpasswd utility like this:\n\n  htpasswd -c -b passwords pass1 pass1\n  htpasswd -b passwords pass2 pass2\n",
                    "rendered": {
                      "text": "} passwords[] =\n{\n/*\n  passwords and hashes created with Apache's htpasswd utility like this:\n\n  htpasswd -c -b passwords pass1 pass1\n  htpasswd -b passwords pass2 pass2\n",
                      "markdown": "`} passwords[] =\n{\n/*\n  passwords and hashes created with Apache's htpasswd utility like this:\n\n  htpasswd -c -b passwords pass1 pass1\n  htpasswd -b passwords pass2 pass2\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 2,
                  "endLine": 47,
                  "endColumn": 10,
                  "snippet": {
                    "text": "static struct {\n    const char *password;\n    const char *hash;\n} passwords[] =\n{\n/*\n  passwords and hashes created with Apache's htpasswd utility like this:\n",
                    "rendered": {
                      "text": "static struct {\n    const char *password;\n    const char *hash;\n} passwords[] =\n{\n/*\n  passwords and hashes created with Apache's htpasswd utility like this:\n",
                      "markdown": "`static struct {\n    const char *password;\n    const char *hash;\n} passwords[] =\n{\n/*\n  passwords and hashes created with Apache's htpasswd utility like this:\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testpass.c"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 16,
                  "endLine": 45,
                  "endColumn": 24,
                  "snippet": {
                    "text": "#if CRYPT_ALGO_SUPPORTED\n\nstatic struct {\n    const char *password;\n    const char *hash;\n} passwords[] =\n{\n",
                    "rendered": {
                      "text": "#if CRYPT_ALGO_SUPPORTED\n\nstatic struct {\n    const char *password;\n    const char *hash;\n} passwords[] =\n{\n",
                      "markdown": "`#if CRYPT_ALGO_SUPPORTED\n\nstatic struct {\n    const char *password;\n    const char *hash;\n} passwords[] =\n{\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/NWGNUsockperf"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 25,
                  "endLine": 114,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n#\n# If this is specified, it will override VERSION value in \n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                    "rendered": {
                      "text": "\n#\n# If this is specified, it will override VERSION value in \n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                      "markdown": "`\n#\n# If this is specified, it will override VERSION value in \n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/NWGNUsockperf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 30,
                  "endLine": 6,
                  "endColumn": 65,
                  "snippet": {
                    "text": "#\n\n#\n# Get the 'head' of the build environment if necessary.  This includes default\n# targets and paths to tools\n#\n\n",
                    "rendered": {
                      "text": "#\n\n#\n# Get the 'head' of the build environment if necessary.  This includes default\n# targets and paths to tools\n#\n\n",
                      "markdown": "`#\n\n#\n# Get the 'head' of the build environment if necessary.  This includes default\n# targets and paths to tools\n#\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/NWGNUsockperf"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 27,
                  "endLine": 15,
                  "endColumn": 31,
                  "snippet": {
                    "text": "endif\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                    "rendered": {
                      "text": "endif\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                      "markdown": "`endif\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testrand.c"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 8,
                  "endLine": 242,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    apr_status_t rv;\n    apr_size_t nbytes = RANDOM_BUF_SZ;\n    apr_size_t cmd_size = 1;\n    char cmd = 'X';\n    unsigned char expected[RANDOM_BUF_SZ] = {\n        0xac, 0x93, 0xd2, 0x5c, 0xc7, 0xf5, 0x8d, 0xc2,\n        0xd8, 0x8d, 0xb6, 0x7a, 0x94, 0xe1, 0x83, 0x4c,\n",
                    "rendered": {
                      "text": "    apr_status_t rv;\n    apr_size_t nbytes = RANDOM_BUF_SZ;\n    apr_size_t cmd_size = 1;\n    char cmd = 'X';\n    unsigned char expected[RANDOM_BUF_SZ] = {\n        0xac, 0x93, 0xd2, 0x5c, 0xc7, 0xf5, 0x8d, 0xc2,\n        0xd8, 0x8d, 0xb6, 0x7a, 0x94, 0xe1, 0x83, 0x4c,\n",
                      "markdown": "`    apr_status_t rv;\n    apr_size_t nbytes = RANDOM_BUF_SZ;\n    apr_size_t cmd_size = 1;\n    char cmd = 'X';\n    unsigned char expected[RANDOM_BUF_SZ] = {\n        0xac, 0x93, 0xd2, 0x5c, 0xc7, 0xf5, 0x8d, 0xc2,\n        0xd8, 0x8d, 0xb6, 0x7a, 0x94, 0xe1, 0x83, 0x4c,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/NWGNUglobalmutexchild"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 25,
                  "endLine": 116,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n#\n# If this is specified, it will override VERSION value in \n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                    "rendered": {
                      "text": "\n#\n# If this is specified, it will override VERSION value in \n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                      "markdown": "`\n#\n# If this is specified, it will override VERSION value in \n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/NWGNUglobalmutexchild"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 30,
                  "endLine": 6,
                  "endColumn": 65,
                  "snippet": {
                    "text": "#\n\n#\n# Get the 'head' of the build environment if necessary.  This includes default\n# targets and paths to tools\n#\n\n",
                    "rendered": {
                      "text": "#\n\n#\n# Get the 'head' of the build environment if necessary.  This includes default\n# targets and paths to tools\n#\n\n",
                      "markdown": "`#\n\n#\n# Get the 'head' of the build environment if necessary.  This includes default\n# targets and paths to tools\n#\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/NWGNUglobalmutexchild"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 27,
                  "endLine": 15,
                  "endColumn": 31,
                  "snippet": {
                    "text": "endif\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                    "rendered": {
                      "text": "endif\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                      "markdown": "`endif\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/apr_dbd_mysql.c"
                },
                "region": {
                  "startLine": 1207,
                  "startColumn": 7,
                  "endLine": 1207,
                  "endColumn": 16,
                  "snippet": {
                    "text": "                      (const void *)&timeout);\n    }\n    if (fields[12].value != NULL) {\n        timeout = atoi(fields[12].value);\n        mysql_options(sql->conn, MYSQL_OPT_WRITE_TIMEOUT,\n                      (const void *)&timeout);\n    }\n",
                    "rendered": {
                      "text": "                      (const void *)&timeout);\n    }\n    if (fields[12].value != NULL) {\n        timeout = atoi(fields[12].value);\n        mysql_options(sql->conn, MYSQL_OPT_WRITE_TIMEOUT,\n                      (const void *)&timeout);\n    }\n",
                      "markdown": "`                      (const void *)&timeout);\n    }\n    if (fields[12].value != NULL) {\n        timeout = atoi(fields[12].value);\n        mysql_options(sql->conn, MYSQL_OPT_WRITE_TIMEOUT,\n                      (const void *)&timeout);\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/apr_dbd_mysql.c"
                },
                "region": {
                  "startLine": 1202,
                  "startColumn": 7,
                  "endLine": 1202,
                  "endColumn": 16,
                  "snippet": {
                    "text": "                      (const void *)&timeout);\n    }\n    if (fields[11].value != NULL) {\n        timeout = atoi(fields[11].value);\n        mysql_options(sql->conn, MYSQL_OPT_READ_TIMEOUT,\n                      (const void *)&timeout);\n    }\n",
                    "rendered": {
                      "text": "                      (const void *)&timeout);\n    }\n    if (fields[11].value != NULL) {\n        timeout = atoi(fields[11].value);\n        mysql_options(sql->conn, MYSQL_OPT_READ_TIMEOUT,\n                      (const void *)&timeout);\n    }\n",
                      "markdown": "`                      (const void *)&timeout);\n    }\n    if (fields[11].value != NULL) {\n        timeout = atoi(fields[11].value);\n        mysql_options(sql->conn, MYSQL_OPT_READ_TIMEOUT,\n                      (const void *)&timeout);\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/apr_dbd_mysql.c"
                },
                "region": {
                  "startLine": 1197,
                  "startColumn": 7,
                  "endLine": 1197,
                  "endColumn": 16,
                  "snippet": {
                    "text": "         do_reconnect = atoi(fields[9].value) ? 1 : 0;\n    }\n    if (fields[10].value != NULL) {\n        timeout = atoi(fields[10].value);\n        mysql_options(sql->conn, MYSQL_OPT_CONNECT_TIMEOUT,\n                      (const void *)&timeout);\n    }\n",
                    "rendered": {
                      "text": "         do_reconnect = atoi(fields[9].value) ? 1 : 0;\n    }\n    if (fields[10].value != NULL) {\n        timeout = atoi(fields[10].value);\n        mysql_options(sql->conn, MYSQL_OPT_CONNECT_TIMEOUT,\n                      (const void *)&timeout);\n    }\n",
                      "markdown": "`         do_reconnect = atoi(fields[9].value) ? 1 : 0;\n    }\n    if (fields[10].value != NULL) {\n        timeout = atoi(fields[10].value);\n        mysql_options(sql->conn, MYSQL_OPT_CONNECT_TIMEOUT,\n                      (const void *)&timeout);\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/apr_dbd_mysql.c"
                },
                "region": {
                  "startLine": 1142,
                  "startColumn": 16,
                  "endLine": 1142,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    };\n    unsigned int port = 0;\n#if MYSQL_VERSION_ID >= 50013\n    unsigned int timeout = 0;\n#endif\n    apr_dbd_t *sql = apr_pcalloc(pool, sizeof(apr_dbd_t));\n    sql->fldsz = FIELDSIZE;\n",
                    "rendered": {
                      "text": "    };\n    unsigned int port = 0;\n#if MYSQL_VERSION_ID >= 50013\n    unsigned int timeout = 0;\n#endif\n    apr_dbd_t *sql = apr_pcalloc(pool, sizeof(apr_dbd_t));\n    sql->fldsz = FIELDSIZE;\n",
                      "markdown": "`    };\n    unsigned int port = 0;\n#if MYSQL_VERSION_ID >= 50013\n    unsigned int timeout = 0;\n#endif\n    apr_dbd_t *sql = apr_pcalloc(pool, sizeof(apr_dbd_t));\n    sql->fldsz = FIELDSIZE;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/apr_dbd_mysql.c"
                },
                "region": {
                  "startLine": 1116,
                  "startColumn": 3,
                  "endLine": 1116,
                  "endColumn": 10,
                  "snippet": {
                    "text": "#if MYSQL_VERSION_ID >= 50013\n    my_bool do_reconnect = 1;\n#endif\n    MYSQL *real_conn;\n    unsigned long flags = 0;\n\n    struct {\n",
                    "rendered": {
                      "text": "#if MYSQL_VERSION_ID >= 50013\n    my_bool do_reconnect = 1;\n#endif\n    MYSQL *real_conn;\n    unsigned long flags = 0;\n\n    struct {\n",
                      "markdown": "`#if MYSQL_VERSION_ID >= 50013\n    my_bool do_reconnect = 1;\n#endif\n    MYSQL *real_conn;\n    unsigned long flags = 0;\n\n    struct {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/apr_dbd_pgsql.c"
                },
                "region": {
                  "startLine": 1097,
                  "startColumn": 3,
                  "endLine": 1097,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n    val = apr_palloc(pool, sizeof(*val) * statement->nargs);\n    len = apr_pcalloc(pool, sizeof(*len) * statement->nargs);\n    fmt = apr_pcalloc(pool, sizeof(*fmt) * statement->nargs);\n\n    dbd_pgsql_bbind(pool, statement, values, val, len, fmt);\n\n",
                    "rendered": {
                      "text": "\n    val = apr_palloc(pool, sizeof(*val) * statement->nargs);\n    len = apr_pcalloc(pool, sizeof(*len) * statement->nargs);\n    fmt = apr_pcalloc(pool, sizeof(*fmt) * statement->nargs);\n\n    dbd_pgsql_bbind(pool, statement, values, val, len, fmt);\n\n",
                      "markdown": "`\n    val = apr_palloc(pool, sizeof(*val) * statement->nargs);\n    len = apr_pcalloc(pool, sizeof(*len) * statement->nargs);\n    fmt = apr_pcalloc(pool, sizeof(*fmt) * statement->nargs);\n\n    dbd_pgsql_bbind(pool, statement, values, val, len, fmt);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/apr_dbd_pgsql.c"
                },
                "region": {
                  "startLine": 1055,
                  "startColumn": 3,
                  "endLine": 1055,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n    val = apr_palloc(pool, sizeof(*val) * statement->nargs);\n    len = apr_pcalloc(pool, sizeof(*len) * statement->nargs);\n    fmt = apr_pcalloc(pool, sizeof(*fmt) * statement->nargs);\n\n    dbd_pgsql_bbind(pool, statement, values, val, len, fmt);\n\n",
                    "rendered": {
                      "text": "\n    val = apr_palloc(pool, sizeof(*val) * statement->nargs);\n    len = apr_pcalloc(pool, sizeof(*len) * statement->nargs);\n    fmt = apr_pcalloc(pool, sizeof(*fmt) * statement->nargs);\n\n    dbd_pgsql_bbind(pool, statement, values, val, len, fmt);\n\n",
                      "markdown": "`\n    val = apr_palloc(pool, sizeof(*val) * statement->nargs);\n    len = apr_pcalloc(pool, sizeof(*len) * statement->nargs);\n    fmt = apr_pcalloc(pool, sizeof(*fmt) * statement->nargs);\n\n    dbd_pgsql_bbind(pool, statement, values, val, len, fmt);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/apr_dbd_pgsql.c"
                },
                "region": {
                  "startLine": 936,
                  "startColumn": 3,
                  "endLine": 936,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n    val = apr_palloc(pool, sizeof(*val) * statement->nargs);\n    len = apr_pcalloc(pool, sizeof(*len) * statement->nargs);\n    fmt = apr_pcalloc(pool, sizeof(*fmt) * statement->nargs);\n\n    dbd_pgsql_bind(statement, values, val, len, fmt);\n\n",
                    "rendered": {
                      "text": "\n    val = apr_palloc(pool, sizeof(*val) * statement->nargs);\n    len = apr_pcalloc(pool, sizeof(*len) * statement->nargs);\n    fmt = apr_pcalloc(pool, sizeof(*fmt) * statement->nargs);\n\n    dbd_pgsql_bind(statement, values, val, len, fmt);\n\n",
                      "markdown": "`\n    val = apr_palloc(pool, sizeof(*val) * statement->nargs);\n    len = apr_pcalloc(pool, sizeof(*len) * statement->nargs);\n    fmt = apr_pcalloc(pool, sizeof(*fmt) * statement->nargs);\n\n    dbd_pgsql_bind(statement, values, val, len, fmt);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/apr_dbd_pgsql.c"
                },
                "region": {
                  "startLine": 732,
                  "startColumn": 3,
                  "endLine": 732,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n    val = apr_palloc(pool, sizeof(*val) * statement->nargs);\n    len = apr_pcalloc(pool, sizeof(*len) * statement->nargs);\n    fmt = apr_pcalloc(pool, sizeof(*fmt) * statement->nargs);\n\n    dbd_pgsql_bind(statement, values, val, len, fmt);\n\n",
                    "rendered": {
                      "text": "\n    val = apr_palloc(pool, sizeof(*val) * statement->nargs);\n    len = apr_pcalloc(pool, sizeof(*len) * statement->nargs);\n    fmt = apr_pcalloc(pool, sizeof(*fmt) * statement->nargs);\n\n    dbd_pgsql_bind(statement, values, val, len, fmt);\n\n",
                      "markdown": "`\n    val = apr_palloc(pool, sizeof(*val) * statement->nargs);\n    len = apr_pcalloc(pool, sizeof(*len) * statement->nargs);\n    fmt = apr_pcalloc(pool, sizeof(*fmt) * statement->nargs);\n\n    dbd_pgsql_bind(statement, values, val, len, fmt);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/apr_dbd_pgsql.c"
                },
                "region": {
                  "startLine": 540,
                  "startColumn": 37,
                  "endLine": 540,
                  "endColumn": 43,
                  "snippet": {
                    "text": "            args[i] = \"timestamp\";\n            break;\n        case APR_DBD_TYPE_ZTIMESTAMP:\n            args[i] = \"timestamp with time zone\";\n            break;\n        case APR_DBD_TYPE_BLOB:\n        case APR_DBD_TYPE_CLOB:\n",
                    "rendered": {
                      "text": "            args[i] = \"timestamp\";\n            break;\n        case APR_DBD_TYPE_ZTIMESTAMP:\n            args[i] = \"timestamp with time zone\";\n            break;\n        case APR_DBD_TYPE_BLOB:\n        case APR_DBD_TYPE_CLOB:\n",
                      "markdown": "`            args[i] = \"timestamp\";\n            break;\n        case APR_DBD_TYPE_ZTIMESTAMP:\n            args[i] = \"timestamp with time zone\";\n            break;\n        case APR_DBD_TYPE_BLOB:\n        case APR_DBD_TYPE_CLOB:\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apu_errno.h"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 55,
                  "endLine": 231,
                  "endColumn": 63,
                  "snippet": {
                    "text": " */\n#define APR_STATUS_IS_INAPPROPRIATE_AUTH(s)        ((s) == APR_INAPPROPRIATE_AUTH)\n/**\n * Invalid credentials were presented (e.g., the wrong password).\n */\n#define APR_STATUS_IS_INVALID_CREDENTIALS(s)        ((s) == APR_INVALID_CREDENTIALS)\n/**\n",
                    "rendered": {
                      "text": " */\n#define APR_STATUS_IS_INAPPROPRIATE_AUTH(s)        ((s) == APR_INAPPROPRIATE_AUTH)\n/**\n * Invalid credentials were presented (e.g., the wrong password).\n */\n#define APR_STATUS_IS_INVALID_CREDENTIALS(s)        ((s) == APR_INVALID_CREDENTIALS)\n/**\n",
                      "markdown": "` */\n#define APR_STATUS_IS_INAPPROPRIATE_AUTH(s)        ((s) == APR_INAPPROPRIATE_AUTH)\n/**\n * Invalid credentials were presented (e.g., the wrong password).\n */\n#define APR_STATUS_IS_INVALID_CREDENTIALS(s)        ((s) == APR_INVALID_CREDENTIALS)\n/**\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apu_errno.h"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 51,
                  "endLine": 227,
                  "endColumn": 59,
                  "snippet": {
                    "text": "#define APR_STATUS_IS_PROXY_AUTH(s)        ((s) == APR_PROXY_AUTH)\n/**\n * Inappropriate authentication was specified (e.g., simple auth\n * was specified but the entry does not have a userPassword attribute).\n */\n#define APR_STATUS_IS_INAPPROPRIATE_AUTH(s)        ((s) == APR_INAPPROPRIATE_AUTH)\n/**\n",
                    "rendered": {
                      "text": "#define APR_STATUS_IS_PROXY_AUTH(s)        ((s) == APR_PROXY_AUTH)\n/**\n * Inappropriate authentication was specified (e.g., simple auth\n * was specified but the entry does not have a userPassword attribute).\n */\n#define APR_STATUS_IS_INAPPROPRIATE_AUTH(s)        ((s) == APR_INAPPROPRIATE_AUTH)\n/**\n",
                      "markdown": "`#define APR_STATUS_IS_PROXY_AUTH(s)        ((s) == APR_PROXY_AUTH)\n/**\n * Inappropriate authentication was specified (e.g., simple auth\n * was specified but the entry does not have a userPassword attribute).\n */\n#define APR_STATUS_IS_INAPPROPRIATE_AUTH(s)        ((s) == APR_INAPPROPRIATE_AUTH)\n/**\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/misc/unix/env.c"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 30,
                  "endLine": 31,
                  "endColumn": 37,
                  "snippet": {
                    "text": "#include <stdlib.h>\n#endif\n\nAPR_DECLARE(apr_status_t) apr_env_get(char **value,\n                                      const char *envvar,\n                                      apr_pool_t *pool)\n{\n",
                    "rendered": {
                      "text": "#include <stdlib.h>\n#endif\n\nAPR_DECLARE(apr_status_t) apr_env_get(char **value,\n                                      const char *envvar,\n                                      apr_pool_t *pool)\n{\n",
                      "markdown": "`#include <stdlib.h>\n#endif\n\nAPR_DECLARE(apr_status_t) apr_env_get(char **value,\n                                      const char *envvar,\n                                      apr_pool_t *pool)\n{\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/misc/win32/utf8.c"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 24,
                  "endLine": 117,
                  "endColumn": 32,
                  "snippet": {
                    "text": "                        return APR_EINVAL;\n                }\n                newch = ch & ~mask;\n                eating = expect + 1;\n                if (*inbytes <= expect)\n                    return APR_INCOMPLETE;\n                /* Reject values of excessive leading 0 bits\n",
                    "rendered": {
                      "text": "                        return APR_EINVAL;\n                }\n                newch = ch & ~mask;\n                eating = expect + 1;\n                if (*inbytes <= expect)\n                    return APR_INCOMPLETE;\n                /* Reject values of excessive leading 0 bits\n",
                      "markdown": "`                        return APR_EINVAL;\n                }\n                newch = ch & ~mask;\n                eating = expect + 1;\n                if (*inbytes <= expect)\n                    return APR_INCOMPLETE;\n                /* Reject values of excessive leading 0 bits\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/misc/win32/utf8.c"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 15,
                  "endLine": 110,
                  "endColumn": 23,
                  "snippet": {
                    "text": "                 * or lead byte and leading zeros mask.\n                 */\n                mask = 0340;\n                expect = 1;\n                while ((ch & mask) == mask) {\n                    mask |= mask >> 1;\n                    if (++expect > 3) /* (or 5 for a utf-32 code point) */\n",
                    "rendered": {
                      "text": "                 * or lead byte and leading zeros mask.\n                 */\n                mask = 0340;\n                expect = 1;\n                while ((ch & mask) == mask) {\n                    mask |= mask >> 1;\n                    if (++expect > 3) /* (or 5 for a utf-32 code point) */\n",
                      "markdown": "`                 * or lead byte and leading zeros mask.\n                 */\n                mask = 0340;\n                expect = 1;\n                while ((ch & mask) == mask) {\n                    mask |= mask >> 1;\n                    if (++expect > 3) /* (or 5 for a utf-32 code point) */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/SConstruct"
                },
                "region": {
                  "startLine": 49,
                  "endLine": 49,
                  "endColumn": 18,
                  "snippet": {
                    "text": "# TODO: Support debug/release builds\ntargets = SConscript(\"SConscript\", variant_dir='builds/default', duplicate=0)\n\nenv.Default(targets)\n",
                    "rendered": {
                      "text": "# TODO: Support debug/release builds\ntargets = SConscript(\"SConscript\", variant_dir='builds/default', duplicate=0)\n\nenv.Default(targets)\n",
                      "markdown": "`# TODO: Support debug/release builds\ntargets = SConscript(\"SConscript\", variant_dir='builds/default', duplicate=0)\n\nenv.Default(targets)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/SConstruct"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 25,
                  "endColumn": 4,
                  "snippet": {
                    "text": "Help(vars.GenerateHelpText(env))\n\nenv.APRHints()\n\nenv = env.APRAutoconf()\n\nif env['maintainer_mode']:\n  if env.is_gcc():\n",
                    "rendered": {
                      "text": "Help(vars.GenerateHelpText(env))\n\nenv.APRHints()\n\nenv = env.APRAutoconf()\n\nif env['maintainer_mode']:\n  if env.is_gcc():\n",
                      "markdown": "`Help(vars.GenerateHelpText(env))\n\nenv.APRHints()\n\nenv = env.APRAutoconf()\n\nif env['maintainer_mode']:\n  if env.is_gcc():\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/SConstruct"
                },
                "region": {
                  "startLine": 17,
                  "endLine": 18,
                  "endColumn": 4,
                  "snippet": {
                    "text": "vars.Add('ipv6', 'IPv6 support', 1)\nvars.Add(EnumVariable('pool_debug', 'Turn on pools debugging', 'no',\n                      allowed_values=('yes', 'no', 'verbose', 'verbose-alloc', 'lifetime', 'owner', 'all')))\n\nenv = APREnv(args=ARGUMENTS, variables=vars)\n\n\nHelp(vars.GenerateHelpText(env))\n",
                    "rendered": {
                      "text": "vars.Add('ipv6', 'IPv6 support', 1)\nvars.Add(EnumVariable('pool_debug', 'Turn on pools debugging', 'no',\n                      allowed_values=('yes', 'no', 'verbose', 'verbose-alloc', 'lifetime', 'owner', 'all')))\n\nenv = APREnv(args=ARGUMENTS, variables=vars)\n\n\nHelp(vars.GenerateHelpText(env))\n",
                      "markdown": "`vars.Add('ipv6', 'IPv6 support', 1)\nvars.Add(EnumVariable('pool_debug', 'Turn on pools debugging', 'no',\n                      allowed_values=('yes', 'no', 'verbose', 'verbose-alloc', 'lifetime', 'owner', 'all')))\n\nenv = APREnv(args=ARGUMENTS, variables=vars)\n\n\nHelp(vars.GenerateHelpText(env))\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/SConstruct"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 58,
                  "endLine": 11,
                  "endColumn": 64,
                  "snippet": {
                    "text": "vars = Variables('build.py')\n\nvars.Add('prefix', 'Installation Prefix', '/usr/local')\nvars.Add('maintainer_mode', 'Turn on debugging and compile time warnings', 0)\nvars.Add('profile', 'Turn on profiling for the build (GCC)', 0)\nvars.Add('lfs', 'Large file support on 32-bit platforms', 1)\nvars.Add('ipv6', 'IPv6 support', 1)\n",
                    "rendered": {
                      "text": "vars = Variables('build.py')\n\nvars.Add('prefix', 'Installation Prefix', '/usr/local')\nvars.Add('maintainer_mode', 'Turn on debugging and compile time warnings', 0)\nvars.Add('profile', 'Turn on profiling for the build (GCC)', 0)\nvars.Add('lfs', 'Large file support on 32-bit platforms', 1)\nvars.Add('ipv6', 'IPv6 support', 1)\n",
                      "markdown": "`vars = Variables('build.py')\n\nvars.Add('prefix', 'Installation Prefix', '/usr/local')\nvars.Add('maintainer_mode', 'Turn on debugging and compile time warnings', 0)\nvars.Add('profile', 'Turn on profiling for the build (GCC)', 0)\nvars.Add('lfs', 'Large file support on 32-bit platforms', 1)\nvars.Add('ipv6', 'IPv6 support', 1)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/README.cmake"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 42,
                  "endLine": 79,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n   CMAKE_BUILD_TYPE\n\n       For NMake Makefiles the choices are at least DEBUG, RELEASE,\n       RELWITHDEBINFO, and MINSIZEREL\n       Other backends make have other selections.\n\n",
                    "rendered": {
                      "text": "\n   CMAKE_BUILD_TYPE\n\n       For NMake Makefiles the choices are at least DEBUG, RELEASE,\n       RELWITHDEBINFO, and MINSIZEREL\n       Other backends make have other selections.\n\n",
                      "markdown": "`\n   CMAKE_BUILD_TYPE\n\n       For NMake Makefiles the choices are at least DEBUG, RELEASE,\n       RELWITHDEBINFO, and MINSIZEREL\n       Other backends make have other selections.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/README.cmake"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 33,
                  "endLine": 39,
                  "endColumn": 41,
                  "snippet": {
                    "text": "     -DAPR-specific-flags\n     d:/path/to/aprsource\n\n   Alternately, use cmake-gui and update settings in the GUI.\n\n   APR feature flags:\n\n",
                    "rendered": {
                      "text": "     -DAPR-specific-flags\n     d:/path/to/aprsource\n\n   Alternately, use cmake-gui and update settings in the GUI.\n\n   APR feature flags:\n\n",
                      "markdown": "`     -DAPR-specific-flags\n     d:/path/to/aprsource\n\n   Alternately, use cmake-gui and update settings in the GUI.\n\n   APR feature flags:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/README.cmake"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 35,
                  "endLine": 59,
                  "endColumn": 44,
                  "snippet": {
                    "text": "                              Default: OFF\n       APU_HAVE_ODBC          Build ODBC DBD driver\n                              Default: ON\n       APU_HAVE_SQLITE3       Build SQLite3 DBD driver\n                              Default: OFF\n       APU_HAVE_PGSQL         Build PostgreSQL DBD driver\n                              Default: OFF\n",
                    "rendered": {
                      "text": "                              Default: OFF\n       APU_HAVE_ODBC          Build ODBC DBD driver\n                              Default: ON\n       APU_HAVE_SQLITE3       Build SQLite3 DBD driver\n                              Default: OFF\n       APU_HAVE_PGSQL         Build PostgreSQL DBD driver\n                              Default: OFF\n",
                      "markdown": "`                              Default: OFF\n       APU_HAVE_ODBC          Build ODBC DBD driver\n                              Default: ON\n       APU_HAVE_SQLITE3       Build SQLite3 DBD driver\n                              Default: OFF\n       APU_HAVE_PGSQL         Build PostgreSQL DBD driver\n                              Default: OFF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/README.cmake"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 59,
                  "endLine": 55,
                  "snippet": {
                    "text": "                              building httpd and Subversion but which aren't\n                              intended for use by applications.\n                              Default: OFF\n       APU_HAVE_CRYPTO        Build crypt support (only the OpenSSL\n                              implementation is currently supported)\n                              Default: OFF\n       APU_HAVE_ODBC          Build ODBC DBD driver\n                              Default: ON\n",
                    "rendered": {
                      "text": "                              building httpd and Subversion but which aren't\n                              intended for use by applications.\n                              Default: OFF\n       APU_HAVE_CRYPTO        Build crypt support (only the OpenSSL\n                              implementation is currently supported)\n                              Default: OFF\n       APU_HAVE_ODBC          Build ODBC DBD driver\n                              Default: ON\n",
                      "markdown": "`                              building httpd and Subversion but which aren't\n                              intended for use by applications.\n                              Default: OFF\n       APU_HAVE_CRYPTO        Build crypt support (only the OpenSSL\n                              implementation is currently supported)\n                              Default: OFF\n       APU_HAVE_ODBC          Build ODBC DBD driver\n                              Default: ON\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/README.cmake"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 24,
                  "snippet": {
                    "text": "* Iconv\n* Libxml2\n* SQlite3\n* OpenSSL\n\nHow to build\n------------\n\n",
                    "rendered": {
                      "text": "* Iconv\n* Libxml2\n* SQlite3\n* OpenSSL\n\nHow to build\n------------\n\n",
                      "markdown": "`* Iconv\n* Libxml2\n* SQlite3\n* OpenSSL\n\nHow to build\n------------\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/README.cmake"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 23,
                  "snippet": {
                    "text": "* Expat\n* Iconv\n* Libxml2\n* SQlite3\n* OpenSSL\n\nHow to build\n------------\n",
                    "rendered": {
                      "text": "* Expat\n* Iconv\n* Libxml2\n* SQlite3\n* OpenSSL\n\nHow to build\n------------\n",
                      "markdown": "`* Expat\n* Iconv\n* Libxml2\n* SQlite3\n* OpenSSL\n\nHow to build\n------------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/poll/unix/poll.c"
                },
                "region": {
                  "startLine": 411,
                  "startColumn": 7,
                  "endLine": 411,
                  "endColumn": 16,
                  "snippet": {
                    "text": "#endif\n\n    if (timeout > 0) {\n        timeout = (timeout + 999) / 1000;\n    }\n\n#ifdef WIN32\n",
                    "rendered": {
                      "text": "#endif\n\n    if (timeout > 0) {\n        timeout = (timeout + 999) / 1000;\n    }\n\n#ifdef WIN32\n",
                      "markdown": "`#endif\n\n    if (timeout > 0) {\n        timeout = (timeout + 999) / 1000;\n    }\n\n#ifdef WIN32\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/poll/unix/poll.c"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 7,
                  "endLine": 251,
                  "endColumn": 16,
                  "snippet": {
                    "text": "#endif\n\n    if (timeout > 0) {\n        timeout = (timeout + 999) / 1000;\n    }\n\n#ifdef WIN32\n",
                    "rendered": {
                      "text": "#endif\n\n    if (timeout > 0) {\n        timeout = (timeout + 999) / 1000;\n    }\n\n#ifdef WIN32\n",
                      "markdown": "`#endif\n\n    if (timeout > 0) {\n        timeout = (timeout + 999) / 1000;\n    }\n\n#ifdef WIN32\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/poll/unix/poll.c"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 7,
                  "endLine": 118,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\n    if (timeout > 0) {\n        /* convert microseconds to milliseconds (round up) */\n        timeout = (timeout + 999) / 1000;\n    }\n\n    i = poll(pollset, num_to_poll, timeout);\n",
                    "rendered": {
                      "text": "\n    if (timeout > 0) {\n        /* convert microseconds to milliseconds (round up) */\n        timeout = (timeout + 999) / 1000;\n    }\n\n    i = poll(pollset, num_to_poll, timeout);\n",
                      "markdown": "`\n    if (timeout > 0) {\n        /* convert microseconds to milliseconds (round up) */\n        timeout = (timeout + 999) / 1000;\n    }\n\n    i = poll(pollset, num_to_poll, timeout);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/poll/unix/epoll.c"
                },
                "region": {
                  "startLine": 449,
                  "startColumn": 7,
                  "endLine": 449,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    apr_status_t rv = APR_SUCCESS;\n\n    if (timeout > 0) {\n        timeout = (timeout + 999) / 1000;\n    }\n\n    ret = epoll_wait(pollcb->fd, pollcb->pollset.epoll, pollcb->nalloc,\n",
                    "rendered": {
                      "text": "    apr_status_t rv = APR_SUCCESS;\n\n    if (timeout > 0) {\n        timeout = (timeout + 999) / 1000;\n    }\n\n    ret = epoll_wait(pollcb->fd, pollcb->pollset.epoll, pollcb->nalloc,\n",
                      "markdown": "`    apr_status_t rv = APR_SUCCESS;\n\n    if (timeout > 0) {\n        timeout = (timeout + 999) / 1000;\n    }\n\n    ret = epoll_wait(pollcb->fd, pollcb->pollset.epoll, pollcb->nalloc,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/poll/unix/epoll.c"
                },
                "region": {
                  "startLine": 268,
                  "startColumn": 7,
                  "endLine": 268,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    *num = 0;\n\n    if (timeout > 0) {\n        timeout = (timeout + 999) / 1000;\n    }\n\n    ret = epoll_wait(pollset->p->epoll_fd, pollset->p->pollset, pollset->nalloc,\n",
                    "rendered": {
                      "text": "    *num = 0;\n\n    if (timeout > 0) {\n        timeout = (timeout + 999) / 1000;\n    }\n\n    ret = epoll_wait(pollset->p->epoll_fd, pollset->p->pollset, pollset->nalloc,\n",
                      "markdown": "`    *num = 0;\n\n    if (timeout > 0) {\n        timeout = (timeout + 999) / 1000;\n    }\n\n    ret = epoll_wait(pollset->p->epoll_fd, pollset->p->pollset, pollset->nalloc,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/poll/unix/z_asio.c"
                },
                "region": {
                  "startLine": 393,
                  "startColumn": 39,
                  "endLine": 393,
                  "endColumn": 43,
                  "snippet": {
                    "text": "        }\n        else {\n            elem = (asio_elem_t *) apr_pcalloc(pollset->pool, sizeof(asio_elem_t));\n            DBG1(3, \"alloced new memory at %08p\\n\", elem);\n\n            elem->a.aio_notifytype = AIO_MSGQ;\n            elem->a.aio_msgev_qid  = priv->msg_q;\n",
                    "rendered": {
                      "text": "        }\n        else {\n            elem = (asio_elem_t *) apr_pcalloc(pollset->pool, sizeof(asio_elem_t));\n            DBG1(3, \"alloced new memory at %08p\\n\", elem);\n\n            elem->a.aio_notifytype = AIO_MSGQ;\n            elem->a.aio_msgev_qid  = priv->msg_q;\n",
                      "markdown": "`        }\n        else {\n            elem = (asio_elem_t *) apr_pcalloc(pollset->pool, sizeof(asio_elem_t));\n            DBG1(3, \"alloced new memory at %08p\\n\", elem);\n\n            elem->a.aio_notifytype = AIO_MSGQ;\n            elem->a.aio_msgev_qid  = priv->msg_q;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/poll/unix/z_asio.c"
                },
                "region": {
                  "startLine": 387,
                  "startColumn": 41,
                  "endLine": 387,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        if (!APR_RING_EMPTY(&(priv->free_ring), asio_elem_t, link)) {\n            elem = APR_RING_FIRST(&(priv->free_ring));\n            APR_RING_REMOVE(elem, link);\n            DBG1(3, \"used recycled memory at %08p\\n\", elem);\n            elem->state = ASIO_INIT;\n            elem->a.aio_cflags = 0;\n        }\n",
                    "rendered": {
                      "text": "        if (!APR_RING_EMPTY(&(priv->free_ring), asio_elem_t, link)) {\n            elem = APR_RING_FIRST(&(priv->free_ring));\n            APR_RING_REMOVE(elem, link);\n            DBG1(3, \"used recycled memory at %08p\\n\", elem);\n            elem->state = ASIO_INIT;\n            elem->a.aio_cflags = 0;\n        }\n",
                      "markdown": "`        if (!APR_RING_EMPTY(&(priv->free_ring), asio_elem_t, link)) {\n            elem = APR_RING_FIRST(&(priv->free_ring));\n            APR_RING_REMOVE(elem, link);\n            DBG1(3, \"used recycled memory at %08p\\n\", elem);\n            elem->state = ASIO_INIT;\n            elem->a.aio_cflags = 0;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/poll/unix/z_asio.c"
                },
                "region": {
                  "startLine": 557,
                  "startColumn": 7,
                  "endLine": 557,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    DBG(4, \"entered\\n\");\n\n    if (timeout > 0) {\n        timeout = (timeout + 999) / 1000;\n    }\n    rv = poll(priv->pollset, pollset->nelts, timeout);\n    (*num) = rv;\n",
                    "rendered": {
                      "text": "    DBG(4, \"entered\\n\");\n\n    if (timeout > 0) {\n        timeout = (timeout + 999) / 1000;\n    }\n    rv = poll(priv->pollset, pollset->nelts, timeout);\n    (*num) = rv;\n",
                      "markdown": "`    DBG(4, \"entered\\n\");\n\n    if (timeout > 0) {\n        timeout = (timeout + 999) / 1000;\n    }\n    rv = poll(priv->pollset, pollset->nelts, timeout);\n    (*num) = rv;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/poll/unix/z_asio.c"
                },
                "region": {
                  "startLine": 507,
                  "startColumn": 25,
                  "endLine": 507,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\n    elem = apr_hash_get(priv->elems, &(fd), sizeof(int));\n    if (elem == NULL) {\n        DBG1(1, \"couldn't find fd %d\\n\", fd);\n        rv = APR_NOTFOUND;\n    } else {\n        DBG1(5, \"hash found fd %d\\n\", fd);\n",
                    "rendered": {
                      "text": "\n    elem = apr_hash_get(priv->elems, &(fd), sizeof(int));\n    if (elem == NULL) {\n        DBG1(1, \"couldn't find fd %d\\n\", fd);\n        rv = APR_NOTFOUND;\n    } else {\n        DBG1(5, \"hash found fd %d\\n\", fd);\n",
                      "markdown": "`\n    elem = apr_hash_get(priv->elems, &(fd), sizeof(int));\n    if (elem == NULL) {\n        DBG1(1, \"couldn't find fd %d\\n\", fd);\n        rv = APR_NOTFOUND;\n    } else {\n        DBG1(5, \"hash found fd %d\\n\", fd);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/poll/os2/poll.c"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 7,
                  "endLine": 65,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\n    if (timeout > 0) {\n        /* convert microseconds to milliseconds (round up) */\n        timeout = (timeout + 999) / 1000;\n    }\n\n    i = select(pollset, num_read, num_write, num_except, timeout);\n",
                    "rendered": {
                      "text": "\n    if (timeout > 0) {\n        /* convert microseconds to milliseconds (round up) */\n        timeout = (timeout + 999) / 1000;\n    }\n\n    i = select(pollset, num_read, num_write, num_except, timeout);\n",
                      "markdown": "`\n    if (timeout > 0) {\n        /* convert microseconds to milliseconds (round up) */\n        timeout = (timeout + 999) / 1000;\n    }\n\n    i = select(pollset, num_read, num_write, num_except, timeout);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/poll/os2/pollset.c"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 7,
                  "endLine": 226,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    (*num) = 0;\n\n    if (timeout > 0) {\n        timeout = (timeout + 999) / 1000;\n    }\n\n    rv = select(pollresult, pollset->num_read, pollset->num_write, pollset->num_except, timeout);\n",
                    "rendered": {
                      "text": "    (*num) = 0;\n\n    if (timeout > 0) {\n        timeout = (timeout + 999) / 1000;\n    }\n\n    rv = select(pollresult, pollset->num_read, pollset->num_write, pollset->num_except, timeout);\n",
                      "markdown": "`    (*num) = 0;\n\n    if (timeout > 0) {\n        timeout = (timeout + 999) / 1000;\n    }\n\n    rv = select(pollresult, pollset->num_read, pollset->num_write, pollset->num_except, timeout);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/rpm/apr.spec.in"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 1,
                  "endLine": 197,
                  "endColumn": 9,
                  "snippet": {
                    "text": "- build depends on python\n\n* Tue Jun 22 2004 Graham Leggett <minfrin@sharp.fm> 1.0.0-1\n- update to support v1.0.0 of APR\n\n* Tue Jun 22 2004 Graham Leggett <minfrin@sharp.fm> 1.0.0-1\n- derived from Fedora Core apr.spec\n",
                    "rendered": {
                      "text": "- build depends on python\n\n* Tue Jun 22 2004 Graham Leggett <minfrin@sharp.fm> 1.0.0-1\n- update to support v1.0.0 of APR\n\n* Tue Jun 22 2004 Graham Leggett <minfrin@sharp.fm> 1.0.0-1\n- derived from Fedora Core apr.spec\n",
                      "markdown": "`- build depends on python\n\n* Tue Jun 22 2004 Graham Leggett <minfrin@sharp.fm> 1.0.0-1\n- update to support v1.0.0 of APR\n\n* Tue Jun 22 2004 Graham Leggett <minfrin@sharp.fm> 1.0.0-1\n- derived from Fedora Core apr.spec\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/rpm/apr.spec.in"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 1,
                  "endLine": 193,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n%changelog\n* Sat Aug 30 2008 Graham Leggett <minfrin@sharp.fm> 1.3.3\n- update to depend on the bzip2 binary\n- build depends on python\n\n* Tue Jun 22 2004 Graham Leggett <minfrin@sharp.fm> 1.0.0-1\n",
                    "rendered": {
                      "text": "\n%changelog\n* Sat Aug 30 2008 Graham Leggett <minfrin@sharp.fm> 1.3.3\n- update to depend on the bzip2 binary\n- build depends on python\n\n* Tue Jun 22 2004 Graham Leggett <minfrin@sharp.fm> 1.0.0-1\n",
                      "markdown": "`\n%changelog\n* Sat Aug 30 2008 Graham Leggett <minfrin@sharp.fm> 1.3.3\n- update to depend on the bzip2 binary\n- build depends on python\n\n* Tue Jun 22 2004 Graham Leggett <minfrin@sharp.fm> 1.0.0-1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/rpm/apr.spec.in"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 6,
                  "endLine": 169,
                  "snippet": {
                    "text": "%defattr(-,root,root,-)\n%{_libdir}/apr-%{aprver}/apr_dbd_odbc*\n\n%files openssl\n%defattr(-,root,root,-)\n%{_libdir}/apr-%{aprver}/apr_crypto_openssl*\n\n%files nss\n",
                    "rendered": {
                      "text": "%defattr(-,root,root,-)\n%{_libdir}/apr-%{aprver}/apr_dbd_odbc*\n\n%files openssl\n%defattr(-,root,root,-)\n%{_libdir}/apr-%{aprver}/apr_crypto_openssl*\n\n%files nss\n",
                      "markdown": "`%defattr(-,root,root,-)\n%{_libdir}/apr-%{aprver}/apr_dbd_odbc*\n\n%files openssl\n%defattr(-,root,root,-)\n%{_libdir}/apr-%{aprver}/apr_crypto_openssl*\n\n%files nss\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/rpm/apr.spec.in"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 6,
                  "endLine": 157,
                  "snippet": {
                    "text": "%defattr(-,root,root,-)\n%{_libdir}/apr-%{aprver}/apr_dbd_pgsql*\n\n%files mysql\n%defattr(-,root,root,-)\n%{_libdir}/apr-%{aprver}/apr_dbd_mysql*\n\n%files sqlite\n",
                    "rendered": {
                      "text": "%defattr(-,root,root,-)\n%{_libdir}/apr-%{aprver}/apr_dbd_pgsql*\n\n%files mysql\n%defattr(-,root,root,-)\n%{_libdir}/apr-%{aprver}/apr_dbd_mysql*\n\n%files sqlite\n",
                      "markdown": "`%defattr(-,root,root,-)\n%{_libdir}/apr-%{aprver}/apr_dbd_pgsql*\n\n%files mysql\n%defattr(-,root,root,-)\n%{_libdir}/apr-%{aprver}/apr_dbd_mysql*\n\n%files sqlite\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/rpm/apr.spec.in"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 39,
                  "endLine": 130,
                  "endColumn": 3,
                  "snippet": {
                    "text": "rm -rf $RPM_BUILD_ROOT\nmake install DESTDIR=$RPM_BUILD_ROOT\n\n# Move docs to more convenient location\nmv docs/dox/html html\n\n# Unpackaged files:\nrm -f $RPM_BUILD_ROOT%{_libdir}/apr.exp\n",
                    "rendered": {
                      "text": "rm -rf $RPM_BUILD_ROOT\nmake install DESTDIR=$RPM_BUILD_ROOT\n\n# Move docs to more convenient location\nmv docs/dox/html html\n\n# Unpackaged files:\nrm -f $RPM_BUILD_ROOT%{_libdir}/apr.exp\n",
                      "markdown": "`rm -rf $RPM_BUILD_ROOT\nmake install DESTDIR=$RPM_BUILD_ROOT\n\n# Move docs to more convenient location\nmv docs/dox/html html\n\n# Unpackaged files:\nrm -f $RPM_BUILD_ROOT%{_libdir}/apr.exp\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/rpm/apr.spec.in"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 22,
                  "endLine": 103,
                  "endColumn": 30,
                  "snippet": {
                    "text": "%setup -q\n\n%build\n# regenerate configure script etc.\n./buildconf\n%configure \\\n        --prefix=/usr \\\n",
                    "rendered": {
                      "text": "%setup -q\n\n%build\n# regenerate configure script etc.\n./buildconf\n%configure \\\n        --prefix=/usr \\\n",
                      "markdown": "`%setup -q\n\n%build\n# regenerate configure script etc.\n./buildconf\n%configure \\\n        --prefix=/usr \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/rpm/apr.spec.in"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 12,
                  "endLine": 88,
                  "snippet": {
                    "text": "BuildRequires: openssl-devel\nRequires: apr-util = %{version}-%{release}\n\n%description openssl\nThis package provides crypto support for apr-util based on OpenSSL.\n\n%package nss\nGroup: Development/Libraries\n",
                    "rendered": {
                      "text": "BuildRequires: openssl-devel\nRequires: apr-util = %{version}-%{release}\n\n%description openssl\nThis package provides crypto support for apr-util based on OpenSSL.\n\n%package nss\nGroup: Development/Libraries\n",
                      "markdown": "`BuildRequires: openssl-devel\nRequires: apr-util = %{version}-%{release}\n\n%description openssl\nThis package provides crypto support for apr-util based on OpenSSL.\n\n%package nss\nGroup: Development/Libraries\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/rpm/apr.spec.in"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 28,
                  "endLine": 83,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n%package openssl\nGroup: Development/Libraries\nSummary: APR utility library OpenSSL crypto support\nBuildRequires: openssl-devel\nRequires: apr-util = %{version}-%{release}\n\n",
                    "rendered": {
                      "text": "\n%package openssl\nGroup: Development/Libraries\nSummary: APR utility library OpenSSL crypto support\nBuildRequires: openssl-devel\nRequires: apr-util = %{version}-%{release}\n\n",
                      "markdown": "`\n%package openssl\nGroup: Development/Libraries\nSummary: APR utility library OpenSSL crypto support\nBuildRequires: openssl-devel\nRequires: apr-util = %{version}-%{release}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/rpm/apr.spec.in"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 8,
                  "endLine": 82,
                  "snippet": {
                    "text": "This package provides the ODBC driver for the apr-util DBD\n(database abstraction) interface.\n\n%package openssl\nGroup: Development/Libraries\nSummary: APR utility library OpenSSL crypto support\nBuildRequires: openssl-devel\nRequires: apr-util = %{version}-%{release}\n",
                    "rendered": {
                      "text": "This package provides the ODBC driver for the apr-util DBD\n(database abstraction) interface.\n\n%package openssl\nGroup: Development/Libraries\nSummary: APR utility library OpenSSL crypto support\nBuildRequires: openssl-devel\nRequires: apr-util = %{version}-%{release}\n",
                      "markdown": "`This package provides the ODBC driver for the apr-util DBD\n(database abstraction) interface.\n\n%package openssl\nGroup: Development/Libraries\nSummary: APR utility library OpenSSL crypto support\nBuildRequires: openssl-devel\nRequires: apr-util = %{version}-%{release}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/rpm/apr.spec.in"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 25,
                  "endLine": 58,
                  "endColumn": 32,
                  "snippet": {
                    "text": "Requires: apr-util = %{version}-%{release}\n\n%description mysql\nThis package provides the MySQL driver for the apr-util DBD\n(database abstraction) interface.\n\n%package sqlite\n",
                    "rendered": {
                      "text": "Requires: apr-util = %{version}-%{release}\n\n%description mysql\nThis package provides the MySQL driver for the apr-util DBD\n(database abstraction) interface.\n\n%package sqlite\n",
                      "markdown": "`Requires: apr-util = %{version}-%{release}\n\n%description mysql\nThis package provides the MySQL driver for the apr-util DBD\n(database abstraction) interface.\n\n%package sqlite\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/rpm/apr.spec.in"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 12,
                  "endLine": 58,
                  "snippet": {
                    "text": "BuildRequires: mysql-devel\nRequires: apr-util = %{version}-%{release}\n\n%description mysql\nThis package provides the MySQL driver for the apr-util DBD\n(database abstraction) interface.\n\n%package sqlite\n",
                    "rendered": {
                      "text": "BuildRequires: mysql-devel\nRequires: apr-util = %{version}-%{release}\n\n%description mysql\nThis package provides the MySQL driver for the apr-util DBD\n(database abstraction) interface.\n\n%package sqlite\n",
                      "markdown": "`BuildRequires: mysql-devel\nRequires: apr-util = %{version}-%{release}\n\n%description mysql\nThis package provides the MySQL driver for the apr-util DBD\n(database abstraction) interface.\n\n%package sqlite\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/rpm/apr.spec.in"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 28,
                  "endLine": 53,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n%package mysql\nGroup: Development/Libraries\nSummary: APR utility library MySQL DBD driver\nBuildRequires: mysql-devel\nRequires: apr-util = %{version}-%{release}\n\n",
                    "rendered": {
                      "text": "\n%package mysql\nGroup: Development/Libraries\nSummary: APR utility library MySQL DBD driver\nBuildRequires: mysql-devel\nRequires: apr-util = %{version}-%{release}\n\n",
                      "markdown": "`\n%package mysql\nGroup: Development/Libraries\nSummary: APR utility library MySQL DBD driver\nBuildRequires: mysql-devel\nRequires: apr-util = %{version}-%{release}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/rpm/apr.spec.in"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 8,
                  "endLine": 52,
                  "snippet": {
                    "text": "This package provides the PostgreSQL driver for the apr-util\nDBD (database abstraction) interface.\n\n%package mysql\nGroup: Development/Libraries\nSummary: APR utility library MySQL DBD driver\nBuildRequires: mysql-devel\nRequires: apr-util = %{version}-%{release}\n",
                    "rendered": {
                      "text": "This package provides the PostgreSQL driver for the apr-util\nDBD (database abstraction) interface.\n\n%package mysql\nGroup: Development/Libraries\nSummary: APR utility library MySQL DBD driver\nBuildRequires: mysql-devel\nRequires: apr-util = %{version}-%{release}\n",
                      "markdown": "`This package provides the PostgreSQL driver for the apr-util\nDBD (database abstraction) interface.\n\n%package mysql\nGroup: Development/Libraries\nSummary: APR utility library MySQL DBD driver\nBuildRequires: mysql-devel\nRequires: apr-util = %{version}-%{release}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/build/pkg/README"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 3,
                  "endLine": 1,
                  "endColumn": 11,
                  "snippet": {
                    "text": "The script in this directory will attempt to build a Solaris package\nout of a source tree for APR.\n\nTo build a package, make sure you are in the root of the source tree,\n",
                    "rendered": {
                      "text": "The script in this directory will attempt to build a Solaris package\nout of a source tree for APR.\n\nTo build a package, make sure you are in the root of the source tree,\n",
                      "markdown": "`The script in this directory will attempt to build a Solaris package\nout of a source tree for APR.\n\nTo build a package, make sure you are in the root of the source tree,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                    "rendered": {
                      "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                      "markdown": "`\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                    "rendered": {
                      "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                      "markdown": "`unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                    "rendered": {
                      "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                      "markdown": "`\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                    "rendered": {
                      "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                      "markdown": "`\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                    "rendered": {
                      "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                      "markdown": "`if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                    "rendered": {
                      "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                      "markdown": "`validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 21,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                    "rendered": {
                      "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                      "markdown": "`# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "endLine": 15,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                    "rendered": {
                      "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                      "markdown": "`# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/.git/info/exclude"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                    "rendered": {
                      "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                      "markdown": "`# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/NWGNUmakefile"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 25,
                  "endLine": 121,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n#\n# If this is specified, it will override VERSION value in \n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t= \n\n",
                    "rendered": {
                      "text": "\n#\n# If this is specified, it will override VERSION value in \n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t= \n\n",
                      "markdown": "`\n#\n# If this is specified, it will override VERSION value in \n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t= \n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/NWGNUmakefile"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 30,
                  "endLine": 9,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\t$(EOLIST) \n\n#\n# Get the 'head' of the build environment.  This includes default targets and\n# paths to tools\n#\n\n",
                    "rendered": {
                      "text": "\t$(EOLIST) \n\n#\n# Get the 'head' of the build environment.  This includes default targets and\n# paths to tools\n#\n\n",
                      "markdown": "`\t$(EOLIST) \n\n#\n# Get the 'head' of the build environment.  This includes default targets and\n# paths to tools\n#\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/NWGNUmakefile"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 27,
                  "endLine": 24,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                    "rendered": {
                      "text": "\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                      "markdown": "`\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/NWGNUsockchild"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 25,
                  "endLine": 114,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n#\n# If this is specified, it will override VERSION value in \n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                    "rendered": {
                      "text": "\n#\n# If this is specified, it will override VERSION value in \n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                      "markdown": "`\n#\n# If this is specified, it will override VERSION value in \n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/NWGNUsockchild"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 30,
                  "endLine": 6,
                  "endColumn": 65,
                  "snippet": {
                    "text": "#\n\n#\n# Get the 'head' of the build environment if necessary.  This includes default\n# targets and paths to tools\n#\n\n",
                    "rendered": {
                      "text": "#\n\n#\n# Get the 'head' of the build environment if necessary.  This includes default\n# targets and paths to tools\n#\n\n",
                      "markdown": "`#\n\n#\n# Get the 'head' of the build environment if necessary.  This includes default\n# targets and paths to tools\n#\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/NWGNUsockchild"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 27,
                  "endLine": 15,
                  "endColumn": 31,
                  "snippet": {
                    "text": "endif\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                    "rendered": {
                      "text": "endif\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                      "markdown": "`endif\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/NWGNUtryread"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 25,
                  "endLine": 114,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n#\n# If this is specified, it will override VERSION value in \n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                    "rendered": {
                      "text": "\n#\n# If this is specified, it will override VERSION value in \n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                      "markdown": "`\n#\n# If this is specified, it will override VERSION value in \n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/NWGNUtryread"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 30,
                  "endLine": 6,
                  "endColumn": 65,
                  "snippet": {
                    "text": "#\n\n#\n# Get the 'head' of the build environment if necessary.  This includes default\n# targets and paths to tools\n#\n\n",
                    "rendered": {
                      "text": "#\n\n#\n# Get the 'head' of the build environment if necessary.  This includes default\n# targets and paths to tools\n#\n\n",
                      "markdown": "`#\n\n#\n# Get the 'head' of the build environment if necessary.  This includes default\n# targets and paths to tools\n#\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/NWGNUtryread"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 27,
                  "endLine": 15,
                  "endColumn": 31,
                  "snippet": {
                    "text": "endif\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                    "rendered": {
                      "text": "endif\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                      "markdown": "`endif\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/NWGNUtryread"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 36,
                  "endLine": 99,
                  "snippet": {
                    "text": "# This is used by the link '-desc ' directive. \n# If left blank, NLM_NAME will be used.\n#\nNLM_DESCRIPTION\t= reader NLM to test flock\n\n#\n# This is used by the '-threadname' directive.  If left blank,\n# NLM_NAME Thread will be used.\n",
                    "rendered": {
                      "text": "# This is used by the link '-desc ' directive. \n# If left blank, NLM_NAME will be used.\n#\nNLM_DESCRIPTION\t= reader NLM to test flock\n\n#\n# This is used by the '-threadname' directive.  If left blank,\n# NLM_NAME Thread will be used.\n",
                      "markdown": "`# This is used by the link '-desc ' directive. \n# If left blank, NLM_NAME will be used.\n#\nNLM_DESCRIPTION\t= reader NLM to test flock\n\n#\n# This is used by the '-threadname' directive.  If left blank,\n# NLM_NAME Thread will be used.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testldap.c"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 52,
                  "endLine": 191,
                  "endColumn": 60,
                  "snippet": {
                    "text": "        break;\n    }\n    case APR_LDAP_INTERACT_PASS: {\n        apr_buffer_str_set(&interact->result, \"wrongpassword\", APR_BUFFER_STRING);\n        break;\n    }\n    default:\n",
                    "rendered": {
                      "text": "        break;\n    }\n    case APR_LDAP_INTERACT_PASS: {\n        apr_buffer_str_set(&interact->result, \"wrongpassword\", APR_BUFFER_STRING);\n        break;\n    }\n    default:\n",
                      "markdown": "`        break;\n    }\n    case APR_LDAP_INTERACT_PASS: {\n        apr_buffer_str_set(&interact->result, \"wrongpassword\", APR_BUFFER_STRING);\n        break;\n    }\n    default:\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testlfs.c"
                },
                "region": {
                  "startLine": 328,
                  "startColumn": 44,
                  "endLine": 328,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    off = 0;\n    APR_ASSERT_SUCCESS(tc, \"end-relative seek\",\n                       apr_file_seek(f, APR_END, &off));\n    ABTS_ASSERT(tc, \"end-relative seek still at 8GB\",\n                off == eightGB);\n\n    off = -eightGB;\n",
                    "rendered": {
                      "text": "    off = 0;\n    APR_ASSERT_SUCCESS(tc, \"end-relative seek\",\n                       apr_file_seek(f, APR_END, &off));\n    ABTS_ASSERT(tc, \"end-relative seek still at 8GB\",\n                off == eightGB);\n\n    off = -eightGB;\n",
                      "markdown": "`    off = 0;\n    APR_ASSERT_SUCCESS(tc, \"end-relative seek\",\n                       apr_file_seek(f, APR_END, &off));\n    ABTS_ASSERT(tc, \"end-relative seek still at 8GB\",\n                off == eightGB);\n\n    off = -eightGB;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testlfs.c"
                },
                "region": {
                  "startLine": 322,
                  "startColumn": 40,
                  "endLine": 322,
                  "endColumn": 44,
                  "snippet": {
                    "text": "    off = 0;\n    APR_ASSERT_SUCCESS(tc, \"relative seek\",\n                       apr_file_seek(f, APR_CUR, &off));\n    ABTS_ASSERT(tc, \"relative seek still at 8GB\",\n                off == eightGB);\n\n    off = 0;\n",
                    "rendered": {
                      "text": "    off = 0;\n    APR_ASSERT_SUCCESS(tc, \"relative seek\",\n                       apr_file_seek(f, APR_CUR, &off));\n    ABTS_ASSERT(tc, \"relative seek still at 8GB\",\n                off == eightGB);\n\n    off = 0;\n",
                      "markdown": "`    off = 0;\n    APR_ASSERT_SUCCESS(tc, \"relative seek\",\n                       apr_file_seek(f, APR_CUR, &off));\n    ABTS_ASSERT(tc, \"relative seek still at 8GB\",\n                off == eightGB);\n\n    off = 0;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/testipsub.c"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 36,
                  "endLine": 165,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    char buf[128];\n\n    ABTS_STR_EQUAL(tc, apr_strerror(APR_EBADIP, buf, sizeof buf),\n                      \"The specified IP address is invalid.\");\n}\n\nstatic void test_parse_addr_port(abts_case *tc, void *data)\n",
                    "rendered": {
                      "text": "    char buf[128];\n\n    ABTS_STR_EQUAL(tc, apr_strerror(APR_EBADIP, buf, sizeof buf),\n                      \"The specified IP address is invalid.\");\n}\n\nstatic void test_parse_addr_port(abts_case *tc, void *data)\n",
                      "markdown": "`    char buf[128];\n\n    ABTS_STR_EQUAL(tc, apr_strerror(APR_EBADIP, buf, sizeof buf),\n                      \"The specified IP address is invalid.\");\n}\n\nstatic void test_parse_addr_port(abts_case *tc, void *data)\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/abts.c"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 28,
                  "endLine": 318,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    tc->failed = TRUE; \\\n    if (verbose) { \\\n        fprintf(stderr, \"Line %d: expected something other than <%\" FMT \">, \" \\\n                \"but saw <%\" FMT \">\\n\", \\\n                lineno, CAST expected, CAST actual); \\\n        fflush(stderr); \\\n    } \\\n",
                    "rendered": {
                      "text": "    tc->failed = TRUE; \\\n    if (verbose) { \\\n        fprintf(stderr, \"Line %d: expected something other than <%\" FMT \">, \" \\\n                \"but saw <%\" FMT \">\\n\", \\\n                lineno, CAST expected, CAST actual); \\\n        fflush(stderr); \\\n    } \\\n",
                      "markdown": "`    tc->failed = TRUE; \\\n    if (verbose) { \\\n        fprintf(stderr, \"Line %d: expected something other than <%\" FMT \">, \" \\\n                \"but saw <%\" FMT \">\\n\", \\\n                lineno, CAST expected, CAST actual); \\\n        fflush(stderr); \\\n    } \\\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/abts.c"
                },
                "region": {
                  "startLine": 317,
                  "startColumn": 67,
                  "endLine": 317,
                  "endColumn": 72,
                  "snippet": {
                    "text": "    \\\n    tc->failed = TRUE; \\\n    if (verbose) { \\\n        fprintf(stderr, \"Line %d: expected something other than <%\" FMT \">, \" \\\n                \"but saw <%\" FMT \">\\n\", \\\n                lineno, CAST expected, CAST actual); \\\n        fflush(stderr); \\\n",
                    "rendered": {
                      "text": "    \\\n    tc->failed = TRUE; \\\n    if (verbose) { \\\n        fprintf(stderr, \"Line %d: expected something other than <%\" FMT \">, \" \\\n                \"but saw <%\" FMT \">\\n\", \\\n                lineno, CAST expected, CAST actual); \\\n        fflush(stderr); \\\n",
                      "markdown": "`    \\\n    tc->failed = TRUE; \\\n    if (verbose) { \\\n        fprintf(stderr, \"Line %d: expected something other than <%\" FMT \">, \" \\\n                \"but saw <%\" FMT \">\\n\", \\\n                lineno, CAST expected, CAST actual); \\\n        fflush(stderr); \\\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/abts.c"
                },
                "region": {
                  "startLine": 294,
                  "startColumn": 66,
                  "endLine": 294,
                  "endColumn": 71,
                  "snippet": {
                    "text": "    \\\n    tc->failed = TRUE; \\\n    if (verbose) { \\\n        fprintf(stderr, \"Line %d: expected <%\" FMT \">, but saw <%\" FMT \">\\n\", \\\n                lineno, CAST expected, CAST actual); \\\n        fflush(stderr); \\\n    } \\\n",
                    "rendered": {
                      "text": "    \\\n    tc->failed = TRUE; \\\n    if (verbose) { \\\n        fprintf(stderr, \"Line %d: expected <%\" FMT \">, but saw <%\" FMT \">\\n\", \\\n                lineno, CAST expected, CAST actual); \\\n        fflush(stderr); \\\n    } \\\n",
                      "markdown": "`    \\\n    tc->failed = TRUE; \\\n    if (verbose) { \\\n        fprintf(stderr, \"Line %d: expected <%\" FMT \">, but saw <%\" FMT \">\\n\", \\\n                lineno, CAST expected, CAST actual); \\\n        fflush(stderr); \\\n    } \\\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/test/abts.c"
                },
                "region": {
                  "startLine": 294,
                  "startColumn": 46,
                  "endLine": 294,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    \\\n    tc->failed = TRUE; \\\n    if (verbose) { \\\n        fprintf(stderr, \"Line %d: expected <%\" FMT \">, but saw <%\" FMT \">\\n\", \\\n                lineno, CAST expected, CAST actual); \\\n        fflush(stderr); \\\n    } \\\n",
                    "rendered": {
                      "text": "    \\\n    tc->failed = TRUE; \\\n    if (verbose) { \\\n        fprintf(stderr, \"Line %d: expected <%\" FMT \">, but saw <%\" FMT \">\\n\", \\\n                lineno, CAST expected, CAST actual); \\\n        fflush(stderr); \\\n    } \\\n",
                      "markdown": "`    \\\n    tc->failed = TRUE; \\\n    if (verbose) { \\\n        fprintf(stderr, \"Line %d: expected <%\" FMT \">, but saw <%\" FMT \">\\n\", \\\n                lineno, CAST expected, CAST actual); \\\n        fflush(stderr); \\\n    } \\\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbm/apr_dbm_lmdb.c"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 16,
                  "endLine": 85,
                  "endColumn": 50,
                  "snippet": {
                    "text": "**\n*/\n\n#define DEFAULT_ENV_FLAGS (MDB_NOSUBDIR|MDB_NOSYNC|MDB_NOLOCK)\n\nstatic apr_status_t vt_lmdb_open(apr_dbm_t **pdb, const char *pathname,\n                                 apr_int32_t mode, apr_fileperms_t perm,\n",
                    "rendered": {
                      "text": "**\n*/\n\n#define DEFAULT_ENV_FLAGS (MDB_NOSUBDIR|MDB_NOSYNC|MDB_NOLOCK)\n\nstatic apr_status_t vt_lmdb_open(apr_dbm_t **pdb, const char *pathname,\n                                 apr_int32_t mode, apr_fileperms_t perm,\n",
                      "markdown": "`**\n*/\n\n#define DEFAULT_ENV_FLAGS (MDB_NOSUBDIR|MDB_NOSYNC|MDB_NOLOCK)\n\nstatic apr_status_t vt_lmdb_open(apr_dbm_t **pdb, const char *pathname,\n                                 apr_int32_t mode, apr_fileperms_t perm,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbm/NWGNUdbmgdbm"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 25,
                  "endLine": 139,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n#\n# If this is specified, it will override VERSION value in\n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                    "rendered": {
                      "text": "\n#\n# If this is specified, it will override VERSION value in\n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                      "markdown": "`\n#\n# If this is specified, it will override VERSION value in\n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbm/NWGNUdbmgdbm"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 59,
                  "endLine": 26,
                  "endColumn": 74,
                  "snippet": {
                    "text": "\n# LINK_STATIC = 1\n\n# for now defined here - should finally go into build/NWGNUenvironment.inc\nGDBM_INC = $(GDBMSDK)/inc\nGDBM_IMP = $(GDBMSDK)/imp/libgdbm.imp\nGDBM_LIB = $(GDBMSDK)/lib/libgdbm.lib\n",
                    "rendered": {
                      "text": "\n# LINK_STATIC = 1\n\n# for now defined here - should finally go into build/NWGNUenvironment.inc\nGDBM_INC = $(GDBMSDK)/inc\nGDBM_IMP = $(GDBMSDK)/imp/libgdbm.imp\nGDBM_LIB = $(GDBMSDK)/lib/libgdbm.lib\n",
                      "markdown": "`\n# LINK_STATIC = 1\n\n# for now defined here - should finally go into build/NWGNUenvironment.inc\nGDBM_INC = $(GDBMSDK)/inc\nGDBM_IMP = $(GDBMSDK)/imp/libgdbm.imp\nGDBM_LIB = $(GDBMSDK)/lib/libgdbm.lib\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbm/NWGNUdbmgdbm"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 30,
                  "endLine": 9,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\t$(EOLIST)\n\n#\n# Get the 'head' of the build environment.  This includes default targets and\n# paths to tools\n#\n\n",
                    "rendered": {
                      "text": "\t$(EOLIST)\n\n#\n# Get the 'head' of the build environment.  This includes default targets and\n# paths to tools\n#\n\n",
                      "markdown": "`\t$(EOLIST)\n\n#\n# Get the 'head' of the build environment.  This includes default targets and\n# paths to tools\n#\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbm/NWGNUdbmgdbm"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 27,
                  "endLine": 33,
                  "endColumn": 31,
                  "snippet": {
                    "text": "GDBM_NLM = libgdbm\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                    "rendered": {
                      "text": "GDBM_NLM = libgdbm\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                      "markdown": "`GDBM_NLM = libgdbm\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbm/NWGNUdbmdb"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 25,
                  "endLine": 140,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n#\n# If this is specified, it will override VERSION value in\n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                    "rendered": {
                      "text": "\n#\n# If this is specified, it will override VERSION value in\n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n",
                      "markdown": "`\n#\n# If this is specified, it will override VERSION value in\n# $(APR_WORK)/build/NWGNUenvironment.inc\n#\nNLM_VERSION\t=\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbm/NWGNUdbmdb"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 59,
                  "endLine": 26,
                  "endColumn": 74,
                  "snippet": {
                    "text": "\n# LINK_STATIC = 1\n\n# for now defined here - should finally go into build/NWGNUenvironment.inc\nDB_INC = $(DBSDK)/inc\nDB_IMP = $(DBSDK)/imp/libdb47.imp\nDB_LIB = $(DBSDK)/lib/libdb47.lib\n",
                    "rendered": {
                      "text": "\n# LINK_STATIC = 1\n\n# for now defined here - should finally go into build/NWGNUenvironment.inc\nDB_INC = $(DBSDK)/inc\nDB_IMP = $(DBSDK)/imp/libdb47.imp\nDB_LIB = $(DBSDK)/lib/libdb47.lib\n",
                      "markdown": "`\n# LINK_STATIC = 1\n\n# for now defined here - should finally go into build/NWGNUenvironment.inc\nDB_INC = $(DBSDK)/inc\nDB_IMP = $(DBSDK)/imp/libdb47.imp\nDB_LIB = $(DBSDK)/lib/libdb47.lib\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbm/NWGNUdbmdb"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 30,
                  "endLine": 9,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\t$(EOLIST)\n\n#\n# Get the 'head' of the build environment.  This includes default targets and\n# paths to tools\n#\n\n",
                    "rendered": {
                      "text": "\t$(EOLIST)\n\n#\n# Get the 'head' of the build environment.  This includes default targets and\n# paths to tools\n#\n\n",
                      "markdown": "`\t$(EOLIST)\n\n#\n# Get the 'head' of the build environment.  This includes default targets and\n# paths to tools\n#\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbm/NWGNUdbmdb"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 27,
                  "endLine": 33,
                  "endColumn": 31,
                  "snippet": {
                    "text": "DB_NLM = libdb47\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                    "rendered": {
                      "text": "DB_NLM = libdb47\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n",
                      "markdown": "`DB_NLM = libdb47\n\n#\n# These directories will be at the beginning of the include list, followed by\n# INCDIRS\n#\nXINCDIRS\t+= \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/dbd/unsupported/apr_dbd_freetds.c"
                },
                "region": {
                  "startLine": 582,
                  "startColumn": 36,
                  "endLine": 582,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        if (!strncasecmp(key, \"username\", klen)) {\n            DBSETLUSER(login, buf);\n        }\n        else if (!strncasecmp(key, \"password\", klen)) {\n            DBSETLPWD(login, buf);\n        }\n        else if (!strncasecmp(key, \"appname\", klen)) {\n",
                    "rendered": {
                      "text": "        if (!strncasecmp(key, \"username\", klen)) {\n            DBSETLUSER(login, buf);\n        }\n        else if (!strncasecmp(key, \"password\", klen)) {\n            DBSETLPWD(login, buf);\n        }\n        else if (!strncasecmp(key, \"appname\", klen)) {\n",
                      "markdown": "`        if (!strncasecmp(key, \"username\", klen)) {\n            DBSETLUSER(login, buf);\n        }\n        else if (!strncasecmp(key, \"password\", klen)) {\n            DBSETLPWD(login, buf);\n        }\n        else if (!strncasecmp(key, \"appname\", klen)) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr.hnw"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 39,
                  "endLine": 219,
                  "endColumn": 47,
                  "snippet": {
                    "text": "#define APR_HAS_XTHREAD_FILES           0\n#define APR_HAS_OS_UUID                 0\n\n#define APR_PROCATTR_USER_SET_REQUIRES_PASSWORD 0\n\n/* Netware can poll on files/pipes.\n */\n",
                    "rendered": {
                      "text": "#define APR_HAS_XTHREAD_FILES           0\n#define APR_HAS_OS_UUID                 0\n\n#define APR_PROCATTR_USER_SET_REQUIRES_PASSWORD 0\n\n/* Netware can poll on files/pipes.\n */\n",
                      "markdown": "`#define APR_HAS_XTHREAD_FILES           0\n#define APR_HAS_OS_UUID                 0\n\n#define APR_PROCATTR_USER_SET_REQUIRES_PASSWORD 0\n\n/* Netware can poll on files/pipes.\n */\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr.hnw"
                },
                "region": {
                  "startLine": 423,
                  "startColumn": 46,
                  "endLine": 423,
                  "endColumn": 50,
                  "snippet": {
                    "text": "/**\n * Declare a dso module's exported module structure as APR_MODULE_DECLARE_DATA.\n *\n * Unless APR_MODULE_DECLARE_STATIC is defined at compile time, symbols\n * declared with APR_MODULE_DECLARE_DATA are always exported.\n * @code\n * module APR_MODULE_DECLARE_DATA mod_tag\n",
                    "rendered": {
                      "text": "/**\n * Declare a dso module's exported module structure as APR_MODULE_DECLARE_DATA.\n *\n * Unless APR_MODULE_DECLARE_STATIC is defined at compile time, symbols\n * declared with APR_MODULE_DECLARE_DATA are always exported.\n * @code\n * module APR_MODULE_DECLARE_DATA mod_tag\n",
                      "markdown": "`/**\n * Declare a dso module's exported module structure as APR_MODULE_DECLARE_DATA.\n *\n * Unless APR_MODULE_DECLARE_STATIC is defined at compile time, symbols\n * declared with APR_MODULE_DECLARE_DATA are always exported.\n * @code\n * module APR_MODULE_DECLARE_DATA mod_tag\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr.hnw"
                },
                "region": {
                  "startLine": 408,
                  "startColumn": 54,
                  "endLine": 408,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\n/**\n * The public APR variables are declared with APR_DECLARE_DATA.\n * This assures the appropriate indirection is invoked at compile time.\n * @see APR_DECLARE @see APR_DECLARE_NONSTD\n * @remark Note that the declaration and implementations use different forms,\n * but both must include the macro.\n",
                    "rendered": {
                      "text": "\n/**\n * The public APR variables are declared with APR_DECLARE_DATA.\n * This assures the appropriate indirection is invoked at compile time.\n * @see APR_DECLARE @see APR_DECLARE_NONSTD\n * @remark Note that the declaration and implementations use different forms,\n * but both must include the macro.\n",
                      "markdown": "`\n/**\n * The public APR variables are declared with APR_DECLARE_DATA.\n * This assures the appropriate indirection is invoked at compile time.\n * @see APR_DECLARE @see APR_DECLARE_NONSTD\n * @remark Note that the declaration and implementations use different forms,\n * but both must include the macro.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr.hnw"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 10,
                  "endLine": 28,
                  "endColumn": 14,
                  "snippet": {
                    "text": " * And please, make an effort to stub apr.hw and apr.h.in in the process.\n *\n * This is the NetWare specific version of apr.h.  It is copied from\n * apr.hnw at the start of a NetWare build by the ./build/NWGNmakefile.\n */\n\n#if defined(NETWARE) || defined(DOXYGEN)\n",
                    "rendered": {
                      "text": " * And please, make an effort to stub apr.hw and apr.h.in in the process.\n *\n * This is the NetWare specific version of apr.h.  It is copied from\n * apr.hnw at the start of a NetWare build by the ./build/NWGNmakefile.\n */\n\n#if defined(NETWARE) || defined(DOXYGEN)\n",
                      "markdown": "` * And please, make an effort to stub apr.hw and apr.h.in in the process.\n *\n * This is the NetWare specific version of apr.h.  It is copied from\n * apr.hnw at the start of a NetWare build by the ./build/NWGNmakefile.\n */\n\n#if defined(NETWARE) || defined(DOXYGEN)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/include/apr.hnw"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 53,
                  "endLine": 7,
                  "snippet": {
                    "text": " * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": " * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "` * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/misc/unix/errorcodes.c"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 16,
                  "endLine": 125,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    case APR_ENOTIMPL:\n        return \"This function has not been implemented on this platform\";\n    case APR_EMISMATCH:\n        return \"passwords do not match\";\n    case APR_EABSOLUTE:\n        return \"The given path is absolute\";\n    case APR_ERELATIVE:\n",
                    "rendered": {
                      "text": "    case APR_ENOTIMPL:\n        return \"This function has not been implemented on this platform\";\n    case APR_EMISMATCH:\n        return \"passwords do not match\";\n    case APR_EABSOLUTE:\n        return \"The given path is absolute\";\n    case APR_ERELATIVE:\n",
                      "markdown": "`    case APR_ENOTIMPL:\n        return \"This function has not been implemented on this platform\";\n    case APR_EMISMATCH:\n        return \"passwords do not match\";\n    case APR_EABSOLUTE:\n        return \"The given path is absolute\";\n    case APR_ERELATIVE:\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/misc/unix/errorcodes.c"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 25,
                  "endLine": 111,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    case APR_EOF:\n        return \"End of file found\";\n    case APR_NOTFOUND:\n        return \"Could not find specified socket in poll list.\";\n    case APR_ANONYMOUS:\n        return \"Shared memory is implemented anonymously\";\n    case APR_FILEBASED:\n",
                    "rendered": {
                      "text": "    case APR_EOF:\n        return \"End of file found\";\n    case APR_NOTFOUND:\n        return \"Could not find specified socket in poll list.\";\n    case APR_ANONYMOUS:\n        return \"Shared memory is implemented anonymously\";\n    case APR_FILEBASED:\n",
                      "markdown": "`    case APR_EOF:\n        return \"End of file found\";\n    case APR_NOTFOUND:\n        return \"Could not find specified socket in poll list.\";\n    case APR_ANONYMOUS:\n        return \"Shared memory is implemented anonymously\";\n    case APR_FILEBASED:\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/misc/unix/errorcodes.c"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 19,
                  "endLine": 101,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    case APR_CHILD_NOTDONE:\n        return \"The specified child process is not done executing\";\n    case APR_TIMEUP:\n        return \"The timeout specified has expired\";\n    case APR_INCOMPLETE:\n        return \"Partial results are valid but processing is incomplete\";\n    case APR_BADCH:\n",
                    "rendered": {
                      "text": "    case APR_CHILD_NOTDONE:\n        return \"The specified child process is not done executing\";\n    case APR_TIMEUP:\n        return \"The timeout specified has expired\";\n    case APR_INCOMPLETE:\n        return \"Partial results are valid but processing is incomplete\";\n    case APR_BADCH:\n",
                      "markdown": "`    case APR_CHILD_NOTDONE:\n        return \"The specified child process is not done executing\";\n    case APR_TIMEUP:\n        return \"The timeout specified has expired\";\n    case APR_INCOMPLETE:\n        return \"Partial results are valid but processing is incomplete\";\n    case APR_BADCH:\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/misc/unix/errorcodes.c"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 25,
                  "endLine": 81,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    case APR_EBADMASK:\n        return \"The specified network mask is invalid.\";\n    case APR_ESYMNOTFOUND:\n        return \"Could not find the requested symbol.\";\n    case APR_ENOTENOUGHENTROPY:\n        return \"Not enough entropy to continue.\";\n    case APR_INCHILD:\n",
                    "rendered": {
                      "text": "    case APR_EBADMASK:\n        return \"The specified network mask is invalid.\";\n    case APR_ESYMNOTFOUND:\n        return \"Could not find the requested symbol.\";\n    case APR_ENOTENOUGHENTROPY:\n        return \"Not enough entropy to continue.\";\n    case APR_INCHILD:\n",
                      "markdown": "`    case APR_EBADMASK:\n        return \"The specified network mask is invalid.\";\n    case APR_ESYMNOTFOUND:\n        return \"Could not find the requested symbol.\";\n    case APR_ENOTENOUGHENTROPY:\n        return \"Not enough entropy to continue.\";\n    case APR_INCHILD:\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/misc/unix/errorcodes.c"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 29,
                  "endLine": 77,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        return \"DSO load failed\";\n#endif /* HAVE_LIBDL */\n    case APR_EBADIP:\n        return \"The specified IP address is invalid.\";\n    case APR_EBADMASK:\n        return \"The specified network mask is invalid.\";\n    case APR_ESYMNOTFOUND:\n",
                    "rendered": {
                      "text": "        return \"DSO load failed\";\n#endif /* HAVE_LIBDL */\n    case APR_EBADIP:\n        return \"The specified IP address is invalid.\";\n    case APR_EBADMASK:\n        return \"The specified network mask is invalid.\";\n    case APR_ESYMNOTFOUND:\n",
                      "markdown": "`        return \"DSO load failed\";\n#endif /* HAVE_LIBDL */\n    case APR_EBADIP:\n        return \"The specified IP address is invalid.\";\n    case APR_EBADMASK:\n        return \"The specified network mask is invalid.\";\n    case APR_ESYMNOTFOUND:\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/misc/unix/errorcodes.c"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 18,
                  "endLine": 55,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    case APR_ENOPROC:\n        return \"No process was provided and one was required.\";\n    case APR_ENOTIME:\n        return \"No time was provided and one was required.\";\n    case APR_ENODIR:\n        return \"No directory was provided and one was required.\";\n    case APR_ENOLOCK:\n",
                    "rendered": {
                      "text": "    case APR_ENOPROC:\n        return \"No process was provided and one was required.\";\n    case APR_ENOTIME:\n        return \"No time was provided and one was required.\";\n    case APR_ENODIR:\n        return \"No directory was provided and one was required.\";\n    case APR_ENOLOCK:\n",
                      "markdown": "`    case APR_ENOPROC:\n        return \"No process was provided and one was required.\";\n    case APR_ENOTIME:\n        return \"No time was provided and one was required.\";\n    case APR_ENODIR:\n        return \"No directory was provided and one was required.\";\n    case APR_ENOLOCK:\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/misc/win32/env.c"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 30,
                  "endLine": 43,
                  "endColumn": 37,
                  "snippet": {
                    "text": "}\n\n\nAPR_DECLARE(apr_status_t) apr_env_get(char **value,\n                                      const char *envvar,\n                                      apr_pool_t *pool)\n{\n",
                    "rendered": {
                      "text": "}\n\n\nAPR_DECLARE(apr_status_t) apr_env_get(char **value,\n                                      const char *envvar,\n                                      apr_pool_t *pool)\n{\n",
                      "markdown": "`}\n\n\nAPR_DECLARE(apr_status_t) apr_env_get(char **value,\n                                      const char *envvar,\n                                      apr_pool_t *pool)\n{\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/misc/win32/env.c"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 36,
                  "endLine": 35,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    apr_status_t status;\n\n    inchars = strlen(envvar) + 1;\n    status = apr_conv_utf8_to_utf16(envvar, &inchars, buffer, &bufflen);\n    if (status == APR_INCOMPLETE)\n        status = APR_ENAMETOOLONG;\n\n",
                    "rendered": {
                      "text": "    apr_status_t status;\n\n    inchars = strlen(envvar) + 1;\n    status = apr_conv_utf8_to_utf16(envvar, &inchars, buffer, &bufflen);\n    if (status == APR_INCOMPLETE)\n        status = APR_ENAMETOOLONG;\n\n",
                      "markdown": "`    apr_status_t status;\n\n    inchars = strlen(envvar) + 1;\n    status = apr_conv_utf8_to_utf16(envvar, &inchars, buffer, &bufflen);\n    if (status == APR_INCOMPLETE)\n        status = APR_ENAMETOOLONG;\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/support/unix/waitio.c"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 7,
                  "endLine": 97,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        pfd.desc.s = s;\n\n        pollset = s->pollset;\n        timeout = s->timeout;\n    }\n    pfd.reqevents = type;\n\n",
                    "rendered": {
                      "text": "        pfd.desc.s = s;\n\n        pollset = s->pollset;\n        timeout = s->timeout;\n    }\n    pfd.reqevents = type;\n\n",
                      "markdown": "`        pfd.desc.s = s;\n\n        pollset = s->pollset;\n        timeout = s->timeout;\n    }\n    pfd.reqevents = type;\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/support/unix/waitio.c"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 7,
                  "endLine": 90,
                  "endColumn": 16,
                  "snippet": {
                    "text": "            }\n            pollset = f->pollset;\n        }\n        timeout = f->timeout;\n    }\n    else {\n        pfd.desc_type = APR_POLL_SOCKET;\n",
                    "rendered": {
                      "text": "            }\n            pollset = f->pollset;\n        }\n        timeout = f->timeout;\n    }\n    else {\n        pfd.desc_type = APR_POLL_SOCKET;\n",
                      "markdown": "`            }\n            pollset = f->pollset;\n        }\n        timeout = f->timeout;\n    }\n    else {\n        pfd.desc_type = APR_POLL_SOCKET;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/support/unix/waitio.c"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 7,
                  "endLine": 50,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    pfd.events = for_read ? POLLIN            : POLLOUT;\n\n    if (timeout > 0) {\n        timeout = (timeout + 999) / 1000;\n    }\n    do {\n        rc = poll(&pfd, 1, timeout);\n",
                    "rendered": {
                      "text": "    pfd.events = for_read ? POLLIN            : POLLOUT;\n\n    if (timeout > 0) {\n        timeout = (timeout + 999) / 1000;\n    }\n    do {\n        rc = poll(&pfd, 1, timeout);\n",
                      "markdown": "`    pfd.events = for_read ? POLLIN            : POLLOUT;\n\n    if (timeout > 0) {\n        timeout = (timeout + 999) / 1000;\n    }\n    do {\n        rc = poll(&pfd, 1, timeout);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/support/unix/waitio.c"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 3,
                  "endLine": 45,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    struct pollfd pfd;\n    int rc, timeout;\n\n    timeout    = f        ? f->timeout        : s->timeout;\n    pfd.fd     = f        ? f->filedes        : s->socketdes;\n    pfd.events = for_read ? POLLIN            : POLLOUT;\n\n",
                    "rendered": {
                      "text": "    struct pollfd pfd;\n    int rc, timeout;\n\n    timeout    = f        ? f->timeout        : s->timeout;\n    pfd.fd     = f        ? f->filedes        : s->socketdes;\n    pfd.events = for_read ? POLLIN            : POLLOUT;\n\n",
                      "markdown": "`    struct pollfd pfd;\n    int rc, timeout;\n\n    timeout    = f        ? f->timeout        : s->timeout;\n    pfd.fd     = f        ? f->filedes        : s->socketdes;\n    pfd.events = for_read ? POLLIN            : POLLOUT;\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/STATUS"
                },
                "region": {
                  "startLine": 457,
                  "startColumn": 10,
                  "endLine": 457,
                  "endColumn": 18,
                  "snippet": {
                    "text": "      pass-by-reference, or it should be updated to do something\n      useful.\n\n    * apr_password_get(): the bufsize parameter should not be\n      pass-by-reference.\n\n    * apr_allocator.h: apr_memnode_t's use of uint32_t's doesn't match\n",
                    "rendered": {
                      "text": "      pass-by-reference, or it should be updated to do something\n      useful.\n\n    * apr_password_get(): the bufsize parameter should not be\n      pass-by-reference.\n\n    * apr_allocator.h: apr_memnode_t's use of uint32_t's doesn't match\n",
                      "markdown": "`      pass-by-reference, or it should be updated to do something\n      useful.\n\n    * apr_password_get(): the bufsize parameter should not be\n      pass-by-reference.\n\n    * apr_allocator.h: apr_memnode_t's use of uint32_t's doesn't match\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/STATUS"
                },
                "region": {
                  "startLine": 495,
                  "startColumn": 15,
                  "endLine": 495,
                  "endColumn": 19,
                  "snippet": {
                    "text": "      application's maintenance function.  The expected usage is that the\n      application calls apr_proc_wait[_all_procs]() and is given back\n      apr_exit_why_e and exit_code_or_signal_num, thus losing the original\n      (on Unix, at least) representation which held both pieces of information\n      in an int.  Both pieces of data should be available to the maintenance \n      function so that it has the opportunity to take different actions.  An\n      example would be to issue messages about probable misconfiguration when\n",
                    "rendered": {
                      "text": "      application's maintenance function.  The expected usage is that the\n      application calls apr_proc_wait[_all_procs]() and is given back\n      apr_exit_why_e and exit_code_or_signal_num, thus losing the original\n      (on Unix, at least) representation which held both pieces of information\n      in an int.  Both pieces of data should be available to the maintenance \n      function so that it has the opportunity to take different actions.  An\n      example would be to issue messages about probable misconfiguration when\n",
                      "markdown": "`      application's maintenance function.  The expected usage is that the\n      application calls apr_proc_wait[_all_procs]() and is given back\n      apr_exit_why_e and exit_code_or_signal_num, thus losing the original\n      (on Unix, at least) representation which held both pieces of information\n      in an int.  Both pieces of data should be available to the maintenance \n      function so that it has the opportunity to take different actions.  An\n      example would be to issue messages about probable misconfiguration when\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/STATUS"
                },
                "region": {
                  "startLine": 478,
                  "startColumn": 13,
                  "endLine": 478,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        apr_time_interval_short_t        from apr_short_interval_time_t\n\n    * wrowe writes:\n      Looking at bug 32520, it occurs to me that exploding times using the\n      apr_time_exp_* functions; it would make more sense to split ->tm_usec into\n\n        ->tm_msec thousandths (milleseconds)\n",
                    "rendered": {
                      "text": "        apr_time_interval_short_t        from apr_short_interval_time_t\n\n    * wrowe writes:\n      Looking at bug 32520, it occurs to me that exploding times using the\n      apr_time_exp_* functions; it would make more sense to split ->tm_usec into\n\n        ->tm_msec thousandths (milleseconds)\n",
                      "markdown": "`        apr_time_interval_short_t        from apr_short_interval_time_t\n\n    * wrowe writes:\n      Looking at bug 32520, it occurs to me that exploding times using the\n      apr_time_exp_* functions; it would make more sense to split ->tm_usec into\n\n        ->tm_msec thousandths (milleseconds)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/STATUS"
                },
                "region": {
                  "startLine": 420,
                  "startColumn": 29,
                  "endLine": 420,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n    * Fix autoconf tests for strerror_r on BeOS and remove the hack in\n      misc/unix/errorcodes.c to get error reporting working.  Committed as\n      the solution is elusive at present.\n\n    * implement APR_PROGRAM_ENV and APR_PROGRAM_PATH on BeOS, OS/2, Netware\n\n",
                    "rendered": {
                      "text": "\n    * Fix autoconf tests for strerror_r on BeOS and remove the hack in\n      misc/unix/errorcodes.c to get error reporting working.  Committed as\n      the solution is elusive at present.\n\n    * implement APR_PROGRAM_ENV and APR_PROGRAM_PATH on BeOS, OS/2, Netware\n\n",
                      "markdown": "`\n    * Fix autoconf tests for strerror_r on BeOS and remove the hack in\n      misc/unix/errorcodes.c to get error reporting working.  Committed as\n      the solution is elusive at present.\n\n    * implement APR_PROGRAM_ENV and APR_PROGRAM_PATH on BeOS, OS/2, Netware\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/STATUS"
                },
                "region": {
                  "startLine": 370,
                  "startColumn": 15,
                  "endLine": 370,
                  "endColumn": 20,
                  "snippet": {
                    "text": " \n      Solaris's man page says:\n        ENOLCK\n           The  cmd argument is F_SETLK, F_SETLK64, F_SETLKW,  or\n           F_SETLKW64  and  satisfying the lock or unlock request\n           would result in the number of locked  regions  in  the\n           system exceeding a system-imposed limit.\n",
                    "rendered": {
                      "text": " \n      Solaris's man page says:\n        ENOLCK\n           The  cmd argument is F_SETLK, F_SETLK64, F_SETLKW,  or\n           F_SETLKW64  and  satisfying the lock or unlock request\n           would result in the number of locked  regions  in  the\n           system exceeding a system-imposed limit.\n",
                      "markdown": "` \n      Solaris's man page says:\n        ENOLCK\n           The  cmd argument is F_SETLK, F_SETLK64, F_SETLKW,  or\n           F_SETLKW64  and  satisfying the lock or unlock request\n           would result in the number of locked  regions  in  the\n           system exceeding a system-imposed limit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/STATUS"
                },
                "region": {
                  "startLine": 352,
                  "startColumn": 29,
                  "endLine": 352,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    * Add a way to query APR for what features it has at runtime (i.e. \n      threads).\n      Justin says: I'm not completely sold on this, but it has been mentioned \n                   before and at least added to STATUS.\n\n    * apr_xlate.h generates a bunch of compiler warnings.\n      Jeff asks: which platform?\n",
                    "rendered": {
                      "text": "    * Add a way to query APR for what features it has at runtime (i.e. \n      threads).\n      Justin says: I'm not completely sold on this, but it has been mentioned \n                   before and at least added to STATUS.\n\n    * apr_xlate.h generates a bunch of compiler warnings.\n      Jeff asks: which platform?\n",
                      "markdown": "`    * Add a way to query APR for what features it has at runtime (i.e. \n      threads).\n      Justin says: I'm not completely sold on this, but it has been mentioned \n                   before and at least added to STATUS.\n\n    * apr_xlate.h generates a bunch of compiler warnings.\n      Jeff asks: which platform?\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/STATUS"
                },
                "region": {
                  "startLine": 349,
                  "startColumn": 53,
                  "endLine": 349,
                  "endColumn": 57,
                  "snippet": {
                    "text": "      have access to the Solaris source code:\n        osnet_volume/usr/src/lib/libc/port/gen/time_comm.c.\n\n    * Add a way to query APR for what features it has at runtime (i.e. \n      threads).\n      Justin says: I'm not completely sold on this, but it has been mentioned \n                   before and at least added to STATUS.\n",
                    "rendered": {
                      "text": "      have access to the Solaris source code:\n        osnet_volume/usr/src/lib/libc/port/gen/time_comm.c.\n\n    * Add a way to query APR for what features it has at runtime (i.e. \n      threads).\n      Justin says: I'm not completely sold on this, but it has been mentioned \n                   before and at least added to STATUS.\n",
                      "markdown": "`      have access to the Solaris source code:\n        osnet_volume/usr/src/lib/libc/port/gen/time_comm.c.\n\n    * Add a way to query APR for what features it has at runtime (i.e. \n      threads).\n      Justin says: I'm not completely sold on this, but it has been mentioned \n                   before and at least added to STATUS.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/STATUS"
                },
                "region": {
                  "startLine": 344,
                  "startColumn": 70,
                  "endLine": 344,
                  "endColumn": 74,
                  "snippet": {
                    "text": "      On Solaris (and possibly others), the gmtime_r libc function obtains\n      a mutex.  We have seen 21/25 threads being blocked in this mutex on \n      a threaded httpd MPM when requesting static pages.  It may be worth \n      it to hand optimize this since there is no real need for a mutex at \n      the system level (straight arithmetic from what I can tell).  If you \n      have access to the Solaris source code:\n        osnet_volume/usr/src/lib/libc/port/gen/time_comm.c.\n",
                    "rendered": {
                      "text": "      On Solaris (and possibly others), the gmtime_r libc function obtains\n      a mutex.  We have seen 21/25 threads being blocked in this mutex on \n      a threaded httpd MPM when requesting static pages.  It may be worth \n      it to hand optimize this since there is no real need for a mutex at \n      the system level (straight arithmetic from what I can tell).  If you \n      have access to the Solaris source code:\n        osnet_volume/usr/src/lib/libc/port/gen/time_comm.c.\n",
                      "markdown": "`      On Solaris (and possibly others), the gmtime_r libc function obtains\n      a mutex.  We have seen 21/25 threads being blocked in this mutex on \n      a threaded httpd MPM when requesting static pages.  It may be worth \n      it to hand optimize this since there is no real need for a mutex at \n      the system level (straight arithmetic from what I can tell).  If you \n      have access to the Solaris source code:\n        osnet_volume/usr/src/lib/libc/port/gen/time_comm.c.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/STATUS"
                },
                "region": {
                  "startLine": 260,
                  "startColumn": 19,
                  "endLine": 260,
                  "endColumn": 23,
                  "snippet": {
                    "text": "          the pool changes.\n\n        - Implement apr_pool_join and apr_pool_lock.  Those functions\n          are noops at the moment.\n\n        - Add stats to the pools code.  We already have basic stats\n          in debug mode.  Stats that tell us about wasted memory\n",
                    "rendered": {
                      "text": "          the pool changes.\n\n        - Implement apr_pool_join and apr_pool_lock.  Those functions\n          are noops at the moment.\n\n        - Add stats to the pools code.  We already have basic stats\n          in debug mode.  Stats that tell us about wasted memory\n",
                      "markdown": "`          the pool changes.\n\n        - Implement apr_pool_join and apr_pool_lock.  Those functions\n          are noops at the moment.\n\n        - Add stats to the pools code.  We already have basic stats\n          in debug mode.  Stats that tell us about wasted memory\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/STATUS"
                },
                "region": {
                  "startLine": 239,
                  "startColumn": 39,
                  "endLine": 239,
                  "endColumn": 43,
                  "snippet": {
                    "text": "        both versions (threaded/reentrant and non-threaded/non-reentrant)\n        on the same machine.\n        Wrowe chuckles, uhm, it already is.  And seems most have shifted\n        to shipping threaded builds, of at least apr itself.\n\n    * Pools debugging\n        - Find a way to do check if a pool is used in multiple\n",
                    "rendered": {
                      "text": "        both versions (threaded/reentrant and non-threaded/non-reentrant)\n        on the same machine.\n        Wrowe chuckles, uhm, it already is.  And seems most have shifted\n        to shipping threaded builds, of at least apr itself.\n\n    * Pools debugging\n        - Find a way to do check if a pool is used in multiple\n",
                      "markdown": "`        both versions (threaded/reentrant and non-threaded/non-reentrant)\n        on the same machine.\n        Wrowe chuckles, uhm, it already is.  And seems most have shifted\n        to shipping threaded builds, of at least apr itself.\n\n    * Pools debugging\n        - Find a way to do check if a pool is used in multiple\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/STATUS"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 54,
                  "endLine": 210,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\t\t  redirect to the thread_mutex APIs. (bnicholes)\n      OS/2: apr_thread_cond_*(), apr_proc_mutex_*()\n\n      Less critical components that we may wish to add at some point:\n      Beos: apr_thread_rwlock_try*lock()\n            apr_proc_mutex_trylock()\n      Unix: apr_thread_rwlock_*() for platforms w/o rwlocks in pthread\n",
                    "rendered": {
                      "text": "\t\t  redirect to the thread_mutex APIs. (bnicholes)\n      OS/2: apr_thread_cond_*(), apr_proc_mutex_*()\n\n      Less critical components that we may wish to add at some point:\n      Beos: apr_thread_rwlock_try*lock()\n            apr_proc_mutex_trylock()\n      Unix: apr_thread_rwlock_*() for platforms w/o rwlocks in pthread\n",
                      "markdown": "`\t\t  redirect to the thread_mutex APIs. (bnicholes)\n      OS/2: apr_thread_cond_*(), apr_proc_mutex_*()\n\n      Less critical components that we may wish to add at some point:\n      Beos: apr_thread_rwlock_try*lock()\n            apr_proc_mutex_trylock()\n      Unix: apr_thread_rwlock_*() for platforms w/o rwlocks in pthread\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/STATUS"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 33,
                  "endLine": 186,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        http://qaix.com/apache-http-server/569-729-patch-add-ip-tos-support-read.shtml\n        https://issues.apache.org/bugzilla/show_bug.cgi?id=42848\n\n    * Need a proper fragmentation control API for clearing apr_pool's,\n      where the block alloc/clear/realloc sequence introduces more and\n      more unusable spaces in the physical blocks.  APR must provide\n      a mechanism to recognize such fragmented conditions, free the\n",
                    "rendered": {
                      "text": "        http://qaix.com/apache-http-server/569-729-patch-add-ip-tos-support-read.shtml\n        https://issues.apache.org/bugzilla/show_bug.cgi?id=42848\n\n    * Need a proper fragmentation control API for clearing apr_pool's,\n      where the block alloc/clear/realloc sequence introduces more and\n      more unusable spaces in the physical blocks.  APR must provide\n      a mechanism to recognize such fragmented conditions, free the\n",
                      "markdown": "`        http://qaix.com/apache-http-server/569-729-patch-add-ip-tos-support-read.shtml\n        https://issues.apache.org/bugzilla/show_bug.cgi?id=42848\n\n    * Need a proper fragmentation control API for clearing apr_pool's,\n      where the block alloc/clear/realloc sequence introduces more and\n      more unusable spaces in the physical blocks.  APR must provide\n      a mechanism to recognize such fragmented conditions, free the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/STATUS"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 13,
                  "endLine": 2,
                  "endColumn": 17,
                  "snippet": {
                    "text": "APACHE PORTABLE RUNTIME (APR) LIBRARY STATUS:        -*- coding: utf-8 -*-\nLast modified at [$Date$]\n\nThe current version of this file can be found at:\n\n",
                    "rendered": {
                      "text": "APACHE PORTABLE RUNTIME (APR) LIBRARY STATUS:        -*- coding: utf-8 -*-\nLast modified at [$Date$]\n\nThe current version of this file can be found at:\n\n",
                      "markdown": "`APACHE PORTABLE RUNTIME (APR) LIBRARY STATUS:        -*- coding: utf-8 -*-\nLast modified at [$Date$]\n\nThe current version of this file can be found at:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/STATUS"
                },
                "region": {
                  "startLine": 527,
                  "startColumn": 26,
                  "endLine": 527,
                  "endColumn": 34,
                  "snippet": {
                    "text": "      doesn't take a lockmech_e parameter so it causes a segfault after the\n      apr_proc_create, because the proc_mutex field hasn't been initialized.\n      When the lockmech_e parameter is added, it _still_ doesn't work, because\n      some lock mechanisms expect to inherit from the parent process.  For\n      example, sys V semaphores don't have a file to open, so the child process\n      can't reaquire the lock.\n\n",
                    "rendered": {
                      "text": "      doesn't take a lockmech_e parameter so it causes a segfault after the\n      apr_proc_create, because the proc_mutex field hasn't been initialized.\n      When the lockmech_e parameter is added, it _still_ doesn't work, because\n      some lock mechanisms expect to inherit from the parent process.  For\n      example, sys V semaphores don't have a file to open, so the child process\n      can't reaquire the lock.\n\n",
                      "markdown": "`      doesn't take a lockmech_e parameter so it causes a segfault after the\n      apr_proc_create, because the proc_mutex field hasn't been initialized.\n      When the lockmech_e parameter is added, it _still_ doesn't work, because\n      some lock mechanisms expect to inherit from the parent process.  For\n      example, sys V semaphores don't have a file to open, so the child process\n      can't reaquire the lock.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/STATUS"
                },
                "region": {
                  "startLine": 517,
                  "startColumn": 64,
                  "endLine": 518,
                  "snippet": {
                    "text": "    * remove APR_POLL_LASTDESC from apr_datatype_e.\n\n    * Almost every API in APR depends on pools, but pool semantics\n      aren't a good match for a lot of applications.  We need to find\n      a way to support alternate allocators polymorphically without\n      a significant performance penalty.\n\n    * apr_global_mutex_child_init and apr_proc_mutex_child_init aren't\n",
                    "rendered": {
                      "text": "    * remove APR_POLL_LASTDESC from apr_datatype_e.\n\n    * Almost every API in APR depends on pools, but pool semantics\n      aren't a good match for a lot of applications.  We need to find\n      a way to support alternate allocators polymorphically without\n      a significant performance penalty.\n\n    * apr_global_mutex_child_init and apr_proc_mutex_child_init aren't\n",
                      "markdown": "`    * remove APR_POLL_LASTDESC from apr_datatype_e.\n\n    * Almost every API in APR depends on pools, but pool semantics\n      aren't a good match for a lot of applications.  We need to find\n      a way to support alternate allocators polymorphically without\n      a significant performance penalty.\n\n    * apr_global_mutex_child_init and apr_proc_mutex_child_init aren't\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/STATUS"
                },
                "region": {
                  "startLine": 410,
                  "startColumn": 55,
                  "endLine": 410,
                  "endColumn": 60,
                  "snippet": {
                    "text": "      for those subtle quirks that sometimes creep into CV implementations.\n\n    * Once we are fully satisfied with the new lock API, we can\n      begin to migrate the old API to be implemented on top of the\n      new one, or just decide to get rid of it altogether.\n      \n    * FreeBSD returns 45 (EOPNOTSUPP) when the lockfile is on a NFS\n",
                    "rendered": {
                      "text": "      for those subtle quirks that sometimes creep into CV implementations.\n\n    * Once we are fully satisfied with the new lock API, we can\n      begin to migrate the old API to be implemented on top of the\n      new one, or just decide to get rid of it altogether.\n      \n    * FreeBSD returns 45 (EOPNOTSUPP) when the lockfile is on a NFS\n",
                      "markdown": "`      for those subtle quirks that sometimes creep into CV implementations.\n\n    * Once we are fully satisfied with the new lock API, we can\n      begin to migrate the old API to be implemented on top of the\n      new one, or just decide to get rid of it altogether.\n      \n    * FreeBSD returns 45 (EOPNOTSUPP) when the lockfile is on a NFS\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/STATUS"
                },
                "region": {
                  "startLine": 306,
                  "startColumn": 44,
                  "endLine": 306,
                  "endColumn": 53,
                  "snippet": {
                    "text": "      crypt() function is available, and a way to call it (whether it is\n      located in libc, libcrypt, or libufc)\n      Justin says: Should apr_crypt() be in apr-util?\n      Wrowe answers: of course!  It's called openssl DES_fcrypt ;-)\n\n    * use os_(un)cork in network_io/unix/sendrecv.c for FreeBSD's\n      sendfile implementation.\n",
                    "rendered": {
                      "text": "      crypt() function is available, and a way to call it (whether it is\n      located in libc, libcrypt, or libufc)\n      Justin says: Should apr_crypt() be in apr-util?\n      Wrowe answers: of course!  It's called openssl DES_fcrypt ;-)\n\n    * use os_(un)cork in network_io/unix/sendrecv.c for FreeBSD's\n      sendfile implementation.\n",
                      "markdown": "`      crypt() function is available, and a way to call it (whether it is\n      located in libc, libcrypt, or libufc)\n      Justin says: Should apr_crypt() be in apr-util?\n      Wrowe answers: of course!  It's called openssl DES_fcrypt ;-)\n\n    * use os_(un)cork in network_io/unix/sendrecv.c for FreeBSD's\n      sendfile implementation.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/STATUS"
                },
                "region": {
                  "startLine": 278,
                  "startColumn": 63,
                  "endLine": 279,
                  "snippet": {
                    "text": "      change the initial permissions to 0666.  Needed code:  See\n      1.3's http_main.c, SysV sem flavor of accept_mutex_init().\n      Status: Jim will look into this\n      Update: Apache deals with this itself, though it might be nice\n              if APR could do something.\n\n    * Build scripts do not recognise AIX 4.2.1 pthreads\n      Justin says: \"Is this still true?\"\n",
                    "rendered": {
                      "text": "      change the initial permissions to 0666.  Needed code:  See\n      1.3's http_main.c, SysV sem flavor of accept_mutex_init().\n      Status: Jim will look into this\n      Update: Apache deals with this itself, though it might be nice\n              if APR could do something.\n\n    * Build scripts do not recognise AIX 4.2.1 pthreads\n      Justin says: \"Is this still true?\"\n",
                      "markdown": "`      change the initial permissions to 0666.  Needed code:  See\n      1.3's http_main.c, SysV sem flavor of accept_mutex_init().\n      Status: Jim will look into this\n      Update: Apache deals with this itself, though it might be nice\n              if APR could do something.\n\n    * Build scripts do not recognise AIX 4.2.1 pthreads\n      Justin says: \"Is this still true?\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/STATUS"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 9,
                  "endLine": 242,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        to shipping threaded builds, of at least apr itself.\n\n    * Pools debugging\n        - Find a way to do check if a pool is used in multiple\n          threads, while the creation flags say it isn't.  IOW,\n          when the pool was created with APR_POOL_FNEWALLOCATOR,\n          but without APR_POOL_FLOCK.\n",
                    "rendered": {
                      "text": "        to shipping threaded builds, of at least apr itself.\n\n    * Pools debugging\n        - Find a way to do check if a pool is used in multiple\n          threads, while the creation flags say it isn't.  IOW,\n          when the pool was created with APR_POOL_FNEWALLOCATOR,\n          but without APR_POOL_FLOCK.\n",
                      "markdown": "`        to shipping threaded builds, of at least apr itself.\n\n    * Pools debugging\n        - Find a way to do check if a pool is used in multiple\n          threads, while the creation flags say it isn't.  IOW,\n          when the pool was created with APR_POOL_FNEWALLOCATOR,\n          but without APR_POOL_FLOCK.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/STATUS"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 26,
                  "endLine": 230,
                  "endColumn": 34,
                  "snippet": {
                    "text": "          we should always use the reentrant versions.\n        - Unfortunately, on some platforms (AIX 4.2.1) defining\n          the reentrant flag (-D_THREAD_SAFE) causes builds to fail,\n          and so one would expect --disable-threads to fix this.\n          Although this has been fixed for that particular version\n          of AIX, it may be useful to only enable the reentrant\n          versions when threads are enabled.\n",
                    "rendered": {
                      "text": "          we should always use the reentrant versions.\n        - Unfortunately, on some platforms (AIX 4.2.1) defining\n          the reentrant flag (-D_THREAD_SAFE) causes builds to fail,\n          and so one would expect --disable-threads to fix this.\n          Although this has been fixed for that particular version\n          of AIX, it may be useful to only enable the reentrant\n          versions when threads are enabled.\n",
                      "markdown": "`          we should always use the reentrant versions.\n        - Unfortunately, on some platforms (AIX 4.2.1) defining\n          the reentrant flag (-D_THREAD_SAFE) causes builds to fail,\n          and so one would expect --disable-threads to fix this.\n          Although this has been fixed for that particular version\n          of AIX, it may be useful to only enable the reentrant\n          versions when threads are enabled.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/STATUS"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 41,
                  "endLine": 216,
                  "endColumn": 47,
                  "snippet": {
                    "text": "      Unix: apr_thread_rwlock_*() for platforms w/o rwlocks in pthread\n\n    * Need to contemplate apr_strftime... platforms vary.  OtherBill\n      suggested this solution (but has no time to implement):\n        Document our list of 'supported' escapes.\n        Run some autoconf/m4 magic against the complete list we support.\n        Move the strftime re-implementation from time/win32 to time/unix.\n",
                    "rendered": {
                      "text": "      Unix: apr_thread_rwlock_*() for platforms w/o rwlocks in pthread\n\n    * Need to contemplate apr_strftime... platforms vary.  OtherBill\n      suggested this solution (but has no time to implement):\n        Document our list of 'supported' escapes.\n        Run some autoconf/m4 magic against the complete list we support.\n        Move the strftime re-implementation from time/win32 to time/unix.\n",
                      "markdown": "`      Unix: apr_thread_rwlock_*() for platforms w/o rwlocks in pthread\n\n    * Need to contemplate apr_strftime... platforms vary.  OtherBill\n      suggested this solution (but has no time to implement):\n        Document our list of 'supported' escapes.\n        Run some autoconf/m4 magic against the complete list we support.\n        Move the strftime re-implementation from time/win32 to time/unix.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/STATUS"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 42,
                  "endLine": 210,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t  redirect to the thread_mutex APIs. (bnicholes)\n      OS/2: apr_thread_cond_*(), apr_proc_mutex_*()\n\n      Less critical components that we may wish to add at some point:\n      Beos: apr_thread_rwlock_try*lock()\n            apr_proc_mutex_trylock()\n      Unix: apr_thread_rwlock_*() for platforms w/o rwlocks in pthread\n",
                    "rendered": {
                      "text": "\t\t  redirect to the thread_mutex APIs. (bnicholes)\n      OS/2: apr_thread_cond_*(), apr_proc_mutex_*()\n\n      Less critical components that we may wish to add at some point:\n      Beos: apr_thread_rwlock_try*lock()\n            apr_proc_mutex_trylock()\n      Unix: apr_thread_rwlock_*() for platforms w/o rwlocks in pthread\n",
                      "markdown": "`\t\t  redirect to the thread_mutex APIs. (bnicholes)\n      OS/2: apr_thread_cond_*(), apr_proc_mutex_*()\n\n      Less critical components that we may wish to add at some point:\n      Beos: apr_thread_rwlock_try*lock()\n            apr_proc_mutex_trylock()\n      Unix: apr_thread_rwlock_*() for platforms w/o rwlocks in pthread\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/STATUS"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 42,
                  "endLine": 177,
                  "endColumn": 48,
                  "snippet": {
                    "text": "      un-protected names throughout include/apr_foo.h headers.\n\n\nRELEASE NON-SHOWSTOPPERS BUT WOULD BE REAL NICE TO WRAP THESE UP:\n\n    * Implement TOS for linux and solaris and bsd network API's.\n      The patches below implement only one of these API's, see the\n",
                    "rendered": {
                      "text": "      un-protected names throughout include/apr_foo.h headers.\n\n\nRELEASE NON-SHOWSTOPPERS BUT WOULD BE REAL NICE TO WRAP THESE UP:\n\n    * Implement TOS for linux and solaris and bsd network API's.\n      The patches below implement only one of these API's, see the\n",
                      "markdown": "`      un-protected names throughout include/apr_foo.h headers.\n\n\nRELEASE NON-SHOWSTOPPERS BUT WOULD BE REAL NICE TO WRAP THESE UP:\n\n    * Implement TOS for linux and solaris and bsd network API's.\n      The patches below implement only one of these API's, see the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/emacs-mode"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 27,
                  "endLine": 14,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\t       (inextern-lang . 0)\n\t       ))\n(setq-default indent-tabs-mode nil)\n;; if you forgot to do this at startup, then M-x eval-expression\n;; (setq indent-tabs-mode nil) on each buffer\n",
                    "rendered": {
                      "text": "\t       (inextern-lang . 0)\n\t       ))\n(setq-default indent-tabs-mode nil)\n;; if you forgot to do this at startup, then M-x eval-expression\n;; (setq indent-tabs-mode nil) on each buffer\n",
                      "markdown": "`\t       (inextern-lang . 0)\n\t       ))\n(setq-default indent-tabs-mode nil)\n;; if you forgot to do this at startup, then M-x eval-expression\n;; (setq indent-tabs-mode nil) on each buffer\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libapr.zip/emacs-mode"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 5,
                  "endLine": 2,
                  "endColumn": 12,
                  "snippet": {
                    "text": ";; M-x load-file <this file>\n;; or emacs -l <this file>\n;; to use this style: C-c . apache\n(c-add-style \"apache\"\n\t     '((inclass . ++)\n",
                    "rendered": {
                      "text": ";; M-x load-file <this file>\n;; or emacs -l <this file>\n;; to use this style: C-c . apache\n(c-add-style \"apache\"\n\t     '((inclass . ++)\n",
                      "markdown": "`;; M-x load-file <this file>\n;; or emacs -l <this file>\n;; to use this style: C-c . apache\n(c-add-style \"apache\"\n\t     '((inclass . ++)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}