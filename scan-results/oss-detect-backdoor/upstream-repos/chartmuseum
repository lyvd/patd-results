{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/cmd/chartmuseum/main.go"
                },
                "region": {
                  "startLine": 307,
                  "startColumn": 30,
                  "endLine": 307,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\tcrashIfConfigMissingVars(conf, []string{\"cache.redis.addr\"})\n\treturn cache.Store(cache.NewRedisStore(\n\t\tconf.GetString(\"cache.redis.addr\"),\n\t\tconf.GetString(\"cache.redis.password\"),\n\t\tconf.GetInt(\"cache.redis.db\"),\n\t))\n}\n",
                    "rendered": {
                      "text": "\tcrashIfConfigMissingVars(conf, []string{\"cache.redis.addr\"})\n\treturn cache.Store(cache.NewRedisStore(\n\t\tconf.GetString(\"cache.redis.addr\"),\n\t\tconf.GetString(\"cache.redis.password\"),\n\t\tconf.GetInt(\"cache.redis.db\"),\n\t))\n}\n",
                      "markdown": "`\tcrashIfConfigMissingVars(conf, []string{\"cache.redis.addr\"})\n\treturn cache.Store(cache.NewRedisStore(\n\t\tconf.GetString(\"cache.redis.addr\"),\n\t\tconf.GetString(\"cache.redis.password\"),\n\t\tconf.GetInt(\"cache.redis.db\"),\n\t))\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/cmd/chartmuseum/main.go"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 2,
                  "endLine": 88,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\t\tTlsKey:                 conf.GetString(\"tls.key\"),\n\t\tTlsCACert:              conf.GetString(\"tls.cacert\"),\n\t\tUsername:               conf.GetString(\"basicauth.user\"),\n\t\tPassword:               conf.GetString(\"basicauth.pass\"),\n\t\tChartPostFormFieldName: conf.GetString(\"chartpostformfieldname\"),\n\t\tProvPostFormFieldName:  conf.GetString(\"provpostformfieldname\"),\n\t\tContextPath:            conf.GetString(\"contextpath\"),\n",
                    "rendered": {
                      "text": "\t\tTlsKey:                 conf.GetString(\"tls.key\"),\n\t\tTlsCACert:              conf.GetString(\"tls.cacert\"),\n\t\tUsername:               conf.GetString(\"basicauth.user\"),\n\t\tPassword:               conf.GetString(\"basicauth.pass\"),\n\t\tChartPostFormFieldName: conf.GetString(\"chartpostformfieldname\"),\n\t\tProvPostFormFieldName:  conf.GetString(\"provpostformfieldname\"),\n\t\tContextPath:            conf.GetString(\"contextpath\"),\n",
                      "markdown": "`\t\tTlsKey:                 conf.GetString(\"tls.key\"),\n\t\tTlsCACert:              conf.GetString(\"tls.cacert\"),\n\t\tUsername:               conf.GetString(\"basicauth.user\"),\n\t\tPassword:               conf.GetString(\"basicauth.pass\"),\n\t\tChartPostFormFieldName: conf.GetString(\"chartpostformfieldname\"),\n\t\tProvPostFormFieldName:  conf.GetString(\"provpostformfieldname\"),\n\t\tContextPath:            conf.GetString(\"contextpath\"),\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/cmd/chartmuseum/main.go"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 40,
                  "endLine": 43,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t// Version is the semantic version (added at compile time)\n\tVersion string\n\n\t// Revision is the git commit id (added at compile time)\n\tRevision string\n)\n\n",
                    "rendered": {
                      "text": "\t// Version is the semantic version (added at compile time)\n\tVersion string\n\n\t// Revision is the git commit id (added at compile time)\n\tRevision string\n)\n\n",
                      "markdown": "`\t// Version is the semantic version (added at compile time)\n\tVersion string\n\n\t// Revision is the git commit id (added at compile time)\n\tRevision string\n)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/cmd/chartmuseum/main.go"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 42,
                  "endLine": 40,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n\tnewServer = chartmuseum.NewServer\n\n\t// Version is the semantic version (added at compile time)\n\tVersion string\n\n\t// Revision is the git commit id (added at compile time)\n",
                    "rendered": {
                      "text": "\n\tnewServer = chartmuseum.NewServer\n\n\t// Version is the semantic version (added at compile time)\n\tVersion string\n\n\t// Revision is the git commit id (added at compile time)\n",
                      "markdown": "`\n\tnewServer = chartmuseum.NewServer\n\n\t// Version is the semantic version (added at compile time)\n\tVersion string\n\n\t// Revision is the git commit id (added at compile time)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/cmd/chartmuseum/main.go"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 19,
                  "endLine": 43,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\t// Version is the semantic version (added at compile time)\n\tVersion string\n\n\t// Revision is the git commit id (added at compile time)\n\tRevision string\n)\n\n",
                    "rendered": {
                      "text": "\t// Version is the semantic version (added at compile time)\n\tVersion string\n\n\t// Revision is the git commit id (added at compile time)\n\tRevision string\n)\n\n",
                      "markdown": "`\t// Version is the semantic version (added at compile time)\n\tVersion string\n\n\t// Revision is the git commit id (added at compile time)\n\tRevision string\n)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/testdata/charts/mychart-service/templates/pod.yaml"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 8,
                  "snippet": {
                    "text": "  name: '{{- printf \"%s-%s\" .Release.Name .Chart.Name | trunc 63 | trimSuffix \"-\" -}}'\nspec:\n  containers:\n  - image: busybox\n    name: '{{ .Chart.Name }}'\n    command: ['/bin/sh', '-c', 'while true; do echo {{ .Release.Name }}; sleep 5; done']",
                    "rendered": {
                      "text": "  name: '{{- printf \"%s-%s\" .Release.Name .Chart.Name | trunc 63 | trimSuffix \"-\" -}}'\nspec:\n  containers:\n  - image: busybox\n    name: '{{ .Chart.Name }}'\n    command: ['/bin/sh', '-c', 'while true; do echo {{ .Release.Name }}; sleep 5; done']",
                      "markdown": "`  name: '{{- printf \"%s-%s\" .Release.Name .Chart.Name | trunc 63 | trimSuffix \"-\" -}}'\nspec:\n  containers:\n  - image: busybox\n    name: '{{ .Chart.Name }}'\n    command: ['/bin/sh', '-c', 'while true; do echo {{ .Release.Name }}; sleep 5; done']`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/pre-applypatch.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/testdata/charts/otherchart/templates/pod.yaml"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 8,
                  "snippet": {
                    "text": "  name: '{{- printf \"%s-%s\" .Release.Name .Chart.Name | trunc 63 | trimSuffix \"-\" -}}'\nspec:\n  containers:\n  - image: busybox\n    name: '{{ .Chart.Name }}'\n    command: ['/bin/sh', '-c', 'while true; do echo {{ .Release.Name }}; sleep 5; done']",
                    "rendered": {
                      "text": "  name: '{{- printf \"%s-%s\" .Release.Name .Chart.Name | trunc 63 | trimSuffix \"-\" -}}'\nspec:\n  containers:\n  - image: busybox\n    name: '{{ .Chart.Name }}'\n    command: ['/bin/sh', '-c', 'while true; do echo {{ .Release.Name }}; sleep 5; done']",
                      "markdown": "`  name: '{{- printf \"%s-%s\" .Release.Name .Chart.Name | trunc 63 | trimSuffix \"-\" -}}'\nspec:\n  containers:\n  - image: busybox\n    name: '{{ .Chart.Name }}'\n    command: ['/bin/sh', '-c', 'while true; do echo {{ .Release.Name }}; sleep 5; done']`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/loadtesting/README.md"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 40,
                  "endLine": 27,
                  "endColumn": 44,
                  "snippet": {
                    "text": "pipenv run locust --host http://localhost:8080\n```\n\nOpen your locust console in your browser at http://localhost:8089, and start a new loadtest.\n",
                    "rendered": {
                      "text": "pipenv run locust --host http://localhost:8080\n```\n\nOpen your locust console in your browser at http://localhost:8089, and start a new loadtest.\n",
                      "markdown": "`pipenv run locust --host http://localhost:8080\n```\n\nOpen your locust console in your browser at http://localhost:8089, and start a new loadtest.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/loadtesting/README.md"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 3,
                  "endLine": 8,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\nInstall pipenv\n\n```\npip install pipenv\n```\n\nInstall chartmuseum locust loadtesting\n",
                    "rendered": {
                      "text": "\nInstall pipenv\n\n```\npip install pipenv\n```\n\nInstall chartmuseum locust loadtesting\n",
                      "markdown": "`\nInstall pipenv\n\n```\npip install pipenv\n```\n\nInstall chartmuseum locust loadtesting\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 24,
                  "endLine": 26,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                    "rendered": {
                      "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                      "markdown": "`\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                    "rendered": {
                      "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                      "markdown": "`fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                    "rendered": {
                      "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                      "markdown": "`\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                    "rendered": {
                      "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                      "markdown": "`\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                    "rendered": {
                      "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                      "markdown": "`\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                    "rendered": {
                      "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                      "markdown": "`then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 2,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/server/multitenant/cache.go"
                },
                "region": {
                  "startLine": 370,
                  "startColumn": 42,
                  "endLine": 370,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\t\t\t)\n\t\t}\n\t} else {\n\t\tcontent, err = server.ExternalCacheStore.Get(repo)\n\t\tif err != nil {\n\t\t\trepoIndex := server.newRepositoryIndex(log, repo)\n\t\t\tentry = &cacheEntry{\n",
                    "rendered": {
                      "text": "\t\t\t)\n\t\t}\n\t} else {\n\t\tcontent, err = server.ExternalCacheStore.Get(repo)\n\t\tif err != nil {\n\t\t\trepoIndex := server.newRepositoryIndex(log, repo)\n\t\t\tentry = &cacheEntry{\n",
                      "markdown": "`\t\t\t)\n\t\t}\n\t} else {\n\t\tcontent, err = server.ExternalCacheStore.Get(repo)\n\t\tif err != nil {\n\t\t\trepoIndex := server.newRepositoryIndex(log, repo)\n\t\t\tentry = &cacheEntry{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/server/multitenant/cache.go"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 95,
                  "endLine": 100,
                  "endColumn": 99,
                  "snippet": {
                    "text": "\treturn nil\n}\n\n// getChartList fetches from the server and accumulates concurrent requests to be fulfilled all at once.\nfunc (server *MultiTenantServer) getChartList(log cm_logger.LoggingFn, repo string) <-chan fetchedObjects {\n\tch := make(chan fetchedObjects, 1)\n\tserver.TenantCacheKeyLock.Lock()\n",
                    "rendered": {
                      "text": "\treturn nil\n}\n\n// getChartList fetches from the server and accumulates concurrent requests to be fulfilled all at once.\nfunc (server *MultiTenantServer) getChartList(log cm_logger.LoggingFn, repo string) <-chan fetchedObjects {\n\tch := make(chan fetchedObjects, 1)\n\tserver.TenantCacheKeyLock.Lock()\n",
                      "markdown": "`\treturn nil\n}\n\n// getChartList fetches from the server and accumulates concurrent requests to be fulfilled all at once.\nfunc (server *MultiTenantServer) getChartList(log cm_logger.LoggingFn, repo string) <-chan fetchedObjects {\n\tch := make(chan fetchedObjects, 1)\n\tserver.TenantCacheKeyLock.Lock()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/server/multitenant/cache.go"
                },
                "region": {
                  "startLine": 614,
                  "endLine": 614,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t\treturn\n\t}\n\tobjects := server.getRepoObjectSliceWithLock(entry)\n\tdiff := cm_storage.GetObjectSliceDiff(objects, fo.objects, server.TimestampTolerance)\n\n\t// return fast if no changes\n\tif !diff.Change {\n",
                    "rendered": {
                      "text": "\t\treturn\n\t}\n\tobjects := server.getRepoObjectSliceWithLock(entry)\n\tdiff := cm_storage.GetObjectSliceDiff(objects, fo.objects, server.TimestampTolerance)\n\n\t// return fast if no changes\n\tif !diff.Change {\n",
                      "markdown": "`\t\treturn\n\t}\n\tobjects := server.getRepoObjectSliceWithLock(entry)\n\tdiff := cm_storage.GetObjectSliceDiff(objects, fo.objects, server.TimestampTolerance)\n\n\t// return fast if no changes\n\tif !diff.Change {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/server/multitenant/cache.go"
                },
                "region": {
                  "startLine": 530,
                  "startColumn": 35,
                  "endLine": 530,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\t\tserver.TenantCacheKeyLock.Unlock()\n\n\t\tif !ok {\n\t\t\tlog(cm_logger.ErrorLevel, \"Error find tenants repo name\", zap.Error(err), zap.String(\"repo\", repo))\n\t\t\tcontinue\n\t\t}\n\n",
                    "rendered": {
                      "text": "\t\tserver.TenantCacheKeyLock.Unlock()\n\n\t\tif !ok {\n\t\t\tlog(cm_logger.ErrorLevel, \"Error find tenants repo name\", zap.Error(err), zap.String(\"repo\", repo))\n\t\t\tcontinue\n\t\t}\n\n",
                      "markdown": "`\t\tserver.TenantCacheKeyLock.Unlock()\n\n\t\tif !ok {\n\t\t\tlog(cm_logger.ErrorLevel, \"Error find tenants repo name\", zap.Error(err), zap.String(\"repo\", repo))\n\t\t\tcontinue\n\t\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/server/multitenant/cache.go"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 108,
                  "endLine": 148,
                  "endColumn": 114,
                  "snippet": {
                    "text": "\treturn ch\n}\n\nfunc (server *MultiTenantServer) regenerateRepositoryIndexWorker(log cm_logger.LoggingFn, entry *cacheEntry, diff cm_storage.ObjectSliceDiff) (*cm_repo.Index, error) {\n\trepo := entry.RepoName\n\n\tlog(cm_logger.DebugLevel, \"Regenerating index.yaml\",\n",
                    "rendered": {
                      "text": "\treturn ch\n}\n\nfunc (server *MultiTenantServer) regenerateRepositoryIndexWorker(log cm_logger.LoggingFn, entry *cacheEntry, diff cm_storage.ObjectSliceDiff) (*cm_repo.Index, error) {\n\trepo := entry.RepoName\n\n\tlog(cm_logger.DebugLevel, \"Regenerating index.yaml\",\n",
                      "markdown": "`\treturn ch\n}\n\nfunc (server *MultiTenantServer) regenerateRepositoryIndexWorker(log cm_logger.LoggingFn, entry *cacheEntry, diff cm_storage.ObjectSliceDiff) (*cm_repo.Index, error) {\n\trepo := entry.RepoName\n\n\tlog(cm_logger.DebugLevel, \"Regenerating index.yaml\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/server/multitenant/cache.go"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 102,
                  "endLine": 131,
                  "endColumn": 108,
                  "snippet": {
                    "text": "\treturn ch\n}\n\nfunc (server *MultiTenantServer) regenerateRepositoryIndex(log cm_logger.LoggingFn, entry *cacheEntry, diff cm_storage.ObjectSliceDiff) <-chan indexRegeneration {\n\tch := make(chan indexRegeneration, 1)\n\ttenant := server.Tenants[entry.RepoName]\n\n",
                    "rendered": {
                      "text": "\treturn ch\n}\n\nfunc (server *MultiTenantServer) regenerateRepositoryIndex(log cm_logger.LoggingFn, entry *cacheEntry, diff cm_storage.ObjectSliceDiff) <-chan indexRegeneration {\n\tch := make(chan indexRegeneration, 1)\n\ttenant := server.Tenants[entry.RepoName]\n\n",
                      "markdown": "`\treturn ch\n}\n\nfunc (server *MultiTenantServer) regenerateRepositoryIndex(log cm_logger.LoggingFn, entry *cacheEntry, diff cm_storage.ObjectSliceDiff) <-chan indexRegeneration {\n\tch := make(chan indexRegeneration, 1)\n\ttenant := server.Tenants[entry.RepoName]\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/testdata/charts/mychart2/templates/pod.yaml"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 8,
                  "snippet": {
                    "text": "  name: '{{- printf \"%s-%s\" .Release.Name .Chart.Name | trunc 63 | trimSuffix \"-\" -}}'\nspec:\n  containers:\n  - image: busybox\n    name: '{{ .Chart.Name }}'\n    command: ['/bin/sh', '-c', 'while true; do echo {{ .Release.Name }}; sleep 5; done']\n",
                    "rendered": {
                      "text": "  name: '{{- printf \"%s-%s\" .Release.Name .Chart.Name | trunc 63 | trimSuffix \"-\" -}}'\nspec:\n  containers:\n  - image: busybox\n    name: '{{ .Chart.Name }}'\n    command: ['/bin/sh', '-c', 'while true; do echo {{ .Release.Name }}; sleep 5; done']\n",
                      "markdown": "`  name: '{{- printf \"%s-%s\" .Release.Name .Chart.Name | trunc 63 | trimSuffix \"-\" -}}'\nspec:\n  containers:\n  - image: busybox\n    name: '{{ .Chart.Name }}'\n    command: ['/bin/sh', '-c', 'while true; do echo {{ .Release.Name }}; sleep 5; done']\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                      "markdown": "`\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                    "rendered": {
                      "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                      "markdown": "`\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 15,
                  "endLine": 77,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                    "rendered": {
                      "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                      "markdown": "`#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 27,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                    "rendered": {
                      "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                      "markdown": "`\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                      "markdown": "`\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                    "rendered": {
                      "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                      "markdown": "`# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                    "rendered": {
                      "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                      "markdown": "`# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                    "rendered": {
                      "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                      "markdown": "`\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/applypatch-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 45,
                  "endLine": 13,
                  "endColumn": 53,
                  "snippet": {
                    "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                    "rendered": {
                      "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                      "markdown": "`#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 51,
                  "endLine": 12,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                    "rendered": {
                      "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                      "markdown": "`# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 53,
                  "endLine": 11,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                    "rendered": {
                      "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                      "markdown": "`# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                    "rendered": {
                      "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                      "markdown": "`\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                    "rendered": {
                      "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                      "markdown": "`\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 30,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                    "rendered": {
                      "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                      "markdown": "`\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 28,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                    "rendered": {
                      "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                      "markdown": "`\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                    "rendered": {
                      "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                      "markdown": "`\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 45,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                    "rendered": {
                      "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                      "markdown": "`use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                    "rendered": {
                      "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                      "markdown": "`use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/server/multitenant/server_test.go"
                },
                "region": {
                  "startLine": 1093,
                  "startColumn": 29,
                  "endLine": 1093,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\n\t// Issue #21\n\tsuite.NotEqual(\"\", res.Header().Get(\"X-Request-Id\"), \"X-Request-Id header is present\")\n\tsuite.Equal(\"\", res.Header().Get(\"X-Blah-Blah-Blah\"), \"X-Blah-Blah-Blah header is not present\")\n\n\t// GET /:repo/charts/:filename\n\tres = suite.doRequest(stype, \"GET\", fmt.Sprintf(\"%s/charts/mychart-0.1.0.tgz\", repoPrefix), nil, \"\")\n",
                    "rendered": {
                      "text": "\n\t// Issue #21\n\tsuite.NotEqual(\"\", res.Header().Get(\"X-Request-Id\"), \"X-Request-Id header is present\")\n\tsuite.Equal(\"\", res.Header().Get(\"X-Blah-Blah-Blah\"), \"X-Blah-Blah-Blah header is not present\")\n\n\t// GET /:repo/charts/:filename\n\tres = suite.doRequest(stype, \"GET\", fmt.Sprintf(\"%s/charts/mychart-0.1.0.tgz\", repoPrefix), nil, \"\")\n",
                      "markdown": "`\n\t// Issue #21\n\tsuite.NotEqual(\"\", res.Header().Get(\"X-Request-Id\"), \"X-Request-Id header is present\")\n\tsuite.Equal(\"\", res.Header().Get(\"X-Blah-Blah-Blah\"), \"X-Blah-Blah-Blah header is not present\")\n\n\t// GET /:repo/charts/:filename\n\tres = suite.doRequest(stype, \"GET\", fmt.Sprintf(\"%s/charts/mychart-0.1.0.tgz\", repoPrefix), nil, \"\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/server/multitenant/server_test.go"
                },
                "region": {
                  "startLine": 1092,
                  "startColumn": 32,
                  "endLine": 1092,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tsuite.Equal(200, res.Status(), fmt.Sprintf(\"200 GET %s/artifacthub-repo.yml\", repoPrefix))\n\n\t// Issue #21\n\tsuite.NotEqual(\"\", res.Header().Get(\"X-Request-Id\"), \"X-Request-Id header is present\")\n\tsuite.Equal(\"\", res.Header().Get(\"X-Blah-Blah-Blah\"), \"X-Blah-Blah-Blah header is not present\")\n\n\t// GET /:repo/charts/:filename\n",
                    "rendered": {
                      "text": "\tsuite.Equal(200, res.Status(), fmt.Sprintf(\"200 GET %s/artifacthub-repo.yml\", repoPrefix))\n\n\t// Issue #21\n\tsuite.NotEqual(\"\", res.Header().Get(\"X-Request-Id\"), \"X-Request-Id header is present\")\n\tsuite.Equal(\"\", res.Header().Get(\"X-Blah-Blah-Blah\"), \"X-Blah-Blah-Blah header is not present\")\n\n\t// GET /:repo/charts/:filename\n",
                      "markdown": "`\tsuite.Equal(200, res.Status(), fmt.Sprintf(\"200 GET %s/artifacthub-repo.yml\", repoPrefix))\n\n\t// Issue #21\n\tsuite.NotEqual(\"\", res.Header().Get(\"X-Request-Id\"), \"X-Request-Id header is present\")\n\tsuite.Equal(\"\", res.Header().Get(\"X-Blah-Blah-Blah\"), \"X-Blah-Blah-Blah header is not present\")\n\n\t// GET /:repo/charts/:filename\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/server/multitenant/server_test.go"
                },
                "region": {
                  "startLine": 1193,
                  "startColumn": 48,
                  "endLine": 1193,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\tsuite.Equal(404, res.Status(), fmt.Sprintf(\"200 HEAD %s/charts/mychart/0.1.1\", apiPrefix))\n\n\tres = suite.doRequest(stype, \"HEAD\", fmt.Sprintf(\"%s/charts/fakechart/0.1.0\", apiPrefix), nil, \"\")\n\tsuite.Equal(404, res.Status(), fmt.Sprintf(\"200 HEAD %s/charts/fakechart/0.1.0\", apiPrefix))\n\n\t// DELETE /api/:repo/charts/:name/:version\n\tres = suite.doRequest(stype, \"DELETE\", fmt.Sprintf(\"%s/charts/mychart/0.1.0\", apiPrefix), nil, \"\")\n",
                    "rendered": {
                      "text": "\tsuite.Equal(404, res.Status(), fmt.Sprintf(\"200 HEAD %s/charts/mychart/0.1.1\", apiPrefix))\n\n\tres = suite.doRequest(stype, \"HEAD\", fmt.Sprintf(\"%s/charts/fakechart/0.1.0\", apiPrefix), nil, \"\")\n\tsuite.Equal(404, res.Status(), fmt.Sprintf(\"200 HEAD %s/charts/fakechart/0.1.0\", apiPrefix))\n\n\t// DELETE /api/:repo/charts/:name/:version\n\tres = suite.doRequest(stype, \"DELETE\", fmt.Sprintf(\"%s/charts/mychart/0.1.0\", apiPrefix), nil, \"\")\n",
                      "markdown": "`\tsuite.Equal(404, res.Status(), fmt.Sprintf(\"200 HEAD %s/charts/mychart/0.1.1\", apiPrefix))\n\n\tres = suite.doRequest(stype, \"HEAD\", fmt.Sprintf(\"%s/charts/fakechart/0.1.0\", apiPrefix), nil, \"\")\n\tsuite.Equal(404, res.Status(), fmt.Sprintf(\"200 HEAD %s/charts/fakechart/0.1.0\", apiPrefix))\n\n\t// DELETE /api/:repo/charts/:name/:version\n\tres = suite.doRequest(stype, \"DELETE\", fmt.Sprintf(\"%s/charts/mychart/0.1.0\", apiPrefix), nil, \"\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/server/multitenant/server_test.go"
                },
                "region": {
                  "startLine": 1190,
                  "startColumn": 48,
                  "endLine": 1190,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\tsuite.Equal(200, res.Status(), fmt.Sprintf(\"200 HEAD %s/charts/mychart/latest\", apiPrefix))\n\n\tres = suite.doRequest(stype, \"HEAD\", fmt.Sprintf(\"%s/charts/mychart/0.1.1\", apiPrefix), nil, \"\")\n\tsuite.Equal(404, res.Status(), fmt.Sprintf(\"200 HEAD %s/charts/mychart/0.1.1\", apiPrefix))\n\n\tres = suite.doRequest(stype, \"HEAD\", fmt.Sprintf(\"%s/charts/fakechart/0.1.0\", apiPrefix), nil, \"\")\n\tsuite.Equal(404, res.Status(), fmt.Sprintf(\"200 HEAD %s/charts/fakechart/0.1.0\", apiPrefix))\n",
                    "rendered": {
                      "text": "\tsuite.Equal(200, res.Status(), fmt.Sprintf(\"200 HEAD %s/charts/mychart/latest\", apiPrefix))\n\n\tres = suite.doRequest(stype, \"HEAD\", fmt.Sprintf(\"%s/charts/mychart/0.1.1\", apiPrefix), nil, \"\")\n\tsuite.Equal(404, res.Status(), fmt.Sprintf(\"200 HEAD %s/charts/mychart/0.1.1\", apiPrefix))\n\n\tres = suite.doRequest(stype, \"HEAD\", fmt.Sprintf(\"%s/charts/fakechart/0.1.0\", apiPrefix), nil, \"\")\n\tsuite.Equal(404, res.Status(), fmt.Sprintf(\"200 HEAD %s/charts/fakechart/0.1.0\", apiPrefix))\n",
                      "markdown": "`\tsuite.Equal(200, res.Status(), fmt.Sprintf(\"200 HEAD %s/charts/mychart/latest\", apiPrefix))\n\n\tres = suite.doRequest(stype, \"HEAD\", fmt.Sprintf(\"%s/charts/mychart/0.1.1\", apiPrefix), nil, \"\")\n\tsuite.Equal(404, res.Status(), fmt.Sprintf(\"200 HEAD %s/charts/mychart/0.1.1\", apiPrefix))\n\n\tres = suite.doRequest(stype, \"HEAD\", fmt.Sprintf(\"%s/charts/fakechart/0.1.0\", apiPrefix), nil, \"\")\n\tsuite.Equal(404, res.Status(), fmt.Sprintf(\"200 HEAD %s/charts/fakechart/0.1.0\", apiPrefix))\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/server/multitenant/server_test.go"
                },
                "region": {
                  "startLine": 1187,
                  "startColumn": 48,
                  "endLine": 1187,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\tsuite.Equal(200, res.Status(), fmt.Sprintf(\"200 HEAD %s/charts/mychart/0.1.0\", apiPrefix))\n\n\tres = suite.doRequest(stype, \"HEAD\", fmt.Sprintf(\"%s/charts/mychart/latest\", apiPrefix), nil, \"\")\n\tsuite.Equal(200, res.Status(), fmt.Sprintf(\"200 HEAD %s/charts/mychart/latest\", apiPrefix))\n\n\tres = suite.doRequest(stype, \"HEAD\", fmt.Sprintf(\"%s/charts/mychart/0.1.1\", apiPrefix), nil, \"\")\n\tsuite.Equal(404, res.Status(), fmt.Sprintf(\"200 HEAD %s/charts/mychart/0.1.1\", apiPrefix))\n",
                    "rendered": {
                      "text": "\tsuite.Equal(200, res.Status(), fmt.Sprintf(\"200 HEAD %s/charts/mychart/0.1.0\", apiPrefix))\n\n\tres = suite.doRequest(stype, \"HEAD\", fmt.Sprintf(\"%s/charts/mychart/latest\", apiPrefix), nil, \"\")\n\tsuite.Equal(200, res.Status(), fmt.Sprintf(\"200 HEAD %s/charts/mychart/latest\", apiPrefix))\n\n\tres = suite.doRequest(stype, \"HEAD\", fmt.Sprintf(\"%s/charts/mychart/0.1.1\", apiPrefix), nil, \"\")\n\tsuite.Equal(404, res.Status(), fmt.Sprintf(\"200 HEAD %s/charts/mychart/0.1.1\", apiPrefix))\n",
                      "markdown": "`\tsuite.Equal(200, res.Status(), fmt.Sprintf(\"200 HEAD %s/charts/mychart/0.1.0\", apiPrefix))\n\n\tres = suite.doRequest(stype, \"HEAD\", fmt.Sprintf(\"%s/charts/mychart/latest\", apiPrefix), nil, \"\")\n\tsuite.Equal(200, res.Status(), fmt.Sprintf(\"200 HEAD %s/charts/mychart/latest\", apiPrefix))\n\n\tres = suite.doRequest(stype, \"HEAD\", fmt.Sprintf(\"%s/charts/mychart/0.1.1\", apiPrefix), nil, \"\")\n\tsuite.Equal(404, res.Status(), fmt.Sprintf(\"200 HEAD %s/charts/mychart/0.1.1\", apiPrefix))\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/server/multitenant/server_test.go"
                },
                "region": {
                  "startLine": 1184,
                  "startColumn": 48,
                  "endLine": 1184,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n\t// HEAD /api/:repo/charts/:name/:version\n\tres = suite.doRequest(stype, \"HEAD\", fmt.Sprintf(\"%s/charts/mychart/0.1.0\", apiPrefix), nil, \"\")\n\tsuite.Equal(200, res.Status(), fmt.Sprintf(\"200 HEAD %s/charts/mychart/0.1.0\", apiPrefix))\n\n\tres = suite.doRequest(stype, \"HEAD\", fmt.Sprintf(\"%s/charts/mychart/latest\", apiPrefix), nil, \"\")\n\tsuite.Equal(200, res.Status(), fmt.Sprintf(\"200 HEAD %s/charts/mychart/latest\", apiPrefix))\n",
                    "rendered": {
                      "text": "\n\t// HEAD /api/:repo/charts/:name/:version\n\tres = suite.doRequest(stype, \"HEAD\", fmt.Sprintf(\"%s/charts/mychart/0.1.0\", apiPrefix), nil, \"\")\n\tsuite.Equal(200, res.Status(), fmt.Sprintf(\"200 HEAD %s/charts/mychart/0.1.0\", apiPrefix))\n\n\tres = suite.doRequest(stype, \"HEAD\", fmt.Sprintf(\"%s/charts/mychart/latest\", apiPrefix), nil, \"\")\n\tsuite.Equal(200, res.Status(), fmt.Sprintf(\"200 HEAD %s/charts/mychart/latest\", apiPrefix))\n",
                      "markdown": "`\n\t// HEAD /api/:repo/charts/:name/:version\n\tres = suite.doRequest(stype, \"HEAD\", fmt.Sprintf(\"%s/charts/mychart/0.1.0\", apiPrefix), nil, \"\")\n\tsuite.Equal(200, res.Status(), fmt.Sprintf(\"200 HEAD %s/charts/mychart/0.1.0\", apiPrefix))\n\n\tres = suite.doRequest(stype, \"HEAD\", fmt.Sprintf(\"%s/charts/mychart/latest\", apiPrefix), nil, \"\")\n\tsuite.Equal(200, res.Status(), fmt.Sprintf(\"200 HEAD %s/charts/mychart/latest\", apiPrefix))\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/server/multitenant/server_test.go"
                },
                "region": {
                  "startLine": 1141,
                  "startColumn": 48,
                  "endLine": 1141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\tsuite.Equal(200, res.Status(), fmt.Sprintf(\"200 HEAD %s/charts/mychart\", apiPrefix))\n\n\tres = suite.doRequest(stype, \"HEAD\", fmt.Sprintf(\"%s/charts/fakechart\", apiPrefix), nil, \"\")\n\tsuite.Equal(404, res.Status(), fmt.Sprintf(\"404 HEAD %s/charts/fakechart\", apiPrefix))\n\n\t// GET /api/:repo/charts/:name/:version\n\tres = suite.doRequest(stype, \"GET\", fmt.Sprintf(\"%s/charts/mychart/0.1.0\", apiPrefix), nil, \"\")\n",
                    "rendered": {
                      "text": "\tsuite.Equal(200, res.Status(), fmt.Sprintf(\"200 HEAD %s/charts/mychart\", apiPrefix))\n\n\tres = suite.doRequest(stype, \"HEAD\", fmt.Sprintf(\"%s/charts/fakechart\", apiPrefix), nil, \"\")\n\tsuite.Equal(404, res.Status(), fmt.Sprintf(\"404 HEAD %s/charts/fakechart\", apiPrefix))\n\n\t// GET /api/:repo/charts/:name/:version\n\tres = suite.doRequest(stype, \"GET\", fmt.Sprintf(\"%s/charts/mychart/0.1.0\", apiPrefix), nil, \"\")\n",
                      "markdown": "`\tsuite.Equal(200, res.Status(), fmt.Sprintf(\"200 HEAD %s/charts/mychart\", apiPrefix))\n\n\tres = suite.doRequest(stype, \"HEAD\", fmt.Sprintf(\"%s/charts/fakechart\", apiPrefix), nil, \"\")\n\tsuite.Equal(404, res.Status(), fmt.Sprintf(\"404 HEAD %s/charts/fakechart\", apiPrefix))\n\n\t// GET /api/:repo/charts/:name/:version\n\tres = suite.doRequest(stype, \"GET\", fmt.Sprintf(\"%s/charts/mychart/0.1.0\", apiPrefix), nil, \"\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/server/multitenant/server_test.go"
                },
                "region": {
                  "startLine": 1138,
                  "startColumn": 48,
                  "endLine": 1138,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n\t// HEAD /api/:repo/charts/:name\n\tres = suite.doRequest(stype, \"HEAD\", fmt.Sprintf(\"%s/charts/mychart\", apiPrefix), nil, \"\")\n\tsuite.Equal(200, res.Status(), fmt.Sprintf(\"200 HEAD %s/charts/mychart\", apiPrefix))\n\n\tres = suite.doRequest(stype, \"HEAD\", fmt.Sprintf(\"%s/charts/fakechart\", apiPrefix), nil, \"\")\n\tsuite.Equal(404, res.Status(), fmt.Sprintf(\"404 HEAD %s/charts/fakechart\", apiPrefix))\n",
                    "rendered": {
                      "text": "\n\t// HEAD /api/:repo/charts/:name\n\tres = suite.doRequest(stype, \"HEAD\", fmt.Sprintf(\"%s/charts/mychart\", apiPrefix), nil, \"\")\n\tsuite.Equal(200, res.Status(), fmt.Sprintf(\"200 HEAD %s/charts/mychart\", apiPrefix))\n\n\tres = suite.doRequest(stype, \"HEAD\", fmt.Sprintf(\"%s/charts/fakechart\", apiPrefix), nil, \"\")\n\tsuite.Equal(404, res.Status(), fmt.Sprintf(\"404 HEAD %s/charts/fakechart\", apiPrefix))\n",
                      "markdown": "`\n\t// HEAD /api/:repo/charts/:name\n\tres = suite.doRequest(stype, \"HEAD\", fmt.Sprintf(\"%s/charts/mychart\", apiPrefix), nil, \"\")\n\tsuite.Equal(200, res.Status(), fmt.Sprintf(\"200 HEAD %s/charts/mychart\", apiPrefix))\n\n\tres = suite.doRequest(stype, \"HEAD\", fmt.Sprintf(\"%s/charts/fakechart\", apiPrefix), nil, \"\")\n\tsuite.Equal(404, res.Status(), fmt.Sprintf(\"404 HEAD %s/charts/fakechart\", apiPrefix))\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/server/multitenant/server_test.go"
                },
                "region": {
                  "startLine": 1085,
                  "startColumn": 48,
                  "endLine": 1085,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n\t// HEAD /:repo/index.yaml\n\tres = suite.doRequest(stype, \"HEAD\", fmt.Sprintf(\"%s/index.yaml\", repoPrefix), nil, \"\")\n\tsuite.Equal(200, res.Status(), fmt.Sprintf(\"200 HEAD %s/index.yaml\", repoPrefix))\n\n\t// GET /:repo/artifacthub-repo.yaml\n\tres = suite.doRequest(stype, \"GET\", fmt.Sprintf(\"%s/artifacthub-repo.yml\", repoPrefix), nil, \"\")\n",
                    "rendered": {
                      "text": "\n\t// HEAD /:repo/index.yaml\n\tres = suite.doRequest(stype, \"HEAD\", fmt.Sprintf(\"%s/index.yaml\", repoPrefix), nil, \"\")\n\tsuite.Equal(200, res.Status(), fmt.Sprintf(\"200 HEAD %s/index.yaml\", repoPrefix))\n\n\t// GET /:repo/artifacthub-repo.yaml\n\tres = suite.doRequest(stype, \"GET\", fmt.Sprintf(\"%s/artifacthub-repo.yml\", repoPrefix), nil, \"\")\n",
                      "markdown": "`\n\t// HEAD /:repo/index.yaml\n\tres = suite.doRequest(stype, \"HEAD\", fmt.Sprintf(\"%s/index.yaml\", repoPrefix), nil, \"\")\n\tsuite.Equal(200, res.Status(), fmt.Sprintf(\"200 HEAD %s/index.yaml\", repoPrefix))\n\n\t// GET /:repo/artifacthub-repo.yaml\n\tres = suite.doRequest(stype, \"GET\", fmt.Sprintf(\"%s/artifacthub-repo.yml\", repoPrefix), nil, \"\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/server/multitenant/server_test.go"
                },
                "region": {
                  "startLine": 1083,
                  "startColumn": 3,
                  "endLine": 1083,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tres = suite.doRequest(stype, \"GET\", fmt.Sprintf(\"%s/index.yaml\", repoPrefix), nil, \"\")\n\tsuite.Equal(200, res.Status(), fmt.Sprintf(\"200 GET %s/index.yaml\", repoPrefix))\n\n\t// HEAD /:repo/index.yaml\n\tres = suite.doRequest(stype, \"HEAD\", fmt.Sprintf(\"%s/index.yaml\", repoPrefix), nil, \"\")\n\tsuite.Equal(200, res.Status(), fmt.Sprintf(\"200 HEAD %s/index.yaml\", repoPrefix))\n\n",
                    "rendered": {
                      "text": "\tres = suite.doRequest(stype, \"GET\", fmt.Sprintf(\"%s/index.yaml\", repoPrefix), nil, \"\")\n\tsuite.Equal(200, res.Status(), fmt.Sprintf(\"200 GET %s/index.yaml\", repoPrefix))\n\n\t// HEAD /:repo/index.yaml\n\tres = suite.doRequest(stype, \"HEAD\", fmt.Sprintf(\"%s/index.yaml\", repoPrefix), nil, \"\")\n\tsuite.Equal(200, res.Status(), fmt.Sprintf(\"200 HEAD %s/index.yaml\", repoPrefix))\n\n",
                      "markdown": "`\tres = suite.doRequest(stype, \"GET\", fmt.Sprintf(\"%s/index.yaml\", repoPrefix), nil, \"\")\n\tsuite.Equal(200, res.Status(), fmt.Sprintf(\"200 GET %s/index.yaml\", repoPrefix))\n\n\t// HEAD /:repo/index.yaml\n\tres = suite.doRequest(stype, \"HEAD\", fmt.Sprintf(\"%s/index.yaml\", repoPrefix), nil, \"\")\n\tsuite.Equal(200, res.Status(), fmt.Sprintf(\"200 HEAD %s/index.yaml\", repoPrefix))\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/server/multitenant/server_test.go"
                },
                "region": {
                  "startLine": 627,
                  "endLine": 627,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\tsuite.Nil(err, \"no error removing broken tarball\")\n\tobjects, err = server.fetchChartsInStorage(log, repo)\n\tsuite.Nil(err, \"no error on fetchChartsInStorage\")\n\tdiff = storage.GetObjectSliceDiff(server.getRepoObjectSliceWithLock(entry), objects, server.TimestampTolerance)\n\t_, err = server.regenerateRepositoryIndexWorker(log, entry, diff)\n\tsuite.Nil(err, \"error not returned with broken tarball removed\")\n}\n",
                    "rendered": {
                      "text": "\tsuite.Nil(err, \"no error removing broken tarball\")\n\tobjects, err = server.fetchChartsInStorage(log, repo)\n\tsuite.Nil(err, \"no error on fetchChartsInStorage\")\n\tdiff = storage.GetObjectSliceDiff(server.getRepoObjectSliceWithLock(entry), objects, server.TimestampTolerance)\n\t_, err = server.regenerateRepositoryIndexWorker(log, entry, diff)\n\tsuite.Nil(err, \"error not returned with broken tarball removed\")\n}\n",
                      "markdown": "`\tsuite.Nil(err, \"no error removing broken tarball\")\n\tobjects, err = server.fetchChartsInStorage(log, repo)\n\tsuite.Nil(err, \"no error on fetchChartsInStorage\")\n\tdiff = storage.GetObjectSliceDiff(server.getRepoObjectSliceWithLock(entry), objects, server.TimestampTolerance)\n\t_, err = server.regenerateRepositoryIndexWorker(log, entry, diff)\n\tsuite.Nil(err, \"error not returned with broken tarball removed\")\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/server/multitenant/server_test.go"
                },
                "region": {
                  "startLine": 619,
                  "endLine": 619,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\tsuite.Nil(err, \"no error changing modtime on broken tarball\")\n\tobjects, err = server.fetchChartsInStorage(log, repo)\n\tsuite.Nil(err, \"no error on fetchChartsInStorage\")\n\tdiff = storage.GetObjectSliceDiff(server.getRepoObjectSliceWithLock(entry), objects, server.TimestampTolerance)\n\t_, err = server.regenerateRepositoryIndexWorker(log, entry, diff)\n\tsuite.Nil(err, \"error not returned with broken tarball updated\")\n\n",
                    "rendered": {
                      "text": "\tsuite.Nil(err, \"no error changing modtime on broken tarball\")\n\tobjects, err = server.fetchChartsInStorage(log, repo)\n\tsuite.Nil(err, \"no error on fetchChartsInStorage\")\n\tdiff = storage.GetObjectSliceDiff(server.getRepoObjectSliceWithLock(entry), objects, server.TimestampTolerance)\n\t_, err = server.regenerateRepositoryIndexWorker(log, entry, diff)\n\tsuite.Nil(err, \"error not returned with broken tarball updated\")\n\n",
                      "markdown": "`\tsuite.Nil(err, \"no error changing modtime on broken tarball\")\n\tobjects, err = server.fetchChartsInStorage(log, repo)\n\tsuite.Nil(err, \"no error on fetchChartsInStorage\")\n\tdiff = storage.GetObjectSliceDiff(server.getRepoObjectSliceWithLock(entry), objects, server.TimestampTolerance)\n\t_, err = server.regenerateRepositoryIndexWorker(log, entry, diff)\n\tsuite.Nil(err, \"error not returned with broken tarball updated\")\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/server/multitenant/server_test.go"
                },
                "region": {
                  "startLine": 611,
                  "endLine": 611,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\tdefer destFile.Close()\n\tobjects, err = server.fetchChartsInStorage(log, repo)\n\tsuite.Nil(err, \"no error on fetchChartsInStorage\")\n\tdiff = storage.GetObjectSliceDiff(server.getRepoObjectSliceWithLock(entry), objects, server.TimestampTolerance)\n\t_, err = server.regenerateRepositoryIndexWorker(log, entry, diff)\n\tsuite.Nil(err, \"error not returned with broken tarball added\")\n\n",
                    "rendered": {
                      "text": "\tdefer destFile.Close()\n\tobjects, err = server.fetchChartsInStorage(log, repo)\n\tsuite.Nil(err, \"no error on fetchChartsInStorage\")\n\tdiff = storage.GetObjectSliceDiff(server.getRepoObjectSliceWithLock(entry), objects, server.TimestampTolerance)\n\t_, err = server.regenerateRepositoryIndexWorker(log, entry, diff)\n\tsuite.Nil(err, \"error not returned with broken tarball added\")\n\n",
                      "markdown": "`\tdefer destFile.Close()\n\tobjects, err = server.fetchChartsInStorage(log, repo)\n\tsuite.Nil(err, \"no error on fetchChartsInStorage\")\n\tdiff = storage.GetObjectSliceDiff(server.getRepoObjectSliceWithLock(entry), objects, server.TimestampTolerance)\n\t_, err = server.regenerateRepositoryIndexWorker(log, entry, diff)\n\tsuite.Nil(err, \"error not returned with broken tarball added\")\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/server/multitenant/server_test.go"
                },
                "region": {
                  "startLine": 601,
                  "endLine": 601,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\n\tobjects, err = server.fetchChartsInStorage(log, repo)\n\tsuite.Nil(err, \"no error on fetchChartsInStorage\")\n\tdiff = storage.GetObjectSliceDiff(server.getRepoObjectSliceWithLock(entry), objects, server.TimestampTolerance)\n\t_, err = server.regenerateRepositoryIndexWorker(log, entry, diff)\n\tsuite.Nil(err, \"no error regenerating repo index with tarball updated\")\n\n",
                    "rendered": {
                      "text": "\n\tobjects, err = server.fetchChartsInStorage(log, repo)\n\tsuite.Nil(err, \"no error on fetchChartsInStorage\")\n\tdiff = storage.GetObjectSliceDiff(server.getRepoObjectSliceWithLock(entry), objects, server.TimestampTolerance)\n\t_, err = server.regenerateRepositoryIndexWorker(log, entry, diff)\n\tsuite.Nil(err, \"no error regenerating repo index with tarball updated\")\n\n",
                      "markdown": "`\n\tobjects, err = server.fetchChartsInStorage(log, repo)\n\tsuite.Nil(err, \"no error on fetchChartsInStorage\")\n\tdiff = storage.GetObjectSliceDiff(server.getRepoObjectSliceWithLock(entry), objects, server.TimestampTolerance)\n\t_, err = server.regenerateRepositoryIndexWorker(log, entry, diff)\n\tsuite.Nil(err, \"no error regenerating repo index with tarball updated\")\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/server/multitenant/server_test.go"
                },
                "region": {
                  "startLine": 591,
                  "endLine": 591,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t\treturn\n\t}\n\tsuite.Nil(err, \"no error on fetchChartsInStorage\")\n\tdiff := storage.GetObjectSliceDiff(server.getRepoObjectSliceWithLock(entry), objects, server.TimestampTolerance)\n\t_, err = server.regenerateRepositoryIndexWorker(log, entry, diff)\n\tsuite.Nil(err, \"no error regenerating repo index\")\n\n",
                    "rendered": {
                      "text": "\t\treturn\n\t}\n\tsuite.Nil(err, \"no error on fetchChartsInStorage\")\n\tdiff := storage.GetObjectSliceDiff(server.getRepoObjectSliceWithLock(entry), objects, server.TimestampTolerance)\n\t_, err = server.regenerateRepositoryIndexWorker(log, entry, diff)\n\tsuite.Nil(err, \"no error regenerating repo index\")\n\n",
                      "markdown": "`\t\treturn\n\t}\n\tsuite.Nil(err, \"no error on fetchChartsInStorage\")\n\tdiff := storage.GetObjectSliceDiff(server.getRepoObjectSliceWithLock(entry), objects, server.TimestampTolerance)\n\t_, err = server.regenerateRepositoryIndexWorker(log, entry, diff)\n\tsuite.Nil(err, \"no error regenerating repo index\")\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/server/multitenant/index.go"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 1,
                  "endLine": 60,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\t\t}\n\n\t\tobjects := server.getRepoObjectSlice(entry)\n\t\tdiff := cm_storage.GetObjectSliceDiff(objects, fo.objects, server.TimestampTolerance)\n\n\t\t// return fast if no changes\n\t\tif !diff.Change {\n",
                    "rendered": {
                      "text": "\t\t}\n\n\t\tobjects := server.getRepoObjectSlice(entry)\n\t\tdiff := cm_storage.GetObjectSliceDiff(objects, fo.objects, server.TimestampTolerance)\n\n\t\t// return fast if no changes\n\t\tif !diff.Change {\n",
                      "markdown": "`\t\t}\n\n\t\tobjects := server.getRepoObjectSlice(entry)\n\t\tdiff := cm_storage.GetObjectSliceDiff(objects, fo.objects, server.TimestampTolerance)\n\n\t\t// return fast if no changes\n\t\tif !diff.Change {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/router/match_test.go"
                },
                "region": {
                  "startLine": 377,
                  "startColumn": 16,
                  "endLine": 377,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\tif route != nil {\n\t\troute.Handler(c)\n\t}\n\tval, exists = c.Get(\"index\")\n\tsuite.True(exists)\n\tsuite.Equal(3, val)\n\tsuite.Equal([]gin.Param{{Key: \"filename\", Value: \"mychart-0.1.0.tgz\"}, {Key: \"repo\", Value: \"health\"}}, params)\n",
                    "rendered": {
                      "text": "\tif route != nil {\n\t\troute.Handler(c)\n\t}\n\tval, exists = c.Get(\"index\")\n\tsuite.True(exists)\n\tsuite.Equal(3, val)\n\tsuite.Equal([]gin.Param{{Key: \"filename\", Value: \"mychart-0.1.0.tgz\"}, {Key: \"repo\", Value: \"health\"}}, params)\n",
                      "markdown": "`\tif route != nil {\n\t\troute.Handler(c)\n\t}\n\tval, exists = c.Get(\"index\")\n\tsuite.True(exists)\n\tsuite.Equal(3, val)\n\tsuite.Equal([]gin.Param{{Key: \"filename\", Value: \"mychart-0.1.0.tgz\"}, {Key: \"repo\", Value: \"health\"}}, params)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/router/match_test.go"
                },
                "region": {
                  "startLine": 362,
                  "startColumn": 16,
                  "endLine": 362,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\tif route != nil {\n\t\troute.Handler(c)\n\t}\n\tval, exists = c.Get(\"index\")\n\tsuite.True(exists)\n\tsuite.Equal(2, val)\n\tsuite.Equal([]gin.Param{{Key: \"repo\", Value: \"health\"}}, params)\n",
                    "rendered": {
                      "text": "\tif route != nil {\n\t\troute.Handler(c)\n\t}\n\tval, exists = c.Get(\"index\")\n\tsuite.True(exists)\n\tsuite.Equal(2, val)\n\tsuite.Equal([]gin.Param{{Key: \"repo\", Value: \"health\"}}, params)\n",
                      "markdown": "`\tif route != nil {\n\t\troute.Handler(c)\n\t}\n\tval, exists = c.Get(\"index\")\n\tsuite.True(exists)\n\tsuite.Equal(2, val)\n\tsuite.Equal([]gin.Param{{Key: \"repo\", Value: \"health\"}}, params)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/router/match_test.go"
                },
                "region": {
                  "startLine": 346,
                  "startColumn": 16,
                  "endLine": 346,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\tif route != nil {\n\t\troute.Handler(c)\n\t}\n\tval, exists = c.Get(\"index\")\n\tsuite.True(exists)\n\tsuite.Equal(3, val)\n\tsuite.Equal([]gin.Param{{Key: \"filename\", Value: \"mychart-0.1.0.tgz\"}, {Key: \"repo\", Value: \"api/xyz\"}}, params)\n",
                    "rendered": {
                      "text": "\tif route != nil {\n\t\troute.Handler(c)\n\t}\n\tval, exists = c.Get(\"index\")\n\tsuite.True(exists)\n\tsuite.Equal(3, val)\n\tsuite.Equal([]gin.Param{{Key: \"filename\", Value: \"mychart-0.1.0.tgz\"}, {Key: \"repo\", Value: \"api/xyz\"}}, params)\n",
                      "markdown": "`\tif route != nil {\n\t\troute.Handler(c)\n\t}\n\tval, exists = c.Get(\"index\")\n\tsuite.True(exists)\n\tsuite.Equal(3, val)\n\tsuite.Equal([]gin.Param{{Key: \"filename\", Value: \"mychart-0.1.0.tgz\"}, {Key: \"repo\", Value: \"api/xyz\"}}, params)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/router/match_test.go"
                },
                "region": {
                  "startLine": 331,
                  "startColumn": 16,
                  "endLine": 331,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\tif route != nil {\n\t\troute.Handler(c)\n\t}\n\tval, exists = c.Get(\"index\")\n\tsuite.True(exists)\n\tsuite.Equal(2, val)\n\tsuite.Equal([]gin.Param{{Key: \"repo\", Value: \"api/xyz\"}}, params)\n",
                    "rendered": {
                      "text": "\tif route != nil {\n\t\troute.Handler(c)\n\t}\n\tval, exists = c.Get(\"index\")\n\tsuite.True(exists)\n\tsuite.Equal(2, val)\n\tsuite.Equal([]gin.Param{{Key: \"repo\", Value: \"api/xyz\"}}, params)\n",
                      "markdown": "`\tif route != nil {\n\t\troute.Handler(c)\n\t}\n\tval, exists = c.Get(\"index\")\n\tsuite.True(exists)\n\tsuite.Equal(2, val)\n\tsuite.Equal([]gin.Param{{Key: \"repo\", Value: \"api/xyz\"}}, params)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/router/match_test.go"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 16,
                  "endLine": 315,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\tif route != nil {\n\t\troute.Handler(c)\n\t}\n\tval, exists = c.Get(\"index\")\n\tsuite.True(exists)\n\tsuite.Equal(3, val)\n\tsuite.Equal([]gin.Param{{Key: \"filename\", Value: \"mychart-0.1.0.tgz\"}, {Key: \"repo\", Value: \"api\"}}, params)\n",
                    "rendered": {
                      "text": "\tif route != nil {\n\t\troute.Handler(c)\n\t}\n\tval, exists = c.Get(\"index\")\n\tsuite.True(exists)\n\tsuite.Equal(3, val)\n\tsuite.Equal([]gin.Param{{Key: \"filename\", Value: \"mychart-0.1.0.tgz\"}, {Key: \"repo\", Value: \"api\"}}, params)\n",
                      "markdown": "`\tif route != nil {\n\t\troute.Handler(c)\n\t}\n\tval, exists = c.Get(\"index\")\n\tsuite.True(exists)\n\tsuite.Equal(3, val)\n\tsuite.Equal([]gin.Param{{Key: \"filename\", Value: \"mychart-0.1.0.tgz\"}, {Key: \"repo\", Value: \"api\"}}, params)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/router/match_test.go"
                },
                "region": {
                  "startLine": 300,
                  "startColumn": 16,
                  "endLine": 300,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\tif route != nil {\n\t\troute.Handler(c)\n\t}\n\tval, exists = c.Get(\"index\")\n\tsuite.True(exists)\n\tsuite.Equal(2, val)\n\tsuite.Equal([]gin.Param{{Key: \"repo\", Value: \"api\"}}, params)\n",
                    "rendered": {
                      "text": "\tif route != nil {\n\t\troute.Handler(c)\n\t}\n\tval, exists = c.Get(\"index\")\n\tsuite.True(exists)\n\tsuite.Equal(2, val)\n\tsuite.Equal([]gin.Param{{Key: \"repo\", Value: \"api\"}}, params)\n",
                      "markdown": "`\tif route != nil {\n\t\troute.Handler(c)\n\t}\n\tval, exists = c.Get(\"index\")\n\tsuite.True(exists)\n\tsuite.Equal(2, val)\n\tsuite.Equal([]gin.Param{{Key: \"repo\", Value: \"api\"}}, params)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/router/match_test.go"
                },
                "region": {
                  "startLine": 284,
                  "startColumn": 16,
                  "endLine": 284,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\tif route != nil {\n\t\troute.Handler(c)\n\t}\n\tval, exists = c.Get(\"index\")\n\tsuite.True(exists)\n\tsuite.Equal(3, val)\n\tsuite.Equal([]gin.Param{{Key: \"filename\", Value: \"mychart-0.1.0.tgz\"}, {Key: \"repo\", Value: \"apix\"}}, params)\n",
                    "rendered": {
                      "text": "\tif route != nil {\n\t\troute.Handler(c)\n\t}\n\tval, exists = c.Get(\"index\")\n\tsuite.True(exists)\n\tsuite.Equal(3, val)\n\tsuite.Equal([]gin.Param{{Key: \"filename\", Value: \"mychart-0.1.0.tgz\"}, {Key: \"repo\", Value: \"apix\"}}, params)\n",
                      "markdown": "`\tif route != nil {\n\t\troute.Handler(c)\n\t}\n\tval, exists = c.Get(\"index\")\n\tsuite.True(exists)\n\tsuite.Equal(3, val)\n\tsuite.Equal([]gin.Param{{Key: \"filename\", Value: \"mychart-0.1.0.tgz\"}, {Key: \"repo\", Value: \"apix\"}}, params)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/router/match_test.go"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 17,
                  "endLine": 269,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\tif route != nil {\n\t\troute.Handler(c)\n\t}\n\tval, exists := c.Get(\"index\")\n\tsuite.True(exists)\n\tsuite.Equal(2, val)\n\tsuite.Equal([]gin.Param{{Key: \"repo\", Value: \"apix\"}}, params)\n",
                    "rendered": {
                      "text": "\tif route != nil {\n\t\troute.Handler(c)\n\t}\n\tval, exists := c.Get(\"index\")\n\tsuite.True(exists)\n\tsuite.Equal(2, val)\n\tsuite.Equal([]gin.Param{{Key: \"repo\", Value: \"apix\"}}, params)\n",
                      "markdown": "`\tif route != nil {\n\t\troute.Handler(c)\n\t}\n\tval, exists := c.Get(\"index\")\n\tsuite.True(exists)\n\tsuite.Equal(2, val)\n\tsuite.Equal([]gin.Param{{Key: \"repo\", Value: \"apix\"}}, params)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/router/match_test.go"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 18,
                  "endLine": 252,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\t\t\tif route != nil {\n\t\t\t\troute.Handler(c)\n\t\t\t}\n\t\t\tval, exists = c.Get(\"index\")\n\t\t\tsuite.True(exists)\n\t\t\tsuite.Equal(10, val)\n\t\t}\n",
                    "rendered": {
                      "text": "\t\t\tif route != nil {\n\t\t\t\troute.Handler(c)\n\t\t\t}\n\t\t\tval, exists = c.Get(\"index\")\n\t\t\tsuite.True(exists)\n\t\t\tsuite.Equal(10, val)\n\t\t}\n",
                      "markdown": "`\t\t\tif route != nil {\n\t\t\t\troute.Handler(c)\n\t\t\t}\n\t\t\tval, exists = c.Get(\"index\")\n\t\t\tsuite.True(exists)\n\t\t\tsuite.Equal(10, val)\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/router/match_test.go"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 18,
                  "endLine": 235,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\t\t\tif route != nil {\n\t\t\t\troute.Handler(c)\n\t\t\t}\n\t\t\tval, exists = c.Get(\"index\")\n\t\t\tsuite.True(exists)\n\t\t\tsuite.Equal(9, val)\n\t\t\tsuite.Equal([]gin.Param{{Key: \"name\", Value: \"mychart\"}, {Key: \"version\", Value: \"0.1.0\"}, {Key: \"repo\", Value: repo}}, params)\n",
                    "rendered": {
                      "text": "\t\t\tif route != nil {\n\t\t\t\troute.Handler(c)\n\t\t\t}\n\t\t\tval, exists = c.Get(\"index\")\n\t\t\tsuite.True(exists)\n\t\t\tsuite.Equal(9, val)\n\t\t\tsuite.Equal([]gin.Param{{Key: \"name\", Value: \"mychart\"}, {Key: \"version\", Value: \"0.1.0\"}, {Key: \"repo\", Value: repo}}, params)\n",
                      "markdown": "`\t\t\tif route != nil {\n\t\t\t\troute.Handler(c)\n\t\t\t}\n\t\t\tval, exists = c.Get(\"index\")\n\t\t\tsuite.True(exists)\n\t\t\tsuite.Equal(9, val)\n\t\t\tsuite.Equal([]gin.Param{{Key: \"name\", Value: \"mychart\"}, {Key: \"version\", Value: \"0.1.0\"}, {Key: \"repo\", Value: repo}}, params)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/router/match_test.go"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 18,
                  "endLine": 219,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\t\t\tif route != nil {\n\t\t\t\troute.Handler(c)\n\t\t\t}\n\t\t\tval, exists = c.Get(\"index\")\n\t\t\tsuite.True(exists)\n\t\t\tsuite.Equal(8, val)\n\t\t\tsuite.Equal([]gin.Param{{Key: \"repo\", Value: repo}}, params)\n",
                    "rendered": {
                      "text": "\t\t\tif route != nil {\n\t\t\t\troute.Handler(c)\n\t\t\t}\n\t\t\tval, exists = c.Get(\"index\")\n\t\t\tsuite.True(exists)\n\t\t\tsuite.Equal(8, val)\n\t\t\tsuite.Equal([]gin.Param{{Key: \"repo\", Value: repo}}, params)\n",
                      "markdown": "`\t\t\tif route != nil {\n\t\t\t\troute.Handler(c)\n\t\t\t}\n\t\t\tval, exists = c.Get(\"index\")\n\t\t\tsuite.True(exists)\n\t\t\tsuite.Equal(8, val)\n\t\t\tsuite.Equal([]gin.Param{{Key: \"repo\", Value: repo}}, params)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/router/match_test.go"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 18,
                  "endLine": 203,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\t\t\tif route != nil {\n\t\t\t\troute.Handler(c)\n\t\t\t}\n\t\t\tval, exists = c.Get(\"index\")\n\t\t\tsuite.True(exists)\n\t\t\tsuite.Equal(7, val)\n\t\t\tsuite.Equal([]gin.Param{{Key: \"repo\", Value: repo}}, params)\n",
                    "rendered": {
                      "text": "\t\t\tif route != nil {\n\t\t\t\troute.Handler(c)\n\t\t\t}\n\t\t\tval, exists = c.Get(\"index\")\n\t\t\tsuite.True(exists)\n\t\t\tsuite.Equal(7, val)\n\t\t\tsuite.Equal([]gin.Param{{Key: \"repo\", Value: repo}}, params)\n",
                      "markdown": "`\t\t\tif route != nil {\n\t\t\t\troute.Handler(c)\n\t\t\t}\n\t\t\tval, exists = c.Get(\"index\")\n\t\t\tsuite.True(exists)\n\t\t\tsuite.Equal(7, val)\n\t\t\tsuite.Equal([]gin.Param{{Key: \"repo\", Value: repo}}, params)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/router/match_test.go"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 18,
                  "endLine": 187,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\t\t\tif route != nil {\n\t\t\t\troute.Handler(c)\n\t\t\t}\n\t\t\tval, exists = c.Get(\"index\")\n\t\t\tsuite.True(exists)\n\t\t\tsuite.Equal(6, val)\n\t\t\tsuite.Equal([]gin.Param{{Key: \"name\", Value: \"mychart\"}, {Key: \"version\", Value: \"0.1.0\"}, {Key: \"repo\", Value: repo}}, params)\n",
                    "rendered": {
                      "text": "\t\t\tif route != nil {\n\t\t\t\troute.Handler(c)\n\t\t\t}\n\t\t\tval, exists = c.Get(\"index\")\n\t\t\tsuite.True(exists)\n\t\t\tsuite.Equal(6, val)\n\t\t\tsuite.Equal([]gin.Param{{Key: \"name\", Value: \"mychart\"}, {Key: \"version\", Value: \"0.1.0\"}, {Key: \"repo\", Value: repo}}, params)\n",
                      "markdown": "`\t\t\tif route != nil {\n\t\t\t\troute.Handler(c)\n\t\t\t}\n\t\t\tval, exists = c.Get(\"index\")\n\t\t\tsuite.True(exists)\n\t\t\tsuite.Equal(6, val)\n\t\t\tsuite.Equal([]gin.Param{{Key: \"name\", Value: \"mychart\"}, {Key: \"version\", Value: \"0.1.0\"}, {Key: \"repo\", Value: repo}}, params)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/router/match_test.go"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 18,
                  "endLine": 171,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\t\t\tif route != nil {\n\t\t\t\troute.Handler(c)\n\t\t\t}\n\t\t\tval, exists = c.Get(\"index\")\n\t\t\tsuite.True(exists)\n\t\t\tsuite.Equal(5, val)\n\t\t\tsuite.Equal([]gin.Param{{Key: \"name\", Value: \"mychart\"}, {Key: \"repo\", Value: repo}}, params)\n",
                    "rendered": {
                      "text": "\t\t\tif route != nil {\n\t\t\t\troute.Handler(c)\n\t\t\t}\n\t\t\tval, exists = c.Get(\"index\")\n\t\t\tsuite.True(exists)\n\t\t\tsuite.Equal(5, val)\n\t\t\tsuite.Equal([]gin.Param{{Key: \"name\", Value: \"mychart\"}, {Key: \"repo\", Value: repo}}, params)\n",
                      "markdown": "`\t\t\tif route != nil {\n\t\t\t\troute.Handler(c)\n\t\t\t}\n\t\t\tval, exists = c.Get(\"index\")\n\t\t\tsuite.True(exists)\n\t\t\tsuite.Equal(5, val)\n\t\t\tsuite.Equal([]gin.Param{{Key: \"name\", Value: \"mychart\"}, {Key: \"repo\", Value: repo}}, params)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/router/match_test.go"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 18,
                  "endLine": 155,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\t\t\tif route != nil {\n\t\t\t\troute.Handler(c)\n\t\t\t}\n\t\t\tval, exists = c.Get(\"index\")\n\t\t\tsuite.True(exists)\n\t\t\tsuite.Equal(4, val)\n\t\t\tsuite.Equal([]gin.Param{{Key: \"repo\", Value: repo}}, params)\n",
                    "rendered": {
                      "text": "\t\t\tif route != nil {\n\t\t\t\troute.Handler(c)\n\t\t\t}\n\t\t\tval, exists = c.Get(\"index\")\n\t\t\tsuite.True(exists)\n\t\t\tsuite.Equal(4, val)\n\t\t\tsuite.Equal([]gin.Param{{Key: \"repo\", Value: repo}}, params)\n",
                      "markdown": "`\t\t\tif route != nil {\n\t\t\t\troute.Handler(c)\n\t\t\t}\n\t\t\tval, exists = c.Get(\"index\")\n\t\t\tsuite.True(exists)\n\t\t\tsuite.Equal(4, val)\n\t\t\tsuite.Equal([]gin.Param{{Key: \"repo\", Value: repo}}, params)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/router/match_test.go"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 18,
                  "endLine": 139,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\t\t\tif route != nil {\n\t\t\t\troute.Handler(c)\n\t\t\t}\n\t\t\tval, exists = c.Get(\"index\")\n\t\t\tsuite.True(exists)\n\t\t\tsuite.Equal(3, val)\n\t\t\tsuite.Equal([]gin.Param{{Key: \"filename\", Value: \"mychart-0.1.0.tgz\"}, {Key: \"repo\", Value: repo}}, params)\n",
                    "rendered": {
                      "text": "\t\t\tif route != nil {\n\t\t\t\troute.Handler(c)\n\t\t\t}\n\t\t\tval, exists = c.Get(\"index\")\n\t\t\tsuite.True(exists)\n\t\t\tsuite.Equal(3, val)\n\t\t\tsuite.Equal([]gin.Param{{Key: \"filename\", Value: \"mychart-0.1.0.tgz\"}, {Key: \"repo\", Value: repo}}, params)\n",
                      "markdown": "`\t\t\tif route != nil {\n\t\t\t\troute.Handler(c)\n\t\t\t}\n\t\t\tval, exists = c.Get(\"index\")\n\t\t\tsuite.True(exists)\n\t\t\tsuite.Equal(3, val)\n\t\t\tsuite.Equal([]gin.Param{{Key: \"filename\", Value: \"mychart-0.1.0.tgz\"}, {Key: \"repo\", Value: repo}}, params)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/router/match_test.go"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 18,
                  "endLine": 123,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\t\t\tif route != nil {\n\t\t\t\troute.Handler(c)\n\t\t\t}\n\t\t\tval, exists = c.Get(\"index\")\n\t\t\tsuite.True(exists)\n\t\t\tsuite.Equal(2, val)\n\t\t\tsuite.Equal([]gin.Param{{Key: \"repo\", Value: repo}}, params)\n",
                    "rendered": {
                      "text": "\t\t\tif route != nil {\n\t\t\t\troute.Handler(c)\n\t\t\t}\n\t\t\tval, exists = c.Get(\"index\")\n\t\t\tsuite.True(exists)\n\t\t\tsuite.Equal(2, val)\n\t\t\tsuite.Equal([]gin.Param{{Key: \"repo\", Value: repo}}, params)\n",
                      "markdown": "`\t\t\tif route != nil {\n\t\t\t\troute.Handler(c)\n\t\t\t}\n\t\t\tval, exists = c.Get(\"index\")\n\t\t\tsuite.True(exists)\n\t\t\tsuite.Equal(2, val)\n\t\t\tsuite.Equal([]gin.Param{{Key: \"repo\", Value: repo}}, params)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/router/match_test.go"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 18,
                  "endLine": 108,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\t\t\tif route != nil {\n\t\t\t\troute.Handler(c)\n\t\t\t}\n\t\t\tval, exists = c.Get(\"index\")\n\t\t\tsuite.True(exists)\n\t\t\tsuite.Equal(1, val)\n\n",
                    "rendered": {
                      "text": "\t\t\tif route != nil {\n\t\t\t\troute.Handler(c)\n\t\t\t}\n\t\t\tval, exists = c.Get(\"index\")\n\t\t\tsuite.True(exists)\n\t\t\tsuite.Equal(1, val)\n\n",
                      "markdown": "`\t\t\tif route != nil {\n\t\t\t\troute.Handler(c)\n\t\t\t}\n\t\t\tval, exists = c.Get(\"index\")\n\t\t\tsuite.True(exists)\n\t\t\tsuite.Equal(1, val)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/router/match_test.go"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 19,
                  "endLine": 86,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\t\t\tif route != nil {\n\t\t\t\troute.Handler(c)\n\t\t\t}\n\t\t\tval, exists := c.Get(\"index\")\n\t\t\tsuite.True(exists)\n\t\t\tsuite.Equal(0, val)\n\n",
                    "rendered": {
                      "text": "\t\t\tif route != nil {\n\t\t\t\troute.Handler(c)\n\t\t\t}\n\t\t\tval, exists := c.Get(\"index\")\n\t\t\tsuite.True(exists)\n\t\t\tsuite.Equal(0, val)\n\n",
                      "markdown": "`\t\t\tif route != nil {\n\t\t\t\troute.Handler(c)\n\t\t\t}\n\t\t\tval, exists := c.Get(\"index\")\n\t\t\tsuite.True(exists)\n\t\t\tsuite.Equal(0, val)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/router/middleware.go"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 26,
                  "endLine": 83,
                  "endColumn": 31,
                  "snippet": {
                    "text": "func setupContext(c *gin.Context) {\n\treqCount := strconv.FormatInt(atomic.AddInt64(&requestCount, 1), 10)\n\tc.Set(\"requestcount\", reqCount)\n\treqID := c.Request.Header.Get(\"X-Request-Id\")\n\tif reqID == \"\" {\n\t\treqID = uuid.Must(uuid.NewV4()).String()\n\t}\n",
                    "rendered": {
                      "text": "func setupContext(c *gin.Context) {\n\treqCount := strconv.FormatInt(atomic.AddInt64(&requestCount, 1), 10)\n\tc.Set(\"requestcount\", reqCount)\n\treqID := c.Request.Header.Get(\"X-Request-Id\")\n\tif reqID == \"\" {\n\t\treqID = uuid.Must(uuid.NewV4()).String()\n\t}\n",
                      "markdown": "`func setupContext(c *gin.Context) {\n\treqCount := strconv.FormatInt(atomic.AddInt64(&requestCount, 1), 10)\n\tc.Set(\"requestcount\", reqCount)\n\treqID := c.Request.Header.Get(\"X-Request-Id\")\n\tif reqID == \"\" {\n\t\treqID = uuid.Must(uuid.NewV4()).String()\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/router/router_test.go"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 21,
                  "endLine": 64,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\trouterMetricsEnabled.HandleContext(testContext)\n\tsuite.Equal(404, testContext.Writer.Status())\n\tprefixed500Path := \"/health\"\n\trouterMetricsEnabled.GET(prefixed500Path, func(c *gin.Context) {\n\t\tc.Data(500, \"text/html\", []byte(\"500\"))\n\t})\n\ttestContext, _ = gin.CreateTestContext(httptest.NewRecorder())\n",
                    "rendered": {
                      "text": "\trouterMetricsEnabled.HandleContext(testContext)\n\tsuite.Equal(404, testContext.Writer.Status())\n\tprefixed500Path := \"/health\"\n\trouterMetricsEnabled.GET(prefixed500Path, func(c *gin.Context) {\n\t\tc.Data(500, \"text/html\", []byte(\"500\"))\n\t})\n\ttestContext, _ = gin.CreateTestContext(httptest.NewRecorder())\n",
                      "markdown": "`\trouterMetricsEnabled.HandleContext(testContext)\n\tsuite.Equal(404, testContext.Writer.Status())\n\tprefixed500Path := \"/health\"\n\trouterMetricsEnabled.GET(prefixed500Path, func(c *gin.Context) {\n\t\tc.Data(500, \"text/html\", []byte(\"500\"))\n\t})\n\ttestContext, _ = gin.CreateTestContext(httptest.NewRecorder())\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/router/router_test.go"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 22,
                  "endLine": 238,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\t\t},\n\t}\n\tcmtokenGenerator, err := cm_auth.NewTokenGenerator(&cm_auth.TokenGeneratorOptions{\n\t\tPrivateKeyPath: testPrivateKey,\n\t})\n\tsuite.Nil(err)\n\n",
                    "rendered": {
                      "text": "\t\t},\n\t}\n\tcmtokenGenerator, err := cm_auth.NewTokenGenerator(&cm_auth.TokenGeneratorOptions{\n\t\tPrivateKeyPath: testPrivateKey,\n\t})\n\tsuite.Nil(err)\n\n",
                      "markdown": "`\t\t},\n\t}\n\tcmtokenGenerator, err := cm_auth.NewTokenGenerator(&cm_auth.TokenGeneratorOptions{\n\t\tPrivateKeyPath: testPrivateKey,\n\t})\n\tsuite.Nil(err)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/router/router_test.go"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 2,
                  "endLine": 238,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t},\n\t}\n\tcmtokenGenerator, err := cm_auth.NewTokenGenerator(&cm_auth.TokenGeneratorOptions{\n\t\tPrivateKeyPath: testPrivateKey,\n\t})\n\tsuite.Nil(err)\n\n",
                    "rendered": {
                      "text": "\t\t},\n\t}\n\tcmtokenGenerator, err := cm_auth.NewTokenGenerator(&cm_auth.TokenGeneratorOptions{\n\t\tPrivateKeyPath: testPrivateKey,\n\t})\n\tsuite.Nil(err)\n\n",
                      "markdown": "`\t\t},\n\t}\n\tcmtokenGenerator, err := cm_auth.NewTokenGenerator(&cm_auth.TokenGeneratorOptions{\n\t\tPrivateKeyPath: testPrivateKey,\n\t})\n\tsuite.Nil(err)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/router/router_test.go"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 2,
                  "endLine": 193,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\t\tLogger:       log,\n\t\tDepth:        0,\n\t\tUsername:     \"testuser\",\n\t\tPassword:     \"testpass\",\n\t\tAnonymousGet: true,\n\t})\n\tbasicAuthRouterAnonGet.SetRoutes(testRoutes)\n",
                    "rendered": {
                      "text": "\t\tLogger:       log,\n\t\tDepth:        0,\n\t\tUsername:     \"testuser\",\n\t\tPassword:     \"testpass\",\n\t\tAnonymousGet: true,\n\t})\n\tbasicAuthRouterAnonGet.SetRoutes(testRoutes)\n",
                      "markdown": "`\t\tLogger:       log,\n\t\tDepth:        0,\n\t\tUsername:     \"testuser\",\n\t\tPassword:     \"testpass\",\n\t\tAnonymousGet: true,\n\t})\n\tbasicAuthRouterAnonGet.SetRoutes(testRoutes)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/router/router_test.go"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 2,
                  "endLine": 162,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\t\tLogger:   log,\n\t\tDepth:    0,\n\t\tUsername: \"testuser\",\n\t\tPassword: \"testpass\",\n\t})\n\tbasicAuthRouter.SetRoutes(testRoutes)\n\n",
                    "rendered": {
                      "text": "\t\tLogger:   log,\n\t\tDepth:    0,\n\t\tUsername: \"testuser\",\n\t\tPassword: \"testpass\",\n\t})\n\tbasicAuthRouter.SetRoutes(testRoutes)\n\n",
                      "markdown": "`\t\tLogger:   log,\n\t\tDepth:    0,\n\t\tUsername: \"testuser\",\n\t\tPassword: \"testpass\",\n\t})\n\tbasicAuthRouter.SetRoutes(testRoutes)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/router/router_test.go"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 5,
                  "endLine": 37,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\nvar (\n\ttestPublicKey      = \"../../../testdata/bearerauth/server.pem\"\n\ttestPrivateKey     = \"../../../testdata/bearerauth/server.key\"\n\ttestClientAuthCert = \"../../../testdata/clientauthcerts/server.pem\"\n\ttestClientAuthKey  = \"../../../testdata/clientauthcerts/server.key\"\n\ttestClientAuthCA   = \"../../../testdata/clientauthcerts/ca.pem\"\n",
                    "rendered": {
                      "text": "\nvar (\n\ttestPublicKey      = \"../../../testdata/bearerauth/server.pem\"\n\ttestPrivateKey     = \"../../../testdata/bearerauth/server.key\"\n\ttestClientAuthCert = \"../../../testdata/clientauthcerts/server.pem\"\n\ttestClientAuthKey  = \"../../../testdata/clientauthcerts/server.key\"\n\ttestClientAuthCA   = \"../../../testdata/clientauthcerts/ca.pem\"\n",
                      "markdown": "`\nvar (\n\ttestPublicKey      = \"../../../testdata/bearerauth/server.pem\"\n\ttestPrivateKey     = \"../../../testdata/bearerauth/server.key\"\n\ttestClientAuthCert = \"../../../testdata/clientauthcerts/server.pem\"\n\ttestClientAuthKey  = \"../../../testdata/clientauthcerts/server.key\"\n\ttestClientAuthCA   = \"../../../testdata/clientauthcerts/ca.pem\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/router/router_test.go"
                },
                "region": {
                  "startLine": 270,
                  "startColumn": 1,
                  "endLine": 270,
                  "endColumn": 9,
                  "snippet": {
                    "text": "func (suite *RouterTestSuite) TestMapURLWithParamsBackToRouteTemplate() {\n\ttests := []struct {\n\t\tctx    *gin.Context\n\t\texpect string\n\t}{\n\t\t{&gin.Context{\n\t\t\tRequest: &http.Request{URL: &url.URL{Path: \"/index.yaml\"}},\n",
                    "rendered": {
                      "text": "func (suite *RouterTestSuite) TestMapURLWithParamsBackToRouteTemplate() {\n\ttests := []struct {\n\t\tctx    *gin.Context\n\t\texpect string\n\t}{\n\t\t{&gin.Context{\n\t\t\tRequest: &http.Request{URL: &url.URL{Path: \"/index.yaml\"}},\n",
                      "markdown": "`func (suite *RouterTestSuite) TestMapURLWithParamsBackToRouteTemplate() {\n\ttests := []struct {\n\t\tctx    *gin.Context\n\t\texpect string\n\t}{\n\t\t{&gin.Context{\n\t\t\tRequest: &http.Request{URL: &url.URL{Path: \"/index.yaml\"}},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/testdata/badcharts/mybadchart/templates/pod.yaml"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 8,
                  "snippet": {
                    "text": "  name: '{{- printf \"%s-%s\" .Release.Name .Chart.Name | trunc 63 | trimSuffix \"-\" -}}'\nspec:\n  containers:\n  - image: busybox\n    name: '{{ .Chart.Name }}'\n    command: ['/bin/sh', '-c', 'while true; do echo {{ .Release.Name }}; sleep 5; done']",
                    "rendered": {
                      "text": "  name: '{{- printf \"%s-%s\" .Release.Name .Chart.Name | trunc 63 | trimSuffix \"-\" -}}'\nspec:\n  containers:\n  - image: busybox\n    name: '{{ .Chart.Name }}'\n    command: ['/bin/sh', '-c', 'while true; do echo {{ .Release.Name }}; sleep 5; done']",
                      "markdown": "`  name: '{{- printf \"%s-%s\" .Release.Name .Chart.Name | trunc 63 | trimSuffix \"-\" -}}'\nspec:\n  containers:\n  - image: busybox\n    name: '{{ .Chart.Name }}'\n    command: ['/bin/sh', '-c', 'while true; do echo {{ .Release.Name }}; sleep 5; done']`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/testdata/badcharts/mybadchart/mybadchart-1.0.0.tgz/mybadchart-1.tar/mybadchart/templates/pod.yaml"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 8,
                  "snippet": {
                    "text": "  name: '{{- printf \"%s-%s\" .Release.Name .Chart.Name | trunc 63 | trimSuffix \"-\" -}}'\nspec:\n  containers:\n  - image: busybox\n    name: '{{ .Chart.Name }}'\n    command: ['/bin/sh', '-c', 'while true; do echo {{ .Release.Name }}; sleep 5; done']",
                    "rendered": {
                      "text": "  name: '{{- printf \"%s-%s\" .Release.Name .Chart.Name | trunc 63 | trimSuffix \"-\" -}}'\nspec:\n  containers:\n  - image: busybox\n    name: '{{ .Chart.Name }}'\n    command: ['/bin/sh', '-c', 'while true; do echo {{ .Release.Name }}; sleep 5; done']",
                      "markdown": "`  name: '{{- printf \"%s-%s\" .Release.Name .Chart.Name | trunc 63 | trimSuffix \"-\" -}}'\nspec:\n  containers:\n  - image: busybox\n    name: '{{ .Chart.Name }}'\n    command: ['/bin/sh', '-c', 'while true; do echo {{ .Release.Name }}; sleep 5; done']`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                    "rendered": {
                      "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                      "markdown": "`# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 37,
                  "endLine": 37,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                    "rendered": {
                      "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                      "markdown": "`#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                    "rendered": {
                      "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                      "markdown": "`# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                    "rendered": {
                      "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                      "markdown": "`# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 39,
                  "endLine": 89,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                    "rendered": {
                      "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                      "markdown": "`\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                    "rendered": {
                      "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                      "markdown": "`\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/pre-merge-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 45,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                    "rendered": {
                      "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                      "markdown": "`\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 29,
                  "endLine": 151,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                    "rendered": {
                      "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                      "markdown": "` * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                    "rendered": {
                      "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                      "markdown": "`    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 104,
                  "snippet": {
                    "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                    "rendered": {
                      "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                      "markdown": "`\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                    "rendered": {
                      "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                      "markdown": "`\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                    "rendered": {
                      "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                      "markdown": "`To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                    "rendered": {
                      "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                      "markdown": "`\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                    "rendered": {
                      "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                      "markdown": "`\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 42,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                    "rendered": {
                      "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                      "markdown": "`   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                      "markdown": "`# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 9,
                  "snippet": {
                    "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                    "rendered": {
                      "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                      "markdown": "`esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 26,
                  "snippet": {
                    "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                    "rendered": {
                      "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                      "markdown": "`\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                    "rendered": {
                      "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                      "markdown": "`\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                    "rendered": {
                      "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                      "markdown": "`unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                    "rendered": {
                      "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                      "markdown": "`\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                    "rendered": {
                      "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                      "markdown": "`\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                    "rendered": {
                      "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                      "markdown": "`if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                    "rendered": {
                      "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                      "markdown": "`validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 21,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                    "rendered": {
                      "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                      "markdown": "`# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "endLine": 15,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                    "rendered": {
                      "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                      "markdown": "`# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/info/exclude"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                    "rendered": {
                      "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                      "markdown": "`# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/loadtesting/Pipfile.lock"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 22,
                  "endLine": 4,
                  "endColumn": 88,
                  "snippet": {
                    "text": "{\n    \"_meta\": {\n        \"hash\": {\n            \"sha256\": \"eabdb82d5fb518b6c3ca12eee0f54a0a6fa7a9780a4689dcfc156621a66459ec\"\n        },\n        \"pipfile-spec\": 6,\n        \"requires\": {},\n",
                    "rendered": {
                      "text": "{\n    \"_meta\": {\n        \"hash\": {\n            \"sha256\": \"eabdb82d5fb518b6c3ca12eee0f54a0a6fa7a9780a4689dcfc156621a66459ec\"\n        },\n        \"pipfile-spec\": 6,\n        \"requires\": {},\n",
                      "markdown": "`{\n    \"_meta\": {\n        \"hash\": {\n            \"sha256\": \"eabdb82d5fb518b6c3ca12eee0f54a0a6fa7a9780a4689dcfc156621a66459ec\"\n        },\n        \"pipfile-spec\": 6,\n        \"requires\": {},\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/loadtesting/locustfile.py"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 19,
                  "endLine": 31,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        t.close()\n        tgz_buf.seek(0)\n\n        self.client.post('/api/charts', files={chart_post_field_name: (chart_fn, tgz_buf)})\n\nclass WebsiteUser(HttpUser):\n    tasks = [UserBehavior]\n",
                    "rendered": {
                      "text": "        t.close()\n        tgz_buf.seek(0)\n\n        self.client.post('/api/charts', files={chart_post_field_name: (chart_fn, tgz_buf)})\n\nclass WebsiteUser(HttpUser):\n    tasks = [UserBehavior]\n",
                      "markdown": "`        t.close()\n        tgz_buf.seek(0)\n\n        self.client.post('/api/charts', files={chart_post_field_name: (chart_fn, tgz_buf)})\n\nclass WebsiteUser(HttpUser):\n    tasks = [UserBehavior]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/loadtesting/locustfile.py"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 19,
                  "endLine": 10,
                  "endColumn": 24,
                  "snippet": {
                    "text": "class UserBehavior(TaskSet):\n    @task(10)\n    def index(self):\n        self.client.get(\"/index.yaml\")\n\n    @task(1)\n    def post_new_chart(self):\n",
                    "rendered": {
                      "text": "class UserBehavior(TaskSet):\n    @task(10)\n    def index(self):\n        self.client.get(\"/index.yaml\")\n\n    @task(1)\n    def post_new_chart(self):\n",
                      "markdown": "`class UserBehavior(TaskSet):\n    @task(10)\n    def index(self):\n        self.client.get(\"/index.yaml\")\n\n    @task(1)\n    def post_new_chart(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/logger/logger.go"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 23,
                  "endLine": 122,
                  "endColumn": 28,
                  "snippet": {
                    "text": "func transformLogcArgs(c *gin.Context, msg string, keysAndValues []interface{}) (string, []interface{}) {\n\tif reqCount, exists := c.Get(\"requestcount\"); exists {\n\t\tmsg = fmt.Sprintf(\"[%s] %s\", reqCount, msg)\n\t\tif reqID, exists := c.Get(\"requestid\"); exists {\n\t\t\tkeysAndValues = append(keysAndValues, \"reqID\", reqID)\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "func transformLogcArgs(c *gin.Context, msg string, keysAndValues []interface{}) (string, []interface{}) {\n\tif reqCount, exists := c.Get(\"requestcount\"); exists {\n\t\tmsg = fmt.Sprintf(\"[%s] %s\", reqCount, msg)\n\t\tif reqID, exists := c.Get(\"requestid\"); exists {\n\t\t\tkeysAndValues = append(keysAndValues, \"reqID\", reqID)\n\t\t}\n\t}\n",
                      "markdown": "`func transformLogcArgs(c *gin.Context, msg string, keysAndValues []interface{}) (string, []interface{}) {\n\tif reqCount, exists := c.Get(\"requestcount\"); exists {\n\t\tmsg = fmt.Sprintf(\"[%s] %s\", reqCount, msg)\n\t\tif reqID, exists := c.Get(\"requestid\"); exists {\n\t\t\tkeysAndValues = append(keysAndValues, \"reqID\", reqID)\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/logger/logger.go"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 25,
                  "endLine": 120,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n// transformLogcArgs prefixes msg with RequestCount and adds RequestId to keysAndValues\nfunc transformLogcArgs(c *gin.Context, msg string, keysAndValues []interface{}) (string, []interface{}) {\n\tif reqCount, exists := c.Get(\"requestcount\"); exists {\n\t\tmsg = fmt.Sprintf(\"[%s] %s\", reqCount, msg)\n\t\tif reqID, exists := c.Get(\"requestid\"); exists {\n\t\t\tkeysAndValues = append(keysAndValues, \"reqID\", reqID)\n",
                    "rendered": {
                      "text": "\n// transformLogcArgs prefixes msg with RequestCount and adds RequestId to keysAndValues\nfunc transformLogcArgs(c *gin.Context, msg string, keysAndValues []interface{}) (string, []interface{}) {\n\tif reqCount, exists := c.Get(\"requestcount\"); exists {\n\t\tmsg = fmt.Sprintf(\"[%s] %s\", reqCount, msg)\n\t\tif reqID, exists := c.Get(\"requestid\"); exists {\n\t\t\tkeysAndValues = append(keysAndValues, \"reqID\", reqID)\n",
                      "markdown": "`\n// transformLogcArgs prefixes msg with RequestCount and adds RequestId to keysAndValues\nfunc transformLogcArgs(c *gin.Context, msg string, keysAndValues []interface{}) (string, []interface{}) {\n\tif reqCount, exists := c.Get(\"requestcount\"); exists {\n\t\tmsg = fmt.Sprintf(\"[%s] %s\", reqCount, msg)\n\t\tif reqID, exists := c.Get(\"requestid\"); exists {\n\t\t\tkeysAndValues = append(keysAndValues, \"reqID\", reqID)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/server/multitenant/api.go"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 34,
                  "endLine": 80,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\tif version == \"latest\" {\n\t\tversion = \"\"\n\t}\n\tchartVersion, getErr := indexFile.Get(name, version)\n\tif getErr != nil {\n\t\treturn nil, &HTTPError{http.StatusNotFound, getErr.Error()}\n\t}\n",
                    "rendered": {
                      "text": "\tif version == \"latest\" {\n\t\tversion = \"\"\n\t}\n\tchartVersion, getErr := indexFile.Get(name, version)\n\tif getErr != nil {\n\t\treturn nil, &HTTPError{http.StatusNotFound, getErr.Error()}\n\t}\n",
                      "markdown": "`\tif version == \"latest\" {\n\t\tversion = \"\"\n\t}\n\tchartVersion, getErr := indexFile.Get(name, version)\n\tif getErr != nil {\n\t\treturn nil, &HTTPError{http.StatusNotFound, getErr.Error()}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/router/router.go"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 32,
                  "endLine": 223,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tc.Params = params\n\n\tif route.Action != \"\" && router.Authorizer != nil {\n\t\tauthHeader := c.Request.Header.Get(\"Authorization\")\n\n\t\tnamespace := c.Param(\"repo\")\n\t\tif namespace == \"\" {\n",
                    "rendered": {
                      "text": "\tc.Params = params\n\n\tif route.Action != \"\" && router.Authorizer != nil {\n\t\tauthHeader := c.Request.Header.Get(\"Authorization\")\n\n\t\tnamespace := c.Param(\"repo\")\n\t\tif namespace == \"\" {\n",
                      "markdown": "`\tc.Params = params\n\n\tif route.Action != \"\" && router.Authorizer != nil {\n\t\tauthHeader := c.Request.Header.Get(\"Authorization\")\n\n\t\tnamespace := c.Param(\"repo\")\n\t\tif namespace == \"\" {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/router/router.go"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 21,
                  "endLine": 154,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t\tauthorizer, err = cm_auth.NewAuthorizer(&cm_auth.AuthorizerOptions{\n\t\t\tRealm:    \"ChartMuseum\",\n\t\t\tUsername: options.Username,\n\t\t\tPassword: options.Password,\n\t\t})\n\t}\n\n",
                    "rendered": {
                      "text": "\t\tauthorizer, err = cm_auth.NewAuthorizer(&cm_auth.AuthorizerOptions{\n\t\t\tRealm:    \"ChartMuseum\",\n\t\t\tUsername: options.Username,\n\t\t\tPassword: options.Password,\n\t\t})\n\t}\n\n",
                      "markdown": "`\t\tauthorizer, err = cm_auth.NewAuthorizer(&cm_auth.AuthorizerOptions{\n\t\t\tRealm:    \"ChartMuseum\",\n\t\t\tUsername: options.Username,\n\t\t\tPassword: options.Password,\n\t\t})\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/router/router.go"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 3,
                  "endLine": 154,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t\tauthorizer, err = cm_auth.NewAuthorizer(&cm_auth.AuthorizerOptions{\n\t\t\tRealm:    \"ChartMuseum\",\n\t\t\tUsername: options.Username,\n\t\t\tPassword: options.Password,\n\t\t})\n\t}\n\n",
                    "rendered": {
                      "text": "\t\tauthorizer, err = cm_auth.NewAuthorizer(&cm_auth.AuthorizerOptions{\n\t\t\tRealm:    \"ChartMuseum\",\n\t\t\tUsername: options.Username,\n\t\t\tPassword: options.Password,\n\t\t})\n\t}\n\n",
                      "markdown": "`\t\tauthorizer, err = cm_auth.NewAuthorizer(&cm_auth.AuthorizerOptions{\n\t\t\tRealm:    \"ChartMuseum\",\n\t\t\tUsername: options.Username,\n\t\t\tPassword: options.Password,\n\t\t})\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/router/router.go"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 45,
                  "endLine": 150,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\t\t\tPublicKeyPath:            options.AuthCertPath,\n\t\t\tAllowedActionsSearchPath: options.AuthActionsSearchPath,\n\t\t})\n\t} else if options.Username != \"\" && options.Password != \"\" {\n\t\tauthorizer, err = cm_auth.NewAuthorizer(&cm_auth.AuthorizerOptions{\n\t\t\tRealm:    \"ChartMuseum\",\n\t\t\tUsername: options.Username,\n",
                    "rendered": {
                      "text": "\t\t\tPublicKeyPath:            options.AuthCertPath,\n\t\t\tAllowedActionsSearchPath: options.AuthActionsSearchPath,\n\t\t})\n\t} else if options.Username != \"\" && options.Password != \"\" {\n\t\tauthorizer, err = cm_auth.NewAuthorizer(&cm_auth.AuthorizerOptions{\n\t\t\tRealm:    \"ChartMuseum\",\n\t\t\tUsername: options.Username,\n",
                      "markdown": "`\t\t\tPublicKeyPath:            options.AuthCertPath,\n\t\t\tAllowedActionsSearchPath: options.AuthActionsSearchPath,\n\t\t})\n\t} else if options.Username != \"\" && options.Password != \"\" {\n\t\tauthorizer, err = cm_auth.NewAuthorizer(&cm_auth.AuthorizerOptions{\n\t\t\tRealm:    \"ChartMuseum\",\n\t\t\tUsername: options.Username,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/router/router.go"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 2,
                  "endLine": 61,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\t\tLogger                *cm_logger.Logger\n\t\tLogLatencyInteger     bool\n\t\tUsername              string\n\t\tPassword              string\n\t\tContextPath           string\n\t\tTlsCert               string\n\t\tTlsKey                string\n",
                    "rendered": {
                      "text": "\t\tLogger                *cm_logger.Logger\n\t\tLogLatencyInteger     bool\n\t\tUsername              string\n\t\tPassword              string\n\t\tContextPath           string\n\t\tTlsCert               string\n\t\tTlsKey                string\n",
                      "markdown": "`\t\tLogger                *cm_logger.Logger\n\t\tLogLatencyInteger     bool\n\t\tUsername              string\n\t\tPassword              string\n\t\tContextPath           string\n\t\tTlsCert               string\n\t\tTlsKey                string\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/server.go"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 33,
                  "endLine": 107,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\t\tLogger:                options.Logger,\n\t\tLogLatencyInteger:     options.LogLatencyInteger,\n\t\tUsername:              options.Username,\n\t\tPassword:              options.Password,\n\t\tContextPath:           contextPath,\n\t\tTlsCert:               options.TlsCert,\n\t\tTlsKey:                options.TlsKey,\n",
                    "rendered": {
                      "text": "\t\tLogger:                options.Logger,\n\t\tLogLatencyInteger:     options.LogLatencyInteger,\n\t\tUsername:              options.Username,\n\t\tPassword:              options.Password,\n\t\tContextPath:           contextPath,\n\t\tTlsCert:               options.TlsCert,\n\t\tTlsKey:                options.TlsKey,\n",
                      "markdown": "`\t\tLogger:                options.Logger,\n\t\tLogLatencyInteger:     options.LogLatencyInteger,\n\t\tUsername:              options.Username,\n\t\tPassword:              options.Password,\n\t\tContextPath:           contextPath,\n\t\tTlsCert:               options.TlsCert,\n\t\tTlsKey:                options.TlsKey,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/server.go"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 2,
                  "endLine": 107,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\t\tLogger:                options.Logger,\n\t\tLogLatencyInteger:     options.LogLatencyInteger,\n\t\tUsername:              options.Username,\n\t\tPassword:              options.Password,\n\t\tContextPath:           contextPath,\n\t\tTlsCert:               options.TlsCert,\n\t\tTlsKey:                options.TlsKey,\n",
                    "rendered": {
                      "text": "\t\tLogger:                options.Logger,\n\t\tLogLatencyInteger:     options.LogLatencyInteger,\n\t\tUsername:              options.Username,\n\t\tPassword:              options.Password,\n\t\tContextPath:           contextPath,\n\t\tTlsCert:               options.TlsCert,\n\t\tTlsKey:                options.TlsKey,\n",
                      "markdown": "`\t\tLogger:                options.Logger,\n\t\tLogLatencyInteger:     options.LogLatencyInteger,\n\t\tUsername:              options.Username,\n\t\tPassword:              options.Password,\n\t\tContextPath:           contextPath,\n\t\tTlsCert:               options.TlsCert,\n\t\tTlsKey:                options.TlsKey,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/server.go"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 2,
                  "endLine": 43,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\t\tTlsKey                 string\n\t\tTlsCACert              string\n\t\tUsername               string\n\t\tPassword               string\n\t\tChartPostFormFieldName string\n\t\tProvPostFormFieldName  string\n\t\tContextPath            string\n",
                    "rendered": {
                      "text": "\t\tTlsKey                 string\n\t\tTlsCACert              string\n\t\tUsername               string\n\t\tPassword               string\n\t\tChartPostFormFieldName string\n\t\tProvPostFormFieldName  string\n\t\tContextPath            string\n",
                      "markdown": "`\t\tTlsKey                 string\n\t\tTlsCACert              string\n\t\tUsername               string\n\t\tPassword               string\n\t\tChartPostFormFieldName string\n\t\tProvPostFormFieldName  string\n\t\tContextPath            string\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/acceptance_tests/lib/Helm.py"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 53,
                  "endLine": 21,
                  "endColumn": 61,
                  "snippet": {
                    "text": "        # \"| awk 'NR>1{print buf}{buf = $0}'\" prevents UnicodeDecodeError\n        # due to last line of output, which contains the k8s steering wheel\n        self.run_command('helm repo update | awk \\'NR>1{print buf}{buf = $0}\\' | \\\n                            grep \"Successfully got an update from the \\\\\"%s\\\\\"\"' \\\n                         % common.HELM_REPO_NAME)\n\n    def fetch_and_verify_chart(self, chart):\n",
                    "rendered": {
                      "text": "        # \"| awk 'NR>1{print buf}{buf = $0}'\" prevents UnicodeDecodeError\n        # due to last line of output, which contains the k8s steering wheel\n        self.run_command('helm repo update | awk \\'NR>1{print buf}{buf = $0}\\' | \\\n                            grep \"Successfully got an update from the \\\\\"%s\\\\\"\"' \\\n                         % common.HELM_REPO_NAME)\n\n    def fetch_and_verify_chart(self, chart):\n",
                      "markdown": "`        # \"| awk 'NR>1{print buf}{buf = $0}'\" prevents UnicodeDecodeError\n        # due to last line of output, which contains the k8s steering wheel\n        self.run_command('helm repo update | awk \\'NR>1{print buf}{buf = $0}\\' | \\\n                            grep \"Successfully got an update from the \\\\\"%s\\\\\"\"' \\\n                         % common.HELM_REPO_NAME)\n\n    def fetch_and_verify_chart(self, chart):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/acceptance_tests/lib/Helm.py"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 35,
                  "endLine": 20,
                  "endColumn": 43,
                  "snippet": {
                    "text": "    def update_chart_repos(self):\n        # \"| awk 'NR>1{print buf}{buf = $0}'\" prevents UnicodeDecodeError\n        # due to last line of output, which contains the k8s steering wheel\n        self.run_command('helm repo update | awk \\'NR>1{print buf}{buf = $0}\\' | \\\n                            grep \"Successfully got an update from the \\\\\"%s\\\\\"\"' \\\n                         % common.HELM_REPO_NAME)\n\n",
                    "rendered": {
                      "text": "    def update_chart_repos(self):\n        # \"| awk 'NR>1{print buf}{buf = $0}'\" prevents UnicodeDecodeError\n        # due to last line of output, which contains the k8s steering wheel\n        self.run_command('helm repo update | awk \\'NR>1{print buf}{buf = $0}\\' | \\\n                            grep \"Successfully got an update from the \\\\\"%s\\\\\"\"' \\\n                         % common.HELM_REPO_NAME)\n\n",
                      "markdown": "`    def update_chart_repos(self):\n        # \"| awk 'NR>1{print buf}{buf = $0}'\" prevents UnicodeDecodeError\n        # due to last line of output, which contains the k8s steering wheel\n        self.run_command('helm repo update | awk \\'NR>1{print buf}{buf = $0}\\' | \\\n                            grep \"Successfully got an update from the \\\\\"%s\\\\\"\"' \\\n                         % common.HELM_REPO_NAME)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/acceptance_tests/lib/Helm.py"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 27,
                  "endLine": 21,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        # \"| awk 'NR>1{print buf}{buf = $0}'\" prevents UnicodeDecodeError\n        # due to last line of output, which contains the k8s steering wheel\n        self.run_command('helm repo update | awk \\'NR>1{print buf}{buf = $0}\\' | \\\n                            grep \"Successfully got an update from the \\\\\"%s\\\\\"\"' \\\n                         % common.HELM_REPO_NAME)\n\n    def fetch_and_verify_chart(self, chart):\n",
                    "rendered": {
                      "text": "        # \"| awk 'NR>1{print buf}{buf = $0}'\" prevents UnicodeDecodeError\n        # due to last line of output, which contains the k8s steering wheel\n        self.run_command('helm repo update | awk \\'NR>1{print buf}{buf = $0}\\' | \\\n                            grep \"Successfully got an update from the \\\\\"%s\\\\\"\"' \\\n                         % common.HELM_REPO_NAME)\n\n    def fetch_and_verify_chart(self, chart):\n",
                      "markdown": "`        # \"| awk 'NR>1{print buf}{buf = $0}'\" prevents UnicodeDecodeError\n        # due to last line of output, which contains the k8s steering wheel\n        self.run_command('helm repo update | awk \\'NR>1{print buf}{buf = $0}\\' | \\\n                            grep \"Successfully got an update from the \\\\\"%s\\\\\"\"' \\\n                         % common.HELM_REPO_NAME)\n\n    def fetch_and_verify_chart(self, chart):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/acceptance_tests/lib/Helm.py"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 44,
                  "endLine": 20,
                  "endColumn": 49,
                  "snippet": {
                    "text": "    def update_chart_repos(self):\n        # \"| awk 'NR>1{print buf}{buf = $0}'\" prevents UnicodeDecodeError\n        # due to last line of output, which contains the k8s steering wheel\n        self.run_command('helm repo update | awk \\'NR>1{print buf}{buf = $0}\\' | \\\n                            grep \"Successfully got an update from the \\\\\"%s\\\\\"\"' \\\n                         % common.HELM_REPO_NAME)\n\n",
                    "rendered": {
                      "text": "    def update_chart_repos(self):\n        # \"| awk 'NR>1{print buf}{buf = $0}'\" prevents UnicodeDecodeError\n        # due to last line of output, which contains the k8s steering wheel\n        self.run_command('helm repo update | awk \\'NR>1{print buf}{buf = $0}\\' | \\\n                            grep \"Successfully got an update from the \\\\\"%s\\\\\"\"' \\\n                         % common.HELM_REPO_NAME)\n\n",
                      "markdown": "`    def update_chart_repos(self):\n        # \"| awk 'NR>1{print buf}{buf = $0}'\" prevents UnicodeDecodeError\n        # due to last line of output, which contains the k8s steering wheel\n        self.run_command('helm repo update | awk \\'NR>1{print buf}{buf = $0}\\' | \\\n                            grep \"Successfully got an update from the \\\\\"%s\\\\\"\"' \\\n                         % common.HELM_REPO_NAME)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/acceptance_tests/lib/Helm.py"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 12,
                  "endLine": 18,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        self.run_command('helm search repo %s/%s' % (common.HELM_REPO_NAME, chart))\n\n    def update_chart_repos(self):\n        # \"| awk 'NR>1{print buf}{buf = $0}'\" prevents UnicodeDecodeError\n        # due to last line of output, which contains the k8s steering wheel\n        self.run_command('helm repo update | awk \\'NR>1{print buf}{buf = $0}\\' | \\\n                            grep \"Successfully got an update from the \\\\\"%s\\\\\"\"' \\\n",
                    "rendered": {
                      "text": "        self.run_command('helm search repo %s/%s' % (common.HELM_REPO_NAME, chart))\n\n    def update_chart_repos(self):\n        # \"| awk 'NR>1{print buf}{buf = $0}'\" prevents UnicodeDecodeError\n        # due to last line of output, which contains the k8s steering wheel\n        self.run_command('helm repo update | awk \\'NR>1{print buf}{buf = $0}\\' | \\\n                            grep \"Successfully got an update from the \\\\\"%s\\\\\"\"' \\\n",
                      "markdown": "`        self.run_command('helm search repo %s/%s' % (common.HELM_REPO_NAME, chart))\n\n    def update_chart_repos(self):\n        # \"| awk 'NR>1{print buf}{buf = $0}'\" prevents UnicodeDecodeError\n        # due to last line of output, which contains the k8s steering wheel\n        self.run_command('helm repo update | awk \\'NR>1{print buf}{buf = $0}\\' | \\\n                            grep \"Successfully got an update from the \\\\\"%s\\\\\"\"' \\\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/acceptance_tests/lib/common.py"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 6,
                  "endLine": 4,
                  "snippet": {
                    "text": "import os\nimport subprocess\nimport time\n\nNOW = time.strftime('%Y%m%d%H%M%S')\nPORT = 8080\nHELM_REPO_NAME = 'chartmuseum'\n",
                    "rendered": {
                      "text": "import os\nimport subprocess\nimport time\n\nNOW = time.strftime('%Y%m%d%H%M%S')\nPORT = 8080\nHELM_REPO_NAME = 'chartmuseum'\n",
                      "markdown": "`import os\nimport subprocess\nimport time\n\nNOW = time.strftime('%Y%m%d%H%M%S')\nPORT = 8080\nHELM_REPO_NAME = 'chartmuseum'\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/acceptance_tests/lib/ChartMuseum.py"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 39,
                  "endLine": 188,
                  "endColumn": 44,
                  "snippet": {
                    "text": "                version = tmp[1]\n                with open(tgz):\n                    epoint = '%s/%s/%s' % (endpoint, name, version)\n                    response = requests.get(url=epoint)\n                    self.http_status_code_should_be(404, response.status_code)\n            os.chdir('../')\n",
                    "rendered": {
                      "text": "                version = tmp[1]\n                with open(tgz):\n                    epoint = '%s/%s/%s' % (endpoint, name, version)\n                    response = requests.get(url=epoint)\n                    self.http_status_code_should_be(404, response.status_code)\n            os.chdir('../')\n",
                      "markdown": "`                version = tmp[1]\n                with open(tgz):\n                    epoint = '%s/%s/%s' % (endpoint, name, version)\n                    response = requests.get(url=epoint)\n                    self.http_status_code_should_be(404, response.status_code)\n            os.chdir('../')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/acceptance_tests/lib/ChartMuseum.py"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 39,
                  "endLine": 143,
                  "endColumn": 45,
                  "snippet": {
                    "text": "            for prov in provs:\n                print(('Uploading bad provenance file \"%s\"' % prov))\n                with open(prov) as f:\n                    response = requests.post(url=prov_endpoint, data=f.read())\n                    print(('POST %s' % prov_endpoint))\n                    print(('HTTP STATUS: %s' % response.status_code))\n                    print(('HTTP CONTENT: %s' % response.content))\n",
                    "rendered": {
                      "text": "            for prov in provs:\n                print(('Uploading bad provenance file \"%s\"' % prov))\n                with open(prov) as f:\n                    response = requests.post(url=prov_endpoint, data=f.read())\n                    print(('POST %s' % prov_endpoint))\n                    print(('HTTP STATUS: %s' % response.status_code))\n                    print(('HTTP CONTENT: %s' % response.content))\n",
                      "markdown": "`            for prov in provs:\n                print(('Uploading bad provenance file \"%s\"' % prov))\n                with open(prov) as f:\n                    response = requests.post(url=prov_endpoint, data=f.read())\n                    print(('POST %s' % prov_endpoint))\n                    print(('HTTP STATUS: %s' % response.status_code))\n                    print(('HTTP CONTENT: %s' % response.content))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/acceptance_tests/lib/ChartMuseum.py"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 39,
                  "endLine": 124,
                  "endColumn": 45,
                  "snippet": {
                    "text": "            for prov in provs:\n                print(('Uploading provenance file \"%s\"' % prov))\n                with open(prov) as f:\n                    response = requests.post(url=prov_endpoint, data=f.read())\n                    print(('POST %s' % prov_endpoint))\n                    print(('HTTP STATUS: %s' % response.status_code))\n                    print(('HTTP CONTENT: %s' % response.content))\n",
                    "rendered": {
                      "text": "            for prov in provs:\n                print(('Uploading provenance file \"%s\"' % prov))\n                with open(prov) as f:\n                    response = requests.post(url=prov_endpoint, data=f.read())\n                    print(('POST %s' % prov_endpoint))\n                    print(('HTTP STATUS: %s' % response.status_code))\n                    print(('HTTP CONTENT: %s' % response.content))\n",
                      "markdown": "`            for prov in provs:\n                print(('Uploading provenance file \"%s\"' % prov))\n                with open(prov) as f:\n                    response = requests.post(url=prov_endpoint, data=f.read())\n                    print(('POST %s' % prov_endpoint))\n                    print(('HTTP STATUS: %s' % response.status_code))\n                    print(('HTTP CONTENT: %s' % response.content))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/acceptance_tests/lib/ChartMuseum.py"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 39,
                  "endLine": 104,
                  "endColumn": 45,
                  "snippet": {
                    "text": "            for tgz in tgzs:\n                print(('Uploading bad test chart package \"%s\"' % tgz))\n                with open(tgz, 'rb') as f:\n                    response = requests.post(url=charts_endpoint, data=f.read())\n                    print(('POST %s' % charts_endpoint))\n                    print(('HTTP STATUS: %s' % response.status_code))\n                    print(('HTTP CONTENT: %s' % response.content))\n",
                    "rendered": {
                      "text": "            for tgz in tgzs:\n                print(('Uploading bad test chart package \"%s\"' % tgz))\n                with open(tgz, 'rb') as f:\n                    response = requests.post(url=charts_endpoint, data=f.read())\n                    print(('POST %s' % charts_endpoint))\n                    print(('HTTP STATUS: %s' % response.status_code))\n                    print(('HTTP CONTENT: %s' % response.content))\n",
                      "markdown": "`            for tgz in tgzs:\n                print(('Uploading bad test chart package \"%s\"' % tgz))\n                with open(tgz, 'rb') as f:\n                    response = requests.post(url=charts_endpoint, data=f.read())\n                    print(('POST %s' % charts_endpoint))\n                    print(('HTTP STATUS: %s' % response.status_code))\n                    print(('HTTP CONTENT: %s' % response.content))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/acceptance_tests/lib/ChartMuseum.py"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 39,
                  "endLine": 85,
                  "endColumn": 45,
                  "snippet": {
                    "text": "            for tgz in tgzs:\n                print(('Uploading test chart package \"%s\"' % tgz))\n                with open(tgz, 'rb') as f:\n                    response = requests.post(url=charts_endpoint, data=f.read())\n                    print(('POST %s' % charts_endpoint))\n                    print(('HTTP STATUS: %s' % response.status_code))\n                    print(('HTTP CONTENT: %s' % response.content))\n",
                    "rendered": {
                      "text": "            for tgz in tgzs:\n                print(('Uploading test chart package \"%s\"' % tgz))\n                with open(tgz, 'rb') as f:\n                    response = requests.post(url=charts_endpoint, data=f.read())\n                    print(('POST %s' % charts_endpoint))\n                    print(('HTTP STATUS: %s' % response.status_code))\n                    print(('HTTP CONTENT: %s' % response.content))\n",
                      "markdown": "`            for tgz in tgzs:\n                print(('Uploading test chart package \"%s\"' % tgz))\n                with open(tgz, 'rb') as f:\n                    response = requests.post(url=charts_endpoint, data=f.read())\n                    print(('POST %s' % charts_endpoint))\n                    print(('HTTP STATUS: %s' % response.status_code))\n                    print(('HTTP CONTENT: %s' % response.content))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/acceptance_tests/lib/ChartMuseum.py"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 11,
                  "endLine": 44,
                  "endColumn": 16,
                  "snippet": {
                    "text": "            cmd += '--storage-oracle-bucket=\"%s\" --storage-oracle-prefix=\"%s\" --storage-oracle-compartmentid=\"%s\" >> %s 2>&1' \\\n                   % (common.STORAGE_ORACLE_BUCKET, common.STORAGE_ORACLE_PREFIX, common.STORAGE_ORACLE_COMPARTMENTID, common.LOGFILE)\n        elif storage == 'baidu':\n            cmd += '--storage-baidu-bucket=\"%s\" --storage-baidu-prefix=\"%s\" --storage-baidu-endpoint=\"%s\" >> %s 2>&1' \\\n                   % (common.STORAGE_BAIDU_BUCKET, common.STORAGE_BAIDU_PREFIX, common.STORAGE_BAIDU_ENDPOINT, common.LOGFILE)\n        print(cmd)\n        self.run_command(cmd, detach=True)\n",
                    "rendered": {
                      "text": "            cmd += '--storage-oracle-bucket=\"%s\" --storage-oracle-prefix=\"%s\" --storage-oracle-compartmentid=\"%s\" >> %s 2>&1' \\\n                   % (common.STORAGE_ORACLE_BUCKET, common.STORAGE_ORACLE_PREFIX, common.STORAGE_ORACLE_COMPARTMENTID, common.LOGFILE)\n        elif storage == 'baidu':\n            cmd += '--storage-baidu-bucket=\"%s\" --storage-baidu-prefix=\"%s\" --storage-baidu-endpoint=\"%s\" >> %s 2>&1' \\\n                   % (common.STORAGE_BAIDU_BUCKET, common.STORAGE_BAIDU_PREFIX, common.STORAGE_BAIDU_ENDPOINT, common.LOGFILE)\n        print(cmd)\n        self.run_command(cmd, detach=True)\n",
                      "markdown": "`            cmd += '--storage-oracle-bucket=\"%s\" --storage-oracle-prefix=\"%s\" --storage-oracle-compartmentid=\"%s\" >> %s 2>&1' \\\n                   % (common.STORAGE_ORACLE_BUCKET, common.STORAGE_ORACLE_PREFIX, common.STORAGE_ORACLE_COMPARTMENTID, common.LOGFILE)\n        elif storage == 'baidu':\n            cmd += '--storage-baidu-bucket=\"%s\" --storage-baidu-prefix=\"%s\" --storage-baidu-endpoint=\"%s\" >> %s 2>&1' \\\n                   % (common.STORAGE_BAIDU_BUCKET, common.STORAGE_BAIDU_PREFIX, common.STORAGE_BAIDU_ENDPOINT, common.LOGFILE)\n        print(cmd)\n        self.run_command(cmd, detach=True)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/acceptance_tests/lib/ChartMuseum.py"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 11,
                  "endLine": 41,
                  "endColumn": 16,
                  "snippet": {
                    "text": "= '--storage-openstack-container=\"%s\" --storage-openstack-prefix=\"%s\" --storage-openstack-region=\"%s\" >> %s 2>&1' \\\n                  % (common.STORAGE_OPENSTACK_CONTAINER, common.STORAGE_OPENSTACK_PREFIX, common.STORAGE_OPENSTACK_REGION, common.LOGFILE)\n        elif storage == 'oracle':\n            cmd += '--storage-oracle-bucket=\"%s\" --storage-oracle-prefix=\"%s\" --storage-oracle-compartmentid=\"%s\" >> %s 2>&1' \\\n                   % (common.STORAGE_ORACLE_BUCKET, common.STORAGE_ORACLE_PREFIX, common.STORAGE_ORACLE_COMPARTMENTID, common.LOGFILE)\n        elif storage == 'baidu':\n            cmd += '",
                    "rendered": {
                      "text": "= '--storage-openstack-container=\"%s\" --storage-openstack-prefix=\"%s\" --storage-openstack-region=\"%s\" >> %s 2>&1' \\\n                  % (common.STORAGE_OPENSTACK_CONTAINER, common.STORAGE_OPENSTACK_PREFIX, common.STORAGE_OPENSTACK_REGION, common.LOGFILE)\n        elif storage == 'oracle':\n            cmd += '--storage-oracle-bucket=\"%s\" --storage-oracle-prefix=\"%s\" --storage-oracle-compartmentid=\"%s\" >> %s 2>&1' \\\n                   % (common.STORAGE_ORACLE_BUCKET, common.STORAGE_ORACLE_PREFIX, common.STORAGE_ORACLE_COMPARTMENTID, common.LOGFILE)\n        elif storage == 'baidu':\n            cmd += '",
                      "markdown": "`= '--storage-openstack-container=\"%s\" --storage-openstack-prefix=\"%s\" --storage-openstack-region=\"%s\" >> %s 2>&1' \\\n                  % (common.STORAGE_OPENSTACK_CONTAINER, common.STORAGE_OPENSTACK_PREFIX, common.STORAGE_OPENSTACK_REGION, common.LOGFILE)\n        elif storage == 'oracle':\n            cmd += '--storage-oracle-bucket=\"%s\" --storage-oracle-prefix=\"%s\" --storage-oracle-compartmentid=\"%s\" >> %s 2>&1' \\\n                   % (common.STORAGE_ORACLE_BUCKET, common.STORAGE_ORACLE_PREFIX, common.STORAGE_ORACLE_COMPARTMENTID, common.LOGFILE)\n        elif storage == 'baidu':\n            cmd += '`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/acceptance_tests/lib/ChartMuseum.py"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 11,
                  "endLine": 38,
                  "endColumn": 16,
                  "snippet": {
                    "text": "      cmd += '--storage-alibaba-bucket=\"%s\" --storage-alibaba-prefix=\"%s\" --storage-alibaba-endpoint=\"%s\" >> %s 2>&1' \\\n                  % (common.STORAGE_ALIBABA_BUCKET, common.STORAGE_ALIBABA_PREFIX, common.STORAGE_ALIBABA_ENDPOINT, common.LOGFILE)\n        elif storage == 'openstack':\n            cmd += '--storage-openstack-container=\"%s\" --storage-openstack-prefix=\"%s\" --storage-openstack-region=\"%s\" >> %s 2>&1' \\\n                  % (common.STORAGE_OPENSTACK_CONTAINER, common.STORAGE_OPENSTACK_PREFIX, common.STORAGE_OPENSTACK_REGION, common.LOGFILE)\n        elif storage == 'oracle':\n          ",
                    "rendered": {
                      "text": "      cmd += '--storage-alibaba-bucket=\"%s\" --storage-alibaba-prefix=\"%s\" --storage-alibaba-endpoint=\"%s\" >> %s 2>&1' \\\n                  % (common.STORAGE_ALIBABA_BUCKET, common.STORAGE_ALIBABA_PREFIX, common.STORAGE_ALIBABA_ENDPOINT, common.LOGFILE)\n        elif storage == 'openstack':\n            cmd += '--storage-openstack-container=\"%s\" --storage-openstack-prefix=\"%s\" --storage-openstack-region=\"%s\" >> %s 2>&1' \\\n                  % (common.STORAGE_OPENSTACK_CONTAINER, common.STORAGE_OPENSTACK_PREFIX, common.STORAGE_OPENSTACK_REGION, common.LOGFILE)\n        elif storage == 'oracle':\n          ",
                      "markdown": "`      cmd += '--storage-alibaba-bucket=\"%s\" --storage-alibaba-prefix=\"%s\" --storage-alibaba-endpoint=\"%s\" >> %s 2>&1' \\\n                  % (common.STORAGE_ALIBABA_BUCKET, common.STORAGE_ALIBABA_PREFIX, common.STORAGE_ALIBABA_ENDPOINT, common.LOGFILE)\n        elif storage == 'openstack':\n            cmd += '--storage-openstack-container=\"%s\" --storage-openstack-prefix=\"%s\" --storage-openstack-region=\"%s\" >> %s 2>&1' \\\n                  % (common.STORAGE_OPENSTACK_CONTAINER, common.STORAGE_OPENSTACK_PREFIX, common.STORAGE_OPENSTACK_REGION, common.LOGFILE)\n        elif storage == 'oracle':\n          `"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/acceptance_tests/lib/ChartMuseum.py"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 11,
                  "endLine": 35,
                  "endColumn": 16,
                  "snippet": {
                    "text": "OGFILE)\n        elif storage == 'microsoft':\n            cmd += '--storage-microsoft-container=\"%s\" --storage-microsoft-prefix=\"%s\"  >> %s 2>&1' \\\n                   % (common.STORAGE_MICROSOFT_CONTAINER, common.STORAGE_MICROSOFT_PREFIX, common.LOGFILE)\n        elif storage == 'alibaba':\n            cmd += '--storage-alibaba-bucket=\"%s\" --storage-alibaba-prefix=\"%s\" --storage-alibaba-endpoint=\"%s\" >> %s 2>&1' \\\n                  % (common.STORAGE_ALIBABA_BUCKET, common.STORAGE_ALIBABA_PREFIX, common.STORAGE_ALIBABA_ENDPOINT, common.LOGFILE)\n        elif storage == 'openstack':\n            cmd += '-",
                    "rendered": {
                      "text": "OGFILE)\n        elif storage == 'microsoft':\n            cmd += '--storage-microsoft-container=\"%s\" --storage-microsoft-prefix=\"%s\"  >> %s 2>&1' \\\n                   % (common.STORAGE_MICROSOFT_CONTAINER, common.STORAGE_MICROSOFT_PREFIX, common.LOGFILE)\n        elif storage == 'alibaba':\n            cmd += '--storage-alibaba-bucket=\"%s\" --storage-alibaba-prefix=\"%s\" --storage-alibaba-endpoint=\"%s\" >> %s 2>&1' \\\n                  % (common.STORAGE_ALIBABA_BUCKET, common.STORAGE_ALIBABA_PREFIX, common.STORAGE_ALIBABA_ENDPOINT, common.LOGFILE)\n        elif storage == 'openstack':\n            cmd += '-",
                      "markdown": "`OGFILE)\n        elif storage == 'microsoft':\n            cmd += '--storage-microsoft-container=\"%s\" --storage-microsoft-prefix=\"%s\"  >> %s 2>&1' \\\n                   % (common.STORAGE_MICROSOFT_CONTAINER, common.STORAGE_MICROSOFT_PREFIX, common.LOGFILE)\n        elif storage == 'alibaba':\n            cmd += '--storage-alibaba-bucket=\"%s\" --storage-alibaba-prefix=\"%s\" --storage-alibaba-endpoint=\"%s\" >> %s 2>&1' \\\n                  % (common.STORAGE_ALIBABA_BUCKET, common.STORAGE_ALIBABA_PREFIX, common.STORAGE_ALIBABA_ENDPOINT, common.LOGFILE)\n        elif storage == 'openstack':\n            cmd += '-`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/acceptance_tests/lib/ChartMuseum.py"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 11,
                  "endLine": 32,
                  "endColumn": 16,
                  "snippet": {
                    "text": "            cmd += '--storage-google-bucket=\"%s\" --storage-google-prefix=\"%s\" >> %s 2>&1' \\\n                   % (common.STORAGE_GOOGLE_BUCKET, common.STORAGE_GOOGLE_PREFIX, common.LOGFILE)\n        elif storage == 'microsoft':\n            cmd += '--storage-microsoft-container=\"%s\" --storage-microsoft-prefix=\"%s\"  >> %s 2>&1' \\\n                   % (common.STORAGE_MICROSOFT_CONTAINER, common.STORAGE_MICROSOFT_PREFIX, common.LOGFILE)\n        elif storage == 'alibaba':\n            cmd += '--storage-alibaba-bucket=\"%s\" --storage-alibaba-prefix=\"%s\" --storage-alibaba-endpoint=\"%s\" >> %s 2>&1' \\\n",
                    "rendered": {
                      "text": "            cmd += '--storage-google-bucket=\"%s\" --storage-google-prefix=\"%s\" >> %s 2>&1' \\\n                   % (common.STORAGE_GOOGLE_BUCKET, common.STORAGE_GOOGLE_PREFIX, common.LOGFILE)\n        elif storage == 'microsoft':\n            cmd += '--storage-microsoft-container=\"%s\" --storage-microsoft-prefix=\"%s\"  >> %s 2>&1' \\\n                   % (common.STORAGE_MICROSOFT_CONTAINER, common.STORAGE_MICROSOFT_PREFIX, common.LOGFILE)\n        elif storage == 'alibaba':\n            cmd += '--storage-alibaba-bucket=\"%s\" --storage-alibaba-prefix=\"%s\" --storage-alibaba-endpoint=\"%s\" >> %s 2>&1' \\\n",
                      "markdown": "`            cmd += '--storage-google-bucket=\"%s\" --storage-google-prefix=\"%s\" >> %s 2>&1' \\\n                   % (common.STORAGE_GOOGLE_BUCKET, common.STORAGE_GOOGLE_PREFIX, common.LOGFILE)\n        elif storage == 'microsoft':\n            cmd += '--storage-microsoft-container=\"%s\" --storage-microsoft-prefix=\"%s\"  >> %s 2>&1' \\\n                   % (common.STORAGE_MICROSOFT_CONTAINER, common.STORAGE_MICROSOFT_PREFIX, common.LOGFILE)\n        elif storage == 'alibaba':\n            cmd += '--storage-alibaba-bucket=\"%s\" --storage-alibaba-prefix=\"%s\" --storage-alibaba-endpoint=\"%s\" >> %s 2>&1' \\\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/acceptance_tests/lib/ChartMuseum.py"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 11,
                  "endLine": 29,
                  "endColumn": 16,
                  "snippet": {
                    "text": "azon':\n            cmd += '--storage-amazon-bucket=\"%s\" --storage-amazon-prefix=\"%s\" --storage-amazon-region=\"%s\" >> %s 2>&1' \\\n                  % (common.STORAGE_AMAZON_BUCKET, common.STORAGE_AMAZON_PREFIX, common.STORAGE_AMAZON_REGION, common.LOGFILE)\n        elif storage == 'google':\n            cmd += '--storage-google-bucket=\"%s\" --storage-google-prefix=\"%s\" >> %s 2>&1' \\\n                   % (common.STORAGE_GOOGLE_BUCKET, common.STORAGE_GOOGLE_PREFIX, common.LOGFILE)\n        elif storage == 'microsoft':\n            cmd += '--storage-microsoft-container=\"%s\" --storage-microsoft-prefix=\"%s\"  >",
                    "rendered": {
                      "text": "azon':\n            cmd += '--storage-amazon-bucket=\"%s\" --storage-amazon-prefix=\"%s\" --storage-amazon-region=\"%s\" >> %s 2>&1' \\\n                  % (common.STORAGE_AMAZON_BUCKET, common.STORAGE_AMAZON_PREFIX, common.STORAGE_AMAZON_REGION, common.LOGFILE)\n        elif storage == 'google':\n            cmd += '--storage-google-bucket=\"%s\" --storage-google-prefix=\"%s\" >> %s 2>&1' \\\n                   % (common.STORAGE_GOOGLE_BUCKET, common.STORAGE_GOOGLE_PREFIX, common.LOGFILE)\n        elif storage == 'microsoft':\n            cmd += '--storage-microsoft-container=\"%s\" --storage-microsoft-prefix=\"%s\"  >",
                      "markdown": "`azon':\n            cmd += '--storage-amazon-bucket=\"%s\" --storage-amazon-prefix=\"%s\" --storage-amazon-region=\"%s\" >> %s 2>&1' \\\n                  % (common.STORAGE_AMAZON_BUCKET, common.STORAGE_AMAZON_PREFIX, common.STORAGE_AMAZON_REGION, common.LOGFILE)\n        elif storage == 'google':\n            cmd += '--storage-google-bucket=\"%s\" --storage-google-prefix=\"%s\" >> %s 2>&1' \\\n                   % (common.STORAGE_GOOGLE_BUCKET, common.STORAGE_GOOGLE_PREFIX, common.LOGFILE)\n        elif storage == 'microsoft':\n            cmd += '--storage-microsoft-container=\"%s\" --storage-microsoft-prefix=\"%s\"  >`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/acceptance_tests/lib/ChartMuseum.py"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 11,
                  "endLine": 26,
                  "endColumn": 16,
                  "snippet": {
                    "text": "            shutil.rmtree(common.STORAGE_DIR, ignore_errors=True)\n            cmd += '--storage-local-rootdir=%s >> %s 2>&1' % (common.STORAGE_DIR, common.LOGFILE)\n        elif storage == 'amazon':\n            cmd += '--storage-amazon-bucket=\"%s\" --storage-amazon-prefix=\"%s\" --storage-amazon-region=\"%s\" >> %s 2>&1' \\\n                  % (common.STORAGE_AMAZON_BUCKET, common.STORAGE_AMAZON_PREFIX, common.STORAGE_AMAZON_REGION, common.LOGFILE)\n        elif storage == 'google':\n            cmd += '--storage-google-bucket=\"%s\" --storage-google-prefix=\"%s\" >> %s 2>&1' \\\n",
                    "rendered": {
                      "text": "            shutil.rmtree(common.STORAGE_DIR, ignore_errors=True)\n            cmd += '--storage-local-rootdir=%s >> %s 2>&1' % (common.STORAGE_DIR, common.LOGFILE)\n        elif storage == 'amazon':\n            cmd += '--storage-amazon-bucket=\"%s\" --storage-amazon-prefix=\"%s\" --storage-amazon-region=\"%s\" >> %s 2>&1' \\\n                  % (common.STORAGE_AMAZON_BUCKET, common.STORAGE_AMAZON_PREFIX, common.STORAGE_AMAZON_REGION, common.LOGFILE)\n        elif storage == 'google':\n            cmd += '--storage-google-bucket=\"%s\" --storage-google-prefix=\"%s\" >> %s 2>&1' \\\n",
                      "markdown": "`            shutil.rmtree(common.STORAGE_DIR, ignore_errors=True)\n            cmd += '--storage-local-rootdir=%s >> %s 2>&1' % (common.STORAGE_DIR, common.LOGFILE)\n        elif storage == 'amazon':\n            cmd += '--storage-amazon-bucket=\"%s\" --storage-amazon-prefix=\"%s\" --storage-amazon-region=\"%s\" >> %s 2>&1' \\\n                  % (common.STORAGE_AMAZON_BUCKET, common.STORAGE_AMAZON_PREFIX, common.STORAGE_AMAZON_REGION, common.LOGFILE)\n        elif storage == 'google':\n            cmd += '--storage-google-bucket=\"%s\" --storage-google-prefix=\"%s\" >> %s 2>&1' \\\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/acceptance_tests/lib/ChartMuseum.py"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 11,
                  "endLine": 24,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        cmd = 'KILLME=1 chartmuseum --debug --port=%d --storage=\"%s\" ' % (common.PORT, storage)\n        if storage == 'local':\n            shutil.rmtree(common.STORAGE_DIR, ignore_errors=True)\n            cmd += '--storage-local-rootdir=%s >> %s 2>&1' % (common.STORAGE_DIR, common.LOGFILE)\n        elif storage == 'amazon':\n            cmd += '--storage-amazon-bucket=\"%s\" --storage-amazon-prefix=\"%s\" --storage-amazon-region=\"%s\" >> %s 2>&1' \\\n                  % (common.STORAGE_AMAZON_BUCKET, common.STORAGE_AMAZON_PREFIX, common.STORAGE_AMAZON_REGION, common.LOGFILE)\n",
                    "rendered": {
                      "text": "        cmd = 'KILLME=1 chartmuseum --debug --port=%d --storage=\"%s\" ' % (common.PORT, storage)\n        if storage == 'local':\n            shutil.rmtree(common.STORAGE_DIR, ignore_errors=True)\n            cmd += '--storage-local-rootdir=%s >> %s 2>&1' % (common.STORAGE_DIR, common.LOGFILE)\n        elif storage == 'amazon':\n            cmd += '--storage-amazon-bucket=\"%s\" --storage-amazon-prefix=\"%s\" --storage-amazon-region=\"%s\" >> %s 2>&1' \\\n                  % (common.STORAGE_AMAZON_BUCKET, common.STORAGE_AMAZON_PREFIX, common.STORAGE_AMAZON_REGION, common.LOGFILE)\n",
                      "markdown": "`        cmd = 'KILLME=1 chartmuseum --debug --port=%d --storage=\"%s\" ' % (common.PORT, storage)\n        if storage == 'local':\n            shutil.rmtree(common.STORAGE_DIR, ignore_errors=True)\n            cmd += '--storage-local-rootdir=%s >> %s 2>&1' % (common.STORAGE_DIR, common.LOGFILE)\n        elif storage == 'amazon':\n            cmd += '--storage-amazon-bucket=\"%s\" --storage-amazon-prefix=\"%s\" --storage-amazon-region=\"%s\" >> %s 2>&1' \\\n                  % (common.STORAGE_AMAZON_BUCKET, common.STORAGE_AMAZON_PREFIX, common.STORAGE_AMAZON_REGION, common.LOGFILE)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/acceptance_tests/lib/ChartMuseum.py"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 7,
                  "endLine": 21,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    def start_chartmuseum(self, storage):\n        self.stop_chartmuseum()\n        os.chdir(self.rootdir)\n        cmd = 'KILLME=1 chartmuseum --debug --port=%d --storage=\"%s\" ' % (common.PORT, storage)\n        if storage == 'local':\n            shutil.rmtree(common.STORAGE_DIR, ignore_errors=True)\n            cmd += '--storage-local-rootdir=%s >> %s 2>&1' % (common.STORAGE_DIR, common.LOGFILE)\n",
                    "rendered": {
                      "text": "    def start_chartmuseum(self, storage):\n        self.stop_chartmuseum()\n        os.chdir(self.rootdir)\n        cmd = 'KILLME=1 chartmuseum --debug --port=%d --storage=\"%s\" ' % (common.PORT, storage)\n        if storage == 'local':\n            shutil.rmtree(common.STORAGE_DIR, ignore_errors=True)\n            cmd += '--storage-local-rootdir=%s >> %s 2>&1' % (common.STORAGE_DIR, common.LOGFILE)\n",
                      "markdown": "`    def start_chartmuseum(self, storage):\n        self.stop_chartmuseum()\n        os.chdir(self.rootdir)\n        cmd = 'KILLME=1 chartmuseum --debug --port=%d --storage=\"%s\" ' % (common.PORT, storage)\n        if storage == 'local':\n            shutil.rmtree(common.STORAGE_DIR, ignore_errors=True)\n            cmd += '--storage-local-rootdir=%s >> %s 2>&1' % (common.STORAGE_DIR, common.LOGFILE)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/acceptance_tests/lib/ChartMuseum.py"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 44,
                  "endLine": 57,
                  "endColumn": 50,
                  "snippet": {
                    "text": "            if result == 0:\n                break\n            if seconds_waited == common.MAX_WAIT_SECONDS:\n                raise Exception('Reached max time (%d seconds) waiting for chartmuseum to come up' % common.MAX_WAIT_SECONDS)\n            time.sleep(1)\n            seconds_waited += 1\n\n",
                    "rendered": {
                      "text": "            if result == 0:\n                break\n            if seconds_waited == common.MAX_WAIT_SECONDS:\n                raise Exception('Reached max time (%d seconds) waiting for chartmuseum to come up' % common.MAX_WAIT_SECONDS)\n            time.sleep(1)\n            seconds_waited += 1\n\n",
                      "markdown": "`            if result == 0:\n                break\n            if seconds_waited == common.MAX_WAIT_SECONDS:\n                raise Exception('Reached max time (%d seconds) waiting for chartmuseum to come up' % common.MAX_WAIT_SECONDS)\n            time.sleep(1)\n            seconds_waited += 1\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/acceptance_tests/lib/ChartMuseum.py"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 6,
                  "endLine": 8,
                  "snippet": {
                    "text": "import requests\nimport shutil\nimport socket\nimport time\n\nimport common\n\n\n",
                    "rendered": {
                      "text": "import requests\nimport shutil\nimport socket\nimport time\n\nimport common\n\n\n",
                      "markdown": "`import requests\nimport shutil\nimport socket\nimport time\n\nimport common\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/acceptance_tests/helm.robot"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 6,
                  "endLine": 47,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    Return from Keyword if  '${ENV_STORAGE_BUCKET_SET}'=='${EMPTY}' and '${storage}'!='local' and '${storage}'!='microsoft' and '${storage}'!='openstack'\n    ${ENV_STORAGE_CONTAINER_SET}=  Get Environment variable  TEST_STORAGE_${USTORAGE}_CONTAINER  ${EMPTY}\n    Return from Keyword if  '${ENV_STORAGE_CONTAINER_SET}'=='${EMPTY}' and ('${storage}'=='microsoft' or '${storage}'=='openstack')\n    ${ENV_STORAGE_CONTAINER_SET}=  Get Environment variable  TEST_STORAGE_${USTORAGE}_CONTAINER  ${EMPTY}\n\n    Start ChartMuseum server with storage backend  ${storage}\n    Able to add ChartMuseum as Helm chart repo\n",
                    "rendered": {
                      "text": "    Return from Keyword if  '${ENV_STORAGE_BUCKET_SET}'=='${EMPTY}' and '${storage}'!='local' and '${storage}'!='microsoft' and '${storage}'!='openstack'\n    ${ENV_STORAGE_CONTAINER_SET}=  Get Environment variable  TEST_STORAGE_${USTORAGE}_CONTAINER  ${EMPTY}\n    Return from Keyword if  '${ENV_STORAGE_CONTAINER_SET}'=='${EMPTY}' and ('${storage}'=='microsoft' or '${storage}'=='openstack')\n    ${ENV_STORAGE_CONTAINER_SET}=  Get Environment variable  TEST_STORAGE_${USTORAGE}_CONTAINER  ${EMPTY}\n\n    Start ChartMuseum server with storage backend  ${storage}\n    Able to add ChartMuseum as Helm chart repo\n",
                      "markdown": "`    Return from Keyword if  '${ENV_STORAGE_BUCKET_SET}'=='${EMPTY}' and '${storage}'!='local' and '${storage}'!='microsoft' and '${storage}'!='openstack'\n    ${ENV_STORAGE_CONTAINER_SET}=  Get Environment variable  TEST_STORAGE_${USTORAGE}_CONTAINER  ${EMPTY}\n    Return from Keyword if  '${ENV_STORAGE_CONTAINER_SET}'=='${EMPTY}' and ('${storage}'=='microsoft' or '${storage}'=='openstack')\n    ${ENV_STORAGE_CONTAINER_SET}=  Get Environment variable  TEST_STORAGE_${USTORAGE}_CONTAINER  ${EMPTY}\n\n    Start ChartMuseum server with storage backend  ${storage}\n    Able to add ChartMuseum as Helm chart repo\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/acceptance_tests/helm.robot"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 6,
                  "endLine": 45,
                  "endColumn": 38,
                  "snippet": {
                    "text": "AGE}=  Convert To Uppercase  ${storage}\n    ${ENV_STORAGE_BUCKET_SET}=  Get Environment variable  TEST_STORAGE_${USTORAGE}_BUCKET  ${EMPTY}\n    Return from Keyword if  '${ENV_STORAGE_BUCKET_SET}'=='${EMPTY}' and '${storage}'!='local' and '${storage}'!='microsoft' and '${storage}'!='openstack'\n    ${ENV_STORAGE_CONTAINER_SET}=  Get Environment variable  TEST_STORAGE_${USTORAGE}_CONTAINER  ${EMPTY}\n    Return from Keyword if  '${ENV_STORAGE_CONTAINER_SET}'=='${EMPTY}' and ('${storage}'=='microsoft' or '${storage}'=='openstack')\n    ${ENV_STORAGE_CONTAINER_SET}=  Get Environment variable  TEST_STORAGE_${USTORAGE}_CONTAINER  ${E",
                    "rendered": {
                      "text": "AGE}=  Convert To Uppercase  ${storage}\n    ${ENV_STORAGE_BUCKET_SET}=  Get Environment variable  TEST_STORAGE_${USTORAGE}_BUCKET  ${EMPTY}\n    Return from Keyword if  '${ENV_STORAGE_BUCKET_SET}'=='${EMPTY}' and '${storage}'!='local' and '${storage}'!='microsoft' and '${storage}'!='openstack'\n    ${ENV_STORAGE_CONTAINER_SET}=  Get Environment variable  TEST_STORAGE_${USTORAGE}_CONTAINER  ${EMPTY}\n    Return from Keyword if  '${ENV_STORAGE_CONTAINER_SET}'=='${EMPTY}' and ('${storage}'=='microsoft' or '${storage}'=='openstack')\n    ${ENV_STORAGE_CONTAINER_SET}=  Get Environment variable  TEST_STORAGE_${USTORAGE}_CONTAINER  ${E",
                      "markdown": "`AGE}=  Convert To Uppercase  ${storage}\n    ${ENV_STORAGE_BUCKET_SET}=  Get Environment variable  TEST_STORAGE_${USTORAGE}_BUCKET  ${EMPTY}\n    Return from Keyword if  '${ENV_STORAGE_BUCKET_SET}'=='${EMPTY}' and '${storage}'!='local' and '${storage}'!='microsoft' and '${storage}'!='openstack'\n    ${ENV_STORAGE_CONTAINER_SET}=  Get Environment variable  TEST_STORAGE_${USTORAGE}_CONTAINER  ${EMPTY}\n    Return from Keyword if  '${ENV_STORAGE_CONTAINER_SET}'=='${EMPTY}' and ('${storage}'=='microsoft' or '${storage}'=='openstack')\n    ${ENV_STORAGE_CONTAINER_SET}=  Get Environment variable  TEST_STORAGE_${USTORAGE}_CONTAINER  ${E`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/acceptance_tests/helm.robot"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 6,
                  "endLine": 43,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n    # return fast if we cannot find a bucket/container in an environment variable.\n    ${USTORAGE}=  Convert To Uppercase  ${storage}\n    ${ENV_STORAGE_BUCKET_SET}=  Get Environment variable  TEST_STORAGE_${USTORAGE}_BUCKET  ${EMPTY}\n    Return from Keyword if  '${ENV_STORAGE_BUCKET_SET}'=='${EMPTY}' and '${storage}'!='local' and '${storage}'!='microsoft' and '${storage}'!='openstack'\n    ${ENV_STORAGE_CONTAINER_SET}=  Get Environment variable  TEST_STORAGE_${USTORAGE}_CONTAINER  ${EMPTY}\n    Return from Keyword if  '${ENV_STORAGE_CONTAINER_SET}'=='${EMPTY}' and ('${storage}'=='microsoft' or '${storage}'=='openstack')\n",
                    "rendered": {
                      "text": "\n    # return fast if we cannot find a bucket/container in an environment variable.\n    ${USTORAGE}=  Convert To Uppercase  ${storage}\n    ${ENV_STORAGE_BUCKET_SET}=  Get Environment variable  TEST_STORAGE_${USTORAGE}_BUCKET  ${EMPTY}\n    Return from Keyword if  '${ENV_STORAGE_BUCKET_SET}'=='${EMPTY}' and '${storage}'!='local' and '${storage}'!='microsoft' and '${storage}'!='openstack'\n    ${ENV_STORAGE_CONTAINER_SET}=  Get Environment variable  TEST_STORAGE_${USTORAGE}_CONTAINER  ${EMPTY}\n    Return from Keyword if  '${ENV_STORAGE_CONTAINER_SET}'=='${EMPTY}' and ('${storage}'=='microsoft' or '${storage}'=='openstack')\n",
                      "markdown": "`\n    # return fast if we cannot find a bucket/container in an environment variable.\n    ${USTORAGE}=  Convert To Uppercase  ${storage}\n    ${ENV_STORAGE_BUCKET_SET}=  Get Environment variable  TEST_STORAGE_${USTORAGE}_BUCKET  ${EMPTY}\n    Return from Keyword if  '${ENV_STORAGE_BUCKET_SET}'=='${EMPTY}' and '${storage}'!='local' and '${storage}'!='microsoft' and '${storage}'!='openstack'\n    ${ENV_STORAGE_CONTAINER_SET}=  Get Environment variable  TEST_STORAGE_${USTORAGE}_CONTAINER  ${EMPTY}\n    Return from Keyword if  '${ENV_STORAGE_CONTAINER_SET}'=='${EMPTY}' and ('${storage}'=='microsoft' or '${storage}'=='openstack')\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/acceptance_tests/helm.robot"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 7,
                  "endLine": 94,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    Helm.return code should be  0\n    Helm.output contains  has been added\n\nAble to update ChartMuseum repo\n    Helm.update chart repos\n    Helm.return code should be  0\n\n",
                    "rendered": {
                      "text": "    Helm.return code should be  0\n    Helm.output contains  has been added\n\nAble to update ChartMuseum repo\n    Helm.update chart repos\n    Helm.return code should be  0\n\n",
                      "markdown": "`    Helm.return code should be  0\n    Helm.output contains  has been added\n\nAble to update ChartMuseum repo\n    Helm.update chart repos\n    Helm.return code should be  0\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/acceptance_tests/helm.robot"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 11,
                  "endLine": 61,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    Helm search returns test charts\n    Able to fetch and verify test charts\n    Delete test charts from ChartMuseum\n    Able to update ChartMuseum repo\n    Ensure test charts deleted\n    Helm search does not return test charts\n    Unable to fetch and verify test charts\n",
                    "rendered": {
                      "text": "    Helm search returns test charts\n    Able to fetch and verify test charts\n    Delete test charts from ChartMuseum\n    Able to update ChartMuseum repo\n    Ensure test charts deleted\n    Helm search does not return test charts\n    Unable to fetch and verify test charts\n",
                      "markdown": "`    Helm search returns test charts\n    Able to fetch and verify test charts\n    Delete test charts from ChartMuseum\n    Able to update ChartMuseum repo\n    Ensure test charts deleted\n    Helm search does not return test charts\n    Unable to fetch and verify test charts\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/acceptance_tests/helm.robot"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 11,
                  "endLine": 57,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    Upload provenance files to ChartMuseum\n    Upload bad test charts to ChartMuseum\n    Upload bad provenance files to ChartMuseum\n    Able to update ChartMuseum repo\n    Helm search returns test charts\n    Able to fetch and verify test charts\n    Delete test charts from ChartMuseum\n",
                    "rendered": {
                      "text": "    Upload provenance files to ChartMuseum\n    Upload bad test charts to ChartMuseum\n    Upload bad provenance files to ChartMuseum\n    Able to update ChartMuseum repo\n    Helm search returns test charts\n    Able to fetch and verify test charts\n    Delete test charts from ChartMuseum\n",
                      "markdown": "`    Upload provenance files to ChartMuseum\n    Upload bad test charts to ChartMuseum\n    Upload bad provenance files to ChartMuseum\n    Able to update ChartMuseum repo\n    Helm search returns test charts\n    Able to fetch and verify test charts\n    Delete test charts from ChartMuseum\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/acceptance_tests/helm.robot"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 30,
                  "endLine": 41,
                  "endColumn": 36,
                  "snippet": {
                    "text": "Test Helm integration\n    [Arguments]    ${storage}\n\n    # return fast if we cannot find a bucket/container in an environment variable.\n    ${USTORAGE}=  Convert To Uppercase  ${storage}\n    ${ENV_STORAGE_BUCKET_SET}=  Get Environment variable  TEST_STORAGE_${USTORAGE}_BUCKET  ${EMPTY}\n    Return from Keyword if  '${ENV_STORAGE_BUCKET_SET}'=='${EMPTY}' and '${storage}'!='local' and '${storage}'!='microsoft' and '${storage}'!='openstack'\n",
                    "rendered": {
                      "text": "Test Helm integration\n    [Arguments]    ${storage}\n\n    # return fast if we cannot find a bucket/container in an environment variable.\n    ${USTORAGE}=  Convert To Uppercase  ${storage}\n    ${ENV_STORAGE_BUCKET_SET}=  Get Environment variable  TEST_STORAGE_${USTORAGE}_BUCKET  ${EMPTY}\n    Return from Keyword if  '${ENV_STORAGE_BUCKET_SET}'=='${EMPTY}' and '${storage}'!='local' and '${storage}'!='microsoft' and '${storage}'!='openstack'\n",
                      "markdown": "`Test Helm integration\n    [Arguments]    ${storage}\n\n    # return fast if we cannot find a bucket/container in an environment variable.\n    ${USTORAGE}=  Convert To Uppercase  ${storage}\n    ${ENV_STORAGE_BUCKET_SET}=  Get Environment variable  TEST_STORAGE_${USTORAGE}_BUCKET  ${EMPTY}\n    Return from Keyword if  '${ENV_STORAGE_BUCKET_SET}'=='${EMPTY}' and '${storage}'!='local' and '${storage}'!='microsoft' and '${storage}'!='openstack'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.github/workflows/build-pr.yml"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 37,
                  "endLine": 25,
                  "endColumn": 58,
                  "snippet": {
                    "text": "      - name: build binary\n        run: make build-linux\n      - name: run acceptance tests\n        run: sudo pip install virtualenv && make acceptance\n      - name: upload coverage report\n        uses: actions/upload-artifact@main\n        with:\n",
                    "rendered": {
                      "text": "      - name: build binary\n        run: make build-linux\n      - name: run acceptance tests\n        run: sudo pip install virtualenv && make acceptance\n      - name: upload coverage report\n        uses: actions/upload-artifact@main\n        with:\n",
                      "markdown": "`      - name: build binary\n        run: make build-linux\n      - name: run acceptance tests\n        run: sudo pip install virtualenv && make acceptance\n      - name: upload coverage report\n        uses: actions/upload-artifact@main\n        with:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.github/workflows/build-pr.yml"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 17,
                  "endLine": 25,
                  "endColumn": 22,
                  "snippet": {
                    "text": "      - name: build binary\n        run: make build-linux\n      - name: run acceptance tests\n        run: sudo pip install virtualenv && make acceptance\n      - name: upload coverage report\n        uses: actions/upload-artifact@main\n        with:\n",
                    "rendered": {
                      "text": "      - name: build binary\n        run: make build-linux\n      - name: run acceptance tests\n        run: sudo pip install virtualenv && make acceptance\n      - name: upload coverage report\n        uses: actions/upload-artifact@main\n        with:\n",
                      "markdown": "`      - name: build binary\n        run: make build-linux\n      - name: run acceptance tests\n        run: sudo pip install virtualenv && make acceptance\n      - name: upload coverage report\n        uses: actions/upload-artifact@main\n        with:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/get-chartmuseum"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 38,
                  "endLine": 8,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/get-chartmuseum"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# Copyright The Helm Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# Copyright The Helm Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# Copyright The Helm Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/get-chartmuseum"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 179,
                  "endLine": 229,
                  "endColumn": 185,
                  "snippet": {
                    "text": "    echo -e \"${error_text}\"\n    exit 1\n  fi\n  local num_goodlines_tar=$(gpg --verify --keyring=\"${gpg_keyring}\" --status-fd=1 \"${CHARTMUSEUM_TMP_ROOT}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.asc\" 2> \"${gpg_stderr_device}\" | grep -c -E '^\\[GNUPG:\\] (GOODSIG|VALIDSIG)')\n  if [[ ${num_goodlines_tar} -lt 2 ]]; then\n    echo \"Unable to verify the signature of chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz!\"\n    echo -e \"${error_text}\"\n",
                    "rendered": {
                      "text": "    echo -e \"${error_text}\"\n    exit 1\n  fi\n  local num_goodlines_tar=$(gpg --verify --keyring=\"${gpg_keyring}\" --status-fd=1 \"${CHARTMUSEUM_TMP_ROOT}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.asc\" 2> \"${gpg_stderr_device}\" | grep -c -E '^\\[GNUPG:\\] (GOODSIG|VALIDSIG)')\n  if [[ ${num_goodlines_tar} -lt 2 ]]; then\n    echo \"Unable to verify the signature of chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz!\"\n    echo -e \"${error_text}\"\n",
                      "markdown": "`    echo -e \"${error_text}\"\n    exit 1\n  fi\n  local num_goodlines_tar=$(gpg --verify --keyring=\"${gpg_keyring}\" --status-fd=1 \"${CHARTMUSEUM_TMP_ROOT}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.asc\" 2> \"${gpg_stderr_device}\" | grep -c -E '^\\[GNUPG:\\] (GOODSIG|VALIDSIG)')\n  if [[ ${num_goodlines_tar} -lt 2 ]]; then\n    echo \"Unable to verify the signature of chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz!\"\n    echo -e \"${error_text}\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/get-chartmuseum"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 189,
                  "endLine": 223,
                  "endColumn": 195,
                  "snippet": {
                    "text": "  fi\n  local error_text=\"If you think this might be a potential security issue,\"\n  error_text=\"${error_text}\\nplease see here: https://github.com/helm/community/blob/master/SECURITY.md\"\n  local num_goodlines_sha=$(gpg --verify --keyring=\"${gpg_keyring}\" --status-fd=1 \"${CHARTMUSEUM_TMP_ROOT}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.sha256sum.asc\" 2> \"${gpg_stderr_device}\" | grep -c -E '^\\[GNUPG:\\] (GOODSIG|VALIDSIG)')\n  if [[ ${num_goodlines_sha} -lt 2 ]]; then\n    echo \"Unable to verify the signature of chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.sha256sum!\"\n    echo -e \"${error_text}\"\n",
                    "rendered": {
                      "text": "  fi\n  local error_text=\"If you think this might be a potential security issue,\"\n  error_text=\"${error_text}\\nplease see here: https://github.com/helm/community/blob/master/SECURITY.md\"\n  local num_goodlines_sha=$(gpg --verify --keyring=\"${gpg_keyring}\" --status-fd=1 \"${CHARTMUSEUM_TMP_ROOT}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.sha256sum.asc\" 2> \"${gpg_stderr_device}\" | grep -c -E '^\\[GNUPG:\\] (GOODSIG|VALIDSIG)')\n  if [[ ${num_goodlines_sha} -lt 2 ]]; then\n    echo \"Unable to verify the signature of chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.sha256sum!\"\n    echo -e \"${error_text}\"\n",
                      "markdown": "`  fi\n  local error_text=\"If you think this might be a potential security issue,\"\n  error_text=\"${error_text}\\nplease see here: https://github.com/helm/community/blob/master/SECURITY.md\"\n  local num_goodlines_sha=$(gpg --verify --keyring=\"${gpg_keyring}\" --status-fd=1 \"${CHARTMUSEUM_TMP_ROOT}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.sha256sum.asc\" 2> \"${gpg_stderr_device}\" | grep -c -E '^\\[GNUPG:\\] (GOODSIG|VALIDSIG)')\n  if [[ ${num_goodlines_sha} -lt 2 ]]; then\n    echo \"Unable to verify the signature of chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.sha256sum!\"\n    echo -e \"${error_text}\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/get-chartmuseum"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 3,
                  "endLine": 219,
                  "endColumn": 9,
                  "snippet": {
                    "text": "r.gz.asc\" -o \"${CHARTMUSEUM_TMP_ROOT}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.asc\"\n  elif [ \"${HAS_WGET}\" == \"true\" ]; then\n    wget -q -O \"${CHARTMUSEUM_TMP_ROOT}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.sha256sum.asc\" \"${github_release_url}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.sha256sum.asc\"\n    wget -q -O \"${CHARTMUSEUM_TMP_ROOT}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.asc\" \"${github_release_url}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.asc\"\n  fi\n  local error_text=\"If you think this might be a potential security issue,\"\n  error_text=\"${error_text}\\nplease see here: https://github.com/helm/commu",
                    "rendered": {
                      "text": "r.gz.asc\" -o \"${CHARTMUSEUM_TMP_ROOT}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.asc\"\n  elif [ \"${HAS_WGET}\" == \"true\" ]; then\n    wget -q -O \"${CHARTMUSEUM_TMP_ROOT}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.sha256sum.asc\" \"${github_release_url}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.sha256sum.asc\"\n    wget -q -O \"${CHARTMUSEUM_TMP_ROOT}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.asc\" \"${github_release_url}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.asc\"\n  fi\n  local error_text=\"If you think this might be a potential security issue,\"\n  error_text=\"${error_text}\\nplease see here: https://github.com/helm/commu",
                      "markdown": "`r.gz.asc\" -o \"${CHARTMUSEUM_TMP_ROOT}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.asc\"\n  elif [ \"${HAS_WGET}\" == \"true\" ]; then\n    wget -q -O \"${CHARTMUSEUM_TMP_ROOT}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.sha256sum.asc\" \"${github_release_url}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.sha256sum.asc\"\n    wget -q -O \"${CHARTMUSEUM_TMP_ROOT}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.asc\" \"${github_release_url}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.asc\"\n  fi\n  local error_text=\"If you think this might be a potential security issue,\"\n  error_text=\"${error_text}\\nplease see here: https://github.com/helm/commu`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/get-chartmuseum"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 3,
                  "endLine": 218,
                  "endColumn": 9,
                  "snippet": {
                    "text": "gz.sha256sum.asc\" -o \"${CHARTMUSEUM_TMP_ROOT}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.sha256sum.asc\"\n    curl -SsL \"${github_release_url}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.asc\" -o \"${CHARTMUSEUM_TMP_ROOT}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.asc\"\n  elif [ \"${HAS_WGET}\" == \"true\" ]; then\n    wget -q -O \"${CHARTMUSEUM_TMP_ROOT}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.sha256sum.asc\" \"${github_release_url}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.sha256sum.asc\"\n    wget -q -O \"${CHARTMUSEUM_TMP_ROOT}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.asc\" \"${github_release_url}/chartmuseum-${TAG}-${OS}-${A",
                    "rendered": {
                      "text": "gz.sha256sum.asc\" -o \"${CHARTMUSEUM_TMP_ROOT}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.sha256sum.asc\"\n    curl -SsL \"${github_release_url}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.asc\" -o \"${CHARTMUSEUM_TMP_ROOT}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.asc\"\n  elif [ \"${HAS_WGET}\" == \"true\" ]; then\n    wget -q -O \"${CHARTMUSEUM_TMP_ROOT}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.sha256sum.asc\" \"${github_release_url}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.sha256sum.asc\"\n    wget -q -O \"${CHARTMUSEUM_TMP_ROOT}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.asc\" \"${github_release_url}/chartmuseum-${TAG}-${OS}-${A",
                      "markdown": "`gz.sha256sum.asc\" -o \"${CHARTMUSEUM_TMP_ROOT}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.sha256sum.asc\"\n    curl -SsL \"${github_release_url}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.asc\" -o \"${CHARTMUSEUM_TMP_ROOT}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.asc\"\n  elif [ \"${HAS_WGET}\" == \"true\" ]; then\n    wget -q -O \"${CHARTMUSEUM_TMP_ROOT}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.sha256sum.asc\" \"${github_release_url}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.sha256sum.asc\"\n    wget -q -O \"${CHARTMUSEUM_TMP_ROOT}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.asc\" \"${github_release_url}/chartmuseum-${TAG}-${OS}-${A`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/get-chartmuseum"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 3,
                  "endLine": 216,
                  "endColumn": 9,
                  "snippet": {
                    "text": " github_release_url=\"https://github.com/helm/chartmuseum/releases/download/${TAG}\"\n  if [ \"${HAS_CURL}\" == \"true\" ]; then\n    curl -SsL \"${github_release_url}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.sha256sum.asc\" -o \"${CHARTMUSEUM_TMP_ROOT}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.sha256sum.asc\"\n    curl -SsL \"${github_release_url}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.asc\" -o \"${CHARTMUSEUM_TMP_ROOT}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.asc\"\n  elif [ \"${HAS_WGET}\" == \"true\" ]; then\n    wget -q -O \"${CHARTMUSEUM_TMP_ROOT}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.sha256sum.asc\" \"${github_release_",
                    "rendered": {
                      "text": " github_release_url=\"https://github.com/helm/chartmuseum/releases/download/${TAG}\"\n  if [ \"${HAS_CURL}\" == \"true\" ]; then\n    curl -SsL \"${github_release_url}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.sha256sum.asc\" -o \"${CHARTMUSEUM_TMP_ROOT}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.sha256sum.asc\"\n    curl -SsL \"${github_release_url}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.asc\" -o \"${CHARTMUSEUM_TMP_ROOT}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.asc\"\n  elif [ \"${HAS_WGET}\" == \"true\" ]; then\n    wget -q -O \"${CHARTMUSEUM_TMP_ROOT}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.sha256sum.asc\" \"${github_release_",
                      "markdown": "` github_release_url=\"https://github.com/helm/chartmuseum/releases/download/${TAG}\"\n  if [ \"${HAS_CURL}\" == \"true\" ]; then\n    curl -SsL \"${github_release_url}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.sha256sum.asc\" -o \"${CHARTMUSEUM_TMP_ROOT}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.sha256sum.asc\"\n    curl -SsL \"${github_release_url}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.asc\" -o \"${CHARTMUSEUM_TMP_ROOT}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.asc\"\n  elif [ \"${HAS_WGET}\" == \"true\" ]; then\n    wget -q -O \"${CHARTMUSEUM_TMP_ROOT}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.sha256sum.asc\" \"${github_release_`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/get-chartmuseum"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 3,
                  "endLine": 215,
                  "endColumn": 9,
                  "snippet": {
                    "text": "CHARTMUSEUM_TMP_ROOT}/${keys_filename}\" 2> \"${gpg_stderr_device}\"\n  gpg --batch --no-default-keyring --keyring \"${gpg_homedir}/pubring.kbx\" --export > \"${gpg_keyring}\"\n  local github_release_url=\"https://github.com/helm/chartmuseum/releases/download/${TAG}\"\n  if [ \"${HAS_CURL}\" == \"true\" ]; then\n    curl -SsL \"${github_release_url}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.sha256sum.asc\" -o \"${CHARTMUSEUM_TMP_ROOT}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.sha256sum.asc\"\n    curl -SsL \"${github_release_url}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.asc\" -o \"${CHARTMUSEUM_TMP_ROOT}/chartmuseum-${TAG}-${OS}",
                    "rendered": {
                      "text": "CHARTMUSEUM_TMP_ROOT}/${keys_filename}\" 2> \"${gpg_stderr_device}\"\n  gpg --batch --no-default-keyring --keyring \"${gpg_homedir}/pubring.kbx\" --export > \"${gpg_keyring}\"\n  local github_release_url=\"https://github.com/helm/chartmuseum/releases/download/${TAG}\"\n  if [ \"${HAS_CURL}\" == \"true\" ]; then\n    curl -SsL \"${github_release_url}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.sha256sum.asc\" -o \"${CHARTMUSEUM_TMP_ROOT}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.sha256sum.asc\"\n    curl -SsL \"${github_release_url}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.asc\" -o \"${CHARTMUSEUM_TMP_ROOT}/chartmuseum-${TAG}-${OS}",
                      "markdown": "`CHARTMUSEUM_TMP_ROOT}/${keys_filename}\" 2> \"${gpg_stderr_device}\"\n  gpg --batch --no-default-keyring --keyring \"${gpg_homedir}/pubring.kbx\" --export > \"${gpg_keyring}\"\n  local github_release_url=\"https://github.com/helm/chartmuseum/releases/download/${TAG}\"\n  if [ \"${HAS_CURL}\" == \"true\" ]; then\n    curl -SsL \"${github_release_url}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.sha256sum.asc\" -o \"${CHARTMUSEUM_TMP_ROOT}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.sha256sum.asc\"\n    curl -SsL \"${github_release_url}/chartmuseum-${TAG}-${OS}-${ARCH}.tar.gz.asc\" -o \"${CHARTMUSEUM_TMP_ROOT}/chartmuseum-${TAG}-${OS}`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/get-chartmuseum"
                },
                "region": {
                  "startLine": 202,
                  "startColumn": 3,
                  "endLine": 202,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  if [ \"${HAS_CURL}\" == \"true\" ]; then\n    curl -SsL \"${github_keys_url}\" -o \"${CHARTMUSEUM_TMP_ROOT}/${keys_filename}\"\n  elif [ \"${HAS_WGET}\" == \"true\" ]; then\n    wget -q -O \"${CHARTMUSEUM_TMP_ROOT}/${keys_filename}\" \"${github_keys_url}\"\n  fi\n  local gpg_keyring=\"${CHARTMUSEUM_TMP_ROOT}/keyring.gpg\"\n  local gpg_homedir=\"${CHARTMUSEUM_TMP_ROOT}/gnupg\"\n",
                    "rendered": {
                      "text": "  if [ \"${HAS_CURL}\" == \"true\" ]; then\n    curl -SsL \"${github_keys_url}\" -o \"${CHARTMUSEUM_TMP_ROOT}/${keys_filename}\"\n  elif [ \"${HAS_WGET}\" == \"true\" ]; then\n    wget -q -O \"${CHARTMUSEUM_TMP_ROOT}/${keys_filename}\" \"${github_keys_url}\"\n  fi\n  local gpg_keyring=\"${CHARTMUSEUM_TMP_ROOT}/keyring.gpg\"\n  local gpg_homedir=\"${CHARTMUSEUM_TMP_ROOT}/gnupg\"\n",
                      "markdown": "`  if [ \"${HAS_CURL}\" == \"true\" ]; then\n    curl -SsL \"${github_keys_url}\" -o \"${CHARTMUSEUM_TMP_ROOT}/${keys_filename}\"\n  elif [ \"${HAS_WGET}\" == \"true\" ]; then\n    wget -q -O \"${CHARTMUSEUM_TMP_ROOT}/${keys_filename}\" \"${github_keys_url}\"\n  fi\n  local gpg_keyring=\"${CHARTMUSEUM_TMP_ROOT}/keyring.gpg\"\n  local gpg_homedir=\"${CHARTMUSEUM_TMP_ROOT}/gnupg\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/get-chartmuseum"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 3,
                  "endLine": 200,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  local keys_filename=\"KEYS\"\n  local github_keys_url=\"https://raw.githubusercontent.com/helm/chartmuseum/main/${keys_filename}\"\n  if [ \"${HAS_CURL}\" == \"true\" ]; then\n    curl -SsL \"${github_keys_url}\" -o \"${CHARTMUSEUM_TMP_ROOT}/${keys_filename}\"\n  elif [ \"${HAS_WGET}\" == \"true\" ]; then\n    wget -q -O \"${CHARTMUSEUM_TMP_ROOT}/${keys_filename}\" \"${github_keys_url}\"\n  fi\n",
                    "rendered": {
                      "text": "  local keys_filename=\"KEYS\"\n  local github_keys_url=\"https://raw.githubusercontent.com/helm/chartmuseum/main/${keys_filename}\"\n  if [ \"${HAS_CURL}\" == \"true\" ]; then\n    curl -SsL \"${github_keys_url}\" -o \"${CHARTMUSEUM_TMP_ROOT}/${keys_filename}\"\n  elif [ \"${HAS_WGET}\" == \"true\" ]; then\n    wget -q -O \"${CHARTMUSEUM_TMP_ROOT}/${keys_filename}\" \"${github_keys_url}\"\n  fi\n",
                      "markdown": "`  local keys_filename=\"KEYS\"\n  local github_keys_url=\"https://raw.githubusercontent.com/helm/chartmuseum/main/${keys_filename}\"\n  if [ \"${HAS_CURL}\" == \"true\" ]; then\n    curl -SsL \"${github_keys_url}\" -o \"${CHARTMUSEUM_TMP_ROOT}/${keys_filename}\"\n  elif [ \"${HAS_WGET}\" == \"true\" ]; then\n    wget -q -O \"${CHARTMUSEUM_TMP_ROOT}/${keys_filename}\" \"${github_keys_url}\"\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/get-chartmuseum"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 52,
                  "endLine": 184,
                  "endColumn": 57,
                  "snippet": {
                    "text": "verifyChecksum() {\n  printf \"Verifying checksum... \"\n  local sum=$(openssl sha1 -sha256 ${CHARTMUSEUM_TMP_FILE} | awk '{print $2}')\n  local expected_sum=$(cat ${CHARTMUSEUM_SUM_FILE} | awk '{print $1}')\n  if [ \"$sum\" != \"$expected_sum\" ]; then\n    echo \"SHA sum of ${CHARTMUSEUM_TMP_FILE} does not match. Aborting.\"\n    exit 1\n",
                    "rendered": {
                      "text": "verifyChecksum() {\n  printf \"Verifying checksum... \"\n  local sum=$(openssl sha1 -sha256 ${CHARTMUSEUM_TMP_FILE} | awk '{print $2}')\n  local expected_sum=$(cat ${CHARTMUSEUM_SUM_FILE} | awk '{print $1}')\n  if [ \"$sum\" != \"$expected_sum\" ]; then\n    echo \"SHA sum of ${CHARTMUSEUM_TMP_FILE} does not match. Aborting.\"\n    exit 1\n",
                      "markdown": "`verifyChecksum() {\n  printf \"Verifying checksum... \"\n  local sum=$(openssl sha1 -sha256 ${CHARTMUSEUM_TMP_FILE} | awk '{print $2}')\n  local expected_sum=$(cat ${CHARTMUSEUM_SUM_FILE} | awk '{print $1}')\n  if [ \"$sum\" != \"$expected_sum\" ]; then\n    echo \"SHA sum of ${CHARTMUSEUM_TMP_FILE} does not match. Aborting.\"\n    exit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/get-chartmuseum"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 60,
                  "endLine": 183,
                  "endColumn": 65,
                  "snippet": {
                    "text": "# verifyChecksum verifies the SHA256 checksum of the binary package.\nverifyChecksum() {\n  printf \"Verifying checksum... \"\n  local sum=$(openssl sha1 -sha256 ${CHARTMUSEUM_TMP_FILE} | awk '{print $2}')\n  local expected_sum=$(cat ${CHARTMUSEUM_SUM_FILE} | awk '{print $1}')\n  if [ \"$sum\" != \"$expected_sum\" ]; then\n    echo \"SHA sum of ${CHARTMUSEUM_TMP_FILE} does not match. Aborting.\"\n",
                    "rendered": {
                      "text": "# verifyChecksum verifies the SHA256 checksum of the binary package.\nverifyChecksum() {\n  printf \"Verifying checksum... \"\n  local sum=$(openssl sha1 -sha256 ${CHARTMUSEUM_TMP_FILE} | awk '{print $2}')\n  local expected_sum=$(cat ${CHARTMUSEUM_SUM_FILE} | awk '{print $1}')\n  if [ \"$sum\" != \"$expected_sum\" ]; then\n    echo \"SHA sum of ${CHARTMUSEUM_TMP_FILE} does not match. Aborting.\"\n",
                      "markdown": "`# verifyChecksum verifies the SHA256 checksum of the binary package.\nverifyChecksum() {\n  printf \"Verifying checksum... \"\n  local sum=$(openssl sha1 -sha256 ${CHARTMUSEUM_TMP_FILE} | awk '{print $2}')\n  local expected_sum=$(cat ${CHARTMUSEUM_SUM_FILE} | awk '{print $1}')\n  if [ \"$sum\" != \"$expected_sum\" ]; then\n    echo \"SHA sum of ${CHARTMUSEUM_TMP_FILE} does not match. Aborting.\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/get-chartmuseum"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 11,
                  "endLine": 176,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  tar xf \"$CHARTMUSEUM_TMP_FILE\" -C \"$CHARTMUSEUM_TMP\"\n  CHARTMUSEUM_TMP_BIN=\"$CHARTMUSEUM_TMP/$OS-$ARCH/chartmuseum\"\n  echo \"Preparing to install $BINARY_NAME into ${CHARTMUSEUM_INSTALL_DIR}\"\n  runAsRoot cp \"$CHARTMUSEUM_TMP_BIN\" \"$CHARTMUSEUM_INSTALL_DIR/$BINARY_NAME\"\n  echo \"$BINARY_NAME installed into $CHARTMUSEUM_INSTALL_DIR/$BINARY_NAME\"\n}\n\n",
                    "rendered": {
                      "text": "  tar xf \"$CHARTMUSEUM_TMP_FILE\" -C \"$CHARTMUSEUM_TMP\"\n  CHARTMUSEUM_TMP_BIN=\"$CHARTMUSEUM_TMP/$OS-$ARCH/chartmuseum\"\n  echo \"Preparing to install $BINARY_NAME into ${CHARTMUSEUM_INSTALL_DIR}\"\n  runAsRoot cp \"$CHARTMUSEUM_TMP_BIN\" \"$CHARTMUSEUM_INSTALL_DIR/$BINARY_NAME\"\n  echo \"$BINARY_NAME installed into $CHARTMUSEUM_INSTALL_DIR/$BINARY_NAME\"\n}\n\n",
                      "markdown": "`  tar xf \"$CHARTMUSEUM_TMP_FILE\" -C \"$CHARTMUSEUM_TMP\"\n  CHARTMUSEUM_TMP_BIN=\"$CHARTMUSEUM_TMP/$OS-$ARCH/chartmuseum\"\n  echo \"Preparing to install $BINARY_NAME into ${CHARTMUSEUM_INSTALL_DIR}\"\n  runAsRoot cp \"$CHARTMUSEUM_TMP_BIN\" \"$CHARTMUSEUM_INSTALL_DIR/$BINARY_NAME\"\n  echo \"$BINARY_NAME installed into $CHARTMUSEUM_INSTALL_DIR/$BINARY_NAME\"\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/get-chartmuseum"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 1,
                  "endLine": 173,
                  "endColumn": 6,
                  "snippet": {
                    "text": "installFile() {\n  CHARTMUSEUM_TMP=\"$CHARTMUSEUM_TMP_ROOT/$BINARY_NAME\"\n  mkdir -p \"$CHARTMUSEUM_TMP\"\n  tar xf \"$CHARTMUSEUM_TMP_FILE\" -C \"$CHARTMUSEUM_TMP\"\n  CHARTMUSEUM_TMP_BIN=\"$CHARTMUSEUM_TMP/$OS-$ARCH/chartmuseum\"\n  echo \"Preparing to install $BINARY_NAME into ${CHARTMUSEUM_INSTALL_DIR}\"\n  runAsRoot cp \"$CHARTMUSEUM_TMP_BIN\" \"$CHARTMUSEUM_INSTALL_DIR/$BINARY_NAME\"\n",
                    "rendered": {
                      "text": "installFile() {\n  CHARTMUSEUM_TMP=\"$CHARTMUSEUM_TMP_ROOT/$BINARY_NAME\"\n  mkdir -p \"$CHARTMUSEUM_TMP\"\n  tar xf \"$CHARTMUSEUM_TMP_FILE\" -C \"$CHARTMUSEUM_TMP\"\n  CHARTMUSEUM_TMP_BIN=\"$CHARTMUSEUM_TMP/$OS-$ARCH/chartmuseum\"\n  echo \"Preparing to install $BINARY_NAME into ${CHARTMUSEUM_INSTALL_DIR}\"\n  runAsRoot cp \"$CHARTMUSEUM_TMP_BIN\" \"$CHARTMUSEUM_INSTALL_DIR/$BINARY_NAME\"\n",
                      "markdown": "`installFile() {\n  CHARTMUSEUM_TMP=\"$CHARTMUSEUM_TMP_ROOT/$BINARY_NAME\"\n  mkdir -p \"$CHARTMUSEUM_TMP\"\n  tar xf \"$CHARTMUSEUM_TMP_FILE\" -C \"$CHARTMUSEUM_TMP\"\n  CHARTMUSEUM_TMP_BIN=\"$CHARTMUSEUM_TMP/$OS-$ARCH/chartmuseum\"\n  echo \"Preparing to install $BINARY_NAME into ${CHARTMUSEUM_INSTALL_DIR}\"\n  runAsRoot cp \"$CHARTMUSEUM_TMP_BIN\" \"$CHARTMUSEUM_INSTALL_DIR/$BINARY_NAME\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/get-chartmuseum"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 3,
                  "endLine": 153,
                  "endColumn": 9,
                  "snippet": {
                    "text": "    curl -SsL \"$DOWNLOAD_URL\" -o \"$CHARTMUSEUM_TMP_FILE\"\n  elif [ \"${HAS_WGET}\" == \"true\" ]; then\n    wget -q -O \"$CHARTMUSEUM_SUM_FILE\" \"$CHECKSUM_URL\"\n    wget -q -O \"$CHARTMUSEUM_TMP_FILE\" \"$DOWNLOAD_URL\"\n  fi\n}\n\n",
                    "rendered": {
                      "text": "    curl -SsL \"$DOWNLOAD_URL\" -o \"$CHARTMUSEUM_TMP_FILE\"\n  elif [ \"${HAS_WGET}\" == \"true\" ]; then\n    wget -q -O \"$CHARTMUSEUM_SUM_FILE\" \"$CHECKSUM_URL\"\n    wget -q -O \"$CHARTMUSEUM_TMP_FILE\" \"$DOWNLOAD_URL\"\n  fi\n}\n\n",
                      "markdown": "`    curl -SsL \"$DOWNLOAD_URL\" -o \"$CHARTMUSEUM_TMP_FILE\"\n  elif [ \"${HAS_WGET}\" == \"true\" ]; then\n    wget -q -O \"$CHARTMUSEUM_SUM_FILE\" \"$CHECKSUM_URL\"\n    wget -q -O \"$CHARTMUSEUM_TMP_FILE\" \"$DOWNLOAD_URL\"\n  fi\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/get-chartmuseum"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 3,
                  "endLine": 152,
                  "endColumn": 9,
                  "snippet": {
                    "text": "    curl -SsL \"$CHECKSUM_URL\" -o \"$CHARTMUSEUM_SUM_FILE\"\n    curl -SsL \"$DOWNLOAD_URL\" -o \"$CHARTMUSEUM_TMP_FILE\"\n  elif [ \"${HAS_WGET}\" == \"true\" ]; then\n    wget -q -O \"$CHARTMUSEUM_SUM_FILE\" \"$CHECKSUM_URL\"\n    wget -q -O \"$CHARTMUSEUM_TMP_FILE\" \"$DOWNLOAD_URL\"\n  fi\n}\n",
                    "rendered": {
                      "text": "    curl -SsL \"$CHECKSUM_URL\" -o \"$CHARTMUSEUM_SUM_FILE\"\n    curl -SsL \"$DOWNLOAD_URL\" -o \"$CHARTMUSEUM_TMP_FILE\"\n  elif [ \"${HAS_WGET}\" == \"true\" ]; then\n    wget -q -O \"$CHARTMUSEUM_SUM_FILE\" \"$CHECKSUM_URL\"\n    wget -q -O \"$CHARTMUSEUM_TMP_FILE\" \"$DOWNLOAD_URL\"\n  fi\n}\n",
                      "markdown": "`    curl -SsL \"$CHECKSUM_URL\" -o \"$CHARTMUSEUM_SUM_FILE\"\n    curl -SsL \"$DOWNLOAD_URL\" -o \"$CHARTMUSEUM_TMP_FILE\"\n  elif [ \"${HAS_WGET}\" == \"true\" ]; then\n    wget -q -O \"$CHARTMUSEUM_SUM_FILE\" \"$CHECKSUM_URL\"\n    wget -q -O \"$CHARTMUSEUM_TMP_FILE\" \"$DOWNLOAD_URL\"\n  fi\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/get-chartmuseum"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 3,
                  "endLine": 150,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  echo \"Downloading $DOWNLOAD_URL\"\n  if [ \"${HAS_CURL}\" == \"true\" ]; then\n    curl -SsL \"$CHECKSUM_URL\" -o \"$CHARTMUSEUM_SUM_FILE\"\n    curl -SsL \"$DOWNLOAD_URL\" -o \"$CHARTMUSEUM_TMP_FILE\"\n  elif [ \"${HAS_WGET}\" == \"true\" ]; then\n    wget -q -O \"$CHARTMUSEUM_SUM_FILE\" \"$CHECKSUM_URL\"\n    wget -q -O \"$CHARTMUSEUM_TMP_FILE\" \"$DOWNLOAD_URL\"\n",
                    "rendered": {
                      "text": "  echo \"Downloading $DOWNLOAD_URL\"\n  if [ \"${HAS_CURL}\" == \"true\" ]; then\n    curl -SsL \"$CHECKSUM_URL\" -o \"$CHARTMUSEUM_SUM_FILE\"\n    curl -SsL \"$DOWNLOAD_URL\" -o \"$CHARTMUSEUM_TMP_FILE\"\n  elif [ \"${HAS_WGET}\" == \"true\" ]; then\n    wget -q -O \"$CHARTMUSEUM_SUM_FILE\" \"$CHECKSUM_URL\"\n    wget -q -O \"$CHARTMUSEUM_TMP_FILE\" \"$DOWNLOAD_URL\"\n",
                      "markdown": "`  echo \"Downloading $DOWNLOAD_URL\"\n  if [ \"${HAS_CURL}\" == \"true\" ]; then\n    curl -SsL \"$CHECKSUM_URL\" -o \"$CHARTMUSEUM_SUM_FILE\"\n    curl -SsL \"$DOWNLOAD_URL\" -o \"$CHARTMUSEUM_TMP_FILE\"\n  elif [ \"${HAS_WGET}\" == \"true\" ]; then\n    wget -q -O \"$CHARTMUSEUM_SUM_FILE\" \"$CHECKSUM_URL\"\n    wget -q -O \"$CHARTMUSEUM_TMP_FILE\" \"$DOWNLOAD_URL\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/get-chartmuseum"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 3,
                  "endLine": 149,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  CHARTMUSEUM_SUM_FILE=\"$CHARTMUSEUM_TMP_ROOT/$CHARTMUSEUM_DIST.sha256sum\"\n  echo \"Downloading $DOWNLOAD_URL\"\n  if [ \"${HAS_CURL}\" == \"true\" ]; then\n    curl -SsL \"$CHECKSUM_URL\" -o \"$CHARTMUSEUM_SUM_FILE\"\n    curl -SsL \"$DOWNLOAD_URL\" -o \"$CHARTMUSEUM_TMP_FILE\"\n  elif [ \"${HAS_WGET}\" == \"true\" ]; then\n    wget -q -O \"$CHARTMUSEUM_SUM_FILE\" \"$CHECKSUM_URL\"\n",
                    "rendered": {
                      "text": "  CHARTMUSEUM_SUM_FILE=\"$CHARTMUSEUM_TMP_ROOT/$CHARTMUSEUM_DIST.sha256sum\"\n  echo \"Downloading $DOWNLOAD_URL\"\n  if [ \"${HAS_CURL}\" == \"true\" ]; then\n    curl -SsL \"$CHECKSUM_URL\" -o \"$CHARTMUSEUM_SUM_FILE\"\n    curl -SsL \"$DOWNLOAD_URL\" -o \"$CHARTMUSEUM_TMP_FILE\"\n  elif [ \"${HAS_WGET}\" == \"true\" ]; then\n    wget -q -O \"$CHARTMUSEUM_SUM_FILE\" \"$CHECKSUM_URL\"\n",
                      "markdown": "`  CHARTMUSEUM_SUM_FILE=\"$CHARTMUSEUM_TMP_ROOT/$CHARTMUSEUM_DIST.sha256sum\"\n  echo \"Downloading $DOWNLOAD_URL\"\n  if [ \"${HAS_CURL}\" == \"true\" ]; then\n    curl -SsL \"$CHECKSUM_URL\" -o \"$CHARTMUSEUM_SUM_FILE\"\n    curl -SsL \"$DOWNLOAD_URL\" -o \"$CHARTMUSEUM_TMP_FILE\"\n  elif [ \"${HAS_WGET}\" == \"true\" ]; then\n    wget -q -O \"$CHARTMUSEUM_SUM_FILE\" \"$CHECKSUM_URL\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/get-chartmuseum"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 75,
                  "endLine": 122,
                  "endColumn": 80,
                  "snippet": {
                    "text": "# if it needs to be changed.\ncheckChartmuseumInstalledVersion() {\n  if [[ -f \"${CHARTMUSEUM_INSTALL_DIR}/${BINARY_NAME}\" ]]; then\n    local version=$(\"${CHARTMUSEUM_INSTALL_DIR}/${BINARY_NAME}\" --version | awk '{print $3}')\n    if [[ ! \"${version}\" =~ ^v.* ]]; then\n      version=\"v${version}\" # fix for older versions\n    fi\n",
                    "rendered": {
                      "text": "# if it needs to be changed.\ncheckChartmuseumInstalledVersion() {\n  if [[ -f \"${CHARTMUSEUM_INSTALL_DIR}/${BINARY_NAME}\" ]]; then\n    local version=$(\"${CHARTMUSEUM_INSTALL_DIR}/${BINARY_NAME}\" --version | awk '{print $3}')\n    if [[ ! \"${version}\" =~ ^v.* ]]; then\n      version=\"v${version}\" # fix for older versions\n    fi\n",
                      "markdown": "`# if it needs to be changed.\ncheckChartmuseumInstalledVersion() {\n  if [[ -f \"${CHARTMUSEUM_INSTALL_DIR}/${BINARY_NAME}\" ]]; then\n    local version=$(\"${CHARTMUSEUM_INSTALL_DIR}/${BINARY_NAME}\" --version | awk '{print $3}')\n    if [[ ! \"${version}\" =~ ^v.* ]]; then\n      version=\"v${version}\" # fix for older versions\n    fi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/get-chartmuseum"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 69,
                  "endLine": 111,
                  "endColumn": 74,
                  "snippet": {
                    "text": "    if [ \"${HAS_CURL}\" == \"true\" ]; then\n      TAG=$(curl -Ls $latest_release_url | grep '\"tag_name\":' | sed -E 's/.*\"([^\"]+)\".*/\\1/')\n    elif [ \"${HAS_WGET}\" == \"true\" ]; then\n      TAG=$(wget $latest_release_url -O - 2>&1 | grep '\"tag_name\":' | sed -E 's/.*\"([^\"]+)\".*/\\1/')\n    fi\n  else\n    TAG=$DESIRED_VERSION\n",
                    "rendered": {
                      "text": "    if [ \"${HAS_CURL}\" == \"true\" ]; then\n      TAG=$(curl -Ls $latest_release_url | grep '\"tag_name\":' | sed -E 's/.*\"([^\"]+)\".*/\\1/')\n    elif [ \"${HAS_WGET}\" == \"true\" ]; then\n      TAG=$(wget $latest_release_url -O - 2>&1 | grep '\"tag_name\":' | sed -E 's/.*\"([^\"]+)\".*/\\1/')\n    fi\n  else\n    TAG=$DESIRED_VERSION\n",
                      "markdown": "`    if [ \"${HAS_CURL}\" == \"true\" ]; then\n      TAG=$(curl -Ls $latest_release_url | grep '\"tag_name\":' | sed -E 's/.*\"([^\"]+)\".*/\\1/')\n    elif [ \"${HAS_WGET}\" == \"true\" ]; then\n      TAG=$(wget $latest_release_url -O - 2>&1 | grep '\"tag_name\":' | sed -E 's/.*\"([^\"]+)\".*/\\1/')\n    fi\n  else\n    TAG=$DESIRED_VERSION\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/get-chartmuseum"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 48,
                  "endLine": 111,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    if [ \"${HAS_CURL}\" == \"true\" ]; then\n      TAG=$(curl -Ls $latest_release_url | grep '\"tag_name\":' | sed -E 's/.*\"([^\"]+)\".*/\\1/')\n    elif [ \"${HAS_WGET}\" == \"true\" ]; then\n      TAG=$(wget $latest_release_url -O - 2>&1 | grep '\"tag_name\":' | sed -E 's/.*\"([^\"]+)\".*/\\1/')\n    fi\n  else\n    TAG=$DESIRED_VERSION\n",
                    "rendered": {
                      "text": "    if [ \"${HAS_CURL}\" == \"true\" ]; then\n      TAG=$(curl -Ls $latest_release_url | grep '\"tag_name\":' | sed -E 's/.*\"([^\"]+)\".*/\\1/')\n    elif [ \"${HAS_WGET}\" == \"true\" ]; then\n      TAG=$(wget $latest_release_url -O - 2>&1 | grep '\"tag_name\":' | sed -E 's/.*\"([^\"]+)\".*/\\1/')\n    fi\n  else\n    TAG=$DESIRED_VERSION\n",
                      "markdown": "`    if [ \"${HAS_CURL}\" == \"true\" ]; then\n      TAG=$(curl -Ls $latest_release_url | grep '\"tag_name\":' | sed -E 's/.*\"([^\"]+)\".*/\\1/')\n    elif [ \"${HAS_WGET}\" == \"true\" ]; then\n      TAG=$(wget $latest_release_url -O - 2>&1 | grep '\"tag_name\":' | sed -E 's/.*\"([^\"]+)\".*/\\1/')\n    fi\n  else\n    TAG=$DESIRED_VERSION\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/get-chartmuseum"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 63,
                  "endLine": 109,
                  "endColumn": 68,
                  "snippet": {
                    "text": "    # Get tag from release URL\n    local latest_release_url=\"https://api.github.com/repos/helm/chartmuseum/releases/latest\"\n    if [ \"${HAS_CURL}\" == \"true\" ]; then\n      TAG=$(curl -Ls $latest_release_url | grep '\"tag_name\":' | sed -E 's/.*\"([^\"]+)\".*/\\1/')\n    elif [ \"${HAS_WGET}\" == \"true\" ]; then\n      TAG=$(wget $latest_release_url -O - 2>&1 | grep '\"tag_name\":' | sed -E 's/.*\"([^\"]+)\".*/\\1/')\n    fi\n",
                    "rendered": {
                      "text": "    # Get tag from release URL\n    local latest_release_url=\"https://api.github.com/repos/helm/chartmuseum/releases/latest\"\n    if [ \"${HAS_CURL}\" == \"true\" ]; then\n      TAG=$(curl -Ls $latest_release_url | grep '\"tag_name\":' | sed -E 's/.*\"([^\"]+)\".*/\\1/')\n    elif [ \"${HAS_WGET}\" == \"true\" ]; then\n      TAG=$(wget $latest_release_url -O - 2>&1 | grep '\"tag_name\":' | sed -E 's/.*\"([^\"]+)\".*/\\1/')\n    fi\n",
                      "markdown": "`    # Get tag from release URL\n    local latest_release_url=\"https://api.github.com/repos/helm/chartmuseum/releases/latest\"\n    if [ \"${HAS_CURL}\" == \"true\" ]; then\n      TAG=$(curl -Ls $latest_release_url | grep '\"tag_name\":' | sed -E 's/.*\"([^\"]+)\".*/\\1/')\n    elif [ \"${HAS_WGET}\" == \"true\" ]; then\n      TAG=$(wget $latest_release_url -O - 2>&1 | grep '\"tag_name\":' | sed -E 's/.*\"([^\"]+)\".*/\\1/')\n    fi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/get-chartmuseum"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 42,
                  "endLine": 109,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    # Get tag from release URL\n    local latest_release_url=\"https://api.github.com/repos/helm/chartmuseum/releases/latest\"\n    if [ \"${HAS_CURL}\" == \"true\" ]; then\n      TAG=$(curl -Ls $latest_release_url | grep '\"tag_name\":' | sed -E 's/.*\"([^\"]+)\".*/\\1/')\n    elif [ \"${HAS_WGET}\" == \"true\" ]; then\n      TAG=$(wget $latest_release_url -O - 2>&1 | grep '\"tag_name\":' | sed -E 's/.*\"([^\"]+)\".*/\\1/')\n    fi\n",
                    "rendered": {
                      "text": "    # Get tag from release URL\n    local latest_release_url=\"https://api.github.com/repos/helm/chartmuseum/releases/latest\"\n    if [ \"${HAS_CURL}\" == \"true\" ]; then\n      TAG=$(curl -Ls $latest_release_url | grep '\"tag_name\":' | sed -E 's/.*\"([^\"]+)\".*/\\1/')\n    elif [ \"${HAS_WGET}\" == \"true\" ]; then\n      TAG=$(wget $latest_release_url -O - 2>&1 | grep '\"tag_name\":' | sed -E 's/.*\"([^\"]+)\".*/\\1/')\n    fi\n",
                      "markdown": "`    # Get tag from release URL\n    local latest_release_url=\"https://api.github.com/repos/helm/chartmuseum/releases/latest\"\n    if [ \"${HAS_CURL}\" == \"true\" ]; then\n      TAG=$(curl -Ls $latest_release_url | grep '\"tag_name\":' | sed -E 's/.*\"([^\"]+)\".*/\\1/')\n    elif [ \"${HAS_WGET}\" == \"true\" ]; then\n      TAG=$(wget $latest_release_url -O - 2>&1 | grep '\"tag_name\":' | sed -E 's/.*\"([^\"]+)\".*/\\1/')\n    fi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/get-chartmuseum"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 24,
                  "endLine": 85,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n  if [ \"${VERIFY_CHECKSUM}\" == \"true\" ] && [ \"${HAS_OPENSSL}\" != \"true\" ]; then\n    echo \"In order to verify checksum, openssl must first be installed.\"\n    echo \"Please install openssl or set VERIFY_CHECKSUM=false in your environment.\"\n    exit 1\n  fi\n\n",
                    "rendered": {
                      "text": "\n  if [ \"${VERIFY_CHECKSUM}\" == \"true\" ] && [ \"${HAS_OPENSSL}\" != \"true\" ]; then\n    echo \"In order to verify checksum, openssl must first be installed.\"\n    echo \"Please install openssl or set VERIFY_CHECKSUM=false in your environment.\"\n    exit 1\n  fi\n\n",
                      "markdown": "`\n  if [ \"${VERIFY_CHECKSUM}\" == \"true\" ] && [ \"${HAS_OPENSSL}\" != \"true\" ]; then\n    echo \"In order to verify checksum, openssl must first be installed.\"\n    echo \"Please install openssl or set VERIFY_CHECKSUM=false in your environment.\"\n    exit 1\n  fi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/get-chartmuseum"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 38,
                  "endLine": 84,
                  "endColumn": 47,
                  "snippet": {
                    "text": "  fi\n\n  if [ \"${VERIFY_CHECKSUM}\" == \"true\" ] && [ \"${HAS_OPENSSL}\" != \"true\" ]; then\n    echo \"In order to verify checksum, openssl must first be installed.\"\n    echo \"Please install openssl or set VERIFY_CHECKSUM=false in your environment.\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "  fi\n\n  if [ \"${VERIFY_CHECKSUM}\" == \"true\" ] && [ \"${HAS_OPENSSL}\" != \"true\" ]; then\n    echo \"In order to verify checksum, openssl must first be installed.\"\n    echo \"Please install openssl or set VERIFY_CHECKSUM=false in your environment.\"\n    exit 1\n  fi\n",
                      "markdown": "`  fi\n\n  if [ \"${VERIFY_CHECKSUM}\" == \"true\" ] && [ \"${HAS_OPENSSL}\" != \"true\" ]; then\n    echo \"In order to verify checksum, openssl must first be installed.\"\n    echo \"Please install openssl or set VERIFY_CHECKSUM=false in your environment.\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/get-chartmuseum"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 24,
                  "endLine": 79,
                  "endColumn": 30,
                  "snippet": {
                    "text": "  fi\n\n  if [ \"${HAS_CURL}\" != \"true\" ] && [ \"${HAS_WGET}\" != \"true\" ]; then\n    echo \"Either curl or wget is required\"\n    exit 1\n  fi\n\n",
                    "rendered": {
                      "text": "  fi\n\n  if [ \"${HAS_CURL}\" != \"true\" ] && [ \"${HAS_WGET}\" != \"true\" ]; then\n    echo \"Either curl or wget is required\"\n    exit 1\n  fi\n\n",
                      "markdown": "`  fi\n\n  if [ \"${HAS_CURL}\" != \"true\" ] && [ \"${HAS_WGET}\" != \"true\" ]; then\n    echo \"Either curl or wget is required\"\n    exit 1\n  fi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/get-chartmuseum"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 16,
                  "endLine": 79,
                  "endColumn": 22,
                  "snippet": {
                    "text": "  fi\n\n  if [ \"${HAS_CURL}\" != \"true\" ] && [ \"${HAS_WGET}\" != \"true\" ]; then\n    echo \"Either curl or wget is required\"\n    exit 1\n  fi\n\n",
                    "rendered": {
                      "text": "  fi\n\n  if [ \"${HAS_CURL}\" != \"true\" ] && [ \"${HAS_WGET}\" != \"true\" ]; then\n    echo \"Either curl or wget is required\"\n    exit 1\n  fi\n\n",
                      "markdown": "`  fi\n\n  if [ \"${HAS_CURL}\" != \"true\" ] && [ \"${HAS_WGET}\" != \"true\" ]; then\n    echo \"Either curl or wget is required\"\n    exit 1\n  fi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/get-chartmuseum"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 28,
                  "endLine": 72,
                  "endColumn": 34,
                  "snippet": {
                    "text": "# binary builds, as well whether or not necessary tools are present.\nverifySupported() {\n  local supported=\"darwin-amd64\\ndarwin-arm64\\nlinux-386\\nlinux-amd64\\nlinux-arm\\nlinux-arm64\\nlinux-ppc64le\\nlinux-s390x\\nwindows-amd64\"\n  if ! echo \"${supported}\" | grep -q \"${OS}-${ARCH}\"; then\n    echo \"No prebuilt binary for ${OS}-${ARCH}.\"\n    echo \"To build from source, go to https://github.com/helm/chartmuseum\"\n    exit 1\n",
                    "rendered": {
                      "text": "# binary builds, as well whether or not necessary tools are present.\nverifySupported() {\n  local supported=\"darwin-amd64\\ndarwin-arm64\\nlinux-386\\nlinux-amd64\\nlinux-arm\\nlinux-arm64\\nlinux-ppc64le\\nlinux-s390x\\nwindows-amd64\"\n  if ! echo \"${supported}\" | grep -q \"${OS}-${ARCH}\"; then\n    echo \"No prebuilt binary for ${OS}-${ARCH}.\"\n    echo \"To build from source, go to https://github.com/helm/chartmuseum\"\n    exit 1\n",
                      "markdown": "`# binary builds, as well whether or not necessary tools are present.\nverifySupported() {\n  local supported=\"darwin-amd64\\ndarwin-arm64\\nlinux-386\\nlinux-amd64\\nlinux-arm\\nlinux-arm64\\nlinux-ppc64le\\nlinux-s390x\\nwindows-amd64\"\n  if ! echo \"${supported}\" | grep -q \"${OS}-${ARCH}\"; then\n    echo \"No prebuilt binary for ${OS}-${ARCH}.\"\n    echo \"To build from source, go to https://github.com/helm/chartmuseum\"\n    exit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/get-chartmuseum"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 53,
                  "endLine": 17,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# The install script is based off of the MIT-licensed script from glide,\n# the package manager for Go: https://github.com/Masterminds/glide.sh/blob/master/get\n\n: ${BINARY_NAME:=\"chartmuseum\"}\n",
                    "rendered": {
                      "text": "# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# The install script is based off of the MIT-licensed script from glide,\n# the package manager for Go: https://github.com/Masterminds/glide.sh/blob/master/get\n\n: ${BINARY_NAME:=\"chartmuseum\"}\n",
                      "markdown": "`# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# The install script is based off of the MIT-licensed script from glide,\n# the package manager for Go: https://github.com/Masterminds/glide.sh/blob/master/get\n\n: ${BINARY_NAME:=\"chartmuseum\"}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/get-chartmuseum"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 13,
                  "endLine": 17,
                  "endColumn": 21,
                  "snippet": {
                    "text": "# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# The install script is based off of the MIT-licensed script from glide,\n# the package manager for Go: https://github.com/Masterminds/glide.sh/blob/master/get\n\n: ${BINARY_NAME:=\"chartmuseum\"}\n",
                    "rendered": {
                      "text": "# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# The install script is based off of the MIT-licensed script from glide,\n# the package manager for Go: https://github.com/Masterminds/glide.sh/blob/master/get\n\n: ${BINARY_NAME:=\"chartmuseum\"}\n",
                      "markdown": "`# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# The install script is based off of the MIT-licensed script from glide,\n# the package manager for Go: https://github.com/Masterminds/glide.sh/blob/master/get\n\n: ${BINARY_NAME:=\"chartmuseum\"}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/get-chartmuseum"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# Copyright The Helm Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# Copyright The Helm Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# Copyright The Helm Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/test.sh"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 2,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "done\n\necho \"mode: set\" > .cover/cover.out && cat .cover/*.cover.out | grep -v mode: | sort -r | \\\n   awk '{if($1 != last) {print $0;last=$1}}' >> .cover/cover.out\n\ngo tool cover -html=.cover/cover.out -o=.cover/coverage.html\n",
                    "rendered": {
                      "text": "done\n\necho \"mode: set\" > .cover/cover.out && cat .cover/*.cover.out | grep -v mode: | sort -r | \\\n   awk '{if($1 != last) {print $0;last=$1}}' >> .cover/cover.out\n\ngo tool cover -html=.cover/cover.out -o=.cover/coverage.html\n",
                      "markdown": "`done\n\necho \"mode: set\" > .cover/cover.out && cat .cover/*.cover.out | grep -v mode: | sort -r | \\\n   awk '{if($1 != last) {print $0;last=$1}}' >> .cover/cover.out\n\ngo tool cover -html=.cover/cover.out -o=.cover/coverage.html\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/test.sh"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 79,
                  "endLine": 15,
                  "endColumn": 85,
                  "snippet": {
                    "text": "        -coverprofile=\".cover/$(echo $pkg | sed 's/\\//_/g').cover.out\" $pkg\ndone\n\necho \"mode: set\" > .cover/cover.out && cat .cover/*.cover.out | grep -v mode: | sort -r | \\\n   awk '{if($1 != last) {print $0;last=$1}}' >> .cover/cover.out\n\ngo tool cover -html=.cover/cover.out -o=.cover/coverage.html\n",
                    "rendered": {
                      "text": "        -coverprofile=\".cover/$(echo $pkg | sed 's/\\//_/g').cover.out\" $pkg\ndone\n\necho \"mode: set\" > .cover/cover.out && cat .cover/*.cover.out | grep -v mode: | sort -r | \\\n   awk '{if($1 != last) {print $0;last=$1}}' >> .cover/cover.out\n\ngo tool cover -html=.cover/cover.out -o=.cover/coverage.html\n",
                      "markdown": "`        -coverprofile=\".cover/$(echo $pkg | sed 's/\\//_/g').cover.out\" $pkg\ndone\n\necho \"mode: set\" > .cover/cover.out && cat .cover/*.cover.out | grep -v mode: | sort -r | \\\n   awk '{if($1 != last) {print $0;last=$1}}' >> .cover/cover.out\n\ngo tool cover -html=.cover/cover.out -o=.cover/coverage.html\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/test.sh"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 63,
                  "endLine": 15,
                  "endColumn": 69,
                  "snippet": {
                    "text": "        -coverprofile=\".cover/$(echo $pkg | sed 's/\\//_/g').cover.out\" $pkg\ndone\n\necho \"mode: set\" > .cover/cover.out && cat .cover/*.cover.out | grep -v mode: | sort -r | \\\n   awk '{if($1 != last) {print $0;last=$1}}' >> .cover/cover.out\n\ngo tool cover -html=.cover/cover.out -o=.cover/coverage.html\n",
                    "rendered": {
                      "text": "        -coverprofile=\".cover/$(echo $pkg | sed 's/\\//_/g').cover.out\" $pkg\ndone\n\necho \"mode: set\" > .cover/cover.out && cat .cover/*.cover.out | grep -v mode: | sort -r | \\\n   awk '{if($1 != last) {print $0;last=$1}}' >> .cover/cover.out\n\ngo tool cover -html=.cover/cover.out -o=.cover/coverage.html\n",
                      "markdown": "`        -coverprofile=\".cover/$(echo $pkg | sed 's/\\//_/g').cover.out\" $pkg\ndone\n\necho \"mode: set\" > .cover/cover.out && cat .cover/*.cover.out | grep -v mode: | sort -r | \\\n   awk '{if($1 != last) {print $0;last=$1}}' >> .cover/cover.out\n\ngo tool cover -html=.cover/cover.out -o=.cover/coverage.html\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/test.sh"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 38,
                  "endLine": 15,
                  "endColumn": 43,
                  "snippet": {
                    "text": "        -coverprofile=\".cover/$(echo $pkg | sed 's/\\//_/g').cover.out\" $pkg\ndone\n\necho \"mode: set\" > .cover/cover.out && cat .cover/*.cover.out | grep -v mode: | sort -r | \\\n   awk '{if($1 != last) {print $0;last=$1}}' >> .cover/cover.out\n\ngo tool cover -html=.cover/cover.out -o=.cover/coverage.html\n",
                    "rendered": {
                      "text": "        -coverprofile=\".cover/$(echo $pkg | sed 's/\\//_/g').cover.out\" $pkg\ndone\n\necho \"mode: set\" > .cover/cover.out && cat .cover/*.cover.out | grep -v mode: | sort -r | \\\n   awk '{if($1 != last) {print $0;last=$1}}' >> .cover/cover.out\n\ngo tool cover -html=.cover/cover.out -o=.cover/coverage.html\n",
                      "markdown": "`        -coverprofile=\".cover/$(echo $pkg | sed 's/\\//_/g').cover.out\" $pkg\ndone\n\necho \"mode: set\" > .cover/cover.out && cat .cover/*.cover.out | grep -v mode: | sort -r | \\\n   awk '{if($1 != last) {print $0;last=$1}}' >> .cover/cover.out\n\ngo tool cover -html=.cover/cover.out -o=.cover/coverage.html\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/test.sh"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 43,
                  "endLine": 12,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\nfor pkg in `go list ./... | grep -v /vendor/`; do\n    CGO_ENABLED=1 go test -race -v -covermode=atomic \\\n        -coverprofile=\".cover/$(echo $pkg | sed 's/\\//_/g').cover.out\" $pkg\ndone\n\necho \"mode: set\" > .cover/cover.out && cat .cover/*.cover.out | grep -v mode: | sort -r | \\\n",
                    "rendered": {
                      "text": "\nfor pkg in `go list ./... | grep -v /vendor/`; do\n    CGO_ENABLED=1 go test -race -v -covermode=atomic \\\n        -coverprofile=\".cover/$(echo $pkg | sed 's/\\//_/g').cover.out\" $pkg\ndone\n\necho \"mode: set\" > .cover/cover.out && cat .cover/*.cover.out | grep -v mode: | sort -r | \\\n",
                      "markdown": "`\nfor pkg in `go list ./... | grep -v /vendor/`; do\n    CGO_ENABLED=1 go test -race -v -covermode=atomic \\\n        -coverprofile=\".cover/$(echo $pkg | sed 's/\\//_/g').cover.out\" $pkg\ndone\n\necho \"mode: set\" > .cover/cover.out && cat .cover/*.cover.out | grep -v mode: | sort -r | \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/test.sh"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 27,
                  "endLine": 10,
                  "endColumn": 33,
                  "snippet": {
                    "text": "mkdir .cover/ .test/\ntrap \"rm -rf .test/\" EXIT\n\nfor pkg in `go list ./... | grep -v /vendor/`; do\n    CGO_ENABLED=1 go test -race -v -covermode=atomic \\\n        -coverprofile=\".cover/$(echo $pkg | sed 's/\\//_/g').cover.out\" $pkg\ndone\n",
                    "rendered": {
                      "text": "mkdir .cover/ .test/\ntrap \"rm -rf .test/\" EXIT\n\nfor pkg in `go list ./... | grep -v /vendor/`; do\n    CGO_ENABLED=1 go test -race -v -covermode=atomic \\\n        -coverprofile=\".cover/$(echo $pkg | sed 's/\\//_/g').cover.out\" $pkg\ndone\n",
                      "markdown": "`mkdir .cover/ .test/\ntrap \"rm -rf .test/\" EXIT\n\nfor pkg in `go list ./... | grep -v /vendor/`; do\n    CGO_ENABLED=1 go test -race -v -covermode=atomic \\\n        -coverprofile=\".cover/$(echo $pkg | sed 's/\\//_/g').cover.out\" $pkg\ndone\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/Dockerfile"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 29,
                  "endLine": 4,
                  "snippet": {
                    "text": "FROM alpine:latest\n\n# TARGETARCH is predefined by Docker\n# See https://docs.docker.com/engine/reference/builder/#automatic-platform-args-in-the-global-scope\nARG TARGETARCH\n\nRUN apk add --no-cache cifs-utils ca-certificates\n",
                    "rendered": {
                      "text": "FROM alpine:latest\n\n# TARGETARCH is predefined by Docker\n# See https://docs.docker.com/engine/reference/builder/#automatic-platform-args-in-the-global-scope\nARG TARGETARCH\n\nRUN apk add --no-cache cifs-utils ca-certificates\n",
                      "markdown": "`FROM alpine:latest\n\n# TARGETARCH is predefined by Docker\n# See https://docs.docker.com/engine/reference/builder/#automatic-platform-args-in-the-global-scope\nARG TARGETARCH\n\nRUN apk add --no-cache cifs-utils ca-certificates\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/Makefile"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 25,
                  "endLine": 9,
                  "snippet": {
                    "text": "VERSION ?= 0.16.2\nREVISION := $(shell git rev-parse --short HEAD;)\n\nBINDIR      := $(CURDIR)/bin\nBINNAME     ?= chartmuseum\n\n# Required for globs to work correctly\nSHELL      = /usr/bin/env bash\n\nTARGETS     := darwin/amd64 darwin/arm64 linux/amd64 linux/386 linux/arm linux/arm64 linux/mips64le linux/ppc64le linux/s390x windows/amd64 linux/loong64\nTARGET_OBJS ?= darwin-amd64.tar.gz darwin-amd64.tar.gz.sha256sum darwin-arm64.tar.gz darwin-arm64.tar.gz.sha256sum linux-amd64.tar.gz linux-amd64",
                    "rendered": {
                      "text": "VERSION ?= 0.16.2\nREVISION := $(shell git rev-parse --short HEAD;)\n\nBINDIR      := $(CURDIR)/bin\nBINNAME     ?= chartmuseum\n\n# Required for globs to work correctly\nSHELL      = /usr/bin/env bash\n\nTARGETS     := darwin/amd64 darwin/arm64 linux/amd64 linux/386 linux/arm linux/arm64 linux/mips64le linux/ppc64le linux/s390x windows/amd64 linux/loong64\nTARGET_OBJS ?= darwin-amd64.tar.gz darwin-amd64.tar.gz.sha256sum darwin-arm64.tar.gz darwin-arm64.tar.gz.sha256sum linux-amd64.tar.gz linux-amd64",
                      "markdown": "`VERSION ?= 0.16.2\nREVISION := $(shell git rev-parse --short HEAD;)\n\nBINDIR      := $(CURDIR)/bin\nBINNAME     ?= chartmuseum\n\n# Required for globs to work correctly\nSHELL      = /usr/bin/env bash\n\nTARGETS     := darwin/amd64 darwin/arm64 linux/amd64 linux/386 linux/arm linux/arm64 linux/mips64le linux/ppc64le linux/s390x windows/amd64 linux/loong64\nTARGET_OBJS ?= darwin-amd64.tar.gz darwin-amd64.tar.gz.sha256sum darwin-arm64.tar.gz darwin-arm64.tar.gz.sha256sum linux-amd64.tar.gz linux-amd64`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/Makefile"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 25,
                  "endLine": 190,
                  "endColumn": 30,
                  "snippet": {
                    "text": "checksum:\n\tfor f in $$(ls _dist/*.{gz,spdx,zip} 2>/dev/null) ; do \\\n\t\techo \"Creating $${f}.sha256sum\" ; \\\n\t\tshasum -a 256 \"$${f}\" | sed 's/_dist\\///' > \"$${f}.sha256sum\" ; \\\n\tdone\n\n.PHONY: sbom\n",
                    "rendered": {
                      "text": "checksum:\n\tfor f in $$(ls _dist/*.{gz,spdx,zip} 2>/dev/null) ; do \\\n\t\techo \"Creating $${f}.sha256sum\" ; \\\n\t\tshasum -a 256 \"$${f}\" | sed 's/_dist\\///' > \"$${f}.sha256sum\" ; \\\n\tdone\n\n.PHONY: sbom\n",
                      "markdown": "`checksum:\n\tfor f in $$(ls _dist/*.{gz,spdx,zip} 2>/dev/null) ; do \\\n\t\techo \"Creating $${f}.sha256sum\" ; \\\n\t\tshasum -a 256 \"$${f}\" | sed 's/_dist\\///' > \"$${f}.sha256sum\" ; \\\n\tdone\n\n.PHONY: sbom\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/Makefile"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 1,
                  "endLine": 179,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\tmkdir -p _dist\n\tcd _dist && \\\n\tfor obj in ${TARGET_OBJS} ; do \\\n\t\tcurl -sSL -o chartmuseum-v${VERSION}-$${obj} https://get.helm.sh/chartmuseum-v${VERSION}-$${obj} ; \\\n\tdone\n\n# The contents of the .sha256sum file are compatible with tools like\n",
                    "rendered": {
                      "text": "\tmkdir -p _dist\n\tcd _dist && \\\n\tfor obj in ${TARGET_OBJS} ; do \\\n\t\tcurl -sSL -o chartmuseum-v${VERSION}-$${obj} https://get.helm.sh/chartmuseum-v${VERSION}-$${obj} ; \\\n\tdone\n\n# The contents of the .sha256sum file are compatible with tools like\n",
                      "markdown": "`\tmkdir -p _dist\n\tcd _dist && \\\n\tfor obj in ${TARGET_OBJS} ; do \\\n\t\tcurl -sSL -o chartmuseum-v${VERSION}-$${obj} https://get.helm.sh/chartmuseum-v${VERSION}-$${obj} ; \\\n\tdone\n\n# The contents of the .sha256sum file are compatible with tools like\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/Makefile"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 14,
                  "endLine": 169,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\tcd _dist && \\\n\t\t$(DIST_DIRS) cp ../LICENSE {} \\; && \\\n\t\t$(DIST_DIRS) cp ../README.md {} \\; && \\\n\t\t$(DIST_DIRS) tar -zcf chartmuseum-${VERSION}-{}.tar.gz {} \\; && \\\n\t\t$(DIST_DIRS) zip -r chartmuseum-${VERSION}-{}.zip {} \\; && \\\n\t\tfor f in `find *.zip`; do if [[ $${f} != *\"windows\"* ]]; then rm -f $${f}; fi; done \\\n\t)\n",
                    "rendered": {
                      "text": "\t\tcd _dist && \\\n\t\t$(DIST_DIRS) cp ../LICENSE {} \\; && \\\n\t\t$(DIST_DIRS) cp ../README.md {} \\; && \\\n\t\t$(DIST_DIRS) tar -zcf chartmuseum-${VERSION}-{}.tar.gz {} \\; && \\\n\t\t$(DIST_DIRS) zip -r chartmuseum-${VERSION}-{}.zip {} \\; && \\\n\t\tfor f in `find *.zip`; do if [[ $${f} != *\"windows\"* ]]; then rm -f $${f}; fi; done \\\n\t)\n",
                      "markdown": "`\t\tcd _dist && \\\n\t\t$(DIST_DIRS) cp ../LICENSE {} \\; && \\\n\t\t$(DIST_DIRS) cp ../README.md {} \\; && \\\n\t\t$(DIST_DIRS) tar -zcf chartmuseum-${VERSION}-{}.tar.gz {} \\; && \\\n\t\t$(DIST_DIRS) zip -r chartmuseum-${VERSION}-{}.zip {} \\; && \\\n\t\tfor f in `find *.zip`; do if [[ $${f} != *\"windows\"* ]]; then rm -f $${f}; fi; done \\\n\t)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/Makefile"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 14,
                  "endLine": 168,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\t( \\\n\t\tcd _dist && \\\n\t\t$(DIST_DIRS) cp ../LICENSE {} \\; && \\\n\t\t$(DIST_DIRS) cp ../README.md {} \\; && \\\n\t\t$(DIST_DIRS) tar -zcf chartmuseum-${VERSION}-{}.tar.gz {} \\; && \\\n\t\t$(DIST_DIRS) zip -r chartmuseum-${VERSION}-{}.zip {} \\; && \\\n\t\tfor f in `find *.zip`; do if [[ $${f} != *\"windows\"* ]]; then rm -f $${f}; fi; done \\\n",
                    "rendered": {
                      "text": "\t( \\\n\t\tcd _dist && \\\n\t\t$(DIST_DIRS) cp ../LICENSE {} \\; && \\\n\t\t$(DIST_DIRS) cp ../README.md {} \\; && \\\n\t\t$(DIST_DIRS) tar -zcf chartmuseum-${VERSION}-{}.tar.gz {} \\; && \\\n\t\t$(DIST_DIRS) zip -r chartmuseum-${VERSION}-{}.zip {} \\; && \\\n\t\tfor f in `find *.zip`; do if [[ $${f} != *\"windows\"* ]]; then rm -f $${f}; fi; done \\\n",
                      "markdown": "`\t( \\\n\t\tcd _dist && \\\n\t\t$(DIST_DIRS) cp ../LICENSE {} \\; && \\\n\t\t$(DIST_DIRS) cp ../README.md {} \\; && \\\n\t\t$(DIST_DIRS) tar -zcf chartmuseum-${VERSION}-{}.tar.gz {} \\; && \\\n\t\t$(DIST_DIRS) zip -r chartmuseum-${VERSION}-{}.zip {} \\; && \\\n\t\tfor f in `find *.zip`; do if [[ $${f} != *\"windows\"* ]]; then rm -f $${f}; fi; done \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/Makefile"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 14,
                  "endLine": 167,
                  "endColumn": 18,
                  "snippet": {
                    "text": "dist:\n\t( \\\n\t\tcd _dist && \\\n\t\t$(DIST_DIRS) cp ../LICENSE {} \\; && \\\n\t\t$(DIST_DIRS) cp ../README.md {} \\; && \\\n\t\t$(DIST_DIRS) tar -zcf chartmuseum-${VERSION}-{}.tar.gz {} \\; && \\\n\t\t$(DIST_DIRS) zip -r chartmuseum-${VERSION}-{}.zip {} \\; && \\\n",
                    "rendered": {
                      "text": "dist:\n\t( \\\n\t\tcd _dist && \\\n\t\t$(DIST_DIRS) cp ../LICENSE {} \\; && \\\n\t\t$(DIST_DIRS) cp ../README.md {} \\; && \\\n\t\t$(DIST_DIRS) tar -zcf chartmuseum-${VERSION}-{}.tar.gz {} \\; && \\\n\t\t$(DIST_DIRS) zip -r chartmuseum-${VERSION}-{}.zip {} \\; && \\\n",
                      "markdown": "`dist:\n\t( \\\n\t\tcd _dist && \\\n\t\t$(DIST_DIRS) cp ../LICENSE {} \\; && \\\n\t\t$(DIST_DIRS) cp ../README.md {} \\; && \\\n\t\t$(DIST_DIRS) tar -zcf chartmuseum-${VERSION}-{}.tar.gz {} \\; && \\\n\t\t$(DIST_DIRS) zip -r chartmuseum-${VERSION}-{}.zip {} \\; && \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/Makefile"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 62,
                  "endLine": 113,
                  "endColumn": 69,
                  "snippet": {
                    "text": "\n.PHONY: clean\nclean:\n\t@git status --ignored --short | grep '^!! ' | sed 's/!! //' | xargs rm -rf\n\n.PHONY: setup-test-environment\nsetup-test-environment:\n",
                    "rendered": {
                      "text": "\n.PHONY: clean\nclean:\n\t@git status --ignored --short | grep '^!! ' | sed 's/!! //' | xargs rm -rf\n\n.PHONY: setup-test-environment\nsetup-test-environment:\n",
                      "markdown": "`\n.PHONY: clean\nclean:\n\t@git status --ignored --short | grep '^!! ' | sed 's/!! //' | xargs rm -rf\n\n.PHONY: setup-test-environment\nsetup-test-environment:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/Makefile"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 46,
                  "endLine": 113,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\n.PHONY: clean\nclean:\n\t@git status --ignored --short | grep '^!! ' | sed 's/!! //' | xargs rm -rf\n\n.PHONY: setup-test-environment\nsetup-test-environment:\n",
                    "rendered": {
                      "text": "\n.PHONY: clean\nclean:\n\t@git status --ignored --short | grep '^!! ' | sed 's/!! //' | xargs rm -rf\n\n.PHONY: setup-test-environment\nsetup-test-environment:\n",
                      "markdown": "`\n.PHONY: clean\nclean:\n\t@git status --ignored --short | grep '^!! ' | sed 's/!! //' | xargs rm -rf\n\n.PHONY: setup-test-environment\nsetup-test-environment:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/Makefile"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 32,
                  "endLine": 113,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\n.PHONY: clean\nclean:\n\t@git status --ignored --short | grep '^!! ' | sed 's/!! //' | xargs rm -rf\n\n.PHONY: setup-test-environment\nsetup-test-environment:\n",
                    "rendered": {
                      "text": "\n.PHONY: clean\nclean:\n\t@git status --ignored --short | grep '^!! ' | sed 's/!! //' | xargs rm -rf\n\n.PHONY: setup-test-environment\nsetup-test-environment:\n",
                      "markdown": "`\n.PHONY: clean\nclean:\n\t@git status --ignored --short | grep '^!! ' | sed 's/!! //' | xargs rm -rf\n\n.PHONY: setup-test-environment\nsetup-test-environment:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/Makefile"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 26,
                  "endLine": 17,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\nGOBIN         = $(shell go env GOBIN)\nifeq ($(GOBIN),)\nGOBIN         = $(shell go env GOPATH)/bin\nendif\nGOX           = $(GOBIN)/gox\n\n",
                    "rendered": {
                      "text": "\nGOBIN         = $(shell go env GOBIN)\nifeq ($(GOBIN),)\nGOBIN         = $(shell go env GOPATH)/bin\nendif\nGOX           = $(GOBIN)/gox\n\n",
                      "markdown": "`\nGOBIN         = $(shell go env GOBIN)\nifeq ($(GOBIN),)\nGOBIN         = $(shell go env GOPATH)/bin\nendif\nGOX           = $(GOBIN)/gox\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/Makefile"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 26,
                  "endLine": 15,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\nDIST_DIRS   := find * -type d -exec\n\nGOBIN         = $(shell go env GOBIN)\nifeq ($(GOBIN),)\nGOBIN         = $(shell go env GOPATH)/bin\nendif\n",
                    "rendered": {
                      "text": "\nDIST_DIRS   := find * -type d -exec\n\nGOBIN         = $(shell go env GOBIN)\nifeq ($(GOBIN),)\nGOBIN         = $(shell go env GOPATH)/bin\nendif\n",
                      "markdown": "`\nDIST_DIRS   := find * -type d -exec\n\nGOBIN         = $(shell go env GOBIN)\nifeq ($(GOBIN),)\nGOBIN         = $(shell go env GOPATH)/bin\nendif\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/Makefile"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 14,
                  "endLine": 13,
                  "endColumn": 20,
                  "snippet": {
                    "text": ".gz linux-arm64.tar.gz.sha256sum linux-mips64le.tar.gz linux-mips64le.tar.gz.sha256sum linux-ppc64le.tar.gz linux-ppc64le.tar.gz.sha256sum linux-s390x.tar.gz linux-s390x.tar.gz.sha256sum windows-amd64.zip windows-amd64.zip.sha256sum linux-loong64.tar.gz linux-loong64.tar.gz.sha256sum\n\nDIST_DIRS   := find * -type d -exec\n\nGOBIN         = $(shell go env GOBIN)\nifeq ($(GOBIN),)\nGOBIN         = $(shell go env GOPATH)/bin\nendif\nGOX           = $(GOBIN)/gox\n\nCM_LOADTESTING_HOST ?= http://localhost:8080\n\n$(GOX):\n\t(cd /; GO111MODULE=on go install github.com/mitchellh/gox@latest)\n\n.PHONY: bootstrap\nbootstrap",
                    "rendered": {
                      "text": ".gz linux-arm64.tar.gz.sha256sum linux-mips64le.tar.gz linux-mips64le.tar.gz.sha256sum linux-ppc64le.tar.gz linux-ppc64le.tar.gz.sha256sum linux-s390x.tar.gz linux-s390x.tar.gz.sha256sum windows-amd64.zip windows-amd64.zip.sha256sum linux-loong64.tar.gz linux-loong64.tar.gz.sha256sum\n\nDIST_DIRS   := find * -type d -exec\n\nGOBIN         = $(shell go env GOBIN)\nifeq ($(GOBIN),)\nGOBIN         = $(shell go env GOPATH)/bin\nendif\nGOX           = $(GOBIN)/gox\n\nCM_LOADTESTING_HOST ?= http://localhost:8080\n\n$(GOX):\n\t(cd /; GO111MODULE=on go install github.com/mitchellh/gox@latest)\n\n.PHONY: bootstrap\nbootstrap",
                      "markdown": "`.gz linux-arm64.tar.gz.sha256sum linux-mips64le.tar.gz linux-mips64le.tar.gz.sha256sum linux-ppc64le.tar.gz linux-ppc64le.tar.gz.sha256sum linux-s390x.tar.gz linux-s390x.tar.gz.sha256sum windows-amd64.zip windows-amd64.zip.sha256sum linux-loong64.tar.gz linux-loong64.tar.gz.sha256sum\n\nDIST_DIRS   := find * -type d -exec\n\nGOBIN         = $(shell go env GOBIN)\nifeq ($(GOBIN),)\nGOBIN         = $(shell go env GOPATH)/bin\nendif\nGOX           = $(GOBIN)/gox\n\nCM_LOADTESTING_HOST ?= http://localhost:8080\n\n$(GOX):\n\t(cd /; GO111MODULE=on go install github.com/mitchellh/gox@latest)\n\n.PHONY: bootstrap\nbootstrap`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/Makefile"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 25,
                  "endLine": 9,
                  "snippet": {
                    "text": "VERSION ?= 0.16.2\nREVISION := $(shell git rev-parse --short HEAD;)\n\nBINDIR      := $(CURDIR)/bin\nBINNAME     ?= chartmuseum\n\n# Required for globs to work correctly\nSHELL      = /usr/bin/env bash\n\nTARGETS     := darwin/amd64 darwin/arm64 linux/amd64 linux/386 linux/arm linux/arm64 linux/mips64le linux/ppc64le linux/s390x windows/amd64 linux/loong64\nTARGET_OBJS ?= darwin-amd64.tar.gz darwin-amd64.tar.gz.sha256sum darwin-arm64.tar.gz darwin-arm64.tar.gz.sha256sum linux-amd64.tar.gz linux-amd64",
                    "rendered": {
                      "text": "VERSION ?= 0.16.2\nREVISION := $(shell git rev-parse --short HEAD;)\n\nBINDIR      := $(CURDIR)/bin\nBINNAME     ?= chartmuseum\n\n# Required for globs to work correctly\nSHELL      = /usr/bin/env bash\n\nTARGETS     := darwin/amd64 darwin/arm64 linux/amd64 linux/386 linux/arm linux/arm64 linux/mips64le linux/ppc64le linux/s390x windows/amd64 linux/loong64\nTARGET_OBJS ?= darwin-amd64.tar.gz darwin-amd64.tar.gz.sha256sum darwin-arm64.tar.gz darwin-arm64.tar.gz.sha256sum linux-amd64.tar.gz linux-amd64",
                      "markdown": "`VERSION ?= 0.16.2\nREVISION := $(shell git rev-parse --short HEAD;)\n\nBINDIR      := $(CURDIR)/bin\nBINNAME     ?= chartmuseum\n\n# Required for globs to work correctly\nSHELL      = /usr/bin/env bash\n\nTARGETS     := darwin/amd64 darwin/arm64 linux/amd64 linux/386 linux/arm linux/arm64 linux/mips64le linux/ppc64le linux/s390x windows/amd64 linux/loong64\nTARGET_OBJS ?= darwin-amd64.tar.gz darwin-amd64.tar.gz.sha256sum darwin-arm64.tar.gz darwin-arm64.tar.gz.sha256sum linux-amd64.tar.gz linux-amd64`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/Makefile"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 19,
                  "endLine": 2,
                  "endColumn": 24,
                  "snippet": {
                    "text": "VERSION ?= 0.16.2\nREVISION := $(shell git rev-parse --short HEAD;)\n\nBINDIR      := $(CURDIR)/bin\nBINNAME     ?= chartmuseum\n",
                    "rendered": {
                      "text": "VERSION ?= 0.16.2\nREVISION := $(shell git rev-parse --short HEAD;)\n\nBINDIR      := $(CURDIR)/bin\nBINNAME     ?= chartmuseum\n",
                      "markdown": "`VERSION ?= 0.16.2\nREVISION := $(shell git rev-parse --short HEAD;)\n\nBINDIR      := $(CURDIR)/bin\nBINNAME     ?= chartmuseum\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/testdata/charts/mychart/templates/pod.yaml"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 8,
                  "snippet": {
                    "text": "  name: '{{- printf \"%s-%s\" .Release.Name .Chart.Name | trunc 63 | trimSuffix \"-\" -}}'\nspec:\n  containers:\n  - image: busybox\n    name: '{{ .Chart.Name }}'\n    command: ['/bin/sh', '-c', 'while true; do echo {{ .Release.Name }}; sleep 5; done']",
                    "rendered": {
                      "text": "  name: '{{- printf \"%s-%s\" .Release.Name .Chart.Name | trunc 63 | trimSuffix \"-\" -}}'\nspec:\n  containers:\n  - image: busybox\n    name: '{{ .Chart.Name }}'\n    command: ['/bin/sh', '-c', 'while true; do echo {{ .Release.Name }}; sleep 5; done']",
                      "markdown": "`  name: '{{- printf \"%s-%s\" .Release.Name .Chart.Name | trunc 63 | trimSuffix \"-\" -}}'\nspec:\n  containers:\n  - image: busybox\n    name: '{{ .Chart.Name }}'\n    command: ['/bin/sh', '-c', 'while true; do echo {{ .Release.Name }}; sleep 5; done']`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.git/hooks/pre-receive.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/cache/store_test.go"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 20,
                  "endLine": 65,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\t\terr = store.Delete(\"x\")\n\t\tsuite.Nil(err, fmt.Sprintf(\"able to delete a key using %s store\", key))\n\n\t\tvalue, err = store.Get(\"x\")\n\t\tsuite.NotNil(err, fmt.Sprintf(\"error getting deleted key using %s store\", key))\n\t\tsuite.Equal([]byte{}, value, fmt.Sprintf(\"error getting deleted key using %s store\", key))\n\n",
                    "rendered": {
                      "text": "\t\terr = store.Delete(\"x\")\n\t\tsuite.Nil(err, fmt.Sprintf(\"able to delete a key using %s store\", key))\n\n\t\tvalue, err = store.Get(\"x\")\n\t\tsuite.NotNil(err, fmt.Sprintf(\"error getting deleted key using %s store\", key))\n\t\tsuite.Equal([]byte{}, value, fmt.Sprintf(\"error getting deleted key using %s store\", key))\n\n",
                      "markdown": "`\t\terr = store.Delete(\"x\")\n\t\tsuite.Nil(err, fmt.Sprintf(\"able to delete a key using %s store\", key))\n\n\t\tvalue, err = store.Get(\"x\")\n\t\tsuite.NotNil(err, fmt.Sprintf(\"error getting deleted key using %s store\", key))\n\t\tsuite.Equal([]byte{}, value, fmt.Sprintf(\"error getting deleted key using %s store\", key))\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/cache/store_test.go"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 20,
                  "endLine": 58,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\t\terr = store.Set(\"x\", []byte(\"2\"))\n\t\tsuite.Nil(err, fmt.Sprintf(\"able to update an existing key using %s store\", key))\n\n\t\tvalue, err = store.Get(\"x\")\n\t\tsuite.Nil(err, fmt.Sprintf(\"able to get a key after update using %s store\", key))\n\t\tsuite.Equal([]byte(\"2\"), value, fmt.Sprintf(\"able to get a key after update using %s store\", key))\n\n",
                    "rendered": {
                      "text": "\t\terr = store.Set(\"x\", []byte(\"2\"))\n\t\tsuite.Nil(err, fmt.Sprintf(\"able to update an existing key using %s store\", key))\n\n\t\tvalue, err = store.Get(\"x\")\n\t\tsuite.Nil(err, fmt.Sprintf(\"able to get a key after update using %s store\", key))\n\t\tsuite.Equal([]byte(\"2\"), value, fmt.Sprintf(\"able to get a key after update using %s store\", key))\n\n",
                      "markdown": "`\t\terr = store.Set(\"x\", []byte(\"2\"))\n\t\tsuite.Nil(err, fmt.Sprintf(\"able to update an existing key using %s store\", key))\n\n\t\tvalue, err = store.Get(\"x\")\n\t\tsuite.Nil(err, fmt.Sprintf(\"able to get a key after update using %s store\", key))\n\t\tsuite.Equal([]byte(\"2\"), value, fmt.Sprintf(\"able to get a key after update using %s store\", key))\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/cache/store_test.go"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 21,
                  "endLine": 51,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\t\terr := store.Set(\"x\", []byte(\"1\"))\n\t\tsuite.Nil(err, fmt.Sprintf(\"able to create a new key using %s store\", key))\n\n\t\tvalue, err := store.Get(\"x\")\n\t\tsuite.Nil(err, \"able to get a key\")\n\t\tsuite.Equal([]byte(\"1\"), value, fmt.Sprintf(\"able to get a key using %s store\", key))\n\n",
                    "rendered": {
                      "text": "\t\terr := store.Set(\"x\", []byte(\"1\"))\n\t\tsuite.Nil(err, fmt.Sprintf(\"able to create a new key using %s store\", key))\n\n\t\tvalue, err := store.Get(\"x\")\n\t\tsuite.Nil(err, \"able to get a key\")\n\t\tsuite.Equal([]byte(\"1\"), value, fmt.Sprintf(\"able to get a key using %s store\", key))\n\n",
                      "markdown": "`\t\terr := store.Set(\"x\", []byte(\"1\"))\n\t\tsuite.Nil(err, fmt.Sprintf(\"able to create a new key using %s store\", key))\n\n\t\tvalue, err := store.Get(\"x\")\n\t\tsuite.Nil(err, \"able to get a key\")\n\t\tsuite.Equal([]byte(\"1\"), value, fmt.Sprintf(\"able to get a key using %s store\", key))\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/cache/store_test.go"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 70,
                  "endLine": 60,
                  "endColumn": 78,
                  "snippet": {
                    "text": "\n\t\tvalue, err = store.Get(\"x\")\n\t\tsuite.Nil(err, fmt.Sprintf(\"able to get a key after update using %s store\", key))\n\t\tsuite.Equal([]byte(\"2\"), value, fmt.Sprintf(\"able to get a key after update using %s store\", key))\n\n\t\terr = store.Delete(\"x\")\n\t\tsuite.Nil(err, fmt.Sprintf(\"able to delete a key using %s store\", key))\n",
                    "rendered": {
                      "text": "\n\t\tvalue, err = store.Get(\"x\")\n\t\tsuite.Nil(err, fmt.Sprintf(\"able to get a key after update using %s store\", key))\n\t\tsuite.Equal([]byte(\"2\"), value, fmt.Sprintf(\"able to get a key after update using %s store\", key))\n\n\t\terr = store.Delete(\"x\")\n\t\tsuite.Nil(err, fmt.Sprintf(\"able to delete a key using %s store\", key))\n",
                      "markdown": "`\n\t\tvalue, err = store.Get(\"x\")\n\t\tsuite.Nil(err, fmt.Sprintf(\"able to get a key after update using %s store\", key))\n\t\tsuite.Equal([]byte(\"2\"), value, fmt.Sprintf(\"able to get a key after update using %s store\", key))\n\n\t\terr = store.Delete(\"x\")\n\t\tsuite.Nil(err, fmt.Sprintf(\"able to delete a key using %s store\", key))\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/cache/store_test.go"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 53,
                  "endLine": 59,
                  "endColumn": 61,
                  "snippet": {
                    "text": "\t\tsuite.Nil(err, fmt.Sprintf(\"able to update an existing key using %s store\", key))\n\n\t\tvalue, err = store.Get(\"x\")\n\t\tsuite.Nil(err, fmt.Sprintf(\"able to get a key after update using %s store\", key))\n\t\tsuite.Equal([]byte(\"2\"), value, fmt.Sprintf(\"able to get a key after update using %s store\", key))\n\n\t\terr = store.Delete(\"x\")\n",
                    "rendered": {
                      "text": "\t\tsuite.Nil(err, fmt.Sprintf(\"able to update an existing key using %s store\", key))\n\n\t\tvalue, err = store.Get(\"x\")\n\t\tsuite.Nil(err, fmt.Sprintf(\"able to get a key after update using %s store\", key))\n\t\tsuite.Equal([]byte(\"2\"), value, fmt.Sprintf(\"able to get a key after update using %s store\", key))\n\n\t\terr = store.Delete(\"x\")\n",
                      "markdown": "`\t\tsuite.Nil(err, fmt.Sprintf(\"able to update an existing key using %s store\", key))\n\n\t\tvalue, err = store.Get(\"x\")\n\t\tsuite.Nil(err, fmt.Sprintf(\"able to get a key after update using %s store\", key))\n\t\tsuite.Equal([]byte(\"2\"), value, fmt.Sprintf(\"able to get a key after update using %s store\", key))\n\n\t\terr = store.Delete(\"x\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/cache/store_test.go"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 37,
                  "endLine": 56,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\t\tsuite.Equal([]byte(\"1\"), value, fmt.Sprintf(\"able to get a key using %s store\", key))\n\n\t\terr = store.Set(\"x\", []byte(\"2\"))\n\t\tsuite.Nil(err, fmt.Sprintf(\"able to update an existing key using %s store\", key))\n\n\t\tvalue, err = store.Get(\"x\")\n\t\tsuite.Nil(err, fmt.Sprintf(\"able to get a key after update using %s store\", key))\n",
                    "rendered": {
                      "text": "\t\tsuite.Equal([]byte(\"1\"), value, fmt.Sprintf(\"able to get a key using %s store\", key))\n\n\t\terr = store.Set(\"x\", []byte(\"2\"))\n\t\tsuite.Nil(err, fmt.Sprintf(\"able to update an existing key using %s store\", key))\n\n\t\tvalue, err = store.Get(\"x\")\n\t\tsuite.Nil(err, fmt.Sprintf(\"able to get a key after update using %s store\", key))\n",
                      "markdown": "`\t\tsuite.Equal([]byte(\"1\"), value, fmt.Sprintf(\"able to get a key using %s store\", key))\n\n\t\terr = store.Set(\"x\", []byte(\"2\"))\n\t\tsuite.Nil(err, fmt.Sprintf(\"able to update an existing key using %s store\", key))\n\n\t\tvalue, err = store.Get(\"x\")\n\t\tsuite.Nil(err, fmt.Sprintf(\"able to get a key after update using %s store\", key))\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/cache/redis.go"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 29,
                  "endLine": 44,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\n// Get returns an object at key\nfunc (store *RedisStore) Get(key string) ([]byte, error) {\n\tcontent, err := store.Client.Get(key).Bytes()\n\treturn content, err\n}\n\n",
                    "rendered": {
                      "text": "\n// Get returns an object at key\nfunc (store *RedisStore) Get(key string) ([]byte, error) {\n\tcontent, err := store.Client.Get(key).Bytes()\n\treturn content, err\n}\n\n",
                      "markdown": "`\n// Get returns an object at key\nfunc (store *RedisStore) Get(key string) ([]byte, error) {\n\tcontent, err := store.Client.Get(key).Bytes()\n\treturn content, err\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/cache/redis.go"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 12,
                  "endLine": 35,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\tstore := &RedisStore{}\n\tredisClientOptions := &redis.Options{\n\t\tAddr:     addr,\n\t\tPassword: password,\n\t\tDB:       db,\n\t}\n\tstore.Client = redis.NewClient(redisClientOptions)\n",
                    "rendered": {
                      "text": "\tstore := &RedisStore{}\n\tredisClientOptions := &redis.Options{\n\t\tAddr:     addr,\n\t\tPassword: password,\n\t\tDB:       db,\n\t}\n\tstore.Client = redis.NewClient(redisClientOptions)\n",
                      "markdown": "`\tstore := &RedisStore{}\n\tredisClientOptions := &redis.Options{\n\t\tAddr:     addr,\n\t\tPassword: password,\n\t\tDB:       db,\n\t}\n\tstore.Client = redis.NewClient(redisClientOptions)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/cache/redis.go"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 2,
                  "endLine": 35,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\tstore := &RedisStore{}\n\tredisClientOptions := &redis.Options{\n\t\tAddr:     addr,\n\t\tPassword: password,\n\t\tDB:       db,\n\t}\n\tstore.Client = redis.NewClient(redisClientOptions)\n",
                    "rendered": {
                      "text": "\tstore := &RedisStore{}\n\tredisClientOptions := &redis.Options{\n\t\tAddr:     addr,\n\t\tPassword: password,\n\t\tDB:       db,\n\t}\n\tstore.Client = redis.NewClient(redisClientOptions)\n",
                      "markdown": "`\tstore := &RedisStore{}\n\tredisClientOptions := &redis.Options{\n\t\tAddr:     addr,\n\t\tPassword: password,\n\t\tDB:       db,\n\t}\n\tstore.Client = redis.NewClient(redisClientOptions)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/cache/redis.go"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 32,
                  "endLine": 31,
                  "endColumn": 40,
                  "snippet": {
                    "text": ")\n\n// NewRedisStore creates a new RedisStore\nfunc NewRedisStore(addr string, password string, db int) *RedisStore {\n\tstore := &RedisStore{}\n\tredisClientOptions := &redis.Options{\n\t\tAddr:     addr,\n",
                    "rendered": {
                      "text": ")\n\n// NewRedisStore creates a new RedisStore\nfunc NewRedisStore(addr string, password string, db int) *RedisStore {\n\tstore := &RedisStore{}\n\tredisClientOptions := &redis.Options{\n\t\tAddr:     addr,\n",
                      "markdown": "`)\n\n// NewRedisStore creates a new RedisStore\nfunc NewRedisStore(addr string, password string, db int) *RedisStore {\n\tstore := &RedisStore{}\n\tredisClientOptions := &redis.Options{\n\t\tAddr:     addr,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/cache/redis.go"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 24,
                  "endLine": 42,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\treturn store\n}\n\n// Get returns an object at key\nfunc (store *RedisStore) Get(key string) ([]byte, error) {\n\tcontent, err := store.Client.Get(key).Bytes()\n\treturn content, err\n",
                    "rendered": {
                      "text": "\treturn store\n}\n\n// Get returns an object at key\nfunc (store *RedisStore) Get(key string) ([]byte, error) {\n\tcontent, err := store.Client.Get(key).Bytes()\n\treturn content, err\n",
                      "markdown": "`\treturn store\n}\n\n// Get returns an object at key\nfunc (store *RedisStore) Get(key string) ([]byte, error) {\n\tcontent, err := store.Client.Get(key).Bytes()\n\treturn content, err\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/config/vars.go"
                },
                "region": {
                  "startLine": 282,
                  "startColumn": 24,
                  "endLine": 282,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\t\tCLIFlag: cli.StringFlag{\n\t\t\tName:   \"cache-redis-password\",\n\t\t\tUsage:  \"Redis requirepass server configuration\",\n\t\t\tEnvVar: \"CACHE_REDIS_PASSWORD\",\n\t\t},\n\t},\n\t\"cache.redis.db\": {\n",
                    "rendered": {
                      "text": "\t\tCLIFlag: cli.StringFlag{\n\t\t\tName:   \"cache-redis-password\",\n\t\t\tUsage:  \"Redis requirepass server configuration\",\n\t\t\tEnvVar: \"CACHE_REDIS_PASSWORD\",\n\t\t},\n\t},\n\t\"cache.redis.db\": {\n",
                      "markdown": "`\t\tCLIFlag: cli.StringFlag{\n\t\t\tName:   \"cache-redis-password\",\n\t\t\tUsage:  \"Redis requirepass server configuration\",\n\t\t\tEnvVar: \"CACHE_REDIS_PASSWORD\",\n\t\t},\n\t},\n\t\"cache.redis.db\": {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/config/vars.go"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 24,
                  "endLine": 280,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\t\tType:    stringType,\n\t\tDefault: \"\",\n\t\tCLIFlag: cli.StringFlag{\n\t\t\tName:   \"cache-redis-password\",\n\t\t\tUsage:  \"Redis requirepass server configuration\",\n\t\t\tEnvVar: \"CACHE_REDIS_PASSWORD\",\n\t\t},\n",
                    "rendered": {
                      "text": "\t\tType:    stringType,\n\t\tDefault: \"\",\n\t\tCLIFlag: cli.StringFlag{\n\t\t\tName:   \"cache-redis-password\",\n\t\t\tUsage:  \"Redis requirepass server configuration\",\n\t\t\tEnvVar: \"CACHE_REDIS_PASSWORD\",\n\t\t},\n",
                      "markdown": "`\t\tType:    stringType,\n\t\tDefault: \"\",\n\t\tCLIFlag: cli.StringFlag{\n\t\t\tName:   \"cache-redis-password\",\n\t\t\tUsage:  \"Redis requirepass server configuration\",\n\t\t\tEnvVar: \"CACHE_REDIS_PASSWORD\",\n\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/config/vars.go"
                },
                "region": {
                  "startLine": 276,
                  "startColumn": 14,
                  "endLine": 276,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t\t\tEnvVar: \"CACHE_REDIS_ADDR\",\n\t\t},\n\t},\n\t\"cache.redis.password\": {\n\t\tType:    stringType,\n\t\tDefault: \"\",\n\t\tCLIFlag: cli.StringFlag{\n",
                    "rendered": {
                      "text": "\t\t\tEnvVar: \"CACHE_REDIS_ADDR\",\n\t\t},\n\t},\n\t\"cache.redis.password\": {\n\t\tType:    stringType,\n\t\tDefault: \"\",\n\t\tCLIFlag: cli.StringFlag{\n",
                      "markdown": "`\t\t\tEnvVar: \"CACHE_REDIS_ADDR\",\n\t\t},\n\t},\n\t\"cache.redis.password\": {\n\t\tType:    stringType,\n\t\tDefault: \"\",\n\t\tCLIFlag: cli.StringFlag{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/config/vars.go"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 12,
                  "endLine": 218,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\tDefault: \"\",\n\t\tCLIFlag: cli.StringFlag{\n\t\t\tName:   \"basic-auth-pass\",\n\t\t\tUsage:  \"password for basic http authentication\",\n\t\t\tEnvVar: \"BASIC_AUTH_PASS\",\n\t\t},\n\t},\n",
                    "rendered": {
                      "text": "\t\tDefault: \"\",\n\t\tCLIFlag: cli.StringFlag{\n\t\t\tName:   \"basic-auth-pass\",\n\t\t\tUsage:  \"password for basic http authentication\",\n\t\t\tEnvVar: \"BASIC_AUTH_PASS\",\n\t\t},\n\t},\n",
                      "markdown": "`\t\tDefault: \"\",\n\t\tCLIFlag: cli.StringFlag{\n\t\t\tName:   \"basic-auth-pass\",\n\t\t\tUsage:  \"password for basic http authentication\",\n\t\t\tEnvVar: \"BASIC_AUTH_PASS\",\n\t\t},\n\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/config/vars.go"
                },
                "region": {
                  "startLine": 643,
                  "startColumn": 3,
                  "endLine": 643,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\t\tCLIFlag: cli.StringFlag{\n\t\t\tName:   \"prov-post-form-field-name\",\n\t\t\tUsage:  \"form field which will be queried for the provenance file content\",\n\t\t\tEnvVar: \"PROV_POST_FORM_FIELD_NAME\",\n\t\t},\n\t},\n\t\"maxstorageobjects\": {\n",
                    "rendered": {
                      "text": "\t\tCLIFlag: cli.StringFlag{\n\t\t\tName:   \"prov-post-form-field-name\",\n\t\t\tUsage:  \"form field which will be queried for the provenance file content\",\n\t\t\tEnvVar: \"PROV_POST_FORM_FIELD_NAME\",\n\t\t},\n\t},\n\t\"maxstorageobjects\": {\n",
                      "markdown": "`\t\tCLIFlag: cli.StringFlag{\n\t\t\tName:   \"prov-post-form-field-name\",\n\t\t\tUsage:  \"form field which will be queried for the provenance file content\",\n\t\t\tEnvVar: \"PROV_POST_FORM_FIELD_NAME\",\n\t\t},\n\t},\n\t\"maxstorageobjects\": {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/config/vars.go"
                },
                "region": {
                  "startLine": 634,
                  "startColumn": 3,
                  "endLine": 634,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t\tCLIFlag: cli.StringFlag{\n\t\t\tName:   \"chart-post-form-field-name\",\n\t\t\tUsage:  \"form field which will be queried for the chart file content\",\n\t\t\tEnvVar: \"CHART_POST_FORM_FIELD_NAME\",\n\t\t},\n\t},\n\t\"provpostformfieldname\": {\n",
                    "rendered": {
                      "text": "\t\tCLIFlag: cli.StringFlag{\n\t\t\tName:   \"chart-post-form-field-name\",\n\t\t\tUsage:  \"form field which will be queried for the chart file content\",\n\t\t\tEnvVar: \"CHART_POST_FORM_FIELD_NAME\",\n\t\t},\n\t},\n\t\"provpostformfieldname\": {\n",
                      "markdown": "`\t\tCLIFlag: cli.StringFlag{\n\t\t\tName:   \"chart-post-form-field-name\",\n\t\t\tUsage:  \"form field which will be queried for the chart file content\",\n\t\t\tEnvVar: \"CHART_POST_FORM_FIELD_NAME\",\n\t\t},\n\t},\n\t\"provpostformfieldname\": {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/config/vars.go"
                },
                "region": {
                  "startLine": 625,
                  "startColumn": 3,
                  "endLine": 625,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\t\tCLIFlag: cli.StringFlag{\n\t\t\tName:   \"storage-tencent-endpoint\",\n\t\t\tUsage:  \"COS endpoint\",\n\t\t\tEnvVar: \"STORAGE_TENCENT_ENDPOINT\",\n\t\t},\n\t},\n\t\"chartpostformfieldname\": {\n",
                    "rendered": {
                      "text": "\t\tCLIFlag: cli.StringFlag{\n\t\t\tName:   \"storage-tencent-endpoint\",\n\t\t\tUsage:  \"COS endpoint\",\n\t\t\tEnvVar: \"STORAGE_TENCENT_ENDPOINT\",\n\t\t},\n\t},\n\t\"chartpostformfieldname\": {\n",
                      "markdown": "`\t\tCLIFlag: cli.StringFlag{\n\t\t\tName:   \"storage-tencent-endpoint\",\n\t\t\tUsage:  \"COS endpoint\",\n\t\t\tEnvVar: \"STORAGE_TENCENT_ENDPOINT\",\n\t\t},\n\t},\n\t\"chartpostformfieldname\": {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/config/vars.go"
                },
                "region": {
                  "startLine": 616,
                  "startColumn": 3,
                  "endLine": 616,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\t\tCLIFlag: cli.StringFlag{\n\t\t\tName:   \"storage-tencent-prefix\",\n\t\t\tUsage:  \"prefix to store charts for --storage-tencent-cloud-bucket\",\n\t\t\tEnvVar: \"STORAGE_TENCENT_PREFIX\",\n\t\t},\n\t},\n\t\"storage.tencent.endpoint\": {\n",
                    "rendered": {
                      "text": "\t\tCLIFlag: cli.StringFlag{\n\t\t\tName:   \"storage-tencent-prefix\",\n\t\t\tUsage:  \"prefix to store charts for --storage-tencent-cloud-bucket\",\n\t\t\tEnvVar: \"STORAGE_TENCENT_PREFIX\",\n\t\t},\n\t},\n\t\"storage.tencent.endpoint\": {\n",
                      "markdown": "`\t\tCLIFlag: cli.StringFlag{\n\t\t\tName:   \"storage-tencent-prefix\",\n\t\t\tUsage:  \"prefix to store charts for --storage-tencent-cloud-bucket\",\n\t\t\tEnvVar: \"STORAGE_TENCENT_PREFIX\",\n\t\t},\n\t},\n\t\"storage.tencent.endpoint\": {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/config/vars.go"
                },
                "region": {
                  "startLine": 607,
                  "startColumn": 3,
                  "endLine": 607,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\t\tCLIFlag: cli.StringFlag{\n\t\t\tName:   \"storage-tencent-bucket\",\n\t\t\tUsage:  \"COS bucket to store charts for Tencent Cloud storage backend\",\n\t\t\tEnvVar: \"STORAGE_TENCENT_BUCKET\",\n\t\t},\n\t},\n\t\"storage.tencent.prefix\": {\n",
                    "rendered": {
                      "text": "\t\tCLIFlag: cli.StringFlag{\n\t\t\tName:   \"storage-tencent-bucket\",\n\t\t\tUsage:  \"COS bucket to store charts for Tencent Cloud storage backend\",\n\t\t\tEnvVar: \"STORAGE_TENCENT_BUCKET\",\n\t\t},\n\t},\n\t\"storage.tencent.prefix\": {\n",
                      "markdown": "`\t\tCLIFlag: cli.StringFlag{\n\t\t\tName:   \"storage-tencent-bucket\",\n\t\t\tUsage:  \"COS bucket to store charts for Tencent Cloud storage backend\",\n\t\t\tEnvVar: \"STORAGE_TENCENT_BUCKET\",\n\t\t},\n\t},\n\t\"storage.tencent.prefix\": {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/config/vars.go"
                },
                "region": {
                  "startLine": 310,
                  "startColumn": 3,
                  "endLine": 310,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\t\tCLIFlag: cli.DurationFlag{\n\t\t\tName:   \"storage-timestamp-tolerance\",\n\t\t\tUsage:  \"timestamp drift tolerated between cached and generated index before invalidation\",\n\t\t\tEnvVar: \"STORAGE_TIMESTAMP_TOLERANCE\",\n\t\t},\n\t},\n\t\"storage.local.rootdir\": {\n",
                    "rendered": {
                      "text": "\t\tCLIFlag: cli.DurationFlag{\n\t\t\tName:   \"storage-timestamp-tolerance\",\n\t\t\tUsage:  \"timestamp drift tolerated between cached and generated index before invalidation\",\n\t\t\tEnvVar: \"STORAGE_TIMESTAMP_TOLERANCE\",\n\t\t},\n\t},\n\t\"storage.local.rootdir\": {\n",
                      "markdown": "`\t\tCLIFlag: cli.DurationFlag{\n\t\t\tName:   \"storage-timestamp-tolerance\",\n\t\t\tUsage:  \"timestamp drift tolerated between cached and generated index before invalidation\",\n\t\t\tEnvVar: \"STORAGE_TIMESTAMP_TOLERANCE\",\n\t\t},\n\t},\n\t\"storage.local.rootdir\": {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/config/vars.go"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 3,
                  "endLine": 228,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\t\tCLIFlag: cli.BoolFlag{\n\t\t\tName:   \"auth-anonymous-get\",\n\t\t\tUsage:  \"allow anonymous GET operations when auth is used\",\n\t\t\tEnvVar: \"AUTH_ANONYMOUS_GET\",\n\t\t},\n\t},\n\t\"tls.cert\": {\n",
                    "rendered": {
                      "text": "\t\tCLIFlag: cli.BoolFlag{\n\t\t\tName:   \"auth-anonymous-get\",\n\t\t\tUsage:  \"allow anonymous GET operations when auth is used\",\n\t\t\tEnvVar: \"AUTH_ANONYMOUS_GET\",\n\t\t},\n\t},\n\t\"tls.cert\": {\n",
                      "markdown": "`\t\tCLIFlag: cli.BoolFlag{\n\t\t\tName:   \"auth-anonymous-get\",\n\t\t\tUsage:  \"allow anonymous GET operations when auth is used\",\n\t\t\tEnvVar: \"AUTH_ANONYMOUS_GET\",\n\t\t},\n\t},\n\t\"tls.cert\": {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/config/vars.go"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 3,
                  "endLine": 92,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t\tCLIFlag: cli.BoolFlag{\n\t\t\tName:   \"log-latency-integer\",\n\t\t\tUsage:  \"log latency as an integer (nanoseconds) instead of a string\",\n\t\t\tEnvVar: \"LOG_LATENCY_INTEGER\",\n\t\t},\n\t},\n\t\"disablemetrics\": {\n",
                    "rendered": {
                      "text": "\t\tCLIFlag: cli.BoolFlag{\n\t\t\tName:   \"log-latency-integer\",\n\t\t\tUsage:  \"log latency as an integer (nanoseconds) instead of a string\",\n\t\t\tEnvVar: \"LOG_LATENCY_INTEGER\",\n\t\t},\n\t},\n\t\"disablemetrics\": {\n",
                      "markdown": "`\t\tCLIFlag: cli.BoolFlag{\n\t\t\tName:   \"log-latency-integer\",\n\t\t\tUsage:  \"log latency as an integer (nanoseconds) instead of a string\",\n\t\t\tEnvVar: \"LOG_LATENCY_INTEGER\",\n\t\t},\n\t},\n\t\"disablemetrics\": {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/config/vars.go"
                },
                "region": {
                  "startLine": 733,
                  "startColumn": 23,
                  "endLine": 733,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t\tDefault: \"\",\n\t\tCLIFlag: cli.StringFlag{\n\t\t\tName:   \"auth-actions-search-path\",\n\t\t\tUsage:  \"JMESPath to find allowed actions in a jwt token\",\n\t\t\tEnvVar: \"AUTH_ACTIONS_SEARCH_PATH\",\n\t\t},\n\t},\n",
                    "rendered": {
                      "text": "\t\tDefault: \"\",\n\t\tCLIFlag: cli.StringFlag{\n\t\t\tName:   \"auth-actions-search-path\",\n\t\t\tUsage:  \"JMESPath to find allowed actions in a jwt token\",\n\t\t\tEnvVar: \"AUTH_ACTIONS_SEARCH_PATH\",\n\t\t},\n\t},\n",
                      "markdown": "`\t\tDefault: \"\",\n\t\tCLIFlag: cli.StringFlag{\n\t\t\tName:   \"auth-actions-search-path\",\n\t\t\tUsage:  \"JMESPath to find allowed actions in a jwt token\",\n\t\t\tEnvVar: \"AUTH_ACTIONS_SEARCH_PATH\",\n\t\t},\n\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/config/vars.go"
                },
                "region": {
                  "startLine": 715,
                  "startColumn": 32,
                  "endLine": 715,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\t\tDefault: \"\",\n\t\tCLIFlag: cli.StringFlag{\n\t\t\tName:   \"auth-service\",\n\t\t\tUsage:  \"authorization server service name\",\n\t\t\tEnvVar: \"AUTH_SERVICE\",\n\t\t},\n\t},\n",
                    "rendered": {
                      "text": "\t\tDefault: \"\",\n\t\tCLIFlag: cli.StringFlag{\n\t\t\tName:   \"auth-service\",\n\t\t\tUsage:  \"authorization server service name\",\n\t\t\tEnvVar: \"AUTH_SERVICE\",\n\t\t},\n\t},\n",
                      "markdown": "`\t\tDefault: \"\",\n\t\tCLIFlag: cli.StringFlag{\n\t\t\tName:   \"auth-service\",\n\t\t\tUsage:  \"authorization server service name\",\n\t\t\tEnvVar: \"AUTH_SERVICE\",\n\t\t},\n\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/config/vars.go"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 28,
                  "endLine": 272,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\t\tDefault: \"\",\n\t\tCLIFlag: cli.StringFlag{\n\t\t\tName:   \"cache-redis-addr\",\n\t\t\tUsage:  \"address of Redis service (host:port)\",\n\t\t\tEnvVar: \"CACHE_REDIS_ADDR\",\n\t\t},\n\t},\n",
                    "rendered": {
                      "text": "\t\tDefault: \"\",\n\t\tCLIFlag: cli.StringFlag{\n\t\t\tName:   \"cache-redis-addr\",\n\t\t\tUsage:  \"address of Redis service (host:port)\",\n\t\t\tEnvVar: \"CACHE_REDIS_ADDR\",\n\t\t},\n\t},\n",
                      "markdown": "`\t\tDefault: \"\",\n\t\tCLIFlag: cli.StringFlag{\n\t\t\tName:   \"cache-redis-addr\",\n\t\t\tUsage:  \"address of Redis service (host:port)\",\n\t\t\tEnvVar: \"CACHE_REDIS_ADDR\",\n\t\t},\n\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/config/vars.go"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 18,
                  "endLine": 191,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\t\tDefault: 30,\n\t\tCLIFlag: cli.IntFlag{\n\t\t\tName:   \"write-timeout\",\n\t\t\tUsage:  \"socket timeout in seconds\",\n\t\t\tEnvVar: \"WRITE_TIMEOUT\",\n\t\t},\n\t},\n",
                    "rendered": {
                      "text": "\t\tDefault: 30,\n\t\tCLIFlag: cli.IntFlag{\n\t\t\tName:   \"write-timeout\",\n\t\t\tUsage:  \"socket timeout in seconds\",\n\t\t\tEnvVar: \"WRITE_TIMEOUT\",\n\t\t},\n\t},\n",
                      "markdown": "`\t\tDefault: 30,\n\t\tCLIFlag: cli.IntFlag{\n\t\t\tName:   \"write-timeout\",\n\t\t\tUsage:  \"socket timeout in seconds\",\n\t\t\tEnvVar: \"WRITE_TIMEOUT\",\n\t\t},\n\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/config/vars.go"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 18,
                  "endLine": 182,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\t\tDefault: 30,\n\t\tCLIFlag: cli.IntFlag{\n\t\t\tName:   \"read-timeout\",\n\t\t\tUsage:  \"socket timeout in seconds\",\n\t\t\tEnvVar: \"READ_TIMEOUT\",\n\t\t},\n\t},\n",
                    "rendered": {
                      "text": "\t\tDefault: 30,\n\t\tCLIFlag: cli.IntFlag{\n\t\t\tName:   \"read-timeout\",\n\t\t\tUsage:  \"socket timeout in seconds\",\n\t\t\tEnvVar: \"READ_TIMEOUT\",\n\t\t},\n\t},\n",
                      "markdown": "`\t\tDefault: 30,\n\t\tCLIFlag: cli.IntFlag{\n\t\t\tName:   \"read-timeout\",\n\t\t\tUsage:  \"socket timeout in seconds\",\n\t\t\tEnvVar: \"READ_TIMEOUT\",\n\t\t},\n\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/server/multitenant/handlers_test.go"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 43,
                  "endLine": 126,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\tsuite.Fail(\"could not read testdata/default/index.html\")\n\t}\n\tsuite.Equal(200, recorder.Result().StatusCode)\n\tsuite.Equal(\"text/html\", recorder.Header().Get(\"Content-Type\"))\n\tsuite.Equal(string(data), recorder.Body.String())\n}\n\n",
                    "rendered": {
                      "text": "\t\tsuite.Fail(\"could not read testdata/default/index.html\")\n\t}\n\tsuite.Equal(200, recorder.Result().StatusCode)\n\tsuite.Equal(\"text/html\", recorder.Header().Get(\"Content-Type\"))\n\tsuite.Equal(string(data), recorder.Body.String())\n}\n\n",
                      "markdown": "`\t\tsuite.Fail(\"could not read testdata/default/index.html\")\n\t}\n\tsuite.Equal(200, recorder.Result().StatusCode)\n\tsuite.Equal(\"text/html\", recorder.Header().Get(\"Content-Type\"))\n\tsuite.Equal(string(data), recorder.Body.String())\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/server/multitenant/handlers_test.go"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 43,
                  "endLine": 109,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\tsuite.Fail(\"could not read testdata/default/index.html\")\n\t}\n\tsuite.Equal(200, recorder.Result().StatusCode)\n\tsuite.Equal(\"text/html\", recorder.Header().Get(\"Content-Type\"))\n\tsuite.Equal(string(data), recorder.Body.String())\n}\n\n",
                    "rendered": {
                      "text": "\t\tsuite.Fail(\"could not read testdata/default/index.html\")\n\t}\n\tsuite.Equal(200, recorder.Result().StatusCode)\n\tsuite.Equal(\"text/html\", recorder.Header().Get(\"Content-Type\"))\n\tsuite.Equal(string(data), recorder.Body.String())\n}\n\n",
                      "markdown": "`\t\tsuite.Fail(\"could not read testdata/default/index.html\")\n\t}\n\tsuite.Equal(200, recorder.Result().StatusCode)\n\tsuite.Equal(\"text/html\", recorder.Header().Get(\"Content-Type\"))\n\tsuite.Equal(string(data), recorder.Body.String())\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/server/multitenant/handlers_test.go"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 58,
                  "endLine": 94,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\t\tsuite.Fail(\"could not read testdata/template/index.html\")\n\t}\n\tsuite.Equal(200, recorder.Result().StatusCode)\n\tsuite.Equal(\"text/html; charset=utf-8\", recorder.Header().Get(\"Content-Type\"))\n\tsuite.Equal(string(data), recorder.Body.String())\n}\n\n",
                    "rendered": {
                      "text": "\t\tsuite.Fail(\"could not read testdata/template/index.html\")\n\t}\n\tsuite.Equal(200, recorder.Result().StatusCode)\n\tsuite.Equal(\"text/html; charset=utf-8\", recorder.Header().Get(\"Content-Type\"))\n\tsuite.Equal(string(data), recorder.Body.String())\n}\n\n",
                      "markdown": "`\t\tsuite.Fail(\"could not read testdata/template/index.html\")\n\t}\n\tsuite.Equal(200, recorder.Result().StatusCode)\n\tsuite.Equal(\"text/html; charset=utf-8\", recorder.Header().Get(\"Content-Type\"))\n\tsuite.Equal(string(data), recorder.Body.String())\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/server/multitenant/handlers_test.go"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 34,
                  "endLine": 76,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\tsuite.ServerDepth0 = suite.getServer(0)\n\tsuite.ServerDepth0.getStaticFilesHandler(testContext)\n\tsuite.Equal(200, recorder.Result().StatusCode)\n\tsuite.Equal(\"\", recorder.Header().Get(\"Content-Type\"))\n}\n\nfunc (suite *HandlerTestSuite) TestCustomWelcomePage() {\n",
                    "rendered": {
                      "text": "\tsuite.ServerDepth0 = suite.getServer(0)\n\tsuite.ServerDepth0.getStaticFilesHandler(testContext)\n\tsuite.Equal(200, recorder.Result().StatusCode)\n\tsuite.Equal(\"\", recorder.Header().Get(\"Content-Type\"))\n}\n\nfunc (suite *HandlerTestSuite) TestCustomWelcomePage() {\n",
                      "markdown": "`\tsuite.ServerDepth0 = suite.getServer(0)\n\tsuite.ServerDepth0.getStaticFilesHandler(testContext)\n\tsuite.Equal(200, recorder.Result().StatusCode)\n\tsuite.Equal(\"\", recorder.Header().Get(\"Content-Type\"))\n}\n\nfunc (suite *HandlerTestSuite) TestCustomWelcomePage() {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/pkg/chartmuseum/server/multitenant/handlers_test.go"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 57,
                  "endLine": 65,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\t\tsuite.Fail(\"could not read testdata/template/static/main.css\")\n\t}\n\tsuite.Equal(200, recorder.Result().StatusCode)\n\tsuite.Equal(\"text/css; charset=utf-8\", recorder.Header().Get(\"Content-Type\"))\n\tsuite.Equal(string(data), recorder.Body.String())\n}\n\n",
                    "rendered": {
                      "text": "\t\tsuite.Fail(\"could not read testdata/template/static/main.css\")\n\t}\n\tsuite.Equal(200, recorder.Result().StatusCode)\n\tsuite.Equal(\"text/css; charset=utf-8\", recorder.Header().Get(\"Content-Type\"))\n\tsuite.Equal(string(data), recorder.Body.String())\n}\n\n",
                      "markdown": "`\t\tsuite.Fail(\"could not read testdata/template/static/main.css\")\n\t}\n\tsuite.Equal(200, recorder.Result().StatusCode)\n\tsuite.Equal(\"text/css; charset=utf-8\", recorder.Header().Get(\"Content-Type\"))\n\tsuite.Equal(string(data), recorder.Body.String())\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.github/workflows/build.yml"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 10,
                  "endLine": 66,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      - name: Docker Buildx (build and push)\n        run: |\n          docker buildx build --no-cache --pull --output \"type=image,push=true\" ${{ steps.prepare.outputs.buildx_args }}\n",
                    "rendered": {
                      "text": "        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      - name: Docker Buildx (build and push)\n        run: |\n          docker buildx build --no-cache --pull --output \"type=image,push=true\" ${{ steps.prepare.outputs.buildx_args }}\n",
                      "markdown": "`        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      - name: Docker Buildx (build and push)\n        run: |\n          docker buildx build --no-cache --pull --output \"type=image,push=true\" ${{ steps.prepare.outputs.buildx_args }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.github/workflows/build.yml"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 37,
                  "endLine": 31,
                  "endColumn": 58,
                  "snippet": {
                    "text": "      - name: build binaries\n        run: make build-cross\n      - name: run acceptance tests\n        run: sudo pip install virtualenv && make acceptance\n      - name: Prepare\n        id: prepare\n        run: |\n",
                    "rendered": {
                      "text": "      - name: build binaries\n        run: make build-cross\n      - name: run acceptance tests\n        run: sudo pip install virtualenv && make acceptance\n      - name: Prepare\n        id: prepare\n        run: |\n",
                      "markdown": "`      - name: build binaries\n        run: make build-cross\n      - name: run acceptance tests\n        run: sudo pip install virtualenv && make acceptance\n      - name: Prepare\n        id: prepare\n        run: |\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.github/workflows/build.yml"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 9,
                  "endLine": 72,
                  "endColumn": 17,
                  "snippet": {
                    "text": "          docker buildx build --no-cache --pull --output \"type=image,push=true\" ${{ steps.prepare.outputs.buildx_args }}\n      - name: Docker Check Manifest\n        run: |\n          docker run --rm mplatform/mquery ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}\n      - name: Install Kubernetes SBOM Tool\n        uses: puerco/bom-installer@aa0837e37b6965b5fc50adfad0683ec3c0a2c2c4\n      - name: Install sigstore cosign\n",
                    "rendered": {
                      "text": "          docker buildx build --no-cache --pull --output \"type=image,push=true\" ${{ steps.prepare.outputs.buildx_args }}\n      - name: Docker Check Manifest\n        run: |\n          docker run --rm mplatform/mquery ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}\n      - name: Install Kubernetes SBOM Tool\n        uses: puerco/bom-installer@aa0837e37b6965b5fc50adfad0683ec3c0a2c2c4\n      - name: Install sigstore cosign\n",
                      "markdown": "`          docker buildx build --no-cache --pull --output \"type=image,push=true\" ${{ steps.prepare.outputs.buildx_args }}\n      - name: Docker Check Manifest\n        run: |\n          docker run --rm mplatform/mquery ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}\n      - name: Install Kubernetes SBOM Tool\n        uses: puerco/bom-installer@aa0837e37b6965b5fc50adfad0683ec3c0a2c2c4\n      - name: Install sigstore cosign\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.github/workflows/build.yml"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 13,
                  "endLine": 70,
                  "endColumn": 21,
                  "snippet": {
                    "text": "      - name: Docker Buildx (build and push)\n        run: |\n          docker buildx build --no-cache --pull --output \"type=image,push=true\" ${{ steps.prepare.outputs.buildx_args }}\n      - name: Docker Check Manifest\n        run: |\n          docker run --rm mplatform/mquery ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}\n      - name: Install Kubernetes SBOM Tool\n",
                    "rendered": {
                      "text": "      - name: Docker Buildx (build and push)\n        run: |\n          docker buildx build --no-cache --pull --output \"type=image,push=true\" ${{ steps.prepare.outputs.buildx_args }}\n      - name: Docker Check Manifest\n        run: |\n          docker run --rm mplatform/mquery ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}\n      - name: Install Kubernetes SBOM Tool\n",
                      "markdown": "`      - name: Docker Buildx (build and push)\n        run: |\n          docker buildx build --no-cache --pull --output \"type=image,push=true\" ${{ steps.prepare.outputs.buildx_args }}\n      - name: Docker Check Manifest\n        run: |\n          docker run --rm mplatform/mquery ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}\n      - name: Install Kubernetes SBOM Tool\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.github/workflows/build.yml"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 9,
                  "endLine": 69,
                  "endColumn": 17,
                  "snippet": {
                    "text": "          password: ${{ secrets.GITHUB_TOKEN }}\n      - name: Docker Buildx (build and push)\n        run: |\n          docker buildx build --no-cache --pull --output \"type=image,push=true\" ${{ steps.prepare.outputs.buildx_args }}\n      - name: Docker Check Manifest\n        run: |\n          docker run --rm mplatform/mquery ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}\n",
                    "rendered": {
                      "text": "          password: ${{ secrets.GITHUB_TOKEN }}\n      - name: Docker Buildx (build and push)\n        run: |\n          docker buildx build --no-cache --pull --output \"type=image,push=true\" ${{ steps.prepare.outputs.buildx_args }}\n      - name: Docker Check Manifest\n        run: |\n          docker run --rm mplatform/mquery ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}\n",
                      "markdown": "`          password: ${{ secrets.GITHUB_TOKEN }}\n      - name: Docker Buildx (build and push)\n        run: |\n          docker buildx build --no-cache --pull --output \"type=image,push=true\" ${{ steps.prepare.outputs.buildx_args }}\n      - name: Docker Check Manifest\n        run: |\n          docker run --rm mplatform/mquery ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.github/workflows/build.yml"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 13,
                  "endLine": 67,
                  "endColumn": 21,
                  "snippet": {
                    "text": "          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      - name: Docker Buildx (build and push)\n        run: |\n          docker buildx build --no-cache --pull --output \"type=image,push=true\" ${{ steps.prepare.outputs.buildx_args }}\n      - name: Docker Check Manifest\n",
                    "rendered": {
                      "text": "          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      - name: Docker Buildx (build and push)\n        run: |\n          docker buildx build --no-cache --pull --output \"type=image,push=true\" ${{ steps.prepare.outputs.buildx_args }}\n      - name: Docker Check Manifest\n",
                      "markdown": "`          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      - name: Docker Buildx (build and push)\n        run: |\n          docker buildx build --no-cache --pull --output \"type=image,push=true\" ${{ steps.prepare.outputs.buildx_args }}\n      - name: Docker Check Manifest\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.github/workflows/build.yml"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 13,
                  "endLine": 61,
                  "endColumn": 21,
                  "snippet": {
                    "text": "          version: v0.9.1\n      - name: Available platforms\n        run: echo ${{ steps.buildx.outputs.platforms }}\n      - name: Docker Login\n        uses: docker/login-action@v1\n        with:\n          registry: ghcr.io\n",
                    "rendered": {
                      "text": "          version: v0.9.1\n      - name: Available platforms\n        run: echo ${{ steps.buildx.outputs.platforms }}\n      - name: Docker Login\n        uses: docker/login-action@v1\n        with:\n          registry: ghcr.io\n",
                      "markdown": "`          version: v0.9.1\n      - name: Available platforms\n        run: echo ${{ steps.buildx.outputs.platforms }}\n      - name: Docker Login\n        uses: docker/login-action@v1\n        with:\n          registry: ghcr.io\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.github/workflows/build.yml"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 20,
                  "endLine": 54,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        uses: docker/setup-qemu-action@v1\n        with:\n          platforms: all\n      - name: Set up Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@v2\n        with:\n",
                    "rendered": {
                      "text": "        uses: docker/setup-qemu-action@v1\n        with:\n          platforms: all\n      - name: Set up Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@v2\n        with:\n",
                      "markdown": "`        uses: docker/setup-qemu-action@v1\n        with:\n          platforms: all\n      - name: Set up Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@v2\n        with:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/.github/workflows/build.yml"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 17,
                  "endLine": 31,
                  "endColumn": 22,
                  "snippet": {
                    "text": "      - name: build binaries\n        run: make build-cross\n      - name: run acceptance tests\n        run: sudo pip install virtualenv && make acceptance\n      - name: Prepare\n        id: prepare\n        run: |\n",
                    "rendered": {
                      "text": "      - name: build binaries\n        run: make build-cross\n      - name: run acceptance tests\n        run: sudo pip install virtualenv && make acceptance\n      - name: Prepare\n        id: prepare\n        run: |\n",
                      "markdown": "`      - name: build binaries\n        run: make build-cross\n      - name: run acceptance tests\n        run: sudo pip install virtualenv && make acceptance\n      - name: Prepare\n        id: prepare\n        run: |\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/acceptance.sh"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 2,
                  "endLine": 51,
                  "endColumn": 45,
                  "snippet": {
                    "text": "  virtualenv -p $(which python3) .venv/\n  .venv/bin/python .venv/bin/pip install $PY_REQUIRES\nfi\n.venv/bin/robot --outputdir=.robot/ acceptance_tests/\n",
                    "rendered": {
                      "text": "  virtualenv -p $(which python3) .venv/\n  .venv/bin/python .venv/bin/pip install $PY_REQUIRES\nfi\n.venv/bin/robot --outputdir=.robot/ acceptance_tests/\n",
                      "markdown": "`  virtualenv -p $(which python3) .venv/\n  .venv/bin/python .venv/bin/pip install $PY_REQUIRES\nfi\n.venv/bin/robot --outputdir=.robot/ acceptance_tests/\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/acceptance.sh"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 40,
                  "endLine": 22,
                  "endColumn": 45,
                  "snippet": {
                    "text": "set +x\nfor VAR in ${REQUIRED_TEST_STORAGE_ENV_VARS[@]}; do\n    if [ \"${!VAR}\" != \"\" ]; then\n        echo \"Detected one required test env var: $VAR\"\n    fi\ndone\nset -x\n",
                    "rendered": {
                      "text": "set +x\nfor VAR in ${REQUIRED_TEST_STORAGE_ENV_VARS[@]}; do\n    if [ \"${!VAR}\" != \"\" ]; then\n        echo \"Detected one required test env var: $VAR\"\n    fi\ndone\nset -x\n",
                      "markdown": "`set +x\nfor VAR in ${REQUIRED_TEST_STORAGE_ENV_VARS[@]}; do\n    if [ \"${!VAR}\" != \"\" ]; then\n        echo \"Detected one required test env var: $VAR\"\n    fi\ndone\nset -x\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/mirror-k8s-repos.sh"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 11,
                  "endLine": 18,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    pushd mirror/\n    for tgz in $tgzs; do\n        if [ ! -f \"${tgz##*/}\" ]; then\n            wget $tgz\n        fi\n    done\n    popd\n",
                    "rendered": {
                      "text": "    pushd mirror/\n    for tgz in $tgzs; do\n        if [ ! -f \"${tgz##*/}\" ]; then\n            wget $tgz\n        fi\n    done\n    popd\n",
                      "markdown": "`    pushd mirror/\n    for tgz in $tgzs; do\n        if [ ! -f \"${tgz##*/}\" ]; then\n            wget $tgz\n        fi\n    done\n    popd\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/mirror-k8s-repos.sh"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 3,
                  "endLine": 12,
                  "endColumn": 9,
                  "snippet": {
                    "text": "get_all_tgzs() {\n    local repo_url=\"$1\"\n    rm -f index.yaml\n    wget $repo_url/index.yaml\n    tgzs=\"$(ruby -ryaml -e \\\n        \"YAML.load_file('index.yaml')['entries'].each do |k,e|;for c in e;puts c['urls'][0];end;end\")\"\n    pushd mirror/\n",
                    "rendered": {
                      "text": "get_all_tgzs() {\n    local repo_url=\"$1\"\n    rm -f index.yaml\n    wget $repo_url/index.yaml\n    tgzs=\"$(ruby -ryaml -e \\\n        \"YAML.load_file('index.yaml')['entries'].each do |k,e|;for c in e;puts c['urls'][0];end;end\")\"\n    pushd mirror/\n",
                      "markdown": "`get_all_tgzs() {\n    local repo_url=\"$1\"\n    rm -f index.yaml\n    wget $repo_url/index.yaml\n    tgzs=\"$(ruby -ryaml -e \\\n        \"YAML.load_file('index.yaml')['entries'].each do |k,e|;for c in e;puts c['urls'][0];end;end\")\"\n    pushd mirror/\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/release-artifacts.sh"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 8,
                  "endLine": 29,
                  "snippet": {
                    "text": "echo \"deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ stretch main\" | sudo tee /etc/apt/sources.list.d/azure-cli.list\ncurl -L https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add\nsudo apt install apt-transport-https\nsudo apt update\nsudo apt install azure-cli\n\nif ! ${SKIP_BUILD}\nthen\n",
                    "rendered": {
                      "text": "echo \"deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ stretch main\" | sudo tee /etc/apt/sources.list.d/azure-cli.list\ncurl -L https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add\nsudo apt install apt-transport-https\nsudo apt update\nsudo apt install azure-cli\n\nif ! ${SKIP_BUILD}\nthen\n",
                      "markdown": "`echo \"deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ stretch main\" | sudo tee /etc/apt/sources.list.d/azure-cli.list\ncurl -L https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add\nsudo apt install apt-transport-https\nsudo apt update\nsudo apt install azure-cli\n\nif ! ${SKIP_BUILD}\nthen\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/release-artifacts.sh"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 38,
                  "endLine": 8,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/release-artifacts.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# Copyright The Helm Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# Copyright The Helm Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# Copyright The Helm Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/release-artifacts.sh"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 4,
                  "endLine": 29,
                  "endColumn": 9,
                  "snippet": {
                    "text": "curl -L https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add\nsudo apt install apt-transport-https\nsudo apt update\nsudo apt install azure-cli\n\nif ! ${SKIP_BUILD}\nthen\n",
                    "rendered": {
                      "text": "curl -L https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add\nsudo apt install apt-transport-https\nsudo apt update\nsudo apt install azure-cli\n\nif ! ${SKIP_BUILD}\nthen\n",
                      "markdown": "`curl -L https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add\nsudo apt install apt-transport-https\nsudo apt update\nsudo apt install azure-cli\n\nif ! ${SKIP_BUILD}\nthen\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/release-artifacts.sh"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 4,
                  "endLine": 28,
                  "endColumn": 9,
                  "snippet": {
                    "text": "echo \"deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ stretch main\" | sudo tee /etc/apt/sources.list.d/azure-cli.list\ncurl -L https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add\nsudo apt install apt-transport-https\nsudo apt update\nsudo apt install azure-cli\n\nif ! ${SKIP_BUILD}\n",
                    "rendered": {
                      "text": "echo \"deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ stretch main\" | sudo tee /etc/apt/sources.list.d/azure-cli.list\ncurl -L https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add\nsudo apt install apt-transport-https\nsudo apt update\nsudo apt install azure-cli\n\nif ! ${SKIP_BUILD}\n",
                      "markdown": "`echo \"deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ stretch main\" | sudo tee /etc/apt/sources.list.d/azure-cli.list\ncurl -L https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add\nsudo apt install apt-transport-https\nsudo apt update\nsudo apt install azure-cli\n\nif ! ${SKIP_BUILD}\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/release-artifacts.sh"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 4,
                  "endLine": 27,
                  "endColumn": 9,
                  "snippet": {
                    "text": "echo \"Installing Azure CLI\"\necho \"deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ stretch main\" | sudo tee /etc/apt/sources.list.d/azure-cli.list\ncurl -L https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add\nsudo apt install apt-transport-https\nsudo apt update\nsudo apt install azure-cli\n\n",
                    "rendered": {
                      "text": "echo \"Installing Azure CLI\"\necho \"deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ stretch main\" | sudo tee /etc/apt/sources.list.d/azure-cli.list\ncurl -L https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add\nsudo apt install apt-transport-https\nsudo apt update\nsudo apt install azure-cli\n\n",
                      "markdown": "`echo \"Installing Azure CLI\"\necho \"deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ stretch main\" | sudo tee /etc/apt/sources.list.d/azure-cli.list\ncurl -L https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add\nsudo apt install apt-transport-https\nsudo apt update\nsudo apt install azure-cli\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/release-artifacts.sh"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 134,
                  "endLine": 26,
                  "endColumn": 5,
                  "snippet": {
                    "text": "SKIP_BUILD=${SKIP_BUILD:-false}\n\necho \"Installing Azure CLI\"\necho \"deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ stretch main\" | sudo tee /etc/apt/sources.list.d/azure-cli.list\ncurl -L https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add\nsudo apt install apt-transport-https\nsudo apt update\nsudo apt install azure-cli\n",
                    "rendered": {
                      "text": "SKIP_BUILD=${SKIP_BUILD:-false}\n\necho \"Installing Azure CLI\"\necho \"deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ stretch main\" | sudo tee /etc/apt/sources.list.d/azure-cli.list\ncurl -L https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add\nsudo apt install apt-transport-https\nsudo apt update\nsudo apt install azure-cli\n",
                      "markdown": "`SKIP_BUILD=${SKIP_BUILD:-false}\n\necho \"Installing Azure CLI\"\necho \"deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ stretch main\" | sudo tee /etc/apt/sources.list.d/azure-cli.list\ncurl -L https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add\nsudo apt install apt-transport-https\nsudo apt update\nsudo apt install azure-cli\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/release-artifacts.sh"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 91,
                  "endLine": 25,
                  "endColumn": 96,
                  "snippet": {
                    "text": "SKIP_BUILD=${SKIP_BUILD:-false}\n\necho \"Installing Azure CLI\"\necho \"deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ stretch main\" | sudo tee /etc/apt/sources.list.d/azure-cli.list\ncurl -L https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add\nsudo apt install apt-transport-https\nsudo apt update\n",
                    "rendered": {
                      "text": "SKIP_BUILD=${SKIP_BUILD:-false}\n\necho \"Installing Azure CLI\"\necho \"deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ stretch main\" | sudo tee /etc/apt/sources.list.d/azure-cli.list\ncurl -L https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add\nsudo apt install apt-transport-https\nsudo apt update\n",
                      "markdown": "`SKIP_BUILD=${SKIP_BUILD:-false}\n\necho \"Installing Azure CLI\"\necho \"deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ stretch main\" | sudo tee /etc/apt/sources.list.d/azure-cli.list\ncurl -L https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add\nsudo apt install apt-transport-https\nsudo apt update\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/release-artifacts.sh"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 70,
                  "endLine": 21,
                  "endColumn": 78,
                  "snippet": {
                    "text": ": ${AZURE_STORAGE_CONNECTION_STRING:?\"AZURE_STORAGE_CONNECTION_STRING environment variable is not set\"}\n: ${AZURE_STORAGE_CONTAINER_NAME:?\"AZURE_STORAGE_CONTAINER_NAME environment variable is not set\"}\n: ${VERSION:?\"VERSION environment variable is not set\"}\n# SKIP_BUILD is used in CI since make build-cross is ran prior to this script in order for other steps to reuse the build artifacts\nSKIP_BUILD=${SKIP_BUILD:-false}\n\necho \"Installing Azure CLI\"\n",
                    "rendered": {
                      "text": ": ${AZURE_STORAGE_CONNECTION_STRING:?\"AZURE_STORAGE_CONNECTION_STRING environment variable is not set\"}\n: ${AZURE_STORAGE_CONTAINER_NAME:?\"AZURE_STORAGE_CONTAINER_NAME environment variable is not set\"}\n: ${VERSION:?\"VERSION environment variable is not set\"}\n# SKIP_BUILD is used in CI since make build-cross is ran prior to this script in order for other steps to reuse the build artifacts\nSKIP_BUILD=${SKIP_BUILD:-false}\n\necho \"Installing Azure CLI\"\n",
                      "markdown": "`: ${AZURE_STORAGE_CONNECTION_STRING:?\"AZURE_STORAGE_CONNECTION_STRING environment variable is not set\"}\n: ${AZURE_STORAGE_CONTAINER_NAME:?\"AZURE_STORAGE_CONTAINER_NAME environment variable is not set\"}\n: ${VERSION:?\"VERSION environment variable is not set\"}\n# SKIP_BUILD is used in CI since make build-cross is ran prior to this script in order for other steps to reuse the build artifacts\nSKIP_BUILD=${SKIP_BUILD:-false}\n\necho \"Installing Azure CLI\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/release-artifacts.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# Copyright The Helm Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# Copyright The Helm Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# Copyright The Helm Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/setup-test-environment.sh"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 58,
                  "endLine": 39,
                  "endColumn": 65,
                  "snippet": {
                    "text": "        popd\n\n        # remove any repos that come out-of-the-box (i.e. \"stable\")\n        helm repo list | sed -n '1!p' | awk '{print $1}' | xargs helm repo remove || true\n    fi\n}\n\n",
                    "rendered": {
                      "text": "        popd\n\n        # remove any repos that come out-of-the-box (i.e. \"stable\")\n        helm repo list | sed -n '1!p' | awk '{print $1}' | xargs helm repo remove || true\n    fi\n}\n\n",
                      "markdown": "`        popd\n\n        # remove any repos that come out-of-the-box (i.e. \"stable\")\n        helm repo list | sed -n '1!p' | awk '{print $1}' | xargs helm repo remove || true\n    fi\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/setup-test-environment.sh"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 39,
                  "endLine": 39,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        popd\n\n        # remove any repos that come out-of-the-box (i.e. \"stable\")\n        helm repo list | sed -n '1!p' | awk '{print $1}' | xargs helm repo remove || true\n    fi\n}\n\n",
                    "rendered": {
                      "text": "        popd\n\n        # remove any repos that come out-of-the-box (i.e. \"stable\")\n        helm repo list | sed -n '1!p' | awk '{print $1}' | xargs helm repo remove || true\n    fi\n}\n\n",
                      "markdown": "`        popd\n\n        # remove any repos that come out-of-the-box (i.e. \"stable\")\n        helm repo list | sed -n '1!p' | awk '{print $1}' | xargs helm repo remove || true\n    fi\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/setup-test-environment.sh"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 24,
                  "endLine": 39,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        popd\n\n        # remove any repos that come out-of-the-box (i.e. \"stable\")\n        helm repo list | sed -n '1!p' | awk '{print $1}' | xargs helm repo remove || true\n    fi\n}\n\n",
                    "rendered": {
                      "text": "        popd\n\n        # remove any repos that come out-of-the-box (i.e. \"stable\")\n        helm repo list | sed -n '1!p' | awk '{print $1}' | xargs helm repo remove || true\n    fi\n}\n\n",
                      "markdown": "`        popd\n\n        # remove any repos that come out-of-the-box (i.e. \"stable\")\n        helm repo list | sed -n '1!p' | awk '{print $1}' | xargs helm repo remove || true\n    fi\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/setup-test-environment.sh"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 7,
                  "endLine": 35,
                  "endColumn": 14,
                  "snippet": {
                    "text": "        UNCOMPRESSED_DIR=\"$(find . -mindepth 1 -maxdepth 1 -type d)\"\n        mv $UNCOMPRESSED_DIR/helm .\n        rm -rf $UNCOMPRESSED_DIR\n        chmod +x ./helm\n        popd\n\n        # remove any repos that come out-of-the-box (i.e. \"stable\")\n",
                    "rendered": {
                      "text": "        UNCOMPRESSED_DIR=\"$(find . -mindepth 1 -maxdepth 1 -type d)\"\n        mv $UNCOMPRESSED_DIR/helm .\n        rm -rf $UNCOMPRESSED_DIR\n        chmod +x ./helm\n        popd\n\n        # remove any repos that come out-of-the-box (i.e. \"stable\")\n",
                      "markdown": "`        UNCOMPRESSED_DIR=\"$(find . -mindepth 1 -maxdepth 1 -type d)\"\n        mv $UNCOMPRESSED_DIR/helm .\n        rm -rf $UNCOMPRESSED_DIR\n        chmod +x ./helm\n        popd\n\n        # remove any repos that come out-of-the-box (i.e. \"stable\")\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/setup-test-environment.sh"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 7,
                  "endLine": 33,
                  "endColumn": 11,
                  "snippet": {
                    "text": "        rm -f $TARBALL\n        pushd testbin/\n        UNCOMPRESSED_DIR=\"$(find . -mindepth 1 -maxdepth 1 -type d)\"\n        mv $UNCOMPRESSED_DIR/helm .\n        rm -rf $UNCOMPRESSED_DIR\n        chmod +x ./helm\n        popd\n",
                    "rendered": {
                      "text": "        rm -f $TARBALL\n        pushd testbin/\n        UNCOMPRESSED_DIR=\"$(find . -mindepth 1 -maxdepth 1 -type d)\"\n        mv $UNCOMPRESSED_DIR/helm .\n        rm -rf $UNCOMPRESSED_DIR\n        chmod +x ./helm\n        popd\n",
                      "markdown": "`        rm -f $TARBALL\n        pushd testbin/\n        UNCOMPRESSED_DIR=\"$(find . -mindepth 1 -maxdepth 1 -type d)\"\n        mv $UNCOMPRESSED_DIR/helm .\n        rm -rf $UNCOMPRESSED_DIR\n        chmod +x ./helm\n        popd\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/setup-test-environment.sh"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 7,
                  "endLine": 29,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        TARBALL=\"helm-v${HELM_VERSION}-${PLATFORM}-${ARCH}.tar.gz\"\n        wget \"https://get.helm.sh/${TARBALL}\" || \\\n          curl -O \"https://get.helm.sh/${TARBALL}\"\n        tar -C testbin/ -xzf $TARBALL\n        rm -f $TARBALL\n        pushd testbin/\n        UNCOMPRESSED_DIR=\"$(find . -mindepth 1 -maxdepth 1 -type d)\"\n",
                    "rendered": {
                      "text": "        TARBALL=\"helm-v${HELM_VERSION}-${PLATFORM}-${ARCH}.tar.gz\"\n        wget \"https://get.helm.sh/${TARBALL}\" || \\\n          curl -O \"https://get.helm.sh/${TARBALL}\"\n        tar -C testbin/ -xzf $TARBALL\n        rm -f $TARBALL\n        pushd testbin/\n        UNCOMPRESSED_DIR=\"$(find . -mindepth 1 -maxdepth 1 -type d)\"\n",
                      "markdown": "`        TARBALL=\"helm-v${HELM_VERSION}-${PLATFORM}-${ARCH}.tar.gz\"\n        wget \"https://get.helm.sh/${TARBALL}\" || \\\n          curl -O \"https://get.helm.sh/${TARBALL}\"\n        tar -C testbin/ -xzf $TARBALL\n        rm -f $TARBALL\n        pushd testbin/\n        UNCOMPRESSED_DIR=\"$(find . -mindepth 1 -maxdepth 1 -type d)\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/setup-test-environment.sh"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 9,
                  "endLine": 28,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        fi\n        TARBALL=\"helm-v${HELM_VERSION}-${PLATFORM}-${ARCH}.tar.gz\"\n        wget \"https://get.helm.sh/${TARBALL}\" || \\\n          curl -O \"https://get.helm.sh/${TARBALL}\"\n        tar -C testbin/ -xzf $TARBALL\n        rm -f $TARBALL\n        pushd testbin/\n",
                    "rendered": {
                      "text": "        fi\n        TARBALL=\"helm-v${HELM_VERSION}-${PLATFORM}-${ARCH}.tar.gz\"\n        wget \"https://get.helm.sh/${TARBALL}\" || \\\n          curl -O \"https://get.helm.sh/${TARBALL}\"\n        tar -C testbin/ -xzf $TARBALL\n        rm -f $TARBALL\n        pushd testbin/\n",
                      "markdown": "`        fi\n        TARBALL=\"helm-v${HELM_VERSION}-${PLATFORM}-${ARCH}.tar.gz\"\n        wget \"https://get.helm.sh/${TARBALL}\" || \\\n          curl -O \"https://get.helm.sh/${TARBALL}\"\n        tar -C testbin/ -xzf $TARBALL\n        rm -f $TARBALL\n        pushd testbin/\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/setup-test-environment.sh"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 7,
                  "endLine": 27,
                  "endColumn": 13,
                  "snippet": {
                    "text": "            ARCH=\"arm64\"\n        fi\n        TARBALL=\"helm-v${HELM_VERSION}-${PLATFORM}-${ARCH}.tar.gz\"\n        wget \"https://get.helm.sh/${TARBALL}\" || \\\n          curl -O \"https://get.helm.sh/${TARBALL}\"\n        tar -C testbin/ -xzf $TARBALL\n        rm -f $TARBALL\n",
                    "rendered": {
                      "text": "            ARCH=\"arm64\"\n        fi\n        TARBALL=\"helm-v${HELM_VERSION}-${PLATFORM}-${ARCH}.tar.gz\"\n        wget \"https://get.helm.sh/${TARBALL}\" || \\\n          curl -O \"https://get.helm.sh/${TARBALL}\"\n        tar -C testbin/ -xzf $TARBALL\n        rm -f $TARBALL\n",
                      "markdown": "`            ARCH=\"arm64\"\n        fi\n        TARBALL=\"helm-v${HELM_VERSION}-${PLATFORM}-${ARCH}.tar.gz\"\n        wget \"https://get.helm.sh/${TARBALL}\" || \\\n          curl -O \"https://get.helm.sh/${TARBALL}\"\n        tar -C testbin/ -xzf $TARBALL\n        rm -f $TARBALL\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/sbom.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\nset -euo pipefail\n: ${VERSION:?\"VERSION environment variable is not set\"}\n\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\nset -euo pipefail\n: ${VERSION:?\"VERSION environment variable is not set\"}\n\n",
                      "markdown": "`#!/usr/bin/env bash\n\nset -euo pipefail\n: ${VERSION:?\"VERSION environment variable is not set\"}\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/sbom.sh"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 32,
                  "endLine": 33,
                  "endColumn": 4,
                  "snippet": {
                    "text": "echo \"  - type: image\" >> .sbom.yaml\necho \"    source: ghcr.io/helm/chartmuseum:${VERSION}\" >> .sbom.yaml\n\necho \"Wrote configuration file:\"\ncat .sbom.yaml\n\nbom generate -c .sbom.yaml -o chartmuseum-${VERSION}.spdx\n\n",
                    "rendered": {
                      "text": "echo \"  - type: image\" >> .sbom.yaml\necho \"    source: ghcr.io/helm/chartmuseum:${VERSION}\" >> .sbom.yaml\n\necho \"Wrote configuration file:\"\ncat .sbom.yaml\n\nbom generate -c .sbom.yaml -o chartmuseum-${VERSION}.spdx\n\n",
                      "markdown": "`echo \"  - type: image\" >> .sbom.yaml\necho \"    source: ghcr.io/helm/chartmuseum:${VERSION}\" >> .sbom.yaml\n\necho \"Wrote configuration file:\"\ncat .sbom.yaml\n\nbom generate -c .sbom.yaml -o chartmuseum-${VERSION}.spdx\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/sbom.sh"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 35,
                  "endLine": 12,
                  "endColumn": 4,
                  "snippet": {
                    "text": "mkdir -p ./_dist/\npushd ./_dist/\n\n# Initialize the configuration file\ncat << EOF > .sbom.yaml\n---\nnamespace: https://get.helm.sh/chartmuseum-${VERSION}.spdx\nlicense: Apache-2.0\n",
                    "rendered": {
                      "text": "mkdir -p ./_dist/\npushd ./_dist/\n\n# Initialize the configuration file\ncat << EOF > .sbom.yaml\n---\nnamespace: https://get.helm.sh/chartmuseum-${VERSION}.spdx\nlicense: Apache-2.0\n",
                      "markdown": "`mkdir -p ./_dist/\npushd ./_dist/\n\n# Initialize the configuration file\ncat << EOF > .sbom.yaml\n---\nnamespace: https://get.helm.sh/chartmuseum-${VERSION}.spdx\nlicense: Apache-2.0\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/sbom.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\nset -euo pipefail\n: ${VERSION:?\"VERSION environment variable is not set\"}\n\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\nset -euo pipefail\n: ${VERSION:?\"VERSION environment variable is not set\"}\n\n",
                      "markdown": "`#!/usr/bin/env bash\n\nset -euo pipefail\n: ${VERSION:?\"VERSION environment variable is not set\"}\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/release-notes.sh"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 10,
                  "endLine": 71,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n- Join the discussion in [Kubernetes Slack](https://kubernetes.slack.com):\n  - `#chartmuseum` for discussing PRs, code, bugs, or just to hang out\n- Hang out at the Helm Public Developer Call: Thursday, 9:30 Pacific via [Zoom](https://zoom.us/j/696660622)\n\n## Notable Changes\n\n",
                    "rendered": {
                      "text": "\n- Join the discussion in [Kubernetes Slack](https://kubernetes.slack.com):\n  - `#chartmuseum` for discussing PRs, code, bugs, or just to hang out\n- Hang out at the Helm Public Developer Call: Thursday, 9:30 Pacific via [Zoom](https://zoom.us/j/696660622)\n\n## Notable Changes\n\n",
                      "markdown": "`\n- Join the discussion in [Kubernetes Slack](https://kubernetes.slack.com):\n  - `#chartmuseum` for discussing PRs, code, bugs, or just to hang out\n- Hang out at the Helm Public Developer Call: Thursday, 9:30 Pacific via [Zoom](https://zoom.us/j/696660622)\n\n## Notable Changes\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/release-notes.sh"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 8,
                  "endLine": 56,
                  "endColumn": 12,
                  "snippet": {
                    "text": "  exit 1\nfi\n\n## guess at MAJOR / MINOR / PATCH versions\nMAJOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f1 -d.)\nMINOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f2 -d.)\nPATCH=$(echo ${RELEASE} | sed 's/^v//' | cut -f3 -d.)\n",
                    "rendered": {
                      "text": "  exit 1\nfi\n\n## guess at MAJOR / MINOR / PATCH versions\nMAJOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f1 -d.)\nMINOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f2 -d.)\nPATCH=$(echo ${RELEASE} | sed 's/^v//' | cut -f3 -d.)\n",
                      "markdown": "`  exit 1\nfi\n\n## guess at MAJOR / MINOR / PATCH versions\nMAJOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f1 -d.)\nMINOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f2 -d.)\nPATCH=$(echo ${RELEASE} | sed 's/^v//' | cut -f3 -d.)\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/release-notes.sh"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 38,
                  "endLine": 8,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/release-notes.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# Copyright The Helm Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# Copyright The Helm Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# Copyright The Helm Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/release-notes.sh"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 405,
                  "endLine": 90,
                  "endColumn": 410,
                  "snippet": {
                    "text": "t.helm.sh/chartmuseum-${RELEASE}-windows-amd64.zip.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-windows-amd64.zip.sha256sum) / [checksum sig](https://get.helm.sh/chartmuseum-${RELEASE}-windows-amd64.zip.sha256sum.sig) / $(cat _dist/chartmuseum-${RELEASE}-windows-amd64.zip.sha256sum | awk '{print $1}'))\n\nYou can download the SBOM for this release in SPDX format [here](https://get.helm.sh/chartmuseum-${RELEASE}.spdx).\n\nYou can use a [script to install](https://raw.githubusercontent.com/helm/chartmuseum/main/scripts/get-chartmuseum) on any system with \\`bash\\`.\n\n## What's Next\n\n- ${MAJ",
                    "rendered": {
                      "text": "t.helm.sh/chartmuseum-${RELEASE}-windows-amd64.zip.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-windows-amd64.zip.sha256sum) / [checksum sig](https://get.helm.sh/chartmuseum-${RELEASE}-windows-amd64.zip.sha256sum.sig) / $(cat _dist/chartmuseum-${RELEASE}-windows-amd64.zip.sha256sum | awk '{print $1}'))\n\nYou can download the SBOM for this release in SPDX format [here](https://get.helm.sh/chartmuseum-${RELEASE}.spdx).\n\nYou can use a [script to install](https://raw.githubusercontent.com/helm/chartmuseum/main/scripts/get-chartmuseum) on any system with \\`bash\\`.\n\n## What's Next\n\n- ${MAJ",
                      "markdown": "`t.helm.sh/chartmuseum-${RELEASE}-windows-amd64.zip.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-windows-amd64.zip.sha256sum) / [checksum sig](https://get.helm.sh/chartmuseum-${RELEASE}-windows-amd64.zip.sha256sum.sig) / $(cat _dist/chartmuseum-${RELEASE}-windows-amd64.zip.sha256sum | awk '{print $1}'))\n\nYou can download the SBOM for this release in SPDX format [here](https://get.helm.sh/chartmuseum-${RELEASE}.spdx).\n\nYou can use a [script to install](https://raw.githubusercontent.com/helm/chartmuseum/main/scripts/get-chartmuseum) on any system with \\`bash\\`.\n\n## What's Next\n\n- ${MAJ`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/release-notes.sh"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 408,
                  "endLine": 89,
                  "endColumn": 413,
                  "snippet": {
                    "text": "lm.sh/chartmuseum-${RELEASE}-linux-s390x.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-linux-s390x.tar.gz.sha256sum) / [checksum sig](https://get.helm.sh/chartmuseum-${RELEASE}-linux-s390x.tar.gz.sha256sum.sig) / $(cat _dist/chartmuseum-${RELEASE}-linux-s390x.tar.gz.sha256sum | awk '{print $1}'))\n- [Windows amd64](https://get.helm.sh/chartmuseum-${RELEASE}-windows-amd64.zip) ([archive sig](https://get.helm.sh/chartmuseum-${RELEASE}-windows-amd64.zip.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-windows-amd64.zip.sha256sum) / [checksum sig](https://get.helm.sh/ch",
                    "rendered": {
                      "text": "lm.sh/chartmuseum-${RELEASE}-linux-s390x.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-linux-s390x.tar.gz.sha256sum) / [checksum sig](https://get.helm.sh/chartmuseum-${RELEASE}-linux-s390x.tar.gz.sha256sum.sig) / $(cat _dist/chartmuseum-${RELEASE}-linux-s390x.tar.gz.sha256sum | awk '{print $1}'))\n- [Windows amd64](https://get.helm.sh/chartmuseum-${RELEASE}-windows-amd64.zip) ([archive sig](https://get.helm.sh/chartmuseum-${RELEASE}-windows-amd64.zip.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-windows-amd64.zip.sha256sum) / [checksum sig](https://get.helm.sh/ch",
                      "markdown": "`lm.sh/chartmuseum-${RELEASE}-linux-s390x.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-linux-s390x.tar.gz.sha256sum) / [checksum sig](https://get.helm.sh/chartmuseum-${RELEASE}-linux-s390x.tar.gz.sha256sum.sig) / $(cat _dist/chartmuseum-${RELEASE}-linux-s390x.tar.gz.sha256sum | awk '{print $1}'))\n- [Windows amd64](https://get.helm.sh/chartmuseum-${RELEASE}-windows-amd64.zip) ([archive sig](https://get.helm.sh/chartmuseum-${RELEASE}-windows-amd64.zip.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-windows-amd64.zip.sha256sum) / [checksum sig](https://get.helm.sh/ch`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/release-notes.sh"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 420,
                  "endLine": 88,
                  "endColumn": 425,
                  "snippet": {
                    "text": "artmuseum-${RELEASE}-linux-ppc64le.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-linux-ppc64le.tar.gz.sha256sum) / [checksum sig](https://get.helm.sh/chartmuseum-${RELEASE}-linux-ppc64le.tar.gz.sha256sum.sig) / $(cat _dist/chartmuseum-${RELEASE}-linux-ppc64le.tar.gz.sha256sum | awk '{print $1}'))\n- [Linux s390x](https://get.helm.sh/chartmuseum-${RELEASE}-linux-s390x.tar.gz) ([archive sig](https://get.helm.sh/chartmuseum-${RELEASE}-linux-s390x.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-linux-s390x.tar.gz.sha256sum) / [checksum sig](https://get.helm.sh/c",
                    "rendered": {
                      "text": "artmuseum-${RELEASE}-linux-ppc64le.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-linux-ppc64le.tar.gz.sha256sum) / [checksum sig](https://get.helm.sh/chartmuseum-${RELEASE}-linux-ppc64le.tar.gz.sha256sum.sig) / $(cat _dist/chartmuseum-${RELEASE}-linux-ppc64le.tar.gz.sha256sum | awk '{print $1}'))\n- [Linux s390x](https://get.helm.sh/chartmuseum-${RELEASE}-linux-s390x.tar.gz) ([archive sig](https://get.helm.sh/chartmuseum-${RELEASE}-linux-s390x.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-linux-s390x.tar.gz.sha256sum) / [checksum sig](https://get.helm.sh/c",
                      "markdown": "`artmuseum-${RELEASE}-linux-ppc64le.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-linux-ppc64le.tar.gz.sha256sum) / [checksum sig](https://get.helm.sh/chartmuseum-${RELEASE}-linux-ppc64le.tar.gz.sha256sum.sig) / $(cat _dist/chartmuseum-${RELEASE}-linux-ppc64le.tar.gz.sha256sum | awk '{print $1}'))\n- [Linux s390x](https://get.helm.sh/chartmuseum-${RELEASE}-linux-s390x.tar.gz) ([archive sig](https://get.helm.sh/chartmuseum-${RELEASE}-linux-s390x.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-linux-s390x.tar.gz.sha256sum) / [checksum sig](https://get.helm.sh/c`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/release-notes.sh"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 426,
                  "endLine": 87,
                  "endColumn": 431,
                  "snippet": {
                    "text": "useum-${RELEASE}-linux-mips64le.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-linux-mips64le.tar.gz.sha256sum) / [checksum sig](https://get.helm.sh/chartmuseum-${RELEASE}-linux-mips64le.tar.gz.sha256sum.sig) / $(cat _dist/chartmuseum-${RELEASE}-linux-mips64le.tar.gz.sha256sum | awk '{print $1}'))\n- [Linux ppc64le](https://get.helm.sh/chartmuseum-${RELEASE}-linux-ppc64le.tar.gz) ([archive sig](https://get.helm.sh/chartmuseum-${RELEASE}-linux-ppc64le.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-linux-ppc64le.tar.gz.sha256sum) / [checksum sig](https://get.h",
                    "rendered": {
                      "text": "useum-${RELEASE}-linux-mips64le.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-linux-mips64le.tar.gz.sha256sum) / [checksum sig](https://get.helm.sh/chartmuseum-${RELEASE}-linux-mips64le.tar.gz.sha256sum.sig) / $(cat _dist/chartmuseum-${RELEASE}-linux-mips64le.tar.gz.sha256sum | awk '{print $1}'))\n- [Linux ppc64le](https://get.helm.sh/chartmuseum-${RELEASE}-linux-ppc64le.tar.gz) ([archive sig](https://get.helm.sh/chartmuseum-${RELEASE}-linux-ppc64le.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-linux-ppc64le.tar.gz.sha256sum) / [checksum sig](https://get.h",
                      "markdown": "`useum-${RELEASE}-linux-mips64le.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-linux-mips64le.tar.gz.sha256sum) / [checksum sig](https://get.helm.sh/chartmuseum-${RELEASE}-linux-mips64le.tar.gz.sha256sum.sig) / $(cat _dist/chartmuseum-${RELEASE}-linux-mips64le.tar.gz.sha256sum | awk '{print $1}'))\n- [Linux ppc64le](https://get.helm.sh/chartmuseum-${RELEASE}-linux-ppc64le.tar.gz) ([archive sig](https://get.helm.sh/chartmuseum-${RELEASE}-linux-ppc64le.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-linux-ppc64le.tar.gz.sha256sum) / [checksum sig](https://get.h`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/release-notes.sh"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 398,
                  "endLine": 86,
                  "endColumn": 403,
                  "snippet": {
                    "text": "/get.helm.sh/chartmuseum-${RELEASE}-linux-386.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-linux-386.tar.gz.sha256sum) / [checksum sig](https://get.helm.sh/chartmuseum-${RELEASE}-linux-386.tar.gz.sha256sum.sig) /  $(cat _dist/chartmuseum-${RELEASE}-linux-386.tar.gz.sha256sum | awk '{print $1}'))\n- [Linux mips64le](https://get.helm.sh/chartmuseum-${RELEASE}-linux-mips64le.tar.gz) ([archive sig](https://get.helm.sh/chartmuseum-${RELEASE}-linux-mips64le.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-linux-mips64le.tar.gz.sha256sum) / [checksum sig](https://g",
                    "rendered": {
                      "text": "/get.helm.sh/chartmuseum-${RELEASE}-linux-386.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-linux-386.tar.gz.sha256sum) / [checksum sig](https://get.helm.sh/chartmuseum-${RELEASE}-linux-386.tar.gz.sha256sum.sig) /  $(cat _dist/chartmuseum-${RELEASE}-linux-386.tar.gz.sha256sum | awk '{print $1}'))\n- [Linux mips64le](https://get.helm.sh/chartmuseum-${RELEASE}-linux-mips64le.tar.gz) ([archive sig](https://get.helm.sh/chartmuseum-${RELEASE}-linux-mips64le.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-linux-mips64le.tar.gz.sha256sum) / [checksum sig](https://g",
                      "markdown": "`/get.helm.sh/chartmuseum-${RELEASE}-linux-386.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-linux-386.tar.gz.sha256sum) / [checksum sig](https://get.helm.sh/chartmuseum-${RELEASE}-linux-386.tar.gz.sha256sum.sig) /  $(cat _dist/chartmuseum-${RELEASE}-linux-386.tar.gz.sha256sum | awk '{print $1}'))\n- [Linux mips64le](https://get.helm.sh/chartmuseum-${RELEASE}-linux-mips64le.tar.gz) ([archive sig](https://get.helm.sh/chartmuseum-${RELEASE}-linux-mips64le.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-linux-mips64le.tar.gz.sha256sum) / [checksum sig](https://g`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/release-notes.sh"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 408,
                  "endLine": 85,
                  "endColumn": 413,
                  "snippet": {
                    "text": "lm.sh/chartmuseum-${RELEASE}-linux-arm64.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-linux-arm64.tar.gz.sha256sum) / [checksum sig](https://get.helm.sh/chartmuseum-${RELEASE}-linux-arm64.tar.gz.sha256sum.sig) / $(cat _dist/chartmuseum-${RELEASE}-linux-arm64.tar.gz.sha256sum | awk '{print $1}'))\n- [Linux i386](https://get.helm.sh/chartmuseum-${RELEASE}-linux-386.tar.gz) ([archive sig](https://get.helm.sh/chartmuseum-${RELEASE}-linux-386.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-linux-386.tar.gz.sha256sum) / [checksum sig](https://get.helm.sh/chartmus",
                    "rendered": {
                      "text": "lm.sh/chartmuseum-${RELEASE}-linux-arm64.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-linux-arm64.tar.gz.sha256sum) / [checksum sig](https://get.helm.sh/chartmuseum-${RELEASE}-linux-arm64.tar.gz.sha256sum.sig) / $(cat _dist/chartmuseum-${RELEASE}-linux-arm64.tar.gz.sha256sum | awk '{print $1}'))\n- [Linux i386](https://get.helm.sh/chartmuseum-${RELEASE}-linux-386.tar.gz) ([archive sig](https://get.helm.sh/chartmuseum-${RELEASE}-linux-386.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-linux-386.tar.gz.sha256sum) / [checksum sig](https://get.helm.sh/chartmus",
                      "markdown": "`lm.sh/chartmuseum-${RELEASE}-linux-arm64.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-linux-arm64.tar.gz.sha256sum) / [checksum sig](https://get.helm.sh/chartmuseum-${RELEASE}-linux-arm64.tar.gz.sha256sum.sig) / $(cat _dist/chartmuseum-${RELEASE}-linux-arm64.tar.gz.sha256sum | awk '{print $1}'))\n- [Linux i386](https://get.helm.sh/chartmuseum-${RELEASE}-linux-386.tar.gz) ([archive sig](https://get.helm.sh/chartmuseum-${RELEASE}-linux-386.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-linux-386.tar.gz.sha256sum) / [checksum sig](https://get.helm.sh/chartmus`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/release-notes.sh"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 396,
                  "endLine": 84,
                  "endColumn": 401,
                  "snippet": {
                    "text": "//get.helm.sh/chartmuseum-${RELEASE}-linux-arm.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-linux-arm.tar.gz.sha256sum) / [checksum sig](https://get.helm.sh/chartmuseum-${RELEASE}-linux-arm.tar.gz.sha256sum.sig) / $(cat _dist/chartmuseum-${RELEASE}-linux-arm.tar.gz.sha256sum | awk '{print $1}'))\n- [Linux arm64](https://get.helm.sh/chartmuseum-${RELEASE}-linux-arm64.tar.gz) ([archive sig](https://get.helm.sh/chartmuseum-${RELEASE}-linux-arm64.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-linux-arm64.tar.gz.sha256sum) / [checksum sig](https://get.helm.sh/c",
                    "rendered": {
                      "text": "//get.helm.sh/chartmuseum-${RELEASE}-linux-arm.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-linux-arm.tar.gz.sha256sum) / [checksum sig](https://get.helm.sh/chartmuseum-${RELEASE}-linux-arm.tar.gz.sha256sum.sig) / $(cat _dist/chartmuseum-${RELEASE}-linux-arm.tar.gz.sha256sum | awk '{print $1}'))\n- [Linux arm64](https://get.helm.sh/chartmuseum-${RELEASE}-linux-arm64.tar.gz) ([archive sig](https://get.helm.sh/chartmuseum-${RELEASE}-linux-arm64.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-linux-arm64.tar.gz.sha256sum) / [checksum sig](https://get.helm.sh/c",
                      "markdown": "`//get.helm.sh/chartmuseum-${RELEASE}-linux-arm.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-linux-arm.tar.gz.sha256sum) / [checksum sig](https://get.helm.sh/chartmuseum-${RELEASE}-linux-arm.tar.gz.sha256sum.sig) / $(cat _dist/chartmuseum-${RELEASE}-linux-arm.tar.gz.sha256sum | awk '{print $1}'))\n- [Linux arm64](https://get.helm.sh/chartmuseum-${RELEASE}-linux-arm64.tar.gz) ([archive sig](https://get.helm.sh/chartmuseum-${RELEASE}-linux-arm64.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-linux-arm64.tar.gz.sha256sum) / [checksum sig](https://get.helm.sh/c`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/release-notes.sh"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 409,
                  "endLine": 83,
                  "endColumn": 414,
                  "snippet": {
                    "text": "m.sh/chartmuseum-${RELEASE}-linux-amd64.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-linux-amd64.tar.gz.sha256sum) / [checksum sig](https://get.helm.sh/chartmuseum-${RELEASE}-linux-amd64.tar.gz.sha256sum.sig) /  $(cat _dist/chartmuseum-${RELEASE}-linux-amd64.tar.gz.sha256sum | awk '{print $1}'))\n- [Linux arm](https://get.helm.sh/chartmuseum-${RELEASE}-linux-arm.tar.gz) ([archive sig](https://get.helm.sh/chartmuseum-${RELEASE}-linux-arm.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-linux-arm.tar.gz.sha256sum) / [checksum sig](https://get.helm.sh/chartmuse",
                    "rendered": {
                      "text": "m.sh/chartmuseum-${RELEASE}-linux-amd64.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-linux-amd64.tar.gz.sha256sum) / [checksum sig](https://get.helm.sh/chartmuseum-${RELEASE}-linux-amd64.tar.gz.sha256sum.sig) /  $(cat _dist/chartmuseum-${RELEASE}-linux-amd64.tar.gz.sha256sum | awk '{print $1}'))\n- [Linux arm](https://get.helm.sh/chartmuseum-${RELEASE}-linux-arm.tar.gz) ([archive sig](https://get.helm.sh/chartmuseum-${RELEASE}-linux-arm.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-linux-arm.tar.gz.sha256sum) / [checksum sig](https://get.helm.sh/chartmuse",
                      "markdown": "`m.sh/chartmuseum-${RELEASE}-linux-amd64.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-linux-amd64.tar.gz.sha256sum) / [checksum sig](https://get.helm.sh/chartmuseum-${RELEASE}-linux-amd64.tar.gz.sha256sum.sig) /  $(cat _dist/chartmuseum-${RELEASE}-linux-amd64.tar.gz.sha256sum | awk '{print $1}'))\n- [Linux arm](https://get.helm.sh/chartmuseum-${RELEASE}-linux-arm.tar.gz) ([archive sig](https://get.helm.sh/chartmuseum-${RELEASE}-linux-arm.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-linux-arm.tar.gz.sha256sum) / [checksum sig](https://get.helm.sh/chartmuse`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/release-notes.sh"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 413,
                  "endLine": 82,
                  "endColumn": 418,
                  "snippet": {
                    "text": "h/chartmuseum-${RELEASE}-darwin-amd64.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-darwin-amd64.tar.gz.sha256sum) / [checksum sig](https://get.helm.sh/chartmuseum-${RELEASE}-darwin-amd64.tar.gz.sha256sum.sig) / $(cat _dist/chartmuseum-${RELEASE}-darwin-amd64.tar.gz.sha256sum | awk '{print $1}'))\n- [Linux amd64](https://get.helm.sh/chartmuseum-${RELEASE}-linux-amd64.tar.gz) ([archive sig](https://get.helm.sh/chartmuseum-${RELEASE}-linux-amd64.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-linux-amd64.tar.gz.sha256sum) / [checksum sig](https://get.helm.sh/c",
                    "rendered": {
                      "text": "h/chartmuseum-${RELEASE}-darwin-amd64.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-darwin-amd64.tar.gz.sha256sum) / [checksum sig](https://get.helm.sh/chartmuseum-${RELEASE}-darwin-amd64.tar.gz.sha256sum.sig) / $(cat _dist/chartmuseum-${RELEASE}-darwin-amd64.tar.gz.sha256sum | awk '{print $1}'))\n- [Linux amd64](https://get.helm.sh/chartmuseum-${RELEASE}-linux-amd64.tar.gz) ([archive sig](https://get.helm.sh/chartmuseum-${RELEASE}-linux-amd64.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-linux-amd64.tar.gz.sha256sum) / [checksum sig](https://get.helm.sh/c",
                      "markdown": "`h/chartmuseum-${RELEASE}-darwin-amd64.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-darwin-amd64.tar.gz.sha256sum) / [checksum sig](https://get.helm.sh/chartmuseum-${RELEASE}-darwin-amd64.tar.gz.sha256sum.sig) / $(cat _dist/chartmuseum-${RELEASE}-darwin-amd64.tar.gz.sha256sum | awk '{print $1}'))\n- [Linux amd64](https://get.helm.sh/chartmuseum-${RELEASE}-linux-amd64.tar.gz) ([archive sig](https://get.helm.sh/chartmuseum-${RELEASE}-linux-amd64.tar.gz.sig) / [checksum](https://get.helm.sh/chartmuseum-${RELEASE}-linux-amd64.tar.gz.sha256sum) / [checksum sig](https://get.helm.sh/c`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/release-notes.sh"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 32,
                  "endLine": 62,
                  "endColumn": 4,
                  "snippet": {
                    "text": "MINOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f2 -d.)\nPATCH=$(echo ${RELEASE} | sed 's/^v//' | cut -f3 -d.)\n\n## Print release notes to stdout\ncat <<EOF\n## ${RELEASE}\n\nChartMuseum ${RELEASE} is a feature release. This release, we focused on <insert focal point>. Users are encouraged to upgrade for the best experience.\n",
                    "rendered": {
                      "text": "MINOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f2 -d.)\nPATCH=$(echo ${RELEASE} | sed 's/^v//' | cut -f3 -d.)\n\n## Print release notes to stdout\ncat <<EOF\n## ${RELEASE}\n\nChartMuseum ${RELEASE} is a feature release. This release, we focused on <insert focal point>. Users are encouraged to upgrade for the best experience.\n",
                      "markdown": "`MINOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f2 -d.)\nPATCH=$(echo ${RELEASE} | sed 's/^v//' | cut -f3 -d.)\n\n## Print release notes to stdout\ncat <<EOF\n## ${RELEASE}\n\nChartMuseum ${RELEASE} is a feature release. This release, we focused on <insert focal point>. Users are encouraged to upgrade for the best experience.\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/release-notes.sh"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 40,
                  "endLine": 59,
                  "endColumn": 45,
                  "snippet": {
                    "text": "## guess at MAJOR / MINOR / PATCH versions\nMAJOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f1 -d.)\nMINOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f2 -d.)\nPATCH=$(echo ${RELEASE} | sed 's/^v//' | cut -f3 -d.)\n\n## Print release notes to stdout\ncat <<EOF\n",
                    "rendered": {
                      "text": "## guess at MAJOR / MINOR / PATCH versions\nMAJOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f1 -d.)\nMINOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f2 -d.)\nPATCH=$(echo ${RELEASE} | sed 's/^v//' | cut -f3 -d.)\n\n## Print release notes to stdout\ncat <<EOF\n",
                      "markdown": "`## guess at MAJOR / MINOR / PATCH versions\nMAJOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f1 -d.)\nMINOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f2 -d.)\nPATCH=$(echo ${RELEASE} | sed 's/^v//' | cut -f3 -d.)\n\n## Print release notes to stdout\ncat <<EOF\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/release-notes.sh"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 25,
                  "endLine": 59,
                  "endColumn": 30,
                  "snippet": {
                    "text": "## guess at MAJOR / MINOR / PATCH versions\nMAJOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f1 -d.)\nMINOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f2 -d.)\nPATCH=$(echo ${RELEASE} | sed 's/^v//' | cut -f3 -d.)\n\n## Print release notes to stdout\ncat <<EOF\n",
                    "rendered": {
                      "text": "## guess at MAJOR / MINOR / PATCH versions\nMAJOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f1 -d.)\nMINOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f2 -d.)\nPATCH=$(echo ${RELEASE} | sed 's/^v//' | cut -f3 -d.)\n\n## Print release notes to stdout\ncat <<EOF\n",
                      "markdown": "`## guess at MAJOR / MINOR / PATCH versions\nMAJOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f1 -d.)\nMINOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f2 -d.)\nPATCH=$(echo ${RELEASE} | sed 's/^v//' | cut -f3 -d.)\n\n## Print release notes to stdout\ncat <<EOF\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/release-notes.sh"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 40,
                  "endLine": 58,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n## guess at MAJOR / MINOR / PATCH versions\nMAJOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f1 -d.)\nMINOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f2 -d.)\nPATCH=$(echo ${RELEASE} | sed 's/^v//' | cut -f3 -d.)\n\n## Print release notes to stdout\n",
                    "rendered": {
                      "text": "\n## guess at MAJOR / MINOR / PATCH versions\nMAJOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f1 -d.)\nMINOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f2 -d.)\nPATCH=$(echo ${RELEASE} | sed 's/^v//' | cut -f3 -d.)\n\n## Print release notes to stdout\n",
                      "markdown": "`\n## guess at MAJOR / MINOR / PATCH versions\nMAJOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f1 -d.)\nMINOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f2 -d.)\nPATCH=$(echo ${RELEASE} | sed 's/^v//' | cut -f3 -d.)\n\n## Print release notes to stdout\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/release-notes.sh"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 25,
                  "endLine": 58,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n## guess at MAJOR / MINOR / PATCH versions\nMAJOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f1 -d.)\nMINOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f2 -d.)\nPATCH=$(echo ${RELEASE} | sed 's/^v//' | cut -f3 -d.)\n\n## Print release notes to stdout\n",
                    "rendered": {
                      "text": "\n## guess at MAJOR / MINOR / PATCH versions\nMAJOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f1 -d.)\nMINOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f2 -d.)\nPATCH=$(echo ${RELEASE} | sed 's/^v//' | cut -f3 -d.)\n\n## Print release notes to stdout\n",
                      "markdown": "`\n## guess at MAJOR / MINOR / PATCH versions\nMAJOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f1 -d.)\nMINOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f2 -d.)\nPATCH=$(echo ${RELEASE} | sed 's/^v//' | cut -f3 -d.)\n\n## Print release notes to stdout\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/release-notes.sh"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 40,
                  "endLine": 57,
                  "endColumn": 45,
                  "snippet": {
                    "text": "fi\n\n## guess at MAJOR / MINOR / PATCH versions\nMAJOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f1 -d.)\nMINOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f2 -d.)\nPATCH=$(echo ${RELEASE} | sed 's/^v//' | cut -f3 -d.)\n\n",
                    "rendered": {
                      "text": "fi\n\n## guess at MAJOR / MINOR / PATCH versions\nMAJOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f1 -d.)\nMINOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f2 -d.)\nPATCH=$(echo ${RELEASE} | sed 's/^v//' | cut -f3 -d.)\n\n",
                      "markdown": "`fi\n\n## guess at MAJOR / MINOR / PATCH versions\nMAJOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f1 -d.)\nMINOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f2 -d.)\nPATCH=$(echo ${RELEASE} | sed 's/^v//' | cut -f3 -d.)\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/release-notes.sh"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 25,
                  "endLine": 57,
                  "endColumn": 30,
                  "snippet": {
                    "text": "fi\n\n## guess at MAJOR / MINOR / PATCH versions\nMAJOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f1 -d.)\nMINOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f2 -d.)\nPATCH=$(echo ${RELEASE} | sed 's/^v//' | cut -f3 -d.)\n\n",
                    "rendered": {
                      "text": "fi\n\n## guess at MAJOR / MINOR / PATCH versions\nMAJOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f1 -d.)\nMINOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f2 -d.)\nPATCH=$(echo ${RELEASE} | sed 's/^v//' | cut -f3 -d.)\n\n",
                      "markdown": "`fi\n\n## guess at MAJOR / MINOR / PATCH versions\nMAJOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f1 -d.)\nMINOR=$(echo ${RELEASE} | sed 's/^v//' | cut -f2 -d.)\nPATCH=$(echo ${RELEASE} | sed 's/^v//' | cut -f3 -d.)\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/release-notes.sh"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 26,
                  "endLine": 48,
                  "endColumn": 31,
                  "snippet": {
                    "text": "  exit 1\nfi\n\n## Generate CHANGELOG from git log\nCHANGELOG=$(git log --no-merges --pretty=format:'- %s %H (%aN)' ${PREVIOUS_RELEASE}..${RELEASE})\nif [[ ! $? -eq 0 ]]; then\n  echo \"Error creating changelog\"\n",
                    "rendered": {
                      "text": "  exit 1\nfi\n\n## Generate CHANGELOG from git log\nCHANGELOG=$(git log --no-merges --pretty=format:'- %s %H (%aN)' ${PREVIOUS_RELEASE}..${RELEASE})\nif [[ ! $? -eq 0 ]]; then\n  echo \"Error creating changelog\"\n",
                      "markdown": "`  exit 1\nfi\n\n## Generate CHANGELOG from git log\nCHANGELOG=$(git log --no-merges --pretty=format:'- %s %H (%aN)' ${PREVIOUS_RELEASE}..${RELEASE})\nif [[ ! $? -eq 0 ]]; then\n  echo \"Error creating changelog\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/release-notes.sh"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 16,
                  "snippet": {
                    "text": "  exit 1\nfi\n\n## validate git tags\nfor tag in $RELEASE $PREVIOUS_RELEASE; do\n  OK=$(git tag -l ${tag} | wc -l)\n  if [[ \"$OK\" == \"0\" ]]; then\n",
                    "rendered": {
                      "text": "  exit 1\nfi\n\n## validate git tags\nfor tag in $RELEASE $PREVIOUS_RELEASE; do\n  OK=$(git tag -l ${tag} | wc -l)\n  if [[ \"$OK\" == \"0\" ]]; then\n",
                      "markdown": "`  exit 1\nfi\n\n## validate git tags\nfor tag in $RELEASE $PREVIOUS_RELEASE; do\n  OK=$(git tag -l ${tag} | wc -l)\n  if [[ \"$OK\" == \"0\" ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/scripts/release-notes.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# Copyright The Helm Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# Copyright The Helm Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# Copyright The Helm Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 575,
                  "startColumn": 16,
                  "endLine": 575,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  --storage-local-rootdir=\"./chartstorage\" \\\n  --cache=\"redis\" \\\n  --cache-redis-addr=\"localhost:6379\" \\\n  --cache-redis-password=\"\" \\\n  --cache-redis-db=0\n```\n\n",
                    "rendered": {
                      "text": "  --storage-local-rootdir=\"./chartstorage\" \\\n  --cache=\"redis\" \\\n  --cache-redis-addr=\"localhost:6379\" \\\n  --cache-redis-password=\"\" \\\n  --cache-redis-db=0\n```\n\n",
                      "markdown": "`  --storage-local-rootdir=\"./chartstorage\" \\\n  --cache=\"redis\" \\\n  --cache-redis-addr=\"localhost:6379\" \\\n  --cache-redis-password=\"\" \\\n  --cache-redis-db=0\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 379,
                  "startColumn": 31,
                  "endLine": 379,
                  "endColumn": 39,
                  "snippet": {
                    "text": "#### Basic Auth\nIf both of the following options are provided, basic http authentication will protect all routes:\n- `--basic-auth-user=<user>` - username for basic http authentication\n- `--basic-auth-pass=<pass>` - password for basic http authentication\n\nYou may want basic auth to only be applied to operations that can change Charts, i.e. PUT, POST and DELETE.  So to avoid basic auth on GET operations use\n\n",
                    "rendered": {
                      "text": "#### Basic Auth\nIf both of the following options are provided, basic http authentication will protect all routes:\n- `--basic-auth-user=<user>` - username for basic http authentication\n- `--basic-auth-pass=<pass>` - password for basic http authentication\n\nYou may want basic auth to only be applied to operations that can change Charts, i.e. PUT, POST and DELETE.  So to avoid basic auth on GET operations use\n\n",
                      "markdown": "`#### Basic Auth\nIf both of the following options are provided, basic http authentication will protect all routes:\n- `--basic-auth-user=<user>` - username for basic http authentication\n- `--basic-auth-pass=<pass>` - password for basic http authentication\n\nYou may want basic auth to only be applied to operations that can change Charts, i.e. PUT, POST and DELETE.  So to avoid basic auth on GET operations use\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 343,
                  "startColumn": 21,
                  "endLine": 343,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\nTo do so, you must set the following env vars:\n- `TENCENT_CLOUD_COS_SECRET_ID`\n- `TENCENT_CLOUD_COS_SECRET_KEY`\n\n```bash\nchartmuseum --debug --port=8080 \\\n",
                    "rendered": {
                      "text": "\nTo do so, you must set the following env vars:\n- `TENCENT_CLOUD_COS_SECRET_ID`\n- `TENCENT_CLOUD_COS_SECRET_KEY`\n\n```bash\nchartmuseum --debug --port=8080 \\\n",
                      "markdown": "`\nTo do so, you must set the following env vars:\n- `TENCENT_CLOUD_COS_SECRET_ID`\n- `TENCENT_CLOUD_COS_SECRET_KEY`\n\n```bash\nchartmuseum --debug --port=8080 \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 283,
                  "startColumn": 6,
                  "endLine": 283,
                  "endColumn": 14,
                  "snippet": {
                    "text": "- either `OS_PROJECT_NAME` or `OS_TENANT_NAME` or `OS_PROJECT_ID` or `OS_TENANT_ID`\n- either `OS_DOMAIN_NAME` or `OS_DOMAIN_ID`\n- either `OS_USERNAME` or `OS_USERID`\n- `OS_PASSWORD`\n\n```bash\nchartmuseum --debug --port=8080 \\\n",
                    "rendered": {
                      "text": "- either `OS_PROJECT_NAME` or `OS_TENANT_NAME` or `OS_PROJECT_ID` or `OS_TENANT_ID`\n- either `OS_DOMAIN_NAME` or `OS_DOMAIN_ID`\n- either `OS_USERNAME` or `OS_USERID`\n- `OS_PASSWORD`\n\n```bash\nchartmuseum --debug --port=8080 \\\n",
                      "markdown": "`- either `OS_PROJECT_NAME` or `OS_TENANT_NAME` or `OS_PROJECT_ID` or `OS_TENANT_ID`\n- either `OS_DOMAIN_NAME` or `OS_DOMAIN_ID`\n- either `OS_USERNAME` or `OS_USERID`\n- `OS_PASSWORD`\n\n```bash\nchartmuseum --debug --port=8080 \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 19,
                  "endLine": 217,
                  "endColumn": 29,
                  "snippet": {
                    "text": "  --storage-amazon-region=\"us-east-1\" \\\n  --storage-amazon-endpoint=\"https://fra1.digitaloceanspaces.com\"\n```\nThe access_key and secret_key can be generated from the DigitalOcean console, under the section API/Spaces_access_keys.\n\nNote: on certain S3-based storage backends, the `LastModified` field on objects\nis truncated to the nearest second. For more info, please see issue [#152](https://github.com/helm/chartmuseum/issues/152).\n",
                    "rendered": {
                      "text": "  --storage-amazon-region=\"us-east-1\" \\\n  --storage-amazon-endpoint=\"https://fra1.digitaloceanspaces.com\"\n```\nThe access_key and secret_key can be generated from the DigitalOcean console, under the section API/Spaces_access_keys.\n\nNote: on certain S3-based storage backends, the `LastModified` field on objects\nis truncated to the nearest second. For more info, please see issue [#152](https://github.com/helm/chartmuseum/issues/152).\n",
                      "markdown": "`  --storage-amazon-region=\"us-east-1\" \\\n  --storage-amazon-endpoint=\"https://fra1.digitaloceanspaces.com\"\n```\nThe access_key and secret_key can be generated from the DigitalOcean console, under the section API/Spaces_access_keys.\n\nNote: on certain S3-based storage backends, the `LastModified` field on objects\nis truncated to the nearest second. For more info, please see issue [#152](https://github.com/helm/chartmuseum/issues/152).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 37,
                  "endLine": 209,
                  "endColumn": 47,
                  "snippet": {
                    "text": "Note below, that the region `us-east-1` needs to be set, since that is how the DigitalOcean cli implementation functions. The actual region of your spaces location is defined by the endpoint. Below we are using Frankfurt as an example.\n```bash\nexport AWS_ACCESS_KEY_ID=\"spaces_access_key\"\nexport AWS_SECRET_ACCESS_KEY=\"spaces_secret_key\"\n  chartmuseum --debug --port=8080 \\\n  --storage=\"amazon\" \\\n  --storage-amazon-bucket=\"my_spaces_name\" \\\n",
                    "rendered": {
                      "text": "Note below, that the region `us-east-1` needs to be set, since that is how the DigitalOcean cli implementation functions. The actual region of your spaces location is defined by the endpoint. Below we are using Frankfurt as an example.\n```bash\nexport AWS_ACCESS_KEY_ID=\"spaces_access_key\"\nexport AWS_SECRET_ACCESS_KEY=\"spaces_secret_key\"\n  chartmuseum --debug --port=8080 \\\n  --storage=\"amazon\" \\\n  --storage-amazon-bucket=\"my_spaces_name\" \\\n",
                      "markdown": "`Note below, that the region `us-east-1` needs to be set, since that is how the DigitalOcean cli implementation functions. The actual region of your spaces location is defined by the endpoint. Below we are using Frankfurt as an example.\n```bash\nexport AWS_ACCESS_KEY_ID=\"spaces_access_key\"\nexport AWS_SECRET_ACCESS_KEY=\"spaces_secret_key\"\n  chartmuseum --debug --port=8080 \\\n  --storage=\"amazon\" \\\n  --storage-amazon-bucket=\"my_spaces_name\" \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 670,
                  "startColumn": 51,
                  "endLine": 670,
                  "endColumn": 55,
                  "snippet": {
                    "text": "chartmuseum --storage local --storage-local-rootdir /tmp/ --depth 1 --artifact-hub-repo-id org1=<repo id> --artifact-hub-repo-id org2=<repo2 id>\n```\n\nThe `artifacthub-repo.yml` file will then be served at `/org1/artifacthub-repo.yml` and `/org2/artifacthub-repo.yml`\n\n## Original Logo\n\n",
                    "rendered": {
                      "text": "chartmuseum --storage local --storage-local-rootdir /tmp/ --depth 1 --artifact-hub-repo-id org1=<repo id> --artifact-hub-repo-id org2=<repo2 id>\n```\n\nThe `artifacthub-repo.yml` file will then be served at `/org1/artifacthub-repo.yml` and `/org2/artifacthub-repo.yml`\n\n## Original Logo\n\n",
                      "markdown": "`chartmuseum --storage local --storage-local-rootdir /tmp/ --depth 1 --artifact-hub-repo-id org1=<repo id> --artifact-hub-repo-id org2=<repo2 id>\n```\n\nThe `artifacthub-repo.yml` file will then be served at `/org1/artifacthub-repo.yml` and `/org2/artifacthub-repo.yml`\n\n## Original Logo\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 582,
                  "startColumn": 95,
                  "endLine": 582,
                  "endColumn": 99,
                  "snippet": {
                    "text": "\n## Prometheus Metrics\n\nChartMuseum exposes its [Prometheus metrics](https://prometheus.io/docs/concepts/metric_types/) at the `/metrics` route on the main port. This can be enabled with the `--enable-metrics` command-line flag or the `ENABLE_METRICS` environment variable.\n\n> Note that the Kubernetes chart currently disables metrics by default (`ENABLE_METRICS=false` is set in the chart). The `--disable-metrics` command-line flag has be deprecated and will only be available in `v0.14.0` and prior.\n\n",
                    "rendered": {
                      "text": "\n## Prometheus Metrics\n\nChartMuseum exposes its [Prometheus metrics](https://prometheus.io/docs/concepts/metric_types/) at the `/metrics` route on the main port. This can be enabled with the `--enable-metrics` command-line flag or the `ENABLE_METRICS` environment variable.\n\n> Note that the Kubernetes chart currently disables metrics by default (`ENABLE_METRICS=false` is set in the chart). The `--disable-metrics` command-line flag has be deprecated and will only be available in `v0.14.0` and prior.\n\n",
                      "markdown": "`\n## Prometheus Metrics\n\nChartMuseum exposes its [Prometheus metrics](https://prometheus.io/docs/concepts/metric_types/) at the `/metrics` route on the main port. This can be enabled with the `--enable-metrics` command-line flag or the `ENABLE_METRICS` environment variable.\n\n> Note that the Kubernetes chart currently disables metrics by default (`ENABLE_METRICS=false` is set in the chart). The `--disable-metrics` command-line flag has be deprecated and will only be available in `v0.14.0` and prior.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 525,
                  "startColumn": 62,
                  "endLine": 525,
                  "endColumn": 66,
                  "snippet": {
                    "text": "chartmuseum --debug --depth=2 --storage=\"local\" --storage-local-rootdir=./charts\n```\n\nThis example will provide two separate Helm Chart Repositories at the following locations:\n- `http://localhost:8080/org1/repoa`\n- `http://localhost:8080/org2/repob`\n\n",
                    "rendered": {
                      "text": "chartmuseum --debug --depth=2 --storage=\"local\" --storage-local-rootdir=./charts\n```\n\nThis example will provide two separate Helm Chart Repositories at the following locations:\n- `http://localhost:8080/org1/repoa`\n- `http://localhost:8080/org2/repob`\n\n",
                      "markdown": "`chartmuseum --debug --depth=2 --storage=\"local\" --storage-local-rootdir=./charts\n```\n\nThis example will provide two separate Helm Chart Repositories at the following locations:\n- `http://localhost:8080/org1/repoa`\n- `http://localhost:8080/org2/repob`\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 8,
                  "endLine": 161,
                  "endColumn": 12,
                  "snippet": {
                    "text": "  --storage-amazon-endpoint=\"my-s3-compatible-service-endpoint\"\n```\n\nYou need at least the following permissions inside your IAM Policy\n```yaml\n{\n  \"Version\": \"2012-10-17\",\n",
                    "rendered": {
                      "text": "  --storage-amazon-endpoint=\"my-s3-compatible-service-endpoint\"\n```\n\nYou need at least the following permissions inside your IAM Policy\n```yaml\n{\n  \"Version\": \"2012-10-17\",\n",
                      "markdown": "`  --storage-amazon-endpoint=\"my-s3-compatible-service-endpoint\"\n```\n\nYou need at least the following permissions inside your IAM Policy\n```yaml\n{\n  \"Version\": \"2012-10-17\",\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 86,
                  "endLine": 102,
                  "snippet": {
                    "text": "\nYou can use the installer script:\n```\ncurl https://raw.githubusercontent.com/helm/chartmuseum/main/scripts/get-chartmuseum | bash\n```\n\nor download manually from the [releases page](https://github.com/helm/chartmuseum/releases),\nwhich also contains all package checksums and signatures.\n",
                    "rendered": {
                      "text": "\nYou can use the installer script:\n```\ncurl https://raw.githubusercontent.com/helm/chartmuseum/main/scripts/get-chartmuseum | bash\n```\n\nor download manually from the [releases page](https://github.com/helm/chartmuseum/releases),\nwhich also contains all package checksums and signatures.\n",
                      "markdown": "`\nYou can use the installer script:\n```\ncurl https://raw.githubusercontent.com/helm/chartmuseum/main/scripts/get-chartmuseum | bash\n```\n\nor download manually from the [releases page](https://github.com/helm/chartmuseum/releases),\nwhich also contains all package checksums and signatures.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 47,
                  "endLine": 68,
                  "endColumn": 51,
                  "snippet": {
                    "text": "curl --data-binary \"@mychart-0.1.0.tgz.prov\" http://localhost:8080/api/prov\n```\n\nBoth files can also be uploaded at once (or one at a time) on the `/api/charts` route using the `multipart/form-data` format:\n\n```bash\ncurl -F \"chart=@mychart-0.1.0.tgz\" -F \"prov=@mychart-0.1.0.tgz.prov\" http://localhost:8080/api/charts\n",
                    "rendered": {
                      "text": "curl --data-binary \"@mychart-0.1.0.tgz.prov\" http://localhost:8080/api/prov\n```\n\nBoth files can also be uploaded at once (or one at a time) on the `/api/charts` route using the `multipart/form-data` format:\n\n```bash\ncurl -F \"chart=@mychart-0.1.0.tgz\" -F \"prov=@mychart-0.1.0.tgz.prov\" http://localhost:8080/api/charts\n",
                      "markdown": "`curl --data-binary \"@mychart-0.1.0.tgz.prov\" http://localhost:8080/api/prov\n```\n\nBoth files can also be uploaded at once (or one at a time) on the `/api/charts` route using the `multipart/form-data` format:\n\n```bash\ncurl -F \"chart=@mychart-0.1.0.tgz\" -F \"prov=@mychart-0.1.0.tgz.prov\" http://localhost:8080/api/charts\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 31,
                  "endLine": 68,
                  "endColumn": 35,
                  "snippet": {
                    "text": "curl --data-binary \"@mychart-0.1.0.tgz.prov\" http://localhost:8080/api/prov\n```\n\nBoth files can also be uploaded at once (or one at a time) on the `/api/charts` route using the `multipart/form-data` format:\n\n```bash\ncurl -F \"chart=@mychart-0.1.0.tgz\" -F \"prov=@mychart-0.1.0.tgz.prov\" http://localhost:8080/api/charts\n",
                    "rendered": {
                      "text": "curl --data-binary \"@mychart-0.1.0.tgz.prov\" http://localhost:8080/api/prov\n```\n\nBoth files can also be uploaded at once (or one at a time) on the `/api/charts` route using the `multipart/form-data` format:\n\n```bash\ncurl -F \"chart=@mychart-0.1.0.tgz\" -F \"prov=@mychart-0.1.0.tgz.prov\" http://localhost:8080/api/charts\n",
                      "markdown": "`curl --data-binary \"@mychart-0.1.0.tgz.prov\" http://localhost:8080/api/prov\n```\n\nBoth files can also be uploaded at once (or one at a time) on the `/api/charts` route using the `multipart/form-data` format:\n\n```bash\ncurl -F \"chart=@mychart-0.1.0.tgz\" -F \"prov=@mychart-0.1.0.tgz.prov\" http://localhost:8080/api/charts\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 77,
                  "endLine": 50,
                  "endColumn": 81,
                  "snippet": {
                    "text": "- `GET /health` - returns 200 OK\n\n## Uploading a Chart Package\n<sub>*Follow **\"How to Run\"** section below to get ChartMuseum up and running at ht<span>tp:/</span>/localhost:8080*<sub>\n\nFirst create `mychart-0.1.0.tgz` using the [Helm CLI](https://docs.helm.sh/using_helm/#installing-helm):\n```\n",
                    "rendered": {
                      "text": "- `GET /health` - returns 200 OK\n\n## Uploading a Chart Package\n<sub>*Follow **\"How to Run\"** section below to get ChartMuseum up and running at ht<span>tp:/</span>/localhost:8080*<sub>\n\nFirst create `mychart-0.1.0.tgz` using the [Helm CLI](https://docs.helm.sh/using_helm/#installing-helm):\n```\n",
                      "markdown": "`- `GET /health` - returns 200 OK\n\n## Uploading a Chart Package\n<sub>*Follow **\"How to Run\"** section below to get ChartMuseum up and running at ht<span>tp:/</span>/localhost:8080*<sub>\n\nFirst create `mychart-0.1.0.tgz` using the [Helm CLI](https://docs.helm.sh/using_helm/#installing-helm):\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 686,
                  "startColumn": 65,
                  "endLine": 686,
                  "endColumn": 73,
                  "snippet": {
                    "text": "th) - Go library for generating ChartMuseum JWT Tokens, authorizing HTTP requests, etc.\n- [chartmuseum/auth-server-example](https://github.com/chartmuseum/auth-server-example) - Example server providing JWT tokens for ChartMuseum auth\n- [chartmuseum/testbed](https://github.com/chartmuseum/testbed) - Docker testbed for continuous integration\n- [chartmuseum/www](https://github.com/chartmuseum/www) - chartmuseum.com static site source code\n- [chartmuseum/ui](https://github.com/chartmuseum/ui) - ChartMuseum frontend UI\n\n## Community\nYou can reach the *ChartMuseum* community and developers in the [Kubernet",
                    "rendered": {
                      "text": "th) - Go library for generating ChartMuseum JWT Tokens, authorizing HTTP requests, etc.\n- [chartmuseum/auth-server-example](https://github.com/chartmuseum/auth-server-example) - Example server providing JWT tokens for ChartMuseum auth\n- [chartmuseum/testbed](https://github.com/chartmuseum/testbed) - Docker testbed for continuous integration\n- [chartmuseum/www](https://github.com/chartmuseum/www) - chartmuseum.com static site source code\n- [chartmuseum/ui](https://github.com/chartmuseum/ui) - ChartMuseum frontend UI\n\n## Community\nYou can reach the *ChartMuseum* community and developers in the [Kubernet",
                      "markdown": "`th) - Go library for generating ChartMuseum JWT Tokens, authorizing HTTP requests, etc.\n- [chartmuseum/auth-server-example](https://github.com/chartmuseum/auth-server-example) - Example server providing JWT tokens for ChartMuseum auth\n- [chartmuseum/testbed](https://github.com/chartmuseum/testbed) - Docker testbed for continuous integration\n- [chartmuseum/www](https://github.com/chartmuseum/www) - chartmuseum.com static site source code\n- [chartmuseum/ui](https://github.com/chartmuseum/ui) - ChartMuseum frontend UI\n\n## Community\nYou can reach the *ChartMuseum* community and developers in the [Kubernet`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 553,
                  "startColumn": 7,
                  "endLine": 553,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\nBy default, the contents of `index.yaml` (per-tenant) will be stored in memory. This means that memory usage will continue to grow indefinitely as more charts are added to storage.\n\nYou may wish to offload this to an external cache store, especially for large, multitenant installations.\n\n### Cache Interval\n\n",
                    "rendered": {
                      "text": "\nBy default, the contents of `index.yaml` (per-tenant) will be stored in memory. This means that memory usage will continue to grow indefinitely as more charts are added to storage.\n\nYou may wish to offload this to an external cache store, especially for large, multitenant installations.\n\n### Cache Interval\n\n",
                      "markdown": "`\nBy default, the contents of `index.yaml` (per-tenant) will be stored in memory. This means that memory usage will continue to grow indefinitely as more charts are added to storage.\n\nYou may wish to offload this to an external cache store, especially for large, multitenant installations.\n\n### Cache Interval\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 541,
                  "startColumn": 37,
                  "endLine": 541,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\n## Pagination\n\nFor large chart repositories, you may wish to paginate the results from the `GET /api/charts` route.\n\nTo do so, add the `offset` and `limit` query params to the request. For example, to retrieve a list of 5 charts total, skipping the first 5 charts, you could use the following:\n\n",
                    "rendered": {
                      "text": "\n## Pagination\n\nFor large chart repositories, you may wish to paginate the results from the `GET /api/charts` route.\n\nTo do so, add the `offset` and `limit` query params to the request. For example, to retrieve a list of 5 charts total, skipping the first 5 charts, you could use the following:\n\n",
                      "markdown": "`\n## Pagination\n\nFor large chart repositories, you may wish to paginate the results from the `GET /api/charts` route.\n\nTo do so, add the `offset` and `limit` query params to the request. For example, to retrieve a list of 5 charts total, skipping the first 5 charts, you could use the following:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 533,
                  "startColumn": 7,
                  "endLine": 534,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo use the chart manipulation routes, simply place the name of the repo directly after \"/api\" in the route:\n\n```bash\ncurl -F \"chart=@mychart-0.1.0.tgz\" http://localhost:8080/api/org1/repoa/charts\n```\n\nYou may also experiment with the `--depth-dynamic` flag, which should allow for dynamic depth levels (i.e. all of `/api/charts`, `/api/myrepo/charts`, `/api/org1/repoa/charts`).\n",
                    "rendered": {
                      "text": "\nTo use the chart manipulation routes, simply place the name of the repo directly after \"/api\" in the route:\n\n```bash\ncurl -F \"chart=@mychart-0.1.0.tgz\" http://localhost:8080/api/org1/repoa/charts\n```\n\nYou may also experiment with the `--depth-dynamic` flag, which should allow for dynamic depth levels (i.e. all of `/api/charts`, `/api/myrepo/charts`, `/api/org1/repoa/charts`).\n",
                      "markdown": "`\nTo use the chart manipulation routes, simply place the name of the repo directly after \"/api\" in the route:\n\n```bash\ncurl -F \"chart=@mychart-0.1.0.tgz\" http://localhost:8080/api/org1/repoa/charts\n```\n\nYou may also experiment with the `--depth-dynamic` flag, which should allow for dynamic depth levels (i.e. all of `/api/charts`, `/api/myrepo/charts`, `/api/org1/repoa/charts`).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 479,
                  "startColumn": 7,
                  "endLine": 480,
                  "endColumn": 7,
                  "snippet": {
                    "text": "```\n\nExample usage (S3):\n```bash\ndocker run --rm -it \\\n  -p 8080:8080 \\\n  -e DEBUG=1 \\\n  -e STORAGE=\"amazon\" \\\n",
                    "rendered": {
                      "text": "```\n\nExample usage (S3):\n```bash\ndocker run --rm -it \\\n  -p 8080:8080 \\\n  -e DEBUG=1 \\\n  -e STORAGE=\"amazon\" \\\n",
                      "markdown": "````\n\nExample usage (S3):\n```bash\ndocker run --rm -it \\\n  -p 8080:8080 \\\n  -e DEBUG=1 \\\n  -e STORAGE=\"amazon\" \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 468,
                  "startColumn": 7,
                  "endLine": 469,
                  "endColumn": 7,
                  "snippet": {
                    "text": "Available via [GitHub Container Registry (GHCR)](https://github.com/orgs/helm/packages/container/package/chartmuseum).\n\nExample usage (local storage):\n```bash\ndocker run --rm -it \\\n  -p 8080:8080 \\\n  -e DEBUG=1 \\\n  -e STORAGE=local \\\n",
                    "rendered": {
                      "text": "Available via [GitHub Container Registry (GHCR)](https://github.com/orgs/helm/packages/container/package/chartmuseum).\n\nExample usage (local storage):\n```bash\ndocker run --rm -it \\\n  -p 8080:8080 \\\n  -e DEBUG=1 \\\n  -e STORAGE=local \\\n",
                      "markdown": "`Available via [GitHub Container Registry (GHCR)](https://github.com/orgs/helm/packages/container/package/chartmuseum).\n\nExample usage (local storage):\n```bash\ndocker run --rm -it \\\n  -p 8080:8080 \\\n  -e DEBUG=1 \\\n  -e STORAGE=local \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 464,
                  "startColumn": 3,
                  "endLine": 464,
                  "endColumn": 11,
                  "snippet": {
                    "text": "- `--read-timeout=<number>` - socket read timeout for http server\n- `--write-timeout=<number>` - socker write timeout for http server\n\n### Docker Image\nAvailable via [GitHub Container Registry (GHCR)](https://github.com/orgs/helm/packages/container/package/chartmuseum).\n\nExample usage (local storage):\n",
                    "rendered": {
                      "text": "- `--read-timeout=<number>` - socket read timeout for http server\n- `--write-timeout=<number>` - socker write timeout for http server\n\n### Docker Image\nAvailable via [GitHub Container Registry (GHCR)](https://github.com/orgs/helm/packages/container/package/chartmuseum).\n\nExample usage (local storage):\n",
                      "markdown": "`- `--read-timeout=<number>` - socket read timeout for http server\n- `--write-timeout=<number>` - socker write timeout for http server\n\n### Docker Image\nAvailable via [GitHub Container Registry (GHCR)](https://github.com/orgs/helm/packages/container/package/chartmuseum).\n\nExample usage (local storage):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 462,
                  "startColumn": 43,
                  "endLine": 462,
                  "endColumn": 52,
                  "snippet": {
                    "text": "- `--depth=<number>` - levels of nested repos for multitenancy\n- `--cors-alloworigin=<value>` - value to set in the Access-Control-Allow-Origin HTTP header\n- `--read-timeout=<number>` - socket read timeout for http server\n- `--write-timeout=<number>` - socker write timeout for http server\n\n### Docker Image\nAvailable via [GitHub Container Registry (GHCR)](https://github.com/orgs/helm/packages/container/package/chartmuseum).\n",
                    "rendered": {
                      "text": "- `--depth=<number>` - levels of nested repos for multitenancy\n- `--cors-alloworigin=<value>` - value to set in the Access-Control-Allow-Origin HTTP header\n- `--read-timeout=<number>` - socket read timeout for http server\n- `--write-timeout=<number>` - socker write timeout for http server\n\n### Docker Image\nAvailable via [GitHub Container Registry (GHCR)](https://github.com/orgs/helm/packages/container/package/chartmuseum).\n",
                      "markdown": "`- `--depth=<number>` - levels of nested repos for multitenancy\n- `--cors-alloworigin=<value>` - value to set in the Access-Control-Allow-Origin HTTP header\n- `--read-timeout=<number>` - socket read timeout for http server\n- `--write-timeout=<number>` - socker write timeout for http server\n\n### Docker Image\nAvailable via [GitHub Container Registry (GHCR)](https://github.com/orgs/helm/packages/container/package/chartmuseum).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 461,
                  "startColumn": 41,
                  "endLine": 461,
                  "endColumn": 50,
                  "snippet": {
                    "text": "- `--context-path=<path>` - base context path (new root for application routes)\n- `--depth=<number>` - levels of nested repos for multitenancy\n- `--cors-alloworigin=<value>` - value to set in the Access-Control-Allow-Origin HTTP header\n- `--read-timeout=<number>` - socket read timeout for http server\n- `--write-timeout=<number>` - socker write timeout for http server\n\n### Docker Image\n",
                    "rendered": {
                      "text": "- `--context-path=<path>` - base context path (new root for application routes)\n- `--depth=<number>` - levels of nested repos for multitenancy\n- `--cors-alloworigin=<value>` - value to set in the Access-Control-Allow-Origin HTTP header\n- `--read-timeout=<number>` - socket read timeout for http server\n- `--write-timeout=<number>` - socker write timeout for http server\n\n### Docker Image\n",
                      "markdown": "`- `--context-path=<path>` - base context path (new root for application routes)\n- `--depth=<number>` - levels of nested repos for multitenancy\n- `--cors-alloworigin=<value>` - value to set in the Access-Control-Allow-Origin HTTP header\n- `--read-timeout=<number>` - socket read timeout for http server\n- `--write-timeout=<number>` - socker write timeout for http server\n\n### Docker Image\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 438,
                  "startColumn": 52,
                  "endLine": 438,
                  "endColumn": 58,
                  "snippet": {
                    "text": "-  `--tls-ca-cert=<cacert>` - path to tls certificate file\n\n#### Just generating index.yaml\nYou can specify the `--gen-index` option if you only wish to use _ChartMuseum_ to generate your index.yaml file. Note that this will only work with `--depth=0`.\n\nThe contents of index.yaml will be printed to stdout and the program will exit. This is useful if you are satisfied with your current Helm CI/CD process and/or don't want to monitor another webservice.\n\n",
                    "rendered": {
                      "text": "-  `--tls-ca-cert=<cacert>` - path to tls certificate file\n\n#### Just generating index.yaml\nYou can specify the `--gen-index` option if you only wish to use _ChartMuseum_ to generate your index.yaml file. Note that this will only work with `--depth=0`.\n\nThe contents of index.yaml will be printed to stdout and the program will exit. This is useful if you are satisfied with your current Helm CI/CD process and/or don't want to monitor another webservice.\n\n",
                      "markdown": "`-  `--tls-ca-cert=<cacert>` - path to tls certificate file\n\n#### Just generating index.yaml\nYou can specify the `--gen-index` option if you only wish to use _ChartMuseum_ to generate your index.yaml file. Note that this will only work with `--depth=0`.\n\nThe contents of index.yaml will be printed to stdout and the program will exit. This is useful if you are satisfied with your current Helm CI/CD process and/or don't want to monitor another webservice.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 418,
                  "startColumn": 132,
                  "endLine": 418,
                  "endColumn": 138,
                  "snippet": {
                    "text": "\nThe `type` is always \"artifact-repository\", the `name` is the namespace/tenant (just use the string \"repo\" if using single-tenant server), and `actions` is an array of actions the user can perform (\"pull\" and/or \"push).\n\nIf your JWT token structure is different, you can configure a [JMESPath string](https://jmespath.org/). So you can define the way to find the allowed actions yourself.\nFor the `type` and the the `name` you can use following placeholder\n* name: `$NAMESPACE`\n* type: `$ACCESS_ENTRY_TYPE`\n",
                    "rendered": {
                      "text": "\nThe `type` is always \"artifact-repository\", the `name` is the namespace/tenant (just use the string \"repo\" if using single-tenant server), and `actions` is an array of actions the user can perform (\"pull\" and/or \"push).\n\nIf your JWT token structure is different, you can configure a [JMESPath string](https://jmespath.org/). So you can define the way to find the allowed actions yourself.\nFor the `type` and the the `name` you can use following placeholder\n* name: `$NAMESPACE`\n* type: `$ACCESS_ENTRY_TYPE`\n",
                      "markdown": "`\nThe `type` is always \"artifact-repository\", the `name` is the namespace/tenant (just use the string \"repo\" if using single-tenant server), and `actions` is an array of actions the user can perform (\"pull\" and/or \"push).\n\nIf your JWT token structure is different, you can configure a [JMESPath string](https://jmespath.org/). So you can define the way to find the allowed actions yourself.\nFor the `type` and the the `name` you can use following placeholder\n* name: `$NAMESPACE`\n* type: `$ACCESS_ENTRY_TYPE`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 396,
                  "startColumn": 44,
                  "endLine": 396,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\nUsing options above, *ChartMuseum* is configured with a public key, and will accept RS256 JWT tokens signed by the associated private key, passed in the `Authorization` header. You can use the [chartmuseum/auth](https://github.com/chartmuseum/auth) Go library to generate valid JWT tokens.\n\n##### JWT Token without a custom JMESPath to find actions\n\nIn order to gain access to a specific resource, the JWT token must contain an `access` section in the claims. This section indicates which resources the user is able to access. Here is an example token payload:\n\n",
                    "rendered": {
                      "text": "\nUsing options above, *ChartMuseum* is configured with a public key, and will accept RS256 JWT tokens signed by the associated private key, passed in the `Authorization` header. You can use the [chartmuseum/auth](https://github.com/chartmuseum/auth) Go library to generate valid JWT tokens.\n\n##### JWT Token without a custom JMESPath to find actions\n\nIn order to gain access to a specific resource, the JWT token must contain an `access` section in the claims. This section indicates which resources the user is able to access. Here is an example token payload:\n\n",
                      "markdown": "`\nUsing options above, *ChartMuseum* is configured with a public key, and will accept RS256 JWT tokens signed by the associated private key, passed in the `Authorization` header. You can use the [chartmuseum/auth](https://github.com/chartmuseum/auth) Go library to generate valid JWT tokens.\n\n##### JWT Token without a custom JMESPath to find actions\n\nIn order to gain access to a specific resource, the JWT token must contain an `access` section in the claims. This section indicates which resources the user is able to access. Here is an example token payload:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 392,
                  "startColumn": 66,
                  "endLine": 392,
                  "endColumn": 72,
                  "snippet": {
                    "text": "- `--auth-realm=<realm>` - authorization server url\n- `--auth-service=<service>` - authorization server service name\n- `--auth-cert-path=<path>` - path to authorization server public pem file\n- `--auth-actions-search-path=<JMESPath>` - (optional) JMESPath to find allowed actions in a jwt token\n\nUsing options above, *ChartMuseum* is configured with a public key, and will accept RS256 JWT tokens signed by the associated private key, passed in the `Authorization` header. You can use the [chartmuseum/auth](https://github.com/chartmuseum/auth) Go library to generate valid JWT tokens.\n\n",
                    "rendered": {
                      "text": "- `--auth-realm=<realm>` - authorization server url\n- `--auth-service=<service>` - authorization server service name\n- `--auth-cert-path=<path>` - path to authorization server public pem file\n- `--auth-actions-search-path=<JMESPath>` - (optional) JMESPath to find allowed actions in a jwt token\n\nUsing options above, *ChartMuseum* is configured with a public key, and will accept RS256 JWT tokens signed by the associated private key, passed in the `Authorization` header. You can use the [chartmuseum/auth](https://github.com/chartmuseum/auth) Go library to generate valid JWT tokens.\n\n",
                      "markdown": "`- `--auth-realm=<realm>` - authorization server url\n- `--auth-service=<service>` - authorization server service name\n- `--auth-cert-path=<path>` - path to authorization server public pem file\n- `--auth-actions-search-path=<JMESPath>` - (optional) JMESPath to find allowed actions in a jwt token\n\nUsing options above, *ChartMuseum* is configured with a public key, and will accept RS256 JWT tokens signed by the associated private key, passed in the `Authorization` header. You can use the [chartmuseum/auth](https://github.com/chartmuseum/auth) Go library to generate valid JWT tokens.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 390,
                  "startColumn": 51,
                  "endLine": 390,
                  "endColumn": 60,
                  "snippet": {
                    "text": "If all of the following options are provided, bearer auth will protect all routes:\n- `--bearer-auth` - enables bearer auth\n- `--auth-realm=<realm>` - authorization server url\n- `--auth-service=<service>` - authorization server service name\n- `--auth-cert-path=<path>` - path to authorization server public pem file\n- `--auth-actions-search-path=<JMESPath>` - (optional) JMESPath to find allowed actions in a jwt token\n\n",
                    "rendered": {
                      "text": "If all of the following options are provided, bearer auth will protect all routes:\n- `--bearer-auth` - enables bearer auth\n- `--auth-realm=<realm>` - authorization server url\n- `--auth-service=<service>` - authorization server service name\n- `--auth-cert-path=<path>` - path to authorization server public pem file\n- `--auth-actions-search-path=<JMESPath>` - (optional) JMESPath to find allowed actions in a jwt token\n\n",
                      "markdown": "`If all of the following options are provided, bearer auth will protect all routes:\n- `--bearer-auth` - enables bearer auth\n- `--auth-realm=<realm>` - authorization server url\n- `--auth-service=<service>` - authorization server service name\n- `--auth-cert-path=<path>` - path to authorization server public pem file\n- `--auth-actions-search-path=<JMESPath>` - (optional) JMESPath to find allowed actions in a jwt token\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 341,
                  "startColumn": 36,
                  "endLine": 341,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\nMake sure your environment is properly setup to access `my-cos-bucket`.\n\nTo do so, you must set the following env vars:\n- `TENCENT_CLOUD_COS_SECRET_ID`\n- `TENCENT_CLOUD_COS_SECRET_KEY`\n\n",
                    "rendered": {
                      "text": "\nMake sure your environment is properly setup to access `my-cos-bucket`.\n\nTo do so, you must set the following env vars:\n- `TENCENT_CLOUD_COS_SECRET_ID`\n- `TENCENT_CLOUD_COS_SECRET_KEY`\n\n",
                      "markdown": "`\nMake sure your environment is properly setup to access `my-cos-bucket`.\n\nTo do so, you must set the following env vars:\n- `TENCENT_CLOUD_COS_SECRET_ID`\n- `TENCENT_CLOUD_COS_SECRET_KEY`\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 36,
                  "endLine": 325,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\nMake sure your environment is properly setup to access `my-bos-bucket`.\n\nTo do so, you must set the following env vars:\n- `BAIDU_CLOUD_ACCESS_KEY_ID`\n- `BAIDU_CLOUD_ACCESS_KEY_SECRET`\n\n",
                    "rendered": {
                      "text": "\nMake sure your environment is properly setup to access `my-bos-bucket`.\n\nTo do so, you must set the following env vars:\n- `BAIDU_CLOUD_ACCESS_KEY_ID`\n- `BAIDU_CLOUD_ACCESS_KEY_SECRET`\n\n",
                      "markdown": "`\nMake sure your environment is properly setup to access `my-bos-bucket`.\n\nTo do so, you must set the following env vars:\n- `BAIDU_CLOUD_ACCESS_KEY_ID`\n- `BAIDU_CLOUD_ACCESS_KEY_SECRET`\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 293,
                  "startColumn": 44,
                  "endLine": 293,
                  "endColumn": 49,
                  "snippet": {
                    "text": "  --storage-openstack-region=\"myregion\"\n```\n\nFor Swift V1 Auth you must set the following env vars:\n- `ST_AUTH`\n- `ST_USER`\n- `ST_KEY`\n",
                    "rendered": {
                      "text": "  --storage-openstack-region=\"myregion\"\n```\n\nFor Swift V1 Auth you must set the following env vars:\n- `ST_AUTH`\n- `ST_USER`\n- `ST_KEY`\n",
                      "markdown": "`  --storage-openstack-region=\"myregion\"\n```\n\nFor Swift V1 Auth you must set the following env vars:\n- `ST_AUTH`\n- `ST_USER`\n- `ST_KEY`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 278,
                  "startColumn": 36,
                  "endLine": 278,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\nMake sure your environment is properly setup to access `mycontainer`.\n\nTo do so, you must set the following env vars (depending on your openstack version):\n- `OS_AUTH_URL`\n- either `OS_PROJECT_NAME` or `OS_TENANT_NAME` or `OS_PROJECT_ID` or `OS_TENANT_ID`\n- either `OS_DOMAIN_NAME` or `OS_DOMAIN_ID`\n",
                    "rendered": {
                      "text": "\nMake sure your environment is properly setup to access `mycontainer`.\n\nTo do so, you must set the following env vars (depending on your openstack version):\n- `OS_AUTH_URL`\n- either `OS_PROJECT_NAME` or `OS_TENANT_NAME` or `OS_PROJECT_ID` or `OS_TENANT_ID`\n- either `OS_DOMAIN_NAME` or `OS_DOMAIN_ID`\n",
                      "markdown": "`\nMake sure your environment is properly setup to access `mycontainer`.\n\nTo do so, you must set the following env vars (depending on your openstack version):\n- `OS_AUTH_URL`\n- either `OS_PROJECT_NAME` or `OS_TENANT_NAME` or `OS_PROJECT_ID` or `OS_TENANT_ID`\n- either `OS_DOMAIN_NAME` or `OS_DOMAIN_ID`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 36,
                  "endLine": 262,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\nMake sure your environment is properly setup to access `my-oss-bucket`.\n\nTo do so, you must set the following env vars:\n- `ALIBABA_CLOUD_ACCESS_KEY_ID`\n- `ALIBABA_CLOUD_ACCESS_KEY_SECRET`\n\n",
                    "rendered": {
                      "text": "\nMake sure your environment is properly setup to access `my-oss-bucket`.\n\nTo do so, you must set the following env vars:\n- `ALIBABA_CLOUD_ACCESS_KEY_ID`\n- `ALIBABA_CLOUD_ACCESS_KEY_SECRET`\n\n",
                      "markdown": "`\nMake sure your environment is properly setup to access `my-oss-bucket`.\n\nTo do so, you must set the following env vars:\n- `ALIBABA_CLOUD_ACCESS_KEY_ID`\n- `ALIBABA_CLOUD_ACCESS_KEY_SECRET`\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 36,
                  "endLine": 247,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\nMake sure your environment is properly setup to access `mycontainer`.\n\nTo do so, you must set the following env vars:\n- `AZURE_STORAGE_ACCOUNT`\n- `AZURE_STORAGE_ACCESS_KEY`\n\n",
                    "rendered": {
                      "text": "\nMake sure your environment is properly setup to access `mycontainer`.\n\nTo do so, you must set the following env vars:\n- `AZURE_STORAGE_ACCOUNT`\n- `AZURE_STORAGE_ACCESS_KEY`\n\n",
                      "markdown": "`\nMake sure your environment is properly setup to access `mycontainer`.\n\nTo do so, you must set the following env vars:\n- `AZURE_STORAGE_ACCOUNT`\n- `AZURE_STORAGE_ACCESS_KEY`\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 130,
                  "endLine": 229,
                  "endColumn": 139,
                  "snippet": {
                    "text": "#### Using with Google Cloud Storage\nMake sure your environment is properly setup to access `my-gcs-bucket`.\n\nOne way to do so is to set the `GOOGLE_APPLICATION_CREDENTIALS` var in your environment, pointing to the JSON file containing your service account key:\n```\nexport GOOGLE_APPLICATION_CREDENTIALS=\"/home/user/Downloads/[FILE_NAME].json\"\n```\n",
                    "rendered": {
                      "text": "#### Using with Google Cloud Storage\nMake sure your environment is properly setup to access `my-gcs-bucket`.\n\nOne way to do so is to set the `GOOGLE_APPLICATION_CREDENTIALS` var in your environment, pointing to the JSON file containing your service account key:\n```\nexport GOOGLE_APPLICATION_CREDENTIALS=\"/home/user/Downloads/[FILE_NAME].json\"\n```\n",
                      "markdown": "`#### Using with Google Cloud Storage\nMake sure your environment is properly setup to access `my-gcs-bucket`.\n\nOne way to do so is to set the `GOOGLE_APPLICATION_CREDENTIALS` var in your environment, pointing to the JSON file containing your service account key:\n```\nexport GOOGLE_APPLICATION_CREDENTIALS=\"/home/user/Downloads/[FILE_NAME].json\"\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 25,
                  "endLine": 188,
                  "endColumn": 34,
                  "snippet": {
                    "text": "}\n```\n\nIn order to work with AWS service accounts you may need to set `AWS_SDK_LOAD_CONFIG=1` in your environment.\nFor more context, please see [here](https://github.com/helm/chartmuseum/issues/280#issuecomment-592292527).\n\nIf you are using S3-Compatible storage, provider of S3 storage has [disabled path-style and force virtual hosted-style](https://aws.amazon.com/cn/blogs/aws/amazon-s3-path-deprecation-plan-the-rest-of-the-story/), you can use specify `storage-amazon-force-path-style` options as following example:\n",
                    "rendered": {
                      "text": "}\n```\n\nIn order to work with AWS service accounts you may need to set `AWS_SDK_LOAD_CONFIG=1` in your environment.\nFor more context, please see [here](https://github.com/helm/chartmuseum/issues/280#issuecomment-592292527).\n\nIf you are using S3-Compatible storage, provider of S3 storage has [disabled path-style and force virtual hosted-style](https://aws.amazon.com/cn/blogs/aws/amazon-s3-path-deprecation-plan-the-rest-of-the-story/), you can use specify `storage-amazon-force-path-style` options as following example:\n",
                      "markdown": "`}\n```\n\nIn order to work with AWS service accounts you may need to set `AWS_SDK_LOAD_CONFIG=1` in your environment.\nFor more context, please see [here](https://github.com/helm/chartmuseum/issues/280#issuecomment-592292527).\n\nIf you are using S3-Compatible storage, provider of S3 storage has [disabled path-style and force virtual hosted-style](https://aws.amazon.com/cn/blogs/aws/amazon-s3-path-deprecation-plan-the-rest-of-the-story/), you can use specify `storage-amazon-force-path-style` options as following example:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 45,
                  "endLine": 132,
                  "endColumn": 51,
                  "snippet": {
                    "text": "authrealm: <authorization server url>\nauthservice: <authorization server service name>\nauthcertpath: <path to authorization server public pem file>\nauthactionssearchpath: <optional: JMESPath to find allowed actions in a jwt token>\ndepth: 2\n```\n\n",
                    "rendered": {
                      "text": "authrealm: <authorization server url>\nauthservice: <authorization server service name>\nauthcertpath: <path to authorization server public pem file>\nauthactionssearchpath: <optional: JMESPath to find allowed actions in a jwt token>\ndepth: 2\n```\n\n",
                      "markdown": "`authrealm: <authorization server url>\nauthservice: <authorization server service name>\nauthcertpath: <path to authorization server public pem file>\nauthactionssearchpath: <optional: JMESPath to find allowed actions in a jwt token>\ndepth: 2\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 34,
                  "endLine": 130,
                  "endColumn": 43,
                  "snippet": {
                    "text": "storage.local.rootdir: <storage_path>\nbearerauth: 1\nauthrealm: <authorization server url>\nauthservice: <authorization server service name>\nauthcertpath: <path to authorization server public pem file>\nauthactionssearchpath: <optional: JMESPath to find allowed actions in a jwt token>\ndepth: 2\n",
                    "rendered": {
                      "text": "storage.local.rootdir: <storage_path>\nbearerauth: 1\nauthrealm: <authorization server url>\nauthservice: <authorization server service name>\nauthcertpath: <path to authorization server public pem file>\nauthactionssearchpath: <optional: JMESPath to find allowed actions in a jwt token>\ndepth: 2\n",
                      "markdown": "`storage.local.rootdir: <storage_path>\nbearerauth: 1\nauthrealm: <authorization server url>\nauthservice: <authorization server service name>\nauthcertpath: <path to authorization server public pem file>\nauthactionssearchpath: <optional: JMESPath to find allowed actions in a jwt token>\ndepth: 2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 16,
                  "endLine": 114,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\nAll command-line options can be specified as environment variables, which are defined by the command-line option, capitalized, with all `-`'s replaced with `_`'s.\n\nFor example, the env var `STORAGE_AMAZON_BUCKET` can be used in place of `--storage-amazon-bucket`.\n\n##### Using a configuration file\nUse `chartmuseum --config config.yaml` to read configuration from a file.\n",
                    "rendered": {
                      "text": "\nAll command-line options can be specified as environment variables, which are defined by the command-line option, capitalized, with all `-`'s replaced with `_`'s.\n\nFor example, the env var `STORAGE_AMAZON_BUCKET` can be used in place of `--storage-amazon-bucket`.\n\n##### Using a configuration file\nUse `chartmuseum --config config.yaml` to read configuration from a file.\n",
                      "markdown": "`\nAll command-line options can be specified as environment variables, which are defined by the command-line option, capitalized, with all `-`'s replaced with `_`'s.\n\nFor example, the env var `STORAGE_AMAZON_BUCKET` can be used in place of `--storage-amazon-bucket`.\n\n##### Using a configuration file\nUse `chartmuseum --config config.yaml` to read configuration from a file.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 86,
                  "endLine": 102,
                  "snippet": {
                    "text": "\nYou can use the installer script:\n```\ncurl https://raw.githubusercontent.com/helm/chartmuseum/main/scripts/get-chartmuseum | bash\n```\n\nor download manually from the [releases page](https://github.com/helm/chartmuseum/releases),\nwhich also contains all package checksums and signatures.\n",
                    "rendered": {
                      "text": "\nYou can use the installer script:\n```\ncurl https://raw.githubusercontent.com/helm/chartmuseum/main/scripts/get-chartmuseum | bash\n```\n\nor download manually from the [releases page](https://github.com/helm/chartmuseum/releases),\nwhich also contains all package checksums and signatures.\n",
                      "markdown": "`\nYou can use the installer script:\n```\ncurl https://raw.githubusercontent.com/helm/chartmuseum/main/scripts/get-chartmuseum | bash\n```\n\nor download manually from the [releases page](https://github.com/helm/chartmuseum/releases),\nwhich also contains all package checksums and signatures.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 3,
                  "endLine": 101,
                  "endColumn": 5,
                  "snippet": {
                    "text": "#### Installation\n\nYou can use the installer script:\n```\ncurl https://raw.githubusercontent.com/helm/chartmuseum/main/scripts/get-chartmuseum | bash\n```\n\nor download manually from the [releases page](https://github.com/helm/chartmuseum/releases),\n",
                    "rendered": {
                      "text": "#### Installation\n\nYou can use the installer script:\n```\ncurl https://raw.githubusercontent.com/helm/chartmuseum/main/scripts/get-chartmuseum | bash\n```\n\nor download manually from the [releases page](https://github.com/helm/chartmuseum/releases),\n",
                      "markdown": "`#### Installation\n\nYou can use the installer script:\n```\ncurl https://raw.githubusercontent.com/helm/chartmuseum/main/scripts/get-chartmuseum | bash\n```\n\nor download manually from the [releases page](https://github.com/helm/chartmuseum/releases),\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 7,
                  "endLine": 71,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nBoth files can also be uploaded at once (or one at a time) on the `/api/charts` route using the `multipart/form-data` format:\n\n```bash\ncurl -F \"chart=@mychart-0.1.0.tgz\" -F \"prov=@mychart-0.1.0.tgz.prov\" http://localhost:8080/api/charts\n```\n\nYou can also use the [helm-push plugin](https://github.com/chartmuseum/helm-push):\n",
                    "rendered": {
                      "text": "\nBoth files can also be uploaded at once (or one at a time) on the `/api/charts` route using the `multipart/form-data` format:\n\n```bash\ncurl -F \"chart=@mychart-0.1.0.tgz\" -F \"prov=@mychart-0.1.0.tgz.prov\" http://localhost:8080/api/charts\n```\n\nYou can also use the [helm-push plugin](https://github.com/chartmuseum/helm-push):\n",
                      "markdown": "`\nBoth files can also be uploaded at once (or one at a time) on the `/api/charts` route using the `multipart/form-data` format:\n\n```bash\ncurl -F \"chart=@mychart-0.1.0.tgz\" -F \"prov=@mychart-0.1.0.tgz.prov\" http://localhost:8080/api/charts\n```\n\nYou can also use the [helm-push plugin](https://github.com/chartmuseum/helm-push):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 7,
                  "endLine": 65,
                  "endColumn": 5,
                  "snippet": {
                    "text": "```\n\nIf you've signed your package and generated a [provenance file](https://github.com/helm/helm-www/blob/master/content/en/docs/topics/provenance.md), upload it with:\n```bash\ncurl --data-binary \"@mychart-0.1.0.tgz.prov\" http://localhost:8080/api/prov\n```\n\nBoth files can also be uploaded at once (or one at a time) on the `/api/charts` route using the `multipart/form-data` format:\n",
                    "rendered": {
                      "text": "```\n\nIf you've signed your package and generated a [provenance file](https://github.com/helm/helm-www/blob/master/content/en/docs/topics/provenance.md), upload it with:\n```bash\ncurl --data-binary \"@mychart-0.1.0.tgz.prov\" http://localhost:8080/api/prov\n```\n\nBoth files can also be uploaded at once (or one at a time) on the `/api/charts` route using the `multipart/form-data` format:\n",
                      "markdown": "````\n\nIf you've signed your package and generated a [provenance file](https://github.com/helm/helm-www/blob/master/content/en/docs/topics/provenance.md), upload it with:\n```bash\ncurl --data-binary \"@mychart-0.1.0.tgz.prov\" http://localhost:8080/api/prov\n```\n\nBoth files can also be uploaded at once (or one at a time) on the `/api/charts` route using the `multipart/form-data` format:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/chartmuseum.zip/README.md"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 7,
                  "endLine": 60,
                  "endColumn": 5,
                  "snippet": {
                    "text": "```\n\nUpload `mychart-0.1.0.tgz`:\n```bash\ncurl --data-binary \"@mychart-0.1.0.tgz\" http://localhost:8080/api/charts\n```\n\nIf you've signed your package and generated a [provenance file](https://github.com/helm/helm-www/blob/master/content/en/docs/topics/provenance.md), upload it with:\n",
                    "rendered": {
                      "text": "```\n\nUpload `mychart-0.1.0.tgz`:\n```bash\ncurl --data-binary \"@mychart-0.1.0.tgz\" http://localhost:8080/api/charts\n```\n\nIf you've signed your package and generated a [provenance file](https://github.com/helm/helm-www/blob/master/content/en/docs/topics/provenance.md), upload it with:\n",
                      "markdown": "````\n\nUpload `mychart-0.1.0.tgz`:\n```bash\ncurl --data-binary \"@mychart-0.1.0.tgz\" http://localhost:8080/api/charts\n```\n\nIf you've signed your package and generated a [provenance file](https://github.com/helm/helm-www/blob/master/content/en/docs/topics/provenance.md), upload it with:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}