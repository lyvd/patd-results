{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/source/xml_parser.c"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 45,
                  "endLine": 252,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\n    struct aws_xml_parser *parser = node->parser;\n\n    AWS_FATAL_ASSERT(!node->processed && \"XML node can be traversed, or read as body, but not both.\");\n    node->processed = true;\n    struct cb_stack_data stack_data = {\n        .cb = on_node_encountered,\n",
                    "rendered": {
                      "text": "\n    struct aws_xml_parser *parser = node->parser;\n\n    AWS_FATAL_ASSERT(!node->processed && \"XML node can be traversed, or read as body, but not both.\");\n    node->processed = true;\n    struct cb_stack_data stack_data = {\n        .cb = on_node_encountered,\n",
                      "markdown": "`\n    struct aws_xml_parser *parser = node->parser;\n\n    AWS_FATAL_ASSERT(!node->processed && \"XML node can be traversed, or read as body, but not both.\");\n    node->processed = true;\n    struct cb_stack_data stack_data = {\n        .cb = on_node_encountered,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/source/xml_parser.c"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 45,
                  "endLine": 238,
                  "endColumn": 51,
                  "snippet": {
                    "text": "int aws_xml_node_as_body(struct aws_xml_node *node, struct aws_byte_cursor *out_body) {\n    AWS_PRECONDITION(node);\n\n    AWS_FATAL_ASSERT(!node->processed && \"XML node can be traversed, or read as body, but not both.\");\n    node->processed = true;\n    return s_advance_to_closing_tag(node->parser, node, out_body);\n}\n",
                    "rendered": {
                      "text": "int aws_xml_node_as_body(struct aws_xml_node *node, struct aws_byte_cursor *out_body) {\n    AWS_PRECONDITION(node);\n\n    AWS_FATAL_ASSERT(!node->processed && \"XML node can be traversed, or read as body, but not both.\");\n    node->processed = true;\n    return s_advance_to_closing_tag(node->parser, node, out_body);\n}\n",
                      "markdown": "`int aws_xml_node_as_body(struct aws_xml_node *node, struct aws_byte_cursor *out_body) {\n    AWS_PRECONDITION(node);\n\n    AWS_FATAL_ASSERT(!node->processed && \"XML node can be traversed, or read as body, but not both.\");\n    node->processed = true;\n    return s_advance_to_closing_tag(node->parser, node, out_body);\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/bin/system_info/print_system_info.c"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 35,
                  "endLine": 34,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    fprintf(stdout, \"  'product name': '\" PRInSTR \"',\\n\", (int)product_name.len, product_name.ptr);\n    fprintf(\n        stdout, \"  'number of processors': '%lu',\\n\", (unsigned long)aws_system_environment_get_processor_count(env));\n    size_t numa_nodes = aws_system_environment_get_cpu_group_count(env);\n\n    if (numa_nodes > 1) {\n        fprintf(stdout, \"  'numa architecture': 'true',\\n\");\n",
                    "rendered": {
                      "text": "    fprintf(stdout, \"  'product name': '\" PRInSTR \"',\\n\", (int)product_name.len, product_name.ptr);\n    fprintf(\n        stdout, \"  'number of processors': '%lu',\\n\", (unsigned long)aws_system_environment_get_processor_count(env));\n    size_t numa_nodes = aws_system_environment_get_cpu_group_count(env);\n\n    if (numa_nodes > 1) {\n        fprintf(stdout, \"  'numa architecture': 'true',\\n\");\n",
                      "markdown": "`    fprintf(stdout, \"  'product name': '\" PRInSTR \"',\\n\", (int)product_name.len, product_name.ptr);\n    fprintf(\n        stdout, \"  'number of processors': '%lu',\\n\", (unsigned long)aws_system_environment_get_processor_count(env));\n    size_t numa_nodes = aws_system_environment_get_cpu_group_count(env);\n\n    if (numa_nodes > 1) {\n        fprintf(stdout, \"  'numa architecture': 'true',\\n\");\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/bin/system_info/print_system_info.c"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 80,
                  "endLine": 33,
                  "endColumn": 95,
                  "snippet": {
                    "text": "    struct aws_byte_cursor product_name = aws_system_environment_get_virtualization_product_name(env);\n    fprintf(stdout, \"  'product name': '\" PRInSTR \"',\\n\", (int)product_name.len, product_name.ptr);\n    fprintf(\n        stdout, \"  'number of processors': '%lu',\\n\", (unsigned long)aws_system_environment_get_processor_count(env));\n    size_t numa_nodes = aws_system_environment_get_cpu_group_count(env);\n\n    if (numa_nodes > 1) {\n",
                    "rendered": {
                      "text": "    struct aws_byte_cursor product_name = aws_system_environment_get_virtualization_product_name(env);\n    fprintf(stdout, \"  'product name': '\" PRInSTR \"',\\n\", (int)product_name.len, product_name.ptr);\n    fprintf(\n        stdout, \"  'number of processors': '%lu',\\n\", (unsigned long)aws_system_environment_get_processor_count(env));\n    size_t numa_nodes = aws_system_environment_get_cpu_group_count(env);\n\n    if (numa_nodes > 1) {\n",
                      "markdown": "`    struct aws_byte_cursor product_name = aws_system_environment_get_virtualization_product_name(env);\n    fprintf(stdout, \"  'product name': '\" PRInSTR \"',\\n\", (int)product_name.len, product_name.ptr);\n    fprintf(\n        stdout, \"  'number of processors': '%lu',\\n\", (unsigned long)aws_system_environment_get_processor_count(env));\n    size_t numa_nodes = aws_system_environment_get_cpu_group_count(env);\n\n    if (numa_nodes > 1) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/bin/system_info/print_system_info.c"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 53,
                  "endLine": 30,
                  "endColumn": 68,
                  "snippet": {
                    "text": "        \"  'virtualization vendor': '\" PRInSTR \"',\\n\",\n        (int)virtualization_vendor.len,\n        virtualization_vendor.ptr);\n    struct aws_byte_cursor product_name = aws_system_environment_get_virtualization_product_name(env);\n    fprintf(stdout, \"  'product name': '\" PRInSTR \"',\\n\", (int)product_name.len, product_name.ptr);\n    fprintf(\n        stdout, \"  'number of processors': '%lu',\\n\", (unsigned long)aws_system_environment_get_processor_count(env));\n",
                    "rendered": {
                      "text": "        \"  'virtualization vendor': '\" PRInSTR \"',\\n\",\n        (int)virtualization_vendor.len,\n        virtualization_vendor.ptr);\n    struct aws_byte_cursor product_name = aws_system_environment_get_virtualization_product_name(env);\n    fprintf(stdout, \"  'product name': '\" PRInSTR \"',\\n\", (int)product_name.len, product_name.ptr);\n    fprintf(\n        stdout, \"  'number of processors': '%lu',\\n\", (unsigned long)aws_system_environment_get_processor_count(env));\n",
                      "markdown": "`        \"  'virtualization vendor': '\" PRInSTR \"',\\n\",\n        (int)virtualization_vendor.len,\n        virtualization_vendor.ptr);\n    struct aws_byte_cursor product_name = aws_system_environment_get_virtualization_product_name(env);\n    fprintf(stdout, \"  'product name': '\" PRInSTR \"',\\n\", (int)product_name.len, product_name.ptr);\n    fprintf(\n        stdout, \"  'number of processors': '%lu',\\n\", (unsigned long)aws_system_environment_get_processor_count(env));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/bin/system_info/print_system_info.c"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 62,
                  "endLine": 24,
                  "endColumn": 77,
                  "snippet": {
                    "text": "\n    fprintf(stdout, \"crt-detected env: {\\n\");\n\n    struct aws_byte_cursor virtualization_vendor = aws_system_environment_get_virtualization_vendor(env);\n    fprintf(\n        stdout,\n        \"  'virtualization vendor': '\" PRInSTR \"',\\n\",\n",
                    "rendered": {
                      "text": "\n    fprintf(stdout, \"crt-detected env: {\\n\");\n\n    struct aws_byte_cursor virtualization_vendor = aws_system_environment_get_virtualization_vendor(env);\n    fprintf(\n        stdout,\n        \"  'virtualization vendor': '\" PRInSTR \"',\\n\",\n",
                      "markdown": "`\n    fprintf(stdout, \"crt-detected env: {\\n\");\n\n    struct aws_byte_cursor virtualization_vendor = aws_system_environment_get_virtualization_vendor(env);\n    fprintf(\n        stdout,\n        \"  'virtualization vendor': '\" PRInSTR \"',\\n\",\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/stubs/aws_hash_table_no_slots_override.c"
                },
                "region": {
                  "startLine": 233,
                  "startColumn": 66,
                  "endLine": 233,
                  "endColumn": 70,
                  "snippet": {
                    "text": "    AWS_PRECONDITION(aws_hash_iter_is_valid(iter));\n    AWS_PRECONDITION(\n        iter->map->p_impl->entry_count > 0,\n        \"The hash_table_state pointed by input [iter] must contain at least one entry.\");\n\n    /* reduce the size of the underlying map */\n    iter->map->p_impl->entry_count--;\n",
                    "rendered": {
                      "text": "    AWS_PRECONDITION(aws_hash_iter_is_valid(iter));\n    AWS_PRECONDITION(\n        iter->map->p_impl->entry_count > 0,\n        \"The hash_table_state pointed by input [iter] must contain at least one entry.\");\n\n    /* reduce the size of the underlying map */\n    iter->map->p_impl->entry_count--;\n",
                      "markdown": "`    AWS_PRECONDITION(aws_hash_iter_is_valid(iter));\n    AWS_PRECONDITION(\n        iter->map->p_impl->entry_count > 0,\n        \"The hash_table_state pointed by input [iter] must contain at least one entry.\");\n\n    /* reduce the size of the underlying map */\n    iter->map->p_impl->entry_count--;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/source/windows/environment.c"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 41,
                  "endLine": 34,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\n    *value_out = aws_string_new_from_c_str(allocator, value);\n    if (*value_out == NULL) {\n        return aws_raise_error(AWS_ERROR_ENVIRONMENT_GET);\n    }\n\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "\n    *value_out = aws_string_new_from_c_str(allocator, value);\n    if (*value_out == NULL) {\n        return aws_raise_error(AWS_ERROR_ENVIRONMENT_GET);\n    }\n\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`\n    *value_out = aws_string_new_from_c_str(allocator, value);\n    if (*value_out == NULL) {\n        return aws_raise_error(AWS_ERROR_ENVIRONMENT_GET);\n    }\n\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/source/uri.c"
                },
                "region": {
                  "startLine": 356,
                  "startColumn": 29,
                  "endLine": 356,
                  "endColumn": 37,
                  "snippet": {
                    "text": "                parser->uri->user.ptr = userinfo_parse_csr.ptr;\n                parser->uri->user.len = info_delim - userinfo_parse_csr.ptr;\n                parser->uri->password.ptr = info_delim + 1;\n                parser->uri->password.len = parser->uri->userinfo.len - parser->uri->user.len - 1;\n            } else {\n                parser->uri->user = userinfo_parse_csr;\n            }\n",
                    "rendered": {
                      "text": "                parser->uri->user.ptr = userinfo_parse_csr.ptr;\n                parser->uri->user.len = info_delim - userinfo_parse_csr.ptr;\n                parser->uri->password.ptr = info_delim + 1;\n                parser->uri->password.len = parser->uri->userinfo.len - parser->uri->user.len - 1;\n            } else {\n                parser->uri->user = userinfo_parse_csr;\n            }\n",
                      "markdown": "`                parser->uri->user.ptr = userinfo_parse_csr.ptr;\n                parser->uri->user.len = info_delim - userinfo_parse_csr.ptr;\n                parser->uri->password.ptr = info_delim + 1;\n                parser->uri->password.len = parser->uri->userinfo.len - parser->uri->user.len - 1;\n            } else {\n                parser->uri->user = userinfo_parse_csr;\n            }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/source/uri.c"
                },
                "region": {
                  "startLine": 355,
                  "startColumn": 29,
                  "endLine": 355,
                  "endColumn": 37,
                  "snippet": {
                    "text": "            if (info_delim) {\n                parser->uri->user.ptr = userinfo_parse_csr.ptr;\n                parser->uri->user.len = info_delim - userinfo_parse_csr.ptr;\n                parser->uri->password.ptr = info_delim + 1;\n                parser->uri->password.len = parser->uri->userinfo.len - parser->uri->user.len - 1;\n            } else {\n                parser->uri->user = userinfo_parse_csr;\n",
                    "rendered": {
                      "text": "            if (info_delim) {\n                parser->uri->user.ptr = userinfo_parse_csr.ptr;\n                parser->uri->user.len = info_delim - userinfo_parse_csr.ptr;\n                parser->uri->password.ptr = info_delim + 1;\n                parser->uri->password.len = parser->uri->userinfo.len - parser->uri->user.len - 1;\n            } else {\n                parser->uri->user = userinfo_parse_csr;\n",
                      "markdown": "`            if (info_delim) {\n                parser->uri->user.ptr = userinfo_parse_csr.ptr;\n                parser->uri->user.len = info_delim - userinfo_parse_csr.ptr;\n                parser->uri->password.ptr = info_delim + 1;\n                parser->uri->password.len = parser->uri->userinfo.len - parser->uri->user.len - 1;\n            } else {\n                parser->uri->user = userinfo_parse_csr;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/source/uri.c"
                },
                "region": {
                  "startLine": 351,
                  "startColumn": 45,
                  "endLine": 351,
                  "endColumn": 53,
                  "snippet": {
                    "text": "            /* RFC-3986 section 3.2.1: Use of the format \"user:password\" in the userinfo field is deprecated. But we\n             * treat the userinfo as URL here, also, if the format is not following URL pattern, you have the whole\n             * userinfo */\n            /* RFC-1738 section 3.1: <user>:<password> */\n            if (info_delim) {\n                parser->uri->user.ptr = userinfo_parse_csr.ptr;\n                parser->uri->user.len = info_delim - userinfo_parse_csr.ptr;\n",
                    "rendered": {
                      "text": "            /* RFC-3986 section 3.2.1: Use of the format \"user:password\" in the userinfo field is deprecated. But we\n             * treat the userinfo as URL here, also, if the format is not following URL pattern, you have the whole\n             * userinfo */\n            /* RFC-1738 section 3.1: <user>:<password> */\n            if (info_delim) {\n                parser->uri->user.ptr = userinfo_parse_csr.ptr;\n                parser->uri->user.len = info_delim - userinfo_parse_csr.ptr;\n",
                      "markdown": "`            /* RFC-3986 section 3.2.1: Use of the format \"user:password\" in the userinfo field is deprecated. But we\n             * treat the userinfo as URL here, also, if the format is not following URL pattern, you have the whole\n             * userinfo */\n            /* RFC-1738 section 3.1: <user>:<password> */\n            if (info_delim) {\n                parser->uri->user.ptr = userinfo_parse_csr.ptr;\n                parser->uri->user.len = info_delim - userinfo_parse_csr.ptr;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/source/uri.c"
                },
                "region": {
                  "startLine": 348,
                  "startColumn": 63,
                  "endLine": 348,
                  "endColumn": 71,
                  "snippet": {
                    "text": "            aws_byte_cursor_advance(&authority_parse_csr, 1);\n            struct aws_byte_cursor userinfo_parse_csr = parser->uri->userinfo;\n            uint8_t *info_delim = memchr(userinfo_parse_csr.ptr, ':', userinfo_parse_csr.len);\n            /* RFC-3986 section 3.2.1: Use of the format \"user:password\" in the userinfo field is deprecated. But we\n             * treat the userinfo as URL here, also, if the format is not following URL pattern, you have the whole\n             * userinfo */\n            /* RFC-1738 section 3.1: <user>:<password> */\n",
                    "rendered": {
                      "text": "            aws_byte_cursor_advance(&authority_parse_csr, 1);\n            struct aws_byte_cursor userinfo_parse_csr = parser->uri->userinfo;\n            uint8_t *info_delim = memchr(userinfo_parse_csr.ptr, ':', userinfo_parse_csr.len);\n            /* RFC-3986 section 3.2.1: Use of the format \"user:password\" in the userinfo field is deprecated. But we\n             * treat the userinfo as URL here, also, if the format is not following URL pattern, you have the whole\n             * userinfo */\n            /* RFC-1738 section 3.1: <user>:<password> */\n",
                      "markdown": "`            aws_byte_cursor_advance(&authority_parse_csr, 1);\n            struct aws_byte_cursor userinfo_parse_csr = parser->uri->userinfo;\n            uint8_t *info_delim = memchr(userinfo_parse_csr.ptr, ':', userinfo_parse_csr.len);\n            /* RFC-3986 section 3.2.1: Use of the format \"user:password\" in the userinfo field is deprecated. But we\n             * treat the userinfo as URL here, also, if the format is not following URL pattern, you have the whole\n             * userinfo */\n            /* RFC-1738 section 3.1: <user>:<password> */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/source/file.c"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 16,
                  "endLine": 237,
                  "endColumn": 22,
                  "snippet": {
                    "text": "int aws_directory_entry_iterator_previous(struct aws_directory_iterator *iterator) {\n    struct aws_linked_list_node *node = iterator->current_node;\n\n    if (!node || node == aws_linked_list_begin(&iterator->list_data)) {\n        return aws_raise_error(AWS_ERROR_LIST_EMPTY);\n    }\n\n",
                    "rendered": {
                      "text": "int aws_directory_entry_iterator_previous(struct aws_directory_iterator *iterator) {\n    struct aws_linked_list_node *node = iterator->current_node;\n\n    if (!node || node == aws_linked_list_begin(&iterator->list_data)) {\n        return aws_raise_error(AWS_ERROR_LIST_EMPTY);\n    }\n\n",
                      "markdown": "`int aws_directory_entry_iterator_previous(struct aws_directory_iterator *iterator) {\n    struct aws_linked_list_node *node = iterator->current_node;\n\n    if (!node || node == aws_linked_list_begin(&iterator->list_data)) {\n        return aws_raise_error(AWS_ERROR_LIST_EMPTY);\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/source/posix/environment.c"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 41,
                  "endLine": 24,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\n    *value_out = aws_string_new_from_c_str(allocator, value);\n    if (*value_out == NULL) {\n        return aws_raise_error(AWS_ERROR_ENVIRONMENT_GET);\n    }\n\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "\n    *value_out = aws_string_new_from_c_str(allocator, value);\n    if (*value_out == NULL) {\n        return aws_raise_error(AWS_ERROR_ENVIRONMENT_GET);\n    }\n\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`\n    *value_out = aws_string_new_from_c_str(allocator, value);\n    if (*value_out == NULL) {\n        return aws_raise_error(AWS_ERROR_ENVIRONMENT_GET);\n    }\n\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/source/posix/thread.c"
                },
                "region": {
                  "startLine": 473,
                  "startColumn": 12,
                  "endLine": 473,
                  "endColumn": 18,
                  "snippet": {
                    "text": "}\n\nvoid aws_thread_current_sleep(uint64_t nanos) {\n    uint64_t nano = 0;\n    time_t seconds = (time_t)aws_timestamp_convert(nanos, AWS_TIMESTAMP_NANOS, AWS_TIMESTAMP_SECS, &nano);\n\n    struct timespec tm = {\n",
                    "rendered": {
                      "text": "}\n\nvoid aws_thread_current_sleep(uint64_t nanos) {\n    uint64_t nano = 0;\n    time_t seconds = (time_t)aws_timestamp_convert(nanos, AWS_TIMESTAMP_NANOS, AWS_TIMESTAMP_SECS, &nano);\n\n    struct timespec tm = {\n",
                      "markdown": "`}\n\nvoid aws_thread_current_sleep(uint64_t nanos) {\n    uint64_t nano = 0;\n    time_t seconds = (time_t)aws_timestamp_convert(nanos, AWS_TIMESTAMP_NANOS, AWS_TIMESTAMP_SECS, &nano);\n\n    struct timespec tm = {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/source/cbor.c"
                },
                "region": {
                  "startLine": 477,
                  "startColumn": 81,
                  "endLine": 477,
                  "endColumn": 85,
                  "snippet": {
                    "text": "        case CBOR_DECODER_NEDATA:\n            AWS_LOGF_ERROR(\n                AWS_LS_COMMON_CBOR,\n                \"The decoder doesn't have enough data to decode the next element. At least %zu bytes more needed.\",\n                result.required);\n            decoder->error_code = AWS_ERROR_INVALID_CBOR;\n            break;\n",
                    "rendered": {
                      "text": "        case CBOR_DECODER_NEDATA:\n            AWS_LOGF_ERROR(\n                AWS_LS_COMMON_CBOR,\n                \"The decoder doesn't have enough data to decode the next element. At least %zu bytes more needed.\",\n                result.required);\n            decoder->error_code = AWS_ERROR_INVALID_CBOR;\n            break;\n",
                      "markdown": "`        case CBOR_DECODER_NEDATA:\n            AWS_LOGF_ERROR(\n                AWS_LS_COMMON_CBOR,\n                \"The decoder doesn't have enough data to decode the next element. At least %zu bytes more needed.\",\n                result.required);\n            decoder->error_code = AWS_ERROR_INVALID_CBOR;\n            break;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/source/common.c"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 18,
                  "endLine": 210,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        \"An invalid state was encountered.\"\n    ),\n    AWS_DEFINE_ERROR_INFO_COMMON(\n        AWS_ERROR_ENVIRONMENT_GET,\n        \"System call failure when getting an environment variable.\"\n    ),\n    AWS_DEFINE_ERROR_INFO_COMMON(\n",
                    "rendered": {
                      "text": "        \"An invalid state was encountered.\"\n    ),\n    AWS_DEFINE_ERROR_INFO_COMMON(\n        AWS_ERROR_ENVIRONMENT_GET,\n        \"System call failure when getting an environment variable.\"\n    ),\n    AWS_DEFINE_ERROR_INFO_COMMON(\n",
                      "markdown": "`        \"An invalid state was encountered.\"\n    ),\n    AWS_DEFINE_ERROR_INFO_COMMON(\n        AWS_ERROR_ENVIRONMENT_GET,\n        \"System call failure when getting an environment variable.\"\n    ),\n    AWS_DEFINE_ERROR_INFO_COMMON(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/source/common.c"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 17,
                  "endLine": 115,
                  "endColumn": 23,
                  "snippet": {
                    "text": "        \"Invalid hex string.\"),\n    AWS_DEFINE_ERROR_INFO_COMMON(\n        AWS_ERROR_INVALID_BASE64_STR,\n        \"Invalid base64 string.\"),\n    AWS_DEFINE_ERROR_INFO_COMMON(\n        AWS_ERROR_INVALID_INDEX,\n        \"Invalid index for list access.\"),\n",
                    "rendered": {
                      "text": "        \"Invalid hex string.\"),\n    AWS_DEFINE_ERROR_INFO_COMMON(\n        AWS_ERROR_INVALID_BASE64_STR,\n        \"Invalid base64 string.\"),\n    AWS_DEFINE_ERROR_INFO_COMMON(\n        AWS_ERROR_INVALID_INDEX,\n        \"Invalid index for list access.\"),\n",
                      "markdown": "`        \"Invalid hex string.\"),\n    AWS_DEFINE_ERROR_INFO_COMMON(\n        AWS_ERROR_INVALID_BASE64_STR,\n        \"Invalid base64 string.\"),\n    AWS_DEFINE_ERROR_INFO_COMMON(\n        AWS_ERROR_INVALID_INDEX,\n        \"Invalid index for list access.\"),\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/source/common.c"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 12,
                  "endLine": 181,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        \"Attempt to pop an item from an empty queue.\"),\n    AWS_DEFINE_ERROR_INFO_COMMON(\n        AWS_ERROR_PRIORITY_QUEUE_BAD_NODE,\n        \"Bad node handle passed to remove.\"),\n    AWS_DEFINE_ERROR_INFO_COMMON(\n        AWS_ERROR_HASHTBL_ITEM_NOT_FOUND,\n        \"Item not found in hash table.\"),\n",
                    "rendered": {
                      "text": "        \"Attempt to pop an item from an empty queue.\"),\n    AWS_DEFINE_ERROR_INFO_COMMON(\n        AWS_ERROR_PRIORITY_QUEUE_BAD_NODE,\n        \"Bad node handle passed to remove.\"),\n    AWS_DEFINE_ERROR_INFO_COMMON(\n        AWS_ERROR_HASHTBL_ITEM_NOT_FOUND,\n        \"Item not found in hash table.\"),\n",
                      "markdown": "`        \"Attempt to pop an item from an empty queue.\"),\n    AWS_DEFINE_ERROR_INFO_COMMON(\n        AWS_ERROR_PRIORITY_QUEUE_BAD_NODE,\n        \"Bad node handle passed to remove.\"),\n    AWS_DEFINE_ERROR_INFO_COMMON(\n        AWS_ERROR_HASHTBL_ITEM_NOT_FOUND,\n        \"Item not found in hash table.\"),\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/source/common.c"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 16,
                  "endLine": 115,
                  "endColumn": 24,
                  "snippet": {
                    "text": "        \"Invalid hex string.\"),\n    AWS_DEFINE_ERROR_INFO_COMMON(\n        AWS_ERROR_INVALID_BASE64_STR,\n        \"Invalid base64 string.\"),\n    AWS_DEFINE_ERROR_INFO_COMMON(\n        AWS_ERROR_INVALID_INDEX,\n        \"Invalid index for list access.\"),\n",
                    "rendered": {
                      "text": "        \"Invalid hex string.\"),\n    AWS_DEFINE_ERROR_INFO_COMMON(\n        AWS_ERROR_INVALID_BASE64_STR,\n        \"Invalid base64 string.\"),\n    AWS_DEFINE_ERROR_INFO_COMMON(\n        AWS_ERROR_INVALID_INDEX,\n        \"Invalid index for list access.\"),\n",
                      "markdown": "`        \"Invalid hex string.\"),\n    AWS_DEFINE_ERROR_INFO_COMMON(\n        AWS_ERROR_INVALID_BASE64_STR,\n        \"Invalid base64 string.\"),\n    AWS_DEFINE_ERROR_INFO_COMMON(\n        AWS_ERROR_INVALID_INDEX,\n        \"Invalid index for list access.\"),\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/source/error.c"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 44,
                  "endLine": 166,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        const struct aws_error_info *info = &error_info->error_list[i];\n        if (info->error_code != expected_code) {\n            if (info->error_code) {\n                fprintf(stderr, \"Error %s is at wrong index of error info list.\\n\", info->literal_name);\n            } else {\n                fprintf(stderr, \"Error %d is missing from error info list.\\n\", expected_code);\n            }\n",
                    "rendered": {
                      "text": "        const struct aws_error_info *info = &error_info->error_list[i];\n        if (info->error_code != expected_code) {\n            if (info->error_code) {\n                fprintf(stderr, \"Error %s is at wrong index of error info list.\\n\", info->literal_name);\n            } else {\n                fprintf(stderr, \"Error %d is missing from error info list.\\n\", expected_code);\n            }\n",
                      "markdown": "`        const struct aws_error_info *info = &error_info->error_list[i];\n        if (info->error_code != expected_code) {\n            if (info->error_code) {\n                fprintf(stderr, \"Error %s is at wrong index of error info list.\\n\", info->literal_name);\n            } else {\n                fprintf(stderr, \"Error %d is missing from error info list.\\n\", expected_code);\n            }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/source/thread_scheduler.c"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 11,
                  "endLine": 210,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        if (aws_linked_list_node_next_is_valid(node)) {\n            node = aws_linked_list_next(node);\n        } else {\n            node = NULL;\n        }\n    }\n\n",
                    "rendered": {
                      "text": "        if (aws_linked_list_node_next_is_valid(node)) {\n            node = aws_linked_list_next(node);\n        } else {\n            node = NULL;\n        }\n    }\n\n",
                      "markdown": "`        if (aws_linked_list_node_next_is_valid(node)) {\n            node = aws_linked_list_next(node);\n        } else {\n            node = NULL;\n        }\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/source/thread_scheduler.c"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 11,
                  "endLine": 208,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        }\n\n        if (aws_linked_list_node_next_is_valid(node)) {\n            node = aws_linked_list_next(node);\n        } else {\n            node = NULL;\n        }\n",
                    "rendered": {
                      "text": "        }\n\n        if (aws_linked_list_node_next_is_valid(node)) {\n            node = aws_linked_list_next(node);\n        } else {\n            node = NULL;\n        }\n",
                      "markdown": "`        }\n\n        if (aws_linked_list_node_next_is_valid(node)) {\n            node = aws_linked_list_next(node);\n        } else {\n            node = NULL;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/source/thread_scheduler.c"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 11,
                  "endLine": 107,
                  "endColumn": 20,
                  "snippet": {
                    "text": "            /* at least wake up once per 30 seconds. */\n            timeout = (int64_t)30 * (int64_t)AWS_TIMESTAMP_NANOS;\n        } else {\n            timeout = (int64_t)(next_scheduled_task - current_time);\n        }\n\n        if (timeout > 0) {\n",
                    "rendered": {
                      "text": "            /* at least wake up once per 30 seconds. */\n            timeout = (int64_t)30 * (int64_t)AWS_TIMESTAMP_NANOS;\n        } else {\n            timeout = (int64_t)(next_scheduled_task - current_time);\n        }\n\n        if (timeout > 0) {\n",
                      "markdown": "`            /* at least wake up once per 30 seconds. */\n            timeout = (int64_t)30 * (int64_t)AWS_TIMESTAMP_NANOS;\n        } else {\n            timeout = (int64_t)(next_scheduled_task - current_time);\n        }\n\n        if (timeout > 0) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/source/thread_scheduler.c"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 11,
                  "endLine": 105,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        int64_t timeout = 0;\n        if (next_scheduled_task == UINT64_MAX) {\n            /* at least wake up once per 30 seconds. */\n            timeout = (int64_t)30 * (int64_t)AWS_TIMESTAMP_NANOS;\n        } else {\n            timeout = (int64_t)(next_scheduled_task - current_time);\n        }\n",
                    "rendered": {
                      "text": "        int64_t timeout = 0;\n        if (next_scheduled_task == UINT64_MAX) {\n            /* at least wake up once per 30 seconds. */\n            timeout = (int64_t)30 * (int64_t)AWS_TIMESTAMP_NANOS;\n        } else {\n            timeout = (int64_t)(next_scheduled_task - current_time);\n        }\n",
                      "markdown": "`        int64_t timeout = 0;\n        if (next_scheduled_task == UINT64_MAX) {\n            /* at least wake up once per 30 seconds. */\n            timeout = (int64_t)30 * (int64_t)AWS_TIMESTAMP_NANOS;\n        } else {\n            timeout = (int64_t)(next_scheduled_task - current_time);\n        }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/source/thread_scheduler.c"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 15,
                  "endLine": 102,
                  "endColumn": 24,
                  "snippet": {
                    "text": "        uint64_t next_scheduled_task = 0;\n        aws_task_scheduler_has_tasks(&scheduler->scheduler, &next_scheduled_task);\n\n        int64_t timeout = 0;\n        if (next_scheduled_task == UINT64_MAX) {\n            /* at least wake up once per 30 seconds. */\n            timeout = (int64_t)30 * (int64_t)AWS_TIMESTAMP_NANOS;\n",
                    "rendered": {
                      "text": "        uint64_t next_scheduled_task = 0;\n        aws_task_scheduler_has_tasks(&scheduler->scheduler, &next_scheduled_task);\n\n        int64_t timeout = 0;\n        if (next_scheduled_task == UINT64_MAX) {\n            /* at least wake up once per 30 seconds. */\n            timeout = (int64_t)30 * (int64_t)AWS_TIMESTAMP_NANOS;\n",
                      "markdown": "`        uint64_t next_scheduled_task = 0;\n        aws_task_scheduler_has_tasks(&scheduler->scheduler, &next_scheduled_task);\n\n        int64_t timeout = 0;\n        if (next_scheduled_task == UINT64_MAX) {\n            /* at least wake up once per 30 seconds. */\n            timeout = (int64_t)30 * (int64_t)AWS_TIMESTAMP_NANOS;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/source/date_time.c"
                },
                "region": {
                  "startLine": 537,
                  "startColumn": 7,
                  "endLine": 537,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n    time_t seconds_offset = 0;\n    if (fmt == AWS_DATE_FORMAT_ISO_8601 || fmt == AWS_DATE_FORMAT_ISO_8601_BASIC ||\n        fmt == AWS_DATE_FORMAT_AUTO_DETECT) {\n        if (s_parse_iso_8601(*date_str_cursor, &parsed_time, &seconds_offset)) {\n            dt->utc_assumed = true;\n            successfully_parsed = true;\n",
                    "rendered": {
                      "text": "\n    time_t seconds_offset = 0;\n    if (fmt == AWS_DATE_FORMAT_ISO_8601 || fmt == AWS_DATE_FORMAT_ISO_8601_BASIC ||\n        fmt == AWS_DATE_FORMAT_AUTO_DETECT) {\n        if (s_parse_iso_8601(*date_str_cursor, &parsed_time, &seconds_offset)) {\n            dt->utc_assumed = true;\n            successfully_parsed = true;\n",
                      "markdown": "`\n    time_t seconds_offset = 0;\n    if (fmt == AWS_DATE_FORMAT_ISO_8601 || fmt == AWS_DATE_FORMAT_ISO_8601_BASIC ||\n        fmt == AWS_DATE_FORMAT_AUTO_DETECT) {\n        if (s_parse_iso_8601(*date_str_cursor, &parsed_time, &seconds_offset)) {\n            dt->utc_assumed = true;\n            successfully_parsed = true;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/source/date_time.c"
                },
                "region": {
                  "startLine": 536,
                  "startColumn": 42,
                  "endLine": 536,
                  "endColumn": 47,
                  "snippet": {
                    "text": "    bool successfully_parsed = false;\n\n    time_t seconds_offset = 0;\n    if (fmt == AWS_DATE_FORMAT_ISO_8601 || fmt == AWS_DATE_FORMAT_ISO_8601_BASIC ||\n        fmt == AWS_DATE_FORMAT_AUTO_DETECT) {\n        if (s_parse_iso_8601(*date_str_cursor, &parsed_time, &seconds_offset)) {\n            dt->utc_assumed = true;\n",
                    "rendered": {
                      "text": "    bool successfully_parsed = false;\n\n    time_t seconds_offset = 0;\n    if (fmt == AWS_DATE_FORMAT_ISO_8601 || fmt == AWS_DATE_FORMAT_ISO_8601_BASIC ||\n        fmt == AWS_DATE_FORMAT_AUTO_DETECT) {\n        if (s_parse_iso_8601(*date_str_cursor, &parsed_time, &seconds_offset)) {\n            dt->utc_assumed = true;\n",
                      "markdown": "`    bool successfully_parsed = false;\n\n    time_t seconds_offset = 0;\n    if (fmt == AWS_DATE_FORMAT_ISO_8601 || fmt == AWS_DATE_FORMAT_ISO_8601_BASIC ||\n        fmt == AWS_DATE_FORMAT_AUTO_DETECT) {\n        if (s_parse_iso_8601(*date_str_cursor, &parsed_time, &seconds_offset)) {\n            dt->utc_assumed = true;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/logging/log_formatter_test.c"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 49,
                  "endLine": 97,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    struct aws_date_time log_time;\n    ASSERT_SUCCESS(\n        aws_date_time_init_from_str(&log_time, &timestamp_buffer, date_format),\n        \"Could not parse timestamp value starting at \\\"%s\\\"\",\n        time_start);\n\n    /*\n",
                    "rendered": {
                      "text": "    struct aws_date_time log_time;\n    ASSERT_SUCCESS(\n        aws_date_time_init_from_str(&log_time, &timestamp_buffer, date_format),\n        \"Could not parse timestamp value starting at \\\"%s\\\"\",\n        time_start);\n\n    /*\n",
                      "markdown": "`    struct aws_date_time log_time;\n    ASSERT_SUCCESS(\n        aws_date_time_init_from_str(&log_time, &timestamp_buffer, date_format),\n        \"Could not parse timestamp value starting at \\\"%s\\\"\",\n        time_start);\n\n    /*\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/logging/log_formatter_test.c"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 49,
                  "endLine": 114,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    thread_id_start += 1;\n\n    char *thread_id_end = strstr(thread_id_start, \"]\");\n    ASSERT_TRUE(thread_id_end != NULL, \"Could not find end of thread id in output line \\\"%s\\\"\", buffer);\n\n    ASSERT_TRUE((thread_id_end - thread_id_start + 1) == AWS_THREAD_ID_T_REPR_BUFSZ, \"Unexpected thread id length\");\n    aws_thread_id_t current_thread_id = aws_thread_current_thread_id();\n",
                    "rendered": {
                      "text": "    thread_id_start += 1;\n\n    char *thread_id_end = strstr(thread_id_start, \"]\");\n    ASSERT_TRUE(thread_id_end != NULL, \"Could not find end of thread id in output line \\\"%s\\\"\", buffer);\n\n    ASSERT_TRUE((thread_id_end - thread_id_start + 1) == AWS_THREAD_ID_T_REPR_BUFSZ, \"Unexpected thread id length\");\n    aws_thread_id_t current_thread_id = aws_thread_current_thread_id();\n",
                      "markdown": "`    thread_id_start += 1;\n\n    char *thread_id_end = strstr(thread_id_start, \"]\");\n    ASSERT_TRUE(thread_id_end != NULL, \"Could not find end of thread id in output line \\\"%s\\\"\", buffer);\n\n    ASSERT_TRUE((thread_id_end - thread_id_start + 1) == AWS_THREAD_ID_T_REPR_BUFSZ, \"Unexpected thread id length\");\n    aws_thread_id_t current_thread_id = aws_thread_current_thread_id();\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/logging/log_formatter_test.c"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 51,
                  "endLine": 110,
                  "endColumn": 57,
                  "snippet": {
                    "text": "     * Find the thread id substring\n     */\n    const char *thread_id_start = strstr(time_end + 1, \"[\");\n    ASSERT_TRUE(thread_id_start != NULL, \"Could not find start of thread id in output line \\\"%s\\\"\", buffer);\n    thread_id_start += 1;\n\n    char *thread_id_end = strstr(thread_id_start, \"]\");\n",
                    "rendered": {
                      "text": "     * Find the thread id substring\n     */\n    const char *thread_id_start = strstr(time_end + 1, \"[\");\n    ASSERT_TRUE(thread_id_start != NULL, \"Could not find start of thread id in output line \\\"%s\\\"\", buffer);\n    thread_id_start += 1;\n\n    char *thread_id_end = strstr(thread_id_start, \"]\");\n",
                      "markdown": "`     * Find the thread id substring\n     */\n    const char *thread_id_start = strstr(time_end + 1, \"[\");\n    ASSERT_TRUE(thread_id_start != NULL, \"Could not find start of thread id in output line \\\"%s\\\"\", buffer);\n    thread_id_start += 1;\n\n    char *thread_id_end = strstr(thread_id_start, \"]\");\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/logging/log_formatter_test.c"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 44,
                  "endLine": 81,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    time_start += 1;\n\n    const char *time_end = strstr(time_start, \"]\");\n    ASSERT_TRUE(time_end != NULL, \"Could not find end of timestamp in output line \\\"%s\\\"\", buffer);\n\n    size_t time_length = time_end - time_start;\n\n",
                    "rendered": {
                      "text": "    time_start += 1;\n\n    const char *time_end = strstr(time_start, \"]\");\n    ASSERT_TRUE(time_end != NULL, \"Could not find end of timestamp in output line \\\"%s\\\"\", buffer);\n\n    size_t time_length = time_end - time_start;\n\n",
                      "markdown": "`    time_start += 1;\n\n    const char *time_end = strstr(time_start, \"]\");\n    ASSERT_TRUE(time_end != NULL, \"Could not find end of timestamp in output line \\\"%s\\\"\", buffer);\n\n    size_t time_length = time_end - time_start;\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/logging/log_formatter_test.c"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 46,
                  "endLine": 77,
                  "endColumn": 52,
                  "snippet": {
                    "text": "     * Find the timestamp substring.\n     */\n    const char *time_start = strstr(log_level_start + 1, \"[\");\n    ASSERT_TRUE(time_start != NULL, \"Could not find start of timestamp in output line \\\"%s\\\"\", buffer);\n    time_start += 1;\n\n    const char *time_end = strstr(time_start, \"]\");\n",
                    "rendered": {
                      "text": "     * Find the timestamp substring.\n     */\n    const char *time_start = strstr(log_level_start + 1, \"[\");\n    ASSERT_TRUE(time_start != NULL, \"Could not find start of timestamp in output line \\\"%s\\\"\", buffer);\n    time_start += 1;\n\n    const char *time_end = strstr(time_start, \"]\");\n",
                      "markdown": "`     * Find the timestamp substring.\n     */\n    const char *time_start = strstr(log_level_start + 1, \"[\");\n    ASSERT_TRUE(time_start != NULL, \"Could not find start of timestamp in output line \\\"%s\\\"\", buffer);\n    time_start += 1;\n\n    const char *time_end = strstr(time_start, \"]\");\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/logging/log_formatter_test.c"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 51,
                  "endLine": 63,
                  "endColumn": 57,
                  "snippet": {
                    "text": "     * Check that the log level appears properly\n     */\n    const char *log_level_start = strstr(buffer, \"[\");\n    ASSERT_TRUE(log_level_start != NULL, \"Could not find start of log level in output line \\\"%s\\\"\", buffer);\n\n    const char *level_string = NULL;\n    ASSERT_SUCCESS(\n",
                    "rendered": {
                      "text": "     * Check that the log level appears properly\n     */\n    const char *log_level_start = strstr(buffer, \"[\");\n    ASSERT_TRUE(log_level_start != NULL, \"Could not find start of log level in output line \\\"%s\\\"\", buffer);\n\n    const char *level_string = NULL;\n    ASSERT_SUCCESS(\n",
                      "markdown": "`     * Check that the log level appears properly\n     */\n    const char *log_level_start = strstr(buffer, \"[\");\n    ASSERT_TRUE(log_level_start != NULL, \"Could not find start of log level in output line \\\"%s\\\"\", buffer);\n\n    const char *level_string = NULL;\n    ASSERT_SUCCESS(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/logging/pipeline_logger_test.c"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 24,
                  "endLine": 82,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        buffer_ptr = strstr(buffer_ptr, expected_user_content[i]);\n        ASSERT_TRUE(\n            buffer_ptr != NULL,\n            \"Expected to find \\\"%s\\\" in log file but could not.  Content is either missing or out-of-order.\",\n            expected_user_content[i]);\n    }\n\n",
                    "rendered": {
                      "text": "        buffer_ptr = strstr(buffer_ptr, expected_user_content[i]);\n        ASSERT_TRUE(\n            buffer_ptr != NULL,\n            \"Expected to find \\\"%s\\\" in log file but could not.  Content is either missing or out-of-order.\",\n            expected_user_content[i]);\n    }\n\n",
                      "markdown": "`        buffer_ptr = strstr(buffer_ptr, expected_user_content[i]);\n        ASSERT_TRUE(\n            buffer_ptr != NULL,\n            \"Expected to find \\\"%s\\\" in log file but could not.  Content is either missing or out-of-order.\",\n            expected_user_content[i]);\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/date_time_test.c"
                },
                "region": {
                  "startLine": 522,
                  "startColumn": 27,
                  "endLine": 522,
                  "endColumn": 104,
                  "snippet": {
                    "text": "\n    struct aws_date_time date_time;\n    const char *date_str = \"Weddkasdiweijbnawei8eriojngsdgasdgsdf1gasd8asdgfasdfgsdikweisdfksdnsdksdklas\"\n                           \"dfsdklasdfdfsdfsdfsdfsadfasdafsdfgjjfgghdfgsdfsfsdfsdfasdfsdfasdfsdfasdfsdf\";\n    struct aws_byte_buf date_buf = aws_byte_buf_from_c_str(date_str);\n\n    ASSERT_ERROR(\n",
                    "rendered": {
                      "text": "\n    struct aws_date_time date_time;\n    const char *date_str = \"Weddkasdiweijbnawei8eriojngsdgasdgsdf1gasd8asdgfasdfgsdikweisdfksdnsdksdklas\"\n                           \"dfsdklasdfdfsdfsdfsdfsadfasdafsdfgjjfgghdfgsdfsfsdfsdfasdfsdfasdfsdfasdfsdf\";\n    struct aws_byte_buf date_buf = aws_byte_buf_from_c_str(date_str);\n\n    ASSERT_ERROR(\n",
                      "markdown": "`\n    struct aws_date_time date_time;\n    const char *date_str = \"Weddkasdiweijbnawei8eriojngsdgasdgsdf1gasd8asdgfasdfgsdikweisdfksdnsdksdklas\"\n                           \"dfsdklasdfdfsdfsdfsdfsadfasdafsdfgjjfgghdfgsdfsfsdfsdfasdfsdfasdfsdfasdfsdf\";\n    struct aws_byte_buf date_buf = aws_byte_buf_from_c_str(date_str);\n\n    ASSERT_ERROR(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/date_time_test.c"
                },
                "region": {
                  "startLine": 521,
                  "startColumn": 27,
                  "endLine": 521,
                  "endColumn": 105,
                  "snippet": {
                    "text": "    (void)ctx;\n\n    struct aws_date_time date_time;\n    const char *date_str = \"Weddkasdiweijbnawei8eriojngsdgasdgsdf1gasd8asdgfasdfgsdikweisdfksdnsdksdklas\"\n                           \"dfsdklasdfdfsdfsdfsdfsadfasdafsdfgjjfgghdfgsdfsfsdfsdfasdfsdfasdfsdfasdfsdf\";\n    struct aws_byte_buf date_buf = aws_byte_buf_from_c_str(date_str);\n\n",
                    "rendered": {
                      "text": "    (void)ctx;\n\n    struct aws_date_time date_time;\n    const char *date_str = \"Weddkasdiweijbnawei8eriojngsdgasdgsdf1gasd8asdgfasdfgsdikweisdfksdnsdksdklas\"\n                           \"dfsdklasdfdfsdfsdfsdfsadfasdafsdfgjjfgghdfgsdfsfsdfsdfasdfsdfasdfsdfasdfsdf\";\n    struct aws_byte_buf date_buf = aws_byte_buf_from_c_str(date_str);\n\n",
                      "markdown": "`    (void)ctx;\n\n    struct aws_date_time date_time;\n    const char *date_str = \"Weddkasdiweijbnawei8eriojngsdgasdgsdf1gasd8asdgfasdfgsdikweisdfksdnsdksdklas\"\n                           \"dfsdklasdfdfsdfsdfsdfsadfasdafsdfgjjfgghdfgsdfsfsdfsdfasdfsdfasdfsdfasdfsdf\";\n    struct aws_byte_buf date_buf = aws_byte_buf_from_c_str(date_str);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/date_time_test.c"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 27,
                  "endLine": 228,
                  "endColumn": 104,
                  "snippet": {
                    "text": "\n    struct aws_date_time date_time;\n    const char *date_str = \"Weddkasdiweijbnawei8eriojngsdgasdgsdf1gasd8asdgfasdfgsdikweisdfksdnsdksdklas\"\n                           \"dfsdklasdfdfsdfsdfsdfsadfasdafsdfgjjfgghdfgsdfsfsdfsdfasdfsdfasdfsdfasdfsdf\";\n    struct aws_byte_buf date_buf = aws_byte_buf_from_c_str(date_str);\n\n    ASSERT_ERROR(\n",
                    "rendered": {
                      "text": "\n    struct aws_date_time date_time;\n    const char *date_str = \"Weddkasdiweijbnawei8eriojngsdgasdgsdf1gasd8asdgfasdfgsdikweisdfksdnsdksdklas\"\n                           \"dfsdklasdfdfsdfsdfsdfsadfasdafsdfgjjfgghdfgsdfsfsdfsdfasdfsdfasdfsdfasdfsdf\";\n    struct aws_byte_buf date_buf = aws_byte_buf_from_c_str(date_str);\n\n    ASSERT_ERROR(\n",
                      "markdown": "`\n    struct aws_date_time date_time;\n    const char *date_str = \"Weddkasdiweijbnawei8eriojngsdgasdgsdf1gasd8asdgfasdfgsdikweisdfksdnsdksdklas\"\n                           \"dfsdklasdfdfsdfsdfsdfsadfasdafsdfgjjfgghdfgsdfsfsdfsdfasdfsdfasdfsdfasdfsdf\";\n    struct aws_byte_buf date_buf = aws_byte_buf_from_c_str(date_str);\n\n    ASSERT_ERROR(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/date_time_test.c"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 27,
                  "endLine": 227,
                  "endColumn": 105,
                  "snippet": {
                    "text": "    (void)ctx;\n\n    struct aws_date_time date_time;\n    const char *date_str = \"Weddkasdiweijbnawei8eriojngsdgasdgsdf1gasd8asdgfasdfgsdikweisdfksdnsdksdklas\"\n                           \"dfsdklasdfdfsdfsdfsdfsadfasdafsdfgjjfgghdfgsdfsfsdfsdfasdfsdfasdfsdfasdfsdf\";\n    struct aws_byte_buf date_buf = aws_byte_buf_from_c_str(date_str);\n\n",
                    "rendered": {
                      "text": "    (void)ctx;\n\n    struct aws_date_time date_time;\n    const char *date_str = \"Weddkasdiweijbnawei8eriojngsdgasdgsdf1gasd8asdgfasdfgsdikweisdfksdnsdksdklas\"\n                           \"dfsdklasdfdfsdfsdfsdfsadfasdafsdfgjjfgghdfgsdfsfsdfsdfasdfsdfasdfsdfasdfsdf\";\n    struct aws_byte_buf date_buf = aws_byte_buf_from_c_str(date_str);\n\n",
                      "markdown": "`    (void)ctx;\n\n    struct aws_date_time date_time;\n    const char *date_str = \"Weddkasdiweijbnawei8eriojngsdgasdgsdf1gasd8asdgfasdfgsdikweisdfksdnsdksdklas\"\n                           \"dfsdklasdfdfsdfsdfsdfsadfasdafsdfgjjfgghdfgsdfsfsdfsdfasdfsdfasdfsdfasdfsdf\";\n    struct aws_byte_buf date_buf = aws_byte_buf_from_c_str(date_str);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/date_time_test.c"
                },
                "region": {
                  "startLine": 304,
                  "startColumn": 68,
                  "endLine": 304,
                  "endColumn": 74,
                  "snippet": {
                    "text": "        {\"20021002T203909+1234\", \"basic format with fractional seconds\"},\n        {\"2002-10-02T080509.000Z\", \"weird mix of extended date but basic time\"},\n        {\"20021002T08:05:09.000Z\", \"weird mix of basic date but extended time\"},\n        {\"2002-10-02T20:39:09+1234\", \"weird mix of extended date and time but basic fractional seconds\"},\n    };\n\n    for (size_t i = 0; i < AWS_ARRAY_SIZE(valid_dates); ++i) {\n",
                    "rendered": {
                      "text": "        {\"20021002T203909+1234\", \"basic format with fractional seconds\"},\n        {\"2002-10-02T080509.000Z\", \"weird mix of extended date but basic time\"},\n        {\"20021002T08:05:09.000Z\", \"weird mix of basic date but extended time\"},\n        {\"2002-10-02T20:39:09+1234\", \"weird mix of extended date and time but basic fractional seconds\"},\n    };\n\n    for (size_t i = 0; i < AWS_ARRAY_SIZE(valid_dates); ++i) {\n",
                      "markdown": "`        {\"20021002T203909+1234\", \"basic format with fractional seconds\"},\n        {\"2002-10-02T080509.000Z\", \"weird mix of extended date but basic time\"},\n        {\"20021002T08:05:09.000Z\", \"weird mix of basic date but extended time\"},\n        {\"2002-10-02T20:39:09+1234\", \"weird mix of extended date and time but basic fractional seconds\"},\n    };\n\n    for (size_t i = 0; i < AWS_ARRAY_SIZE(valid_dates); ++i) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/cmake/AwsFindPackage.cmake"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 45,
                  "endLine": 12,
                  "snippet": {
                    "text": "# This is largely because CMake was not well planned out, and as a result, in-source and modules don't play well\n# together. Only use this on CRT libraries (including S2N), libcrypto will stay as an assumed external dependency.\n#\n# package_name: is the name of the package to find\n# DEP_AWS_LIBS: output variable will be appended after each call to this function. You don't have to use it,\n#    but it can be passed directly target_link_libraries and it will be the properly qualified library\n#    name and namespace based on configuration.\nfunction(aws_use_package package_name)\n",
                    "rendered": {
                      "text": "# This is largely because CMake was not well planned out, and as a result, in-source and modules don't play well\n# together. Only use this on CRT libraries (including S2N), libcrypto will stay as an assumed external dependency.\n#\n# package_name: is the name of the package to find\n# DEP_AWS_LIBS: output variable will be appended after each call to this function. You don't have to use it,\n#    but it can be passed directly target_link_libraries and it will be the properly qualified library\n#    name and namespace based on configuration.\nfunction(aws_use_package package_name)\n",
                      "markdown": "`# This is largely because CMake was not well planned out, and as a result, in-source and modules don't play well\n# together. Only use this on CRT libraries (including S2N), libcrypto will stay as an assumed external dependency.\n#\n# package_name: is the name of the package to find\n# DEP_AWS_LIBS: output variable will be appended after each call to this function. You don't have to use it,\n#    but it can be passed directly target_link_libraries and it will be the properly qualified library\n#    name and namespace based on configuration.\nfunction(aws_use_package package_name)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/cmake/AwsFindPackage.cmake"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 60,
                  "endLine": 7,
                  "endColumn": 65,
                  "snippet": {
                    "text": "option(IN_SOURCE_BUILD \"If the CRT libs are being built from your source tree (add_subdirectory), set this to ON\" OFF)\n\n# This function handles dependency list building based on if traditional CMAKE modules via. find_package should be\n# used, vs if this is an in source build via. something like git submodules and add_subdirectory.\n# This is largely because CMake was not well planned out, and as a result, in-source and modules don't play well\n# together. Only use this on CRT libraries (including S2N), libcrypto will stay as an assumed external dependency.\n#\n",
                    "rendered": {
                      "text": "option(IN_SOURCE_BUILD \"If the CRT libs are being built from your source tree (add_subdirectory), set this to ON\" OFF)\n\n# This function handles dependency list building based on if traditional CMAKE modules via. find_package should be\n# used, vs if this is an in source build via. something like git submodules and add_subdirectory.\n# This is largely because CMake was not well planned out, and as a result, in-source and modules don't play well\n# together. Only use this on CRT libraries (including S2N), libcrypto will stay as an assumed external dependency.\n#\n",
                      "markdown": "`option(IN_SOURCE_BUILD \"If the CRT libs are being built from your source tree (add_subdirectory), set this to ON\" OFF)\n\n# This function handles dependency list building based on if traditional CMAKE modules via. find_package should be\n# used, vs if this is an in source build via. something like git submodules and add_subdirectory.\n# This is largely because CMake was not well planned out, and as a result, in-source and modules don't play well\n# together. Only use this on CRT libraries (including S2N), libcrypto will stay as an assumed external dependency.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/cmake/AwsLibFuzzer.cmake"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 44,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "include(AwsSanitizers)\n\noption(ENABLE_FUZZ_TESTS \"Build and run fuzz tests\" OFF)\nset(FUZZ_TESTS_MAX_TIME 60 CACHE STRING \"Max time to run each fuzz test\")\n\n# Adds fuzz tests to ctest\n# Options:\n",
                    "rendered": {
                      "text": "include(AwsSanitizers)\n\noption(ENABLE_FUZZ_TESTS \"Build and run fuzz tests\" OFF)\nset(FUZZ_TESTS_MAX_TIME 60 CACHE STRING \"Max time to run each fuzz test\")\n\n# Adds fuzz tests to ctest\n# Options:\n",
                      "markdown": "`include(AwsSanitizers)\n\noption(ENABLE_FUZZ_TESTS \"Build and run fuzz tests\" OFF)\nset(FUZZ_TESTS_MAX_TIME 60 CACHE STRING \"Max time to run each fuzz test\")\n\n# Adds fuzz tests to ctest\n# Options:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/cmake/AwsSharedLibSetup.cmake"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 72,
                  "endLine": 56,
                  "endColumn": 78,
                  "snippet": {
                    "text": "endfunction()\n\n# Strips debug info from the target shared library or executable, and puts it in a $<TARGET_FILE:${target}>.dbg\n# archive, then links the original binary to the dbg archive so gdb will find it\n# This only applies to Unix shared libs and executables, windows has pdbs.\n# This is only done on Release and RelWithDebInfo build types\nfunction(aws_split_debug_info target)\n",
                    "rendered": {
                      "text": "endfunction()\n\n# Strips debug info from the target shared library or executable, and puts it in a $<TARGET_FILE:${target}>.dbg\n# archive, then links the original binary to the dbg archive so gdb will find it\n# This only applies to Unix shared libs and executables, windows has pdbs.\n# This is only done on Release and RelWithDebInfo build types\nfunction(aws_split_debug_info target)\n",
                      "markdown": "`endfunction()\n\n# Strips debug info from the target shared library or executable, and puts it in a $<TARGET_FILE:${target}>.dbg\n# archive, then links the original binary to the dbg archive so gdb will find it\n# This only applies to Unix shared libs and executables, windows has pdbs.\n# This is only done on Release and RelWithDebInfo build types\nfunction(aws_split_debug_info target)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/cmake/AwsSharedLibSetup.cmake"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 63,
                  "endLine": 56,
                  "endColumn": 68,
                  "snippet": {
                    "text": "endfunction()\n\n# Strips debug info from the target shared library or executable, and puts it in a $<TARGET_FILE:${target}>.dbg\n# archive, then links the original binary to the dbg archive so gdb will find it\n# This only applies to Unix shared libs and executables, windows has pdbs.\n# This is only done on Release and RelWithDebInfo build types\nfunction(aws_split_debug_info target)\n",
                    "rendered": {
                      "text": "endfunction()\n\n# Strips debug info from the target shared library or executable, and puts it in a $<TARGET_FILE:${target}>.dbg\n# archive, then links the original binary to the dbg archive so gdb will find it\n# This only applies to Unix shared libs and executables, windows has pdbs.\n# This is only done on Release and RelWithDebInfo build types\nfunction(aws_split_debug_info target)\n",
                      "markdown": "`endfunction()\n\n# Strips debug info from the target shared library or executable, and puts it in a $<TARGET_FILE:${target}>.dbg\n# archive, then links the original binary to the dbg archive so gdb will find it\n# This only applies to Unix shared libs and executables, windows has pdbs.\n# This is only done on Release and RelWithDebInfo build types\nfunction(aws_split_debug_info target)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/cmake/AwsCFlags.cmake"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 16,
                  "endLine": 168,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        #\n        # An example of this happening is the aws-c-io tests.\n        # All the C libs are compiled statically, but then a PKCS#11 library is\n        # loaded at runtime which happens to use libcrypto.so from OpenSSL.\n        # If the symbols from libcrypto.a aren't hidden, then SOME function calls use the libcrypto.a implementation\n        # and SOME function calls use the libcrypto.so implementation, and this mismatch leads to weird crashes.\n        if (UNIX AND NOT APPLE)\n",
                    "rendered": {
                      "text": "        #\n        # An example of this happening is the aws-c-io tests.\n        # All the C libs are compiled statically, but then a PKCS#11 library is\n        # loaded at runtime which happens to use libcrypto.so from OpenSSL.\n        # If the symbols from libcrypto.a aren't hidden, then SOME function calls use the libcrypto.a implementation\n        # and SOME function calls use the libcrypto.so implementation, and this mismatch leads to weird crashes.\n        if (UNIX AND NOT APPLE)\n",
                      "markdown": "`        #\n        # An example of this happening is the aws-c-io tests.\n        # All the C libs are compiled statically, but then a PKCS#11 library is\n        # loaded at runtime which happens to use libcrypto.so from OpenSSL.\n        # If the symbols from libcrypto.a aren't hidden, then SOME function calls use the libcrypto.a implementation\n        # and SOME function calls use the libcrypto.so implementation, and this mismatch leads to weird crashes.\n        if (UNIX AND NOT APPLE)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/private/lookup3.inl"
                },
                "region": {
                  "startLine": 881,
                  "startColumn": 49,
                  "endLine": 881,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\t    b[i] ^= ((k+1)<<j);\n\t    b[i] ^= ((k+1)>>(8-j));\n\t     d[0] = hashlittle(b, hlen, m);\n\t    /* check every bit is 1, 0, set, and not set at least once */\n\t    for (l=0; l<HASHSTATE; ++l)\n\t    {\n\t      e[l] &= (c[l]^d[l]);\n",
                    "rendered": {
                      "text": "\t    b[i] ^= ((k+1)<<j);\n\t    b[i] ^= ((k+1)>>(8-j));\n\t     d[0] = hashlittle(b, hlen, m);\n\t    /* check every bit is 1, 0, set, and not set at least once */\n\t    for (l=0; l<HASHSTATE; ++l)\n\t    {\n\t      e[l] &= (c[l]^d[l]);\n",
                      "markdown": "`\t    b[i] ^= ((k+1)<<j);\n\t    b[i] ^= ((k+1)>>(8-j));\n\t     d[0] = hashlittle(b, hlen, m);\n\t    /* check every bit is 1, 0, set, and not set at least once */\n\t    for (l=0; l<HASHSTATE; ++l)\n\t    {\n\t      e[l] &= (c[l]^d[l]);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/private/lookup3.inl"
                },
                "region": {
                  "startLine": 774,
                  "startColumn": 66,
                  "endLine": 774,
                  "endColumn": 70,
                  "snippet": {
                    "text": "\n#endif /* !VALGRIND */\n\n  } else {                        /* need to read the key one byte at a time */\n    const uint8_t *k = (const uint8_t *)key;\n\n    /*--------------- all but the last block: affect some 32 bits of (a,b,c) */\n",
                    "rendered": {
                      "text": "\n#endif /* !VALGRIND */\n\n  } else {                        /* need to read the key one byte at a time */\n    const uint8_t *k = (const uint8_t *)key;\n\n    /*--------------- all but the last block: affect some 32 bits of (a,b,c) */\n",
                      "markdown": "`\n#endif /* !VALGRIND */\n\n  } else {                        /* need to read the key one byte at a time */\n    const uint8_t *k = (const uint8_t *)key;\n\n    /*--------------- all but the last block: affect some 32 bits of (a,b,c) */\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/private/lookup3.inl"
                },
                "region": {
                  "startLine": 636,
                  "startColumn": 66,
                  "endLine": 636,
                  "endColumn": 70,
                  "snippet": {
                    "text": "    case 0 : *pc=c; *pb=b; return;  /* zero length strings require no mixing */\n    }\n\n  } else {                        /* need to read the key one byte at a time */\n    const uint8_t *k = (const uint8_t *)key;\n\n    /*--------------- all but the last block: affect some 32 bits of (a,b,c) */\n",
                    "rendered": {
                      "text": "    case 0 : *pc=c; *pb=b; return;  /* zero length strings require no mixing */\n    }\n\n  } else {                        /* need to read the key one byte at a time */\n    const uint8_t *k = (const uint8_t *)key;\n\n    /*--------------- all but the last block: affect some 32 bits of (a,b,c) */\n",
                      "markdown": "`    case 0 : *pc=c; *pb=b; return;  /* zero length strings require no mixing */\n    }\n\n  } else {                        /* need to read the key one byte at a time */\n    const uint8_t *k = (const uint8_t *)key;\n\n    /*--------------- all but the last block: affect some 32 bits of (a,b,c) */\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/private/lookup3.inl"
                },
                "region": {
                  "startLine": 441,
                  "startColumn": 66,
                  "endLine": 441,
                  "endColumn": 70,
                  "snippet": {
                    "text": "    case 0 : return c;                     /* zero length requires no mixing */\n    }\n\n  } else {                        /* need to read the key one byte at a time */\n    const uint8_t *k = (const uint8_t *)key;\n\n    /*--------------- all but the last block: affect some 32 bits of (a,b,c) */\n",
                    "rendered": {
                      "text": "    case 0 : return c;                     /* zero length requires no mixing */\n    }\n\n  } else {                        /* need to read the key one byte at a time */\n    const uint8_t *k = (const uint8_t *)key;\n\n    /*--------------- all but the last block: affect some 32 bits of (a,b,c) */\n",
                      "markdown": "`    case 0 : return c;                     /* zero length requires no mixing */\n    }\n\n  } else {                        /* need to read the key one byte at a time */\n    const uint8_t *k = (const uint8_t *)key;\n\n    /*--------------- all but the last block: affect some 32 bits of (a,b,c) */\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/private/lookup3.inl"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 37,
                  "endLine": 168,
                  "endColumn": 41,
                  "snippet": {
                    "text": "  is commonly produced by subtraction) look like a single 1-bit\n  difference.\n* the base values were pseudorandom, all zero but one bit set, or\n  all zero plus a counter that starts at zero.\n\nThese constants passed:\n 14 11 25 16 4 14 24\n",
                    "rendered": {
                      "text": "  is commonly produced by subtraction) look like a single 1-bit\n  difference.\n* the base values were pseudorandom, all zero but one bit set, or\n  all zero plus a counter that starts at zero.\n\nThese constants passed:\n 14 11 25 16 4 14 24\n",
                      "markdown": "`  is commonly produced by subtraction) look like a single 1-bit\n  difference.\n* the base values were pseudorandom, all zero but one bit set, or\n  all zero plus a counter that starts at zero.\n\nThese constants passed:\n 14 11 25 16 4 14 24\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/private/lookup3.inl"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 57,
                  "endLine": 136,
                  "endColumn": 61,
                  "snippet": {
                    "text": "most thoroughly mixed value is c, but it doesn't really even achieve\navalanche in c.\n\nThis allows some parallelism.  Read-after-writes are good at doubling\nthe number of bits affected, so the goal of mixing pulls in the opposite\ndirection as the goal of parallelism.  I did what I could.  Rotates\nseem to cost as much as shifts on every machine I could lay my hands\n",
                    "rendered": {
                      "text": "most thoroughly mixed value is c, but it doesn't really even achieve\navalanche in c.\n\nThis allows some parallelism.  Read-after-writes are good at doubling\nthe number of bits affected, so the goal of mixing pulls in the opposite\ndirection as the goal of parallelism.  I did what I could.  Rotates\nseem to cost as much as shifts on every machine I could lay my hands\n",
                      "markdown": "`most thoroughly mixed value is c, but it doesn't really even achieve\navalanche in c.\n\nThis allows some parallelism.  Read-after-writes are good at doubling\nthe number of bits affected, so the goal of mixing pulls in the opposite\ndirection as the goal of parallelism.  I did what I could.  Rotates\nseem to cost as much as shifts on every machine I could lay my hands\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/private/lookup3.inl"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 37,
                  "endLine": 119,
                  "endColumn": 41,
                  "snippet": {
                    "text": "  is commonly produced by subtraction) look like a single 1-bit\n  difference.\n* the base values were pseudorandom, all zero but one bit set, or\n  all zero plus a counter that starts at zero.\n\nSome k values for my \"a-=c; a^=rot(c,k); c+=b;\" arrangement that\nsatisfy this are\n",
                    "rendered": {
                      "text": "  is commonly produced by subtraction) look like a single 1-bit\n  difference.\n* the base values were pseudorandom, all zero but one bit set, or\n  all zero plus a counter that starts at zero.\n\nSome k values for my \"a-=c; a^=rot(c,k); c+=b;\" arrangement that\nsatisfy this are\n",
                      "markdown": "`  is commonly produced by subtraction) look like a single 1-bit\n  difference.\n* the base values were pseudorandom, all zero but one bit set, or\n  all zero plus a counter that starts at zero.\n\nSome k values for my \"a-=c; a^=rot(c,k); c+=b;\" arrangement that\nsatisfy this are\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/private/lookup3.inl"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 27,
                  "endLine": 108,
                  "endColumn": 31,
                  "snippet": {
                    "text": "still in (a,b,c) after mix().\n\nIf four pairs of (a,b,c) inputs are run through mix(), or through\nmix() in reverse, there are at least 32 bits of the output that\nare sometimes the same for one pair and different for another pair.\nThis was tested for:\n* pairs that differed by one bit, by two bits, in any combination\n",
                    "rendered": {
                      "text": "still in (a,b,c) after mix().\n\nIf four pairs of (a,b,c) inputs are run through mix(), or through\nmix() in reverse, there are at least 32 bits of the output that\nare sometimes the same for one pair and different for another pair.\nThis was tested for:\n* pairs that differed by one bit, by two bits, in any combination\n",
                      "markdown": "`still in (a,b,c) after mix().\n\nIf four pairs of (a,b,c) inputs are run through mix(), or through\nmix() in reverse, there are at least 32 bits of the output that\nare sometimes the same for one pair and different for another pair.\nThis was tested for:\n* pairs that differed by one bit, by two bits, in any combination\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/private/lookup3.inl"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 16,
                  "endLine": 74,
                  "endColumn": 20,
                  "snippet": {
                    "text": "#endif /* CBMC */\n\n/*\n * My best guess at if you are big-endian or little-endian.  This may\n * need adjustment.\n */\n #if (defined(__BYTE_ORDER) && defined(__LITTLE_ENDIAN) && \\\n",
                    "rendered": {
                      "text": "#endif /* CBMC */\n\n/*\n * My best guess at if you are big-endian or little-endian.  This may\n * need adjustment.\n */\n #if (defined(__BYTE_ORDER) && defined(__LITTLE_ENDIAN) && \\\n",
                      "markdown": "`#endif /* CBMC */\n\n/*\n * My best guess at if you are big-endian or little-endian.  This may\n * need adjustment.\n */\n #if (defined(__BYTE_ORDER) && defined(__LITTLE_ENDIAN) && \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/private/lookup3.inl"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 36,
                  "endLine": 46,
                  "endColumn": 40,
                  "snippet": {
                    "text": "a character string), use hashlittle().  If you have several byte arrays, or\na mix of things, see the comments above hashlittle().\n\nWhy is this so big?  I read 12 bytes at a time into 3 4-byte integers,\nthen mix those integers.  This is fast (you can do a lot more thorough\nmixing with 12*3 instructions on 3 integers than you can with 3 instructions\non 1 byte), but shoehorning those bytes into integers efficiently is messy.\n",
                    "rendered": {
                      "text": "a character string), use hashlittle().  If you have several byte arrays, or\na mix of things, see the comments above hashlittle().\n\nWhy is this so big?  I read 12 bytes at a time into 3 4-byte integers,\nthen mix those integers.  This is fast (you can do a lot more thorough\nmixing with 12*3 instructions on 3 integers than you can with 3 instructions\non 1 byte), but shoehorning those bytes into integers efficiently is messy.\n",
                      "markdown": "`a character string), use hashlittle().  If you have several byte arrays, or\na mix of things, see the comments above hashlittle().\n\nWhy is this so big?  I read 12 bytes at a time into 3 4-byte integers,\nthen mix those integers.  This is fast (you can do a lot more thorough\nmixing with 12*3 instructions on 3 integers than you can with 3 instructions\non 1 byte), but shoehorning those bytes into integers efficiently is messy.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/private/lookup3.inl"
                },
                "region": {
                  "startLine": 927,
                  "startColumn": 34,
                  "endLine": 927,
                  "endColumn": 40,
                  "snippet": {
                    "text": "  uint32_t i;\n  uint8_t qqq[] = \"xxThis is the time for all good men to come to the aid of their country...\";\n  uint32_t j;\n  uint8_t qqqq[] = \"xxxThis is the time for all good men to come to the aid of their country...\";\n  uint32_t ref,x,y;\n  uint8_t *p;\n\n",
                    "rendered": {
                      "text": "  uint32_t i;\n  uint8_t qqq[] = \"xxThis is the time for all good men to come to the aid of their country...\";\n  uint32_t j;\n  uint8_t qqqq[] = \"xxxThis is the time for all good men to come to the aid of their country...\";\n  uint32_t ref,x,y;\n  uint8_t *p;\n\n",
                      "markdown": "`  uint32_t i;\n  uint8_t qqq[] = \"xxThis is the time for all good men to come to the aid of their country...\";\n  uint32_t j;\n  uint8_t qqqq[] = \"xxxThis is the time for all good men to come to the aid of their country...\";\n  uint32_t ref,x,y;\n  uint8_t *p;\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/private/lookup3.inl"
                },
                "region": {
                  "startLine": 925,
                  "startColumn": 32,
                  "endLine": 925,
                  "endColumn": 38,
                  "snippet": {
                    "text": "  uint32_t h;\n  uint8_t qq[] = \"xThis is the time for all good men to come to the aid of their country...\";\n  uint32_t i;\n  uint8_t qqq[] = \"xxThis is the time for all good men to come to the aid of their country...\";\n  uint32_t j;\n  uint8_t qqqq[] = \"xxxThis is the time for all good men to come to the aid of their country...\";\n  uint32_t ref,x,y;\n",
                    "rendered": {
                      "text": "  uint32_t h;\n  uint8_t qq[] = \"xThis is the time for all good men to come to the aid of their country...\";\n  uint32_t i;\n  uint8_t qqq[] = \"xxThis is the time for all good men to come to the aid of their country...\";\n  uint32_t j;\n  uint8_t qqqq[] = \"xxxThis is the time for all good men to come to the aid of their country...\";\n  uint32_t ref,x,y;\n",
                      "markdown": "`  uint32_t h;\n  uint8_t qq[] = \"xThis is the time for all good men to come to the aid of their country...\";\n  uint32_t i;\n  uint8_t qqq[] = \"xxThis is the time for all good men to come to the aid of their country...\";\n  uint32_t j;\n  uint8_t qqqq[] = \"xxxThis is the time for all good men to come to the aid of their country...\";\n  uint32_t ref,x,y;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/private/lookup3.inl"
                },
                "region": {
                  "startLine": 923,
                  "startColumn": 30,
                  "endLine": 923,
                  "endColumn": 36,
                  "snippet": {
                    "text": "  uint32_t len;\n  uint8_t q[] = \"This is the time for all good men to come to the aid of their country...\";\n  uint32_t h;\n  uint8_t qq[] = \"xThis is the time for all good men to come to the aid of their country...\";\n  uint32_t i;\n  uint8_t qqq[] = \"xxThis is the time for all good men to come to the aid of their country...\";\n  uint32_t j;\n",
                    "rendered": {
                      "text": "  uint32_t len;\n  uint8_t q[] = \"This is the time for all good men to come to the aid of their country...\";\n  uint32_t h;\n  uint8_t qq[] = \"xThis is the time for all good men to come to the aid of their country...\";\n  uint32_t i;\n  uint8_t qqq[] = \"xxThis is the time for all good men to come to the aid of their country...\";\n  uint32_t j;\n",
                      "markdown": "`  uint32_t len;\n  uint8_t q[] = \"This is the time for all good men to come to the aid of their country...\";\n  uint32_t h;\n  uint8_t qq[] = \"xThis is the time for all good men to come to the aid of their country...\";\n  uint32_t i;\n  uint8_t qqq[] = \"xxThis is the time for all good men to come to the aid of their country...\";\n  uint32_t j;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/private/lookup3.inl"
                },
                "region": {
                  "startLine": 921,
                  "startColumn": 28,
                  "endLine": 921,
                  "endColumn": 34,
                  "snippet": {
                    "text": "{\n  uint8_t buf[MAXLEN+20], *b;\n  uint32_t len;\n  uint8_t q[] = \"This is the time for all good men to come to the aid of their country...\";\n  uint32_t h;\n  uint8_t qq[] = \"xThis is the time for all good men to come to the aid of their country...\";\n  uint32_t i;\n",
                    "rendered": {
                      "text": "{\n  uint8_t buf[MAXLEN+20], *b;\n  uint32_t len;\n  uint8_t q[] = \"This is the time for all good men to come to the aid of their country...\";\n  uint32_t h;\n  uint8_t qq[] = \"xThis is the time for all good men to come to the aid of their country...\";\n  uint32_t i;\n",
                      "markdown": "`{\n  uint8_t buf[MAXLEN+20], *b;\n  uint32_t len;\n  uint8_t q[] = \"This is the time for all good men to come to the aid of their country...\";\n  uint32_t h;\n  uint8_t qq[] = \"xThis is the time for all good men to come to the aid of their country...\";\n  uint32_t i;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/private/lookup3.inl"
                },
                "region": {
                  "startLine": 842,
                  "startColumn": 63,
                  "endLine": 842,
                  "endColumn": 69,
                  "snippet": {
                    "text": "  if (z-a > 0) printf(\"time %d %.8x\\n\", z-a, h);\n}\n\n/* check that every input bit changes every output bit half the time */\n#define HASHSTATE 1\n#define HASHLEN   1\n#define MAXPAIR 60\n",
                    "rendered": {
                      "text": "  if (z-a > 0) printf(\"time %d %.8x\\n\", z-a, h);\n}\n\n/* check that every input bit changes every output bit half the time */\n#define HASHSTATE 1\n#define HASHLEN   1\n#define MAXPAIR 60\n",
                      "markdown": "`  if (z-a > 0) printf(\"time %d %.8x\\n\", z-a, h);\n}\n\n/* check that every input bit changes every output bit half the time */\n#define HASHSTATE 1\n#define HASHLEN   1\n#define MAXPAIR 60\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/private/lookup3.inl"
                },
                "region": {
                  "startLine": 774,
                  "startColumn": 71,
                  "endLine": 774,
                  "endColumn": 77,
                  "snippet": {
                    "text": "\n#endif /* !VALGRIND */\n\n  } else {                        /* need to read the key one byte at a time */\n    const uint8_t *k = (const uint8_t *)key;\n\n    /*--------------- all but the last block: affect some 32 bits of (a,b,c) */\n",
                    "rendered": {
                      "text": "\n#endif /* !VALGRIND */\n\n  } else {                        /* need to read the key one byte at a time */\n    const uint8_t *k = (const uint8_t *)key;\n\n    /*--------------- all but the last block: affect some 32 bits of (a,b,c) */\n",
                      "markdown": "`\n#endif /* !VALGRIND */\n\n  } else {                        /* need to read the key one byte at a time */\n    const uint8_t *k = (const uint8_t *)key;\n\n    /*--------------- all but the last block: affect some 32 bits of (a,b,c) */\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/private/lookup3.inl"
                },
                "region": {
                  "startLine": 636,
                  "startColumn": 71,
                  "endLine": 636,
                  "endColumn": 77,
                  "snippet": {
                    "text": "    case 0 : *pc=c; *pb=b; return;  /* zero length strings require no mixing */\n    }\n\n  } else {                        /* need to read the key one byte at a time */\n    const uint8_t *k = (const uint8_t *)key;\n\n    /*--------------- all but the last block: affect some 32 bits of (a,b,c) */\n",
                    "rendered": {
                      "text": "    case 0 : *pc=c; *pb=b; return;  /* zero length strings require no mixing */\n    }\n\n  } else {                        /* need to read the key one byte at a time */\n    const uint8_t *k = (const uint8_t *)key;\n\n    /*--------------- all but the last block: affect some 32 bits of (a,b,c) */\n",
                      "markdown": "`    case 0 : *pc=c; *pb=b; return;  /* zero length strings require no mixing */\n    }\n\n  } else {                        /* need to read the key one byte at a time */\n    const uint8_t *k = (const uint8_t *)key;\n\n    /*--------------- all but the last block: affect some 32 bits of (a,b,c) */\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/private/lookup3.inl"
                },
                "region": {
                  "startLine": 533,
                  "startColumn": 40,
                  "endLine": 533,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    /*\n     * \"k[2]&0xffffff\" actually reads beyond the end of the string, but\n     * then masks off the part it's not allowed to read.  Because the\n     * string is aligned, the masked-off tail is in the same word as the\n     * rest of the string. Every machine with memory protection I've seen\n     * does it on word boundaries, so is OK with this. But VALGRIND and CBMC\n     * will still catch it and complain. CBMC will ignore this type of error\n",
                    "rendered": {
                      "text": "    /*\n     * \"k[2]&0xffffff\" actually reads beyond the end of the string, but\n     * then masks off the part it's not allowed to read.  Because the\n     * string is aligned, the masked-off tail is in the same word as the\n     * rest of the string. Every machine with memory protection I've seen\n     * does it on word boundaries, so is OK with this. But VALGRIND and CBMC\n     * will still catch it and complain. CBMC will ignore this type of error\n",
                      "markdown": "`    /*\n     * \"k[2]&0xffffff\" actually reads beyond the end of the string, but\n     * then masks off the part it's not allowed to read.  Because the\n     * string is aligned, the masked-off tail is in the same word as the\n     * rest of the string. Every machine with memory protection I've seen\n     * does it on word boundaries, so is OK with this. But VALGRIND and CBMC\n     * will still catch it and complain. CBMC will ignore this type of error\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/private/lookup3.inl"
                },
                "region": {
                  "startLine": 441,
                  "startColumn": 71,
                  "endLine": 441,
                  "endColumn": 77,
                  "snippet": {
                    "text": "    case 0 : return c;                     /* zero length requires no mixing */\n    }\n\n  } else {                        /* need to read the key one byte at a time */\n    const uint8_t *k = (const uint8_t *)key;\n\n    /*--------------- all but the last block: affect some 32 bits of (a,b,c) */\n",
                    "rendered": {
                      "text": "    case 0 : return c;                     /* zero length requires no mixing */\n    }\n\n  } else {                        /* need to read the key one byte at a time */\n    const uint8_t *k = (const uint8_t *)key;\n\n    /*--------------- all but the last block: affect some 32 bits of (a,b,c) */\n",
                      "markdown": "`    case 0 : return c;                     /* zero length requires no mixing */\n    }\n\n  } else {                        /* need to read the key one byte at a time */\n    const uint8_t *k = (const uint8_t *)key;\n\n    /*--------------- all but the last block: affect some 32 bits of (a,b,c) */\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/private/lookup3.inl"
                },
                "region": {
                  "startLine": 339,
                  "startColumn": 40,
                  "endLine": 339,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    /*\n     * \"k[2]&0xffffff\" actually reads beyond the end of the string, but\n     * then masks off the part it's not allowed to read.  Because the\n     * string is aligned, the masked-off tail is in the same word as the\n     * rest of the string. Every machine with memory protection I've seen\n     * does it on word boundaries, so is OK with this. But VALGRIND and CBMC\n     * will still catch it and complain. CBMC will ignore this type of error\n",
                    "rendered": {
                      "text": "    /*\n     * \"k[2]&0xffffff\" actually reads beyond the end of the string, but\n     * then masks off the part it's not allowed to read.  Because the\n     * string is aligned, the masked-off tail is in the same word as the\n     * rest of the string. Every machine with memory protection I've seen\n     * does it on word boundaries, so is OK with this. But VALGRIND and CBMC\n     * will still catch it and complain. CBMC will ignore this type of error\n",
                      "markdown": "`    /*\n     * \"k[2]&0xffffff\" actually reads beyond the end of the string, but\n     * then masks off the part it's not allowed to read.  Because the\n     * string is aligned, the masked-off tail is in the same word as the\n     * rest of the string. Every machine with memory protection I've seen\n     * does it on word boundaries, so is OK with this. But VALGRIND and CBMC\n     * will still catch it and complain. CBMC will ignore this type of error\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/private/lookup3.inl"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 4,
                  "endLine": 161,
                  "endColumn": 9,
                  "snippet": {
                    "text": "Pairs of (a,b,c) values differing in only a few bits will usually\nproduce values of c that look totally different.  This was tested for\n* pairs that differed by one bit, by two bits, in any combination\n  of top bits of (a,b,c), or in any combination of bottom bits of\n  (a,b,c).\n* \"differ\" is defined as +, -, ^, or ~^.  For + and -, I transformed\n  the output delta to a Gray code (a^(a>>1)) so a string of 1's (as\n",
                    "rendered": {
                      "text": "Pairs of (a,b,c) values differing in only a few bits will usually\nproduce values of c that look totally different.  This was tested for\n* pairs that differed by one bit, by two bits, in any combination\n  of top bits of (a,b,c), or in any combination of bottom bits of\n  (a,b,c).\n* \"differ\" is defined as +, -, ^, or ~^.  For + and -, I transformed\n  the output delta to a Gray code (a^(a>>1)) so a string of 1's (as\n",
                      "markdown": "`Pairs of (a,b,c) values differing in only a few bits will usually\nproduce values of c that look totally different.  This was tested for\n* pairs that differed by one bit, by two bits, in any combination\n  of top bits of (a,b,c), or in any combination of bottom bits of\n  (a,b,c).\n* \"differ\" is defined as +, -, ^, or ~^.  For + and -, I transformed\n  the output delta to a Gray code (a^(a>>1)) so a string of 1's (as\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/private/lookup3.inl"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 38,
                  "endLine": 140,
                  "endColumn": 43,
                  "snippet": {
                    "text": "the number of bits affected, so the goal of mixing pulls in the opposite\ndirection as the goal of parallelism.  I did what I could.  Rotates\nseem to cost as much as shifts on every machine I could lay my hands\non, and rotates are much kinder to the top and bottom bits, so I used\nrotates.\n-------------------------------------------------------------------------------\n*/\n",
                    "rendered": {
                      "text": "the number of bits affected, so the goal of mixing pulls in the opposite\ndirection as the goal of parallelism.  I did what I could.  Rotates\nseem to cost as much as shifts on every machine I could lay my hands\non, and rotates are much kinder to the top and bottom bits, so I used\nrotates.\n-------------------------------------------------------------------------------\n*/\n",
                      "markdown": "`the number of bits affected, so the goal of mixing pulls in the opposite\ndirection as the goal of parallelism.  I did what I could.  Rotates\nseem to cost as much as shifts on every machine I could lay my hands\non, and rotates are much kinder to the top and bottom bits, so I used\nrotates.\n-------------------------------------------------------------------------------\n*/\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/private/lookup3.inl"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 4,
                  "endLine": 112,
                  "endColumn": 9,
                  "snippet": {
                    "text": "are sometimes the same for one pair and different for another pair.\nThis was tested for:\n* pairs that differed by one bit, by two bits, in any combination\n  of top bits of (a,b,c), or in any combination of bottom bits of\n  (a,b,c).\n* \"differ\" is defined as +, -, ^, or ~^.  For + and -, I transformed\n  the output delta to a Gray code (a^(a>>1)) so a string of 1's (as\n",
                    "rendered": {
                      "text": "are sometimes the same for one pair and different for another pair.\nThis was tested for:\n* pairs that differed by one bit, by two bits, in any combination\n  of top bits of (a,b,c), or in any combination of bottom bits of\n  (a,b,c).\n* \"differ\" is defined as +, -, ^, or ~^.  For + and -, I transformed\n  the output delta to a Gray code (a^(a>>1)) so a string of 1's (as\n",
                      "markdown": "`are sometimes the same for one pair and different for another pair.\nThis was tested for:\n* pairs that differed by one bit, by two bits, in any combination\n  of top bits of (a,b,c), or in any combination of bottom bits of\n  (a,b,c).\n* \"differ\" is defined as +, -, ^, or ~^.  For + and -, I transformed\n  the output delta to a Gray code (a^(a>>1)) so a string of 1's (as\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/private/lookup3.inl"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 41,
                  "endLine": 46,
                  "endColumn": 47,
                  "snippet": {
                    "text": "a character string), use hashlittle().  If you have several byte arrays, or\na mix of things, see the comments above hashlittle().\n\nWhy is this so big?  I read 12 bytes at a time into 3 4-byte integers,\nthen mix those integers.  This is fast (you can do a lot more thorough\nmixing with 12*3 instructions on 3 integers than you can with 3 instructions\non 1 byte), but shoehorning those bytes into integers efficiently is messy.\n",
                    "rendered": {
                      "text": "a character string), use hashlittle().  If you have several byte arrays, or\na mix of things, see the comments above hashlittle().\n\nWhy is this so big?  I read 12 bytes at a time into 3 4-byte integers,\nthen mix those integers.  This is fast (you can do a lot more thorough\nmixing with 12*3 instructions on 3 integers than you can with 3 instructions\non 1 byte), but shoehorning those bytes into integers efficiently is messy.\n",
                      "markdown": "`a character string), use hashlittle().  If you have several byte arrays, or\na mix of things, see the comments above hashlittle().\n\nWhy is this so big?  I read 12 bytes at a time into 3 4-byte integers,\nthen mix those integers.  This is fast (you can do a lot more thorough\nmixing with 12*3 instructions on 3 integers than you can with 3 instructions\non 1 byte), but shoehorning those bytes into integers efficiently is messy.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/private/lookup3.inl"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 14,
                  "endLine": 34,
                  "endColumn": 20,
                  "snippet": {
                    "text": "hashlittle() except it returns two 32-bit hashes for the price of one.\nYou could implement hashbig2() if you wanted but I haven't bothered here.\n\nIf you want to find a hash of, say, exactly 7 integers, do\n  a = i1;  b = i2;  c = i3;\n  mix(a,b,c);\n  a += i4; b += i5; c += i6;\n",
                    "rendered": {
                      "text": "hashlittle() except it returns two 32-bit hashes for the price of one.\nYou could implement hashbig2() if you wanted but I haven't bothered here.\n\nIf you want to find a hash of, say, exactly 7 integers, do\n  a = i1;  b = i2;  c = i3;\n  mix(a,b,c);\n  a += i4; b += i5; c += i6;\n",
                      "markdown": "`hashlittle() except it returns two 32-bit hashes for the price of one.\nYou could implement hashbig2() if you wanted but I haven't bothered here.\n\nIf you want to find a hash of, say, exactly 7 integers, do\n  a = i1;  b = i2;  c = i3;\n  mix(a,b,c);\n  a += i4; b += i5; c += i6;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/linked_list.inl"
                },
                "region": {
                  "startLine": 414,
                  "startColumn": 49,
                  "endLine": 414,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    AWS_PRECONDITION(dst != src);\n\n    if (!aws_linked_list_empty(src)) {\n        /* splice src nodes into dst, between the head and front nodes */\n        struct aws_linked_list_node *dst_front = dst->head.next;\n        struct aws_linked_list_node *src_front = src->head.next;\n        struct aws_linked_list_node *src_back = src->tail.prev;\n",
                    "rendered": {
                      "text": "    AWS_PRECONDITION(dst != src);\n\n    if (!aws_linked_list_empty(src)) {\n        /* splice src nodes into dst, between the head and front nodes */\n        struct aws_linked_list_node *dst_front = dst->head.next;\n        struct aws_linked_list_node *src_front = src->head.next;\n        struct aws_linked_list_node *src_back = src->tail.prev;\n",
                      "markdown": "`    AWS_PRECONDITION(dst != src);\n\n    if (!aws_linked_list_empty(src)) {\n        /* splice src nodes into dst, between the head and front nodes */\n        struct aws_linked_list_node *dst_front = dst->head.next;\n        struct aws_linked_list_node *src_front = src->head.next;\n        struct aws_linked_list_node *src_back = src->tail.prev;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/linked_list.inl"
                },
                "region": {
                  "startLine": 385,
                  "startColumn": 58,
                  "endLine": 385,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    AWS_PRECONDITION(dst != src);\n\n    if (!aws_linked_list_empty(src)) {\n        /* splice src nodes into dst, between the back and tail nodes */\n        struct aws_linked_list_node *dst_back = dst->tail.prev;\n        struct aws_linked_list_node *src_front = src->head.next;\n        struct aws_linked_list_node *src_back = src->tail.prev;\n",
                    "rendered": {
                      "text": "    AWS_PRECONDITION(dst != src);\n\n    if (!aws_linked_list_empty(src)) {\n        /* splice src nodes into dst, between the back and tail nodes */\n        struct aws_linked_list_node *dst_back = dst->tail.prev;\n        struct aws_linked_list_node *src_front = src->head.next;\n        struct aws_linked_list_node *src_back = src->tail.prev;\n",
                      "markdown": "`    AWS_PRECONDITION(dst != src);\n\n    if (!aws_linked_list_empty(src)) {\n        /* splice src nodes into dst, between the back and tail nodes */\n        struct aws_linked_list_node *dst_back = dst->tail.prev;\n        struct aws_linked_list_node *src_front = src->head.next;\n        struct aws_linked_list_node *src_back = src->tail.prev;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/linked_list.inl"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 19,
                  "endLine": 258,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n/**\n * Removes the specified node from the list (prev/next point to each other) and\n * returns the next node in the list.\n */\nAWS_STATIC_IMPL void aws_linked_list_remove(struct aws_linked_list_node *node) {\n    AWS_PRECONDITION(aws_linked_list_node_prev_is_valid(node));\n",
                    "rendered": {
                      "text": "\n/**\n * Removes the specified node from the list (prev/next point to each other) and\n * returns the next node in the list.\n */\nAWS_STATIC_IMPL void aws_linked_list_remove(struct aws_linked_list_node *node) {\n    AWS_PRECONDITION(aws_linked_list_node_prev_is_valid(node));\n",
                      "markdown": "`\n/**\n * Removes the specified node from the list (prev/next point to each other) and\n * returns the next node in the list.\n */\nAWS_STATIC_IMPL void aws_linked_list_remove(struct aws_linked_list_node *node) {\n    AWS_PRECONDITION(aws_linked_list_node_prev_is_valid(node));\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/linked_list.inl"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 24,
                  "endLine": 257,
                  "endColumn": 30,
                  "snippet": {
                    "text": "}\n\n/**\n * Removes the specified node from the list (prev/next point to each other) and\n * returns the next node in the list.\n */\nAWS_STATIC_IMPL void aws_linked_list_remove(struct aws_linked_list_node *node) {\n",
                    "rendered": {
                      "text": "}\n\n/**\n * Removes the specified node from the list (prev/next point to each other) and\n * returns the next node in the list.\n */\nAWS_STATIC_IMPL void aws_linked_list_remove(struct aws_linked_list_node *node) {\n",
                      "markdown": "`}\n\n/**\n * Removes the specified node from the list (prev/next point to each other) and\n * returns the next node in the list.\n */\nAWS_STATIC_IMPL void aws_linked_list_remove(struct aws_linked_list_node *node) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/linked_list.inl"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 39,
                  "endLine": 90,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    /* Head must reach tail by following next pointers */\n    bool head_reaches_tail = false;\n    /* By satisfying the above and that edges are bidirectional, we\n     * also guarantee that tail reaches head by following prev\n     * pointers */\n    while (temp) {\n        if (temp == &list->tail) {\n",
                    "rendered": {
                      "text": "    /* Head must reach tail by following next pointers */\n    bool head_reaches_tail = false;\n    /* By satisfying the above and that edges are bidirectional, we\n     * also guarantee that tail reaches head by following prev\n     * pointers */\n    while (temp) {\n        if (temp == &list->tail) {\n",
                      "markdown": "`    /* Head must reach tail by following next pointers */\n    bool head_reaches_tail = false;\n    /* By satisfying the above and that edges are bidirectional, we\n     * also guarantee that tail reaches head by following prev\n     * pointers */\n    while (temp) {\n        if (temp == &list->tail) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/linked_list.inl"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 26,
                  "endLine": 90,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    /* Head must reach tail by following next pointers */\n    bool head_reaches_tail = false;\n    /* By satisfying the above and that edges are bidirectional, we\n     * also guarantee that tail reaches head by following prev\n     * pointers */\n    while (temp) {\n        if (temp == &list->tail) {\n",
                    "rendered": {
                      "text": "    /* Head must reach tail by following next pointers */\n    bool head_reaches_tail = false;\n    /* By satisfying the above and that edges are bidirectional, we\n     * also guarantee that tail reaches head by following prev\n     * pointers */\n    while (temp) {\n        if (temp == &list->tail) {\n",
                      "markdown": "`    /* Head must reach tail by following next pointers */\n    bool head_reaches_tail = false;\n    /* By satisfying the above and that edges are bidirectional, we\n     * also guarantee that tail reaches head by following prev\n     * pointers */\n    while (temp) {\n        if (temp == &list->tail) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/linked_list.inl"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 22,
                  "endLine": 87,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    }\n    /* This could go into an infinite loop for a circular list */\n    const struct aws_linked_list_node *temp = &list->head;\n    /* Head must reach tail by following next pointers */\n    bool head_reaches_tail = false;\n    /* By satisfying the above and that edges are bidirectional, we\n     * also guarantee that tail reaches head by following prev\n",
                    "rendered": {
                      "text": "    }\n    /* This could go into an infinite loop for a circular list */\n    const struct aws_linked_list_node *temp = &list->head;\n    /* Head must reach tail by following next pointers */\n    bool head_reaches_tail = false;\n    /* By satisfying the above and that edges are bidirectional, we\n     * also guarantee that tail reaches head by following prev\n",
                      "markdown": "`    }\n    /* This could go into an infinite loop for a circular list */\n    const struct aws_linked_list_node *temp = &list->head;\n    /* Head must reach tail by following next pointers */\n    bool head_reaches_tail = false;\n    /* By satisfying the above and that edges are bidirectional, we\n     * also guarantee that tail reaches head by following prev\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/linked_list.inl"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 6,
                  "endLine": 87,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    }\n    /* This could go into an infinite loop for a circular list */\n    const struct aws_linked_list_node *temp = &list->head;\n    /* Head must reach tail by following next pointers */\n    bool head_reaches_tail = false;\n    /* By satisfying the above and that edges are bidirectional, we\n     * also guarantee that tail reaches head by following prev\n",
                    "rendered": {
                      "text": "    }\n    /* This could go into an infinite loop for a circular list */\n    const struct aws_linked_list_node *temp = &list->head;\n    /* Head must reach tail by following next pointers */\n    bool head_reaches_tail = false;\n    /* By satisfying the above and that edges are bidirectional, we\n     * also guarantee that tail reaches head by following prev\n",
                      "markdown": "`    }\n    /* This could go into an infinite loop for a circular list */\n    const struct aws_linked_list_node *temp = &list->head;\n    /* Head must reach tail by following next pointers */\n    bool head_reaches_tail = false;\n    /* By satisfying the above and that edges are bidirectional, we\n     * also guarantee that tail reaches head by following prev\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/linked_list.inl"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 65,
                  "endLine": 78,
                  "snippet": {
                    "text": " *\n * Note: This check *cannot* go into an infinite loop, because we\n * ensure that the connection to the next node is\n * bidirectional. Therefore, if a node's [a] a.next is a previous node\n * [b] in the list, b.prev != &a and so this check would fail, thus\n * terminating the loop.\n */\nAWS_STATIC_IMPL bool aws_linked_list_is_valid_deep(const struct aws_linked_list *list) {\n",
                    "rendered": {
                      "text": " *\n * Note: This check *cannot* go into an infinite loop, because we\n * ensure that the connection to the next node is\n * bidirectional. Therefore, if a node's [a] a.next is a previous node\n * [b] in the list, b.prev != &a and so this check would fail, thus\n * terminating the loop.\n */\nAWS_STATIC_IMPL bool aws_linked_list_is_valid_deep(const struct aws_linked_list *list) {\n",
                      "markdown": "` *\n * Note: This check *cannot* go into an infinite loop, because we\n * ensure that the connection to the next node is\n * bidirectional. Therefore, if a node's [a] a.next is a previous node\n * [b] in the list, b.prev != &a and so this check would fail, thus\n * terminating the loop.\n */\nAWS_STATIC_IMPL bool aws_linked_list_is_valid_deep(const struct aws_linked_list *list) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/linked_list.inl"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 41,
                  "endLine": 76,
                  "endColumn": 47,
                  "snippet": {
                    "text": " * and that every connection is bidirectional.\n *\n * Note: This check *cannot* go into an infinite loop, because we\n * ensure that the connection to the next node is\n * bidirectional. Therefore, if a node's [a] a.next is a previous node\n * [b] in the list, b.prev != &a and so this check would fail, thus\n * terminating the loop.\n",
                    "rendered": {
                      "text": " * and that every connection is bidirectional.\n *\n * Note: This check *cannot* go into an infinite loop, because we\n * ensure that the connection to the next node is\n * bidirectional. Therefore, if a node's [a] a.next is a previous node\n * [b] in the list, b.prev != &a and so this check would fail, thus\n * terminating the loop.\n",
                      "markdown": "` * and that every connection is bidirectional.\n *\n * Note: This check *cannot* go into an infinite loop, because we\n * ensure that the connection to the next node is\n * bidirectional. Therefore, if a node's [a] a.next is a previous node\n * [b] in the list, b.prev != &a and so this check would fail, thus\n * terminating the loop.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/linked_list.inl"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 45,
                  "endLine": 72,
                  "endColumn": 51,
                  "snippet": {
                    "text": "/**\n * Checks that a linked list satisfies double linked list connectivity\n * constraints. This check is O(n) as it traverses the whole linked\n * list to ensure that tail is reachable from head (and vice versa)\n * and that every connection is bidirectional.\n *\n * Note: This check *cannot* go into an infinite loop, because we\n",
                    "rendered": {
                      "text": "/**\n * Checks that a linked list satisfies double linked list connectivity\n * constraints. This check is O(n) as it traverses the whole linked\n * list to ensure that tail is reachable from head (and vice versa)\n * and that every connection is bidirectional.\n *\n * Note: This check *cannot* go into an infinite loop, because we\n",
                      "markdown": "`/**\n * Checks that a linked list satisfies double linked list connectivity\n * constraints. This check is O(n) as it traverses the whole linked\n * list to ensure that tail is reachable from head (and vice versa)\n * and that every connection is bidirectional.\n *\n * Note: This check *cannot* go into an infinite loop, because we\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/linked_list.inl"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 22,
                  "endLine": 72,
                  "endColumn": 28,
                  "snippet": {
                    "text": "/**\n * Checks that a linked list satisfies double linked list connectivity\n * constraints. This check is O(n) as it traverses the whole linked\n * list to ensure that tail is reachable from head (and vice versa)\n * and that every connection is bidirectional.\n *\n * Note: This check *cannot* go into an infinite loop, because we\n",
                    "rendered": {
                      "text": "/**\n * Checks that a linked list satisfies double linked list connectivity\n * constraints. This check is O(n) as it traverses the whole linked\n * list to ensure that tail is reachable from head (and vice versa)\n * and that every connection is bidirectional.\n *\n * Note: This check *cannot* go into an infinite loop, because we\n",
                      "markdown": "`/**\n * Checks that a linked list satisfies double linked list connectivity\n * constraints. This check is O(n) as it traverses the whole linked\n * list to ensure that tail is reachable from head (and vice versa)\n * and that every connection is bidirectional.\n *\n * Note: This check *cannot* go into an infinite loop, because we\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/linked_list.inl"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 10,
                  "endLine": 66,
                  "endColumn": 16,
                  "snippet": {
                    "text": " * head of a list.\n */\nAWS_STATIC_IMPL bool aws_linked_list_node_prev_is_valid(const struct aws_linked_list_node *node) {\n    return node && node->prev && node->prev->next == node;\n}\n\n/**\n",
                    "rendered": {
                      "text": " * head of a list.\n */\nAWS_STATIC_IMPL bool aws_linked_list_node_prev_is_valid(const struct aws_linked_list_node *node) {\n    return node && node->prev && node->prev->next == node;\n}\n\n/**\n",
                      "markdown": "` * head of a list.\n */\nAWS_STATIC_IMPL bool aws_linked_list_node_prev_is_valid(const struct aws_linked_list_node *node) {\n    return node && node->prev && node->prev->next == node;\n}\n\n/**\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/linked_list.inl"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 8,
                  "snippet": {
                    "text": "/**\n * Checks that the next of the prev pointer of a node points to the\n * node. Similarly to the above, this returns false if used for the\n * head of a list.\n */\nAWS_STATIC_IMPL bool aws_linked_list_node_prev_is_valid(const struct aws_linked_list_node *node) {\n    return node && node->prev && node->prev->next == node;\n",
                    "rendered": {
                      "text": "/**\n * Checks that the next of the prev pointer of a node points to the\n * node. Similarly to the above, this returns false if used for the\n * head of a list.\n */\nAWS_STATIC_IMPL bool aws_linked_list_node_prev_is_valid(const struct aws_linked_list_node *node) {\n    return node && node->prev && node->prev->next == node;\n",
                      "markdown": "`/**\n * Checks that the next of the prev pointer of a node points to the\n * node. Similarly to the above, this returns false if used for the\n * head of a list.\n */\nAWS_STATIC_IMPL bool aws_linked_list_node_prev_is_valid(const struct aws_linked_list_node *node) {\n    return node && node->prev && node->prev->next == node;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/linked_list.inl"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 48,
                  "endLine": 61,
                  "endColumn": 54,
                  "snippet": {
                    "text": "}\n\n/**\n * Checks that the next of the prev pointer of a node points to the\n * node. Similarly to the above, this returns false if used for the\n * head of a list.\n */\n",
                    "rendered": {
                      "text": "}\n\n/**\n * Checks that the next of the prev pointer of a node points to the\n * node. Similarly to the above, this returns false if used for the\n * head of a list.\n */\n",
                      "markdown": "`}\n\n/**\n * Checks that the next of the prev pointer of a node points to the\n * node. Similarly to the above, this returns false if used for the\n * head of a list.\n */\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/linked_list.inl"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 10,
                  "endLine": 57,
                  "endColumn": 16,
                  "snippet": {
                    "text": " * bidirectional, it returns false if used for the list tail.\n */\nAWS_STATIC_IMPL bool aws_linked_list_node_next_is_valid(const struct aws_linked_list_node *node) {\n    return node && node->next && node->next->prev == node;\n}\n\n/**\n",
                    "rendered": {
                      "text": " * bidirectional, it returns false if used for the list tail.\n */\nAWS_STATIC_IMPL bool aws_linked_list_node_next_is_valid(const struct aws_linked_list_node *node) {\n    return node && node->next && node->next->prev == node;\n}\n\n/**\n",
                      "markdown": "` * bidirectional, it returns false if used for the list tail.\n */\nAWS_STATIC_IMPL bool aws_linked_list_node_next_is_valid(const struct aws_linked_list_node *node) {\n    return node && node->next && node->next->prev == node;\n}\n\n/**\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/linked_list.inl"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 58,
                  "endLine": 53,
                  "endColumn": 64,
                  "snippet": {
                    "text": "\n/**\n * Checks that the prev of the next pointer of a node points to the\n * node. As this checks whether the [next] connection of a node is\n * bidirectional, it returns false if used for the list tail.\n */\nAWS_STATIC_IMPL bool aws_linked_list_node_next_is_valid(const struct aws_linked_list_node *node) {\n",
                    "rendered": {
                      "text": "\n/**\n * Checks that the prev of the next pointer of a node points to the\n * node. As this checks whether the [next] connection of a node is\n * bidirectional, it returns false if used for the list tail.\n */\nAWS_STATIC_IMPL bool aws_linked_list_node_next_is_valid(const struct aws_linked_list_node *node) {\n",
                      "markdown": "`\n/**\n * Checks that the prev of the next pointer of a node points to the\n * node. As this checks whether the [next] connection of a node is\n * bidirectional, it returns false if used for the list tail.\n */\nAWS_STATIC_IMPL bool aws_linked_list_node_next_is_valid(const struct aws_linked_list_node *node) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/linked_list.inl"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 48,
                  "endLine": 52,
                  "endColumn": 54,
                  "snippet": {
                    "text": "}\n\n/**\n * Checks that the prev of the next pointer of a node points to the\n * node. As this checks whether the [next] connection of a node is\n * bidirectional, it returns false if used for the list tail.\n */\n",
                    "rendered": {
                      "text": "}\n\n/**\n * Checks that the prev of the next pointer of a node points to the\n * node. As this checks whether the [next] connection of a node is\n * bidirectional, it returns false if used for the list tail.\n */\n",
                      "markdown": "`}\n\n/**\n * Checks that the prev of the next pointer of a node points to the\n * node. As this checks whether the [next] connection of a node is\n * bidirectional, it returns false if used for the list tail.\n */\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/math.inl"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 14,
                  "endLine": 170,
                  "endColumn": 20,
                  "snippet": {
                    "text": "}\n\n/**\n * Function to find the smallest result that is power of 2 >= n. Returns AWS_OP_ERR if this cannot\n * be done without overflow\n */\nAWS_STATIC_IMPL int aws_round_up_to_power_of_two(size_t n, size_t *result) {\n",
                    "rendered": {
                      "text": "}\n\n/**\n * Function to find the smallest result that is power of 2 >= n. Returns AWS_OP_ERR if this cannot\n * be done without overflow\n */\nAWS_STATIC_IMPL int aws_round_up_to_power_of_two(size_t n, size_t *result) {\n",
                      "markdown": "`}\n\n/**\n * Function to find the smallest result that is power of 2 >= n. Returns AWS_OP_ERR if this cannot\n * be done without overflow\n */\nAWS_STATIC_IMPL int aws_round_up_to_power_of_two(size_t n, size_t *result) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/uri.h"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 27,
                  "endLine": 24,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    struct aws_byte_cursor authority;\n    struct aws_byte_cursor userinfo;\n    struct aws_byte_cursor user;\n    struct aws_byte_cursor password;\n    struct aws_byte_cursor host_name;\n    uint32_t port;\n    struct aws_byte_cursor path;\n",
                    "rendered": {
                      "text": "    struct aws_byte_cursor authority;\n    struct aws_byte_cursor userinfo;\n    struct aws_byte_cursor user;\n    struct aws_byte_cursor password;\n    struct aws_byte_cursor host_name;\n    uint32_t port;\n    struct aws_byte_cursor path;\n",
                      "markdown": "`    struct aws_byte_cursor authority;\n    struct aws_byte_cursor userinfo;\n    struct aws_byte_cursor user;\n    struct aws_byte_cursor password;\n    struct aws_byte_cursor host_name;\n    uint32_t port;\n    struct aws_byte_cursor path;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/closed-issue-message.yml"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 27,
                  "endLine": 17,
                  "endColumn": 33,
                  "snippet": {
                    "text": "                     ### ⚠️COMMENT VISIBILITY WARNING⚠️ \n                     Comments on closed issues are hard for our team to see. \n                     If you need more assistance, please either tag a team member or open a new issue that references this one. \n                     If you wish to keep having a conversation with other community members under this issue feel free to do so.\n",
                    "rendered": {
                      "text": "                     ### ⚠️COMMENT VISIBILITY WARNING⚠️ \n                     Comments on closed issues are hard for our team to see. \n                     If you need more assistance, please either tag a team member or open a new issue that references this one. \n                     If you wish to keep having a conversation with other community members under this issue feel free to do so.\n",
                      "markdown": "`                     ### ⚠️COMMENT VISIBILITY WARNING⚠️ \n                     Comments on closed issues are hard for our team to see. \n                     If you need more assistance, please either tag a team member or open a new issue that references this one. \n                     If you wish to keep having a conversation with other community members under this issue feel free to do so.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 14,
                  "endLine": 186,
                  "snippet": {
                    "text": "          name: ${{ steps.artifact.outputs.name }}\n          path: ${{ steps.artifact.outputs.name }}.zip\n      - name: CBMC proof results\n        shell: bash\n        run: |\n          python3 ${{ env.PROOFS_DIR }}/lib/summarize.py \\\n            --run-file ${{ env.PROOFS_DIR }}/output/latest/html/run.json\n",
                    "rendered": {
                      "text": "          name: ${{ steps.artifact.outputs.name }}\n          path: ${{ steps.artifact.outputs.name }}.zip\n      - name: CBMC proof results\n        shell: bash\n        run: |\n          python3 ${{ env.PROOFS_DIR }}/lib/summarize.py \\\n            --run-file ${{ env.PROOFS_DIR }}/output/latest/html/run.json\n",
                      "markdown": "`          name: ${{ steps.artifact.outputs.name }}\n          path: ${{ steps.artifact.outputs.name }}.zip\n      - name: CBMC proof results\n        shell: bash\n        run: |\n          python3 ${{ env.PROOFS_DIR }}/lib/summarize.py \\\n            --run-file ${{ env.PROOFS_DIR }}/output/latest/html/run.json\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 14,
                  "endLine": 172,
                  "snippet": {
                    "text": "          echo \"name=cbmc_proof_results_${{ fromJson(toJson(github.event.repository)).name }}_$(date +%Y_%m_%d_%H_%M_%S)\" >> $GITHUB_OUTPUT\n      - name: Create zip artifact with CBMC proof results\n        if: ${{ env.REPO_VISIBILITY == 'public' }}\n        shell: bash\n        run: |\n          FINAL_REPORT_DIR=$PROOFS_DIR/output/latest/html\n          pushd $FINAL_REPORT_DIR \\\n            && zip -r ${{ steps.artifact.outputs.name }}.zip . \\\n",
                    "rendered": {
                      "text": "          echo \"name=cbmc_proof_results_${{ fromJson(toJson(github.event.repository)).name }}_$(date +%Y_%m_%d_%H_%M_%S)\" >> $GITHUB_OUTPUT\n      - name: Create zip artifact with CBMC proof results\n        if: ${{ env.REPO_VISIBILITY == 'public' }}\n        shell: bash\n        run: |\n          FINAL_REPORT_DIR=$PROOFS_DIR/output/latest/html\n          pushd $FINAL_REPORT_DIR \\\n            && zip -r ${{ steps.artifact.outputs.name }}.zip . \\\n",
                      "markdown": "`          echo \"name=cbmc_proof_results_${{ fromJson(toJson(github.event.repository)).name }}_$(date +%Y_%m_%d_%H_%M_%S)\" >> $GITHUB_OUTPUT\n      - name: Create zip artifact with CBMC proof results\n        if: ${{ env.REPO_VISIBILITY == 'public' }}\n        shell: bash\n        run: |\n          FINAL_REPORT_DIR=$PROOFS_DIR/output/latest/html\n          pushd $FINAL_REPORT_DIR \\\n            && zip -r ${{ steps.artifact.outputs.name }}.zip . \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 14,
                  "endLine": 161,
                  "snippet": {
                    "text": "        working-directory: ${{ env.PROOFS_DIR }}\n        run: ${{ env.RUN_CBMC_PROOFS_COMMAND }}\n      - name: Check repository visibility\n        shell: bash\n        run: |\n          VIZ=\"${{ fromJson(toJson(github.event.repository)).visibility }}\";\n          echo \"REPO_VISIBILITY=${VIZ}\" | tee -a \"${GITHUB_ENV}\";\n      - name: Set name for zip artifact with CBMC proof results\n",
                    "rendered": {
                      "text": "        working-directory: ${{ env.PROOFS_DIR }}\n        run: ${{ env.RUN_CBMC_PROOFS_COMMAND }}\n      - name: Check repository visibility\n        shell: bash\n        run: |\n          VIZ=\"${{ fromJson(toJson(github.event.repository)).visibility }}\";\n          echo \"REPO_VISIBILITY=${VIZ}\" | tee -a \"${GITHUB_ENV}\";\n      - name: Set name for zip artifact with CBMC proof results\n",
                      "markdown": "`        working-directory: ${{ env.PROOFS_DIR }}\n        run: ${{ env.RUN_CBMC_PROOFS_COMMAND }}\n      - name: Check repository visibility\n        shell: bash\n        run: |\n          VIZ=\"${{ fromJson(toJson(github.event.repository)).visibility }}\";\n          echo \"REPO_VISIBILITY=${VIZ}\" | tee -a \"${GITHUB_ENV}\";\n      - name: Set name for zip artifact with CBMC proof results\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 14,
                  "endLine": 155,
                  "snippet": {
                    "text": "            && make -j;\n          echo \"$(pwd)\" >> $GITHUB_PATH\n      - name: Run CBMC proofs\n        shell: bash\n        env:\n          EXTERNAL_SAT_SOLVER: kissat\n        working-directory: ${{ env.PROOFS_DIR }}\n        run: ${{ env.RUN_CBMC_PROOFS_COMMAND }}\n",
                    "rendered": {
                      "text": "            && make -j;\n          echo \"$(pwd)\" >> $GITHUB_PATH\n      - name: Run CBMC proofs\n        shell: bash\n        env:\n          EXTERNAL_SAT_SOLVER: kissat\n        working-directory: ${{ env.PROOFS_DIR }}\n        run: ${{ env.RUN_CBMC_PROOFS_COMMAND }}\n",
                      "markdown": "`            && make -j;\n          echo \"$(pwd)\" >> $GITHUB_PATH\n      - name: Run CBMC proofs\n        shell: bash\n        env:\n          EXTERNAL_SAT_SOLVER: kissat\n        working-directory: ${{ env.PROOFS_DIR }}\n        run: ${{ env.RUN_CBMC_PROOFS_COMMAND }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 14,
                  "endLine": 137,
                  "snippet": {
                    "text": "          echo \"$(pwd)\" >> $GITHUB_PATH\n      - name: Install ${{ env.CADICAL_TAG }} cadical\n        if: ${{ env.CADICAL_TAG != '' }}\n        shell: bash\n        run: |\n          if ${{ env.CADICAL_TAG == 'latest' }}\n          then\n            CADICAL_REL=\"https://api.github.com/repos/arminbiere/cadical/releases/latest\"\n",
                    "rendered": {
                      "text": "          echo \"$(pwd)\" >> $GITHUB_PATH\n      - name: Install ${{ env.CADICAL_TAG }} cadical\n        if: ${{ env.CADICAL_TAG != '' }}\n        shell: bash\n        run: |\n          if ${{ env.CADICAL_TAG == 'latest' }}\n          then\n            CADICAL_REL=\"https://api.github.com/repos/arminbiere/cadical/releases/latest\"\n",
                      "markdown": "`          echo \"$(pwd)\" >> $GITHUB_PATH\n      - name: Install ${{ env.CADICAL_TAG }} cadical\n        if: ${{ env.CADICAL_TAG != '' }}\n        shell: bash\n        run: |\n          if ${{ env.CADICAL_TAG == 'latest' }}\n          then\n            CADICAL_REL=\"https://api.github.com/repos/arminbiere/cadical/releases/latest\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 14,
                  "endLine": 118,
                  "snippet": {
                    "text": "          rm ./litani.deb\n      - name: Install ${{ env.KISSAT_TAG }} kissat\n        if: ${{ env.KISSAT_TAG != '' }}\n        shell: bash\n        run: |\n          if ${{ env.KISSAT_TAG == 'latest' }}\n          then\n            KISSAT_REL=\"https://api.github.com/repos/arminbiere/kissat/releases/latest\"\n",
                    "rendered": {
                      "text": "          rm ./litani.deb\n      - name: Install ${{ env.KISSAT_TAG }} kissat\n        if: ${{ env.KISSAT_TAG != '' }}\n        shell: bash\n        run: |\n          if ${{ env.KISSAT_TAG == 'latest' }}\n          then\n            KISSAT_REL=\"https://api.github.com/repos/arminbiere/kissat/releases/latest\"\n",
                      "markdown": "`          rm ./litani.deb\n      - name: Install ${{ env.KISSAT_TAG }} kissat\n        if: ${{ env.KISSAT_TAG != '' }}\n        shell: bash\n        run: |\n          if ${{ env.KISSAT_TAG == 'latest' }}\n          then\n            KISSAT_REL=\"https://api.github.com/repos/arminbiere/kissat/releases/latest\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 22,
                  "endLine": 113,
                  "snippet": {
                    "text": "        run: |\n          curl -o litani.deb -L \\\n            https://github.com/awslabs/aws-build-accumulator/releases/download/${{ env.LITANI_VERSION }}/litani-${{ env.LITANI_VERSION }}.deb\n          sudo apt-get update\n          sudo apt-get install --no-install-recommends --yes ./litani.deb\n          rm ./litani.deb\n      - name: Install ${{ env.KISSAT_TAG }} kissat\n        if: ${{ env.KISSAT_TAG != '' }}\n",
                    "rendered": {
                      "text": "        run: |\n          curl -o litani.deb -L \\\n            https://github.com/awslabs/aws-build-accumulator/releases/download/${{ env.LITANI_VERSION }}/litani-${{ env.LITANI_VERSION }}.deb\n          sudo apt-get update\n          sudo apt-get install --no-install-recommends --yes ./litani.deb\n          rm ./litani.deb\n      - name: Install ${{ env.KISSAT_TAG }} kissat\n        if: ${{ env.KISSAT_TAG != '' }}\n",
                      "markdown": "`        run: |\n          curl -o litani.deb -L \\\n            https://github.com/awslabs/aws-build-accumulator/releases/download/${{ env.LITANI_VERSION }}/litani-${{ env.LITANI_VERSION }}.deb\n          sudo apt-get update\n          sudo apt-get install --no-install-recommends --yes ./litani.deb\n          rm ./litani.deb\n      - name: Install ${{ env.KISSAT_TAG }} kissat\n        if: ${{ env.KISSAT_TAG != '' }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 14,
                  "endLine": 109,
                  "snippet": {
                    "text": "          rm ./$DBN_PKG_FILENAME\n      - name: Install Litani ${{ env.LITANI_VERSION }}\n        if: ${{ env.LITANI_VERSION != 'latest' }}\n        shell: bash\n        run: |\n          curl -o litani.deb -L \\\n            https://github.com/awslabs/aws-build-accumulator/releases/download/${{ env.LITANI_VERSION }}/litani-${{ env.LITANI_VERSION }}.deb\n          sudo apt-get update\n",
                    "rendered": {
                      "text": "          rm ./$DBN_PKG_FILENAME\n      - name: Install Litani ${{ env.LITANI_VERSION }}\n        if: ${{ env.LITANI_VERSION != 'latest' }}\n        shell: bash\n        run: |\n          curl -o litani.deb -L \\\n            https://github.com/awslabs/aws-build-accumulator/releases/download/${{ env.LITANI_VERSION }}/litani-${{ env.LITANI_VERSION }}.deb\n          sudo apt-get update\n",
                      "markdown": "`          rm ./$DBN_PKG_FILENAME\n      - name: Install Litani ${{ env.LITANI_VERSION }}\n        if: ${{ env.LITANI_VERSION != 'latest' }}\n        shell: bash\n        run: |\n          curl -o litani.deb -L \\\n            https://github.com/awslabs/aws-build-accumulator/releases/download/${{ env.LITANI_VERSION }}/litani-${{ env.LITANI_VERSION }}.deb\n          sudo apt-get update\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 22,
                  "endLine": 104,
                  "snippet": {
                    "text": "          LITANI_DEB=$(curl -s $LITANI_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r '.[].assets[0].browser_download_url' | head -n 1)\n          DBN_PKG_FILENAME=$(basename $LITANI_DEB)\n          curl -L $LITANI_DEB -o $DBN_PKG_FILENAME\n          sudo apt-get update\n          sudo apt-get install --no-install-recommends --yes ./$DBN_PKG_FILENAME\n          rm ./$DBN_PKG_FILENAME\n      - name: Install Litani ${{ env.LITANI_VERSION }}\n        if: ${{ env.LITANI_VERSION != 'latest' }}\n",
                    "rendered": {
                      "text": "          LITANI_DEB=$(curl -s $LITANI_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r '.[].assets[0].browser_download_url' | head -n 1)\n          DBN_PKG_FILENAME=$(basename $LITANI_DEB)\n          curl -L $LITANI_DEB -o $DBN_PKG_FILENAME\n          sudo apt-get update\n          sudo apt-get install --no-install-recommends --yes ./$DBN_PKG_FILENAME\n          rm ./$DBN_PKG_FILENAME\n      - name: Install Litani ${{ env.LITANI_VERSION }}\n        if: ${{ env.LITANI_VERSION != 'latest' }}\n",
                      "markdown": "`          LITANI_DEB=$(curl -s $LITANI_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r '.[].assets[0].browser_download_url' | head -n 1)\n          DBN_PKG_FILENAME=$(basename $LITANI_DEB)\n          curl -L $LITANI_DEB -o $DBN_PKG_FILENAME\n          sudo apt-get update\n          sudo apt-get install --no-install-recommends --yes ./$DBN_PKG_FILENAME\n          rm ./$DBN_PKG_FILENAME\n      - name: Install Litani ${{ env.LITANI_VERSION }}\n        if: ${{ env.LITANI_VERSION != 'latest' }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 14,
                  "endLine": 97,
                  "snippet": {
                    "text": "          pip3 install cbmc-viewer==${{ env.CBMC_VIEWER_VERSION }}\n      - name: Install latest Litani\n        if: ${{ env.LITANI_VERSION == 'latest' }}\n        shell: bash\n        run: |\n          # Search within 5 most recent releases for latest available package\n          LITANI_REL=\"https://api.github.com/repos/awslabs/aws-build-accumulator/releases?page=1&per_page=5\"\n          LITANI_DEB=$(curl -s $LITANI_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r '.[].assets[0].browser_download_url' | head -n 1)\n",
                    "rendered": {
                      "text": "          pip3 install cbmc-viewer==${{ env.CBMC_VIEWER_VERSION }}\n      - name: Install latest Litani\n        if: ${{ env.LITANI_VERSION == 'latest' }}\n        shell: bash\n        run: |\n          # Search within 5 most recent releases for latest available package\n          LITANI_REL=\"https://api.github.com/repos/awslabs/aws-build-accumulator/releases?page=1&per_page=5\"\n          LITANI_DEB=$(curl -s $LITANI_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r '.[].assets[0].browser_download_url' | head -n 1)\n",
                      "markdown": "`          pip3 install cbmc-viewer==${{ env.CBMC_VIEWER_VERSION }}\n      - name: Install latest Litani\n        if: ${{ env.LITANI_VERSION == 'latest' }}\n        shell: bash\n        run: |\n          # Search within 5 most recent releases for latest available package\n          LITANI_REL=\"https://api.github.com/repos/awslabs/aws-build-accumulator/releases?page=1&per_page=5\"\n          LITANI_DEB=$(curl -s $LITANI_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r '.[].assets[0].browser_download_url' | head -n 1)\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 22,
                  "endLine": 91,
                  "snippet": {
                    "text": "        if: ${{ env.CBMC_VIEWER_VERSION != 'latest' }}\n        shell: bash\n        run: |\n          sudo apt-get update\n          sudo apt-get install --no-install-recommends --yes \\\n            build-essential universal-ctags\n          pip3 install cbmc-viewer==${{ env.CBMC_VIEWER_VERSION }}\n      - name: Install latest Litani\n",
                    "rendered": {
                      "text": "        if: ${{ env.CBMC_VIEWER_VERSION != 'latest' }}\n        shell: bash\n        run: |\n          sudo apt-get update\n          sudo apt-get install --no-install-recommends --yes \\\n            build-essential universal-ctags\n          pip3 install cbmc-viewer==${{ env.CBMC_VIEWER_VERSION }}\n      - name: Install latest Litani\n",
                      "markdown": "`        if: ${{ env.CBMC_VIEWER_VERSION != 'latest' }}\n        shell: bash\n        run: |\n          sudo apt-get update\n          sudo apt-get install --no-install-recommends --yes \\\n            build-essential universal-ctags\n          pip3 install cbmc-viewer==${{ env.CBMC_VIEWER_VERSION }}\n      - name: Install latest Litani\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 14,
                  "endLine": 89,
                  "snippet": {
                    "text": "          pip3 install cbmc-viewer==$CBMC_VIEWER_VERSION\n      - name: Install CBMC viewer ${{ env.CBMC_VIEWER_VERSION }}\n        if: ${{ env.CBMC_VIEWER_VERSION != 'latest' }}\n        shell: bash\n        run: |\n          sudo apt-get update\n          sudo apt-get install --no-install-recommends --yes \\\n            build-essential universal-ctags\n",
                    "rendered": {
                      "text": "          pip3 install cbmc-viewer==$CBMC_VIEWER_VERSION\n      - name: Install CBMC viewer ${{ env.CBMC_VIEWER_VERSION }}\n        if: ${{ env.CBMC_VIEWER_VERSION != 'latest' }}\n        shell: bash\n        run: |\n          sudo apt-get update\n          sudo apt-get install --no-install-recommends --yes \\\n            build-essential universal-ctags\n",
                      "markdown": "`          pip3 install cbmc-viewer==$CBMC_VIEWER_VERSION\n      - name: Install CBMC viewer ${{ env.CBMC_VIEWER_VERSION }}\n        if: ${{ env.CBMC_VIEWER_VERSION != 'latest' }}\n        shell: bash\n        run: |\n          sudo apt-get update\n          sudo apt-get install --no-install-recommends --yes \\\n            build-essential universal-ctags\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 14,
                  "endLine": 82,
                  "snippet": {
                    "text": "          rm ./cbmc.deb\n      - name: Install latest CBMC viewer\n        if: ${{ env.CBMC_VIEWER_VERSION == 'latest' }}\n        shell: bash\n        run: |\n          CBMC_VIEWER_REL=\"https://api.github.com/repos/model-checking/cbmc-viewer/releases/latest\"\n          CBMC_VIEWER_VERSION=$(curl -s $CBMC_VIEWER_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r .name | sed  's/viewer-//')\n          pip3 install cbmc-viewer==$CBMC_VIEWER_VERSION\n",
                    "rendered": {
                      "text": "          rm ./cbmc.deb\n      - name: Install latest CBMC viewer\n        if: ${{ env.CBMC_VIEWER_VERSION == 'latest' }}\n        shell: bash\n        run: |\n          CBMC_VIEWER_REL=\"https://api.github.com/repos/model-checking/cbmc-viewer/releases/latest\"\n          CBMC_VIEWER_VERSION=$(curl -s $CBMC_VIEWER_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r .name | sed  's/viewer-//')\n          pip3 install cbmc-viewer==$CBMC_VIEWER_VERSION\n",
                      "markdown": "`          rm ./cbmc.deb\n      - name: Install latest CBMC viewer\n        if: ${{ env.CBMC_VIEWER_VERSION == 'latest' }}\n        shell: bash\n        run: |\n          CBMC_VIEWER_REL=\"https://api.github.com/repos/model-checking/cbmc-viewer/releases/latest\"\n          CBMC_VIEWER_VERSION=$(curl -s $CBMC_VIEWER_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r .name | sed  's/viewer-//')\n          pip3 install cbmc-viewer==$CBMC_VIEWER_VERSION\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 14,
                  "endLine": 74,
                  "snippet": {
                    "text": "          rm ./$CBMC_ARTIFACT_NAME\n      - name: Install CBMC ${{ env.CBMC_VERSION }}\n        if: ${{ env.CBMC_VERSION != 'latest' }}\n        shell: bash\n        run: |\n          curl -o cbmc.deb -L \\\n            https://github.com/diffblue/cbmc/releases/download/cbmc-${{ env.CBMC_VERSION }}/ubuntu-20.04-cbmc-${{ env.CBMC_VERSION }}-Linux.deb\n          sudo dpkg -i ./cbmc.deb\n",
                    "rendered": {
                      "text": "          rm ./$CBMC_ARTIFACT_NAME\n      - name: Install CBMC ${{ env.CBMC_VERSION }}\n        if: ${{ env.CBMC_VERSION != 'latest' }}\n        shell: bash\n        run: |\n          curl -o cbmc.deb -L \\\n            https://github.com/diffblue/cbmc/releases/download/cbmc-${{ env.CBMC_VERSION }}/ubuntu-20.04-cbmc-${{ env.CBMC_VERSION }}-Linux.deb\n          sudo dpkg -i ./cbmc.deb\n",
                      "markdown": "`          rm ./$CBMC_ARTIFACT_NAME\n      - name: Install CBMC ${{ env.CBMC_VERSION }}\n        if: ${{ env.CBMC_VERSION != 'latest' }}\n        shell: bash\n        run: |\n          curl -o cbmc.deb -L \\\n            https://github.com/diffblue/cbmc/releases/download/cbmc-${{ env.CBMC_VERSION }}/ubuntu-20.04-cbmc-${{ env.CBMC_VERSION }}-Linux.deb\n          sudo dpkg -i ./cbmc.deb\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 14,
                  "endLine": 63,
                  "snippet": {
                    "text": "          if [[ \"$should_exit\" == true ]]; then exit 1; fi\n      - name: Install latest CBMC\n        if: ${{ env.CBMC_VERSION == 'latest' }}\n        shell: bash\n        run: |\n          # Search within 5 most recent releases for latest available package\n          CBMC_REL=\"https://api.github.com/repos/diffblue/cbmc/releases?page=1&per_page=5\"\n          CBMC_DEB=$(curl -s $CBMC_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r '.[].assets[].browser_download_url' | grep -e 'ubuntu-20.04' | head -n 1)\n",
                    "rendered": {
                      "text": "          if [[ \"$should_exit\" == true ]]; then exit 1; fi\n      - name: Install latest CBMC\n        if: ${{ env.CBMC_VERSION == 'latest' }}\n        shell: bash\n        run: |\n          # Search within 5 most recent releases for latest available package\n          CBMC_REL=\"https://api.github.com/repos/diffblue/cbmc/releases?page=1&per_page=5\"\n          CBMC_DEB=$(curl -s $CBMC_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r '.[].assets[].browser_download_url' | grep -e 'ubuntu-20.04' | head -n 1)\n",
                      "markdown": "`          if [[ \"$should_exit\" == true ]]; then exit 1; fi\n      - name: Install latest CBMC\n        if: ${{ env.CBMC_VERSION == 'latest' }}\n        shell: bash\n        run: |\n          # Search within 5 most recent releases for latest available package\n          CBMC_REL=\"https://api.github.com/repos/diffblue/cbmc/releases?page=1&per_page=5\"\n          CBMC_DEB=$(curl -s $CBMC_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r '.[].assets[].browser_download_url' | grep -e 'ubuntu-20.04' | head -n 1)\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 14,
                  "endLine": 45,
                  "snippet": {
                    "text": "            echo \"${VAR}\"=$(yq .$setting $CONFIG_FILE) >> $GITHUB_ENV\n          done\n      - name: Ensure CBMC, CBMC viewer, Litani versions have been specified\n        shell: bash\n        run: |\n          should_exit=false\n          if [ \"${{ env.CBMC_VERSION }}\" == \"\" ]; then\n            echo \"You must specify a CBMC version (e.g. 'latest' or '5.70.0')\"\n",
                    "rendered": {
                      "text": "            echo \"${VAR}\"=$(yq .$setting $CONFIG_FILE) >> $GITHUB_ENV\n          done\n      - name: Ensure CBMC, CBMC viewer, Litani versions have been specified\n        shell: bash\n        run: |\n          should_exit=false\n          if [ \"${{ env.CBMC_VERSION }}\" == \"\" ]; then\n            echo \"You must specify a CBMC version (e.g. 'latest' or '5.70.0')\"\n",
                      "markdown": "`            echo \"${VAR}\"=$(yq .$setting $CONFIG_FILE) >> $GITHUB_ENV\n          done\n      - name: Ensure CBMC, CBMC viewer, Litani versions have been specified\n        shell: bash\n        run: |\n          should_exit=false\n          if [ \"${{ env.CBMC_VERSION }}\" == \"\" ]; then\n            echo \"You must specify a CBMC version (e.g. 'latest' or '5.70.0')\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 14,
                  "endLine": 186,
                  "snippet": {
                    "text": "          name: ${{ steps.artifact.outputs.name }}\n          path: ${{ steps.artifact.outputs.name }}.zip\n      - name: CBMC proof results\n        shell: bash\n        run: |\n          python3 ${{ env.PROOFS_DIR }}/lib/summarize.py \\\n            --run-file ${{ env.PROOFS_DIR }}/output/latest/html/run.json\n",
                    "rendered": {
                      "text": "          name: ${{ steps.artifact.outputs.name }}\n          path: ${{ steps.artifact.outputs.name }}.zip\n      - name: CBMC proof results\n        shell: bash\n        run: |\n          python3 ${{ env.PROOFS_DIR }}/lib/summarize.py \\\n            --run-file ${{ env.PROOFS_DIR }}/output/latest/html/run.json\n",
                      "markdown": "`          name: ${{ steps.artifact.outputs.name }}\n          path: ${{ steps.artifact.outputs.name }}.zip\n      - name: CBMC proof results\n        shell: bash\n        run: |\n          python3 ${{ env.PROOFS_DIR }}/lib/summarize.py \\\n            --run-file ${{ env.PROOFS_DIR }}/output/latest/html/run.json\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 14,
                  "endLine": 177,
                  "endColumn": 18,
                  "snippet": {
                    "text": "          pushd $FINAL_REPORT_DIR \\\n            && zip -r ${{ steps.artifact.outputs.name }}.zip . \\\n            && popd \\\n            && mv $FINAL_REPORT_DIR/${{ steps.artifact.outputs.name }}.zip .\n      - name: Upload zip artifact of CBMC proof results to GitHub Actions\n        if: ${{ env.REPO_VISIBILITY == 'public' }}\n        uses: actions/upload-artifact@v3\n",
                    "rendered": {
                      "text": "          pushd $FINAL_REPORT_DIR \\\n            && zip -r ${{ steps.artifact.outputs.name }}.zip . \\\n            && popd \\\n            && mv $FINAL_REPORT_DIR/${{ steps.artifact.outputs.name }}.zip .\n      - name: Upload zip artifact of CBMC proof results to GitHub Actions\n        if: ${{ env.REPO_VISIBILITY == 'public' }}\n        uses: actions/upload-artifact@v3\n",
                      "markdown": "`          pushd $FINAL_REPORT_DIR \\\n            && zip -r ${{ steps.artifact.outputs.name }}.zip . \\\n            && popd \\\n            && mv $FINAL_REPORT_DIR/${{ steps.artifact.outputs.name }}.zip .\n      - name: Upload zip artifact of CBMC proof results to GitHub Actions\n        if: ${{ env.REPO_VISIBILITY == 'public' }}\n        uses: actions/upload-artifact@v3\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 14,
                  "endLine": 172,
                  "snippet": {
                    "text": "          echo \"name=cbmc_proof_results_${{ fromJson(toJson(github.event.repository)).name }}_$(date +%Y_%m_%d_%H_%M_%S)\" >> $GITHUB_OUTPUT\n      - name: Create zip artifact with CBMC proof results\n        if: ${{ env.REPO_VISIBILITY == 'public' }}\n        shell: bash\n        run: |\n          FINAL_REPORT_DIR=$PROOFS_DIR/output/latest/html\n          pushd $FINAL_REPORT_DIR \\\n            && zip -r ${{ steps.artifact.outputs.name }}.zip . \\\n",
                    "rendered": {
                      "text": "          echo \"name=cbmc_proof_results_${{ fromJson(toJson(github.event.repository)).name }}_$(date +%Y_%m_%d_%H_%M_%S)\" >> $GITHUB_OUTPUT\n      - name: Create zip artifact with CBMC proof results\n        if: ${{ env.REPO_VISIBILITY == 'public' }}\n        shell: bash\n        run: |\n          FINAL_REPORT_DIR=$PROOFS_DIR/output/latest/html\n          pushd $FINAL_REPORT_DIR \\\n            && zip -r ${{ steps.artifact.outputs.name }}.zip . \\\n",
                      "markdown": "`          echo \"name=cbmc_proof_results_${{ fromJson(toJson(github.event.repository)).name }}_$(date +%Y_%m_%d_%H_%M_%S)\" >> $GITHUB_OUTPUT\n      - name: Create zip artifact with CBMC proof results\n        if: ${{ env.REPO_VISIBILITY == 'public' }}\n        shell: bash\n        run: |\n          FINAL_REPORT_DIR=$PROOFS_DIR/output/latest/html\n          pushd $FINAL_REPORT_DIR \\\n            && zip -r ${{ steps.artifact.outputs.name }}.zip . \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 41,
                  "endLine": 163,
                  "endColumn": 46,
                  "snippet": {
                    "text": "        shell: bash\n        run: |\n          VIZ=\"${{ fromJson(toJson(github.event.repository)).visibility }}\";\n          echo \"REPO_VISIBILITY=${VIZ}\" | tee -a \"${GITHUB_ENV}\";\n      - name: Set name for zip artifact with CBMC proof results\n        id: artifact\n        if: ${{ env.REPO_VISIBILITY == 'public' }}\n",
                    "rendered": {
                      "text": "        shell: bash\n        run: |\n          VIZ=\"${{ fromJson(toJson(github.event.repository)).visibility }}\";\n          echo \"REPO_VISIBILITY=${VIZ}\" | tee -a \"${GITHUB_ENV}\";\n      - name: Set name for zip artifact with CBMC proof results\n        id: artifact\n        if: ${{ env.REPO_VISIBILITY == 'public' }}\n",
                      "markdown": "`        shell: bash\n        run: |\n          VIZ=\"${{ fromJson(toJson(github.event.repository)).visibility }}\";\n          echo \"REPO_VISIBILITY=${VIZ}\" | tee -a \"${GITHUB_ENV}\";\n      - name: Set name for zip artifact with CBMC proof results\n        id: artifact\n        if: ${{ env.REPO_VISIBILITY == 'public' }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 14,
                  "endLine": 161,
                  "snippet": {
                    "text": "        working-directory: ${{ env.PROOFS_DIR }}\n        run: ${{ env.RUN_CBMC_PROOFS_COMMAND }}\n      - name: Check repository visibility\n        shell: bash\n        run: |\n          VIZ=\"${{ fromJson(toJson(github.event.repository)).visibility }}\";\n          echo \"REPO_VISIBILITY=${VIZ}\" | tee -a \"${GITHUB_ENV}\";\n      - name: Set name for zip artifact with CBMC proof results\n",
                    "rendered": {
                      "text": "        working-directory: ${{ env.PROOFS_DIR }}\n        run: ${{ env.RUN_CBMC_PROOFS_COMMAND }}\n      - name: Check repository visibility\n        shell: bash\n        run: |\n          VIZ=\"${{ fromJson(toJson(github.event.repository)).visibility }}\";\n          echo \"REPO_VISIBILITY=${VIZ}\" | tee -a \"${GITHUB_ENV}\";\n      - name: Set name for zip artifact with CBMC proof results\n",
                      "markdown": "`        working-directory: ${{ env.PROOFS_DIR }}\n        run: ${{ env.RUN_CBMC_PROOFS_COMMAND }}\n      - name: Check repository visibility\n        shell: bash\n        run: |\n          VIZ=\"${{ fromJson(toJson(github.event.repository)).visibility }}\";\n          echo \"REPO_VISIBILITY=${VIZ}\" | tee -a \"${GITHUB_ENV}\";\n      - name: Set name for zip artifact with CBMC proof results\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 14,
                  "endLine": 155,
                  "snippet": {
                    "text": "            && make -j;\n          echo \"$(pwd)\" >> $GITHUB_PATH\n      - name: Run CBMC proofs\n        shell: bash\n        env:\n          EXTERNAL_SAT_SOLVER: kissat\n        working-directory: ${{ env.PROOFS_DIR }}\n        run: ${{ env.RUN_CBMC_PROOFS_COMMAND }}\n",
                    "rendered": {
                      "text": "            && make -j;\n          echo \"$(pwd)\" >> $GITHUB_PATH\n      - name: Run CBMC proofs\n        shell: bash\n        env:\n          EXTERNAL_SAT_SOLVER: kissat\n        working-directory: ${{ env.PROOFS_DIR }}\n        run: ${{ env.RUN_CBMC_PROOFS_COMMAND }}\n",
                      "markdown": "`            && make -j;\n          echo \"$(pwd)\" >> $GITHUB_PATH\n      - name: Run CBMC proofs\n        shell: bash\n        env:\n          EXTERNAL_SAT_SOLVER: kissat\n        working-directory: ${{ env.PROOFS_DIR }}\n        run: ${{ env.RUN_CBMC_PROOFS_COMMAND }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 14,
                  "endLine": 148,
                  "endColumn": 19,
                  "snippet": {
                    "text": "          echo \"Installing cadical $CADICAL_TAG_NAME\"\n          git clone https://github.com/arminbiere/cadical.git \\\n            && cd cadical \\\n            && git checkout $CADICAL_TAG_NAME \\\n            && ./configure \\\n            && cd build \\\n            && make -j;\n",
                    "rendered": {
                      "text": "          echo \"Installing cadical $CADICAL_TAG_NAME\"\n          git clone https://github.com/arminbiere/cadical.git \\\n            && cd cadical \\\n            && git checkout $CADICAL_TAG_NAME \\\n            && ./configure \\\n            && cd build \\\n            && make -j;\n",
                      "markdown": "`          echo \"Installing cadical $CADICAL_TAG_NAME\"\n          git clone https://github.com/arminbiere/cadical.git \\\n            && cd cadical \\\n            && git checkout $CADICAL_TAG_NAME \\\n            && ./configure \\\n            && cd build \\\n            && make -j;\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 9,
                  "endLine": 146,
                  "endColumn": 14,
                  "snippet": {
                    "text": "            CADICAL_TAG_NAME=${{ env.CADICAL_TAG }}\n          fi\n          echo \"Installing cadical $CADICAL_TAG_NAME\"\n          git clone https://github.com/arminbiere/cadical.git \\\n            && cd cadical \\\n            && git checkout $CADICAL_TAG_NAME \\\n            && ./configure \\\n",
                    "rendered": {
                      "text": "            CADICAL_TAG_NAME=${{ env.CADICAL_TAG }}\n          fi\n          echo \"Installing cadical $CADICAL_TAG_NAME\"\n          git clone https://github.com/arminbiere/cadical.git \\\n            && cd cadical \\\n            && git checkout $CADICAL_TAG_NAME \\\n            && ./configure \\\n",
                      "markdown": "`            CADICAL_TAG_NAME=${{ env.CADICAL_TAG }}\n          fi\n          echo \"Installing cadical $CADICAL_TAG_NAME\"\n          git clone https://github.com/arminbiere/cadical.git \\\n            && cd cadical \\\n            && git checkout $CADICAL_TAG_NAME \\\n            && ./configure \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 14,
                  "endLine": 137,
                  "snippet": {
                    "text": "          echo \"$(pwd)\" >> $GITHUB_PATH\n      - name: Install ${{ env.CADICAL_TAG }} cadical\n        if: ${{ env.CADICAL_TAG != '' }}\n        shell: bash\n        run: |\n          if ${{ env.CADICAL_TAG == 'latest' }}\n          then\n            CADICAL_REL=\"https://api.github.com/repos/arminbiere/cadical/releases/latest\"\n",
                    "rendered": {
                      "text": "          echo \"$(pwd)\" >> $GITHUB_PATH\n      - name: Install ${{ env.CADICAL_TAG }} cadical\n        if: ${{ env.CADICAL_TAG != '' }}\n        shell: bash\n        run: |\n          if ${{ env.CADICAL_TAG == 'latest' }}\n          then\n            CADICAL_REL=\"https://api.github.com/repos/arminbiere/cadical/releases/latest\"\n",
                      "markdown": "`          echo \"$(pwd)\" >> $GITHUB_PATH\n      - name: Install ${{ env.CADICAL_TAG }} cadical\n        if: ${{ env.CADICAL_TAG != '' }}\n        shell: bash\n        run: |\n          if ${{ env.CADICAL_TAG == 'latest' }}\n          then\n            CADICAL_REL=\"https://api.github.com/repos/arminbiere/cadical/releases/latest\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 14,
                  "endLine": 129,
                  "endColumn": 19,
                  "snippet": {
                    "text": "          echo \"Installing kissat $KISSAT_TAG_NAME\"\n          git clone https://github.com/arminbiere/kissat.git \\\n            && cd kissat \\\n            && git checkout $KISSAT_TAG_NAME \\\n            && ./configure \\\n            && cd build \\\n            && make -j;\n",
                    "rendered": {
                      "text": "          echo \"Installing kissat $KISSAT_TAG_NAME\"\n          git clone https://github.com/arminbiere/kissat.git \\\n            && cd kissat \\\n            && git checkout $KISSAT_TAG_NAME \\\n            && ./configure \\\n            && cd build \\\n            && make -j;\n",
                      "markdown": "`          echo \"Installing kissat $KISSAT_TAG_NAME\"\n          git clone https://github.com/arminbiere/kissat.git \\\n            && cd kissat \\\n            && git checkout $KISSAT_TAG_NAME \\\n            && ./configure \\\n            && cd build \\\n            && make -j;\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 9,
                  "endLine": 127,
                  "endColumn": 14,
                  "snippet": {
                    "text": "            KISSAT_TAG_NAME=${{ env.KISSAT_TAG }}\n          fi\n          echo \"Installing kissat $KISSAT_TAG_NAME\"\n          git clone https://github.com/arminbiere/kissat.git \\\n            && cd kissat \\\n            && git checkout $KISSAT_TAG_NAME \\\n            && ./configure \\\n",
                    "rendered": {
                      "text": "            KISSAT_TAG_NAME=${{ env.KISSAT_TAG }}\n          fi\n          echo \"Installing kissat $KISSAT_TAG_NAME\"\n          git clone https://github.com/arminbiere/kissat.git \\\n            && cd kissat \\\n            && git checkout $KISSAT_TAG_NAME \\\n            && ./configure \\\n",
                      "markdown": "`            KISSAT_TAG_NAME=${{ env.KISSAT_TAG }}\n          fi\n          echo \"Installing kissat $KISSAT_TAG_NAME\"\n          git clone https://github.com/arminbiere/kissat.git \\\n            && cd kissat \\\n            && git checkout $KISSAT_TAG_NAME \\\n            && ./configure \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 14,
                  "endLine": 118,
                  "snippet": {
                    "text": "          rm ./litani.deb\n      - name: Install ${{ env.KISSAT_TAG }} kissat\n        if: ${{ env.KISSAT_TAG != '' }}\n        shell: bash\n        run: |\n          if ${{ env.KISSAT_TAG == 'latest' }}\n          then\n            KISSAT_REL=\"https://api.github.com/repos/arminbiere/kissat/releases/latest\"\n",
                    "rendered": {
                      "text": "          rm ./litani.deb\n      - name: Install ${{ env.KISSAT_TAG }} kissat\n        if: ${{ env.KISSAT_TAG != '' }}\n        shell: bash\n        run: |\n          if ${{ env.KISSAT_TAG == 'latest' }}\n          then\n            KISSAT_REL=\"https://api.github.com/repos/arminbiere/kissat/releases/latest\"\n",
                      "markdown": "`          rm ./litani.deb\n      - name: Install ${{ env.KISSAT_TAG }} kissat\n        if: ${{ env.KISSAT_TAG != '' }}\n        shell: bash\n        run: |\n          if ${{ env.KISSAT_TAG == 'latest' }}\n          then\n            KISSAT_REL=\"https://api.github.com/repos/arminbiere/kissat/releases/latest\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 14,
                  "endLine": 113,
                  "endColumn": 23,
                  "snippet": {
                    "text": "          curl -o litani.deb -L \\\n            https://github.com/awslabs/aws-build-accumulator/releases/download/${{ env.LITANI_VERSION }}/litani-${{ env.LITANI_VERSION }}.deb\n          sudo apt-get update\n          sudo apt-get install --no-install-recommends --yes ./litani.deb\n          rm ./litani.deb\n      - name: Install ${{ env.KISSAT_TAG }} kissat\n        if: ${{ env.KISSAT_TAG != '' }}\n",
                    "rendered": {
                      "text": "          curl -o litani.deb -L \\\n            https://github.com/awslabs/aws-build-accumulator/releases/download/${{ env.LITANI_VERSION }}/litani-${{ env.LITANI_VERSION }}.deb\n          sudo apt-get update\n          sudo apt-get install --no-install-recommends --yes ./litani.deb\n          rm ./litani.deb\n      - name: Install ${{ env.KISSAT_TAG }} kissat\n        if: ${{ env.KISSAT_TAG != '' }}\n",
                      "markdown": "`          curl -o litani.deb -L \\\n            https://github.com/awslabs/aws-build-accumulator/releases/download/${{ env.LITANI_VERSION }}/litani-${{ env.LITANI_VERSION }}.deb\n          sudo apt-get update\n          sudo apt-get install --no-install-recommends --yes ./litani.deb\n          rm ./litani.deb\n      - name: Install ${{ env.KISSAT_TAG }} kissat\n        if: ${{ env.KISSAT_TAG != '' }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 14,
                  "endLine": 112,
                  "endColumn": 23,
                  "snippet": {
                    "text": "        run: |\n          curl -o litani.deb -L \\\n            https://github.com/awslabs/aws-build-accumulator/releases/download/${{ env.LITANI_VERSION }}/litani-${{ env.LITANI_VERSION }}.deb\n          sudo apt-get update\n          sudo apt-get install --no-install-recommends --yes ./litani.deb\n          rm ./litani.deb\n      - name: Install ${{ env.KISSAT_TAG }} kissat\n",
                    "rendered": {
                      "text": "        run: |\n          curl -o litani.deb -L \\\n            https://github.com/awslabs/aws-build-accumulator/releases/download/${{ env.LITANI_VERSION }}/litani-${{ env.LITANI_VERSION }}.deb\n          sudo apt-get update\n          sudo apt-get install --no-install-recommends --yes ./litani.deb\n          rm ./litani.deb\n      - name: Install ${{ env.KISSAT_TAG }} kissat\n",
                      "markdown": "`        run: |\n          curl -o litani.deb -L \\\n            https://github.com/awslabs/aws-build-accumulator/releases/download/${{ env.LITANI_VERSION }}/litani-${{ env.LITANI_VERSION }}.deb\n          sudo apt-get update\n          sudo apt-get install --no-install-recommends --yes ./litani.deb\n          rm ./litani.deb\n      - name: Install ${{ env.KISSAT_TAG }} kissat\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 9,
                  "endLine": 110,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        if: ${{ env.LITANI_VERSION != 'latest' }}\n        shell: bash\n        run: |\n          curl -o litani.deb -L \\\n            https://github.com/awslabs/aws-build-accumulator/releases/download/${{ env.LITANI_VERSION }}/litani-${{ env.LITANI_VERSION }}.deb\n          sudo apt-get update\n          sudo apt-get install --no-install-recommends --yes ./litani.deb\n",
                    "rendered": {
                      "text": "        if: ${{ env.LITANI_VERSION != 'latest' }}\n        shell: bash\n        run: |\n          curl -o litani.deb -L \\\n            https://github.com/awslabs/aws-build-accumulator/releases/download/${{ env.LITANI_VERSION }}/litani-${{ env.LITANI_VERSION }}.deb\n          sudo apt-get update\n          sudo apt-get install --no-install-recommends --yes ./litani.deb\n",
                      "markdown": "`        if: ${{ env.LITANI_VERSION != 'latest' }}\n        shell: bash\n        run: |\n          curl -o litani.deb -L \\\n            https://github.com/awslabs/aws-build-accumulator/releases/download/${{ env.LITANI_VERSION }}/litani-${{ env.LITANI_VERSION }}.deb\n          sudo apt-get update\n          sudo apt-get install --no-install-recommends --yes ./litani.deb\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 14,
                  "endLine": 109,
                  "snippet": {
                    "text": "          rm ./$DBN_PKG_FILENAME\n      - name: Install Litani ${{ env.LITANI_VERSION }}\n        if: ${{ env.LITANI_VERSION != 'latest' }}\n        shell: bash\n        run: |\n          curl -o litani.deb -L \\\n            https://github.com/awslabs/aws-build-accumulator/releases/download/${{ env.LITANI_VERSION }}/litani-${{ env.LITANI_VERSION }}.deb\n          sudo apt-get update\n",
                    "rendered": {
                      "text": "          rm ./$DBN_PKG_FILENAME\n      - name: Install Litani ${{ env.LITANI_VERSION }}\n        if: ${{ env.LITANI_VERSION != 'latest' }}\n        shell: bash\n        run: |\n          curl -o litani.deb -L \\\n            https://github.com/awslabs/aws-build-accumulator/releases/download/${{ env.LITANI_VERSION }}/litani-${{ env.LITANI_VERSION }}.deb\n          sudo apt-get update\n",
                      "markdown": "`          rm ./$DBN_PKG_FILENAME\n      - name: Install Litani ${{ env.LITANI_VERSION }}\n        if: ${{ env.LITANI_VERSION != 'latest' }}\n        shell: bash\n        run: |\n          curl -o litani.deb -L \\\n            https://github.com/awslabs/aws-build-accumulator/releases/download/${{ env.LITANI_VERSION }}/litani-${{ env.LITANI_VERSION }}.deb\n          sudo apt-get update\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 14,
                  "endLine": 104,
                  "endColumn": 23,
                  "snippet": {
                    "text": "          DBN_PKG_FILENAME=$(basename $LITANI_DEB)\n          curl -L $LITANI_DEB -o $DBN_PKG_FILENAME\n          sudo apt-get update\n          sudo apt-get install --no-install-recommends --yes ./$DBN_PKG_FILENAME\n          rm ./$DBN_PKG_FILENAME\n      - name: Install Litani ${{ env.LITANI_VERSION }}\n        if: ${{ env.LITANI_VERSION != 'latest' }}\n",
                    "rendered": {
                      "text": "          DBN_PKG_FILENAME=$(basename $LITANI_DEB)\n          curl -L $LITANI_DEB -o $DBN_PKG_FILENAME\n          sudo apt-get update\n          sudo apt-get install --no-install-recommends --yes ./$DBN_PKG_FILENAME\n          rm ./$DBN_PKG_FILENAME\n      - name: Install Litani ${{ env.LITANI_VERSION }}\n        if: ${{ env.LITANI_VERSION != 'latest' }}\n",
                      "markdown": "`          DBN_PKG_FILENAME=$(basename $LITANI_DEB)\n          curl -L $LITANI_DEB -o $DBN_PKG_FILENAME\n          sudo apt-get update\n          sudo apt-get install --no-install-recommends --yes ./$DBN_PKG_FILENAME\n          rm ./$DBN_PKG_FILENAME\n      - name: Install Litani ${{ env.LITANI_VERSION }}\n        if: ${{ env.LITANI_VERSION != 'latest' }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 14,
                  "endLine": 103,
                  "endColumn": 23,
                  "snippet": {
                    "text": "          LITANI_DEB=$(curl -s $LITANI_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r '.[].assets[0].browser_download_url' | head -n 1)\n          DBN_PKG_FILENAME=$(basename $LITANI_DEB)\n          curl -L $LITANI_DEB -o $DBN_PKG_FILENAME\n          sudo apt-get update\n          sudo apt-get install --no-install-recommends --yes ./$DBN_PKG_FILENAME\n          rm ./$DBN_PKG_FILENAME\n      - name: Install Litani ${{ env.LITANI_VERSION }}\n",
                    "rendered": {
                      "text": "          LITANI_DEB=$(curl -s $LITANI_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r '.[].assets[0].browser_download_url' | head -n 1)\n          DBN_PKG_FILENAME=$(basename $LITANI_DEB)\n          curl -L $LITANI_DEB -o $DBN_PKG_FILENAME\n          sudo apt-get update\n          sudo apt-get install --no-install-recommends --yes ./$DBN_PKG_FILENAME\n          rm ./$DBN_PKG_FILENAME\n      - name: Install Litani ${{ env.LITANI_VERSION }}\n",
                      "markdown": "`          LITANI_DEB=$(curl -s $LITANI_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r '.[].assets[0].browser_download_url' | head -n 1)\n          DBN_PKG_FILENAME=$(basename $LITANI_DEB)\n          curl -L $LITANI_DEB -o $DBN_PKG_FILENAME\n          sudo apt-get update\n          sudo apt-get install --no-install-recommends --yes ./$DBN_PKG_FILENAME\n          rm ./$DBN_PKG_FILENAME\n      - name: Install Litani ${{ env.LITANI_VERSION }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 9,
                  "endLine": 102,
                  "endColumn": 15,
                  "snippet": {
                    "text": "          LITANI_REL=\"https://api.github.com/repos/awslabs/aws-build-accumulator/releases?page=1&per_page=5\"\n          LITANI_DEB=$(curl -s $LITANI_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r '.[].assets[0].browser_download_url' | head -n 1)\n          DBN_PKG_FILENAME=$(basename $LITANI_DEB)\n          curl -L $LITANI_DEB -o $DBN_PKG_FILENAME\n          sudo apt-get update\n          sudo apt-get install --no-install-recommends --yes ./$DBN_PKG_FILENAME\n          rm ./$DBN_PKG_FILENAME\n",
                    "rendered": {
                      "text": "          LITANI_REL=\"https://api.github.com/repos/awslabs/aws-build-accumulator/releases?page=1&per_page=5\"\n          LITANI_DEB=$(curl -s $LITANI_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r '.[].assets[0].browser_download_url' | head -n 1)\n          DBN_PKG_FILENAME=$(basename $LITANI_DEB)\n          curl -L $LITANI_DEB -o $DBN_PKG_FILENAME\n          sudo apt-get update\n          sudo apt-get install --no-install-recommends --yes ./$DBN_PKG_FILENAME\n          rm ./$DBN_PKG_FILENAME\n",
                      "markdown": "`          LITANI_REL=\"https://api.github.com/repos/awslabs/aws-build-accumulator/releases?page=1&per_page=5\"\n          LITANI_DEB=$(curl -s $LITANI_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r '.[].assets[0].browser_download_url' | head -n 1)\n          DBN_PKG_FILENAME=$(basename $LITANI_DEB)\n          curl -L $LITANI_DEB -o $DBN_PKG_FILENAME\n          sudo apt-get update\n          sudo apt-get install --no-install-recommends --yes ./$DBN_PKG_FILENAME\n          rm ./$DBN_PKG_FILENAME\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 150,
                  "endLine": 100,
                  "endColumn": 156,
                  "snippet": {
                    "text": "        run: |\n          # Search within 5 most recent releases for latest available package\n          LITANI_REL=\"https://api.github.com/repos/awslabs/aws-build-accumulator/releases?page=1&per_page=5\"\n          LITANI_DEB=$(curl -s $LITANI_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r '.[].assets[0].browser_download_url' | head -n 1)\n          DBN_PKG_FILENAME=$(basename $LITANI_DEB)\n          curl -L $LITANI_DEB -o $DBN_PKG_FILENAME\n          sudo apt-get update\n",
                    "rendered": {
                      "text": "        run: |\n          # Search within 5 most recent releases for latest available package\n          LITANI_REL=\"https://api.github.com/repos/awslabs/aws-build-accumulator/releases?page=1&per_page=5\"\n          LITANI_DEB=$(curl -s $LITANI_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r '.[].assets[0].browser_download_url' | head -n 1)\n          DBN_PKG_FILENAME=$(basename $LITANI_DEB)\n          curl -L $LITANI_DEB -o $DBN_PKG_FILENAME\n          sudo apt-get update\n",
                      "markdown": "`        run: |\n          # Search within 5 most recent releases for latest available package\n          LITANI_REL=\"https://api.github.com/repos/awslabs/aws-build-accumulator/releases?page=1&per_page=5\"\n          LITANI_DEB=$(curl -s $LITANI_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r '.[].assets[0].browser_download_url' | head -n 1)\n          DBN_PKG_FILENAME=$(basename $LITANI_DEB)\n          curl -L $LITANI_DEB -o $DBN_PKG_FILENAME\n          sudo apt-get update\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 14,
                  "endLine": 97,
                  "snippet": {
                    "text": "          pip3 install cbmc-viewer==${{ env.CBMC_VIEWER_VERSION }}\n      - name: Install latest Litani\n        if: ${{ env.LITANI_VERSION == 'latest' }}\n        shell: bash\n        run: |\n          # Search within 5 most recent releases for latest available package\n          LITANI_REL=\"https://api.github.com/repos/awslabs/aws-build-accumulator/releases?page=1&per_page=5\"\n          LITANI_DEB=$(curl -s $LITANI_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r '.[].assets[0].browser_download_url' | head -n 1)\n",
                    "rendered": {
                      "text": "          pip3 install cbmc-viewer==${{ env.CBMC_VIEWER_VERSION }}\n      - name: Install latest Litani\n        if: ${{ env.LITANI_VERSION == 'latest' }}\n        shell: bash\n        run: |\n          # Search within 5 most recent releases for latest available package\n          LITANI_REL=\"https://api.github.com/repos/awslabs/aws-build-accumulator/releases?page=1&per_page=5\"\n          LITANI_DEB=$(curl -s $LITANI_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r '.[].assets[0].browser_download_url' | head -n 1)\n",
                      "markdown": "`          pip3 install cbmc-viewer==${{ env.CBMC_VIEWER_VERSION }}\n      - name: Install latest Litani\n        if: ${{ env.LITANI_VERSION == 'latest' }}\n        shell: bash\n        run: |\n          # Search within 5 most recent releases for latest available package\n          LITANI_REL=\"https://api.github.com/repos/awslabs/aws-build-accumulator/releases?page=1&per_page=5\"\n          LITANI_DEB=$(curl -s $LITANI_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r '.[].assets[0].browser_download_url' | head -n 1)\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 14,
                  "endLine": 91,
                  "endColumn": 23,
                  "snippet": {
                    "text": "        shell: bash\n        run: |\n          sudo apt-get update\n          sudo apt-get install --no-install-recommends --yes \\\n            build-essential universal-ctags\n          pip3 install cbmc-viewer==${{ env.CBMC_VIEWER_VERSION }}\n      - name: Install latest Litani\n",
                    "rendered": {
                      "text": "        shell: bash\n        run: |\n          sudo apt-get update\n          sudo apt-get install --no-install-recommends --yes \\\n            build-essential universal-ctags\n          pip3 install cbmc-viewer==${{ env.CBMC_VIEWER_VERSION }}\n      - name: Install latest Litani\n",
                      "markdown": "`        shell: bash\n        run: |\n          sudo apt-get update\n          sudo apt-get install --no-install-recommends --yes \\\n            build-essential universal-ctags\n          pip3 install cbmc-viewer==${{ env.CBMC_VIEWER_VERSION }}\n      - name: Install latest Litani\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 14,
                  "endLine": 90,
                  "endColumn": 23,
                  "snippet": {
                    "text": "        if: ${{ env.CBMC_VIEWER_VERSION != 'latest' }}\n        shell: bash\n        run: |\n          sudo apt-get update\n          sudo apt-get install --no-install-recommends --yes \\\n            build-essential universal-ctags\n          pip3 install cbmc-viewer==${{ env.CBMC_VIEWER_VERSION }}\n",
                    "rendered": {
                      "text": "        if: ${{ env.CBMC_VIEWER_VERSION != 'latest' }}\n        shell: bash\n        run: |\n          sudo apt-get update\n          sudo apt-get install --no-install-recommends --yes \\\n            build-essential universal-ctags\n          pip3 install cbmc-viewer==${{ env.CBMC_VIEWER_VERSION }}\n",
                      "markdown": "`        if: ${{ env.CBMC_VIEWER_VERSION != 'latest' }}\n        shell: bash\n        run: |\n          sudo apt-get update\n          sudo apt-get install --no-install-recommends --yes \\\n            build-essential universal-ctags\n          pip3 install cbmc-viewer==${{ env.CBMC_VIEWER_VERSION }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 14,
                  "endLine": 89,
                  "snippet": {
                    "text": "          pip3 install cbmc-viewer==$CBMC_VIEWER_VERSION\n      - name: Install CBMC viewer ${{ env.CBMC_VIEWER_VERSION }}\n        if: ${{ env.CBMC_VIEWER_VERSION != 'latest' }}\n        shell: bash\n        run: |\n          sudo apt-get update\n          sudo apt-get install --no-install-recommends --yes \\\n            build-essential universal-ctags\n",
                    "rendered": {
                      "text": "          pip3 install cbmc-viewer==$CBMC_VIEWER_VERSION\n      - name: Install CBMC viewer ${{ env.CBMC_VIEWER_VERSION }}\n        if: ${{ env.CBMC_VIEWER_VERSION != 'latest' }}\n        shell: bash\n        run: |\n          sudo apt-get update\n          sudo apt-get install --no-install-recommends --yes \\\n            build-essential universal-ctags\n",
                      "markdown": "`          pip3 install cbmc-viewer==$CBMC_VIEWER_VERSION\n      - name: Install CBMC viewer ${{ env.CBMC_VIEWER_VERSION }}\n        if: ${{ env.CBMC_VIEWER_VERSION != 'latest' }}\n        shell: bash\n        run: |\n          sudo apt-get update\n          sudo apt-get install --no-install-recommends --yes \\\n            build-essential universal-ctags\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 133,
                  "endLine": 84,
                  "endColumn": 138,
                  "snippet": {
                    "text": "        shell: bash\n        run: |\n          CBMC_VIEWER_REL=\"https://api.github.com/repos/model-checking/cbmc-viewer/releases/latest\"\n          CBMC_VIEWER_VERSION=$(curl -s $CBMC_VIEWER_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r .name | sed  's/viewer-//')\n          pip3 install cbmc-viewer==$CBMC_VIEWER_VERSION\n      - name: Install CBMC viewer ${{ env.CBMC_VIEWER_VERSION }}\n        if: ${{ env.CBMC_VIEWER_VERSION != 'latest' }}\n",
                    "rendered": {
                      "text": "        shell: bash\n        run: |\n          CBMC_VIEWER_REL=\"https://api.github.com/repos/model-checking/cbmc-viewer/releases/latest\"\n          CBMC_VIEWER_VERSION=$(curl -s $CBMC_VIEWER_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r .name | sed  's/viewer-//')\n          pip3 install cbmc-viewer==$CBMC_VIEWER_VERSION\n      - name: Install CBMC viewer ${{ env.CBMC_VIEWER_VERSION }}\n        if: ${{ env.CBMC_VIEWER_VERSION != 'latest' }}\n",
                      "markdown": "`        shell: bash\n        run: |\n          CBMC_VIEWER_REL=\"https://api.github.com/repos/model-checking/cbmc-viewer/releases/latest\"\n          CBMC_VIEWER_VERSION=$(curl -s $CBMC_VIEWER_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r .name | sed  's/viewer-//')\n          pip3 install cbmc-viewer==$CBMC_VIEWER_VERSION\n      - name: Install CBMC viewer ${{ env.CBMC_VIEWER_VERSION }}\n        if: ${{ env.CBMC_VIEWER_VERSION != 'latest' }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 14,
                  "endLine": 82,
                  "snippet": {
                    "text": "          rm ./cbmc.deb\n      - name: Install latest CBMC viewer\n        if: ${{ env.CBMC_VIEWER_VERSION == 'latest' }}\n        shell: bash\n        run: |\n          CBMC_VIEWER_REL=\"https://api.github.com/repos/model-checking/cbmc-viewer/releases/latest\"\n          CBMC_VIEWER_VERSION=$(curl -s $CBMC_VIEWER_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r .name | sed  's/viewer-//')\n          pip3 install cbmc-viewer==$CBMC_VIEWER_VERSION\n",
                    "rendered": {
                      "text": "          rm ./cbmc.deb\n      - name: Install latest CBMC viewer\n        if: ${{ env.CBMC_VIEWER_VERSION == 'latest' }}\n        shell: bash\n        run: |\n          CBMC_VIEWER_REL=\"https://api.github.com/repos/model-checking/cbmc-viewer/releases/latest\"\n          CBMC_VIEWER_VERSION=$(curl -s $CBMC_VIEWER_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r .name | sed  's/viewer-//')\n          pip3 install cbmc-viewer==$CBMC_VIEWER_VERSION\n",
                      "markdown": "`          rm ./cbmc.deb\n      - name: Install latest CBMC viewer\n        if: ${{ env.CBMC_VIEWER_VERSION == 'latest' }}\n        shell: bash\n        run: |\n          CBMC_VIEWER_REL=\"https://api.github.com/repos/model-checking/cbmc-viewer/releases/latest\"\n          CBMC_VIEWER_VERSION=$(curl -s $CBMC_VIEWER_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r .name | sed  's/viewer-//')\n          pip3 install cbmc-viewer==$CBMC_VIEWER_VERSION\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 14,
                  "endLine": 77,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        run: |\n          curl -o cbmc.deb -L \\\n            https://github.com/diffblue/cbmc/releases/download/cbmc-${{ env.CBMC_VERSION }}/ubuntu-20.04-cbmc-${{ env.CBMC_VERSION }}-Linux.deb\n          sudo dpkg -i ./cbmc.deb\n          rm ./cbmc.deb\n      - name: Install latest CBMC viewer\n        if: ${{ env.CBMC_VIEWER_VERSION == 'latest' }}\n",
                    "rendered": {
                      "text": "        run: |\n          curl -o cbmc.deb -L \\\n            https://github.com/diffblue/cbmc/releases/download/cbmc-${{ env.CBMC_VERSION }}/ubuntu-20.04-cbmc-${{ env.CBMC_VERSION }}-Linux.deb\n          sudo dpkg -i ./cbmc.deb\n          rm ./cbmc.deb\n      - name: Install latest CBMC viewer\n        if: ${{ env.CBMC_VIEWER_VERSION == 'latest' }}\n",
                      "markdown": "`        run: |\n          curl -o cbmc.deb -L \\\n            https://github.com/diffblue/cbmc/releases/download/cbmc-${{ env.CBMC_VERSION }}/ubuntu-20.04-cbmc-${{ env.CBMC_VERSION }}-Linux.deb\n          sudo dpkg -i ./cbmc.deb\n          rm ./cbmc.deb\n      - name: Install latest CBMC viewer\n        if: ${{ env.CBMC_VIEWER_VERSION == 'latest' }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 9,
                  "endLine": 75,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        if: ${{ env.CBMC_VERSION != 'latest' }}\n        shell: bash\n        run: |\n          curl -o cbmc.deb -L \\\n            https://github.com/diffblue/cbmc/releases/download/cbmc-${{ env.CBMC_VERSION }}/ubuntu-20.04-cbmc-${{ env.CBMC_VERSION }}-Linux.deb\n          sudo dpkg -i ./cbmc.deb\n          rm ./cbmc.deb\n",
                    "rendered": {
                      "text": "        if: ${{ env.CBMC_VERSION != 'latest' }}\n        shell: bash\n        run: |\n          curl -o cbmc.deb -L \\\n            https://github.com/diffblue/cbmc/releases/download/cbmc-${{ env.CBMC_VERSION }}/ubuntu-20.04-cbmc-${{ env.CBMC_VERSION }}-Linux.deb\n          sudo dpkg -i ./cbmc.deb\n          rm ./cbmc.deb\n",
                      "markdown": "`        if: ${{ env.CBMC_VERSION != 'latest' }}\n        shell: bash\n        run: |\n          curl -o cbmc.deb -L \\\n            https://github.com/diffblue/cbmc/releases/download/cbmc-${{ env.CBMC_VERSION }}/ubuntu-20.04-cbmc-${{ env.CBMC_VERSION }}-Linux.deb\n          sudo dpkg -i ./cbmc.deb\n          rm ./cbmc.deb\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 14,
                  "endLine": 74,
                  "snippet": {
                    "text": "          rm ./$CBMC_ARTIFACT_NAME\n      - name: Install CBMC ${{ env.CBMC_VERSION }}\n        if: ${{ env.CBMC_VERSION != 'latest' }}\n        shell: bash\n        run: |\n          curl -o cbmc.deb -L \\\n            https://github.com/diffblue/cbmc/releases/download/cbmc-${{ env.CBMC_VERSION }}/ubuntu-20.04-cbmc-${{ env.CBMC_VERSION }}-Linux.deb\n          sudo dpkg -i ./cbmc.deb\n",
                    "rendered": {
                      "text": "          rm ./$CBMC_ARTIFACT_NAME\n      - name: Install CBMC ${{ env.CBMC_VERSION }}\n        if: ${{ env.CBMC_VERSION != 'latest' }}\n        shell: bash\n        run: |\n          curl -o cbmc.deb -L \\\n            https://github.com/diffblue/cbmc/releases/download/cbmc-${{ env.CBMC_VERSION }}/ubuntu-20.04-cbmc-${{ env.CBMC_VERSION }}-Linux.deb\n          sudo dpkg -i ./cbmc.deb\n",
                      "markdown": "`          rm ./$CBMC_ARTIFACT_NAME\n      - name: Install CBMC ${{ env.CBMC_VERSION }}\n        if: ${{ env.CBMC_VERSION != 'latest' }}\n        shell: bash\n        run: |\n          curl -o cbmc.deb -L \\\n            https://github.com/diffblue/cbmc/releases/download/cbmc-${{ env.CBMC_VERSION }}/ubuntu-20.04-cbmc-${{ env.CBMC_VERSION }}-Linux.deb\n          sudo dpkg -i ./cbmc.deb\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 14,
                  "endLine": 69,
                  "endColumn": 20,
                  "snippet": {
                    "text": "          CBMC_DEB=$(curl -s $CBMC_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r '.[].assets[].browser_download_url' | grep -e 'ubuntu-20.04' | head -n 1)\n          CBMC_ARTIFACT_NAME=$(basename $CBMC_DEB)\n          curl -o $CBMC_ARTIFACT_NAME -L $CBMC_DEB\n          sudo dpkg -i $CBMC_ARTIFACT_NAME\n          rm ./$CBMC_ARTIFACT_NAME\n      - name: Install CBMC ${{ env.CBMC_VERSION }}\n        if: ${{ env.CBMC_VERSION != 'latest' }}\n",
                    "rendered": {
                      "text": "          CBMC_DEB=$(curl -s $CBMC_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r '.[].assets[].browser_download_url' | grep -e 'ubuntu-20.04' | head -n 1)\n          CBMC_ARTIFACT_NAME=$(basename $CBMC_DEB)\n          curl -o $CBMC_ARTIFACT_NAME -L $CBMC_DEB\n          sudo dpkg -i $CBMC_ARTIFACT_NAME\n          rm ./$CBMC_ARTIFACT_NAME\n      - name: Install CBMC ${{ env.CBMC_VERSION }}\n        if: ${{ env.CBMC_VERSION != 'latest' }}\n",
                      "markdown": "`          CBMC_DEB=$(curl -s $CBMC_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r '.[].assets[].browser_download_url' | grep -e 'ubuntu-20.04' | head -n 1)\n          CBMC_ARTIFACT_NAME=$(basename $CBMC_DEB)\n          curl -o $CBMC_ARTIFACT_NAME -L $CBMC_DEB\n          sudo dpkg -i $CBMC_ARTIFACT_NAME\n          rm ./$CBMC_ARTIFACT_NAME\n      - name: Install CBMC ${{ env.CBMC_VERSION }}\n        if: ${{ env.CBMC_VERSION != 'latest' }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 9,
                  "endLine": 68,
                  "endColumn": 15,
                  "snippet": {
                    "text": "          CBMC_REL=\"https://api.github.com/repos/diffblue/cbmc/releases?page=1&per_page=5\"\n          CBMC_DEB=$(curl -s $CBMC_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r '.[].assets[].browser_download_url' | grep -e 'ubuntu-20.04' | head -n 1)\n          CBMC_ARTIFACT_NAME=$(basename $CBMC_DEB)\n          curl -o $CBMC_ARTIFACT_NAME -L $CBMC_DEB\n          sudo dpkg -i $CBMC_ARTIFACT_NAME\n          rm ./$CBMC_ARTIFACT_NAME\n      - name: Install CBMC ${{ env.CBMC_VERSION }}\n",
                    "rendered": {
                      "text": "          CBMC_REL=\"https://api.github.com/repos/diffblue/cbmc/releases?page=1&per_page=5\"\n          CBMC_DEB=$(curl -s $CBMC_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r '.[].assets[].browser_download_url' | grep -e 'ubuntu-20.04' | head -n 1)\n          CBMC_ARTIFACT_NAME=$(basename $CBMC_DEB)\n          curl -o $CBMC_ARTIFACT_NAME -L $CBMC_DEB\n          sudo dpkg -i $CBMC_ARTIFACT_NAME\n          rm ./$CBMC_ARTIFACT_NAME\n      - name: Install CBMC ${{ env.CBMC_VERSION }}\n",
                      "markdown": "`          CBMC_REL=\"https://api.github.com/repos/diffblue/cbmc/releases?page=1&per_page=5\"\n          CBMC_DEB=$(curl -s $CBMC_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r '.[].assets[].browser_download_url' | grep -e 'ubuntu-20.04' | head -n 1)\n          CBMC_ARTIFACT_NAME=$(basename $CBMC_DEB)\n          curl -o $CBMC_ARTIFACT_NAME -L $CBMC_DEB\n          sudo dpkg -i $CBMC_ARTIFACT_NAME\n          rm ./$CBMC_ARTIFACT_NAME\n      - name: Install CBMC ${{ env.CBMC_VERSION }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 170,
                  "endLine": 66,
                  "endColumn": 176,
                  "snippet": {
                    "text": "        run: |\n          # Search within 5 most recent releases for latest available package\n          CBMC_REL=\"https://api.github.com/repos/diffblue/cbmc/releases?page=1&per_page=5\"\n          CBMC_DEB=$(curl -s $CBMC_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r '.[].assets[].browser_download_url' | grep -e 'ubuntu-20.04' | head -n 1)\n          CBMC_ARTIFACT_NAME=$(basename $CBMC_DEB)\n          curl -o $CBMC_ARTIFACT_NAME -L $CBMC_DEB\n          sudo dpkg -i $CBMC_ARTIFACT_NAME\n",
                    "rendered": {
                      "text": "        run: |\n          # Search within 5 most recent releases for latest available package\n          CBMC_REL=\"https://api.github.com/repos/diffblue/cbmc/releases?page=1&per_page=5\"\n          CBMC_DEB=$(curl -s $CBMC_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r '.[].assets[].browser_download_url' | grep -e 'ubuntu-20.04' | head -n 1)\n          CBMC_ARTIFACT_NAME=$(basename $CBMC_DEB)\n          curl -o $CBMC_ARTIFACT_NAME -L $CBMC_DEB\n          sudo dpkg -i $CBMC_ARTIFACT_NAME\n",
                      "markdown": "`        run: |\n          # Search within 5 most recent releases for latest available package\n          CBMC_REL=\"https://api.github.com/repos/diffblue/cbmc/releases?page=1&per_page=5\"\n          CBMC_DEB=$(curl -s $CBMC_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r '.[].assets[].browser_download_url' | grep -e 'ubuntu-20.04' | head -n 1)\n          CBMC_ARTIFACT_NAME=$(basename $CBMC_DEB)\n          curl -o $CBMC_ARTIFACT_NAME -L $CBMC_DEB\n          sudo dpkg -i $CBMC_ARTIFACT_NAME\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 145,
                  "endLine": 66,
                  "endColumn": 151,
                  "snippet": {
                    "text": "        run: |\n          # Search within 5 most recent releases for latest available package\n          CBMC_REL=\"https://api.github.com/repos/diffblue/cbmc/releases?page=1&per_page=5\"\n          CBMC_DEB=$(curl -s $CBMC_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r '.[].assets[].browser_download_url' | grep -e 'ubuntu-20.04' | head -n 1)\n          CBMC_ARTIFACT_NAME=$(basename $CBMC_DEB)\n          curl -o $CBMC_ARTIFACT_NAME -L $CBMC_DEB\n          sudo dpkg -i $CBMC_ARTIFACT_NAME\n",
                    "rendered": {
                      "text": "        run: |\n          # Search within 5 most recent releases for latest available package\n          CBMC_REL=\"https://api.github.com/repos/diffblue/cbmc/releases?page=1&per_page=5\"\n          CBMC_DEB=$(curl -s $CBMC_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r '.[].assets[].browser_download_url' | grep -e 'ubuntu-20.04' | head -n 1)\n          CBMC_ARTIFACT_NAME=$(basename $CBMC_DEB)\n          curl -o $CBMC_ARTIFACT_NAME -L $CBMC_DEB\n          sudo dpkg -i $CBMC_ARTIFACT_NAME\n",
                      "markdown": "`        run: |\n          # Search within 5 most recent releases for latest available package\n          CBMC_REL=\"https://api.github.com/repos/diffblue/cbmc/releases?page=1&per_page=5\"\n          CBMC_DEB=$(curl -s $CBMC_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r '.[].assets[].browser_download_url' | grep -e 'ubuntu-20.04' | head -n 1)\n          CBMC_ARTIFACT_NAME=$(basename $CBMC_DEB)\n          curl -o $CBMC_ARTIFACT_NAME -L $CBMC_DEB\n          sudo dpkg -i $CBMC_ARTIFACT_NAME\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 14,
                  "endLine": 63,
                  "snippet": {
                    "text": "          if [[ \"$should_exit\" == true ]]; then exit 1; fi\n      - name: Install latest CBMC\n        if: ${{ env.CBMC_VERSION == 'latest' }}\n        shell: bash\n        run: |\n          # Search within 5 most recent releases for latest available package\n          CBMC_REL=\"https://api.github.com/repos/diffblue/cbmc/releases?page=1&per_page=5\"\n          CBMC_DEB=$(curl -s $CBMC_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r '.[].assets[].browser_download_url' | grep -e 'ubuntu-20.04' | head -n 1)\n",
                    "rendered": {
                      "text": "          if [[ \"$should_exit\" == true ]]; then exit 1; fi\n      - name: Install latest CBMC\n        if: ${{ env.CBMC_VERSION == 'latest' }}\n        shell: bash\n        run: |\n          # Search within 5 most recent releases for latest available package\n          CBMC_REL=\"https://api.github.com/repos/diffblue/cbmc/releases?page=1&per_page=5\"\n          CBMC_DEB=$(curl -s $CBMC_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r '.[].assets[].browser_download_url' | grep -e 'ubuntu-20.04' | head -n 1)\n",
                      "markdown": "`          if [[ \"$should_exit\" == true ]]; then exit 1; fi\n      - name: Install latest CBMC\n        if: ${{ env.CBMC_VERSION == 'latest' }}\n        shell: bash\n        run: |\n          # Search within 5 most recent releases for latest available package\n          CBMC_REL=\"https://api.github.com/repos/diffblue/cbmc/releases?page=1&per_page=5\"\n          CBMC_DEB=$(curl -s $CBMC_REL --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r '.[].assets[].browser_download_url' | grep -e 'ubuntu-20.04' | head -n 1)\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/proof_ci.yaml"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 14,
                  "endLine": 45,
                  "snippet": {
                    "text": "            echo \"${VAR}\"=$(yq .$setting $CONFIG_FILE) >> $GITHUB_ENV\n          done\n      - name: Ensure CBMC, CBMC viewer, Litani versions have been specified\n        shell: bash\n        run: |\n          should_exit=false\n          if [ \"${{ env.CBMC_VERSION }}\" == \"\" ]; then\n            echo \"You must specify a CBMC version (e.g. 'latest' or '5.70.0')\"\n",
                    "rendered": {
                      "text": "            echo \"${VAR}\"=$(yq .$setting $CONFIG_FILE) >> $GITHUB_ENV\n          done\n      - name: Ensure CBMC, CBMC viewer, Litani versions have been specified\n        shell: bash\n        run: |\n          should_exit=false\n          if [ \"${{ env.CBMC_VERSION }}\" == \"\" ]; then\n            echo \"You must specify a CBMC version (e.g. 'latest' or '5.70.0')\"\n",
                      "markdown": "`            echo \"${VAR}\"=$(yq .$setting $CONFIG_FILE) >> $GITHUB_ENV\n          done\n      - name: Ensure CBMC, CBMC viewer, Litani versions have been specified\n        shell: bash\n        run: |\n          should_exit=false\n          if [ \"${{ env.CBMC_VERSION }}\" == \"\" ]; then\n            echo \"You must specify a CBMC version (e.g. 'latest' or '5.70.0')\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/include/proof_helpers/ring_buffer_abstract_states.h"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 10,
                  "endLine": 41,
                  "endColumn": 16,
                  "snippet": {
                    "text": "bool is_ends_valid_state(struct aws_ring_buffer *ring_buf) {\n    uint8_t *head = aws_atomic_load_ptr(&ring_buf->head);\n    uint8_t *tail = aws_atomic_load_ptr(&ring_buf->tail);\n    return tail > head;\n}\n",
                    "rendered": {
                      "text": "bool is_ends_valid_state(struct aws_ring_buffer *ring_buf) {\n    uint8_t *head = aws_atomic_load_ptr(&ring_buf->head);\n    uint8_t *tail = aws_atomic_load_ptr(&ring_buf->tail);\n    return tail > head;\n}\n",
                      "markdown": "`bool is_ends_valid_state(struct aws_ring_buffer *ring_buf) {\n    uint8_t *head = aws_atomic_load_ptr(&ring_buf->head);\n    uint8_t *tail = aws_atomic_load_ptr(&ring_buf->tail);\n    return tail > head;\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/include/proof_helpers/ring_buffer_abstract_states.h"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 41,
                  "endLine": 32,
                  "endColumn": 47,
                  "snippet": {
                    "text": "bool is_middle_valid_state(struct aws_ring_buffer *ring_buf) {\n    uint8_t *head = aws_atomic_load_ptr(&ring_buf->head);\n    uint8_t *tail = aws_atomic_load_ptr(&ring_buf->tail);\n    return ring_buf->allocation < tail && tail < head;\n}\n\n/**\n",
                    "rendered": {
                      "text": "bool is_middle_valid_state(struct aws_ring_buffer *ring_buf) {\n    uint8_t *head = aws_atomic_load_ptr(&ring_buf->head);\n    uint8_t *tail = aws_atomic_load_ptr(&ring_buf->tail);\n    return ring_buf->allocation < tail && tail < head;\n}\n\n/**\n",
                      "markdown": "`bool is_middle_valid_state(struct aws_ring_buffer *ring_buf) {\n    uint8_t *head = aws_atomic_load_ptr(&ring_buf->head);\n    uint8_t *tail = aws_atomic_load_ptr(&ring_buf->tail);\n    return ring_buf->allocation < tail && tail < head;\n}\n\n/**\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/include/proof_helpers/ring_buffer_abstract_states.h"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 33,
                  "endLine": 32,
                  "endColumn": 39,
                  "snippet": {
                    "text": "bool is_middle_valid_state(struct aws_ring_buffer *ring_buf) {\n    uint8_t *head = aws_atomic_load_ptr(&ring_buf->head);\n    uint8_t *tail = aws_atomic_load_ptr(&ring_buf->tail);\n    return ring_buf->allocation < tail && tail < head;\n}\n\n/**\n",
                    "rendered": {
                      "text": "bool is_middle_valid_state(struct aws_ring_buffer *ring_buf) {\n    uint8_t *head = aws_atomic_load_ptr(&ring_buf->head);\n    uint8_t *tail = aws_atomic_load_ptr(&ring_buf->tail);\n    return ring_buf->allocation < tail && tail < head;\n}\n\n/**\n",
                      "markdown": "`bool is_middle_valid_state(struct aws_ring_buffer *ring_buf) {\n    uint8_t *head = aws_atomic_load_ptr(&ring_buf->head);\n    uint8_t *tail = aws_atomic_load_ptr(&ring_buf->tail);\n    return ring_buf->allocation < tail && tail < head;\n}\n\n/**\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/include/proof_helpers/ring_buffer_abstract_states.h"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 42,
                  "endLine": 23,
                  "endColumn": 48,
                  "snippet": {
                    "text": "bool is_front_valid_state(struct aws_ring_buffer *ring_buf) {\n    uint8_t *head = aws_atomic_load_ptr(&ring_buf->head);\n    uint8_t *tail = aws_atomic_load_ptr(&ring_buf->tail);\n    return ring_buf->allocation == tail && tail < head;\n}\n\n/**\n",
                    "rendered": {
                      "text": "bool is_front_valid_state(struct aws_ring_buffer *ring_buf) {\n    uint8_t *head = aws_atomic_load_ptr(&ring_buf->head);\n    uint8_t *tail = aws_atomic_load_ptr(&ring_buf->tail);\n    return ring_buf->allocation == tail && tail < head;\n}\n\n/**\n",
                      "markdown": "`bool is_front_valid_state(struct aws_ring_buffer *ring_buf) {\n    uint8_t *head = aws_atomic_load_ptr(&ring_buf->head);\n    uint8_t *tail = aws_atomic_load_ptr(&ring_buf->tail);\n    return ring_buf->allocation == tail && tail < head;\n}\n\n/**\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/include/proof_helpers/ring_buffer_abstract_states.h"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 34,
                  "endLine": 23,
                  "endColumn": 40,
                  "snippet": {
                    "text": "bool is_front_valid_state(struct aws_ring_buffer *ring_buf) {\n    uint8_t *head = aws_atomic_load_ptr(&ring_buf->head);\n    uint8_t *tail = aws_atomic_load_ptr(&ring_buf->tail);\n    return ring_buf->allocation == tail && tail < head;\n}\n\n/**\n",
                    "rendered": {
                      "text": "bool is_front_valid_state(struct aws_ring_buffer *ring_buf) {\n    uint8_t *head = aws_atomic_load_ptr(&ring_buf->head);\n    uint8_t *tail = aws_atomic_load_ptr(&ring_buf->tail);\n    return ring_buf->allocation == tail && tail < head;\n}\n\n/**\n",
                      "markdown": "`bool is_front_valid_state(struct aws_ring_buffer *ring_buf) {\n    uint8_t *head = aws_atomic_load_ptr(&ring_buf->head);\n    uint8_t *tail = aws_atomic_load_ptr(&ring_buf->tail);\n    return ring_buf->allocation == tail && tail < head;\n}\n\n/**\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/include/proof_helpers/ring_buffer_abstract_states.h"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 10,
                  "endLine": 14,
                  "endColumn": 16,
                  "snippet": {
                    "text": "bool is_empty_state(struct aws_ring_buffer *ring_buf) {\n    uint8_t *head = aws_atomic_load_ptr(&ring_buf->head);\n    uint8_t *tail = aws_atomic_load_ptr(&ring_buf->tail);\n    return tail == head;\n}\n\n/**\n",
                    "rendered": {
                      "text": "bool is_empty_state(struct aws_ring_buffer *ring_buf) {\n    uint8_t *head = aws_atomic_load_ptr(&ring_buf->head);\n    uint8_t *tail = aws_atomic_load_ptr(&ring_buf->tail);\n    return tail == head;\n}\n\n/**\n",
                      "markdown": "`bool is_empty_state(struct aws_ring_buffer *ring_buf) {\n    uint8_t *head = aws_atomic_load_ptr(&ring_buf->head);\n    uint8_t *tail = aws_atomic_load_ptr(&ring_buf->tail);\n    return tail == head;\n}\n\n/**\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/lib/print_tool_versions.py"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 7,
                  "endLine": 49,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        if not shutil.which(tool):\n            logging.error(\"%s'%s' not found on $PATH\", err, tool)\n            continue\n        cmd = [tool, \"--version\"]\n        proc = subprocess.Popen(cmd, text=True, stdout=subprocess.PIPE)\n        try:\n            out, _ = proc.communicate(timeout=10)\n",
                    "rendered": {
                      "text": "        if not shutil.which(tool):\n            logging.error(\"%s'%s' not found on $PATH\", err, tool)\n            continue\n        cmd = [tool, \"--version\"]\n        proc = subprocess.Popen(cmd, text=True, stdout=subprocess.PIPE)\n        try:\n            out, _ = proc.communicate(timeout=10)\n",
                      "markdown": "`        if not shutil.which(tool):\n            logging.error(\"%s'%s' not found on $PATH\", err, tool)\n            continue\n        cmd = [tool, \"--version\"]\n        proc = subprocess.Popen(cmd, text=True, stdout=subprocess.PIPE)\n        try:\n            out, _ = proc.communicate(timeout=10)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/aws_linked_list_push_front/Makefile"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 52,
                  "endLine": 12,
                  "endColumn": 58,
                  "snippet": {
                    "text": "include ../Makefile.aws_linked_list\n\n## This has to take into account that a new element has been added to\n## the list afterwards so we have to unwind one more time (instead of\n## the standard 2 + MAX_LINKED_LIST_ITEM_ALLOCATION)\nUNWINDSET += __CPROVER_file_local_linked_list_inl_aws_linked_list_is_valid_deep.0:$(shell echo $$((3 + $(MAX_LINKED_LIST_ITEM_ALLOCATION))))\nUNWINDSET += ensure_linked_list_is_allocated.0:$(shell echo $$((1 + $(MAX_LINKED_LIST_ITEM_ALLOCATION))))\n",
                    "rendered": {
                      "text": "include ../Makefile.aws_linked_list\n\n## This has to take into account that a new element has been added to\n## the list afterwards so we have to unwind one more time (instead of\n## the standard 2 + MAX_LINKED_LIST_ITEM_ALLOCATION)\nUNWINDSET += __CPROVER_file_local_linked_list_inl_aws_linked_list_is_valid_deep.0:$(shell echo $$((3 + $(MAX_LINKED_LIST_ITEM_ALLOCATION))))\nUNWINDSET += ensure_linked_list_is_allocated.0:$(shell echo $$((1 + $(MAX_LINKED_LIST_ITEM_ALLOCATION))))\n",
                      "markdown": "`include ../Makefile.aws_linked_list\n\n## This has to take into account that a new element has been added to\n## the list afterwards so we have to unwind one more time (instead of\n## the standard 2 + MAX_LINKED_LIST_ITEM_ALLOCATION)\nUNWINDSET += __CPROVER_file_local_linked_list_inl_aws_linked_list_is_valid_deep.0:$(shell echo $$((3 + $(MAX_LINKED_LIST_ITEM_ALLOCATION))))\nUNWINDSET += ensure_linked_list_is_allocated.0:$(shell echo $$((1 + $(MAX_LINKED_LIST_ITEM_ALLOCATION))))\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/aws_linked_list_push_back/Makefile"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 52,
                  "endLine": 12,
                  "endColumn": 58,
                  "snippet": {
                    "text": "include ../Makefile.aws_linked_list\n\n## This has to take into account that a new element has been added to\n## the list afterwards so we have to unwind one more time (instead of\n## the standard 2 + MAX_LINKED_LIST_ITEM_ALLOCATION)\nUNWINDSET += __CPROVER_file_local_linked_list_inl_aws_linked_list_is_valid_deep.0:$(shell echo $$((3 + $(MAX_LINKED_LIST_ITEM_ALLOCATION))))\nUNWINDSET += ensure_linked_list_is_allocated.0:$(shell echo $$((1 + $(MAX_LINKED_LIST_ITEM_ALLOCATION))))\n",
                    "rendered": {
                      "text": "include ../Makefile.aws_linked_list\n\n## This has to take into account that a new element has been added to\n## the list afterwards so we have to unwind one more time (instead of\n## the standard 2 + MAX_LINKED_LIST_ITEM_ALLOCATION)\nUNWINDSET += __CPROVER_file_local_linked_list_inl_aws_linked_list_is_valid_deep.0:$(shell echo $$((3 + $(MAX_LINKED_LIST_ITEM_ALLOCATION))))\nUNWINDSET += ensure_linked_list_is_allocated.0:$(shell echo $$((1 + $(MAX_LINKED_LIST_ITEM_ALLOCATION))))\n",
                      "markdown": "`include ../Makefile.aws_linked_list\n\n## This has to take into account that a new element has been added to\n## the list afterwards so we have to unwind one more time (instead of\n## the standard 2 + MAX_LINKED_LIST_ITEM_ALLOCATION)\nUNWINDSET += __CPROVER_file_local_linked_list_inl_aws_linked_list_is_valid_deep.0:$(shell echo $$((3 + $(MAX_LINKED_LIST_ITEM_ALLOCATION))))\nUNWINDSET += ensure_linked_list_is_allocated.0:$(shell echo $$((1 + $(MAX_LINKED_LIST_ITEM_ALLOCATION))))\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/source/external/cJSON.c"
                },
                "region": {
                  "startLine": 1674,
                  "startColumn": 26,
                  "endLine": 1674,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        if (head == NULL)\n        {\n            /* start the linked list */\n            current_item = head = new_item;\n        }\n        else\n        {\n",
                    "rendered": {
                      "text": "        if (head == NULL)\n        {\n            /* start the linked list */\n            current_item = head = new_item;\n        }\n        else\n        {\n",
                      "markdown": "`        if (head == NULL)\n        {\n            /* start the linked list */\n            current_item = head = new_item;\n        }\n        else\n        {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/source/external/cJSON.c"
                },
                "region": {
                  "startLine": 1516,
                  "startColumn": 26,
                  "endLine": 1516,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        if (head == NULL)\n        {\n            /* start the linked list */\n            current_item = head = new_item;\n        }\n        else\n        {\n",
                    "rendered": {
                      "text": "        if (head == NULL)\n        {\n            /* start the linked list */\n            current_item = head = new_item;\n        }\n        else\n        {\n",
                      "markdown": "`        if (head == NULL)\n        {\n            /* start the linked list */\n            current_item = head = new_item;\n        }\n        else\n        {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/source/external/cJSON.c"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 10,
                  "endLine": 253,
                  "endColumn": 16,
                  "snippet": {
                    "text": "/* Internal constructor. */\nstatic cJSON *cJSON_New_Item(const internal_hooks * const hooks)\n{\n    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));\n    if (node)\n    {\n        memset(node, '\\0', sizeof(cJSON));\n",
                    "rendered": {
                      "text": "/* Internal constructor. */\nstatic cJSON *cJSON_New_Item(const internal_hooks * const hooks)\n{\n    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));\n    if (node)\n    {\n        memset(node, '\\0', sizeof(cJSON));\n",
                      "markdown": "`/* Internal constructor. */\nstatic cJSON *cJSON_New_Item(const internal_hooks * const hooks)\n{\n    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));\n    if (node)\n    {\n        memset(node, '\\0', sizeof(cJSON));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/source/arch/intel/cpuid.c"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 16,
                  "endLine": 157,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    }\n\n    /* Provide a hook for testing fallbacks and benchmarking */\n    const char *env_avx2_enabled = getenv(\"AWS_COMMON_AVX2\");\n    if (env_avx2_enabled) {\n        int is_enabled = atoi(env_avx2_enabled);\n        cpuid_state = !is_enabled;\n",
                    "rendered": {
                      "text": "    }\n\n    /* Provide a hook for testing fallbacks and benchmarking */\n    const char *env_avx2_enabled = getenv(\"AWS_COMMON_AVX2\");\n    if (env_avx2_enabled) {\n        int is_enabled = atoi(env_avx2_enabled);\n        cpuid_state = !is_enabled;\n",
                      "markdown": "`    }\n\n    /* Provide a hook for testing fallbacks and benchmarking */\n    const char *env_avx2_enabled = getenv(\"AWS_COMMON_AVX2\");\n    if (env_avx2_enabled) {\n        int is_enabled = atoi(env_avx2_enabled);\n        cpuid_state = !is_enabled;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/source/arch/intel/cpuid.c"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 45,
                  "endLine": 7,
                  "endColumn": 64,
                  "snippet": {
                    "text": " */\n\n/*\n * MSVC wants us to use the non-portable _dupenv_s instead; since we need\n * to remain portable, tell MSVC to suppress this warning.\n */\n#define _CRT_SECURE_NO_WARNINGS\n",
                    "rendered": {
                      "text": " */\n\n/*\n * MSVC wants us to use the non-portable _dupenv_s instead; since we need\n * to remain portable, tell MSVC to suppress this warning.\n */\n#define _CRT_SECURE_NO_WARNINGS\n",
                      "markdown": "` */\n\n/*\n * MSVC wants us to use the non-portable _dupenv_s instead; since we need\n * to remain portable, tell MSVC to suppress this warning.\n */\n#define _CRT_SECURE_NO_WARNINGS\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/source/arch/generic/cpuid.c"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 45,
                  "endLine": 7,
                  "endColumn": 64,
                  "snippet": {
                    "text": " */\n\n/*\n * MSVC wants us to use the non-portable _dupenv_s instead; since we need\n * to remain portable, tell MSVC to suppress this warning.\n */\n\n",
                    "rendered": {
                      "text": " */\n\n/*\n * MSVC wants us to use the non-portable _dupenv_s instead; since we need\n * to remain portable, tell MSVC to suppress this warning.\n */\n\n",
                      "markdown": "` */\n\n/*\n * MSVC wants us to use the non-portable _dupenv_s instead; since we need\n * to remain portable, tell MSVC to suppress this warning.\n */\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/linked_hash_table_test.c"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 3,
                  "endLine": 86,
                  "endColumn": 9,
                  "snippet": {
                    "text": "    table_node = AWS_CONTAINER_OF(node, struct aws_linked_hash_table_node, node);\n    ASSERT_INT_EQUALS(fourth, *(int *)table_node->value);\n\n    node = aws_linked_list_next(node);\n    ASSERT_PTR_EQUALS(aws_linked_list_end(list), node);\n\n    aws_linked_hash_table_clean_up(&table);\n",
                    "rendered": {
                      "text": "    table_node = AWS_CONTAINER_OF(node, struct aws_linked_hash_table_node, node);\n    ASSERT_INT_EQUALS(fourth, *(int *)table_node->value);\n\n    node = aws_linked_list_next(node);\n    ASSERT_PTR_EQUALS(aws_linked_list_end(list), node);\n\n    aws_linked_hash_table_clean_up(&table);\n",
                      "markdown": "`    table_node = AWS_CONTAINER_OF(node, struct aws_linked_hash_table_node, node);\n    ASSERT_INT_EQUALS(fourth, *(int *)table_node->value);\n\n    node = aws_linked_list_next(node);\n    ASSERT_PTR_EQUALS(aws_linked_list_end(list), node);\n\n    aws_linked_hash_table_clean_up(&table);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/linked_hash_table_test.c"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 3,
                  "endLine": 81,
                  "endColumn": 9,
                  "snippet": {
                    "text": "    table_node = AWS_CONTAINER_OF(node, struct aws_linked_hash_table_node, node);\n    ASSERT_INT_EQUALS(third, *(int *)table_node->value);\n\n    node = aws_linked_list_next(node);\n    ASSERT_NOT_NULL(node);\n    table_node = AWS_CONTAINER_OF(node, struct aws_linked_hash_table_node, node);\n    ASSERT_INT_EQUALS(fourth, *(int *)table_node->value);\n",
                    "rendered": {
                      "text": "    table_node = AWS_CONTAINER_OF(node, struct aws_linked_hash_table_node, node);\n    ASSERT_INT_EQUALS(third, *(int *)table_node->value);\n\n    node = aws_linked_list_next(node);\n    ASSERT_NOT_NULL(node);\n    table_node = AWS_CONTAINER_OF(node, struct aws_linked_hash_table_node, node);\n    ASSERT_INT_EQUALS(fourth, *(int *)table_node->value);\n",
                      "markdown": "`    table_node = AWS_CONTAINER_OF(node, struct aws_linked_hash_table_node, node);\n    ASSERT_INT_EQUALS(third, *(int *)table_node->value);\n\n    node = aws_linked_list_next(node);\n    ASSERT_NOT_NULL(node);\n    table_node = AWS_CONTAINER_OF(node, struct aws_linked_hash_table_node, node);\n    ASSERT_INT_EQUALS(fourth, *(int *)table_node->value);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/linked_hash_table_test.c"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 3,
                  "endLine": 76,
                  "endColumn": 9,
                  "snippet": {
                    "text": "    table_node = AWS_CONTAINER_OF(node, struct aws_linked_hash_table_node, node);\n    ASSERT_INT_EQUALS(second, *(int *)table_node->value);\n\n    node = aws_linked_list_next(node);\n    ASSERT_NOT_NULL(node);\n    table_node = AWS_CONTAINER_OF(node, struct aws_linked_hash_table_node, node);\n    ASSERT_INT_EQUALS(third, *(int *)table_node->value);\n",
                    "rendered": {
                      "text": "    table_node = AWS_CONTAINER_OF(node, struct aws_linked_hash_table_node, node);\n    ASSERT_INT_EQUALS(second, *(int *)table_node->value);\n\n    node = aws_linked_list_next(node);\n    ASSERT_NOT_NULL(node);\n    table_node = AWS_CONTAINER_OF(node, struct aws_linked_hash_table_node, node);\n    ASSERT_INT_EQUALS(third, *(int *)table_node->value);\n",
                      "markdown": "`    table_node = AWS_CONTAINER_OF(node, struct aws_linked_hash_table_node, node);\n    ASSERT_INT_EQUALS(second, *(int *)table_node->value);\n\n    node = aws_linked_list_next(node);\n    ASSERT_NOT_NULL(node);\n    table_node = AWS_CONTAINER_OF(node, struct aws_linked_hash_table_node, node);\n    ASSERT_INT_EQUALS(third, *(int *)table_node->value);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/linked_hash_table_test.c"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 3,
                  "endLine": 71,
                  "endColumn": 9,
                  "snippet": {
                    "text": "    struct aws_linked_hash_table_node *table_node = AWS_CONTAINER_OF(node, struct aws_linked_hash_table_node, node);\n    ASSERT_INT_EQUALS(first, *(int *)table_node->value);\n\n    node = aws_linked_list_next(node);\n    ASSERT_NOT_NULL(node);\n    table_node = AWS_CONTAINER_OF(node, struct aws_linked_hash_table_node, node);\n    ASSERT_INT_EQUALS(second, *(int *)table_node->value);\n",
                    "rendered": {
                      "text": "    struct aws_linked_hash_table_node *table_node = AWS_CONTAINER_OF(node, struct aws_linked_hash_table_node, node);\n    ASSERT_INT_EQUALS(first, *(int *)table_node->value);\n\n    node = aws_linked_list_next(node);\n    ASSERT_NOT_NULL(node);\n    table_node = AWS_CONTAINER_OF(node, struct aws_linked_hash_table_node, node);\n    ASSERT_INT_EQUALS(second, *(int *)table_node->value);\n",
                      "markdown": "`    struct aws_linked_hash_table_node *table_node = AWS_CONTAINER_OF(node, struct aws_linked_hash_table_node, node);\n    ASSERT_INT_EQUALS(first, *(int *)table_node->value);\n\n    node = aws_linked_list_next(node);\n    ASSERT_NOT_NULL(node);\n    table_node = AWS_CONTAINER_OF(node, struct aws_linked_hash_table_node, node);\n    ASSERT_INT_EQUALS(second, *(int *)table_node->value);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/priority_queue_test.c"
                },
                "region": {
                  "startLine": 371,
                  "startColumn": 34,
                  "endLine": 371,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    (void)ctx;\n\n    struct aws_priority_queue queue;\n    struct aws_priority_queue_node node = {12345};\n    ASSERT_SUCCESS(aws_priority_queue_init_dynamic(&queue, allocator, 16, sizeof(int), s_compare_ints));\n\n    ADD_ELEMS(queue, 0);\n",
                    "rendered": {
                      "text": "    (void)ctx;\n\n    struct aws_priority_queue queue;\n    struct aws_priority_queue_node node = {12345};\n    ASSERT_SUCCESS(aws_priority_queue_init_dynamic(&queue, allocator, 16, sizeof(int), s_compare_ints));\n\n    ADD_ELEMS(queue, 0);\n",
                      "markdown": "`    (void)ctx;\n\n    struct aws_priority_queue queue;\n    struct aws_priority_queue_node node = {12345};\n    ASSERT_SUCCESS(aws_priority_queue_init_dynamic(&queue, allocator, 16, sizeof(int), s_compare_ints));\n\n    ADD_ELEMS(queue, 0);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/priority_queue_test.c"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 34,
                  "endLine": 280,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    (void)ctx;\n\n    struct aws_priority_queue queue;\n    struct aws_priority_queue_node node = {12345};\n    ASSERT_SUCCESS(aws_priority_queue_init_dynamic(&queue, allocator, 16, sizeof(int), s_compare_ints));\n\n    ADD_ELEMS(queue, 0, 20, 1, 22, 21, 2, 9);\n",
                    "rendered": {
                      "text": "    (void)ctx;\n\n    struct aws_priority_queue queue;\n    struct aws_priority_queue_node node = {12345};\n    ASSERT_SUCCESS(aws_priority_queue_init_dynamic(&queue, allocator, 16, sizeof(int), s_compare_ints));\n\n    ADD_ELEMS(queue, 0, 20, 1, 22, 21, 2, 9);\n",
                      "markdown": "`    (void)ctx;\n\n    struct aws_priority_queue queue;\n    struct aws_priority_queue_node node = {12345};\n    ASSERT_SUCCESS(aws_priority_queue_init_dynamic(&queue, allocator, 16, sizeof(int), s_compare_ints));\n\n    ADD_ELEMS(queue, 0, 20, 1, 22, 21, 2, 9);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/priority_queue_test.c"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 34,
                  "endLine": 221,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    (void)ctx;\n\n    struct aws_priority_queue queue;\n    struct aws_priority_queue_node node = {12345};\n    ASSERT_SUCCESS(aws_priority_queue_init_dynamic(&queue, allocator, 16, sizeof(int), s_compare_ints));\n\n    ADD_ELEMS(queue, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n",
                    "rendered": {
                      "text": "    (void)ctx;\n\n    struct aws_priority_queue queue;\n    struct aws_priority_queue_node node = {12345};\n    ASSERT_SUCCESS(aws_priority_queue_init_dynamic(&queue, allocator, 16, sizeof(int), s_compare_ints));\n\n    ADD_ELEMS(queue, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n",
                      "markdown": "`    (void)ctx;\n\n    struct aws_priority_queue queue;\n    struct aws_priority_queue_node node = {12345};\n    ASSERT_SUCCESS(aws_priority_queue_init_dynamic(&queue, allocator, 16, sizeof(int), s_compare_ints));\n\n    ADD_ELEMS(queue, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/priority_queue_test.c"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 34,
                  "endLine": 198,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    (void)ctx;\n\n    struct aws_priority_queue queue;\n    struct aws_priority_queue_node node = {12345};\n    int val = 0;\n    ASSERT_SUCCESS(aws_priority_queue_init_dynamic(&queue, allocator, 16, sizeof(int), s_compare_ints));\n\n",
                    "rendered": {
                      "text": "    (void)ctx;\n\n    struct aws_priority_queue queue;\n    struct aws_priority_queue_node node = {12345};\n    int val = 0;\n    ASSERT_SUCCESS(aws_priority_queue_init_dynamic(&queue, allocator, 16, sizeof(int), s_compare_ints));\n\n",
                      "markdown": "`    (void)ctx;\n\n    struct aws_priority_queue queue;\n    struct aws_priority_queue_node node = {12345};\n    int val = 0;\n    ASSERT_SUCCESS(aws_priority_queue_init_dynamic(&queue, allocator, 16, sizeof(int), s_compare_ints));\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/priority_queue_test.c"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 62,
                  "endLine": 88,
                  "endColumn": 67,
                  "snippet": {
                    "text": "    ASSERT_SUCCESS(err, \"Pop operation failed with error %d\", err);\n    ASSERT_INT_EQUALS(fifth, pop_val, \"Fifth element returned should have been %d but was %d\", fifth, pop_val);\n    ASSERT_INT_EQUALS(\n        pop_val, top_val, \"Popped element should have been the top element. expected %d but was %d\", pop_val, top_val);\n\n    ASSERT_ERROR(\n        AWS_ERROR_PRIORITY_QUEUE_EMPTY,\n",
                    "rendered": {
                      "text": "    ASSERT_SUCCESS(err, \"Pop operation failed with error %d\", err);\n    ASSERT_INT_EQUALS(fifth, pop_val, \"Fifth element returned should have been %d but was %d\", fifth, pop_val);\n    ASSERT_INT_EQUALS(\n        pop_val, top_val, \"Popped element should have been the top element. expected %d but was %d\", pop_val, top_val);\n\n    ASSERT_ERROR(\n        AWS_ERROR_PRIORITY_QUEUE_EMPTY,\n",
                      "markdown": "`    ASSERT_SUCCESS(err, \"Pop operation failed with error %d\", err);\n    ASSERT_INT_EQUALS(fifth, pop_val, \"Fifth element returned should have been %d but was %d\", fifth, pop_val);\n    ASSERT_INT_EQUALS(\n        pop_val, top_val, \"Popped element should have been the top element. expected %d but was %d\", pop_val, top_val);\n\n    ASSERT_ERROR(\n        AWS_ERROR_PRIORITY_QUEUE_EMPTY,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/priority_queue_test.c"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 62,
                  "endLine": 79,
                  "endColumn": 67,
                  "snippet": {
                    "text": "    ASSERT_SUCCESS(err, \"Pop operation failed with error %d\", err);\n    ASSERT_INT_EQUALS(fourth, pop_val, \"Fourth element returned should have been %d but was %d\", fourth, pop_val);\n    ASSERT_INT_EQUALS(\n        pop_val, top_val, \"Popped element should have been the top element. expected %d but was %d\", pop_val, top_val);\n\n    err = aws_priority_queue_top(&queue, (void **)&top_val_ptr);\n    ASSERT_SUCCESS(err, \"Top operation failed with error %d\", err);\n",
                    "rendered": {
                      "text": "    ASSERT_SUCCESS(err, \"Pop operation failed with error %d\", err);\n    ASSERT_INT_EQUALS(fourth, pop_val, \"Fourth element returned should have been %d but was %d\", fourth, pop_val);\n    ASSERT_INT_EQUALS(\n        pop_val, top_val, \"Popped element should have been the top element. expected %d but was %d\", pop_val, top_val);\n\n    err = aws_priority_queue_top(&queue, (void **)&top_val_ptr);\n    ASSERT_SUCCESS(err, \"Top operation failed with error %d\", err);\n",
                      "markdown": "`    ASSERT_SUCCESS(err, \"Pop operation failed with error %d\", err);\n    ASSERT_INT_EQUALS(fourth, pop_val, \"Fourth element returned should have been %d but was %d\", fourth, pop_val);\n    ASSERT_INT_EQUALS(\n        pop_val, top_val, \"Popped element should have been the top element. expected %d but was %d\", pop_val, top_val);\n\n    err = aws_priority_queue_top(&queue, (void **)&top_val_ptr);\n    ASSERT_SUCCESS(err, \"Top operation failed with error %d\", err);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/priority_queue_test.c"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 62,
                  "endLine": 70,
                  "endColumn": 67,
                  "snippet": {
                    "text": "    ASSERT_SUCCESS(err, \"Pop operation failed with error %d\", err);\n    ASSERT_INT_EQUALS(third, pop_val, \"Third element returned should have been %d but was %d\", third, pop_val);\n    ASSERT_INT_EQUALS(\n        pop_val, top_val, \"Popped element should have been the top element. expected %d but was %d\", pop_val, top_val);\n\n    err = aws_priority_queue_top(&queue, (void **)&top_val_ptr);\n    ASSERT_SUCCESS(err, \"Top operation failed with error %d\", err);\n",
                    "rendered": {
                      "text": "    ASSERT_SUCCESS(err, \"Pop operation failed with error %d\", err);\n    ASSERT_INT_EQUALS(third, pop_val, \"Third element returned should have been %d but was %d\", third, pop_val);\n    ASSERT_INT_EQUALS(\n        pop_val, top_val, \"Popped element should have been the top element. expected %d but was %d\", pop_val, top_val);\n\n    err = aws_priority_queue_top(&queue, (void **)&top_val_ptr);\n    ASSERT_SUCCESS(err, \"Top operation failed with error %d\", err);\n",
                      "markdown": "`    ASSERT_SUCCESS(err, \"Pop operation failed with error %d\", err);\n    ASSERT_INT_EQUALS(third, pop_val, \"Third element returned should have been %d but was %d\", third, pop_val);\n    ASSERT_INT_EQUALS(\n        pop_val, top_val, \"Popped element should have been the top element. expected %d but was %d\", pop_val, top_val);\n\n    err = aws_priority_queue_top(&queue, (void **)&top_val_ptr);\n    ASSERT_SUCCESS(err, \"Top operation failed with error %d\", err);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/priority_queue_test.c"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 62,
                  "endLine": 61,
                  "endColumn": 67,
                  "snippet": {
                    "text": "    ASSERT_SUCCESS(err, \"Pop operation failed with error %d\", err);\n    ASSERT_INT_EQUALS(second, pop_val, \"Second element returned should have been %d but was %d\", second, pop_val);\n    ASSERT_INT_EQUALS(\n        pop_val, top_val, \"Popped element should have been the top element. expected %d but was %d\", pop_val, top_val);\n\n    err = aws_priority_queue_top(&queue, (void **)&top_val_ptr);\n    ASSERT_SUCCESS(err, \"Top operation failed with error %d\", err);\n",
                    "rendered": {
                      "text": "    ASSERT_SUCCESS(err, \"Pop operation failed with error %d\", err);\n    ASSERT_INT_EQUALS(second, pop_val, \"Second element returned should have been %d but was %d\", second, pop_val);\n    ASSERT_INT_EQUALS(\n        pop_val, top_val, \"Popped element should have been the top element. expected %d but was %d\", pop_val, top_val);\n\n    err = aws_priority_queue_top(&queue, (void **)&top_val_ptr);\n    ASSERT_SUCCESS(err, \"Top operation failed with error %d\", err);\n",
                      "markdown": "`    ASSERT_SUCCESS(err, \"Pop operation failed with error %d\", err);\n    ASSERT_INT_EQUALS(second, pop_val, \"Second element returned should have been %d but was %d\", second, pop_val);\n    ASSERT_INT_EQUALS(\n        pop_val, top_val, \"Popped element should have been the top element. expected %d but was %d\", pop_val, top_val);\n\n    err = aws_priority_queue_top(&queue, (void **)&top_val_ptr);\n    ASSERT_SUCCESS(err, \"Top operation failed with error %d\", err);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/priority_queue_test.c"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 62,
                  "endLine": 52,
                  "endColumn": 67,
                  "snippet": {
                    "text": "    ASSERT_SUCCESS(err, \"Pop operation failed with error %d\", err);\n    ASSERT_INT_EQUALS(first, pop_val, \"First element returned should have been %d but was %d\", first, pop_val);\n    ASSERT_INT_EQUALS(\n        pop_val, top_val, \"Popped element should have been the top element. expected %d but was %d\", pop_val, top_val);\n\n    err = aws_priority_queue_top(&queue, (void **)&top_val_ptr);\n    ASSERT_SUCCESS(err, \"Top operation failed with error %d\", err);\n",
                    "rendered": {
                      "text": "    ASSERT_SUCCESS(err, \"Pop operation failed with error %d\", err);\n    ASSERT_INT_EQUALS(first, pop_val, \"First element returned should have been %d but was %d\", first, pop_val);\n    ASSERT_INT_EQUALS(\n        pop_val, top_val, \"Popped element should have been the top element. expected %d but was %d\", pop_val, top_val);\n\n    err = aws_priority_queue_top(&queue, (void **)&top_val_ptr);\n    ASSERT_SUCCESS(err, \"Top operation failed with error %d\", err);\n",
                      "markdown": "`    ASSERT_SUCCESS(err, \"Pop operation failed with error %d\", err);\n    ASSERT_INT_EQUALS(first, pop_val, \"First element returned should have been %d but was %d\", first, pop_val);\n    ASSERT_INT_EQUALS(\n        pop_val, top_val, \"Popped element should have been the top element. expected %d but was %d\", pop_val, top_val);\n\n    err = aws_priority_queue_top(&queue, (void **)&top_val_ptr);\n    ASSERT_SUCCESS(err, \"Top operation failed with error %d\", err);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/linked_list_test.c"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 3,
                  "endLine": 146,
                  "endColumn": 9,
                  "snippet": {
                    "text": "    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(fourth.value, item);\n\n    node = aws_linked_list_pop_front(&list);\n    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(first.value, item);\n\n",
                    "rendered": {
                      "text": "    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(fourth.value, item);\n\n    node = aws_linked_list_pop_front(&list);\n    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(first.value, item);\n\n",
                      "markdown": "`    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(fourth.value, item);\n\n    node = aws_linked_list_pop_front(&list);\n    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(first.value, item);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/linked_list_test.c"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 3,
                  "endLine": 142,
                  "endColumn": 9,
                  "snippet": {
                    "text": "    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(second.value, item);\n\n    node = aws_linked_list_pop_front(&list);\n    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(fourth.value, item);\n\n",
                    "rendered": {
                      "text": "    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(second.value, item);\n\n    node = aws_linked_list_pop_front(&list);\n    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(fourth.value, item);\n\n",
                      "markdown": "`    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(second.value, item);\n\n    node = aws_linked_list_pop_front(&list);\n    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(fourth.value, item);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/linked_list_test.c"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 3,
                  "endLine": 138,
                  "endColumn": 9,
                  "snippet": {
                    "text": "    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(third.value, item);\n\n    node = aws_linked_list_pop_front(&list);\n    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(second.value, item);\n\n",
                    "rendered": {
                      "text": "    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(third.value, item);\n\n    node = aws_linked_list_pop_front(&list);\n    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(second.value, item);\n\n",
                      "markdown": "`    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(third.value, item);\n\n    node = aws_linked_list_pop_front(&list);\n    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(second.value, item);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/linked_list_test.c"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 3,
                  "endLine": 100,
                  "endColumn": 9,
                  "snippet": {
                    "text": "    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(third.value, item);\n\n    node = aws_linked_list_pop_back(&list);\n    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(fourth.value, item);\n\n",
                    "rendered": {
                      "text": "    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(third.value, item);\n\n    node = aws_linked_list_pop_back(&list);\n    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(fourth.value, item);\n\n",
                      "markdown": "`    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(third.value, item);\n\n    node = aws_linked_list_pop_back(&list);\n    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(fourth.value, item);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/linked_list_test.c"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 3,
                  "endLine": 96,
                  "endColumn": 9,
                  "snippet": {
                    "text": "    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(second.value, item);\n\n    node = aws_linked_list_pop_back(&list);\n    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(third.value, item);\n\n",
                    "rendered": {
                      "text": "    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(second.value, item);\n\n    node = aws_linked_list_pop_back(&list);\n    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(third.value, item);\n\n",
                      "markdown": "`    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(second.value, item);\n\n    node = aws_linked_list_pop_back(&list);\n    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(third.value, item);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/linked_list_test.c"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 3,
                  "endLine": 92,
                  "endColumn": 9,
                  "snippet": {
                    "text": "    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(first.value, item);\n\n    node = aws_linked_list_pop_back(&list);\n    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(second.value, item);\n\n",
                    "rendered": {
                      "text": "    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(first.value, item);\n\n    node = aws_linked_list_pop_back(&list);\n    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(second.value, item);\n\n",
                      "markdown": "`    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(first.value, item);\n\n    node = aws_linked_list_pop_back(&list);\n    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(second.value, item);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/linked_list_test.c"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 3,
                  "endLine": 57,
                  "endColumn": 9,
                  "snippet": {
                    "text": "    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(third.value, item);\n\n    node = aws_linked_list_pop_front(&list);\n    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(fourth.value, item);\n\n",
                    "rendered": {
                      "text": "    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(third.value, item);\n\n    node = aws_linked_list_pop_front(&list);\n    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(fourth.value, item);\n\n",
                      "markdown": "`    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(third.value, item);\n\n    node = aws_linked_list_pop_front(&list);\n    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(fourth.value, item);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/linked_list_test.c"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 3,
                  "endLine": 53,
                  "endColumn": 9,
                  "snippet": {
                    "text": "    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(second.value, item);\n\n    node = aws_linked_list_pop_front(&list);\n    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(third.value, item);\n\n",
                    "rendered": {
                      "text": "    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(second.value, item);\n\n    node = aws_linked_list_pop_front(&list);\n    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(third.value, item);\n\n",
                      "markdown": "`    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(second.value, item);\n\n    node = aws_linked_list_pop_front(&list);\n    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(third.value, item);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/linked_list_test.c"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 3,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(first.value, item);\n\n    node = aws_linked_list_pop_front(&list);\n    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(second.value, item);\n\n",
                    "rendered": {
                      "text": "    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(first.value, item);\n\n    node = aws_linked_list_pop_front(&list);\n    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(second.value, item);\n\n",
                      "markdown": "`    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(first.value, item);\n\n    node = aws_linked_list_pop_front(&list);\n    item = AWS_CONTAINER_OF(node, struct int_value, node)->value;\n    ASSERT_INT_EQUALS(second.value, item);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/system_info_tests.c"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 53,
                  "endLine": 178,
                  "endColumn": 68,
                  "snippet": {
                    "text": "    ASSERT_NOT_NULL(env);\n    struct aws_byte_cursor virt_vendor = aws_system_environment_get_virtualization_vendor(env);\n    ASSERT_TRUE(aws_byte_cursor_is_valid(&virt_vendor));\n    struct aws_byte_cursor virt_product = aws_system_environment_get_virtualization_product_name(env);\n    ASSERT_TRUE(aws_byte_cursor_is_valid(&virt_product));\n\n    aws_system_environment_release(env);\n",
                    "rendered": {
                      "text": "    ASSERT_NOT_NULL(env);\n    struct aws_byte_cursor virt_vendor = aws_system_environment_get_virtualization_vendor(env);\n    ASSERT_TRUE(aws_byte_cursor_is_valid(&virt_vendor));\n    struct aws_byte_cursor virt_product = aws_system_environment_get_virtualization_product_name(env);\n    ASSERT_TRUE(aws_byte_cursor_is_valid(&virt_product));\n\n    aws_system_environment_release(env);\n",
                      "markdown": "`    ASSERT_NOT_NULL(env);\n    struct aws_byte_cursor virt_vendor = aws_system_environment_get_virtualization_vendor(env);\n    ASSERT_TRUE(aws_byte_cursor_is_valid(&virt_vendor));\n    struct aws_byte_cursor virt_product = aws_system_environment_get_virtualization_product_name(env);\n    ASSERT_TRUE(aws_byte_cursor_is_valid(&virt_product));\n\n    aws_system_environment_release(env);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/system_info_tests.c"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 52,
                  "endLine": 176,
                  "endColumn": 67,
                  "snippet": {
                    "text": "    aws_common_library_init(allocator);\n    struct aws_system_environment *env = aws_system_environment_load(allocator);\n    ASSERT_NOT_NULL(env);\n    struct aws_byte_cursor virt_vendor = aws_system_environment_get_virtualization_vendor(env);\n    ASSERT_TRUE(aws_byte_cursor_is_valid(&virt_vendor));\n    struct aws_byte_cursor virt_product = aws_system_environment_get_virtualization_product_name(env);\n    ASSERT_TRUE(aws_byte_cursor_is_valid(&virt_product));\n",
                    "rendered": {
                      "text": "    aws_common_library_init(allocator);\n    struct aws_system_environment *env = aws_system_environment_load(allocator);\n    ASSERT_NOT_NULL(env);\n    struct aws_byte_cursor virt_vendor = aws_system_environment_get_virtualization_vendor(env);\n    ASSERT_TRUE(aws_byte_cursor_is_valid(&virt_vendor));\n    struct aws_byte_cursor virt_product = aws_system_environment_get_virtualization_product_name(env);\n    ASSERT_TRUE(aws_byte_cursor_is_valid(&virt_product));\n",
                      "markdown": "`    aws_common_library_init(allocator);\n    struct aws_system_environment *env = aws_system_environment_load(allocator);\n    ASSERT_NOT_NULL(env);\n    struct aws_byte_cursor virt_vendor = aws_system_environment_get_virtualization_vendor(env);\n    ASSERT_TRUE(aws_byte_cursor_is_valid(&virt_vendor));\n    struct aws_byte_cursor virt_product = aws_system_environment_get_virtualization_product_name(env);\n    ASSERT_TRUE(aws_byte_cursor_is_valid(&virt_product));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/system_info_tests.c"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 54,
                  "endLine": 149,
                  "endColumn": 60,
                  "snippet": {
                    "text": "        for (size_t cpu_idx = 0; cpu_idx < cpus_per_group; ++cpu_idx) {\n            AWS_LOGF_INFO(\n                AWS_LS_COMMON_GENERAL,\n                \"found cpu_id %d, which lives on group node %d. Is it likely a hyper-thread ? %s\",\n                (int)cpus_for_group[cpu_idx].cpu_id,\n                (int)i,\n                cpus_for_group[cpu_idx].suspected_hyper_thread ? \"Yes\" : \"No\");\n",
                    "rendered": {
                      "text": "        for (size_t cpu_idx = 0; cpu_idx < cpus_per_group; ++cpu_idx) {\n            AWS_LOGF_INFO(\n                AWS_LS_COMMON_GENERAL,\n                \"found cpu_id %d, which lives on group node %d. Is it likely a hyper-thread ? %s\",\n                (int)cpus_for_group[cpu_idx].cpu_id,\n                (int)i,\n                cpus_for_group[cpu_idx].suspected_hyper_thread ? \"Yes\" : \"No\");\n",
                      "markdown": "`        for (size_t cpu_idx = 0; cpu_idx < cpus_per_group; ++cpu_idx) {\n            AWS_LOGF_INFO(\n                AWS_LS_COMMON_GENERAL,\n                \"found cpu_id %d, which lives on group node %d. Is it likely a hyper-thread ? %s\",\n                (int)cpus_for_group[cpu_idx].cpu_id,\n                (int)i,\n                cpus_for_group[cpu_idx].suspected_hyper_thread ? \"Yes\" : \"No\");\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/system_info_tests.c"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 76,
                  "endLine": 135,
                  "endColumn": 82,
                  "snippet": {
                    "text": "    for (uint16_t i = 0; i < group_count; ++i) {\n        size_t cpus_per_group = aws_get_cpu_count_for_group(i);\n        AWS_LOGF_INFO(\n            AWS_LS_COMMON_GENERAL, \"found cpu count %d, which lives on group node %d\", (int)cpus_per_group, (int)i);\n\n        ASSERT_TRUE(cpus_per_group > 0);\n        total_cpus_found_via_numa += cpus_per_group;\n",
                    "rendered": {
                      "text": "    for (uint16_t i = 0; i < group_count; ++i) {\n        size_t cpus_per_group = aws_get_cpu_count_for_group(i);\n        AWS_LOGF_INFO(\n            AWS_LS_COMMON_GENERAL, \"found cpu count %d, which lives on group node %d\", (int)cpus_per_group, (int)i);\n\n        ASSERT_TRUE(cpus_per_group > 0);\n        total_cpus_found_via_numa += cpus_per_group;\n",
                      "markdown": "`    for (uint16_t i = 0; i < group_count; ++i) {\n        size_t cpus_per_group = aws_get_cpu_count_for_group(i);\n        AWS_LOGF_INFO(\n            AWS_LS_COMMON_GENERAL, \"found cpu count %d, which lives on group node %d\", (int)cpus_per_group, (int)i);\n\n        ASSERT_TRUE(cpus_per_group > 0);\n        total_cpus_found_via_numa += cpus_per_group;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/atomics_test.c"
                },
                "region": {
                  "startLine": 470,
                  "startColumn": 92,
                  "endLine": 470,
                  "endColumn": 96,
                  "snippet": {
                    "text": "         * If we see that flag == 2, then the data observation must be 1.\n         * If flag == 0, then the data value may be anything.\n         */\n        ASSERT_FALSE(flag_observation && !data_observation, \"Acquire-release ordering failed at iteration %zu\", i);\n    }\n\n    free_races(allocator);\n",
                    "rendered": {
                      "text": "         * If we see that flag == 2, then the data observation must be 1.\n         * If flag == 0, then the data value may be anything.\n         */\n        ASSERT_FALSE(flag_observation && !data_observation, \"Acquire-release ordering failed at iteration %zu\", i);\n    }\n\n    free_races(allocator);\n",
                      "markdown": "`         * If we see that flag == 2, then the data observation must be 1.\n         * If flag == 0, then the data value may be anything.\n         */\n        ASSERT_FALSE(flag_observation && !data_observation, \"Acquire-release ordering failed at iteration %zu\", i);\n    }\n\n    free_races(allocator);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/atomics_test.c"
                },
                "region": {
                  "startLine": 407,
                  "startColumn": 61,
                  "endLine": 407,
                  "endColumn": 65,
                  "snippet": {
                    "text": "         * If we see that flag == 2, then the data observation must be 1.\n         * If flag == 0, then the data value may be anything.\n         */\n        ASSERT_FALSE(a == 2, \"Acquire-release ordering failed at iteration %zu\", i);\n    }\n\n    free_races(allocator);\n",
                    "rendered": {
                      "text": "         * If we see that flag == 2, then the data observation must be 1.\n         * If flag == 0, then the data value may be anything.\n         */\n        ASSERT_FALSE(a == 2, \"Acquire-release ordering failed at iteration %zu\", i);\n    }\n\n    free_races(allocator);\n",
                      "markdown": "`         * If we see that flag == 2, then the data observation must be 1.\n         * If flag == 0, then the data value may be anything.\n         */\n        ASSERT_FALSE(a == 2, \"Acquire-release ordering failed at iteration %zu\", i);\n    }\n\n    free_races(allocator);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/error_test.c"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 68,
                  "endLine": 200,
                  "endColumn": 74,
                  "snippet": {
                    "text": "    cb_data.last_seen = 0;\n    cb_data.global_cb_called = 0;\n    old_fn = aws_set_thread_local_error_handler_fn(s_error_test_thread_local_cb, &cb_data);\n    ASSERT_NULL(old_fn, \"setting the global error callback the first time should return null\");\n\n    aws_raise_error(test_error_2.error_code);\n    ASSERT_INT_EQUALS(\n",
                    "rendered": {
                      "text": "    cb_data.last_seen = 0;\n    cb_data.global_cb_called = 0;\n    old_fn = aws_set_thread_local_error_handler_fn(s_error_test_thread_local_cb, &cb_data);\n    ASSERT_NULL(old_fn, \"setting the global error callback the first time should return null\");\n\n    aws_raise_error(test_error_2.error_code);\n    ASSERT_INT_EQUALS(\n",
                      "markdown": "`    cb_data.last_seen = 0;\n    cb_data.global_cb_called = 0;\n    old_fn = aws_set_thread_local_error_handler_fn(s_error_test_thread_local_cb, &cb_data);\n    ASSERT_NULL(old_fn, \"setting the global error callback the first time should return null\");\n\n    aws_raise_error(test_error_2.error_code);\n    ASSERT_INT_EQUALS(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/error_test.c"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 68,
                  "endLine": 171,
                  "endColumn": 74,
                  "snippet": {
                    "text": "    struct aws_error_info test_error_2 = s_errors[1];\n\n    aws_error_handler_fn *old_fn = aws_set_global_error_handler_fn(s_error_test_global_cb, &cb_data);\n    ASSERT_NULL(old_fn, \"setting the global error callback the first time should return null\");\n    aws_raise_error(test_error_1.error_code);\n\n    ASSERT_NOT_NULL(cb_data.last_seen, \"last error should not have been null\");\n",
                    "rendered": {
                      "text": "    struct aws_error_info test_error_2 = s_errors[1];\n\n    aws_error_handler_fn *old_fn = aws_set_global_error_handler_fn(s_error_test_global_cb, &cb_data);\n    ASSERT_NULL(old_fn, \"setting the global error callback the first time should return null\");\n    aws_raise_error(test_error_1.error_code);\n\n    ASSERT_NOT_NULL(cb_data.last_seen, \"last error should not have been null\");\n",
                      "markdown": "`    struct aws_error_info test_error_2 = s_errors[1];\n\n    aws_error_handler_fn *old_fn = aws_set_global_error_handler_fn(s_error_test_global_cb, &cb_data);\n    ASSERT_NULL(old_fn, \"setting the global error callback the first time should return null\");\n    aws_raise_error(test_error_1.error_code);\n\n    ASSERT_NOT_NULL(cb_data.last_seen, \"last error should not have been null\");\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/assert_test.c"
                },
                "region": {
                  "startLine": 233,
                  "startColumn": 60,
                  "endLine": 233,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    if (test_asserts(&index) != FAILURE) {\n        fprintf(\n            stderr,\n            \"***FAILURE*** Second case did not fail; stopped at %s:%d (%s)\\n\",\n            g_cur_file,\n            index,\n            g_cur_testname);\n",
                    "rendered": {
                      "text": "    if (test_asserts(&index) != FAILURE) {\n        fprintf(\n            stderr,\n            \"***FAILURE*** Second case did not fail; stopped at %s:%d (%s)\\n\",\n            g_cur_file,\n            index,\n            g_cur_testname);\n",
                      "markdown": "`    if (test_asserts(&index) != FAILURE) {\n        fprintf(\n            stderr,\n            \"***FAILURE*** Second case did not fail; stopped at %s:%d (%s)\\n\",\n            g_cur_file,\n            index,\n            g_cur_testname);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/assert_test.c"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 64,
                  "endLine": 221,
                  "endColumn": 68,
                  "snippet": {
                    "text": "    if (test_asserts(&index) != BAILED_OUT) {\n        fprintf(\n            stderr,\n            \"***FAILURE*** Initial case did not succeed; stopped at %s:%d (%s)\\n\",\n            g_cur_file,\n            index,\n            g_cur_testname);\n",
                    "rendered": {
                      "text": "    if (test_asserts(&index) != BAILED_OUT) {\n        fprintf(\n            stderr,\n            \"***FAILURE*** Initial case did not succeed; stopped at %s:%d (%s)\\n\",\n            g_cur_file,\n            index,\n            g_cur_testname);\n",
                      "markdown": "`    if (test_asserts(&index) != BAILED_OUT) {\n        fprintf(\n            stderr,\n            \"***FAILURE*** Initial case did not succeed; stopped at %s:%d (%s)\\n\",\n            g_cur_file,\n            index,\n            g_cur_testname);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/uri_test.c"
                },
                "region": {
                  "startLine": 387,
                  "startColumn": 31,
                  "endLine": 387,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\n    ASSERT_UINT_EQUALS(0U, uri.userinfo.len);\n    ASSERT_UINT_EQUALS(0U, uri.user.len);\n    ASSERT_UINT_EQUALS(0U, uri.password.len);\n\n    struct aws_byte_cursor expected_host = aws_byte_cursor_from_c_str(\"www.test.com\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_host.ptr, expected_host.len, uri.host_name.ptr, uri.host_name.len);\n",
                    "rendered": {
                      "text": "\n    ASSERT_UINT_EQUALS(0U, uri.userinfo.len);\n    ASSERT_UINT_EQUALS(0U, uri.user.len);\n    ASSERT_UINT_EQUALS(0U, uri.password.len);\n\n    struct aws_byte_cursor expected_host = aws_byte_cursor_from_c_str(\"www.test.com\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_host.ptr, expected_host.len, uri.host_name.ptr, uri.host_name.len);\n",
                      "markdown": "`\n    ASSERT_UINT_EQUALS(0U, uri.userinfo.len);\n    ASSERT_UINT_EQUALS(0U, uri.user.len);\n    ASSERT_UINT_EQUALS(0U, uri.password.len);\n\n    struct aws_byte_cursor expected_host = aws_byte_cursor_from_c_str(\"www.test.com\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_host.ptr, expected_host.len, uri.host_name.ptr, uri.host_name.len);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/uri_test.c"
                },
                "region": {
                  "startLine": 370,
                  "startColumn": 55,
                  "endLine": 370,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\nstatic int s_test_uri_empty_user_parse(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n    /* RFC-3986 section 3.2.1: Use of the format \"user:password\" in the userinfo field is deprecated.\n     * We will try to parse the userinfo with the format still, but if not happening, it will not be treated as an\n     * error. The whole userinfo will still be available to access */\n    const char *str_uri = \"https://@www.test.com\";\n",
                    "rendered": {
                      "text": "\nstatic int s_test_uri_empty_user_parse(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n    /* RFC-3986 section 3.2.1: Use of the format \"user:password\" in the userinfo field is deprecated.\n     * We will try to parse the userinfo with the format still, but if not happening, it will not be treated as an\n     * error. The whole userinfo will still be available to access */\n    const char *str_uri = \"https://@www.test.com\";\n",
                      "markdown": "`\nstatic int s_test_uri_empty_user_parse(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n    /* RFC-3986 section 3.2.1: Use of the format \"user:password\" in the userinfo field is deprecated.\n     * We will try to parse the userinfo with the format still, but if not happening, it will not be treated as an\n     * error. The whole userinfo will still be available to access */\n    const char *str_uri = \"https://@www.test.com\";\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/uri_test.c"
                },
                "region": {
                  "startLine": 366,
                  "startColumn": 69,
                  "endLine": 366,
                  "endColumn": 77,
                  "snippet": {
                    "text": "    return AWS_OP_SUCCESS;\n}\n\nAWS_TEST_CASE(uri_userinfo_no_password_parse, s_test_uri_userinfo_no_password_parse);\n\nstatic int s_test_uri_empty_user_parse(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n",
                    "rendered": {
                      "text": "    return AWS_OP_SUCCESS;\n}\n\nAWS_TEST_CASE(uri_userinfo_no_password_parse, s_test_uri_userinfo_no_password_parse);\n\nstatic int s_test_uri_empty_user_parse(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n",
                      "markdown": "`    return AWS_OP_SUCCESS;\n}\n\nAWS_TEST_CASE(uri_userinfo_no_password_parse, s_test_uri_userinfo_no_password_parse);\n\nstatic int s_test_uri_empty_user_parse(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/uri_test.c"
                },
                "region": {
                  "startLine": 366,
                  "startColumn": 30,
                  "endLine": 366,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    return AWS_OP_SUCCESS;\n}\n\nAWS_TEST_CASE(uri_userinfo_no_password_parse, s_test_uri_userinfo_no_password_parse);\n\nstatic int s_test_uri_empty_user_parse(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n",
                    "rendered": {
                      "text": "    return AWS_OP_SUCCESS;\n}\n\nAWS_TEST_CASE(uri_userinfo_no_password_parse, s_test_uri_userinfo_no_password_parse);\n\nstatic int s_test_uri_empty_user_parse(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n",
                      "markdown": "`    return AWS_OP_SUCCESS;\n}\n\nAWS_TEST_CASE(uri_userinfo_no_password_parse, s_test_uri_userinfo_no_password_parse);\n\nstatic int s_test_uri_empty_user_parse(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/uri_test.c"
                },
                "region": {
                  "startLine": 350,
                  "startColumn": 31,
                  "endLine": 350,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\n    struct aws_byte_cursor expected_user = aws_byte_cursor_from_c_str(\"some_name\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_user.ptr, expected_user.len, uri.user.ptr, uri.user.len);\n    ASSERT_UINT_EQUALS(0U, uri.password.len);\n\n    struct aws_byte_cursor expected_host = aws_byte_cursor_from_c_str(\"www.test.com\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_host.ptr, expected_host.len, uri.host_name.ptr, uri.host_name.len);\n",
                    "rendered": {
                      "text": "\n    struct aws_byte_cursor expected_user = aws_byte_cursor_from_c_str(\"some_name\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_user.ptr, expected_user.len, uri.user.ptr, uri.user.len);\n    ASSERT_UINT_EQUALS(0U, uri.password.len);\n\n    struct aws_byte_cursor expected_host = aws_byte_cursor_from_c_str(\"www.test.com\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_host.ptr, expected_host.len, uri.host_name.ptr, uri.host_name.len);\n",
                      "markdown": "`\n    struct aws_byte_cursor expected_user = aws_byte_cursor_from_c_str(\"some_name\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_user.ptr, expected_user.len, uri.user.ptr, uri.user.len);\n    ASSERT_UINT_EQUALS(0U, uri.password.len);\n\n    struct aws_byte_cursor expected_host = aws_byte_cursor_from_c_str(\"www.test.com\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_host.ptr, expected_host.len, uri.host_name.ptr, uri.host_name.len);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/uri_test.c"
                },
                "region": {
                  "startLine": 330,
                  "startColumn": 55,
                  "endLine": 330,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\nstatic int s_test_uri_userinfo_no_password_parse(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n    /* RFC-3986 section 3.2.1: Use of the format \"user:password\" in the userinfo field is deprecated.\n     * We will try to parse the userinfo with the format still, but if not happening, it will not be treated as an\n     * error. The whole userinfo will still be available to access */\n    const char *str_uri = \"https://some_name@www.test.com\";\n",
                    "rendered": {
                      "text": "\nstatic int s_test_uri_userinfo_no_password_parse(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n    /* RFC-3986 section 3.2.1: Use of the format \"user:password\" in the userinfo field is deprecated.\n     * We will try to parse the userinfo with the format still, but if not happening, it will not be treated as an\n     * error. The whole userinfo will still be available to access */\n    const char *str_uri = \"https://some_name@www.test.com\";\n",
                      "markdown": "`\nstatic int s_test_uri_userinfo_no_password_parse(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n    /* RFC-3986 section 3.2.1: Use of the format \"user:password\" in the userinfo field is deprecated.\n     * We will try to parse the userinfo with the format still, but if not happening, it will not be treated as an\n     * error. The whole userinfo will still be available to access */\n    const char *str_uri = \"https://some_name@www.test.com\";\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/uri_test.c"
                },
                "region": {
                  "startLine": 328,
                  "startColumn": 34,
                  "endLine": 328,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\nAWS_TEST_CASE(uri_root_slash_only_path_parse, s_test_uri_root_slash_only_path_parse);\n\nstatic int s_test_uri_userinfo_no_password_parse(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n    /* RFC-3986 section 3.2.1: Use of the format \"user:password\" in the userinfo field is deprecated.\n     * We will try to parse the userinfo with the format still, but if not happening, it will not be treated as an\n",
                    "rendered": {
                      "text": "\nAWS_TEST_CASE(uri_root_slash_only_path_parse, s_test_uri_root_slash_only_path_parse);\n\nstatic int s_test_uri_userinfo_no_password_parse(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n    /* RFC-3986 section 3.2.1: Use of the format \"user:password\" in the userinfo field is deprecated.\n     * We will try to parse the userinfo with the format still, but if not happening, it will not be treated as an\n",
                      "markdown": "`\nAWS_TEST_CASE(uri_root_slash_only_path_parse, s_test_uri_root_slash_only_path_parse);\n\nstatic int s_test_uri_userinfo_no_password_parse(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n    /* RFC-3986 section 3.2.1: Use of the format \"user:password\" in the userinfo field is deprecated.\n     * We will try to parse the userinfo with the format still, but if not happening, it will not be treated as an\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/uri_test.c"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 97,
                  "endLine": 30,
                  "endColumn": 105,
                  "snippet": {
                    "text": "    ASSERT_BIN_ARRAYS_EQUALS(expected_user.ptr, expected_user.len, uri.user.ptr, uri.user.len);\n\n    struct aws_byte_cursor expected_password = aws_byte_cursor_from_c_str(\"some_password\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_password.ptr, expected_password.len, uri.password.ptr, uri.password.len);\n\n    struct aws_byte_cursor expected_host = aws_byte_cursor_from_c_str(\"www.test.com\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_host.ptr, expected_host.len, uri.host_name.ptr, uri.host_name.len);\n",
                    "rendered": {
                      "text": "    ASSERT_BIN_ARRAYS_EQUALS(expected_user.ptr, expected_user.len, uri.user.ptr, uri.user.len);\n\n    struct aws_byte_cursor expected_password = aws_byte_cursor_from_c_str(\"some_password\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_password.ptr, expected_password.len, uri.password.ptr, uri.password.len);\n\n    struct aws_byte_cursor expected_host = aws_byte_cursor_from_c_str(\"www.test.com\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_host.ptr, expected_host.len, uri.host_name.ptr, uri.host_name.len);\n",
                      "markdown": "`    ASSERT_BIN_ARRAYS_EQUALS(expected_user.ptr, expected_user.len, uri.user.ptr, uri.user.len);\n\n    struct aws_byte_cursor expected_password = aws_byte_cursor_from_c_str(\"some_password\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_password.ptr, expected_password.len, uri.password.ptr, uri.password.len);\n\n    struct aws_byte_cursor expected_host = aws_byte_cursor_from_c_str(\"www.test.com\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_host.ptr, expected_host.len, uri.host_name.ptr, uri.host_name.len);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/uri_test.c"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 79,
                  "endLine": 30,
                  "endColumn": 87,
                  "snippet": {
                    "text": "    ASSERT_BIN_ARRAYS_EQUALS(expected_user.ptr, expected_user.len, uri.user.ptr, uri.user.len);\n\n    struct aws_byte_cursor expected_password = aws_byte_cursor_from_c_str(\"some_password\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_password.ptr, expected_password.len, uri.password.ptr, uri.password.len);\n\n    struct aws_byte_cursor expected_host = aws_byte_cursor_from_c_str(\"www.test.com\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_host.ptr, expected_host.len, uri.host_name.ptr, uri.host_name.len);\n",
                    "rendered": {
                      "text": "    ASSERT_BIN_ARRAYS_EQUALS(expected_user.ptr, expected_user.len, uri.user.ptr, uri.user.len);\n\n    struct aws_byte_cursor expected_password = aws_byte_cursor_from_c_str(\"some_password\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_password.ptr, expected_password.len, uri.password.ptr, uri.password.len);\n\n    struct aws_byte_cursor expected_host = aws_byte_cursor_from_c_str(\"www.test.com\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_host.ptr, expected_host.len, uri.host_name.ptr, uri.host_name.len);\n",
                      "markdown": "`    ASSERT_BIN_ARRAYS_EQUALS(expected_user.ptr, expected_user.len, uri.user.ptr, uri.user.len);\n\n    struct aws_byte_cursor expected_password = aws_byte_cursor_from_c_str(\"some_password\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_password.ptr, expected_password.len, uri.password.ptr, uri.password.len);\n\n    struct aws_byte_cursor expected_host = aws_byte_cursor_from_c_str(\"www.test.com\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_host.ptr, expected_host.len, uri.host_name.ptr, uri.host_name.len);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/uri_test.c"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 61,
                  "endLine": 30,
                  "endColumn": 69,
                  "snippet": {
                    "text": "    ASSERT_BIN_ARRAYS_EQUALS(expected_user.ptr, expected_user.len, uri.user.ptr, uri.user.len);\n\n    struct aws_byte_cursor expected_password = aws_byte_cursor_from_c_str(\"some_password\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_password.ptr, expected_password.len, uri.password.ptr, uri.password.len);\n\n    struct aws_byte_cursor expected_host = aws_byte_cursor_from_c_str(\"www.test.com\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_host.ptr, expected_host.len, uri.host_name.ptr, uri.host_name.len);\n",
                    "rendered": {
                      "text": "    ASSERT_BIN_ARRAYS_EQUALS(expected_user.ptr, expected_user.len, uri.user.ptr, uri.user.len);\n\n    struct aws_byte_cursor expected_password = aws_byte_cursor_from_c_str(\"some_password\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_password.ptr, expected_password.len, uri.password.ptr, uri.password.len);\n\n    struct aws_byte_cursor expected_host = aws_byte_cursor_from_c_str(\"www.test.com\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_host.ptr, expected_host.len, uri.host_name.ptr, uri.host_name.len);\n",
                      "markdown": "`    ASSERT_BIN_ARRAYS_EQUALS(expected_user.ptr, expected_user.len, uri.user.ptr, uri.user.len);\n\n    struct aws_byte_cursor expected_password = aws_byte_cursor_from_c_str(\"some_password\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_password.ptr, expected_password.len, uri.password.ptr, uri.password.len);\n\n    struct aws_byte_cursor expected_host = aws_byte_cursor_from_c_str(\"www.test.com\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_host.ptr, expected_host.len, uri.host_name.ptr, uri.host_name.len);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/uri_test.c"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 38,
                  "endLine": 30,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    ASSERT_BIN_ARRAYS_EQUALS(expected_user.ptr, expected_user.len, uri.user.ptr, uri.user.len);\n\n    struct aws_byte_cursor expected_password = aws_byte_cursor_from_c_str(\"some_password\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_password.ptr, expected_password.len, uri.password.ptr, uri.password.len);\n\n    struct aws_byte_cursor expected_host = aws_byte_cursor_from_c_str(\"www.test.com\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_host.ptr, expected_host.len, uri.host_name.ptr, uri.host_name.len);\n",
                    "rendered": {
                      "text": "    ASSERT_BIN_ARRAYS_EQUALS(expected_user.ptr, expected_user.len, uri.user.ptr, uri.user.len);\n\n    struct aws_byte_cursor expected_password = aws_byte_cursor_from_c_str(\"some_password\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_password.ptr, expected_password.len, uri.password.ptr, uri.password.len);\n\n    struct aws_byte_cursor expected_host = aws_byte_cursor_from_c_str(\"www.test.com\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_host.ptr, expected_host.len, uri.host_name.ptr, uri.host_name.len);\n",
                      "markdown": "`    ASSERT_BIN_ARRAYS_EQUALS(expected_user.ptr, expected_user.len, uri.user.ptr, uri.user.len);\n\n    struct aws_byte_cursor expected_password = aws_byte_cursor_from_c_str(\"some_password\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_password.ptr, expected_password.len, uri.password.ptr, uri.password.len);\n\n    struct aws_byte_cursor expected_host = aws_byte_cursor_from_c_str(\"www.test.com\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_host.ptr, expected_host.len, uri.host_name.ptr, uri.host_name.len);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/uri_test.c"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 80,
                  "endLine": 29,
                  "endColumn": 88,
                  "snippet": {
                    "text": "    struct aws_byte_cursor expected_user = aws_byte_cursor_from_c_str(\"some_user\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_user.ptr, expected_user.len, uri.user.ptr, uri.user.len);\n\n    struct aws_byte_cursor expected_password = aws_byte_cursor_from_c_str(\"some_password\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_password.ptr, expected_password.len, uri.password.ptr, uri.password.len);\n\n    struct aws_byte_cursor expected_host = aws_byte_cursor_from_c_str(\"www.test.com\");\n",
                    "rendered": {
                      "text": "    struct aws_byte_cursor expected_user = aws_byte_cursor_from_c_str(\"some_user\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_user.ptr, expected_user.len, uri.user.ptr, uri.user.len);\n\n    struct aws_byte_cursor expected_password = aws_byte_cursor_from_c_str(\"some_password\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_password.ptr, expected_password.len, uri.password.ptr, uri.password.len);\n\n    struct aws_byte_cursor expected_host = aws_byte_cursor_from_c_str(\"www.test.com\");\n",
                      "markdown": "`    struct aws_byte_cursor expected_user = aws_byte_cursor_from_c_str(\"some_user\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_user.ptr, expected_user.len, uri.user.ptr, uri.user.len);\n\n    struct aws_byte_cursor expected_password = aws_byte_cursor_from_c_str(\"some_password\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_password.ptr, expected_password.len, uri.password.ptr, uri.password.len);\n\n    struct aws_byte_cursor expected_host = aws_byte_cursor_from_c_str(\"www.test.com\");\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/uri_test.c"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 36,
                  "endLine": 29,
                  "endColumn": 44,
                  "snippet": {
                    "text": "    struct aws_byte_cursor expected_user = aws_byte_cursor_from_c_str(\"some_user\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_user.ptr, expected_user.len, uri.user.ptr, uri.user.len);\n\n    struct aws_byte_cursor expected_password = aws_byte_cursor_from_c_str(\"some_password\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_password.ptr, expected_password.len, uri.password.ptr, uri.password.len);\n\n    struct aws_byte_cursor expected_host = aws_byte_cursor_from_c_str(\"www.test.com\");\n",
                    "rendered": {
                      "text": "    struct aws_byte_cursor expected_user = aws_byte_cursor_from_c_str(\"some_user\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_user.ptr, expected_user.len, uri.user.ptr, uri.user.len);\n\n    struct aws_byte_cursor expected_password = aws_byte_cursor_from_c_str(\"some_password\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_password.ptr, expected_password.len, uri.password.ptr, uri.password.len);\n\n    struct aws_byte_cursor expected_host = aws_byte_cursor_from_c_str(\"www.test.com\");\n",
                      "markdown": "`    struct aws_byte_cursor expected_user = aws_byte_cursor_from_c_str(\"some_user\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_user.ptr, expected_user.len, uri.user.ptr, uri.user.len);\n\n    struct aws_byte_cursor expected_password = aws_byte_cursor_from_c_str(\"some_password\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_password.ptr, expected_password.len, uri.password.ptr, uri.password.len);\n\n    struct aws_byte_cursor expected_host = aws_byte_cursor_from_c_str(\"www.test.com\");\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/uri_test.c"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 90,
                  "endLine": 23,
                  "endColumn": 98,
                  "snippet": {
                    "text": "    struct aws_byte_cursor expected_authority = aws_byte_cursor_from_c_str(\"some_user:some_password@www.test.com:8443\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_authority.ptr, expected_authority.len, uri.authority.ptr, uri.authority.len);\n\n    struct aws_byte_cursor expected_userinfo = aws_byte_cursor_from_c_str(\"some_user:some_password\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_userinfo.ptr, expected_userinfo.len, uri.userinfo.ptr, uri.userinfo.len);\n\n    struct aws_byte_cursor expected_user = aws_byte_cursor_from_c_str(\"some_user\");\n",
                    "rendered": {
                      "text": "    struct aws_byte_cursor expected_authority = aws_byte_cursor_from_c_str(\"some_user:some_password@www.test.com:8443\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_authority.ptr, expected_authority.len, uri.authority.ptr, uri.authority.len);\n\n    struct aws_byte_cursor expected_userinfo = aws_byte_cursor_from_c_str(\"some_user:some_password\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_userinfo.ptr, expected_userinfo.len, uri.userinfo.ptr, uri.userinfo.len);\n\n    struct aws_byte_cursor expected_user = aws_byte_cursor_from_c_str(\"some_user\");\n",
                      "markdown": "`    struct aws_byte_cursor expected_authority = aws_byte_cursor_from_c_str(\"some_user:some_password@www.test.com:8443\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_authority.ptr, expected_authority.len, uri.authority.ptr, uri.authority.len);\n\n    struct aws_byte_cursor expected_userinfo = aws_byte_cursor_from_c_str(\"some_user:some_password\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_userinfo.ptr, expected_userinfo.len, uri.userinfo.ptr, uri.userinfo.len);\n\n    struct aws_byte_cursor expected_user = aws_byte_cursor_from_c_str(\"some_user\");\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/uri_test.c"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 91,
                  "endLine": 20,
                  "endColumn": 99,
                  "snippet": {
                    "text": "    struct aws_byte_cursor expected_scheme = aws_byte_cursor_from_c_str(\"https\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_scheme.ptr, expected_scheme.len, uri.scheme.ptr, uri.scheme.len);\n\n    struct aws_byte_cursor expected_authority = aws_byte_cursor_from_c_str(\"some_user:some_password@www.test.com:8443\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_authority.ptr, expected_authority.len, uri.authority.ptr, uri.authority.len);\n\n    struct aws_byte_cursor expected_userinfo = aws_byte_cursor_from_c_str(\"some_user:some_password\");\n",
                    "rendered": {
                      "text": "    struct aws_byte_cursor expected_scheme = aws_byte_cursor_from_c_str(\"https\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_scheme.ptr, expected_scheme.len, uri.scheme.ptr, uri.scheme.len);\n\n    struct aws_byte_cursor expected_authority = aws_byte_cursor_from_c_str(\"some_user:some_password@www.test.com:8443\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_authority.ptr, expected_authority.len, uri.authority.ptr, uri.authority.len);\n\n    struct aws_byte_cursor expected_userinfo = aws_byte_cursor_from_c_str(\"some_user:some_password\");\n",
                      "markdown": "`    struct aws_byte_cursor expected_scheme = aws_byte_cursor_from_c_str(\"https\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_scheme.ptr, expected_scheme.len, uri.scheme.ptr, uri.scheme.len);\n\n    struct aws_byte_cursor expected_authority = aws_byte_cursor_from_c_str(\"some_user:some_password@www.test.com:8443\");\n    ASSERT_BIN_ARRAYS_EQUALS(expected_authority.ptr, expected_authority.len, uri.authority.ptr, uri.authority.len);\n\n    struct aws_byte_cursor expected_userinfo = aws_byte_cursor_from_c_str(\"some_user:some_password\");\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/uri_test.c"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 50,
                  "endLine": 10,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\nstatic int s_test_uri_full_parse(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n    const char *str_uri = \"https://some_user:some_password@www.test.com:8443/path/to/\"\n                          \"resource?test1=value1&test%20space=value%20space&test2=value2&test2=value3\";\n\n    struct aws_byte_cursor uri_csr = aws_byte_cursor_from_c_str(str_uri);\n",
                    "rendered": {
                      "text": "\nstatic int s_test_uri_full_parse(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n    const char *str_uri = \"https://some_user:some_password@www.test.com:8443/path/to/\"\n                          \"resource?test1=value1&test%20space=value%20space&test2=value2&test2=value3\";\n\n    struct aws_byte_cursor uri_csr = aws_byte_cursor_from_c_str(str_uri);\n",
                      "markdown": "`\nstatic int s_test_uri_full_parse(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n    const char *str_uri = \"https://some_user:some_password@www.test.com:8443/path/to/\"\n                          \"resource?test1=value1&test%20space=value%20space&test2=value2&test2=value3\";\n\n    struct aws_byte_cursor uri_csr = aws_byte_cursor_from_c_str(str_uri);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/uri_test.c"
                },
                "region": {
                  "startLine": 862,
                  "startColumn": 8,
                  "endLine": 862,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    ASSERT_SUCCESS(s_test_uri_decode_ok(\n        allocator,\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\", /* long enough to resize output buffer */\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"));\n\n    /* these should fail */\n    ASSERT_SUCCESS(s_test_uri_decode_err(allocator, \"%\"));\n",
                    "rendered": {
                      "text": "    ASSERT_SUCCESS(s_test_uri_decode_ok(\n        allocator,\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\", /* long enough to resize output buffer */\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"));\n\n    /* these should fail */\n    ASSERT_SUCCESS(s_test_uri_decode_err(allocator, \"%\"));\n",
                      "markdown": "`    ASSERT_SUCCESS(s_test_uri_decode_ok(\n        allocator,\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\", /* long enough to resize output buffer */\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"));\n\n    /* these should fail */\n    ASSERT_SUCCESS(s_test_uri_decode_err(allocator, \"%\"));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/uri_test.c"
                },
                "region": {
                  "startLine": 861,
                  "startColumn": 8,
                  "endLine": 861,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    ASSERT_SUCCESS(s_test_uri_decode_ok(allocator, \"ሴ\", \"ሴ\")); /* odd input should just pass through */\n    ASSERT_SUCCESS(s_test_uri_decode_ok(\n        allocator,\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\", /* long enough to resize output buffer */\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"));\n\n    /* these should fail */\n",
                    "rendered": {
                      "text": "    ASSERT_SUCCESS(s_test_uri_decode_ok(allocator, \"ሴ\", \"ሴ\")); /* odd input should just pass through */\n    ASSERT_SUCCESS(s_test_uri_decode_ok(\n        allocator,\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\", /* long enough to resize output buffer */\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"));\n\n    /* these should fail */\n",
                      "markdown": "`    ASSERT_SUCCESS(s_test_uri_decode_ok(allocator, \"ሴ\", \"ሴ\")); /* odd input should just pass through */\n    ASSERT_SUCCESS(s_test_uri_decode_ok(\n        allocator,\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\", /* long enough to resize output buffer */\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"));\n\n    /* these should fail */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/uri_test.c"
                },
                "region": {
                  "startLine": 777,
                  "startColumn": 8,
                  "endLine": 777,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    ASSERT_SUCCESS(s_test_uri_encode_param_case(\n        allocator,\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\",\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"));\n    ASSERT_SUCCESS(s_test_uri_encode_param_case(allocator, \"1234567890\", \"1234567890\"));\n    ASSERT_SUCCESS(s_test_uri_encode_param_case(allocator, \"_~.-\", \"_~.-\"));\n    ASSERT_SUCCESS(s_test_uri_encode_param_case(allocator, \"%^#! \", \"%25%5E%23%21%20\"));\n",
                    "rendered": {
                      "text": "    ASSERT_SUCCESS(s_test_uri_encode_param_case(\n        allocator,\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\",\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"));\n    ASSERT_SUCCESS(s_test_uri_encode_param_case(allocator, \"1234567890\", \"1234567890\"));\n    ASSERT_SUCCESS(s_test_uri_encode_param_case(allocator, \"_~.-\", \"_~.-\"));\n    ASSERT_SUCCESS(s_test_uri_encode_param_case(allocator, \"%^#! \", \"%25%5E%23%21%20\"));\n",
                      "markdown": "`    ASSERT_SUCCESS(s_test_uri_encode_param_case(\n        allocator,\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\",\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"));\n    ASSERT_SUCCESS(s_test_uri_encode_param_case(allocator, \"1234567890\", \"1234567890\"));\n    ASSERT_SUCCESS(s_test_uri_encode_param_case(allocator, \"_~.-\", \"_~.-\"));\n    ASSERT_SUCCESS(s_test_uri_encode_param_case(allocator, \"%^#! \", \"%25%5E%23%21%20\"));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/uri_test.c"
                },
                "region": {
                  "startLine": 776,
                  "startColumn": 8,
                  "endLine": 776,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\n    ASSERT_SUCCESS(s_test_uri_encode_param_case(\n        allocator,\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\",\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"));\n    ASSERT_SUCCESS(s_test_uri_encode_param_case(allocator, \"1234567890\", \"1234567890\"));\n    ASSERT_SUCCESS(s_test_uri_encode_param_case(allocator, \"_~.-\", \"_~.-\"));\n",
                    "rendered": {
                      "text": "\n    ASSERT_SUCCESS(s_test_uri_encode_param_case(\n        allocator,\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\",\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"));\n    ASSERT_SUCCESS(s_test_uri_encode_param_case(allocator, \"1234567890\", \"1234567890\"));\n    ASSERT_SUCCESS(s_test_uri_encode_param_case(allocator, \"_~.-\", \"_~.-\"));\n",
                      "markdown": "`\n    ASSERT_SUCCESS(s_test_uri_encode_param_case(\n        allocator,\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\",\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"));\n    ASSERT_SUCCESS(s_test_uri_encode_param_case(allocator, \"1234567890\", \"1234567890\"));\n    ASSERT_SUCCESS(s_test_uri_encode_param_case(allocator, \"_~.-\", \"_~.-\"));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/xml_parser_test.c"
                },
                "region": {
                  "startLine": 415,
                  "startColumn": 4,
                  "endLine": 415,
                  "endColumn": 120,
                  "snippet": {
                    "text": "    \"tuvwxyzabcdefghijklmnopqrstuvwxyz>\"\n    \"</\"\n    \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghij\"\n    \"klmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrst\"\n    \"uvwxyzabcdefghijklmnopqrstuvwxyz>\";\n\nint s_too_long(struct aws_xml_node *node, void *user_data) {\n",
                    "rendered": {
                      "text": "    \"tuvwxyzabcdefghijklmnopqrstuvwxyz>\"\n    \"</\"\n    \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghij\"\n    \"klmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrst\"\n    \"uvwxyzabcdefghijklmnopqrstuvwxyz>\";\n\nint s_too_long(struct aws_xml_node *node, void *user_data) {\n",
                      "markdown": "`    \"tuvwxyzabcdefghijklmnopqrstuvwxyz>\"\n    \"</\"\n    \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghij\"\n    \"klmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrst\"\n    \"uvwxyzabcdefghijklmnopqrstuvwxyz>\";\n\nint s_too_long(struct aws_xml_node *node, void *user_data) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/xml_parser_test.c"
                },
                "region": {
                  "startLine": 414,
                  "startColumn": 4,
                  "endLine": 414,
                  "endColumn": 120,
                  "snippet": {
                    "text": "    \"jklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrs\"\n    \"tuvwxyzabcdefghijklmnopqrstuvwxyz>\"\n    \"</\"\n    \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghij\"\n    \"klmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrst\"\n    \"uvwxyzabcdefghijklmnopqrstuvwxyz>\";\n\n",
                    "rendered": {
                      "text": "    \"jklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrs\"\n    \"tuvwxyzabcdefghijklmnopqrstuvwxyz>\"\n    \"</\"\n    \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghij\"\n    \"klmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrst\"\n    \"uvwxyzabcdefghijklmnopqrstuvwxyz>\";\n\n",
                      "markdown": "`    \"jklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrs\"\n    \"tuvwxyzabcdefghijklmnopqrstuvwxyz>\"\n    \"</\"\n    \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghij\"\n    \"klmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrst\"\n    \"uvwxyzabcdefghijklmnopqrstuvwxyz>\";\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/xml_parser_test.c"
                },
                "region": {
                  "startLine": 411,
                  "startColumn": 4,
                  "endLine": 411,
                  "endColumn": 120,
                  "snippet": {
                    "text": "    \" PUBLIC \\\"-//W3C//DTD XHTML 1.0 Strict//EN\\\"\\n\"\n    \"\\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\\\"> \"\n    \"<abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghi\"\n    \"jklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrs\"\n    \"tuvwxyzabcdefghijklmnopqrstuvwxyz>\"\n    \"</\"\n    \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghij\"\n",
                    "rendered": {
                      "text": "    \" PUBLIC \\\"-//W3C//DTD XHTML 1.0 Strict//EN\\\"\\n\"\n    \"\\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\\\"> \"\n    \"<abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghi\"\n    \"jklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrs\"\n    \"tuvwxyzabcdefghijklmnopqrstuvwxyz>\"\n    \"</\"\n    \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghij\"\n",
                      "markdown": "`    \" PUBLIC \\\"-//W3C//DTD XHTML 1.0 Strict//EN\\\"\\n\"\n    \"\\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\\\"> \"\n    \"<abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghi\"\n    \"jklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrs\"\n    \"tuvwxyzabcdefghijklmnopqrstuvwxyz>\"\n    \"</\"\n    \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghij\"\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/environment_test.c"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 19,
                  "endLine": 44,
                  "endColumn": 65,
                  "snippet": {
                    "text": "    return AWS_OP_SUCCESS;\n}\n\nAWS_TEST_CASE(test_environment_functions, s_test_environment_functions_fn)\n",
                    "rendered": {
                      "text": "    return AWS_OP_SUCCESS;\n}\n\nAWS_TEST_CASE(test_environment_functions, s_test_environment_functions_fn)\n",
                      "markdown": "`    return AWS_OP_SUCCESS;\n}\n\nAWS_TEST_CASE(test_environment_functions, s_test_environment_functions_fn)\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/environment_test.c"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 18,
                  "endLine": 16,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\nAWS_STATIC_STRING_FROM_LITERAL(s_test_value, \"SOME_VALUE\");\n\nstatic int s_test_environment_functions_fn(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n\n    struct aws_string *value;\n",
                    "rendered": {
                      "text": "\nAWS_STATIC_STRING_FROM_LITERAL(s_test_value, \"SOME_VALUE\");\n\nstatic int s_test_environment_functions_fn(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n\n    struct aws_string *value;\n",
                      "markdown": "`\nAWS_STATIC_STRING_FROM_LITERAL(s_test_value, \"SOME_VALUE\");\n\nstatic int s_test_environment_functions_fn(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n\n    struct aws_string *value;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/ring_buffer_test.c"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 11,
                  "endLine": 241,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        struct aws_linked_list_node *node = NULL;\n\n        if (!aws_linked_list_empty(&test_data->buffer_queue)) {\n            node = aws_linked_list_pop_front(&test_data->buffer_queue);\n        }\n\n        aws_mutex_unlock(&test_data->mutex);\n",
                    "rendered": {
                      "text": "        struct aws_linked_list_node *node = NULL;\n\n        if (!aws_linked_list_empty(&test_data->buffer_queue)) {\n            node = aws_linked_list_pop_front(&test_data->buffer_queue);\n        }\n\n        aws_mutex_unlock(&test_data->mutex);\n",
                      "markdown": "`        struct aws_linked_list_node *node = NULL;\n\n        if (!aws_linked_list_empty(&test_data->buffer_queue)) {\n            node = aws_linked_list_pop_front(&test_data->buffer_queue);\n        }\n\n        aws_mutex_unlock(&test_data->mutex);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/AWSCRTAndroidTestRunner/app/src/main/cpp/native-lib.cpp"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 28,
                  "endLine": 16,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        JNIEnv *env,\n        jobject /* this */,\n        jstring jni_name) {\n    const char *test_name = env->GetStringUTFChars(jni_name, nullptr);\n    __android_log_print(ANDROID_LOG_INFO, \"native-test\", \"RUNNING %s\", test_name);\n\n    test_fn_t *test_fn = (test_fn_t*)dlsym(RTLD_DEFAULT, test_name);\n",
                    "rendered": {
                      "text": "        JNIEnv *env,\n        jobject /* this */,\n        jstring jni_name) {\n    const char *test_name = env->GetStringUTFChars(jni_name, nullptr);\n    __android_log_print(ANDROID_LOG_INFO, \"native-test\", \"RUNNING %s\", test_name);\n\n    test_fn_t *test_fn = (test_fn_t*)dlsym(RTLD_DEFAULT, test_name);\n",
                      "markdown": "`        JNIEnv *env,\n        jobject /* this */,\n        jstring jni_name) {\n    const char *test_name = env->GetStringUTFChars(jni_name, nullptr);\n    __android_log_print(ANDROID_LOG_INFO, \"native-test\", \"RUNNING %s\", test_name);\n\n    test_fn_t *test_fn = (test_fn_t*)dlsym(RTLD_DEFAULT, test_name);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/AWSCRTAndroidTestRunner/gradlew"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 32,
                  "endLine": 159,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n# Escape application args\nsave () {\n    for i do printf %s\\\\n \"$i\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/' \\\\\\\\/\" ; done\n    echo \" \"\n}\nAPP_ARGS=$(save \"$@\")\n",
                    "rendered": {
                      "text": "\n# Escape application args\nsave () {\n    for i do printf %s\\\\n \"$i\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/' \\\\\\\\/\" ; done\n    echo \" \"\n}\nAPP_ARGS=$(save \"$@\")\n",
                      "markdown": "`\n# Escape application args\nsave () {\n    for i do printf %s\\\\n \"$i\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/' \\\\\\\\/\" ; done\n    echo \" \"\n}\nAPP_ARGS=$(save \"$@\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/AWSCRTAndroidTestRunner/gradlew"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 19,
                  "endLine": 5,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n",
                    "rendered": {
                      "text": "\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n",
                      "markdown": "`\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/AWSCRTAndroidTestRunner/gradlew.bat"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 4,
                  "endLine": 19,
                  "endColumn": 10,
                  "snippet": {
                    "text": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n",
                    "rendered": {
                      "text": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n",
                      "markdown": "`@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n`"
                    }
                  },
                  "sourceLanguage": "wincmdscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/AWSCRTAndroidTestRunner/gradlew.bat"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 20,
                  "endLine": 4,
                  "endColumn": 28,
                  "snippet": {
                    "text": "@if \"%DEBUG%\" == \"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n",
                    "rendered": {
                      "text": "@if \"%DEBUG%\" == \"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n",
                      "markdown": "`@if \"%DEBUG%\" == \"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n`"
                    }
                  },
                  "sourceLanguage": "wincmdscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/cmake/CPackConfig.cmake"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 15,
                  "endLine": 40,
                  "endColumn": 20,
                  "snippet": {
                    "text": "set(CPACK_RPM_PACKAGE_LICENSE \"ASL 2.0\")\nset(CPACK_RPM_PACKAGE_URL \"https://github.com/awslabs/aws-c-common\")\n\n# Configure the RPM filenames\nset(CPACK_RPM_FILE_NAME \"${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${CPACK_PACKAGE_RELEASE}.${CMAKE_SYSTEM_PROCESSOR}.rpm\")\nset(CPACK_RPM_Development_FILE_NAME \"${CPACK_RPM_Development_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${CPACK_PACKAGE_RELEASE}.${CMAKE_SYSTEM_PROCESSOR}.rpm\")\n\n",
                    "rendered": {
                      "text": "set(CPACK_RPM_PACKAGE_LICENSE \"ASL 2.0\")\nset(CPACK_RPM_PACKAGE_URL \"https://github.com/awslabs/aws-c-common\")\n\n# Configure the RPM filenames\nset(CPACK_RPM_FILE_NAME \"${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${CPACK_PACKAGE_RELEASE}.${CMAKE_SYSTEM_PROCESSOR}.rpm\")\nset(CPACK_RPM_Development_FILE_NAME \"${CPACK_RPM_Development_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${CPACK_PACKAGE_RELEASE}.${CMAKE_SYSTEM_PROCESSOR}.rpm\")\n\n",
                      "markdown": "`set(CPACK_RPM_PACKAGE_LICENSE \"ASL 2.0\")\nset(CPACK_RPM_PACKAGE_URL \"https://github.com/awslabs/aws-c-common\")\n\n# Configure the RPM filenames\nset(CPACK_RPM_FILE_NAME \"${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${CPACK_PACKAGE_RELEASE}.${CMAKE_SYSTEM_PROCESSOR}.rpm\")\nset(CPACK_RPM_Development_FILE_NAME \"${CPACK_RPM_Development_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${CPACK_PACKAGE_RELEASE}.${CMAKE_SYSTEM_PROCESSOR}.rpm\")\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/cmake/AwsFeatureTests.cmake"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 132,
                  "endLine": 10,
                  "endColumn": 138,
                  "snippet": {
                    "text": "option(USE_CPU_EXTENSIONS \"Whenever possible, use functions optimized for CPUs with specific extensions (ex: SSE, AVX).\" ON)\n\n# In the current (11/2/21) state of mingw64, the packaged gcc is not capable of emitting properly aligned avx2 instructions under certain circumstances.\n# This leads to crashes for windows builds using mingw64 when invoking the avx2-enabled versions of certain functions.  Until we can find a better\n# work-around, disable avx2 (and all other extensions) in mingw builds.\n#\n# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=54412\n",
                    "rendered": {
                      "text": "option(USE_CPU_EXTENSIONS \"Whenever possible, use functions optimized for CPUs with specific extensions (ex: SSE, AVX).\" ON)\n\n# In the current (11/2/21) state of mingw64, the packaged gcc is not capable of emitting properly aligned avx2 instructions under certain circumstances.\n# This leads to crashes for windows builds using mingw64 when invoking the avx2-enabled versions of certain functions.  Until we can find a better\n# work-around, disable avx2 (and all other extensions) in mingw builds.\n#\n# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=54412\n",
                      "markdown": "`option(USE_CPU_EXTENSIONS \"Whenever possible, use functions optimized for CPUs with specific extensions (ex: SSE, AVX).\" ON)\n\n# In the current (11/2/21) state of mingw64, the packaged gcc is not capable of emitting properly aligned avx2 instructions under certain circumstances.\n# This leads to crashes for windows builds using mingw64 when invoking the avx2-enabled versions of certain functions.  Until we can find a better\n# work-around, disable avx2 (and all other extensions) in mingw builds.\n#\n# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=54412\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/cmake/AwsThreadAffinity.cmake"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 68,
                  "endLine": 42,
                  "endColumn": 74,
                  "snippet": {
                    "text": "        return()\n    endif()\n\n    # If we got here, we expected thread affinity support but didn't find it.\n    # We still build with degraded NUMA performance, but show a warning.\n    message(WARNING \"No supported method for setting thread affinity\")\n    target_compile_definitions(${target} PRIVATE\n",
                    "rendered": {
                      "text": "        return()\n    endif()\n\n    # If we got here, we expected thread affinity support but didn't find it.\n    # We still build with degraded NUMA performance, but show a warning.\n    message(WARNING \"No supported method for setting thread affinity\")\n    target_compile_definitions(${target} PRIVATE\n",
                      "markdown": "`        return()\n    endif()\n\n    # If we got here, we expected thread affinity support but didn't find it.\n    # We still build with degraded NUMA performance, but show a warning.\n    message(WARNING \"No supported method for setting thread affinity\")\n    target_compile_definitions(${target} PRIVATE\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/cmake/AwsThreadName.cmake"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 29,
                  "endLine": 12,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    function(aws_set_thread_name_setter_method target)\n        if (APPLE)\n            # All Apple platforms we support have 1 arg version of the function.\n            # So skip compile time check here and instead check if its apple in\n            # the thread code.\n            return()\n        endif()\n",
                    "rendered": {
                      "text": "    function(aws_set_thread_name_setter_method target)\n        if (APPLE)\n            # All Apple platforms we support have 1 arg version of the function.\n            # So skip compile time check here and instead check if its apple in\n            # the thread code.\n            return()\n        endif()\n",
                      "markdown": "`    function(aws_set_thread_name_setter_method target)\n        if (APPLE)\n            # All Apple platforms we support have 1 arg version of the function.\n            # So skip compile time check here and instead check if its apple in\n            # the thread code.\n            return()\n        endif()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/cmake/AwsSIMD.cmake"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 1,
                  "endLine": 131,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\n# Adds compiler flags to the source and adds the source to target.\n# Unfortunately the flags have to be passed as strings. Predefined flags are\n# at the top of this file.\n# Usage: simd_append_source_and_features(target file1.c ${AWS_AVX512_FLAG} ${AWS_AVX2_FLAG} ...)\nfunction(simd_append_source_and_features target file)\n    set(CC_FLAGS \"\")\n",
                    "rendered": {
                      "text": "\n# Adds compiler flags to the source and adds the source to target.\n# Unfortunately the flags have to be passed as strings. Predefined flags are\n# at the top of this file.\n# Usage: simd_append_source_and_features(target file1.c ${AWS_AVX512_FLAG} ${AWS_AVX2_FLAG} ...)\nfunction(simd_append_source_and_features target file)\n    set(CC_FLAGS \"\")\n",
                      "markdown": "`\n# Adds compiler flags to the source and adds the source to target.\n# Unfortunately the flags have to be passed as strings. Predefined flags are\n# at the top of this file.\n# Usage: simd_append_source_and_features(target file1.c ${AWS_AVX512_FLAG} ${AWS_AVX2_FLAG} ...)\nfunction(simd_append_source_and_features target file)\n    set(CC_FLAGS \"\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/cmake/AwsSIMD.cmake"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 8,
                  "endLine": 131,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n# Adds compiler flags to the source and adds the source to target.\n# Unfortunately the flags have to be passed as strings. Predefined flags are\n# at the top of this file.\n# Usage: simd_append_source_and_features(target file1.c ${AWS_AVX512_FLAG} ${AWS_AVX2_FLAG} ...)\nfunction(simd_append_source_and_features target file)\n    set(CC_FLAGS \"\")\n",
                    "rendered": {
                      "text": "\n# Adds compiler flags to the source and adds the source to target.\n# Unfortunately the flags have to be passed as strings. Predefined flags are\n# at the top of this file.\n# Usage: simd_append_source_and_features(target file1.c ${AWS_AVX512_FLAG} ${AWS_AVX2_FLAG} ...)\nfunction(simd_append_source_and_features target file)\n    set(CC_FLAGS \"\")\n",
                      "markdown": "`\n# Adds compiler flags to the source and adds the source to target.\n# Unfortunately the flags have to be passed as strings. Predefined flags are\n# at the top of this file.\n# Usage: simd_append_source_and_features(target file1.c ${AWS_AVX512_FLAG} ${AWS_AVX2_FLAG} ...)\nfunction(simd_append_source_and_features target file)\n    set(CC_FLAGS \"\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/cmake/AwsSIMD.cmake"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 5,
                  "endLine": 127,
                  "endColumn": 10,
                  "snippet": {
                    "text": "endfunction(simd_add_source_avx)\n\n# The part where the definition is added to the compiler flags has been moved to config.h.in\n# see git history for more details.\n\n# Adds compiler flags to the source and adds the source to target.\n# Unfortunately the flags have to be passed as strings. Predefined flags are\n",
                    "rendered": {
                      "text": "endfunction(simd_add_source_avx)\n\n# The part where the definition is added to the compiler flags has been moved to config.h.in\n# see git history for more details.\n\n# Adds compiler flags to the source and adds the source to target.\n# Unfortunately the flags have to be passed as strings. Predefined flags are\n",
                      "markdown": "`endfunction(simd_add_source_avx)\n\n# The part where the definition is added to the compiler flags has been moved to config.h.in\n# see git history for more details.\n\n# Adds compiler flags to the source and adds the source to target.\n# Unfortunately the flags have to be passed as strings. Predefined flags are\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/cmake/AwsSIMD.cmake"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 5,
                  "endLine": 114,
                  "endColumn": 10,
                  "snippet": {
                    "text": "endif() # USE_CPU_EXTENSIONS\n\n# The part where the definition is added to the compiler flags has been moved to config.h.in\n# see git history for more details.\n\n# Adds AVX flags, if any, that are supported. These files will be built with\n# available avx intrinsics enabled.\n",
                    "rendered": {
                      "text": "endif() # USE_CPU_EXTENSIONS\n\n# The part where the definition is added to the compiler flags has been moved to config.h.in\n# see git history for more details.\n\n# Adds AVX flags, if any, that are supported. These files will be built with\n# available avx intrinsics enabled.\n",
                      "markdown": "`endif() # USE_CPU_EXTENSIONS\n\n# The part where the definition is added to the compiler flags has been moved to config.h.in\n# see git history for more details.\n\n# Adds AVX flags, if any, that are supported. These files will be built with\n# available avx intrinsics enabled.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/string.inl"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 44,
                  "endLine": 46,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    /* Knowing the actual length to check would require strlen(), which is\n     * a) linear time in the length of the string\n     * b) could already cause a memory violation for a non-zero-terminated string.\n     * But we know that a c-string must have at least one character, to store the null terminator\n     */\n    return str && AWS_MEM_IS_READABLE(str, 1);\n}\n",
                    "rendered": {
                      "text": "    /* Knowing the actual length to check would require strlen(), which is\n     * a) linear time in the length of the string\n     * b) could already cause a memory violation for a non-zero-terminated string.\n     * But we know that a c-string must have at least one character, to store the null terminator\n     */\n    return str && AWS_MEM_IS_READABLE(str, 1);\n}\n",
                      "markdown": "`    /* Knowing the actual length to check would require strlen(), which is\n     * a) linear time in the length of the string\n     * b) could already cause a memory violation for a non-zero-terminated string.\n     * But we know that a c-string must have at least one character, to store the null terminator\n     */\n    return str && AWS_MEM_IS_READABLE(str, 1);\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/string.inl"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 16,
                  "endLine": 44,
                  "endColumn": 22,
                  "snippet": {
                    "text": "AWS_STATIC_IMPL\nbool aws_c_string_is_valid(const char *str) {\n    /* Knowing the actual length to check would require strlen(), which is\n     * a) linear time in the length of the string\n     * b) could already cause a memory violation for a non-zero-terminated string.\n     * But we know that a c-string must have at least one character, to store the null terminator\n     */\n",
                    "rendered": {
                      "text": "AWS_STATIC_IMPL\nbool aws_c_string_is_valid(const char *str) {\n    /* Knowing the actual length to check would require strlen(), which is\n     * a) linear time in the length of the string\n     * b) could already cause a memory violation for a non-zero-terminated string.\n     * But we know that a c-string must have at least one character, to store the null terminator\n     */\n",
                      "markdown": "`AWS_STATIC_IMPL\nbool aws_c_string_is_valid(const char *str) {\n    /* Knowing the actual length to check would require strlen(), which is\n     * a) linear time in the length of the string\n     * b) could already cause a memory violation for a non-zero-terminated string.\n     * But we know that a c-string must have at least one character, to store the null terminator\n     */\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/string.inl"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 60,
                  "endLine": 31,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\n/**\n * Evaluates the set of properties that define the shape of all valid aws_string structures.\n * It is also a cheap check, in the sense it run in constant time (i.e., no loops or recursion).\n */\nAWS_STATIC_IMPL\nbool aws_string_is_valid(const struct aws_string *str) {\n",
                    "rendered": {
                      "text": "\n/**\n * Evaluates the set of properties that define the shape of all valid aws_string structures.\n * It is also a cheap check, in the sense it run in constant time (i.e., no loops or recursion).\n */\nAWS_STATIC_IMPL\nbool aws_string_is_valid(const struct aws_string *str) {\n",
                      "markdown": "`\n/**\n * Evaluates the set of properties that define the shape of all valid aws_string structures.\n * It is also a cheap check, in the sense it run in constant time (i.e., no loops or recursion).\n */\nAWS_STATIC_IMPL\nbool aws_string_is_valid(const struct aws_string *str) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/error.h"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 14,
                  "endLine": 198,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    AWS_ERROR_MALFORMED_INPUT_STRING,\n    AWS_ERROR_UNIMPLEMENTED,\n    AWS_ERROR_INVALID_STATE,\n    AWS_ERROR_ENVIRONMENT_GET,\n    AWS_ERROR_ENVIRONMENT_SET,\n    AWS_ERROR_ENVIRONMENT_UNSET,\n    AWS_ERROR_STREAM_UNSEEKABLE,\n",
                    "rendered": {
                      "text": "    AWS_ERROR_MALFORMED_INPUT_STRING,\n    AWS_ERROR_UNIMPLEMENTED,\n    AWS_ERROR_INVALID_STATE,\n    AWS_ERROR_ENVIRONMENT_GET,\n    AWS_ERROR_ENVIRONMENT_SET,\n    AWS_ERROR_ENVIRONMENT_UNSET,\n    AWS_ERROR_STREAM_UNSEEKABLE,\n",
                      "markdown": "`    AWS_ERROR_MALFORMED_INPUT_STRING,\n    AWS_ERROR_UNIMPLEMENTED,\n    AWS_ERROR_INVALID_STATE,\n    AWS_ERROR_ENVIRONMENT_GET,\n    AWS_ERROR_ENVIRONMENT_SET,\n    AWS_ERROR_ENVIRONMENT_UNSET,\n    AWS_ERROR_STREAM_UNSEEKABLE,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/ring_buffer.inl"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 61,
                  "endLine": 38,
                  "endColumn": 67,
                  "snippet": {
                    "text": "    uint8_t *tail = (uint8_t *)aws_atomic_load_ptr(&ring_buf->tail);\n    bool head_in_range = aws_ring_buffer_check_atomic_ptr(ring_buf, head);\n    bool tail_in_range = aws_ring_buffer_check_atomic_ptr(ring_buf, tail);\n    /* if head points-to the first element of the buffer then tail must too */\n    bool valid_head_tail = (head != ring_buf->allocation) || (tail == ring_buf->allocation);\n    return ring_buf && (ring_buf->allocation != NULL) && head_in_range && tail_in_range && valid_head_tail &&\n           (ring_buf->allocator != NULL);\n",
                    "rendered": {
                      "text": "    uint8_t *tail = (uint8_t *)aws_atomic_load_ptr(&ring_buf->tail);\n    bool head_in_range = aws_ring_buffer_check_atomic_ptr(ring_buf, head);\n    bool tail_in_range = aws_ring_buffer_check_atomic_ptr(ring_buf, tail);\n    /* if head points-to the first element of the buffer then tail must too */\n    bool valid_head_tail = (head != ring_buf->allocation) || (tail == ring_buf->allocation);\n    return ring_buf && (ring_buf->allocation != NULL) && head_in_range && tail_in_range && valid_head_tail &&\n           (ring_buf->allocator != NULL);\n",
                      "markdown": "`    uint8_t *tail = (uint8_t *)aws_atomic_load_ptr(&ring_buf->tail);\n    bool head_in_range = aws_ring_buffer_check_atomic_ptr(ring_buf, head);\n    bool tail_in_range = aws_ring_buffer_check_atomic_ptr(ring_buf, tail);\n    /* if head points-to the first element of the buffer then tail must too */\n    bool valid_head_tail = (head != ring_buf->allocation) || (tail == ring_buf->allocation);\n    return ring_buf && (ring_buf->allocation != NULL) && head_in_range && tail_in_range && valid_head_tail &&\n           (ring_buf->allocator != NULL);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/ring_buffer.inl"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 9,
                  "endLine": 38,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    uint8_t *tail = (uint8_t *)aws_atomic_load_ptr(&ring_buf->tail);\n    bool head_in_range = aws_ring_buffer_check_atomic_ptr(ring_buf, head);\n    bool tail_in_range = aws_ring_buffer_check_atomic_ptr(ring_buf, tail);\n    /* if head points-to the first element of the buffer then tail must too */\n    bool valid_head_tail = (head != ring_buf->allocation) || (tail == ring_buf->allocation);\n    return ring_buf && (ring_buf->allocation != NULL) && head_in_range && tail_in_range && valid_head_tail &&\n           (ring_buf->allocator != NULL);\n",
                    "rendered": {
                      "text": "    uint8_t *tail = (uint8_t *)aws_atomic_load_ptr(&ring_buf->tail);\n    bool head_in_range = aws_ring_buffer_check_atomic_ptr(ring_buf, head);\n    bool tail_in_range = aws_ring_buffer_check_atomic_ptr(ring_buf, tail);\n    /* if head points-to the first element of the buffer then tail must too */\n    bool valid_head_tail = (head != ring_buf->allocation) || (tail == ring_buf->allocation);\n    return ring_buf && (ring_buf->allocation != NULL) && head_in_range && tail_in_range && valid_head_tail &&\n           (ring_buf->allocator != NULL);\n",
                      "markdown": "`    uint8_t *tail = (uint8_t *)aws_atomic_load_ptr(&ring_buf->tail);\n    bool head_in_range = aws_ring_buffer_check_atomic_ptr(ring_buf, head);\n    bool tail_in_range = aws_ring_buffer_check_atomic_ptr(ring_buf, tail);\n    /* if head points-to the first element of the buffer then tail must too */\n    bool valid_head_tail = (head != ring_buf->allocation) || (tail == ring_buf->allocation);\n    return ring_buf && (ring_buf->allocation != NULL) && head_in_range && tail_in_range && valid_head_tail &&\n           (ring_buf->allocator != NULL);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/ring_buffer.inl"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 60,
                  "endLine": 31,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\n/**\n * Evaluates the set of properties that define the shape of all valid aws_ring_buffer structures.\n * It is also a cheap check, in the sense it run in constant time (i.e., no loops or recursion).\n */\nAWS_STATIC_IMPL bool aws_ring_buffer_is_valid(const struct aws_ring_buffer *ring_buf) {\n    uint8_t *head = (uint8_t *)aws_atomic_load_ptr(&ring_buf->head);\n",
                    "rendered": {
                      "text": "\n/**\n * Evaluates the set of properties that define the shape of all valid aws_ring_buffer structures.\n * It is also a cheap check, in the sense it run in constant time (i.e., no loops or recursion).\n */\nAWS_STATIC_IMPL bool aws_ring_buffer_is_valid(const struct aws_ring_buffer *ring_buf) {\n    uint8_t *head = (uint8_t *)aws_atomic_load_ptr(&ring_buf->head);\n",
                      "markdown": "`\n/**\n * Evaluates the set of properties that define the shape of all valid aws_ring_buffer structures.\n * It is also a cheap check, in the sense it run in constant time (i.e., no loops or recursion).\n */\nAWS_STATIC_IMPL bool aws_ring_buffer_is_valid(const struct aws_ring_buffer *ring_buf) {\n    uint8_t *head = (uint8_t *)aws_atomic_load_ptr(&ring_buf->head);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/ring_buffer.inl"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 10,
                  "endLine": 26,
                  "endColumn": 16,
                  "snippet": {
                    "text": "AWS_STATIC_IMPL bool aws_ring_buffer_is_empty(const struct aws_ring_buffer *ring_buf) {\n    uint8_t *head = (uint8_t *)aws_atomic_load_ptr(&ring_buf->head);\n    uint8_t *tail = (uint8_t *)aws_atomic_load_ptr(&ring_buf->tail);\n    return head == tail;\n}\n\n/**\n",
                    "rendered": {
                      "text": "AWS_STATIC_IMPL bool aws_ring_buffer_is_empty(const struct aws_ring_buffer *ring_buf) {\n    uint8_t *head = (uint8_t *)aws_atomic_load_ptr(&ring_buf->head);\n    uint8_t *tail = (uint8_t *)aws_atomic_load_ptr(&ring_buf->tail);\n    return head == tail;\n}\n\n/**\n",
                      "markdown": "`AWS_STATIC_IMPL bool aws_ring_buffer_is_empty(const struct aws_ring_buffer *ring_buf) {\n    uint8_t *head = (uint8_t *)aws_atomic_load_ptr(&ring_buf->head);\n    uint8_t *tail = (uint8_t *)aws_atomic_load_ptr(&ring_buf->tail);\n    return head == tail;\n}\n\n/**\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/system_info.h"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 18,
                  "endLine": 71,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * Returns the number of separate cpu groupings (multi-socket configurations or NUMA).\n */\nAWS_COMMON_API\nsize_t aws_system_environment_get_cpu_group_count(const struct aws_system_environment *env);\n\n/* Returns the OS this was built under */\nAWS_COMMON_API\n",
                    "rendered": {
                      "text": " * Returns the number of separate cpu groupings (multi-socket configurations or NUMA).\n */\nAWS_COMMON_API\nsize_t aws_system_environment_get_cpu_group_count(const struct aws_system_environment *env);\n\n/* Returns the OS this was built under */\nAWS_COMMON_API\n",
                      "markdown": "` * Returns the number of separate cpu groupings (multi-socket configurations or NUMA).\n */\nAWS_COMMON_API\nsize_t aws_system_environment_get_cpu_group_count(const struct aws_system_environment *env);\n\n/* Returns the OS this was built under */\nAWS_COMMON_API\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/system_info.h"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 18,
                  "endLine": 65,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * Returns the number of processors for the specified compute environment.\n */\nAWS_COMMON_API\nsize_t aws_system_environment_get_processor_count(struct aws_system_environment *env);\n\n/**\n * Returns the number of separate cpu groupings (multi-socket configurations or NUMA).\n",
                    "rendered": {
                      "text": " * Returns the number of processors for the specified compute environment.\n */\nAWS_COMMON_API\nsize_t aws_system_environment_get_processor_count(struct aws_system_environment *env);\n\n/**\n * Returns the number of separate cpu groupings (multi-socket configurations or NUMA).\n",
                      "markdown": "` * Returns the number of processors for the specified compute environment.\n */\nAWS_COMMON_API\nsize_t aws_system_environment_get_processor_count(struct aws_system_environment *env);\n\n/**\n * Returns the number of separate cpu groupings (multi-socket configurations or NUMA).\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/system_info.h"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 34,
                  "endLine": 59,
                  "endColumn": 49,
                  "snippet": {
                    "text": " * The return value may be empty and in that case no vendor was detected.\n */\nAWS_COMMON_API\nstruct aws_byte_cursor aws_system_environment_get_virtualization_product_name(const struct aws_system_environment *env);\n\n/**\n * Returns the number of processors for the specified compute environment.\n",
                    "rendered": {
                      "text": " * The return value may be empty and in that case no vendor was detected.\n */\nAWS_COMMON_API\nstruct aws_byte_cursor aws_system_environment_get_virtualization_product_name(const struct aws_system_environment *env);\n\n/**\n * Returns the number of processors for the specified compute environment.\n",
                      "markdown": "` * The return value may be empty and in that case no vendor was detected.\n */\nAWS_COMMON_API\nstruct aws_byte_cursor aws_system_environment_get_virtualization_product_name(const struct aws_system_environment *env);\n\n/**\n * Returns the number of processors for the specified compute environment.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/system_info.h"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 54,
                  "endLine": 54,
                  "endColumn": 102,
                  "snippet": {
                    "text": "struct aws_byte_cursor aws_system_environment_get_virtualization_vendor(const struct aws_system_environment *env);\n\n/**\n * Returns the product name for the specified compute environment. For example, the Amazon EC2 Instance type.\n *\n * The return value may be empty and in that case no vendor was detected.\n */\n",
                    "rendered": {
                      "text": "struct aws_byte_cursor aws_system_environment_get_virtualization_vendor(const struct aws_system_environment *env);\n\n/**\n * Returns the product name for the specified compute environment. For example, the Amazon EC2 Instance type.\n *\n * The return value may be empty and in that case no vendor was detected.\n */\n",
                      "markdown": "`struct aws_byte_cursor aws_system_environment_get_virtualization_vendor(const struct aws_system_environment *env);\n\n/**\n * Returns the product name for the specified compute environment. For example, the Amazon EC2 Instance type.\n *\n * The return value may be empty and in that case no vendor was detected.\n */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/system_info.h"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 34,
                  "endLine": 51,
                  "endColumn": 49,
                  "snippet": {
                    "text": " * The return value may be empty and in that case no vendor was detected.\n */\nAWS_COMMON_API\nstruct aws_byte_cursor aws_system_environment_get_virtualization_vendor(const struct aws_system_environment *env);\n\n/**\n * Returns the product name for the specified compute environment. For example, the Amazon EC2 Instance type.\n",
                    "rendered": {
                      "text": " * The return value may be empty and in that case no vendor was detected.\n */\nAWS_COMMON_API\nstruct aws_byte_cursor aws_system_environment_get_virtualization_vendor(const struct aws_system_environment *env);\n\n/**\n * Returns the product name for the specified compute environment. For example, the Amazon EC2 Instance type.\n",
                      "markdown": "` * The return value may be empty and in that case no vendor was detected.\n */\nAWS_COMMON_API\nstruct aws_byte_cursor aws_system_environment_get_virtualization_vendor(const struct aws_system_environment *env);\n\n/**\n * Returns the product name for the specified compute environment. For example, the Amazon EC2 Instance type.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/encoding.inl"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 59,
                  "endLine": 92,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\n/*\n * Extracts a 16 bit unsigned integer from buffer. Ensures conversion from\n * network byte order to host byte order. Assumes buffer is at least 2 bytes\n * long.\n */\nAWS_STATIC_IMPL uint16_t aws_read_u16(const uint8_t *buffer) {\n",
                    "rendered": {
                      "text": "\n/*\n * Extracts a 16 bit unsigned integer from buffer. Ensures conversion from\n * network byte order to host byte order. Assumes buffer is at least 2 bytes\n * long.\n */\nAWS_STATIC_IMPL uint16_t aws_read_u16(const uint8_t *buffer) {\n",
                      "markdown": "`\n/*\n * Extracts a 16 bit unsigned integer from buffer. Ensures conversion from\n * network byte order to host byte order. Assumes buffer is at least 2 bytes\n * long.\n */\nAWS_STATIC_IMPL uint16_t aws_read_u16(const uint8_t *buffer) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/encoding.inl"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 20,
                  "endLine": 82,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n/* Add a 16 bit unsigned integer to the buffer, ensuring network-byte order\n * return the new position in the buffer for the next operation.\n * Assumes buffer is at least 2 bytes long.\n */\nAWS_STATIC_IMPL void aws_write_u16(uint16_t value, uint8_t *buffer) {\n    value = aws_hton16(value);\n",
                    "rendered": {
                      "text": "\n/* Add a 16 bit unsigned integer to the buffer, ensuring network-byte order\n * return the new position in the buffer for the next operation.\n * Assumes buffer is at least 2 bytes long.\n */\nAWS_STATIC_IMPL void aws_write_u16(uint16_t value, uint8_t *buffer) {\n    value = aws_hton16(value);\n",
                      "markdown": "`\n/* Add a 16 bit unsigned integer to the buffer, ensuring network-byte order\n * return the new position in the buffer for the next operation.\n * Assumes buffer is at least 2 bytes long.\n */\nAWS_STATIC_IMPL void aws_write_u16(uint16_t value, uint8_t *buffer) {\n    value = aws_hton16(value);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/encoding.inl"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 59,
                  "endLine": 70,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\n/*\n * Extracts a 24 bit unsigned integer from buffer. Ensures conversion from\n * network byte order to host byte order. Assumes buffer is at least 3 bytes\n * long.\n */\nAWS_STATIC_IMPL uint32_t aws_read_u24(const uint8_t *buffer) {\n",
                    "rendered": {
                      "text": "\n/*\n * Extracts a 24 bit unsigned integer from buffer. Ensures conversion from\n * network byte order to host byte order. Assumes buffer is at least 3 bytes\n * long.\n */\nAWS_STATIC_IMPL uint32_t aws_read_u24(const uint8_t *buffer) {\n",
                      "markdown": "`\n/*\n * Extracts a 24 bit unsigned integer from buffer. Ensures conversion from\n * network byte order to host byte order. Assumes buffer is at least 3 bytes\n * long.\n */\nAWS_STATIC_IMPL uint32_t aws_read_u24(const uint8_t *buffer) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/encoding.inl"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 34,
                  "endLine": 61,
                  "endColumn": 38,
                  "snippet": {
                    "text": "/* Add a 24 bit unsigned integer to the buffer, ensuring network - byte order\n * return the new position in the buffer for the next operation.\n * Note, since this uses uint32_t for storage, the 3 least significant bytes\n * will be used. Assumes buffer is at least 3 bytes long.\n */\nAWS_STATIC_IMPL void aws_write_u24(uint32_t value, uint8_t *buffer) {\n    value = aws_hton32(value);\n",
                    "rendered": {
                      "text": "/* Add a 24 bit unsigned integer to the buffer, ensuring network - byte order\n * return the new position in the buffer for the next operation.\n * Note, since this uses uint32_t for storage, the 3 least significant bytes\n * will be used. Assumes buffer is at least 3 bytes long.\n */\nAWS_STATIC_IMPL void aws_write_u24(uint32_t value, uint8_t *buffer) {\n    value = aws_hton32(value);\n",
                      "markdown": "`/* Add a 24 bit unsigned integer to the buffer, ensuring network - byte order\n * return the new position in the buffer for the next operation.\n * Note, since this uses uint32_t for storage, the 3 least significant bytes\n * will be used. Assumes buffer is at least 3 bytes long.\n */\nAWS_STATIC_IMPL void aws_write_u24(uint32_t value, uint8_t *buffer) {\n    value = aws_hton32(value);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/encoding.inl"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 68,
                  "endLine": 48,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\n/*\n * Extracts a 32 bit unsigned integer from buffer. Ensures conversion from\n * network byte order to host byte order. Assumes the buffer size is at least 4\n * bytes.\n */\nAWS_STATIC_IMPL uint32_t aws_read_u32(const uint8_t *buffer) {\n",
                    "rendered": {
                      "text": "\n/*\n * Extracts a 32 bit unsigned integer from buffer. Ensures conversion from\n * network byte order to host byte order. Assumes the buffer size is at least 4\n * bytes.\n */\nAWS_STATIC_IMPL uint32_t aws_read_u32(const uint8_t *buffer) {\n",
                      "markdown": "`\n/*\n * Extracts a 32 bit unsigned integer from buffer. Ensures conversion from\n * network byte order to host byte order. Assumes the buffer size is at least 4\n * bytes.\n */\nAWS_STATIC_IMPL uint32_t aws_read_u32(const uint8_t *buffer) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/encoding.inl"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 29,
                  "endLine": 38,
                  "endColumn": 33,
                  "snippet": {
                    "text": "}\n\n/* Add a 32 bit unsigned integer to the buffer, ensuring network - byte order\n * Assumes the buffer size is at least 4 bytes.\n */\nAWS_STATIC_IMPL void aws_write_u32(uint32_t value, uint8_t *buffer) {\n    value = aws_hton32(value);\n",
                    "rendered": {
                      "text": "}\n\n/* Add a 32 bit unsigned integer to the buffer, ensuring network - byte order\n * Assumes the buffer size is at least 4 bytes.\n */\nAWS_STATIC_IMPL void aws_write_u32(uint32_t value, uint8_t *buffer) {\n    value = aws_hton32(value);\n",
                      "markdown": "`}\n\n/* Add a 32 bit unsigned integer to the buffer, ensuring network - byte order\n * Assumes the buffer size is at least 4 bytes.\n */\nAWS_STATIC_IMPL void aws_write_u32(uint32_t value, uint8_t *buffer) {\n    value = aws_hton32(value);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/encoding.inl"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 64,
                  "endLine": 27,
                  "endColumn": 68,
                  "snippet": {
                    "text": "\n/*\n * Extracts a 64 bit unsigned integer from buffer. Ensures conversion from\n * network byte order to host byte order. Assumes buffer size is at least 8\n * bytes.\n */\nAWS_STATIC_IMPL uint64_t aws_read_u64(const uint8_t *buffer) {\n",
                    "rendered": {
                      "text": "\n/*\n * Extracts a 64 bit unsigned integer from buffer. Ensures conversion from\n * network byte order to host byte order. Assumes buffer size is at least 8\n * bytes.\n */\nAWS_STATIC_IMPL uint64_t aws_read_u64(const uint8_t *buffer) {\n",
                      "markdown": "`\n/*\n * Extracts a 64 bit unsigned integer from buffer. Ensures conversion from\n * network byte order to host byte order. Assumes buffer size is at least 8\n * bytes.\n */\nAWS_STATIC_IMPL uint64_t aws_read_u64(const uint8_t *buffer) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/encoding.inl"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 29,
                  "endLine": 17,
                  "endColumn": 33,
                  "snippet": {
                    "text": "AWS_EXTERN_C_BEGIN\n\n/* Add a 64 bit unsigned integer to the buffer, ensuring network - byte order\n * Assumes the buffer size is at least 8 bytes.\n */\nAWS_STATIC_IMPL void aws_write_u64(uint64_t value, uint8_t *buffer) {\n    value = aws_hton64(value);\n",
                    "rendered": {
                      "text": "AWS_EXTERN_C_BEGIN\n\n/* Add a 64 bit unsigned integer to the buffer, ensuring network - byte order\n * Assumes the buffer size is at least 8 bytes.\n */\nAWS_STATIC_IMPL void aws_write_u64(uint64_t value, uint8_t *buffer) {\n    value = aws_hton64(value);\n",
                      "markdown": "`AWS_EXTERN_C_BEGIN\n\n/* Add a 64 bit unsigned integer to the buffer, ensuring network - byte order\n * Assumes the buffer size is at least 8 bytes.\n */\nAWS_STATIC_IMPL void aws_write_u64(uint64_t value, uint8_t *buffer) {\n    value = aws_hton64(value);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/testing/aws_test_harness.h"
                },
                "region": {
                  "startLine": 304,
                  "startColumn": 39,
                  "endLine": 304,
                  "endColumn": 43,
                  "snippet": {
                    "text": "                 \\\n                        fprintf(                                                                                       \\\n                            AWS_TESTING_REPORT_FD,                                                                     \\\n                            \"%sMismatch at byte[%zu]: 0x%02X != 0x%02X: \",                                             \\\n                            FAIL_PREFIX,                                                                               \\\n                            assert_i,                                                                ",
                    "rendered": {
                      "text": "                 \\\n                        fprintf(                                                                                       \\\n                            AWS_TESTING_REPORT_FD,                                                                     \\\n                            \"%sMismatch at byte[%zu]: 0x%02X != 0x%02X: \",                                             \\\n                            FAIL_PREFIX,                                                                               \\\n                            assert_i,                                                                ",
                      "markdown": "`                 \\\n                        fprintf(                                                                                       \\\n                            AWS_TESTING_REPORT_FD,                                                                     \\\n                            \"%sMismatch at byte[%zu]: 0x%02X != 0x%02X: \",                                             \\\n                            FAIL_PREFIX,                                                                               \\\n                            assert_i,                                                                `"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/testing/aws_test_harness.h"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 37,
                  "endLine": 153,
                  "endColumn": 41,
                  "snippet": {
                    "text": "                   \\\n            if (!PRINT_FAIL_INTERNAL0(__VA_ARGS__)) {                                                                  \\\n                PRINT_FAIL_INTERNAL0(                                                                                  \\\n                    \"Expected failure at %s; got return value %d with last error %d\\n\",                                \\\n                    #condition,                                                                                        \\\n                    assert_rv,                                                                     ",
                    "rendered": {
                      "text": "                   \\\n            if (!PRINT_FAIL_INTERNAL0(__VA_ARGS__)) {                                                                  \\\n                PRINT_FAIL_INTERNAL0(                                                                                  \\\n                    \"Expected failure at %s; got return value %d with last error %d\\n\",                                \\\n                    #condition,                                                                                        \\\n                    assert_rv,                                                                     ",
                      "markdown": "`                   \\\n            if (!PRINT_FAIL_INTERNAL0(__VA_ARGS__)) {                                                                  \\\n                PRINT_FAIL_INTERNAL0(                                                                                  \\\n                    \"Expected failure at %s; got return value %d with last error %d\\n\",                                \\\n                    #condition,                                                                                        \\\n                    assert_rv,                                                                     `"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/testing/aws_test_harness.h"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 37,
                  "endLine": 138,
                  "endColumn": 41,
                  "snippet": {
                    "text": "                   \\\n            if (!PRINT_FAIL_INTERNAL0(__VA_ARGS__)) {                                                                  \\\n                PRINT_FAIL_INTERNAL0(                                                                                  \\\n                    \"Expected success at %s; got return value %d with last error %d\\n\",                                \\\n                    #condition,                                                                                        \\\n                    assert_rv,                                                                     ",
                    "rendered": {
                      "text": "                   \\\n            if (!PRINT_FAIL_INTERNAL0(__VA_ARGS__)) {                                                                  \\\n                PRINT_FAIL_INTERNAL0(                                                                                  \\\n                    \"Expected success at %s; got return value %d with last error %d\\n\",                                \\\n                    #condition,                                                                                        \\\n                    assert_rv,                                                                     ",
                      "markdown": "`                   \\\n            if (!PRINT_FAIL_INTERNAL0(__VA_ARGS__)) {                                                                  \\\n                PRINT_FAIL_INTERNAL0(                                                                                  \\\n                    \"Expected success at %s; got return value %d with last error %d\\n\",                                \\\n                    #condition,                                                                                        \\\n                    assert_rv,                                                                     `"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/stale_issue.yml"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 235,
                  "endLine": 21,
                  "endColumn": 243,
                  "snippet": {
                    "text": "hat this is still a problem, please feel free to open a new one.\n        stale-issue-message: Greetings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the last update on this, and in the absence of more information, we will be closing this issue soon. If you find that this is still a problem, please feel free to provide a comment or add an upvote to prevent automatic closure, or if the issue is already closed, please feel free to open a new one.\n        stale-pr-",
                    "rendered": {
                      "text": "hat this is still a problem, please feel free to open a new one.\n        stale-issue-message: Greetings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the last update on this, and in the absence of more information, we will be closing this issue soon. If you find that this is still a problem, please feel free to provide a comment or add an upvote to prevent automatic closure, or if the issue is already closed, please feel free to open a new one.\n        stale-pr-",
                      "markdown": "`hat this is still a problem, please feel free to open a new one.\n        stale-issue-message: Greetings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the last update on this, and in the absence of more information, we will be closing this issue soon. If you find that this is still a problem, please feel free to provide a comment or add an upvote to prevent automatic closure, or if the issue is already closed, please feel free to open a new one.\n        stale-pr-`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/stale_issue.yml"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 334,
                  "endLine": 21,
                  "endColumn": 340,
                  "snippet": {
                    "text": "ings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the last update on this, and in the absence of more information, we will be closing this issue soon. If you find that this is still a problem, please feel free to provide a comment or add an upvote to prevent automatic closure, or if the issue is already closed, please feel free to open a new one.\n        stale-pr-message: Greetings! It looks like this PR hasn’t been active in longer than a week, add a comment",
                    "rendered": {
                      "text": "ings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the last update on this, and in the absence of more information, we will be closing this issue soon. If you find that this is still a problem, please feel free to provide a comment or add an upvote to prevent automatic closure, or if the issue is already closed, please feel free to open a new one.\n        stale-pr-message: Greetings! It looks like this PR hasn’t been active in longer than a week, add a comment",
                      "markdown": "`ings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the last update on this, and in the absence of more information, we will be closing this issue soon. If you find that this is still a problem, please feel free to provide a comment or add an upvote to prevent automatic closure, or if the issue is already closed, please feel free to open a new one.\n        stale-pr-message: Greetings! It looks like this PR hasn’t been active in longer than a week, add a comment`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/stale_issue.yml"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 232,
                  "endLine": 20,
                  "endColumn": 238,
                  "snippet": {
                    "text": "ty string will cause the automation to skip\n        # that category\n        ancient-issue-message: Greetings! Sorry to say but this is a very old issue that is probably not getting as much attention as it deservers. We encourage you to check if this is still an issue in the latest release and if you find that this is still a problem, please feel free to open a new one.\n        stale-issue-message: Greetings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the las",
                    "rendered": {
                      "text": "ty string will cause the automation to skip\n        # that category\n        ancient-issue-message: Greetings! Sorry to say but this is a very old issue that is probably not getting as much attention as it deservers. We encourage you to check if this is still an issue in the latest release and if you find that this is still a problem, please feel free to open a new one.\n        stale-issue-message: Greetings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the las",
                      "markdown": "`ty string will cause the automation to skip\n        # that category\n        ancient-issue-message: Greetings! Sorry to say but this is a very old issue that is probably not getting as much attention as it deservers. We encourage you to check if this is still an issue in the latest release and if you find that this is still a problem, please feel free to open a new one.\n        stale-issue-message: Greetings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the las`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 31,
                  "endLine": 249,
                  "endColumn": 59,
                  "snippet": {
                    "text": "      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }} --target=${{matrix.arch}}\n\n  linux-debug:\n    runs-on: ubuntu-20.04 # latest\n",
                    "rendered": {
                      "text": "      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }} --target=${{matrix.arch}}\n\n  linux-debug:\n    runs-on: ubuntu-20.04 # latest\n",
                      "markdown": "`      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }} --target=${{matrix.arch}}\n\n  linux-debug:\n    runs-on: ubuntu-20.04 # latest\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 40,
                  "endLine": 147,
                  "endColumn": 68,
                  "snippet": {
                    "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')\"\n        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --target windows-${{ matrix.arch }} --compiler msvc-14\n\n  windows-shared-libs:\n    runs-on: windows-2022 # latest\n",
                    "rendered": {
                      "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')\"\n        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --target windows-${{ matrix.arch }} --compiler msvc-14\n\n  windows-shared-libs:\n    runs-on: windows-2022 # latest\n",
                      "markdown": "`    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')\"\n        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --target windows-${{ matrix.arch }} --compiler msvc-14\n\n  windows-shared-libs:\n    runs-on: windows-2022 # latest\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 40,
                  "endLine": 136,
                  "endColumn": 68,
                  "snippet": {
                    "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')\"\n        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --target windows-${{ matrix.arch }} --compiler msvc-15\n\n  windows-vc14:\n    runs-on: windows-2019 # windows-2019 is last env with Visual Studio 2015 (v14.0)\n",
                    "rendered": {
                      "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')\"\n        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --target windows-${{ matrix.arch }} --compiler msvc-15\n\n  windows-vc14:\n    runs-on: windows-2019 # windows-2019 is last env with Visual Studio 2015 (v14.0)\n",
                      "markdown": "`    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')\"\n        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --target windows-${{ matrix.arch }} --compiler msvc-15\n\n  windows-vc14:\n    runs-on: windows-2019 # windows-2019 is last env with Visual Studio 2015 (v14.0)\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 40,
                  "endLine": 125,
                  "endColumn": 68,
                  "snippet": {
                    "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')\"\n        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --target windows-${{ matrix.arch }} --compiler msvc-16\n\n  windows-vc15:\n    runs-on: windows-2019 # windows-2019 is last env with Visual Studio 2017 (v15.0)\n",
                    "rendered": {
                      "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')\"\n        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --target windows-${{ matrix.arch }} --compiler msvc-16\n\n  windows-vc15:\n    runs-on: windows-2019 # windows-2019 is last env with Visual Studio 2017 (v15.0)\n",
                      "markdown": "`    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')\"\n        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --target windows-${{ matrix.arch }} --compiler msvc-16\n\n  windows-vc15:\n    runs-on: windows-2019 # windows-2019 is last env with Visual Studio 2017 (v15.0)\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 16,
                  "endLine": 214,
                  "snippet": {
                    "text": "        with:\n          operating_system: openbsd\n          version: '7.2'\n          shell: bash\n          run: |\n            sudo pkg_add py3-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz', 'builder')\"\n            chmod a+x builder\n",
                    "rendered": {
                      "text": "        with:\n          operating_system: openbsd\n          version: '7.2'\n          shell: bash\n          run: |\n            sudo pkg_add py3-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz', 'builder')\"\n            chmod a+x builder\n",
                      "markdown": "`        with:\n          operating_system: openbsd\n          version: '7.2'\n          shell: bash\n          run: |\n            sudo pkg_add py3-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz', 'builder')\"\n            chmod a+x builder\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 273,
                  "startColumn": 7,
                  "endLine": 273,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }} --config Debug\n",
                    "rendered": {
                      "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }} --config Debug\n",
                      "markdown": "`    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }} --config Debug\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 120,
                  "endLine": 256,
                  "endColumn": 127,
                  "snippet": {
                    "text": "    steps:\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --config Debug\n\n  windows-debug:\n",
                    "rendered": {
                      "text": "    steps:\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --config Debug\n\n  windows-debug:\n",
                      "markdown": "`    steps:\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --config Debug\n\n  windows-debug:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 14,
                  "endLine": 256,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    steps:\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --config Debug\n\n  windows-debug:\n",
                    "rendered": {
                      "text": "    steps:\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --config Debug\n\n  windows-debug:\n",
                      "markdown": "`    steps:\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --config Debug\n\n  windows-debug:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 248,
                  "startColumn": 7,
                  "endLine": 248,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }} --target=${{matrix.arch}}\n\n  linux-debug:\n",
                    "rendered": {
                      "text": "    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }} --target=${{matrix.arch}}\n\n  linux-debug:\n",
                      "markdown": "`    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }} --target=${{matrix.arch}}\n\n  linux-debug:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 11,
                  "endLine": 234,
                  "endColumn": 18,
                  "snippet": {
                    "text": "          run: |\n            sudo pkg install -y python3 devel/py-pip net/py-urllib3 cmake\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz', 'builder')\"\n            chmod a+x builder\n            ./builder build -p ${{ env.PACKAGE_NAME }}\n\n  cross_compile:\n",
                    "rendered": {
                      "text": "          run: |\n            sudo pkg install -y python3 devel/py-pip net/py-urllib3 cmake\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz', 'builder')\"\n            chmod a+x builder\n            ./builder build -p ${{ env.PACKAGE_NAME }}\n\n  cross_compile:\n",
                      "markdown": "`          run: |\n            sudo pkg install -y python3 devel/py-pip net/py-urllib3 cmake\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz', 'builder')\"\n            chmod a+x builder\n            ./builder build -p ${{ env.PACKAGE_NAME }}\n\n  cross_compile:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 11,
                  "endLine": 217,
                  "endColumn": 18,
                  "snippet": {
                    "text": "          run: |\n            sudo pkg_add py3-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz', 'builder')\"\n            chmod a+x builder\n            ./builder build -p ${{ env.PACKAGE_NAME }}\n\n  freebsd:\n",
                    "rendered": {
                      "text": "          run: |\n            sudo pkg_add py3-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz', 'builder')\"\n            chmod a+x builder\n            ./builder build -p ${{ env.PACKAGE_NAME }}\n\n  freebsd:\n",
                      "markdown": "`          run: |\n            sudo pkg_add py3-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz', 'builder')\"\n            chmod a+x builder\n            ./builder build -p ${{ env.PACKAGE_NAME }}\n\n  freebsd:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 16,
                  "endLine": 214,
                  "snippet": {
                    "text": "        with:\n          operating_system: openbsd\n          version: '7.2'\n          shell: bash\n          run: |\n            sudo pkg_add py3-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz', 'builder')\"\n            chmod a+x builder\n",
                    "rendered": {
                      "text": "        with:\n          operating_system: openbsd\n          version: '7.2'\n          shell: bash\n          run: |\n            sudo pkg_add py3-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz', 'builder')\"\n            chmod a+x builder\n",
                      "markdown": "`        with:\n          operating_system: openbsd\n          version: '7.2'\n          shell: bash\n          run: |\n            sudo pkg_add py3-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz', 'builder')\"\n            chmod a+x builder\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 7,
                  "endLine": 201,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DUSE_CPU_EXTENSIONS=OFF\n\n  openbsd:\n",
                    "rendered": {
                      "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DUSE_CPU_EXTENSIONS=OFF\n\n  openbsd:\n",
                      "markdown": "`    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DUSE_CPU_EXTENSIONS=OFF\n\n  openbsd:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 7,
                  "endLine": 192,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }}\n\n  macos-no-cpu-extensions:\n",
                    "rendered": {
                      "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }}\n\n  macos-no-cpu-extensions:\n",
                      "markdown": "`    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }}\n\n  macos-no-cpu-extensions:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 7,
                  "endLine": 183,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }}\n\n  macos:\n",
                    "rendered": {
                      "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }}\n\n  macos:\n",
                      "markdown": "`    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }}\n\n  macos:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 48,
                  "endLine": 139,
                  "endColumn": 53,
                  "snippet": {
                    "text": "        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --target windows-${{ matrix.arch }} --compiler msvc-15\n\n  windows-vc14:\n    runs-on: windows-2019 # windows-2019 is last env with Visual Studio 2015 (v14.0)\n    strategy:\n      matrix:\n        arch: [x86, x64]\n",
                    "rendered": {
                      "text": "        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --target windows-${{ matrix.arch }} --compiler msvc-15\n\n  windows-vc14:\n    runs-on: windows-2019 # windows-2019 is last env with Visual Studio 2015 (v14.0)\n    strategy:\n      matrix:\n        arch: [x86, x64]\n",
                      "markdown": "`        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --target windows-${{ matrix.arch }} --compiler msvc-15\n\n  windows-vc14:\n    runs-on: windows-2019 # windows-2019 is last env with Visual Studio 2015 (v14.0)\n    strategy:\n      matrix:\n        arch: [x86, x64]\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 48,
                  "endLine": 128,
                  "endColumn": 53,
                  "snippet": {
                    "text": "        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --target windows-${{ matrix.arch }} --compiler msvc-16\n\n  windows-vc15:\n    runs-on: windows-2019 # windows-2019 is last env with Visual Studio 2017 (v15.0)\n    strategy:\n      matrix:\n        arch: [x86, x64]\n",
                    "rendered": {
                      "text": "        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --target windows-${{ matrix.arch }} --compiler msvc-16\n\n  windows-vc15:\n    runs-on: windows-2019 # windows-2019 is last env with Visual Studio 2017 (v15.0)\n    strategy:\n      matrix:\n        arch: [x86, x64]\n",
                      "markdown": "`        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --target windows-${{ matrix.arch }} --compiler msvc-16\n\n  windows-vc15:\n    runs-on: windows-2019 # windows-2019 is last env with Visual Studio 2017 (v15.0)\n    strategy:\n      matrix:\n        arch: [x86, x64]\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 120,
                  "endLine": 105,
                  "endColumn": 127,
                  "snippet": {
                    "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DUSE_CPU_EXTENSIONS=OFF\n\n  windows:\n",
                    "rendered": {
                      "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DUSE_CPU_EXTENSIONS=OFF\n\n  windows:\n",
                      "markdown": "`        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DUSE_CPU_EXTENSIONS=OFF\n\n  windows:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 14,
                  "endLine": 105,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DUSE_CPU_EXTENSIONS=OFF\n\n  windows:\n",
                    "rendered": {
                      "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DUSE_CPU_EXTENSIONS=OFF\n\n  windows:\n",
                      "markdown": "`        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DUSE_CPU_EXTENSIONS=OFF\n\n  windows:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 120,
                  "endLine": 96,
                  "endColumn": 127,
                  "snippet": {
                    "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  linux-no-cpu-extensions:\n",
                    "rendered": {
                      "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  linux-no-cpu-extensions:\n",
                      "markdown": "`        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  linux-no-cpu-extensions:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 14,
                  "endLine": 96,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  linux-no-cpu-extensions:\n",
                    "rendered": {
                      "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  linux-no-cpu-extensions:\n",
                      "markdown": "`        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  linux-no-cpu-extensions:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 122,
                  "endLine": 87,
                  "endColumn": 129,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=clang-11 --cmake-extra=-DENABLE_SANITIZERS=ON --cmake-extra=-DSANITIZERS=\"${{ matrix.sanitizers }}\"\n\n  linux-shared-libs:\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=clang-11 --cmake-extra=-DENABLE_SANITIZERS=ON --cmake-extra=-DSANITIZERS=\"${{ matrix.sanitizers }}\"\n\n  linux-shared-libs:\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=clang-11 --cmake-extra=-DENABLE_SANITIZERS=ON --cmake-extra=-DSANITIZERS=\"${{ matrix.sanitizers }}\"\n\n  linux-shared-libs:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 16,
                  "endLine": 87,
                  "endColumn": 20,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=clang-11 --cmake-extra=-DENABLE_SANITIZERS=ON --cmake-extra=-DSANITIZERS=\"${{ matrix.sanitizers }}\"\n\n  linux-shared-libs:\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=clang-11 --cmake-extra=-DENABLE_SANITIZERS=ON --cmake-extra=-DSANITIZERS=\"${{ matrix.sanitizers }}\"\n\n  linux-shared-libs:\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=clang-11 --cmake-extra=-DENABLE_SANITIZERS=ON --cmake-extra=-DSANITIZERS=\"${{ matrix.sanitizers }}\"\n\n  linux-shared-libs:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 122,
                  "endLine": 75,
                  "endColumn": 129,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build downstream -p ${{ env.PACKAGE_NAME }}\n\n  clang-sanitizers:\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build downstream -p ${{ env.PACKAGE_NAME }}\n\n  clang-sanitizers:\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build downstream -p ${{ env.PACKAGE_NAME }}\n\n  clang-sanitizers:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 16,
                  "endLine": 75,
                  "endColumn": 20,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build downstream -p ${{ env.PACKAGE_NAME }}\n\n  clang-sanitizers:\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build downstream -p ${{ env.PACKAGE_NAME }}\n\n  clang-sanitizers:\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build downstream -p ${{ env.PACKAGE_NAME }}\n\n  clang-sanitizers:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 122,
                  "endLine": 64,
                  "endColumn": 129,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }}\n\n  # Test downstream repos.\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }}\n\n  # Test downstream repos.\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }}\n\n  # Test downstream repos.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 16,
                  "endLine": 64,
                  "endColumn": 20,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }}\n\n  # Test downstream repos.\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }}\n\n  # Test downstream repos.\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }}\n\n  # Test downstream repos.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 7,
                  "endLine": 40,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n  linux-compiler-compat:\n",
                    "rendered": {
                      "text": "    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n  linux-compiler-compat:\n",
                      "markdown": "`    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n  linux-compiler-compat:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 120,
                  "endLine": 39,
                  "endColumn": 127,
                  "snippet": {
                    "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n",
                    "rendered": {
                      "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n",
                      "markdown": "`        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 14,
                  "endLine": 39,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n",
                    "rendered": {
                      "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n",
                      "markdown": "`        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/codecov.yml"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 9,
                  "endLine": 24,
                  "endColumn": 16,
                  "snippet": {
                    "text": "      - name: Build ${{ env.PACKAGE_NAME }} + consumers\n        run: |\n          python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n          chmod a+x builder\n          ./builder build -p ${{ env.PACKAGE_NAME }} --compiler=gcc-9 --coverage --coverage-exclude=source/external/\n",
                    "rendered": {
                      "text": "      - name: Build ${{ env.PACKAGE_NAME }} + consumers\n        run: |\n          python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n          chmod a+x builder\n          ./builder build -p ${{ env.PACKAGE_NAME }} --compiler=gcc-9 --coverage --coverage-exclude=source/external/\n",
                      "markdown": "`      - name: Build ${{ env.PACKAGE_NAME }} + consumers\n        run: |\n          python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n          chmod a+x builder\n          ./builder build -p ${{ env.PACKAGE_NAME }} --compiler=gcc-9 --coverage --coverage-exclude=source/external/\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/workflows/clang-tidy.yml"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 7,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    - name: clang-tidy lint\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('https://d19elf31gohf1l.cloudfront.net/LATEST/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder clang-tidy --project=aws-c-common\n",
                    "rendered": {
                      "text": "    - name: clang-tidy lint\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('https://d19elf31gohf1l.cloudfront.net/LATEST/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder clang-tidy --project=aws-c-common\n",
                      "markdown": "`    - name: clang-tidy lint\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('https://d19elf31gohf1l.cloudfront.net/LATEST/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder clang-tidy --project=aws-c-common\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/scripts/latest_submodules.py"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 18,
                  "endLine": 62,
                  "endColumn": 60,
                  "snippet": {
                    "text": "\n    Each item looks like:\n    {\n        'commit': 'e18f041a0c8d17189f2eae2a32f16e0a7a3f0f1c',\n        'version': 'v0.5.18'\n        'num_tuple': (0,5,18),\n    }\n",
                    "rendered": {
                      "text": "\n    Each item looks like:\n    {\n        'commit': 'e18f041a0c8d17189f2eae2a32f16e0a7a3f0f1c',\n        'version': 'v0.5.18'\n        'num_tuple': (0,5,18),\n    }\n",
                      "markdown": "`\n    Each item looks like:\n    {\n        'commit': 'e18f041a0c8d17189f2eae2a32f16e0a7a3f0f1c',\n        'version': 'v0.5.18'\n        'num_tuple': (0,5,18),\n    }\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/scripts/latest_submodules.py"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 34,
                  "endLine": 140,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\n        # The only time we don't want to sync to the latest release is:\n        # The submodule is at some commit beyond the latest release,\n        # and the CRT team doesn't control this repo so can't just cut a new release\n        if sync_from != sync_to and current_tag is None:\n            if name in ['aws-lc', 's2n', 's2n-tls']:\n                # must fetch tags before we can check their ancestry\n",
                    "rendered": {
                      "text": "\n        # The only time we don't want to sync to the latest release is:\n        # The submodule is at some commit beyond the latest release,\n        # and the CRT team doesn't control this repo so can't just cut a new release\n        if sync_from != sync_to and current_tag is None:\n            if name in ['aws-lc', 's2n', 's2n-tls']:\n                # must fetch tags before we can check their ancestry\n",
                      "markdown": "`\n        # The only time we don't want to sync to the latest release is:\n        # The submodule is at some commit beyond the latest release,\n        # and the CRT team doesn't control this repo so can't just cut a new release\n        if sync_from != sync_to and current_tag is None:\n            if name in ['aws-lc', 's2n', 's2n-tls']:\n                # must fetch tags before we can check their ancestry\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/scripts/latest_submodules.py"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 26,
                  "endLine": 139,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        sync_to = latest_tag['version']\n\n        # The only time we don't want to sync to the latest release is:\n        # The submodule is at some commit beyond the latest release,\n        # and the CRT team doesn't control this repo so can't just cut a new release\n        if sync_from != sync_to and current_tag is None:\n            if name in ['aws-lc', 's2n', 's2n-tls']:\n",
                    "rendered": {
                      "text": "        sync_to = latest_tag['version']\n\n        # The only time we don't want to sync to the latest release is:\n        # The submodule is at some commit beyond the latest release,\n        # and the CRT team doesn't control this repo so can't just cut a new release\n        if sync_from != sync_to and current_tag is None:\n            if name in ['aws-lc', 's2n', 's2n-tls']:\n",
                      "markdown": "`        sync_to = latest_tag['version']\n\n        # The only time we don't want to sync to the latest release is:\n        # The submodule is at some commit beyond the latest release,\n        # and the CRT team doesn't control this repo so can't just cut a new release\n        if sync_from != sync_to and current_tag is None:\n            if name in ['aws-lc', 's2n', 's2n-tls']:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/scripts/latest_submodules.py"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 66,
                  "endLine": 140,
                  "endColumn": 71,
                  "snippet": {
                    "text": "\n        # The only time we don't want to sync to the latest release is:\n        # The submodule is at some commit beyond the latest release,\n        # and the CRT team doesn't control this repo so can't just cut a new release\n        if sync_from != sync_to and current_tag is None:\n            if name in ['aws-lc', 's2n', 's2n-tls']:\n                # must fetch tags before we can check their ancestry\n",
                    "rendered": {
                      "text": "\n        # The only time we don't want to sync to the latest release is:\n        # The submodule is at some commit beyond the latest release,\n        # and the CRT team doesn't control this repo so can't just cut a new release\n        if sync_from != sync_to and current_tag is None:\n            if name in ['aws-lc', 's2n', 's2n-tls']:\n                # must fetch tags before we can check their ancestry\n",
                      "markdown": "`\n        # The only time we don't want to sync to the latest release is:\n        # The submodule is at some commit beyond the latest release,\n        # and the CRT team doesn't control this repo so can't just cut a new release\n        if sync_from != sync_to and current_tag is None:\n            if name in ['aws-lc', 's2n', 's2n-tls']:\n                # must fetch tags before we can check their ancestry\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/scripts/latest_submodules.py"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 18,
                  "endLine": 138,
                  "endColumn": 24,
                  "snippet": {
                    "text": "        latest_tag = tags[0]\n        sync_to = latest_tag['version']\n\n        # The only time we don't want to sync to the latest release is:\n        # The submodule is at some commit beyond the latest release,\n        # and the CRT team doesn't control this repo so can't just cut a new release\n        if sync_from != sync_to and current_tag is None:\n",
                    "rendered": {
                      "text": "        latest_tag = tags[0]\n        sync_to = latest_tag['version']\n\n        # The only time we don't want to sync to the latest release is:\n        # The submodule is at some commit beyond the latest release,\n        # and the CRT team doesn't control this repo so can't just cut a new release\n        if sync_from != sync_to and current_tag is None:\n",
                      "markdown": "`        latest_tag = tags[0]\n        sync_to = latest_tag['version']\n\n        # The only time we don't want to sync to the latest release is:\n        # The submodule is at some commit beyond the latest release,\n        # and the CRT team doesn't control this repo so can't just cut a new release\n        if sync_from != sync_to and current_tag is None:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/scripts/latest_submodules.py"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 5,
                  "endLine": 82,
                  "endColumn": 11,
                  "snippet": {
                    "text": "            'num_tuple': (int(match.group(3)), int(match.group(4)), int(match.group(5))),\n        })\n\n    # sort highest version first\n    return sorted(tags, reverse=True, key=lambda tag: tag['num_tuple'])\n\n\n",
                    "rendered": {
                      "text": "            'num_tuple': (int(match.group(3)), int(match.group(4)), int(match.group(5))),\n        })\n\n    # sort highest version first\n    return sorted(tags, reverse=True, key=lambda tag: tag['num_tuple'])\n\n\n",
                      "markdown": "`            'num_tuple': (int(match.group(3)), int(match.group(4)), int(match.group(5))),\n        })\n\n    # sort highest version first\n    return sorted(tags, reverse=True, key=lambda tag: tag['num_tuple'])\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/README.md"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 45,
                  "endLine": 14,
                  "endColumn": 99,
                  "snippet": {
                    "text": "\n## Usage\n### Building\naws-c-common uses CMake for setting up build environments. This library has no non-kernel dependencies so the build is quite\nsimple.\n\nFor example:\n",
                    "rendered": {
                      "text": "\n## Usage\n### Building\naws-c-common uses CMake for setting up build environments. This library has no non-kernel dependencies so the build is quite\nsimple.\n\nFor example:\n",
                      "markdown": "`\n## Usage\n### Building\naws-c-common uses CMake for setting up build environments. This library has no non-kernel dependencies so the build is quite\nsimple.\n\nFor example:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/README.md"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 58,
                  "endLine": 128,
                  "endColumn": 62,
                  "snippet": {
                    "text": "| [0x4400, 0x4800) | aws-crt-swift |\n| [0x4800, 0x4C00) | (reserved for future project) |\n\nEach library should begin its error and log subject values at the beginning of its range and follow in sequence (don't skip codes). Upon\nadding an AWS maintained library, a new enum range must be approved and added to the above table.\n\n### Testing\n",
                    "rendered": {
                      "text": "| [0x4400, 0x4800) | aws-crt-swift |\n| [0x4800, 0x4C00) | (reserved for future project) |\n\nEach library should begin its error and log subject values at the beginning of its range and follow in sequence (don't skip codes). Upon\nadding an AWS maintained library, a new enum range must be approved and added to the above table.\n\n### Testing\n",
                      "markdown": "`| [0x4400, 0x4800) | aws-crt-swift |\n| [0x4800, 0x4C00) | (reserved for future project) |\n\nEach library should begin its error and log subject values at the beginning of its range and follow in sequence (don't skip codes). Upon\nadding an AWS maintained library, a new enum range must be approved and added to the above table.\n\n### Testing\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/README.md"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 9,
                  "endLine": 100,
                  "endColumn": 18,
                  "snippet": {
                    "text": "* For APIs returning an `int` error code. The only acceptable return types are `AWS_OP_SUCCESS` and `AWS_OP_ERR`. Before\nreturning control to the caller, if you have an error to raise, use the `aws_raise_error()` function.\n* For APIs returning an allocated instance of an object, return the memory on success, and `NULL` on failure. Before\nreturning control to the caller, if you have an error to raise, use the `aws_raise_error()` function.\n\n#### Log Subjects & Error Codes\nThe logging & error handling infrastructure is designed to support multiple libraries. For this to work, AWS maintained libraries\n",
                    "rendered": {
                      "text": "* For APIs returning an `int` error code. The only acceptable return types are `AWS_OP_SUCCESS` and `AWS_OP_ERR`. Before\nreturning control to the caller, if you have an error to raise, use the `aws_raise_error()` function.\n* For APIs returning an allocated instance of an object, return the memory on success, and `NULL` on failure. Before\nreturning control to the caller, if you have an error to raise, use the `aws_raise_error()` function.\n\n#### Log Subjects & Error Codes\nThe logging & error handling infrastructure is designed to support multiple libraries. For this to work, AWS maintained libraries\n",
                      "markdown": "`* For APIs returning an `int` error code. The only acceptable return types are `AWS_OP_SUCCESS` and `AWS_OP_ERR`. Before\nreturning control to the caller, if you have an error to raise, use the `aws_raise_error()` function.\n* For APIs returning an allocated instance of an object, return the memory on success, and `NULL` on failure. Before\nreturning control to the caller, if you have an error to raise, use the `aws_raise_error()` function.\n\n#### Log Subjects & Error Codes\nThe logging & error handling infrastructure is designed to support multiple libraries. For this to work, AWS maintained libraries\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/README.md"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 9,
                  "endLine": 98,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n### Error Handling\n* For APIs returning an `int` error code. The only acceptable return types are `AWS_OP_SUCCESS` and `AWS_OP_ERR`. Before\nreturning control to the caller, if you have an error to raise, use the `aws_raise_error()` function.\n* For APIs returning an allocated instance of an object, return the memory on success, and `NULL` on failure. Before\nreturning control to the caller, if you have an error to raise, use the `aws_raise_error()` function.\n\n",
                    "rendered": {
                      "text": "\n### Error Handling\n* For APIs returning an `int` error code. The only acceptable return types are `AWS_OP_SUCCESS` and `AWS_OP_ERR`. Before\nreturning control to the caller, if you have an error to raise, use the `aws_raise_error()` function.\n* For APIs returning an allocated instance of an object, return the memory on success, and `NULL` on failure. Before\nreturning control to the caller, if you have an error to raise, use the `aws_raise_error()` function.\n\n",
                      "markdown": "`\n### Error Handling\n* For APIs returning an `int` error code. The only acceptable return types are `AWS_OP_SUCCESS` and `AWS_OP_ERR`. Before\nreturning control to the caller, if you have an error to raise, use the `aws_raise_error()` function.\n* For APIs returning an allocated instance of an object, return the memory on success, and `NULL` on failure. Before\nreturning control to the caller, if you have an error to raise, use the `aws_raise_error()` function.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/README.md"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 114,
                  "endLine": 84,
                  "endColumn": 118,
                  "snippet": {
                    "text": "### Memory Management\n* All APIs that need to be able to allocate memory, must take an instance of `aws_allocator` and use that. No `malloc()` or\n`free()` calls should be made directly.\n* If an API does not allocate the memory, it does not free it. All allocations and deallocations should take place at the same level.\nFor example, if a user allocates memory, the user is responsible for freeing it. There will inevitably be a few exceptions to this\nrule, but they will need significant justification to make it through the code-review.\n* All functions that allocate memory must raise an `AWS_ERROR_OOM`",
                    "rendered": {
                      "text": "### Memory Management\n* All APIs that need to be able to allocate memory, must take an instance of `aws_allocator` and use that. No `malloc()` or\n`free()` calls should be made directly.\n* If an API does not allocate the memory, it does not free it. All allocations and deallocations should take place at the same level.\nFor example, if a user allocates memory, the user is responsible for freeing it. There will inevitably be a few exceptions to this\nrule, but they will need significant justification to make it through the code-review.\n* All functions that allocate memory must raise an `AWS_ERROR_OOM`",
                      "markdown": "`### Memory Management\n* All APIs that need to be able to allocate memory, must take an instance of `aws_allocator` and use that. No `malloc()` or\n`free()` calls should be made directly.\n* If an API does not allocate the memory, it does not free it. All allocations and deallocations should take place at the same level.\nFor example, if a user allocates memory, the user is responsible for freeing it. There will inevitably be a few exceptions to this\nrule, but they will need significant justification to make it through the code-review.\n* All functions that allocate memory must raise an `AWS_ERROR_OOM``"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/README.md"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 3,
                  "endLine": 19,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nFor example:\n\n    git clone git@github.com:awslabs/aws-c-common.git aws-c-common\n    mkdir aws-c-common-build\n    cd aws-c-common-build\n    cmake ../aws-c-common\n",
                    "rendered": {
                      "text": "\nFor example:\n\n    git clone git@github.com:awslabs/aws-c-common.git aws-c-common\n    mkdir aws-c-common-build\n    cd aws-c-common-build\n    cmake ../aws-c-common\n",
                      "markdown": "`\nFor example:\n\n    git clone git@github.com:awslabs/aws-c-common.git aws-c-common\n    mkdir aws-c-common-build\n    cd aws-c-common-build\n    cmake ../aws-c-common\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/Makefile-project-targets"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 25,
                  "endLine": 2,
                  "endColumn": 32,
                  "snippet": {
                    "text": "# -*- mode: makefile -*-\n# The first line sets the emacs major mode to Makefile\n\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n",
                    "rendered": {
                      "text": "# -*- mode: makefile -*-\n# The first line sets the emacs major mode to Makefile\n\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n",
                      "markdown": "`# -*- mode: makefile -*-\n# The first line sets the emacs major mode to Makefile\n\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/Makefile-project-defines"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 25,
                  "endLine": 2,
                  "endColumn": 32,
                  "snippet": {
                    "text": "# -*- mode: makefile -*-\n# The first line sets the emacs major mode to Makefile\n\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n",
                    "rendered": {
                      "text": "# -*- mode: makefile -*-\n# The first line sets the emacs major mode to Makefile\n\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n",
                      "markdown": "`# -*- mode: makefile -*-\n# The first line sets the emacs major mode to Makefile\n\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/Makefile.cbmc_batch"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 26,
                  "endLine": 74,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\tfor d in $(ENTRY)*; do \\\n\t  if [ -d $$d ]; then \\\n\t    for f in $$d.json $$d.yaml Makefile-$$d; do \\\n\t      if [ -f $$f ]; then mv $$f $$d; fi \\\n\t    done\\\n\t  fi \\\n\tdone\n",
                    "rendered": {
                      "text": "\tfor d in $(ENTRY)*; do \\\n\t  if [ -d $$d ]; then \\\n\t    for f in $$d.json $$d.yaml Makefile-$$d; do \\\n\t      if [ -f $$f ]; then mv $$f $$d; fi \\\n\t    done\\\n\t  fi \\\n\tdone\n",
                      "markdown": "`\tfor d in $(ENTRY)*; do \\\n\t  if [ -d $$d ]; then \\\n\t    for f in $$d.json $$d.yaml Makefile-$$d; do \\\n\t      if [ -f $$f ]; then mv $$f $$d; fi \\\n\t    done\\\n\t  fi \\\n\tdone\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/Makefile.cbmc_batch"
                },
                "region": {
                  "startLine": 67,
                  "endLine": 67,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\nlaunch: $(ENTRY).goto Makefile\n\tmkdir -p $(WS)\n\tcp $(ENTRY).goto $(WS)\n\t$(BATCH) $(BATCHFLAGS)\n\nlaunch-clean:\n",
                    "rendered": {
                      "text": "\nlaunch: $(ENTRY).goto Makefile\n\tmkdir -p $(WS)\n\tcp $(ENTRY).goto $(WS)\n\t$(BATCH) $(BATCHFLAGS)\n\nlaunch-clean:\n",
                      "markdown": "`\nlaunch: $(ENTRY).goto Makefile\n\tmkdir -p $(WS)\n\tcp $(ENTRY).goto $(WS)\n\t$(BATCH) $(BATCHFLAGS)\n\nlaunch-clean:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/Makefile.cbmc_batch"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 44,
                  "endLine": 40,
                  "endColumn": 49,
                  "snippet": {
                    "text": "WS ?= ws\n\ndefine yaml_encode_options\n       \"$(shell echo $(1) | sed 's/ ,/ /g' | sed 's/ /;/g')\"\nendef\n\n$(ENTRY).yaml: $(ENTRY).goto Makefile\n",
                    "rendered": {
                      "text": "WS ?= ws\n\ndefine yaml_encode_options\n       \"$(shell echo $(1) | sed 's/ ,/ /g' | sed 's/ /;/g')\"\nendef\n\n$(ENTRY).yaml: $(ENTRY).goto Makefile\n",
                      "markdown": "`WS ?= ws\n\ndefine yaml_encode_options\n       \"$(shell echo $(1) | sed 's/ ,/ /g' | sed 's/ /;/g')\"\nendef\n\n$(ENTRY).yaml: $(ENTRY).goto Makefile\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/Makefile.cbmc_batch"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 27,
                  "endLine": 40,
                  "endColumn": 32,
                  "snippet": {
                    "text": "WS ?= ws\n\ndefine yaml_encode_options\n       \"$(shell echo $(1) | sed 's/ ,/ /g' | sed 's/ /;/g')\"\nendef\n\n$(ENTRY).yaml: $(ENTRY).goto Makefile\n",
                    "rendered": {
                      "text": "WS ?= ws\n\ndefine yaml_encode_options\n       \"$(shell echo $(1) | sed 's/ ,/ /g' | sed 's/ /;/g')\"\nendef\n\n$(ENTRY).yaml: $(ENTRY).goto Makefile\n",
                      "markdown": "`WS ?= ws\n\ndefine yaml_encode_options\n       \"$(shell echo $(1) | sed 's/ ,/ /g' | sed 's/ /;/g')\"\nendef\n\n$(ENTRY).yaml: $(ENTRY).goto Makefile\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/Makefile.cbmc_batch"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 45,
                  "endLine": 32,
                  "endColumn": 50,
                  "snippet": {
                    "text": "COVMEM ?= 64000\n\ndefine encode_options\n       '=$(shell echo $(1) | sed 's/ ,/ /g' | sed 's/ /;/g')='\nendef\n\nPROPMEM ?= 64000\n",
                    "rendered": {
                      "text": "COVMEM ?= 64000\n\ndefine encode_options\n       '=$(shell echo $(1) | sed 's/ ,/ /g' | sed 's/ /;/g')='\nendef\n\nPROPMEM ?= 64000\n",
                      "markdown": "`COVMEM ?= 64000\n\ndefine encode_options\n       '=$(shell echo $(1) | sed 's/ ,/ /g' | sed 's/ /;/g')='\nendef\n\nPROPMEM ?= 64000\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/Makefile.cbmc_batch"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 28,
                  "endLine": 32,
                  "endColumn": 33,
                  "snippet": {
                    "text": "COVMEM ?= 64000\n\ndefine encode_options\n       '=$(shell echo $(1) | sed 's/ ,/ /g' | sed 's/ /;/g')='\nendef\n\nPROPMEM ?= 64000\n",
                    "rendered": {
                      "text": "COVMEM ?= 64000\n\ndefine encode_options\n       '=$(shell echo $(1) | sed 's/ ,/ /g' | sed 's/ /;/g')='\nendef\n\nPROPMEM ?= 64000\n",
                      "markdown": "`COVMEM ?= 64000\n\ndefine encode_options\n       '=$(shell echo $(1) | sed 's/ ,/ /g' | sed 's/ /;/g')='\nendef\n\nPROPMEM ?= 64000\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/run-cbmc-proofs.py"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 30,
                  "endLine": 303,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    queue, counter, proof_uids, enable_pools, enable_memory_profiling, debug):\n    while True:\n        print_counter(counter)\n        path = str(await queue.get())\n\n        check_uid_uniqueness(path, proof_uids)\n\n",
                    "rendered": {
                      "text": "    queue, counter, proof_uids, enable_pools, enable_memory_profiling, debug):\n    while True:\n        print_counter(counter)\n        path = str(await queue.get())\n\n        check_uid_uniqueness(path, proof_uids)\n\n",
                      "markdown": "`    queue, counter, proof_uids, enable_pools, enable_memory_profiling, debug):\n    while True:\n        print_counter(counter)\n        path = str(await queue.get())\n\n        check_uid_uniqueness(path, proof_uids)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/run-cbmc-proofs.py"
                },
                "region": {
                  "startLine": 346,
                  "startColumn": 7,
                  "endLine": 346,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    ] if enable_pools else []\n\n    if not args.no_standalone:\n        cmd = [\n            str(litani), \"init\", *init_pools, \"--project\", args.project_name,\n            \"--no-print-out-dir\",\n        ]\n",
                    "rendered": {
                      "text": "    ] if enable_pools else []\n\n    if not args.no_standalone:\n        cmd = [\n            str(litani), \"init\", *init_pools, \"--project\", args.project_name,\n            \"--no-print-out-dir\",\n        ]\n",
                      "markdown": "`    ] if enable_pools else []\n\n    if not args.no_standalone:\n        cmd = [\n            str(litani), \"init\", *init_pools, \"--project\", args.project_name,\n            \"--no-print-out-dir\",\n        ]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/run-cbmc-proofs.py"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 3,
                  "endLine": 252,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n\ndef get_litani_capabilities(litani_path):\n    cmd = [litani_path, \"print-capabilities\"]\n    proc = subprocess.run(\n        cmd, text=True, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, check=False)\n    if proc.returncode:\n",
                    "rendered": {
                      "text": "\n\ndef get_litani_capabilities(litani_path):\n    cmd = [litani_path, \"print-capabilities\"]\n    proc = subprocess.run(\n        cmd, text=True, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, check=False)\n    if proc.returncode:\n",
                      "markdown": "`\n\ndef get_litani_capabilities(litani_path):\n    cmd = [litani_path, \"print-capabilities\"]\n    proc = subprocess.run(\n        cmd, text=True, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, check=False)\n    if proc.returncode:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/run-cbmc-proofs.py"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 3,
                  "endLine": 236,
                  "endColumn": 8,
                  "snippet": {
                    "text": "        sys.exit(10)\n\ndef get_litani_path(proof_root):\n    cmd = [\n        \"make\",\n        \"--no-print-directory\",\n        f\"PROOF_ROOT={proof_root}\",\n",
                    "rendered": {
                      "text": "        sys.exit(10)\n\ndef get_litani_path(proof_root):\n    cmd = [\n        \"make\",\n        \"--no-print-directory\",\n        f\"PROOF_ROOT={proof_root}\",\n",
                      "markdown": "`        sys.exit(10)\n\ndef get_litani_path(proof_root):\n    cmd = [\n        \"make\",\n        \"--no-print-directory\",\n        f\"PROOF_ROOT={proof_root}\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/run-cbmc-proofs.py"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 3,
                  "endLine": 211,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n\ndef run_build(litani, jobs, fail_on_proof_failure, summarize):\n    cmd = [str(litani), \"run-build\"]\n    if jobs:\n        cmd.extend([\"-j\", str(jobs)])\n    if fail_on_proof_failure:\n",
                    "rendered": {
                      "text": "\n\ndef run_build(litani, jobs, fail_on_proof_failure, summarize):\n    cmd = [str(litani), \"run-build\"]\n    if jobs:\n        cmd.extend([\"-j\", str(jobs)])\n    if fail_on_proof_failure:\n",
                      "markdown": "`\n\ndef run_build(litani, jobs, fail_on_proof_failure, summarize):\n    cmd = [str(litani), \"run-build\"]\n    if jobs:\n        cmd.extend([\"-j\", str(jobs)])\n    if fail_on_proof_failure:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/run-cbmc-proofs.py"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 24,
                  "endLine": 98,
                  "endColumn": 28,
                  "snippet": {
                    "text": "            \"flags\": [\"-j\", \"--parallel-jobs\"],\n            \"type\": int,\n            \"metavar\": \"N\",\n            \"help\": \"run at most N proof jobs in parallel\",\n    }, {\n            \"flags\": [\"--fail-on-proof-failure\"],\n            \"action\": \"store_true\",\n",
                    "rendered": {
                      "text": "            \"flags\": [\"-j\", \"--parallel-jobs\"],\n            \"type\": int,\n            \"metavar\": \"N\",\n            \"help\": \"run at most N proof jobs in parallel\",\n    }, {\n            \"flags\": [\"--fail-on-proof-failure\"],\n            \"action\": \"store_true\",\n",
                      "markdown": "`            \"flags\": [\"-j\", \"--parallel-jobs\"],\n            \"type\": int,\n            \"metavar\": \"N\",\n            \"help\": \"run at most N proof jobs in parallel\",\n    }, {\n            \"flags\": [\"--fail-on-proof-failure\"],\n            \"action\": \"store_true\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/run-cbmc-proofs.py"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 3,
                  "endLine": 70,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n\ndef get_project_name():\n    cmd = [\n        \"make\",\n        \"--no-print-directory\",\n        \"-f\", \"Makefile.common\",\n",
                    "rendered": {
                      "text": "\n\ndef get_project_name():\n    cmd = [\n        \"make\",\n        \"--no-print-directory\",\n        \"-f\", \"Makefile.common\",\n",
                      "markdown": "`\n\ndef get_project_name():\n    cmd = [\n        \"make\",\n        \"--no-print-directory\",\n        \"-f\", \"Makefile.common\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/run-cbmc-proofs.py"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 30,
                  "endLine": 24,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\nDESCRIPTION = \"Configure and run all CBMC proofs in parallel\"\n\n# Keep the epilog hard-wrapped at 70 characters, as it gets printed\n# verbatim in the terminal. 70 characters stops here --------------> |\nEPILOG = \"\"\"\nThis tool automates the process of running `make report` in each of\n",
                    "rendered": {
                      "text": "\nDESCRIPTION = \"Configure and run all CBMC proofs in parallel\"\n\n# Keep the epilog hard-wrapped at 70 characters, as it gets printed\n# verbatim in the terminal. 70 characters stops here --------------> |\nEPILOG = \"\"\"\nThis tool automates the process of running `make report` in each of\n",
                      "markdown": "`\nDESCRIPTION = \"Configure and run all CBMC proofs in parallel\"\n\n# Keep the epilog hard-wrapped at 70 characters, as it gets printed\n# verbatim in the terminal. 70 characters stops here --------------> |\nEPILOG = \"\"\"\nThis tool automates the process of running `make report` in each of\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/run-cbmc-proofs.py"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 21,
                  "endLine": 49,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        litani run-build;\n\nexcept that it is much faster and provides some convenience options.\nThe CBMC CI runs this script with no arguments to build and run all\nproofs in parallel. The value of \"my-cool-project\" is taken from the\nPROJECT_NAME variable in Makefile-project-defines.\n\n",
                    "rendered": {
                      "text": "        litani run-build;\n\nexcept that it is much faster and provides some convenience options.\nThe CBMC CI runs this script with no arguments to build and run all\nproofs in parallel. The value of \"my-cool-project\" is taken from the\nPROJECT_NAME variable in Makefile-project-defines.\n\n",
                      "markdown": "`        litani run-build;\n\nexcept that it is much faster and provides some convenience options.\nThe CBMC CI runs this script with no arguments to build and run all\nproofs in parallel. The value of \"my-cool-project\" is taken from the\nPROJECT_NAME variable in Makefile-project-defines.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/run-cbmc-proofs.py"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 7,
                  "endLine": 36,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n        litani init --project \"my-cool-project\";\n\n        find . -name cbmc-proof.txt | while read -r proof; do\n            pushd $(dirname ${proof});\n\n            # The `make _report` rule adds a single proof to litani\n",
                    "rendered": {
                      "text": "\n        litani init --project \"my-cool-project\";\n\n        find . -name cbmc-proof.txt | while read -r proof; do\n            pushd $(dirname ${proof});\n\n            # The `make _report` rule adds a single proof to litani\n",
                      "markdown": "`\n        litani init --project \"my-cool-project\";\n\n        find . -name cbmc-proof.txt | while read -r proof; do\n            pushd $(dirname ${proof});\n\n            # The `make _report` rule adds a single proof to litani\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/Makefile.common"
                },
                "region": {
                  "startLine": 528,
                  "startColumn": 42,
                  "endLine": 528,
                  "endColumn": 46,
                  "snippet": {
                    "text": "DEFINES += -DCBMC_OBJECT_BITS=$(CBMC_OBJECT_BITS)\nDEFINES += -DCBMC_MAX_OBJECT_SIZE=\"(SIZE_MAX>>(CBMC_OBJECT_BITS+1))\"\n\n# CI currently assumes cbmc invocation has at most one --unwindset\n\n# UNWINDSET is designed for user code (i.e., proof and project code)\nifdef UNWINDSET\n",
                    "rendered": {
                      "text": "DEFINES += -DCBMC_OBJECT_BITS=$(CBMC_OBJECT_BITS)\nDEFINES += -DCBMC_MAX_OBJECT_SIZE=\"(SIZE_MAX>>(CBMC_OBJECT_BITS+1))\"\n\n# CI currently assumes cbmc invocation has at most one --unwindset\n\n# UNWINDSET is designed for user code (i.e., proof and project code)\nifdef UNWINDSET\n",
                      "markdown": "`DEFINES += -DCBMC_OBJECT_BITS=$(CBMC_OBJECT_BITS)\nDEFINES += -DCBMC_MAX_OBJECT_SIZE=\"(SIZE_MAX>>(CBMC_OBJECT_BITS+1))\"\n\n# CI currently assumes cbmc invocation has at most one --unwindset\n\n# UNWINDSET is designed for user code (i.e., proof and project code)\nifdef UNWINDSET\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/Makefile.common"
                },
                "region": {
                  "startLine": 301,
                  "startColumn": 25,
                  "endLine": 301,
                  "endColumn": 34,
                  "snippet": {
                    "text": "# Uncomment the following line or set in Makefile-project-defines\n# CBMC_VERBOSITY ?= --verbosity 4\n\n# Additional CBMC flag to control how CBMC treats static variables.\n#\n# NONDET_STATIC is a list of flags of the form --nondet-static\n# and --nondet-static-exclude VAR.  The --nondet-static flag causes\n",
                    "rendered": {
                      "text": "# Uncomment the following line or set in Makefile-project-defines\n# CBMC_VERBOSITY ?= --verbosity 4\n\n# Additional CBMC flag to control how CBMC treats static variables.\n#\n# NONDET_STATIC is a list of flags of the form --nondet-static\n# and --nondet-static-exclude VAR.  The --nondet-static flag causes\n",
                      "markdown": "`# Uncomment the following line or set in Makefile-project-defines\n# CBMC_VERBOSITY ?= --verbosity 4\n\n# Additional CBMC flag to control how CBMC treats static variables.\n#\n# NONDET_STATIC is a list of flags of the form --nondet-static\n# and --nondet-static-exclude VAR.  The --nondet-static flag causes\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/Makefile.common"
                },
                "region": {
                  "startLine": 286,
                  "startColumn": 30,
                  "endLine": 286,
                  "endColumn": 39,
                  "snippet": {
                    "text": "CHECKFLAGS += $(CBMC_FLAG_UNDEFINED_SHIFT_CHECK)\nCHECKFLAGS += $(CBMC_FLAG_UNSIGNED_OVERFLOW_CHECK)\n\n# Additional CBMC flag to CBMC control verbosity.\n#\n# Meaningful values are\n# 0 none\n",
                    "rendered": {
                      "text": "CHECKFLAGS += $(CBMC_FLAG_UNDEFINED_SHIFT_CHECK)\nCHECKFLAGS += $(CBMC_FLAG_UNSIGNED_OVERFLOW_CHECK)\n\n# Additional CBMC flag to CBMC control verbosity.\n#\n# Meaningful values are\n# 0 none\n",
                      "markdown": "`CHECKFLAGS += $(CBMC_FLAG_UNDEFINED_SHIFT_CHECK)\nCHECKFLAGS += $(CBMC_FLAG_UNSIGNED_OVERFLOW_CHECK)\n\n# Additional CBMC flag to CBMC control verbosity.\n#\n# Meaningful values are\n# 0 none\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/Makefile.common"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 56,
                  "endLine": 200,
                  "endColumn": 60,
                  "snippet": {
                    "text": "# once, amongst all the proofs.\n#\n# To configure N, Litani needs to be initialized with a pool called \"expensive\".\n# For example, to only run two CBMC safety/coverage jobs at a time from amongst\n# all the proofs, you would initialize litani like\n#         litani init --pools expensive:2\n# The run-cbmc-proofs.py script takes care of this initialization through the\n",
                    "rendered": {
                      "text": "# once, amongst all the proofs.\n#\n# To configure N, Litani needs to be initialized with a pool called \"expensive\".\n# For example, to only run two CBMC safety/coverage jobs at a time from amongst\n# all the proofs, you would initialize litani like\n#         litani init --pools expensive:2\n# The run-cbmc-proofs.py script takes care of this initialization through the\n",
                      "markdown": "`# once, amongst all the proofs.\n#\n# To configure N, Litani needs to be initialized with a pool called \"expensive\".\n# For example, to only run two CBMC safety/coverage jobs at a time from amongst\n# all the proofs, you would initialize litani like\n#         litani init --pools expensive:2\n# The run-cbmc-proofs.py script takes care of this initialization through the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/Makefile.common"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 77,
                  "endLine": 197,
                  "snippet": {
                    "text": "# full parallelism as usual, even for expensive proofs. The CBMC jobs for\n# non-expensive proofs are also run in parallel. The only difference is that the\n# CBMC safety checks and coverage checks for expensive proofs are run with a\n# restricted parallelism level. At any one time, only N of these jobs are run at\n# once, amongst all the proofs.\n#\n# To configure N, Litani needs to be initialized with a pool called \"expensive\".\n# For example, to only run two CBMC safety/coverage jobs at a time from amongst\n",
                    "rendered": {
                      "text": "# full parallelism as usual, even for expensive proofs. The CBMC jobs for\n# non-expensive proofs are also run in parallel. The only difference is that the\n# CBMC safety checks and coverage checks for expensive proofs are run with a\n# restricted parallelism level. At any one time, only N of these jobs are run at\n# once, amongst all the proofs.\n#\n# To configure N, Litani needs to be initialized with a pool called \"expensive\".\n# For example, to only run two CBMC safety/coverage jobs at a time from amongst\n",
                      "markdown": "`# full parallelism as usual, even for expensive proofs. The CBMC jobs for\n# non-expensive proofs are also run in parallel. The only difference is that the\n# CBMC safety checks and coverage checks for expensive proofs are run with a\n# restricted parallelism level. At any one time, only N of these jobs are run at\n# once, amongst all the proofs.\n#\n# To configure N, Litani needs to be initialized with a pool called \"expensive\".\n# For example, to only run two CBMC safety/coverage jobs at a time from amongst\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/Makefile.common"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 31,
                  "endLine": 196,
                  "endColumn": 35,
                  "snippet": {
                    "text": "# full parallelism as usual, even for expensive proofs. The CBMC jobs for\n# non-expensive proofs are also run in parallel. The only difference is that the\n# CBMC safety checks and coverage checks for expensive proofs are run with a\n# restricted parallelism level. At any one time, only N of these jobs are run at\n# once, amongst all the proofs.\n#\n# To configure N, Litani needs to be initialized with a pool called \"expensive\".\n",
                    "rendered": {
                      "text": "# full parallelism as usual, even for expensive proofs. The CBMC jobs for\n# non-expensive proofs are also run in parallel. The only difference is that the\n# CBMC safety checks and coverage checks for expensive proofs are run with a\n# restricted parallelism level. At any one time, only N of these jobs are run at\n# once, amongst all the proofs.\n#\n# To configure N, Litani needs to be initialized with a pool called \"expensive\".\n",
                      "markdown": "`# full parallelism as usual, even for expensive proofs. The CBMC jobs for\n# non-expensive proofs are also run in parallel. The only difference is that the\n# CBMC safety checks and coverage checks for expensive proofs are run with a\n# restricted parallelism level. At any one time, only N of these jobs are run at\n# once, amongst all the proofs.\n#\n# To configure N, Litani needs to be initialized with a pool called \"expensive\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/Makefile.common"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 61,
                  "endLine": 189,
                  "endColumn": 65,
                  "snippet": {
                    "text": "# Job pools\n# For version of Litani that are new enough (where `litani print-capabilities`\n# prints \"pools\"), proofs for which `EXPENSIVE = true` is set can be added to a\n# \"job pool\" that restricts how many expensive proofs are run at a time. All\n# other proofs will be built in parallel as usual.\n#\n# In more detail: all compilation, instrumentation, and report jobs are run with\n",
                    "rendered": {
                      "text": "# Job pools\n# For version of Litani that are new enough (where `litani print-capabilities`\n# prints \"pools\"), proofs for which `EXPENSIVE = true` is set can be added to a\n# \"job pool\" that restricts how many expensive proofs are run at a time. All\n# other proofs will be built in parallel as usual.\n#\n# In more detail: all compilation, instrumentation, and report jobs are run with\n",
                      "markdown": "`# Job pools\n# For version of Litani that are new enough (where `litani print-capabilities`\n# prints \"pools\"), proofs for which `EXPENSIVE = true` is set can be added to a\n# \"job pool\" that restricts how many expensive proofs are run at a time. All\n# other proofs will be built in parallel as usual.\n#\n# In more detail: all compilation, instrumentation, and report jobs are run with\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/Makefile.common"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 61,
                  "endLine": 172,
                  "endColumn": 65,
                  "snippet": {
                    "text": "# Do property checking with the external SAT solver given by\n# EXTERNAL_SAT_SOLVER.  Do coverage checking with the default solver,\n# since coverage checking requires the use of an incremental solver.\n# The EXTERNAL_SAT_SOLVER variable is typically set (if it is at all)\n# as an environment variable or as a makefile variable in\n# Makefile-project-defines.\n#\n",
                    "rendered": {
                      "text": "# Do property checking with the external SAT solver given by\n# EXTERNAL_SAT_SOLVER.  Do coverage checking with the default solver,\n# since coverage checking requires the use of an incremental solver.\n# The EXTERNAL_SAT_SOLVER variable is typically set (if it is at all)\n# as an environment variable or as a makefile variable in\n# Makefile-project-defines.\n#\n",
                      "markdown": "`# Do property checking with the external SAT solver given by\n# EXTERNAL_SAT_SOLVER.  Do coverage checking with the default solver,\n# since coverage checking requires the use of an incremental solver.\n# The EXTERNAL_SAT_SOLVER variable is typically set (if it is at all)\n# as an environment variable or as a makefile variable in\n# Makefile-project-defines.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/Makefile.common"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 59,
                  "endLine": 47,
                  "snippet": {
                    "text": "# Section II uses the values defined in Section I to build your code, run\n# your proof, and build a report of your results.  You should not need\n# to modify or override anything in Section II, but you may want to\n# read it to understand how the values defined in Section I control\n# things.\n#\n# To use Makefile.common, set variables as described above as needed,\n# and then for each proof,\n",
                    "rendered": {
                      "text": "# Section II uses the values defined in Section I to build your code, run\n# your proof, and build a report of your results.  You should not need\n# to modify or override anything in Section II, but you may want to\n# read it to understand how the values defined in Section I control\n# things.\n#\n# To use Makefile.common, set variables as described above as needed,\n# and then for each proof,\n",
                      "markdown": "`# Section II uses the values defined in Section I to build your code, run\n# your proof, and build a report of your results.  You should not need\n# to modify or override anything in Section II, but you may want to\n# read it to understand how the values defined in Section I control\n# things.\n#\n# To use Makefile.common, set variables as described above as needed,\n# and then for each proof,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/Makefile.common"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 16,
                  "endLine": 22,
                  "snippet": {
                    "text": "# practices for using cbmc for software verification.\n#\n# Section I gives default values for a large number of Makefile\n# variables that control\n#   * how your code is built (include paths, etc),\n#   * what program transformations are applied to your code (loop\n#     unwinding, etc), and\n#   * what properties cbmc checks for in your code (memory safety, etc).\n",
                    "rendered": {
                      "text": "# practices for using cbmc for software verification.\n#\n# Section I gives default values for a large number of Makefile\n# variables that control\n#   * how your code is built (include paths, etc),\n#   * what program transformations are applied to your code (loop\n#     unwinding, etc), and\n#   * what properties cbmc checks for in your code (memory safety, etc).\n",
                      "markdown": "`# practices for using cbmc for software verification.\n#\n# Section I gives default values for a large number of Makefile\n# variables that control\n#   * how your code is built (include paths, etc),\n#   * what program transformations are applied to your code (loop\n#     unwinding, etc), and\n#   * what properties cbmc checks for in your code (memory safety, etc).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/Makefile.common"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 1,
                  "endLine": 13,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# The CBMC Starter Kit depends on the files Makefile.common and\n# run-cbmc-proofs.py.  They are installed by the setup script\n# cbmc-starter-kit-setup and updated to the latest version by the\n# update script cbmc-starter-kit-update.  For more information about\n# the starter kit and these files and these scripts, see\n# https://model-checking.github.io/cbmc-starter-kit\n#\n",
                    "rendered": {
                      "text": "# The CBMC Starter Kit depends on the files Makefile.common and\n# run-cbmc-proofs.py.  They are installed by the setup script\n# cbmc-starter-kit-setup and updated to the latest version by the\n# update script cbmc-starter-kit-update.  For more information about\n# the starter kit and these files and these scripts, see\n# https://model-checking.github.io/cbmc-starter-kit\n#\n",
                      "markdown": "`# The CBMC Starter Kit depends on the files Makefile.common and\n# run-cbmc-proofs.py.  They are installed by the setup script\n# cbmc-starter-kit-setup and updated to the latest version by the\n# update script cbmc-starter-kit-update.  For more information about\n# the starter kit and these files and these scripts, see\n# https://model-checking.github.io/cbmc-starter-kit\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/Makefile.common"
                },
                "region": {
                  "startLine": 399,
                  "startColumn": 27,
                  "endLine": 399,
                  "endColumn": 33,
                  "snippet": {
                    "text": "# The number of seconds that CBMC should be allowed to run for before\n# being forcefully terminated. Currently, this is set to be less than\n# the time limit for a CodeBuild job, which is eight hours. If a proof\n# run takes longer than the time limit of the CI environment, the\n# environment will halt the proof run without updating the Litani\n# report, making the proof run appear to \"hang\".\nCBMC_TIMEOUT ?= 21600\n",
                    "rendered": {
                      "text": "# The number of seconds that CBMC should be allowed to run for before\n# being forcefully terminated. Currently, this is set to be less than\n# the time limit for a CodeBuild job, which is eight hours. If a proof\n# run takes longer than the time limit of the CI environment, the\n# environment will halt the proof run without updating the Litani\n# report, making the proof run appear to \"hang\".\nCBMC_TIMEOUT ?= 21600\n",
                      "markdown": "`# The number of seconds that CBMC should be allowed to run for before\n# being forcefully terminated. Currently, this is set to be less than\n# the time limit for a CodeBuild job, which is eight hours. If a proof\n# run takes longer than the time limit of the CI environment, the\n# environment will halt the proof run without updating the Litani\n# report, making the proof run appear to \"hang\".\nCBMC_TIMEOUT ?= 21600\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/Makefile.common"
                },
                "region": {
                  "startLine": 398,
                  "startColumn": 5,
                  "endLine": 398,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n# The number of seconds that CBMC should be allowed to run for before\n# being forcefully terminated. Currently, this is set to be less than\n# the time limit for a CodeBuild job, which is eight hours. If a proof\n# run takes longer than the time limit of the CI environment, the\n# environment will halt the proof run without updating the Litani\n# report, making the proof run appear to \"hang\".\n",
                    "rendered": {
                      "text": "\n# The number of seconds that CBMC should be allowed to run for before\n# being forcefully terminated. Currently, this is set to be less than\n# the time limit for a CodeBuild job, which is eight hours. If a proof\n# run takes longer than the time limit of the CI environment, the\n# environment will halt the proof run without updating the Litani\n# report, making the proof run appear to \"hang\".\n",
                      "markdown": "`\n# The number of seconds that CBMC should be allowed to run for before\n# being forcefully terminated. Currently, this is set to be less than\n# the time limit for a CodeBuild job, which is eight hours. If a proof\n# run takes longer than the time limit of the CI environment, the\n# environment will halt the proof run without updating the Litani\n# report, making the proof run appear to \"hang\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/Makefile.common"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 24,
                  "endLine": 209,
                  "endColumn": 32,
                  "snippet": {
                    "text": "# To enable this feature, set\n# the ENABLE_POOLS variable when running Make, like\n#         `make ENABLE_POOLS=true report`\n# The run-cbmc-proofs.py script takes care of this through the\n# --restrict-expensive-jobs flag.\n\nifeq ($(strip $(ENABLE_POOLS)),)\n",
                    "rendered": {
                      "text": "# To enable this feature, set\n# the ENABLE_POOLS variable when running Make, like\n#         `make ENABLE_POOLS=true report`\n# The run-cbmc-proofs.py script takes care of this through the\n# --restrict-expensive-jobs flag.\n\nifeq ($(strip $(ENABLE_POOLS)),)\n",
                      "markdown": "`# To enable this feature, set\n# the ENABLE_POOLS variable when running Make, like\n#         `make ENABLE_POOLS=true report`\n# The run-cbmc-proofs.py script takes care of this through the\n# --restrict-expensive-jobs flag.\n\nifeq ($(strip $(ENABLE_POOLS)),)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/Makefile.common"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 24,
                  "endLine": 203,
                  "endColumn": 32,
                  "snippet": {
                    "text": "# For example, to only run two CBMC safety/coverage jobs at a time from amongst\n# all the proofs, you would initialize litani like\n#         litani init --pools expensive:2\n# The run-cbmc-proofs.py script takes care of this initialization through the\n# --expensive-jobs-parallelism flag.\n#\n# To enable this feature, set\n",
                    "rendered": {
                      "text": "# For example, to only run two CBMC safety/coverage jobs at a time from amongst\n# all the proofs, you would initialize litani like\n#         litani init --pools expensive:2\n# The run-cbmc-proofs.py script takes care of this initialization through the\n# --expensive-jobs-parallelism flag.\n#\n# To enable this feature, set\n",
                      "markdown": "`# For example, to only run two CBMC safety/coverage jobs at a time from amongst\n# all the proofs, you would initialize litani like\n#         litani init --pools expensive:2\n# The run-cbmc-proofs.py script takes care of this initialization through the\n# --expensive-jobs-parallelism flag.\n#\n# To enable this feature, set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/Makefile.common"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 61,
                  "endLine": 200,
                  "endColumn": 67,
                  "snippet": {
                    "text": "# once, amongst all the proofs.\n#\n# To configure N, Litani needs to be initialized with a pool called \"expensive\".\n# For example, to only run two CBMC safety/coverage jobs at a time from amongst\n# all the proofs, you would initialize litani like\n#         litani init --pools expensive:2\n# The run-cbmc-proofs.py script takes care of this initialization through the\n",
                    "rendered": {
                      "text": "# once, amongst all the proofs.\n#\n# To configure N, Litani needs to be initialized with a pool called \"expensive\".\n# For example, to only run two CBMC safety/coverage jobs at a time from amongst\n# all the proofs, you would initialize litani like\n#         litani init --pools expensive:2\n# The run-cbmc-proofs.py script takes care of this initialization through the\n",
                      "markdown": "`# once, amongst all the proofs.\n#\n# To configure N, Litani needs to be initialized with a pool called \"expensive\".\n# For example, to only run two CBMC safety/coverage jobs at a time from amongst\n# all the proofs, you would initialize litani like\n#         litani init --pools expensive:2\n# The run-cbmc-proofs.py script takes care of this initialization through the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/Makefile.common"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 33,
                  "endLine": 129,
                  "endColumn": 41,
                  "snippet": {
                    "text": "# The location of that cbmc directory in the source tree affects the\n# definition of SRCDIR, which is defined in terms of the relative path\n# from a proof directory to the repository root.  The definition is\n# usually determined by the setup script cbmc-starter-kit-setup and\n# written to Makefile-template-defines, but you can override it for a\n# project in Makefile-project-defines and for a specific proof in the\n# Makefile for the proof.\n",
                    "rendered": {
                      "text": "# The location of that cbmc directory in the source tree affects the\n# definition of SRCDIR, which is defined in terms of the relative path\n# from a proof directory to the repository root.  The definition is\n# usually determined by the setup script cbmc-starter-kit-setup and\n# written to Makefile-template-defines, but you can override it for a\n# project in Makefile-project-defines and for a specific proof in the\n# Makefile for the proof.\n",
                      "markdown": "`# The location of that cbmc directory in the source tree affects the\n# definition of SRCDIR, which is defined in terms of the relative path\n# from a proof directory to the repository root.  The definition is\n# usually determined by the setup script cbmc-starter-kit-setup and\n# written to Makefile-template-defines, but you can override it for a\n# project in Makefile-project-defines and for a specific proof in the\n# Makefile for the proof.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/Makefile.common"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 59,
                  "endLine": 122,
                  "endColumn": 67,
                  "snippet": {
                    "text": "#\n# The path /srcdir/cbmc used in the example above is determined by the\n# setup script cbmc-starter-kit-setup.  Projects usually create a cbmc\n# directory somewhere in the source tree, and run the setup script in\n# that directory.  The value of CBMC_ROOT becomes the absolute path to\n# that directory.\n#\n",
                    "rendered": {
                      "text": "#\n# The path /srcdir/cbmc used in the example above is determined by the\n# setup script cbmc-starter-kit-setup.  Projects usually create a cbmc\n# directory somewhere in the source tree, and run the setup script in\n# that directory.  The value of CBMC_ROOT becomes the absolute path to\n# that directory.\n#\n",
                      "markdown": "`#\n# The path /srcdir/cbmc used in the example above is determined by the\n# setup script cbmc-starter-kit-setup.  Projects usually create a cbmc\n# directory somewhere in the source tree, and run the setup script in\n# that directory.  The value of CBMC_ROOT becomes the absolute path to\n# that directory.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/Makefile.common"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 7,
                  "endLine": 121,
                  "endColumn": 15,
                  "snippet": {
                    "text": "#   PROOFDIR = the directory containing the Makefile for your proof\n#\n# The path /srcdir/cbmc used in the example above is determined by the\n# setup script cbmc-starter-kit-setup.  Projects usually create a cbmc\n# directory somewhere in the source tree, and run the setup script in\n# that directory.  The value of CBMC_ROOT becomes the absolute path to\n# that directory.\n",
                    "rendered": {
                      "text": "#   PROOFDIR = the directory containing the Makefile for your proof\n#\n# The path /srcdir/cbmc used in the example above is determined by the\n# setup script cbmc-starter-kit-setup.  Projects usually create a cbmc\n# directory somewhere in the source tree, and run the setup script in\n# that directory.  The value of CBMC_ROOT becomes the absolute path to\n# that directory.\n",
                      "markdown": "`#   PROOFDIR = the directory containing the Makefile for your proof\n#\n# The path /srcdir/cbmc used in the example above is determined by the\n# setup script cbmc-starter-kit-setup.  Projects usually create a cbmc\n# directory somewhere in the source tree, and run the setup script in\n# that directory.  The value of CBMC_ROOT becomes the absolute path to\n# that directory.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/Makefile.common"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 17,
                  "endLine": 81,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#\n#   * Change directory to <DIR> and run make\n#\n# The proof setup script cbmc-starter-kit-setup-proof from the CBMC\n# Starter Kit will do most of this for, creating a directory and\n# writing a basic Makefile and proof harness into it that you can edit\n# as described above.\n",
                    "rendered": {
                      "text": "#\n#   * Change directory to <DIR> and run make\n#\n# The proof setup script cbmc-starter-kit-setup-proof from the CBMC\n# Starter Kit will do most of this for, creating a directory and\n# writing a basic Makefile and proof harness into it that you can edit\n# as described above.\n",
                      "markdown": "`#\n#   * Change directory to <DIR> and run make\n#\n# The proof setup script cbmc-starter-kit-setup-proof from the CBMC\n# Starter Kit will do most of this for, creating a directory and\n# writing a basic Makefile and proof harness into it that you can edit\n# as described above.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/Makefile.common"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 8,
                  "endLine": 13,
                  "endColumn": 16,
                  "snippet": {
                    "text": "# The CBMC Starter Kit depends on the files Makefile.common and\n# run-cbmc-proofs.py.  They are installed by the setup script\n# cbmc-starter-kit-setup and updated to the latest version by the\n# update script cbmc-starter-kit-update.  For more information about\n# the starter kit and these files and these scripts, see\n# https://model-checking.github.io/cbmc-starter-kit\n#\n",
                    "rendered": {
                      "text": "# The CBMC Starter Kit depends on the files Makefile.common and\n# run-cbmc-proofs.py.  They are installed by the setup script\n# cbmc-starter-kit-setup and updated to the latest version by the\n# update script cbmc-starter-kit-update.  For more information about\n# the starter kit and these files and these scripts, see\n# https://model-checking.github.io/cbmc-starter-kit\n#\n",
                      "markdown": "`# The CBMC Starter Kit depends on the files Makefile.common and\n# run-cbmc-proofs.py.  They are installed by the setup script\n# cbmc-starter-kit-setup and updated to the latest version by the\n# update script cbmc-starter-kit-update.  For more information about\n# the starter kit and these files and these scripts, see\n# https://model-checking.github.io/cbmc-starter-kit\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/Makefile.common"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 54,
                  "endLine": 12,
                  "snippet": {
                    "text": "\n################################################################\n# The CBMC Starter Kit depends on the files Makefile.common and\n# run-cbmc-proofs.py.  They are installed by the setup script\n# cbmc-starter-kit-setup and updated to the latest version by the\n# update script cbmc-starter-kit-update.  For more information about\n# the starter kit and these files and these scripts, see\n# https://model-checking.github.io/cbmc-starter-kit\n",
                    "rendered": {
                      "text": "\n################################################################\n# The CBMC Starter Kit depends on the files Makefile.common and\n# run-cbmc-proofs.py.  They are installed by the setup script\n# cbmc-starter-kit-setup and updated to the latest version by the\n# update script cbmc-starter-kit-update.  For more information about\n# the starter kit and these files and these scripts, see\n# https://model-checking.github.io/cbmc-starter-kit\n",
                      "markdown": "`\n################################################################\n# The CBMC Starter Kit depends on the files Makefile.common and\n# run-cbmc-proofs.py.  They are installed by the setup script\n# cbmc-starter-kit-setup and updated to the latest version by the\n# update script cbmc-starter-kit-update.  For more information about\n# the starter kit and these files and these scripts, see\n# https://model-checking.github.io/cbmc-starter-kit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/Makefile.common"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 25,
                  "endLine": 2,
                  "endColumn": 32,
                  "snippet": {
                    "text": "# -*- mode: makefile -*-\n# The first line sets the emacs major mode to Makefile\n\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: MIT-0\n",
                    "rendered": {
                      "text": "# -*- mode: makefile -*-\n# The first line sets the emacs major mode to Makefile\n\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: MIT-0\n",
                      "markdown": "`# -*- mode: makefile -*-\n# The first line sets the emacs major mode to Makefile\n\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: MIT-0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/proofs/Makefile-project-testing"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 25,
                  "endLine": 2,
                  "endColumn": 32,
                  "snippet": {
                    "text": "# -*- mode: makefile -*-\n# The first line sets the emacs major mode to Makefile\n\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n",
                    "rendered": {
                      "text": "# -*- mode: makefile -*-\n# The first line sets the emacs major mode to Makefile\n\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n",
                      "markdown": "`# -*- mode: makefile -*-\n# The first line sets the emacs major mode to Makefile\n\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/README.md"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 3,
                  "endLine": 40,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\nYou can clean up the local CBMC Batch bookkeeping files by running\n\n    bash cbmc-batch.sh --cleanup\n",
                    "rendered": {
                      "text": "\nYou can clean up the local CBMC Batch bookkeeping files by running\n\n    bash cbmc-batch.sh --cleanup\n",
                      "markdown": "`\nYou can clean up the local CBMC Batch bookkeeping files by running\n\n    bash cbmc-batch.sh --cleanup\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/README.md"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nYou can then check CBMC Batch results locally by running\n\n\tbash cbmc-batch.sh --end\n\nThis will run until all the jobs have finished and output results in `results.txt`.\n\n",
                    "rendered": {
                      "text": "\nYou can then check CBMC Batch results locally by running\n\n\tbash cbmc-batch.sh --end\n\nThis will run until all the jobs have finished and output results in `results.txt`.\n\n",
                      "markdown": "`\nYou can then check CBMC Batch results locally by running\n\n\tbash cbmc-batch.sh --end\n\nThis will run until all the jobs have finished and output results in `results.txt`.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/README.md"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 3,
                  "endLine": 30,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\nYou can start the CBMC Batch jobs locally by running\n\n    bash cbmc-batch.sh --start\n\nYou can then check CBMC Batch results locally by running\n\n",
                    "rendered": {
                      "text": "\nYou can start the CBMC Batch jobs locally by running\n\n    bash cbmc-batch.sh --start\n\nYou can then check CBMC Batch results locally by running\n\n",
                      "markdown": "`\nYou can start the CBMC Batch jobs locally by running\n\n    bash cbmc-batch.sh --start\n\nYou can then check CBMC Batch results locally by running\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/README.md"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 3,
                  "endLine": 40,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\nYou can clean up the local CBMC Batch bookkeeping files by running\n\n    bash cbmc-batch.sh --cleanup\n",
                    "rendered": {
                      "text": "\nYou can clean up the local CBMC Batch bookkeeping files by running\n\n    bash cbmc-batch.sh --cleanup\n",
                      "markdown": "`\nYou can clean up the local CBMC Batch bookkeeping files by running\n\n    bash cbmc-batch.sh --cleanup\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/README.md"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nYou can then check CBMC Batch results locally by running\n\n\tbash cbmc-batch.sh --end\n\nThis will run until all the jobs have finished and output results in `results.txt`.\n\n",
                    "rendered": {
                      "text": "\nYou can then check CBMC Batch results locally by running\n\n\tbash cbmc-batch.sh --end\n\nThis will run until all the jobs have finished and output results in `results.txt`.\n\n",
                      "markdown": "`\nYou can then check CBMC Batch results locally by running\n\n\tbash cbmc-batch.sh --end\n\nThis will run until all the jobs have finished and output results in `results.txt`.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/verification/cbmc/README.md"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 3,
                  "endLine": 30,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\nYou can start the CBMC Batch jobs locally by running\n\n    bash cbmc-batch.sh --start\n\nYou can then check CBMC Batch results locally by running\n\n",
                    "rendered": {
                      "text": "\nYou can start the CBMC Batch jobs locally by running\n\n    bash cbmc-batch.sh --start\n\nYou can then check CBMC Batch results locally by running\n\n",
                      "markdown": "`\nYou can start the CBMC Batch jobs locally by running\n\n    bash cbmc-batch.sh --start\n\nYou can then check CBMC Batch results locally by running\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/source/android/logging.c"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 29,
                  "endLine": 126,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    va_start(format_args, format);\n\n    char buffer[LOGCAT_MAX_BUFFER_SIZE];\n    struct logcat_format_data fmt = {\n        .buffer = buffer,\n        .total_length = AWS_ARRAY_SIZE(buffer),\n        .format = format,\n",
                    "rendered": {
                      "text": "    va_start(format_args, format);\n\n    char buffer[LOGCAT_MAX_BUFFER_SIZE];\n    struct logcat_format_data fmt = {\n        .buffer = buffer,\n        .total_length = AWS_ARRAY_SIZE(buffer),\n        .format = format,\n",
                      "markdown": "`    va_start(format_args, format);\n\n    char buffer[LOGCAT_MAX_BUFFER_SIZE];\n    struct logcat_format_data fmt = {\n        .buffer = buffer,\n        .total_length = AWS_ARRAY_SIZE(buffer),\n        .format = format,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/source/byte_buf.c"
                },
                "region": {
                  "startLine": 627,
                  "startColumn": 83,
                  "endLine": 627,
                  "endColumn": 87,
                  "snippet": {
                    "text": "    AWS_PRECONDITION(aws_byte_buf_is_valid(to));\n    AWS_PRECONDITION(aws_byte_cursor_is_valid(from));\n    AWS_PRECONDITION(\n        AWS_MEM_IS_READABLE(lookup_table, 256), \"Input array [lookup_table] must be at least 256 bytes long.\");\n\n    if (to->capacity - to->len < from->len) {\n        AWS_POSTCONDITION(aws_byte_buf_is_valid(to));\n",
                    "rendered": {
                      "text": "    AWS_PRECONDITION(aws_byte_buf_is_valid(to));\n    AWS_PRECONDITION(aws_byte_cursor_is_valid(from));\n    AWS_PRECONDITION(\n        AWS_MEM_IS_READABLE(lookup_table, 256), \"Input array [lookup_table] must be at least 256 bytes long.\");\n\n    if (to->capacity - to->len < from->len) {\n        AWS_POSTCONDITION(aws_byte_buf_is_valid(to));\n",
                      "markdown": "`    AWS_PRECONDITION(aws_byte_buf_is_valid(to));\n    AWS_PRECONDITION(aws_byte_cursor_is_valid(from));\n    AWS_PRECONDITION(\n        AWS_MEM_IS_READABLE(lookup_table, 256), \"Input array [lookup_table] must be at least 256 bytes long.\");\n\n    if (to->capacity - to->len < from->len) {\n        AWS_POSTCONDITION(aws_byte_buf_is_valid(to));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/source/hash_table.c"
                },
                "region": {
                  "startLine": 867,
                  "startColumn": 66,
                  "endLine": 867,
                  "endColumn": 70,
                  "snippet": {
                    "text": "    AWS_PRECONDITION(aws_hash_iter_is_valid(iter));\n    AWS_PRECONDITION(\n        iter->map->p_impl->entry_count > 0,\n        \"The hash_table_state pointed by input [iter] must contain at least one entry.\");\n\n    struct hash_table_state *state = iter->map->p_impl;\n    if (destroy_contents) {\n",
                    "rendered": {
                      "text": "    AWS_PRECONDITION(aws_hash_iter_is_valid(iter));\n    AWS_PRECONDITION(\n        iter->map->p_impl->entry_count > 0,\n        \"The hash_table_state pointed by input [iter] must contain at least one entry.\");\n\n    struct hash_table_state *state = iter->map->p_impl;\n    if (destroy_contents) {\n",
                      "markdown": "`    AWS_PRECONDITION(aws_hash_iter_is_valid(iter));\n    AWS_PRECONDITION(\n        iter->map->p_impl->entry_count > 0,\n        \"The hash_table_state pointed by input [iter] must contain at least one entry.\");\n\n    struct hash_table_state *state = iter->map->p_impl;\n    if (destroy_contents) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 24,
                  "endLine": 26,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                    "rendered": {
                      "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                      "markdown": "`\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                    "rendered": {
                      "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                      "markdown": "`fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                    "rendered": {
                      "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                      "markdown": "`\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                    "rendered": {
                      "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                      "markdown": "`\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                    "rendered": {
                      "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                      "markdown": "`\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                    "rendered": {
                      "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                      "markdown": "`then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 2,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/pre-applypatch.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/pre-receive.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                      "markdown": "`\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                    "rendered": {
                      "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                      "markdown": "`\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 15,
                  "endLine": 77,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                    "rendered": {
                      "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                      "markdown": "`#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 27,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                    "rendered": {
                      "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                      "markdown": "`\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                      "markdown": "`\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                    "rendered": {
                      "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                      "markdown": "`# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                    "rendered": {
                      "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                      "markdown": "`# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                    "rendered": {
                      "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                      "markdown": "`\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/applypatch-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 45,
                  "endLine": 13,
                  "endColumn": 53,
                  "snippet": {
                    "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                    "rendered": {
                      "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                      "markdown": "`#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 51,
                  "endLine": 12,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                    "rendered": {
                      "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                      "markdown": "`# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 53,
                  "endLine": 11,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                    "rendered": {
                      "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                      "markdown": "`# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                    "rendered": {
                      "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                      "markdown": "`\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                    "rendered": {
                      "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                      "markdown": "`\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 30,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                    "rendered": {
                      "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                      "markdown": "`\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 28,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                    "rendered": {
                      "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                      "markdown": "`\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                    "rendered": {
                      "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                      "markdown": "`\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 45,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                    "rendered": {
                      "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                      "markdown": "`use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                    "rendered": {
                      "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                      "markdown": "`use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                    "rendered": {
                      "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                      "markdown": "`# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 37,
                  "endLine": 37,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                    "rendered": {
                      "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                      "markdown": "`#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                    "rendered": {
                      "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                      "markdown": "`# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                    "rendered": {
                      "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                      "markdown": "`# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 39,
                  "endLine": 89,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                    "rendered": {
                      "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                      "markdown": "`\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                    "rendered": {
                      "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                      "markdown": "`\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/pre-merge-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 45,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                    "rendered": {
                      "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                      "markdown": "`\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 29,
                  "endLine": 151,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                    "rendered": {
                      "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                      "markdown": "` * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                    "rendered": {
                      "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                      "markdown": "`    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 104,
                  "snippet": {
                    "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                    "rendered": {
                      "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                      "markdown": "`\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                    "rendered": {
                      "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                      "markdown": "`\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                    "rendered": {
                      "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                      "markdown": "`To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                    "rendered": {
                      "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                      "markdown": "`\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                    "rendered": {
                      "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                      "markdown": "`\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 42,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                    "rendered": {
                      "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                      "markdown": "`   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                      "markdown": "`# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 9,
                  "snippet": {
                    "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                    "rendered": {
                      "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                      "markdown": "`esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 26,
                  "snippet": {
                    "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                    "rendered": {
                      "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                      "markdown": "`\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                    "rendered": {
                      "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                      "markdown": "`\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                    "rendered": {
                      "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                      "markdown": "`unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                    "rendered": {
                      "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                      "markdown": "`\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                    "rendered": {
                      "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                      "markdown": "`\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                    "rendered": {
                      "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                      "markdown": "`if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                    "rendered": {
                      "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                      "markdown": "`validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 21,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                    "rendered": {
                      "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                      "markdown": "`# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "endLine": 15,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                    "rendered": {
                      "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                      "markdown": "`# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.git/info/exclude"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                    "rendered": {
                      "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                      "markdown": "`# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/source/system_info.c"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 18,
                  "endLine": 78,
                  "endColumn": 33,
                  "snippet": {
                    "text": "}\n\nAWS_COMMON_API\nsize_t aws_system_environment_get_cpu_group_count(const struct aws_system_environment *env) {\n    return env->cpu_group_count;\n}\n",
                    "rendered": {
                      "text": "}\n\nAWS_COMMON_API\nsize_t aws_system_environment_get_cpu_group_count(const struct aws_system_environment *env) {\n    return env->cpu_group_count;\n}\n",
                      "markdown": "`}\n\nAWS_COMMON_API\nsize_t aws_system_environment_get_cpu_group_count(const struct aws_system_environment *env) {\n    return env->cpu_group_count;\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/source/system_info.c"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 18,
                  "endLine": 73,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    return aws_byte_cursor_trim_pred(&product_name_str, aws_char_is_space);\n}\n\nsize_t aws_system_environment_get_processor_count(struct aws_system_environment *env) {\n    return env->cpu_count;\n}\n\n",
                    "rendered": {
                      "text": "    return aws_byte_cursor_trim_pred(&product_name_str, aws_char_is_space);\n}\n\nsize_t aws_system_environment_get_processor_count(struct aws_system_environment *env) {\n    return env->cpu_count;\n}\n\n",
                      "markdown": "`    return aws_byte_cursor_trim_pred(&product_name_str, aws_char_is_space);\n}\n\nsize_t aws_system_environment_get_processor_count(struct aws_system_environment *env) {\n    return env->cpu_count;\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/source/system_info.c"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 34,
                  "endLine": 67,
                  "endColumn": 49,
                  "snippet": {
                    "text": "    return aws_byte_cursor_trim_pred(&vendor_string, aws_char_is_space);\n}\n\nstruct aws_byte_cursor aws_system_environment_get_virtualization_product_name(\n    const struct aws_system_environment *env) {\n    struct aws_byte_cursor product_name_str = aws_byte_cursor_from_buf(&env->product_name);\n    return aws_byte_cursor_trim_pred(&product_name_str, aws_char_is_space);\n",
                    "rendered": {
                      "text": "    return aws_byte_cursor_trim_pred(&vendor_string, aws_char_is_space);\n}\n\nstruct aws_byte_cursor aws_system_environment_get_virtualization_product_name(\n    const struct aws_system_environment *env) {\n    struct aws_byte_cursor product_name_str = aws_byte_cursor_from_buf(&env->product_name);\n    return aws_byte_cursor_trim_pred(&product_name_str, aws_char_is_space);\n",
                      "markdown": "`    return aws_byte_cursor_trim_pred(&vendor_string, aws_char_is_space);\n}\n\nstruct aws_byte_cursor aws_system_environment_get_virtualization_product_name(\n    const struct aws_system_environment *env) {\n    struct aws_byte_cursor product_name_str = aws_byte_cursor_from_buf(&env->product_name);\n    return aws_byte_cursor_trim_pred(&product_name_str, aws_char_is_space);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/source/system_info.c"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 34,
                  "endLine": 62,
                  "endColumn": 49,
                  "snippet": {
                    "text": "    aws_ref_count_release(&env->ref_count);\n}\n\nstruct aws_byte_cursor aws_system_environment_get_virtualization_vendor(const struct aws_system_environment *env) {\n    struct aws_byte_cursor vendor_string = aws_byte_cursor_from_buf(&env->virtualization_vendor);\n    return aws_byte_cursor_trim_pred(&vendor_string, aws_char_is_space);\n}\n",
                    "rendered": {
                      "text": "    aws_ref_count_release(&env->ref_count);\n}\n\nstruct aws_byte_cursor aws_system_environment_get_virtualization_vendor(const struct aws_system_environment *env) {\n    struct aws_byte_cursor vendor_string = aws_byte_cursor_from_buf(&env->virtualization_vendor);\n    return aws_byte_cursor_trim_pred(&vendor_string, aws_char_is_space);\n}\n",
                      "markdown": "`    aws_ref_count_release(&env->ref_count);\n}\n\nstruct aws_byte_cursor aws_system_environment_get_virtualization_vendor(const struct aws_system_environment *env) {\n    struct aws_byte_cursor vendor_string = aws_byte_cursor_from_buf(&env->virtualization_vendor);\n    return aws_byte_cursor_trim_pred(&vendor_string, aws_char_is_space);\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/source/system_info.c"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 4,
                  "endLine": 45,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\n    env->os = aws_get_platform_build_os();\n    env->cpu_count = aws_system_info_processor_count();\n    env->cpu_group_count = aws_get_cpu_group_count();\n\n    return env;\nerror:\n",
                    "rendered": {
                      "text": "\n    env->os = aws_get_platform_build_os();\n    env->cpu_count = aws_system_info_processor_count();\n    env->cpu_group_count = aws_get_cpu_group_count();\n\n    return env;\nerror:\n",
                      "markdown": "`\n    env->os = aws_get_platform_build_os();\n    env->cpu_count = aws_system_info_processor_count();\n    env->cpu_group_count = aws_get_cpu_group_count();\n\n    return env;\nerror:\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/source/system_info.c"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 4,
                  "endLine": 43,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        (void *)env,\n        AWS_BYTE_CURSOR_PRI(aws_system_environment_get_virtualization_vendor(env)));\n\n    env->os = aws_get_platform_build_os();\n    env->cpu_count = aws_system_info_processor_count();\n    env->cpu_group_count = aws_get_cpu_group_count();\n\n",
                    "rendered": {
                      "text": "        (void *)env,\n        AWS_BYTE_CURSOR_PRI(aws_system_environment_get_virtualization_vendor(env)));\n\n    env->os = aws_get_platform_build_os();\n    env->cpu_count = aws_system_info_processor_count();\n    env->cpu_group_count = aws_get_cpu_group_count();\n\n",
                      "markdown": "`        (void *)env,\n        AWS_BYTE_CURSOR_PRI(aws_system_environment_get_virtualization_vendor(env)));\n\n    env->os = aws_get_platform_build_os();\n    env->cpu_count = aws_system_info_processor_count();\n    env->cpu_group_count = aws_get_cpu_group_count();\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/source/system_info.c"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 39,
                  "endLine": 41,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        AWS_LS_COMMON_GENERAL,\n        \"id=%p: virtualization product name detected as \\\"\" PRInSTR \" \\\"\",\n        (void *)env,\n        AWS_BYTE_CURSOR_PRI(aws_system_environment_get_virtualization_vendor(env)));\n\n    env->os = aws_get_platform_build_os();\n    env->cpu_count = aws_system_info_processor_count();\n",
                    "rendered": {
                      "text": "        AWS_LS_COMMON_GENERAL,\n        \"id=%p: virtualization product name detected as \\\"\" PRInSTR \" \\\"\",\n        (void *)env,\n        AWS_BYTE_CURSOR_PRI(aws_system_environment_get_virtualization_vendor(env)));\n\n    env->os = aws_get_platform_build_os();\n    env->cpu_count = aws_system_info_processor_count();\n",
                      "markdown": "`        AWS_LS_COMMON_GENERAL,\n        \"id=%p: virtualization product name detected as \\\"\" PRInSTR \" \\\"\",\n        (void *)env,\n        AWS_BYTE_CURSOR_PRI(aws_system_environment_get_virtualization_vendor(env)));\n\n    env->os = aws_get_platform_build_os();\n    env->cpu_count = aws_system_info_processor_count();\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/source/system_info.c"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 39,
                  "endLine": 36,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        AWS_LS_COMMON_GENERAL,\n        \"id=%p: virtualization vendor detected as \\\"\" PRInSTR \"\\\"\",\n        (void *)env,\n        AWS_BYTE_CURSOR_PRI(aws_system_environment_get_virtualization_vendor(env)));\n    AWS_LOGF_TRACE(\n        AWS_LS_COMMON_GENERAL,\n        \"id=%p: virtualization product name detected as \\\"\" PRInSTR \" \\\"\",\n",
                    "rendered": {
                      "text": "        AWS_LS_COMMON_GENERAL,\n        \"id=%p: virtualization vendor detected as \\\"\" PRInSTR \"\\\"\",\n        (void *)env,\n        AWS_BYTE_CURSOR_PRI(aws_system_environment_get_virtualization_vendor(env)));\n    AWS_LOGF_TRACE(\n        AWS_LS_COMMON_GENERAL,\n        \"id=%p: virtualization product name detected as \\\"\" PRInSTR \" \\\"\",\n",
                      "markdown": "`        AWS_LS_COMMON_GENERAL,\n        \"id=%p: virtualization vendor detected as \\\"\" PRInSTR \"\\\"\",\n        (void *)env,\n        AWS_BYTE_CURSOR_PRI(aws_system_environment_get_virtualization_vendor(env)));\n    AWS_LOGF_TRACE(\n        AWS_LS_COMMON_GENERAL,\n        \"id=%p: virtualization product name detected as \\\"\" PRInSTR \" \\\"\",\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/source/task_scheduler.c"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 55,
                  "endLine": 157,
                  "endColumn": 59,
                  "snippet": {
                    "text": "\n    AWS_LOGF_TRACE(\n        AWS_LS_COMMON_TASK_SCHEDULER,\n        \"id=%p: Scheduling %s task for future execution at time %\" PRIu64,\n        (void *)task,\n        task->type_tag,\n        time_to_run);\n",
                    "rendered": {
                      "text": "\n    AWS_LOGF_TRACE(\n        AWS_LS_COMMON_TASK_SCHEDULER,\n        \"id=%p: Scheduling %s task for future execution at time %\" PRIu64,\n        (void *)task,\n        task->type_tag,\n        time_to_run);\n",
                      "markdown": "`\n    AWS_LOGF_TRACE(\n        AWS_LS_COMMON_TASK_SCHEDULER,\n        \"id=%p: Scheduling %s task for future execution at time %\" PRIu64,\n        (void *)task,\n        task->type_tag,\n        time_to_run);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/source/task_scheduler.c"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 58,
                  "endLine": 157,
                  "endColumn": 64,
                  "snippet": {
                    "text": "\n    AWS_LOGF_TRACE(\n        AWS_LS_COMMON_TASK_SCHEDULER,\n        \"id=%p: Scheduling %s task for future execution at time %\" PRIu64,\n        (void *)task,\n        task->type_tag,\n        time_to_run);\n",
                    "rendered": {
                      "text": "\n    AWS_LOGF_TRACE(\n        AWS_LS_COMMON_TASK_SCHEDULER,\n        \"id=%p: Scheduling %s task for future execution at time %\" PRIu64,\n        (void *)task,\n        task->type_tag,\n        time_to_run);\n",
                      "markdown": "`\n    AWS_LOGF_TRACE(\n        AWS_LS_COMMON_TASK_SCHEDULER,\n        \"id=%p: Scheduling %s task for future execution at time %\" PRIu64,\n        (void *)task,\n        task->type_tag,\n        time_to_run);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/source/logging.c"
                },
                "region": {
                  "startLine": 401,
                  "startColumn": 38,
                  "endLine": 401,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        const struct aws_log_subject_info *info = &log_subject_list->subject_list[i];\n        uint32_t expected_id = min_range + i;\n        if (expected_id != info->subject_id) {\n            fprintf(stderr, \"\\\"%s\\\" is at wrong index in aws_log_subject_info[]\\n\", info->subject_name);\n            AWS_FATAL_ASSERT(0);\n        }\n    }\n",
                    "rendered": {
                      "text": "        const struct aws_log_subject_info *info = &log_subject_list->subject_list[i];\n        uint32_t expected_id = min_range + i;\n        if (expected_id != info->subject_id) {\n            fprintf(stderr, \"\\\"%s\\\" is at wrong index in aws_log_subject_info[]\\n\", info->subject_name);\n            AWS_FATAL_ASSERT(0);\n        }\n    }\n",
                      "markdown": "`        const struct aws_log_subject_info *info = &log_subject_list->subject_list[i];\n        uint32_t expected_id = min_range + i;\n        if (expected_id != info->subject_id) {\n            fprintf(stderr, \"\\\"%s\\\" is at wrong index in aws_log_subject_info[]\\n\", info->subject_name);\n            AWS_FATAL_ASSERT(0);\n        }\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/logging/log_channel_test.c"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 73,
                  "endLine": 209,
                  "endColumn": 79,
                  "snippet": {
                    "text": "\nAWS_STATIC_STRING_FROM_LITERAL(s_log_line_simple, \"A simple line.\\n\");\nAWS_STATIC_STRING_FROM_LITERAL(s_log_line_multiline, \"There's\\na lot\\n\\tof snow outside.\\n\");\nAWS_STATIC_STRING_FROM_LITERAL(s_log_line_fake, \"[DEBUG] [??] [1234567] - Time to crash\\n\");\n\nconst struct aws_string **s_channel_test_one_line[] = {&s_log_line_1};\n\n",
                    "rendered": {
                      "text": "\nAWS_STATIC_STRING_FROM_LITERAL(s_log_line_simple, \"A simple line.\\n\");\nAWS_STATIC_STRING_FROM_LITERAL(s_log_line_multiline, \"There's\\na lot\\n\\tof snow outside.\\n\");\nAWS_STATIC_STRING_FROM_LITERAL(s_log_line_fake, \"[DEBUG] [??] [1234567] - Time to crash\\n\");\n\nconst struct aws_string **s_channel_test_one_line[] = {&s_log_line_1};\n\n",
                      "markdown": "`\nAWS_STATIC_STRING_FROM_LITERAL(s_log_line_simple, \"A simple line.\\n\");\nAWS_STATIC_STRING_FROM_LITERAL(s_log_line_multiline, \"There's\\na lot\\n\\tof snow outside.\\n\");\nAWS_STATIC_STRING_FROM_LITERAL(s_log_line_fake, \"[DEBUG] [??] [1234567] - Time to crash\\n\");\n\nconst struct aws_string **s_channel_test_one_line[] = {&s_log_line_1};\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/byte_cursor_find_test.c"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 68,
                  "endLine": 36,
                  "endColumn": 74,
                  "snippet": {
                    "text": "    (void)allocator;\n    (void)ctx;\n\n    const char *string_with_match = \"This is a string and we want to find a substring of it.\";\n    const char *to_find = \"and we went\";\n\n    struct aws_byte_cursor string_with_match_cur = aws_byte_cursor_from_c_str(string_with_match);\n",
                    "rendered": {
                      "text": "    (void)allocator;\n    (void)ctx;\n\n    const char *string_with_match = \"This is a string and we want to find a substring of it.\";\n    const char *to_find = \"and we went\";\n\n    struct aws_byte_cursor string_with_match_cur = aws_byte_cursor_from_c_str(string_with_match);\n",
                      "markdown": "`    (void)allocator;\n    (void)ctx;\n\n    const char *string_with_match = \"This is a string and we want to find a substring of it.\";\n    const char *to_find = \"and we went\";\n\n    struct aws_byte_cursor string_with_match_cur = aws_byte_cursor_from_c_str(string_with_match);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/byte_cursor_find_test.c"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 68,
                  "endLine": 13,
                  "endColumn": 74,
                  "snippet": {
                    "text": "    (void)allocator;\n    (void)ctx;\n\n    const char *string_with_match = \"This is a string and we want to find a substring of it.\";\n    const char *to_find = \"and we want\";\n\n    struct aws_byte_cursor string_with_match_cur = aws_byte_cursor_from_c_str(string_with_match);\n",
                    "rendered": {
                      "text": "    (void)allocator;\n    (void)ctx;\n\n    const char *string_with_match = \"This is a string and we want to find a substring of it.\";\n    const char *to_find = \"and we want\";\n\n    struct aws_byte_cursor string_with_match_cur = aws_byte_cursor_from_c_str(string_with_match);\n",
                      "markdown": "`    (void)allocator;\n    (void)ctx;\n\n    const char *string_with_match = \"This is a string and we want to find a substring of it.\";\n    const char *to_find = \"and we want\";\n\n    struct aws_byte_cursor string_with_match_cur = aws_byte_cursor_from_c_str(string_with_match);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/string_test.c"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 55,
                  "endLine": 118,
                  "endColumn": 59,
                  "snippet": {
                    "text": "    ASSERT_INT_EQUALS(\n        aws_string_bytes(binary_string)[binary_string->len],\n        0x00,\n        \"String from binary array should have null byte at end\");\n    aws_string_destroy(binary_string);\n    return 0;\n}\n",
                    "rendered": {
                      "text": "    ASSERT_INT_EQUALS(\n        aws_string_bytes(binary_string)[binary_string->len],\n        0x00,\n        \"String from binary array should have null byte at end\");\n    aws_string_destroy(binary_string);\n    return 0;\n}\n",
                      "markdown": "`    ASSERT_INT_EQUALS(\n        aws_string_bytes(binary_string)[binary_string->len],\n        0x00,\n        \"String from binary array should have null byte at end\");\n    aws_string_destroy(binary_string);\n    return 0;\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/string_test.c"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 51,
                  "endLine": 42,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    ASSERT_INT_EQUALS(\n        aws_string_bytes(test_string_2)[test_string_2->len],\n        '\\0',\n        \"String from C-string should have null byte at end.\");\n\n    /* Test: strings from first two tests are equal and have same hashes. */\n    ASSERT_TRUE(aws_string_eq(test_string_1, test_string_2), \"Buffers should be equal.\");\n",
                    "rendered": {
                      "text": "    ASSERT_INT_EQUALS(\n        aws_string_bytes(test_string_2)[test_string_2->len],\n        '\\0',\n        \"String from C-string should have null byte at end.\");\n\n    /* Test: strings from first two tests are equal and have same hashes. */\n    ASSERT_TRUE(aws_string_eq(test_string_1, test_string_2), \"Buffers should be equal.\");\n",
                      "markdown": "`    ASSERT_INT_EQUALS(\n        aws_string_bytes(test_string_2)[test_string_2->len],\n        '\\0',\n        \"String from C-string should have null byte at end.\");\n\n    /* Test: strings from first two tests are equal and have same hashes. */\n    ASSERT_TRUE(aws_string_eq(test_string_1, test_string_2), \"Buffers should be equal.\");\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/string_test.c"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 103,
                  "endLine": 26,
                  "endColumn": 107,
                  "snippet": {
                    "text": "        8,\n        \"Data bytes should have been set correctly.\");\n    ASSERT_INT_EQUALS(\n        aws_string_bytes(test_string_1)[test_string_1->len], '\\0', \"Static string should have null byte at end.\");\n\n    /* Test: string creation works. */\n    struct aws_string *test_string_2 = aws_string_new_from_c_str(allocator, \"foofaraw\");\n",
                    "rendered": {
                      "text": "        8,\n        \"Data bytes should have been set correctly.\");\n    ASSERT_INT_EQUALS(\n        aws_string_bytes(test_string_1)[test_string_1->len], '\\0', \"Static string should have null byte at end.\");\n\n    /* Test: string creation works. */\n    struct aws_string *test_string_2 = aws_string_new_from_c_str(allocator, \"foofaraw\");\n",
                      "markdown": "`        8,\n        \"Data bytes should have been set correctly.\");\n    ASSERT_INT_EQUALS(\n        aws_string_bytes(test_string_1)[test_string_1->len], '\\0', \"Static string should have null byte at end.\");\n\n    /* Test: string creation works. */\n    struct aws_string *test_string_2 = aws_string_new_from_c_str(allocator, \"foofaraw\");\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/hash_table_test.c"
                },
                "region": {
                  "startLine": 571,
                  "startColumn": 80,
                  "endLine": 571,
                  "endColumn": 84,
                  "snippet": {
                    "text": "    err_code = aws_hash_table_remove(&hash_table, (void *)TEST_STR_2, NULL, NULL);\n    ASSERT_SUCCESS(err_code, \"Remove should have succeeded.\");\n    ASSERT_INT_EQUALS(1, s_key_removal_counter, \"One key should be destroyed at this point\");\n    ASSERT_INT_EQUALS(1, s_value_removal_counter, \"One value should be destroyed at this point\");\n    ASSERT_PTR_EQUALS(s_last_removed_value, TEST_VAL_STR_2, \"Wrong element destroyed\");\n\n    /* If we delete an element that's not there, we shouldn't invoke destroy_fn */\n",
                    "rendered": {
                      "text": "    err_code = aws_hash_table_remove(&hash_table, (void *)TEST_STR_2, NULL, NULL);\n    ASSERT_SUCCESS(err_code, \"Remove should have succeeded.\");\n    ASSERT_INT_EQUALS(1, s_key_removal_counter, \"One key should be destroyed at this point\");\n    ASSERT_INT_EQUALS(1, s_value_removal_counter, \"One value should be destroyed at this point\");\n    ASSERT_PTR_EQUALS(s_last_removed_value, TEST_VAL_STR_2, \"Wrong element destroyed\");\n\n    /* If we delete an element that's not there, we shouldn't invoke destroy_fn */\n",
                      "markdown": "`    err_code = aws_hash_table_remove(&hash_table, (void *)TEST_STR_2, NULL, NULL);\n    ASSERT_SUCCESS(err_code, \"Remove should have succeeded.\");\n    ASSERT_INT_EQUALS(1, s_key_removal_counter, \"One key should be destroyed at this point\");\n    ASSERT_INT_EQUALS(1, s_value_removal_counter, \"One value should be destroyed at this point\");\n    ASSERT_PTR_EQUALS(s_last_removed_value, TEST_VAL_STR_2, \"Wrong element destroyed\");\n\n    /* If we delete an element that's not there, we shouldn't invoke destroy_fn */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/hash_table_test.c"
                },
                "region": {
                  "startLine": 570,
                  "startColumn": 76,
                  "endLine": 570,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    /* If we delete and discard the element, destroy_fn should be invoked */\n    err_code = aws_hash_table_remove(&hash_table, (void *)TEST_STR_2, NULL, NULL);\n    ASSERT_SUCCESS(err_code, \"Remove should have succeeded.\");\n    ASSERT_INT_EQUALS(1, s_key_removal_counter, \"One key should be destroyed at this point\");\n    ASSERT_INT_EQUALS(1, s_value_removal_counter, \"One value should be destroyed at this point\");\n    ASSERT_PTR_EQUALS(s_last_removed_value, TEST_VAL_STR_2, \"Wrong element destroyed\");\n\n",
                    "rendered": {
                      "text": "    /* If we delete and discard the element, destroy_fn should be invoked */\n    err_code = aws_hash_table_remove(&hash_table, (void *)TEST_STR_2, NULL, NULL);\n    ASSERT_SUCCESS(err_code, \"Remove should have succeeded.\");\n    ASSERT_INT_EQUALS(1, s_key_removal_counter, \"One key should be destroyed at this point\");\n    ASSERT_INT_EQUALS(1, s_value_removal_counter, \"One value should be destroyed at this point\");\n    ASSERT_PTR_EQUALS(s_last_removed_value, TEST_VAL_STR_2, \"Wrong element destroyed\");\n\n",
                      "markdown": "`    /* If we delete and discard the element, destroy_fn should be invoked */\n    err_code = aws_hash_table_remove(&hash_table, (void *)TEST_STR_2, NULL, NULL);\n    ASSERT_SUCCESS(err_code, \"Remove should have succeeded.\");\n    ASSERT_INT_EQUALS(1, s_key_removal_counter, \"One key should be destroyed at this point\");\n    ASSERT_INT_EQUALS(1, s_value_removal_counter, \"One value should be destroyed at this point\");\n    ASSERT_PTR_EQUALS(s_last_removed_value, TEST_VAL_STR_2, \"Wrong element destroyed\");\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/hash_table_test.c"
                },
                "region": {
                  "startLine": 555,
                  "startColumn": 80,
                  "endLine": 555,
                  "endColumn": 84,
                  "snippet": {
                    "text": "    err_code = aws_hash_table_remove(&hash_table, (void *)TEST_STR_1, &elem, &was_present);\n    ASSERT_SUCCESS(err_code, \"Hash Map remove should have succeeded.\");\n    ASSERT_INT_EQUALS(0, s_key_removal_counter, \"No keys should be destroyed at this point\");\n    ASSERT_INT_EQUALS(0, s_value_removal_counter, \"No values should be destroyed at this point\");\n    ASSERT_INT_EQUALS(1, was_present, \"Item should have been removed\");\n\n    err_code = aws_hash_table_find(&hash_table, (void *)TEST_STR_1, &pElem);\n",
                    "rendered": {
                      "text": "    err_code = aws_hash_table_remove(&hash_table, (void *)TEST_STR_1, &elem, &was_present);\n    ASSERT_SUCCESS(err_code, \"Hash Map remove should have succeeded.\");\n    ASSERT_INT_EQUALS(0, s_key_removal_counter, \"No keys should be destroyed at this point\");\n    ASSERT_INT_EQUALS(0, s_value_removal_counter, \"No values should be destroyed at this point\");\n    ASSERT_INT_EQUALS(1, was_present, \"Item should have been removed\");\n\n    err_code = aws_hash_table_find(&hash_table, (void *)TEST_STR_1, &pElem);\n",
                      "markdown": "`    err_code = aws_hash_table_remove(&hash_table, (void *)TEST_STR_1, &elem, &was_present);\n    ASSERT_SUCCESS(err_code, \"Hash Map remove should have succeeded.\");\n    ASSERT_INT_EQUALS(0, s_key_removal_counter, \"No keys should be destroyed at this point\");\n    ASSERT_INT_EQUALS(0, s_value_removal_counter, \"No values should be destroyed at this point\");\n    ASSERT_INT_EQUALS(1, was_present, \"Item should have been removed\");\n\n    err_code = aws_hash_table_find(&hash_table, (void *)TEST_STR_1, &pElem);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/hash_table_test.c"
                },
                "region": {
                  "startLine": 554,
                  "startColumn": 76,
                  "endLine": 554,
                  "endColumn": 80,
                  "snippet": {
                    "text": "\n    err_code = aws_hash_table_remove(&hash_table, (void *)TEST_STR_1, &elem, &was_present);\n    ASSERT_SUCCESS(err_code, \"Hash Map remove should have succeeded.\");\n    ASSERT_INT_EQUALS(0, s_key_removal_counter, \"No keys should be destroyed at this point\");\n    ASSERT_INT_EQUALS(0, s_value_removal_counter, \"No values should be destroyed at this point\");\n    ASSERT_INT_EQUALS(1, was_present, \"Item should have been removed\");\n\n",
                    "rendered": {
                      "text": "\n    err_code = aws_hash_table_remove(&hash_table, (void *)TEST_STR_1, &elem, &was_present);\n    ASSERT_SUCCESS(err_code, \"Hash Map remove should have succeeded.\");\n    ASSERT_INT_EQUALS(0, s_key_removal_counter, \"No keys should be destroyed at this point\");\n    ASSERT_INT_EQUALS(0, s_value_removal_counter, \"No values should be destroyed at this point\");\n    ASSERT_INT_EQUALS(1, was_present, \"Item should have been removed\");\n\n",
                      "markdown": "`\n    err_code = aws_hash_table_remove(&hash_table, (void *)TEST_STR_1, &elem, &was_present);\n    ASSERT_SUCCESS(err_code, \"Hash Map remove should have succeeded.\");\n    ASSERT_INT_EQUALS(0, s_key_removal_counter, \"No keys should be destroyed at this point\");\n    ASSERT_INT_EQUALS(0, s_value_removal_counter, \"No values should be destroyed at this point\");\n    ASSERT_INT_EQUALS(1, was_present, \"Item should have been removed\");\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/hash_table_test.c"
                },
                "region": {
                  "startLine": 550,
                  "startColumn": 80,
                  "endLine": 550,
                  "endColumn": 84,
                  "snippet": {
                    "text": "    ASSERT_SUCCESS(err_code, \"Hash Map put should have succeeded.\");\n\n    ASSERT_INT_EQUALS(0, s_key_removal_counter, \"No keys should be destroyed at this point\");\n    ASSERT_INT_EQUALS(0, s_value_removal_counter, \"No values should be destroyed at this point\");\n\n    err_code = aws_hash_table_remove(&hash_table, (void *)TEST_STR_1, &elem, &was_present);\n    ASSERT_SUCCESS(err_code, \"Hash Map remove should have succeeded.\");\n",
                    "rendered": {
                      "text": "    ASSERT_SUCCESS(err_code, \"Hash Map put should have succeeded.\");\n\n    ASSERT_INT_EQUALS(0, s_key_removal_counter, \"No keys should be destroyed at this point\");\n    ASSERT_INT_EQUALS(0, s_value_removal_counter, \"No values should be destroyed at this point\");\n\n    err_code = aws_hash_table_remove(&hash_table, (void *)TEST_STR_1, &elem, &was_present);\n    ASSERT_SUCCESS(err_code, \"Hash Map remove should have succeeded.\");\n",
                      "markdown": "`    ASSERT_SUCCESS(err_code, \"Hash Map put should have succeeded.\");\n\n    ASSERT_INT_EQUALS(0, s_key_removal_counter, \"No keys should be destroyed at this point\");\n    ASSERT_INT_EQUALS(0, s_value_removal_counter, \"No values should be destroyed at this point\");\n\n    err_code = aws_hash_table_remove(&hash_table, (void *)TEST_STR_1, &elem, &was_present);\n    ASSERT_SUCCESS(err_code, \"Hash Map remove should have succeeded.\");\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/hash_table_test.c"
                },
                "region": {
                  "startLine": 549,
                  "startColumn": 76,
                  "endLine": 549,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    err_code = aws_hash_table_create(&hash_table, (void *)TEST_STR_2, &pElem, NULL);\n    ASSERT_SUCCESS(err_code, \"Hash Map put should have succeeded.\");\n\n    ASSERT_INT_EQUALS(0, s_key_removal_counter, \"No keys should be destroyed at this point\");\n    ASSERT_INT_EQUALS(0, s_value_removal_counter, \"No values should be destroyed at this point\");\n\n    err_code = aws_hash_table_remove(&hash_table, (void *)TEST_STR_1, &elem, &was_present);\n",
                    "rendered": {
                      "text": "    err_code = aws_hash_table_create(&hash_table, (void *)TEST_STR_2, &pElem, NULL);\n    ASSERT_SUCCESS(err_code, \"Hash Map put should have succeeded.\");\n\n    ASSERT_INT_EQUALS(0, s_key_removal_counter, \"No keys should be destroyed at this point\");\n    ASSERT_INT_EQUALS(0, s_value_removal_counter, \"No values should be destroyed at this point\");\n\n    err_code = aws_hash_table_remove(&hash_table, (void *)TEST_STR_1, &elem, &was_present);\n",
                      "markdown": "`    err_code = aws_hash_table_create(&hash_table, (void *)TEST_STR_2, &pElem, NULL);\n    ASSERT_SUCCESS(err_code, \"Hash Map put should have succeeded.\");\n\n    ASSERT_INT_EQUALS(0, s_key_removal_counter, \"No keys should be destroyed at this point\");\n    ASSERT_INT_EQUALS(0, s_value_removal_counter, \"No values should be destroyed at this point\");\n\n    err_code = aws_hash_table_remove(&hash_table, (void *)TEST_STR_1, &elem, &was_present);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/hash_table_test.c"
                },
                "region": {
                  "startLine": 397,
                  "startColumn": 84,
                  "endLine": 397,
                  "endColumn": 88,
                  "snippet": {
                    "text": "    AWS_STATIC_STRING_FROM_LITERAL(key_4, \"As of some one gently rapping,\");\n    const struct aws_string *val_4 = aws_string_new_from_c_str(allocator, \"rapping at my chamber door.\");\n    AWS_STATIC_STRING_FROM_LITERAL(key_5, \"\\\"'Tis some visitor,\\\" I muttered,\");\n    const struct aws_string *val_5 = aws_string_new_from_c_str(allocator, \"\\\"tapping at my chamber door--\");\n    AWS_STATIC_STRING_FROM_LITERAL(key_6, \"Only this and nothing more.\\\"\");\n    const struct aws_string *val_6 = aws_string_new_from_c_str(allocator, \"from The Raven by Edgar Allan Poe (1845)\");\n\n",
                    "rendered": {
                      "text": "    AWS_STATIC_STRING_FROM_LITERAL(key_4, \"As of some one gently rapping,\");\n    const struct aws_string *val_4 = aws_string_new_from_c_str(allocator, \"rapping at my chamber door.\");\n    AWS_STATIC_STRING_FROM_LITERAL(key_5, \"\\\"'Tis some visitor,\\\" I muttered,\");\n    const struct aws_string *val_5 = aws_string_new_from_c_str(allocator, \"\\\"tapping at my chamber door--\");\n    AWS_STATIC_STRING_FROM_LITERAL(key_6, \"Only this and nothing more.\\\"\");\n    const struct aws_string *val_6 = aws_string_new_from_c_str(allocator, \"from The Raven by Edgar Allan Poe (1845)\");\n\n",
                      "markdown": "`    AWS_STATIC_STRING_FROM_LITERAL(key_4, \"As of some one gently rapping,\");\n    const struct aws_string *val_4 = aws_string_new_from_c_str(allocator, \"rapping at my chamber door.\");\n    AWS_STATIC_STRING_FROM_LITERAL(key_5, \"\\\"'Tis some visitor,\\\" I muttered,\");\n    const struct aws_string *val_5 = aws_string_new_from_c_str(allocator, \"\\\"tapping at my chamber door--\");\n    AWS_STATIC_STRING_FROM_LITERAL(key_6, \"Only this and nothing more.\\\"\");\n    const struct aws_string *val_6 = aws_string_new_from_c_str(allocator, \"from The Raven by Edgar Allan Poe (1845)\");\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/hash_table_test.c"
                },
                "region": {
                  "startLine": 395,
                  "startColumn": 82,
                  "endLine": 395,
                  "endColumn": 86,
                  "snippet": {
                    "text": "    aws_hash_table_clean_up(&hash_table);\n\n    AWS_STATIC_STRING_FROM_LITERAL(key_4, \"As of some one gently rapping,\");\n    const struct aws_string *val_4 = aws_string_new_from_c_str(allocator, \"rapping at my chamber door.\");\n    AWS_STATIC_STRING_FROM_LITERAL(key_5, \"\\\"'Tis some visitor,\\\" I muttered,\");\n    const struct aws_string *val_5 = aws_string_new_from_c_str(allocator, \"\\\"tapping at my chamber door--\");\n    AWS_STATIC_STRING_FROM_LITERAL(key_6, \"Only this and nothing more.\\\"\");\n",
                    "rendered": {
                      "text": "    aws_hash_table_clean_up(&hash_table);\n\n    AWS_STATIC_STRING_FROM_LITERAL(key_4, \"As of some one gently rapping,\");\n    const struct aws_string *val_4 = aws_string_new_from_c_str(allocator, \"rapping at my chamber door.\");\n    AWS_STATIC_STRING_FROM_LITERAL(key_5, \"\\\"'Tis some visitor,\\\" I muttered,\");\n    const struct aws_string *val_5 = aws_string_new_from_c_str(allocator, \"\\\"tapping at my chamber door--\");\n    AWS_STATIC_STRING_FROM_LITERAL(key_6, \"Only this and nothing more.\\\"\");\n",
                      "markdown": "`    aws_hash_table_clean_up(&hash_table);\n\n    AWS_STATIC_STRING_FROM_LITERAL(key_4, \"As of some one gently rapping,\");\n    const struct aws_string *val_4 = aws_string_new_from_c_str(allocator, \"rapping at my chamber door.\");\n    AWS_STATIC_STRING_FROM_LITERAL(key_5, \"\\\"'Tis some visitor,\\\" I muttered,\");\n    const struct aws_string *val_5 = aws_string_new_from_c_str(allocator, \"\\\"tapping at my chamber door--\");\n    AWS_STATIC_STRING_FROM_LITERAL(key_6, \"Only this and nothing more.\\\"\");\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/hash_table_test.c"
                },
                "region": {
                  "startLine": 1018,
                  "startColumn": 12,
                  "endLine": 1018,
                  "endColumn": 18,
                  "snippet": {
                    "text": "}\n\nstatic long s_timestamp(void) {\n    uint64_t time = 0;\n    aws_sys_clock_get_ticks(&time);\n    return (long)(time / 1000);\n}\n",
                    "rendered": {
                      "text": "}\n\nstatic long s_timestamp(void) {\n    uint64_t time = 0;\n    aws_sys_clock_get_ticks(&time);\n    return (long)(time / 1000);\n}\n",
                      "markdown": "`}\n\nstatic long s_timestamp(void) {\n    uint64_t time = 0;\n    aws_sys_clock_get_ticks(&time);\n    return (long)(time / 1000);\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/encoding_test.c"
                },
                "region": {
                  "startLine": 533,
                  "startColumn": 25,
                  "endLine": 533,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        aws_hex_encode(&original_data, &hex);\n        fprintf(stderr, \"Base64 round-trip failed\\n\");\n        fprintf(stderr, \"Original: %s\\n\", (char *)test_hex);\n        fprintf(stderr, \"Base64  : \");\n        for (size_t i = 0; i < sizeof(test_b64); i++) {\n            if (!test_b64[i]) {\n                break;\n",
                    "rendered": {
                      "text": "        aws_hex_encode(&original_data, &hex);\n        fprintf(stderr, \"Base64 round-trip failed\\n\");\n        fprintf(stderr, \"Original: %s\\n\", (char *)test_hex);\n        fprintf(stderr, \"Base64  : \");\n        for (size_t i = 0; i < sizeof(test_b64); i++) {\n            if (!test_b64[i]) {\n                break;\n",
                      "markdown": "`        aws_hex_encode(&original_data, &hex);\n        fprintf(stderr, \"Base64 round-trip failed\\n\");\n        fprintf(stderr, \"Original: %s\\n\", (char *)test_hex);\n        fprintf(stderr, \"Base64  : \");\n        for (size_t i = 0; i < sizeof(test_b64); i++) {\n            if (!test_b64[i]) {\n                break;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/encoding_test.c"
                },
                "region": {
                  "startLine": 531,
                  "startColumn": 25,
                  "endLine": 531,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\n    if (memcmp(decoded_buf.buffer, original_data.ptr, decoded_buf.len) != 0) {\n        aws_hex_encode(&original_data, &hex);\n        fprintf(stderr, \"Base64 round-trip failed\\n\");\n        fprintf(stderr, \"Original: %s\\n\", (char *)test_hex);\n        fprintf(stderr, \"Base64  : \");\n        for (size_t i = 0; i < sizeof(test_b64); i++) {\n",
                    "rendered": {
                      "text": "\n    if (memcmp(decoded_buf.buffer, original_data.ptr, decoded_buf.len) != 0) {\n        aws_hex_encode(&original_data, &hex);\n        fprintf(stderr, \"Base64 round-trip failed\\n\");\n        fprintf(stderr, \"Original: %s\\n\", (char *)test_hex);\n        fprintf(stderr, \"Base64  : \");\n        for (size_t i = 0; i < sizeof(test_b64); i++) {\n",
                      "markdown": "`\n    if (memcmp(decoded_buf.buffer, original_data.ptr, decoded_buf.len) != 0) {\n        aws_hex_encode(&original_data, &hex);\n        fprintf(stderr, \"Base64 round-trip failed\\n\");\n        fprintf(stderr, \"Original: %s\\n\", (char *)test_hex);\n        fprintf(stderr, \"Base64  : \");\n        for (size_t i = 0; i < sizeof(test_b64); i++) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/encoding_test.c"
                },
                "region": {
                  "startLine": 361,
                  "startColumn": 17,
                  "endLine": 361,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    struct aws_byte_cursor expected_cur = aws_byte_cursor_from_array(expected, expected_size);\n    ASSERT_SUCCESS(\n        aws_base64_compute_decoded_len(&expected_cur, &output_size),\n        \"Compute base64 decoded length failed with %d\",\n        aws_last_error());\n    ASSERT_INT_EQUALS(test_str_size, output_size, \"Output size on string should be %d\", test_str_size);\n\n",
                    "rendered": {
                      "text": "    struct aws_byte_cursor expected_cur = aws_byte_cursor_from_array(expected, expected_size);\n    ASSERT_SUCCESS(\n        aws_base64_compute_decoded_len(&expected_cur, &output_size),\n        \"Compute base64 decoded length failed with %d\",\n        aws_last_error());\n    ASSERT_INT_EQUALS(test_str_size, output_size, \"Output size on string should be %d\", test_str_size);\n\n",
                      "markdown": "`    struct aws_byte_cursor expected_cur = aws_byte_cursor_from_array(expected, expected_size);\n    ASSERT_SUCCESS(\n        aws_base64_compute_decoded_len(&expected_cur, &output_size),\n        \"Compute base64 decoded length failed with %d\",\n        aws_last_error());\n    ASSERT_INT_EQUALS(test_str_size, output_size, \"Output size on string should be %d\", test_str_size);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/encoding_test.c"
                },
                "region": {
                  "startLine": 296,
                  "startColumn": 17,
                  "endLine": 296,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    /* Part 1: encoding */\n    ASSERT_SUCCESS(\n        aws_base64_compute_encoded_len(test_str_size, &output_size),\n        \"Compute base64 encoded length failed with %d\",\n        aws_last_error());\n    ASSERT_INT_EQUALS(terminated_size, output_size, \"Output size on string should be %d\", terminated_size);\n\n",
                    "rendered": {
                      "text": "    /* Part 1: encoding */\n    ASSERT_SUCCESS(\n        aws_base64_compute_encoded_len(test_str_size, &output_size),\n        \"Compute base64 encoded length failed with %d\",\n        aws_last_error());\n    ASSERT_INT_EQUALS(terminated_size, output_size, \"Output size on string should be %d\", terminated_size);\n\n",
                      "markdown": "`    /* Part 1: encoding */\n    ASSERT_SUCCESS(\n        aws_base64_compute_encoded_len(test_str_size, &output_size),\n        \"Compute base64 encoded length failed with %d\",\n        aws_last_error());\n    ASSERT_INT_EQUALS(terminated_size, output_size, \"Output size on string should be %d\", terminated_size);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/encoding_test.c"
                },
                "region": {
                  "startLine": 1315,
                  "startColumn": 55,
                  "endLine": 1315,
                  "endColumn": 75,
                  "snippet": {
                    "text": "    },\n    {\n        .name = \"Several valid bytes\",\n        .text = AWS_BYTE_CUR_INIT_FROM_STRING_LITERAL(\"\\x01\\x02\\x02\\x01\\x01\"),\n    }};\n\nstatic int s_utf8_validation_callback(const uint32_t codepoint, void *user_data) {\n",
                    "rendered": {
                      "text": "    },\n    {\n        .name = \"Several valid bytes\",\n        .text = AWS_BYTE_CUR_INIT_FROM_STRING_LITERAL(\"\\x01\\x02\\x02\\x01\\x01\"),\n    }};\n\nstatic int s_utf8_validation_callback(const uint32_t codepoint, void *user_data) {\n",
                      "markdown": "`    },\n    {\n        .name = \"Several valid bytes\",\n        .text = AWS_BYTE_CUR_INIT_FROM_STRING_LITERAL(\"\\x01\\x02\\x02\\x01\\x01\"),\n    }};\n\nstatic int s_utf8_validation_callback(const uint32_t codepoint, void *user_data) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/encoding_test.c"
                },
                "region": {
                  "startLine": 1240,
                  "startColumn": 55,
                  "endLine": 1240,
                  "endColumn": 79,
                  "snippet": {
                    "text": "    },\n    {\n        .name = \"6 byte codepoints not allowed by RFC-3629\",\n        .text = AWS_BYTE_CUR_INIT_FROM_STRING_LITERAL(\"\\xFC\\x84\\x80\\x80\\x80\\x80\"),\n    },\n    {\n        .name = \"Illegal first byte\",\n",
                    "rendered": {
                      "text": "    },\n    {\n        .name = \"6 byte codepoints not allowed by RFC-3629\",\n        .text = AWS_BYTE_CUR_INIT_FROM_STRING_LITERAL(\"\\xFC\\x84\\x80\\x80\\x80\\x80\"),\n    },\n    {\n        .name = \"Illegal first byte\",\n",
                      "markdown": "`    },\n    {\n        .name = \"6 byte codepoints not allowed by RFC-3629\",\n        .text = AWS_BYTE_CUR_INIT_FROM_STRING_LITERAL(\"\\xFC\\x84\\x80\\x80\\x80\\x80\"),\n    },\n    {\n        .name = \"Illegal first byte\",\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/encoding_test.c"
                },
                "region": {
                  "startLine": 1236,
                  "startColumn": 55,
                  "endLine": 1236,
                  "endColumn": 75,
                  "snippet": {
                    "text": "    },\n    {\n        .name = \"5 byte codepoints not allowed by RFC-3629\",\n        .text = AWS_BYTE_CUR_INIT_FROM_STRING_LITERAL(\"\\xF8\\x88\\x80\\x80\\x80\"),\n    },\n    {\n        .name = \"6 byte codepoints not allowed by RFC-3629\",\n",
                    "rendered": {
                      "text": "    },\n    {\n        .name = \"5 byte codepoints not allowed by RFC-3629\",\n        .text = AWS_BYTE_CUR_INIT_FROM_STRING_LITERAL(\"\\xF8\\x88\\x80\\x80\\x80\"),\n    },\n    {\n        .name = \"6 byte codepoints not allowed by RFC-3629\",\n",
                      "markdown": "`    },\n    {\n        .name = \"5 byte codepoints not allowed by RFC-3629\",\n        .text = AWS_BYTE_CUR_INIT_FROM_STRING_LITERAL(\"\\xF8\\x88\\x80\\x80\\x80\"),\n    },\n    {\n        .name = \"6 byte codepoints not allowed by RFC-3629\",\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/encoding_test.c"
                },
                "region": {
                  "startLine": 1165,
                  "startColumn": 55,
                  "endLine": 1165,
                  "endColumn": 79,
                  "snippet": {
                    "text": "    },\n    {\n        .name = \"UTF8 BOM plus extra\",\n        .text = AWS_BYTE_CUR_INIT_FROM_STRING_LITERAL(\"\\xEF\\xBB\\xBF\\x24\\xC2\\xA3\"),\n    },\n    {\n        .name = \"First possible 1 byte codepoint\",\n",
                    "rendered": {
                      "text": "    },\n    {\n        .name = \"UTF8 BOM plus extra\",\n        .text = AWS_BYTE_CUR_INIT_FROM_STRING_LITERAL(\"\\xEF\\xBB\\xBF\\x24\\xC2\\xA3\"),\n    },\n    {\n        .name = \"First possible 1 byte codepoint\",\n",
                      "markdown": "`    },\n    {\n        .name = \"UTF8 BOM plus extra\",\n        .text = AWS_BYTE_CUR_INIT_FROM_STRING_LITERAL(\"\\xEF\\xBB\\xBF\\x24\\xC2\\xA3\"),\n    },\n    {\n        .name = \"First possible 1 byte codepoint\",\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/encoding_test.c"
                },
                "region": {
                  "startLine": 1157,
                  "startColumn": 13,
                  "endLine": 1157,
                  "endColumn": 89,
                  "snippet": {
                    "text": "    {\n        .name = \"A variety of different length codepoints\",\n        .text = AWS_BYTE_CUR_INIT_FROM_STRING_LITERAL(\n            \"\\xF0\\x90\\x8D\\x88\\xE2\\x82\\xAC\\xC2\\xA3\\x24\\xC2\\xA3\\xE2\\x82\\xAC\\xF0\\x90\\x8D\\x88\"),\n    },\n    {\n        .name = \"UTF8 BOM\",\n",
                    "rendered": {
                      "text": "    {\n        .name = \"A variety of different length codepoints\",\n        .text = AWS_BYTE_CUR_INIT_FROM_STRING_LITERAL(\n            \"\\xF0\\x90\\x8D\\x88\\xE2\\x82\\xAC\\xC2\\xA3\\x24\\xC2\\xA3\\xE2\\x82\\xAC\\xF0\\x90\\x8D\\x88\"),\n    },\n    {\n        .name = \"UTF8 BOM\",\n",
                      "markdown": "`    {\n        .name = \"A variety of different length codepoints\",\n        .text = AWS_BYTE_CUR_INIT_FROM_STRING_LITERAL(\n            \"\\xF0\\x90\\x8D\\x88\\xE2\\x82\\xAC\\xC2\\xA3\\x24\\xC2\\xA3\\xE2\\x82\\xAC\\xF0\\x90\\x8D\\x88\"),\n    },\n    {\n        .name = \"UTF8 BOM\",\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000805"
          },
          "message": {
            "text": "Backdoor: Long Binary Strings",
            "id": "BD000805"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/encoding_test.c"
                },
                "region": {
                  "startLine": 1157,
                  "startColumn": 13,
                  "endLine": 1157,
                  "endColumn": 89,
                  "snippet": {
                    "text": "    {\n        .name = \"A variety of different length codepoints\",\n        .text = AWS_BYTE_CUR_INIT_FROM_STRING_LITERAL(\n            \"\\xF0\\x90\\x8D\\x88\\xE2\\x82\\xAC\\xC2\\xA3\\x24\\xC2\\xA3\\xE2\\x82\\xAC\\xF0\\x90\\x8D\\x88\"),\n    },\n    {\n        .name = \"UTF8 BOM\",\n",
                    "rendered": {
                      "text": "    {\n        .name = \"A variety of different length codepoints\",\n        .text = AWS_BYTE_CUR_INIT_FROM_STRING_LITERAL(\n            \"\\xF0\\x90\\x8D\\x88\\xE2\\x82\\xAC\\xC2\\xA3\\x24\\xC2\\xA3\\xE2\\x82\\xAC\\xF0\\x90\\x8D\\x88\"),\n    },\n    {\n        .name = \"UTF8 BOM\",\n",
                      "markdown": "`    {\n        .name = \"A variety of different length codepoints\",\n        .text = AWS_BYTE_CUR_INIT_FROM_STRING_LITERAL(\n            \"\\xF0\\x90\\x8D\\x88\\xE2\\x82\\xAC\\xC2\\xA3\\x24\\xC2\\xA3\\xE2\\x82\\xAC\\xF0\\x90\\x8D\\x88\"),\n    },\n    {\n        .name = \"UTF8 BOM\",\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/encoding_test.c"
                },
                "region": {
                  "startLine": 361,
                  "startColumn": 16,
                  "endLine": 361,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    struct aws_byte_cursor expected_cur = aws_byte_cursor_from_array(expected, expected_size);\n    ASSERT_SUCCESS(\n        aws_base64_compute_decoded_len(&expected_cur, &output_size),\n        \"Compute base64 decoded length failed with %d\",\n        aws_last_error());\n    ASSERT_INT_EQUALS(test_str_size, output_size, \"Output size on string should be %d\", test_str_size);\n\n",
                    "rendered": {
                      "text": "    struct aws_byte_cursor expected_cur = aws_byte_cursor_from_array(expected, expected_size);\n    ASSERT_SUCCESS(\n        aws_base64_compute_decoded_len(&expected_cur, &output_size),\n        \"Compute base64 decoded length failed with %d\",\n        aws_last_error());\n    ASSERT_INT_EQUALS(test_str_size, output_size, \"Output size on string should be %d\", test_str_size);\n\n",
                      "markdown": "`    struct aws_byte_cursor expected_cur = aws_byte_cursor_from_array(expected, expected_size);\n    ASSERT_SUCCESS(\n        aws_base64_compute_decoded_len(&expected_cur, &output_size),\n        \"Compute base64 decoded length failed with %d\",\n        aws_last_error());\n    ASSERT_INT_EQUALS(test_str_size, output_size, \"Output size on string should be %d\", test_str_size);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/encoding_test.c"
                },
                "region": {
                  "startLine": 296,
                  "startColumn": 16,
                  "endLine": 296,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    /* Part 1: encoding */\n    ASSERT_SUCCESS(\n        aws_base64_compute_encoded_len(test_str_size, &output_size),\n        \"Compute base64 encoded length failed with %d\",\n        aws_last_error());\n    ASSERT_INT_EQUALS(terminated_size, output_size, \"Output size on string should be %d\", terminated_size);\n\n",
                    "rendered": {
                      "text": "    /* Part 1: encoding */\n    ASSERT_SUCCESS(\n        aws_base64_compute_encoded_len(test_str_size, &output_size),\n        \"Compute base64 encoded length failed with %d\",\n        aws_last_error());\n    ASSERT_INT_EQUALS(terminated_size, output_size, \"Output size on string should be %d\", terminated_size);\n\n",
                      "markdown": "`    /* Part 1: encoding */\n    ASSERT_SUCCESS(\n        aws_base64_compute_encoded_len(test_str_size, &output_size),\n        \"Compute base64 encoded length failed with %d\",\n        aws_last_error());\n    ASSERT_INT_EQUALS(terminated_size, output_size, \"Output size on string should be %d\", terminated_size);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/CMakeLists.txt"
                },
                "region": {
                  "startLine": 506,
                  "startColumn": 30,
                  "endLine": 506,
                  "endColumn": 38,
                  "snippet": {
                    "text": "add_test_case(uri_root_only_parse)\nadd_test_case(uri_root_slash_only_path_parse)\nadd_test_case(uri_path_and_query_only_parse)\nadd_test_case(uri_userinfo_no_password_parse)\nadd_test_case(uri_empty_user_parse)\nadd_test_case(uri_query_params)\nadd_test_case(uri_ipv6_parse)\n",
                    "rendered": {
                      "text": "add_test_case(uri_root_only_parse)\nadd_test_case(uri_root_slash_only_path_parse)\nadd_test_case(uri_path_and_query_only_parse)\nadd_test_case(uri_userinfo_no_password_parse)\nadd_test_case(uri_empty_user_parse)\nadd_test_case(uri_query_params)\nadd_test_case(uri_ipv6_parse)\n",
                      "markdown": "`add_test_case(uri_root_only_parse)\nadd_test_case(uri_root_slash_only_path_parse)\nadd_test_case(uri_path_and_query_only_parse)\nadd_test_case(uri_userinfo_no_password_parse)\nadd_test_case(uri_empty_user_parse)\nadd_test_case(uri_query_params)\nadd_test_case(uri_ipv6_parse)\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/tests/CMakeLists.txt"
                },
                "region": {
                  "startLine": 393,
                  "startColumn": 19,
                  "endLine": 393,
                  "endColumn": 35,
                  "snippet": {
                    "text": "add_test_case(uuid_string_parse_too_short)\nadd_test_case(uuid_string_parse_malformed)\n\nadd_test_case(test_environment_functions)\n\nadd_test_case(short_argument_parse)\nadd_test_case(long_argument_parse)\n",
                    "rendered": {
                      "text": "add_test_case(uuid_string_parse_too_short)\nadd_test_case(uuid_string_parse_malformed)\n\nadd_test_case(test_environment_functions)\n\nadd_test_case(short_argument_parse)\nadd_test_case(long_argument_parse)\n",
                      "markdown": "`add_test_case(uuid_string_parse_too_short)\nadd_test_case(uuid_string_parse_malformed)\n\nadd_test_case(test_environment_functions)\n\nadd_test_case(short_argument_parse)\nadd_test_case(long_argument_parse)\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/external/ittnotify.h"
                },
                "region": {
                  "startLine": 4629,
                  "startColumn": 26,
                  "endLine": 4629,
                  "endColumn": 43,
                  "snippet": {
                    "text": "    /* %1$s -- library name, %2$s -- symbol name. */\n    __itt_error_unknown_group = 3, /*!< unknown group specified */\n    /* %1$s -- env var name, %2$s -- group name. */\n    __itt_error_cant_read_env = 4, /*!< GetEnvironmentVariable() failed */\n    /* %1$s -- env var name, %2$d -- system error. */\n    __itt_error_env_too_long  = 5, /*!< variable value too long */\n    /* %1$s -- env var name, %2$d -- actual length of the var, %3$d -- max allowed length. */\n",
                    "rendered": {
                      "text": "    /* %1$s -- library name, %2$s -- symbol name. */\n    __itt_error_unknown_group = 3, /*!< unknown group specified */\n    /* %1$s -- env var name, %2$s -- group name. */\n    __itt_error_cant_read_env = 4, /*!< GetEnvironmentVariable() failed */\n    /* %1$s -- env var name, %2$d -- system error. */\n    __itt_error_env_too_long  = 5, /*!< variable value too long */\n    /* %1$s -- env var name, %2$d -- actual length of the var, %3$d -- max allowed length. */\n",
                      "markdown": "`    /* %1$s -- library name, %2$s -- symbol name. */\n    __itt_error_unknown_group = 3, /*!< unknown group specified */\n    /* %1$s -- env var name, %2$s -- group name. */\n    __itt_error_cant_read_env = 4, /*!< GetEnvironmentVariable() failed */\n    /* %1$s -- env var name, %2$d -- system error. */\n    __itt_error_env_too_long  = 5, /*!< variable value too long */\n    /* %1$s -- env var name, %2$d -- actual length of the var, %3$d -- max allowed length. */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/zero.inl"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 19,
                  "endLine": 36,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    buf = buf_u64 + num_u64_checks;\n    bufsize = bufsize % 8;\n\n    /* Check 8 bits at a time */\n    const uint8_t *buf_u8 = (const uint8_t *)buf;\n    for (i = 0; i < bufsize; ++i) {\n        if (buf_u8[i]) {\n",
                    "rendered": {
                      "text": "    buf = buf_u64 + num_u64_checks;\n    bufsize = bufsize % 8;\n\n    /* Check 8 bits at a time */\n    const uint8_t *buf_u8 = (const uint8_t *)buf;\n    for (i = 0; i < bufsize; ++i) {\n        if (buf_u8[i]) {\n",
                      "markdown": "`    buf = buf_u64 + num_u64_checks;\n    bufsize = bufsize % 8;\n\n    /* Check 8 bits at a time */\n    const uint8_t *buf_u8 = (const uint8_t *)buf;\n    for (i = 0; i < bufsize; ++i) {\n        if (buf_u8[i]) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/zero.inl"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 6,
                  "endLine": 32,
                  "endColumn": 14,
                  "snippet": {
                    "text": "        }\n    }\n\n    /* Update buf to where u64 checks left off */\n    buf = buf_u64 + num_u64_checks;\n    bufsize = bufsize % 8;\n\n",
                    "rendered": {
                      "text": "        }\n    }\n\n    /* Update buf to where u64 checks left off */\n    buf = buf_u64 + num_u64_checks;\n    bufsize = bufsize % 8;\n\n",
                      "markdown": "`        }\n    }\n\n    /* Update buf to where u64 checks left off */\n    buf = buf_u64 + num_u64_checks;\n    bufsize = bufsize % 8;\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/zero.inl"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 20,
                  "endLine": 22,
                  "endColumn": 24,
                  "snippet": {
                    "text": "bool aws_is_mem_zeroed(const void *buf, size_t bufsize) {\n    /* Optimization idea: vectorized instructions to check more than 64 bits at a time. */\n\n    /* Check 64 bits at a time */\n    const uint64_t *buf_u64 = (const uint64_t *)buf;\n    const size_t num_u64_checks = bufsize / 8;\n    size_t i;\n",
                    "rendered": {
                      "text": "bool aws_is_mem_zeroed(const void *buf, size_t bufsize) {\n    /* Optimization idea: vectorized instructions to check more than 64 bits at a time. */\n\n    /* Check 64 bits at a time */\n    const uint64_t *buf_u64 = (const uint64_t *)buf;\n    const size_t num_u64_checks = bufsize / 8;\n    size_t i;\n",
                      "markdown": "`bool aws_is_mem_zeroed(const void *buf, size_t bufsize) {\n    /* Optimization idea: vectorized instructions to check more than 64 bits at a time. */\n\n    /* Check 64 bits at a time */\n    const uint64_t *buf_u64 = (const uint64_t *)buf;\n    const size_t num_u64_checks = bufsize / 8;\n    size_t i;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/zero.inl"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 76,
                  "endLine": 20,
                  "endColumn": 80,
                  "snippet": {
                    "text": " */\nAWS_STATIC_IMPL\nbool aws_is_mem_zeroed(const void *buf, size_t bufsize) {\n    /* Optimization idea: vectorized instructions to check more than 64 bits at a time. */\n\n    /* Check 64 bits at a time */\n    const uint64_t *buf_u64 = (const uint64_t *)buf;\n",
                    "rendered": {
                      "text": " */\nAWS_STATIC_IMPL\nbool aws_is_mem_zeroed(const void *buf, size_t bufsize) {\n    /* Optimization idea: vectorized instructions to check more than 64 bits at a time. */\n\n    /* Check 64 bits at a time */\n    const uint64_t *buf_u64 = (const uint64_t *)buf;\n",
                      "markdown": "` */\nAWS_STATIC_IMPL\nbool aws_is_mem_zeroed(const void *buf, size_t bufsize) {\n    /* Optimization idea: vectorized instructions to check more than 64 bits at a time. */\n\n    /* Check 64 bits at a time */\n    const uint64_t *buf_u64 = (const uint64_t *)buf;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/zero.inl"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 24,
                  "endLine": 36,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    buf = buf_u64 + num_u64_checks;\n    bufsize = bufsize % 8;\n\n    /* Check 8 bits at a time */\n    const uint8_t *buf_u8 = (const uint8_t *)buf;\n    for (i = 0; i < bufsize; ++i) {\n        if (buf_u8[i]) {\n",
                    "rendered": {
                      "text": "    buf = buf_u64 + num_u64_checks;\n    bufsize = bufsize % 8;\n\n    /* Check 8 bits at a time */\n    const uint8_t *buf_u8 = (const uint8_t *)buf;\n    for (i = 0; i < bufsize; ++i) {\n        if (buf_u8[i]) {\n",
                      "markdown": "`    buf = buf_u64 + num_u64_checks;\n    bufsize = bufsize % 8;\n\n    /* Check 8 bits at a time */\n    const uint8_t *buf_u8 = (const uint8_t *)buf;\n    for (i = 0; i < bufsize; ++i) {\n        if (buf_u8[i]) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/zero.inl"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 25,
                  "endLine": 22,
                  "endColumn": 31,
                  "snippet": {
                    "text": "bool aws_is_mem_zeroed(const void *buf, size_t bufsize) {\n    /* Optimization idea: vectorized instructions to check more than 64 bits at a time. */\n\n    /* Check 64 bits at a time */\n    const uint64_t *buf_u64 = (const uint64_t *)buf;\n    const size_t num_u64_checks = bufsize / 8;\n    size_t i;\n",
                    "rendered": {
                      "text": "bool aws_is_mem_zeroed(const void *buf, size_t bufsize) {\n    /* Optimization idea: vectorized instructions to check more than 64 bits at a time. */\n\n    /* Check 64 bits at a time */\n    const uint64_t *buf_u64 = (const uint64_t *)buf;\n    const size_t num_u64_checks = bufsize / 8;\n    size_t i;\n",
                      "markdown": "`bool aws_is_mem_zeroed(const void *buf, size_t bufsize) {\n    /* Optimization idea: vectorized instructions to check more than 64 bits at a time. */\n\n    /* Check 64 bits at a time */\n    const uint64_t *buf_u64 = (const uint64_t *)buf;\n    const size_t num_u64_checks = bufsize / 8;\n    size_t i;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/config.h.in"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 70,
                  "endLine": 12,
                  "endColumn": 74,
                  "snippet": {
                    "text": "/*\n * This header exposes compiler feature test results determined during cmake\n * configure time to inline function implementations. The macros defined here\n * should be considered to be an implementation detail, and can change at any\n * time.\n */\n#cmakedefine AWS_HAVE_GCC_OVERFLOW_MATH_EXTENSIONS\n",
                    "rendered": {
                      "text": "/*\n * This header exposes compiler feature test results determined during cmake\n * configure time to inline function implementations. The macros defined here\n * should be considered to be an implementation detail, and can change at any\n * time.\n */\n#cmakedefine AWS_HAVE_GCC_OVERFLOW_MATH_EXTENSIONS\n",
                      "markdown": "`/*\n * This header exposes compiler feature test results determined during cmake\n * configure time to inline function implementations. The macros defined here\n * should be considered to be an implementation detail, and can change at any\n * time.\n */\n#cmakedefine AWS_HAVE_GCC_OVERFLOW_MATH_EXTENSIONS\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/config.h.in"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 12,
                  "endLine": 11,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n/*\n * This header exposes compiler feature test results determined during cmake\n * configure time to inline function implementations. The macros defined here\n * should be considered to be an implementation detail, and can change at any\n * time.\n */\n",
                    "rendered": {
                      "text": "\n/*\n * This header exposes compiler feature test results determined during cmake\n * configure time to inline function implementations. The macros defined here\n * should be considered to be an implementation detail, and can change at any\n * time.\n */\n",
                      "markdown": "`\n/*\n * This header exposes compiler feature test results determined during cmake\n * configure time to inline function implementations. The macros defined here\n * should be considered to be an implementation detail, and can change at any\n * time.\n */\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/clock.inl"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 64,
                  "endLine": 19,
                  "endColumn": 70,
                  "snippet": {
                    "text": " * Converts 'timestamp' from unit 'convert_from' to unit 'convert_to', if the units are the same then 'timestamp' is\n * returned. If 'remainder' is NOT NULL, it will be set to the remainder if convert_from is a more precise unit than\n * convert_to (but only if the old frequency is a multiple of the new one). If conversion would lead to integer\n * overflow, the timestamp returned will be the highest possible time that is representable, i.e. UINT64_MAX.\n */\nAWS_STATIC_IMPL uint64_t\n    aws_timestamp_convert_u64(uint64_t ticks, uint64_t old_frequency, uint64_t new_frequency, uint64_t *remainder) {\n",
                    "rendered": {
                      "text": " * Converts 'timestamp' from unit 'convert_from' to unit 'convert_to', if the units are the same then 'timestamp' is\n * returned. If 'remainder' is NOT NULL, it will be set to the remainder if convert_from is a more precise unit than\n * convert_to (but only if the old frequency is a multiple of the new one). If conversion would lead to integer\n * overflow, the timestamp returned will be the highest possible time that is representable, i.e. UINT64_MAX.\n */\nAWS_STATIC_IMPL uint64_t\n    aws_timestamp_convert_u64(uint64_t ticks, uint64_t old_frequency, uint64_t new_frequency, uint64_t *remainder) {\n",
                      "markdown": "` * Converts 'timestamp' from unit 'convert_from' to unit 'convert_to', if the units are the same then 'timestamp' is\n * returned. If 'remainder' is NOT NULL, it will be set to the remainder if convert_from is a more precise unit than\n * convert_to (but only if the old frequency is a multiple of the new one). If conversion would lead to integer\n * overflow, the timestamp returned will be the highest possible time that is representable, i.e. UINT64_MAX.\n */\nAWS_STATIC_IMPL uint64_t\n    aws_timestamp_convert_u64(uint64_t ticks, uint64_t old_frequency, uint64_t new_frequency, uint64_t *remainder) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/math.gcc_x64_asm.inl"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 20,
                  "endLine": 98,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    __asm__(\"mull %k[arg2]\\n\" /* eax * b, result is in EDX:EAX, OF=CF=(EDX != 0) */\n            \"seto %[flag]\\n\"  /* flag = overflow_bit */\n            : /* in/out: %eax (first arg & result), %d (flag) */ \"+&a\"(result), [flag] \"=&d\"(flag)\n            : /* in: reg for 2nd operand */\n            [arg2] \"r\"(b)\n            : /* clobbers: cc (d is used for flag so no need to clobber)*/ \"cc\");\n    *r = result;\n",
                    "rendered": {
                      "text": "    __asm__(\"mull %k[arg2]\\n\" /* eax * b, result is in EDX:EAX, OF=CF=(EDX != 0) */\n            \"seto %[flag]\\n\"  /* flag = overflow_bit */\n            : /* in/out: %eax (first arg & result), %d (flag) */ \"+&a\"(result), [flag] \"=&d\"(flag)\n            : /* in: reg for 2nd operand */\n            [arg2] \"r\"(b)\n            : /* clobbers: cc (d is used for flag so no need to clobber)*/ \"cc\");\n    *r = result;\n",
                      "markdown": "`    __asm__(\"mull %k[arg2]\\n\" /* eax * b, result is in EDX:EAX, OF=CF=(EDX != 0) */\n            \"seto %[flag]\\n\"  /* flag = overflow_bit */\n            : /* in/out: %eax (first arg & result), %d (flag) */ \"+&a\"(result), [flag] \"=&d\"(flag)\n            : /* in: reg for 2nd operand */\n            [arg2] \"r\"(b)\n            : /* clobbers: cc (d is used for flag so no need to clobber)*/ \"cc\");\n    *r = result;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/math.gcc_x64_asm.inl"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 33,
                  "endLine": 77,
                  "endColumn": 38,
                  "snippet": {
                    "text": "            \"mov $0xFFFFFFFF, %%eax\\n\"\n            \".1f%=:\"\n            : /* in/out: %eax = result/a, out: edx (ignored) */ \"+&a\"(a), \"=&d\"(edx)\n            : /* in: operand 2 in reg */ [arg2] \"r\"(b)\n            : /* clobbers: cc */ \"cc\");\n    (void)edx; /* suppress unused warnings */\n    return a;\n",
                    "rendered": {
                      "text": "            \"mov $0xFFFFFFFF, %%eax\\n\"\n            \".1f%=:\"\n            : /* in/out: %eax = result/a, out: edx (ignored) */ \"+&a\"(a), \"=&d\"(edx)\n            : /* in: operand 2 in reg */ [arg2] \"r\"(b)\n            : /* clobbers: cc */ \"cc\");\n    (void)edx; /* suppress unused warnings */\n    return a;\n",
                      "markdown": "`            \"mov $0xFFFFFFFF, %%eax\\n\"\n            \".1f%=:\"\n            : /* in/out: %eax = result/a, out: edx (ignored) */ \"+&a\"(a), \"=&d\"(edx)\n            : /* in: operand 2 in reg */ [arg2] \"r\"(b)\n            : /* clobbers: cc */ \"cc\");\n    (void)edx; /* suppress unused warnings */\n    return a;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/math.gcc_x64_asm.inl"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 20,
                  "endLine": 52,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    __asm__(\"mulq %q[arg2]\\n\" /* rax * b, result is in RDX:RAX, OF=CF=(RDX != 0) */\n            \"seto %[flag]\\n\"  /* flag = overflow_bit */\n            : /* in/out: %rax (first arg & result), %d (flag) */ \"+&a\"(result), [flag] \"=&d\"(flag)\n            : /* in: reg for 2nd operand */\n            [arg2] \"r\"(b)\n            : /* clobbers: cc (d is used for flag so no need to clobber)*/ \"cc\");\n    *r = result;\n",
                    "rendered": {
                      "text": "    __asm__(\"mulq %q[arg2]\\n\" /* rax * b, result is in RDX:RAX, OF=CF=(RDX != 0) */\n            \"seto %[flag]\\n\"  /* flag = overflow_bit */\n            : /* in/out: %rax (first arg & result), %d (flag) */ \"+&a\"(result), [flag] \"=&d\"(flag)\n            : /* in: reg for 2nd operand */\n            [arg2] \"r\"(b)\n            : /* clobbers: cc (d is used for flag so no need to clobber)*/ \"cc\");\n    *r = result;\n",
                      "markdown": "`    __asm__(\"mulq %q[arg2]\\n\" /* rax * b, result is in RDX:RAX, OF=CF=(RDX != 0) */\n            \"seto %[flag]\\n\"  /* flag = overflow_bit */\n            : /* in/out: %rax (first arg & result), %d (flag) */ \"+&a\"(result), [flag] \"=&d\"(flag)\n            : /* in: reg for 2nd operand */\n            [arg2] \"r\"(b)\n            : /* clobbers: cc (d is used for flag so no need to clobber)*/ \"cc\");\n    *r = result;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/byte_order.inl"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 6,
                  "endLine": 23,
                  "endColumn": 10,
                  "snippet": {
                    "text": "/**\n * Returns 1 if machine is big endian, 0 if little endian.\n * If you compile with even -O1 optimization, this check is completely optimized\n * out at compile time and code which calls \"if (aws_is_big_endian())\" will do\n * the right thing without branching.\n */\nAWS_STATIC_IMPL int aws_is_big_endian(void) {\n",
                    "rendered": {
                      "text": "/**\n * Returns 1 if machine is big endian, 0 if little endian.\n * If you compile with even -O1 optimization, this check is completely optimized\n * out at compile time and code which calls \"if (aws_is_big_endian())\" will do\n * the right thing without branching.\n */\nAWS_STATIC_IMPL int aws_is_big_endian(void) {\n",
                      "markdown": "`/**\n * Returns 1 if machine is big endian, 0 if little endian.\n * If you compile with even -O1 optimization, this check is completely optimized\n * out at compile time and code which calls \"if (aws_is_big_endian())\" will do\n * the right thing without branching.\n */\nAWS_STATIC_IMPL int aws_is_big_endian(void) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/include/aws/common/byte_order.inl"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 17,
                  "endLine": 23,
                  "endColumn": 23,
                  "snippet": {
                    "text": "/**\n * Returns 1 if machine is big endian, 0 if little endian.\n * If you compile with even -O1 optimization, this check is completely optimized\n * out at compile time and code which calls \"if (aws_is_big_endian())\" will do\n * the right thing without branching.\n */\nAWS_STATIC_IMPL int aws_is_big_endian(void) {\n",
                    "rendered": {
                      "text": "/**\n * Returns 1 if machine is big endian, 0 if little endian.\n * If you compile with even -O1 optimization, this check is completely optimized\n * out at compile time and code which calls \"if (aws_is_big_endian())\" will do\n * the right thing without branching.\n */\nAWS_STATIC_IMPL int aws_is_big_endian(void) {\n",
                      "markdown": "`/**\n * Returns 1 if machine is big endian, 0 if little endian.\n * If you compile with even -O1 optimization, this check is completely optimized\n * out at compile time and code which calls \"if (aws_is_big_endian())\" will do\n * the right thing without branching.\n */\nAWS_STATIC_IMPL int aws_is_big_endian(void) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/ISSUE_TEMPLATE/bug-report.yml"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 10,
                  "endLine": 31,
                  "endColumn": 19,
                  "snippet": {
                    "text": "        What actually happened?\n        \n        Please include full errors, uncaught exceptions, stack traces, and relevant logs.\n        If service responses are relevant, please include wire logs.\n    validations:\n      required: true\n  - type: textarea\n",
                    "rendered": {
                      "text": "        What actually happened?\n        \n        Please include full errors, uncaught exceptions, stack traces, and relevant logs.\n        If service responses are relevant, please include wire logs.\n    validations:\n      required: true\n  - type: textarea\n",
                      "markdown": "`        What actually happened?\n        \n        Please include full errors, uncaught exceptions, stack traces, and relevant logs.\n        If service responses are relevant, please include wire logs.\n    validations:\n      required: true\n  - type: textarea\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/.github/ISSUE_TEMPLATE/bug-report.yml"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 20,
                  "endLine": 20,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    attributes:\n      label: Expected Behavior\n      description: |\n        What did you expect to happen?\n    validations:\n      required: true\n  - type: textarea\n",
                    "rendered": {
                      "text": "    attributes:\n      label: Expected Behavior\n      description: |\n        What did you expect to happen?\n    validations:\n      required: true\n  - type: textarea\n",
                      "markdown": "`    attributes:\n      label: Expected Behavior\n      description: |\n        What did you expect to happen?\n    validations:\n      required: true\n  - type: textarea\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/scripts/appverifier_xml.py"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 43,
                  "endLine": 192,
                  "endColumn": 48,
                  "snippet": {
                    "text": "            element_time = entry.attrib.get(\"Time\", \"UNKNOWN\")\n            element_layer_name = entry.attrib.get(\"LayerName\", \"UNKNOWN\")\n            element_code = entry.attrib.get(\"StopCode\", \"UNKNOWN\")\n            element_severity = entry.attrib.get(\"Severity\", \"UNKNOWN\")\n\n            print_red = False\n            if (element_severity in s_AppVerifier_ErrorSeverities):\n",
                    "rendered": {
                      "text": "            element_time = entry.attrib.get(\"Time\", \"UNKNOWN\")\n            element_layer_name = entry.attrib.get(\"LayerName\", \"UNKNOWN\")\n            element_code = entry.attrib.get(\"StopCode\", \"UNKNOWN\")\n            element_severity = entry.attrib.get(\"Severity\", \"UNKNOWN\")\n\n            print_red = False\n            if (element_severity in s_AppVerifier_ErrorSeverities):\n",
                      "markdown": "`            element_time = entry.attrib.get(\"Time\", \"UNKNOWN\")\n            element_layer_name = entry.attrib.get(\"LayerName\", \"UNKNOWN\")\n            element_code = entry.attrib.get(\"StopCode\", \"UNKNOWN\")\n            element_severity = entry.attrib.get(\"Severity\", \"UNKNOWN\")\n\n            print_red = False\n            if (element_severity in s_AppVerifier_ErrorSeverities):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/scripts/appverifier_xml.py"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 39,
                  "endLine": 191,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        for entry in app_verifier_entries:\n            element_time = entry.attrib.get(\"Time\", \"UNKNOWN\")\n            element_layer_name = entry.attrib.get(\"LayerName\", \"UNKNOWN\")\n            element_code = entry.attrib.get(\"StopCode\", \"UNKNOWN\")\n            element_severity = entry.attrib.get(\"Severity\", \"UNKNOWN\")\n\n            print_red = False\n",
                    "rendered": {
                      "text": "        for entry in app_verifier_entries:\n            element_time = entry.attrib.get(\"Time\", \"UNKNOWN\")\n            element_layer_name = entry.attrib.get(\"LayerName\", \"UNKNOWN\")\n            element_code = entry.attrib.get(\"StopCode\", \"UNKNOWN\")\n            element_severity = entry.attrib.get(\"Severity\", \"UNKNOWN\")\n\n            print_red = False\n",
                      "markdown": "`        for entry in app_verifier_entries:\n            element_time = entry.attrib.get(\"Time\", \"UNKNOWN\")\n            element_layer_name = entry.attrib.get(\"LayerName\", \"UNKNOWN\")\n            element_code = entry.attrib.get(\"StopCode\", \"UNKNOWN\")\n            element_severity = entry.attrib.get(\"Severity\", \"UNKNOWN\")\n\n            print_red = False\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/scripts/appverifier_xml.py"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 45,
                  "endLine": 190,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\n        for entry in app_verifier_entries:\n            element_time = entry.attrib.get(\"Time\", \"UNKNOWN\")\n            element_layer_name = entry.attrib.get(\"LayerName\", \"UNKNOWN\")\n            element_code = entry.attrib.get(\"StopCode\", \"UNKNOWN\")\n            element_severity = entry.attrib.get(\"Severity\", \"UNKNOWN\")\n\n",
                    "rendered": {
                      "text": "\n        for entry in app_verifier_entries:\n            element_time = entry.attrib.get(\"Time\", \"UNKNOWN\")\n            element_layer_name = entry.attrib.get(\"LayerName\", \"UNKNOWN\")\n            element_code = entry.attrib.get(\"StopCode\", \"UNKNOWN\")\n            element_severity = entry.attrib.get(\"Severity\", \"UNKNOWN\")\n\n",
                      "markdown": "`\n        for entry in app_verifier_entries:\n            element_time = entry.attrib.get(\"Time\", \"UNKNOWN\")\n            element_layer_name = entry.attrib.get(\"LayerName\", \"UNKNOWN\")\n            element_code = entry.attrib.get(\"StopCode\", \"UNKNOWN\")\n            element_severity = entry.attrib.get(\"Severity\", \"UNKNOWN\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/scripts/appverifier_xml.py"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 39,
                  "endLine": 189,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        severity_error_found = False\n\n        for entry in app_verifier_entries:\n            element_time = entry.attrib.get(\"Time\", \"UNKNOWN\")\n            element_layer_name = entry.attrib.get(\"LayerName\", \"UNKNOWN\")\n            element_code = entry.attrib.get(\"StopCode\", \"UNKNOWN\")\n            element_severity = entry.attrib.get(\"Severity\", \"UNKNOWN\")\n",
                    "rendered": {
                      "text": "        severity_error_found = False\n\n        for entry in app_verifier_entries:\n            element_time = entry.attrib.get(\"Time\", \"UNKNOWN\")\n            element_layer_name = entry.attrib.get(\"LayerName\", \"UNKNOWN\")\n            element_code = entry.attrib.get(\"StopCode\", \"UNKNOWN\")\n            element_severity = entry.attrib.get(\"Severity\", \"UNKNOWN\")\n",
                      "markdown": "`        severity_error_found = False\n\n        for entry in app_verifier_entries:\n            element_time = entry.attrib.get(\"Time\", \"UNKNOWN\")\n            element_layer_name = entry.attrib.get(\"LayerName\", \"UNKNOWN\")\n            element_code = entry.attrib.get(\"StopCode\", \"UNKNOWN\")\n            element_severity = entry.attrib.get(\"Severity\", \"UNKNOWN\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/scripts/appverifier_xml.py"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 95,
                  "endLine": 100,
                  "endColumn": 99,
                  "snippet": {
                    "text": "603\": \"AppVerifier detects an IsBadXXXPtr call with an invalid address for the memory buffer to be probed\",\n        \"0x604\": \"AppVerifier detects an IsBadXXXPtr call for a memory allocation that is free\",\n        \"0x605\": \"AppVerifier detects an IsBadXXXPtr call for a memory allocation that contains at least one GUARD_PAGE\",\n        \"0x606\": \"AppVerifier detects an IsBadXXXPtr call with a NULL address\",\n        \"0x607\": \"AppVerifier detects an IsBadXXXPtr call with an invalid start address or invalid size for the memory buffer to be probed\",\n        \"0x608\": \"AppVerifier detects a DLL unload with ",
                    "rendered": {
                      "text": "603\": \"AppVerifier detects an IsBadXXXPtr call with an invalid address for the memory buffer to be probed\",\n        \"0x604\": \"AppVerifier detects an IsBadXXXPtr call for a memory allocation that is free\",\n        \"0x605\": \"AppVerifier detects an IsBadXXXPtr call for a memory allocation that contains at least one GUARD_PAGE\",\n        \"0x606\": \"AppVerifier detects an IsBadXXXPtr call with a NULL address\",\n        \"0x607\": \"AppVerifier detects an IsBadXXXPtr call with an invalid start address or invalid size for the memory buffer to be probed\",\n        \"0x608\": \"AppVerifier detects a DLL unload with ",
                      "markdown": "`603\": \"AppVerifier detects an IsBadXXXPtr call with an invalid address for the memory buffer to be probed\",\n        \"0x604\": \"AppVerifier detects an IsBadXXXPtr call for a memory allocation that is free\",\n        \"0x605\": \"AppVerifier detects an IsBadXXXPtr call for a memory allocation that contains at least one GUARD_PAGE\",\n        \"0x606\": \"AppVerifier detects an IsBadXXXPtr call with a NULL address\",\n        \"0x607\": \"AppVerifier detects an IsBadXXXPtr call with an invalid start address or invalid size for the memory buffer to be probed\",\n        \"0x608\": \"AppVerifier detects a DLL unload with `"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/scripts/appverifier_xml.py"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 36,
                  "endLine": 61,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        \"0x10\": \"Buffer underruns\",\n        \"0x11\": \"Buffer underruns\",\n        \"0x12\": \"Buffer underruns\",\n        \"0x13\": \"Non-accessible page at end of heap allocation was touched. Typically caused by a buffer overrun error\",\n        \"0x14\": \"Page heap manager detected internal inconsistencies while calling GetProcessHeaps\"\n    },\n    \"Leak\": {\n",
                    "rendered": {
                      "text": "        \"0x10\": \"Buffer underruns\",\n        \"0x11\": \"Buffer underruns\",\n        \"0x12\": \"Buffer underruns\",\n        \"0x13\": \"Non-accessible page at end of heap allocation was touched. Typically caused by a buffer overrun error\",\n        \"0x14\": \"Page heap manager detected internal inconsistencies while calling GetProcessHeaps\"\n    },\n    \"Leak\": {\n",
                      "markdown": "`        \"0x10\": \"Buffer underruns\",\n        \"0x11\": \"Buffer underruns\",\n        \"0x12\": \"Buffer underruns\",\n        \"0x13\": \"Non-accessible page at end of heap allocation was touched. Typically caused by a buffer overrun error\",\n        \"0x14\": \"Page heap manager detected internal inconsistencies while calling GetProcessHeaps\"\n    },\n    \"Leak\": {\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/scripts/appverifier_xml.py"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 51,
                  "endLine": 56,
                  "endColumn": 55,
                  "snippet": {
                    "text": "        \"Can also occur with double free situations\",\n        \"0x0D\": \"Block of memory is written to after being freed\",\n        \"0x0E\": \"Freed block marked as non-accessible had access attempt\",\n        \"0x0F\": \"Magic pattern added by AppVerifier at end of heap block changed. \"\n        \"Typically means buffer overrun errors\",\n        \"0x10\": \"Buffer underruns\",\n        \"0x11\": \"Buffer underruns\",\n",
                    "rendered": {
                      "text": "        \"Can also occur with double free situations\",\n        \"0x0D\": \"Block of memory is written to after being freed\",\n        \"0x0E\": \"Freed block marked as non-accessible had access attempt\",\n        \"0x0F\": \"Magic pattern added by AppVerifier at end of heap block changed. \"\n        \"Typically means buffer overrun errors\",\n        \"0x10\": \"Buffer underruns\",\n        \"0x11\": \"Buffer underruns\",\n",
                      "markdown": "`        \"Can also occur with double free situations\",\n        \"0x0D\": \"Block of memory is written to after being freed\",\n        \"0x0E\": \"Freed block marked as non-accessible had access attempt\",\n        \"0x0F\": \"Magic pattern added by AppVerifier at end of heap block changed. \"\n        \"Typically means buffer overrun errors\",\n        \"0x10\": \"Buffer underruns\",\n        \"0x11\": \"Buffer underruns\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/scripts/appverifier_xml.py"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 49,
                  "endLine": 20,
                  "endColumn": 53,
                  "snippet": {
                    "text": "# How to adjust/learn more:\n# To add/remove from this list, run \"appverif\" in a Windows terminal with\n# administrator privileges and then press F1 to get the help page. Then search\n# for the error code you got (minus the \"0x\" part at the beginning) and use the\n# information there to add/adjust the entry in the dictionary below.\ns_AppVerifier_ErrorCodeHelp = {\n    \"Exceptions\": {\n",
                    "rendered": {
                      "text": "# How to adjust/learn more:\n# To add/remove from this list, run \"appverif\" in a Windows terminal with\n# administrator privileges and then press F1 to get the help page. Then search\n# for the error code you got (minus the \"0x\" part at the beginning) and use the\n# information there to add/adjust the entry in the dictionary below.\ns_AppVerifier_ErrorCodeHelp = {\n    \"Exceptions\": {\n",
                      "markdown": "`# How to adjust/learn more:\n# To add/remove from this list, run \"appverif\" in a Windows terminal with\n# administrator privileges and then press F1 to get the help page. Then search\n# for the error code you got (minus the \"0x\" part at the beginning) and use the\n# information there to add/adjust the entry in the dictionary below.\ns_AppVerifier_ErrorCodeHelp = {\n    \"Exceptions\": {\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/scripts/appverifier_xml.py"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 37,
                  "endLine": 31,
                  "endColumn": 42,
                  "snippet": {
                    "text": "of the stack passed an invalid TLS index to TLS system routines\",\n        \"0x302\": \"The function on the top of the stack called WaitForMultipleObjects with NULL as the address \"\n        \"of the array of handles to wait for or with zero as the number of handles\",\n        \"0x303\": \"The function on the top of the stack passed a NULL handle to system routines\",\n        \"0x304\": \"The  current thread is currently running code inside the DllMain function of one \"\n        \"of the DLLs loaded in the current process and it calls WaitForSingleObject or \"\n        \"WaitForMultipleObjects to wait on a thread han",
                    "rendered": {
                      "text": "of the stack passed an invalid TLS index to TLS system routines\",\n        \"0x302\": \"The function on the top of the stack called WaitForMultipleObjects with NULL as the address \"\n        \"of the array of handles to wait for or with zero as the number of handles\",\n        \"0x303\": \"The function on the top of the stack passed a NULL handle to system routines\",\n        \"0x304\": \"The  current thread is currently running code inside the DllMain function of one \"\n        \"of the DLLs loaded in the current process and it calls WaitForSingleObject or \"\n        \"WaitForMultipleObjects to wait on a thread han",
                      "markdown": "`of the stack passed an invalid TLS index to TLS system routines\",\n        \"0x302\": \"The function on the top of the stack called WaitForMultipleObjects with NULL as the address \"\n        \"of the array of handles to wait for or with zero as the number of handles\",\n        \"0x303\": \"The function on the top of the stack passed a NULL handle to system routines\",\n        \"0x304\": \"The  current thread is currently running code inside the DllMain function of one \"\n        \"of the DLLs loaded in the current process and it calls WaitForSingleObject or \"\n        \"WaitForMultipleObjects to wait on a thread han`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/scripts/appverifier_xml.py"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 37,
                  "endLine": 29,
                  "endColumn": 42,
                  "snippet": {
                    "text": "at is non-executable or free\"\n    },\n    \"Handles\": {\n        \"0x300\": \"The function on the top of the stack passed an invalid handle to system routines\",\n        \"0x301\": \"The function on the top of the stack passed an invalid TLS index to TLS system routines\",\n        \"0x302\": \"The function on the top of the stack called WaitForMultipleObjects with NULL as the address \"\n        \"of the array of handles to wait for or with zero as the number of handles\",\n        \"0x303\": \"The function on the top of the stack passed a NULL handle to system routines\",\n        \"0x304\": \"The  current thread is current",
                    "rendered": {
                      "text": "at is non-executable or free\"\n    },\n    \"Handles\": {\n        \"0x300\": \"The function on the top of the stack passed an invalid handle to system routines\",\n        \"0x301\": \"The function on the top of the stack passed an invalid TLS index to TLS system routines\",\n        \"0x302\": \"The function on the top of the stack called WaitForMultipleObjects with NULL as the address \"\n        \"of the array of handles to wait for or with zero as the number of handles\",\n        \"0x303\": \"The function on the top of the stack passed a NULL handle to system routines\",\n        \"0x304\": \"The  current thread is current",
                      "markdown": "`at is non-executable or free\"\n    },\n    \"Handles\": {\n        \"0x300\": \"The function on the top of the stack passed an invalid handle to system routines\",\n        \"0x301\": \"The function on the top of the stack passed an invalid TLS index to TLS system routines\",\n        \"0x302\": \"The function on the top of the stack called WaitForMultipleObjects with NULL as the address \"\n        \"of the array of handles to wait for or with zero as the number of handles\",\n        \"0x303\": \"The function on the top of the stack passed a NULL handle to system routines\",\n        \"0x304\": \"The  current thread is current`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/scripts/appverifier_xml.py"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 37,
                  "endLine": 28,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    },\n    \"Handles\": {\n        \"0x300\": \"The function on the top of the stack passed an invalid handle to system routines\",\n        \"0x301\": \"The function on the top of the stack passed an invalid TLS index to TLS system routines\",\n        \"0x302\": \"The function on the top of the stack called WaitForMultipleObjects with NULL as the address \"\n        \"of the array of handles to wait for or with zero as the number of handles\",\n        \"0x303\": \"The function on the top of the stack passed a NULL handle to system routines\",\n",
                    "rendered": {
                      "text": "    },\n    \"Handles\": {\n        \"0x300\": \"The function on the top of the stack passed an invalid handle to system routines\",\n        \"0x301\": \"The function on the top of the stack passed an invalid TLS index to TLS system routines\",\n        \"0x302\": \"The function on the top of the stack called WaitForMultipleObjects with NULL as the address \"\n        \"of the array of handles to wait for or with zero as the number of handles\",\n        \"0x303\": \"The function on the top of the stack passed a NULL handle to system routines\",\n",
                      "markdown": "`    },\n    \"Handles\": {\n        \"0x300\": \"The function on the top of the stack passed an invalid handle to system routines\",\n        \"0x301\": \"The function on the top of the stack passed an invalid TLS index to TLS system routines\",\n        \"0x302\": \"The function on the top of the stack called WaitForMultipleObjects with NULL as the address \"\n        \"of the array of handles to wait for or with zero as the number of handles\",\n        \"0x303\": \"The function on the top of the stack passed a NULL handle to system routines\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/scripts/appverifier_xml.py"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 37,
                  "endLine": 27,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        \"0x650\": \"The application is trying to run code from an address that is non-executable or free\"\n    },\n    \"Handles\": {\n        \"0x300\": \"The function on the top of the stack passed an invalid handle to system routines\",\n        \"0x301\": \"The function on the top of the stack passed an invalid TLS index to TLS system routines\",\n        \"0x302\": \"The function on the top of the stack called WaitForMultipleObjects with NULL as the address \"\n        \"of the array of handles to wait for or with zero as the number of handles\",\n",
                    "rendered": {
                      "text": "        \"0x650\": \"The application is trying to run code from an address that is non-executable or free\"\n    },\n    \"Handles\": {\n        \"0x300\": \"The function on the top of the stack passed an invalid handle to system routines\",\n        \"0x301\": \"The function on the top of the stack passed an invalid TLS index to TLS system routines\",\n        \"0x302\": \"The function on the top of the stack called WaitForMultipleObjects with NULL as the address \"\n        \"of the array of handles to wait for or with zero as the number of handles\",\n",
                      "markdown": "`        \"0x650\": \"The application is trying to run code from an address that is non-executable or free\"\n    },\n    \"Handles\": {\n        \"0x300\": \"The function on the top of the stack passed an invalid handle to system routines\",\n        \"0x301\": \"The function on the top of the stack passed an invalid TLS index to TLS system routines\",\n        \"0x302\": \"The function on the top of the stack called WaitForMultipleObjects with NULL as the address \"\n        \"of the array of handles to wait for or with zero as the number of handles\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/format-check.py"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 3,
                  "endLine": 43,
                  "endColumn": 8,
                  "snippet": {
                    "text": "if args.inplace_edit:\n    cmd += ['-i']\nelse:\n    cmd += ['--Werror', '--dry-run']\n\nprint(f\"{Path.cwd()}$ {list2cmdline(cmd)}\")\nif run(cmd).returncode:\n",
                    "rendered": {
                      "text": "if args.inplace_edit:\n    cmd += ['-i']\nelse:\n    cmd += ['--Werror', '--dry-run']\n\nprint(f\"{Path.cwd()}$ {list2cmdline(cmd)}\")\nif run(cmd).returncode:\n",
                      "markdown": "`if args.inplace_edit:\n    cmd += ['-i']\nelse:\n    cmd += ['--Werror', '--dry-run']\n\nprint(f\"{Path.cwd()}$ {list2cmdline(cmd)}\")\nif run(cmd).returncode:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/format-check.py"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 3,
                  "endLine": 41,
                  "endColumn": 8,
                  "snippet": {
                    "text": "cmd = ['pipx', 'run', f'clang-format=={CLANG_FORMAT_VERSION}',\n       f'--files={filepaths_file.name}']\nif args.inplace_edit:\n    cmd += ['-i']\nelse:\n    cmd += ['--Werror', '--dry-run']\n\n",
                    "rendered": {
                      "text": "cmd = ['pipx', 'run', f'clang-format=={CLANG_FORMAT_VERSION}',\n       f'--files={filepaths_file.name}']\nif args.inplace_edit:\n    cmd += ['-i']\nelse:\n    cmd += ['--Werror', '--dry-run']\n\n",
                      "markdown": "`cmd = ['pipx', 'run', f'clang-format=={CLANG_FORMAT_VERSION}',\n       f'--files={filepaths_file.name}']\nif args.inplace_edit:\n    cmd += ['-i']\nelse:\n    cmd += ['--Werror', '--dry-run']\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/format-check.py"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 76,
                  "endLine": 38,
                  "endColumn": 4,
                  "snippet": {
                    "text": "filepaths_file.close()\n\n# use pipx to run clang-format from PyPI\n# this is a simple way to run the same clang-format version regardless of OS\ncmd = ['pipx', 'run', f'clang-format=={CLANG_FORMAT_VERSION}',\n       f'--files={filepaths_file.name}']\nif args.inplace_edit:\n    cmd += ['-i']\n",
                    "rendered": {
                      "text": "filepaths_file.close()\n\n# use pipx to run clang-format from PyPI\n# this is a simple way to run the same clang-format version regardless of OS\ncmd = ['pipx', 'run', f'clang-format=={CLANG_FORMAT_VERSION}',\n       f'--files={filepaths_file.name}']\nif args.inplace_edit:\n    cmd += ['-i']\n",
                      "markdown": "`filepaths_file.close()\n\n# use pipx to run clang-format from PyPI\n# this is a simple way to run the same clang-format version regardless of OS\ncmd = ['pipx', 'run', f'clang-format=={CLANG_FORMAT_VERSION}',\n       f'--files={filepaths_file.name}']\nif args.inplace_edit:\n    cmd += ['-i']\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/format-check.py"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 21,
                  "endLine": 26,
                  "endColumn": 29,
                  "snippet": {
                    "text": "filepaths_file = NamedTemporaryFile(delete=False)\nfor dirpath, dirnames, filenames in os.walk('.'):\n    for filename in filenames:\n        # our regexes expect filepath to use forward slash\n        filepath = Path(dirpath, filename).as_posix()\n        if not INCLUDE_REGEX.match(filepath):\n            continue\n",
                    "rendered": {
                      "text": "filepaths_file = NamedTemporaryFile(delete=False)\nfor dirpath, dirnames, filenames in os.walk('.'):\n    for filename in filenames:\n        # our regexes expect filepath to use forward slash\n        filepath = Path(dirpath, filename).as_posix()\n        if not INCLUDE_REGEX.match(filepath):\n            continue\n",
                      "markdown": "`filepaths_file = NamedTemporaryFile(delete=False)\nfor dirpath, dirnames, filenames in os.walk('.'):\n    for filename in filenames:\n        # our regexes expect filepath to use forward slash\n        filepath = Path(dirpath, filename).as_posix()\n        if not INCLUDE_REGEX.match(filepath):\n            continue\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 221,
                  "endLine": 44,
                  "endColumn": 225,
                  "snippet": {
                    "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-common/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                    "rendered": {
                      "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-common/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                      "markdown": "`\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-common/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 7,
                  "endLine": 44,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-common/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                    "rendered": {
                      "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-common/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                      "markdown": "`\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-common/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 38,
                  "endLine": 12,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\n## Reporting Bugs/Feature Requests\n\nWe welcome you to use the GitHub issue tracker to report bugs or suggest features.\n\nWhen filing an issue, please check [existing open](https://github.com/awslabs/aws-c-common/issues), or [recently closed](https://github.com/awslabs/aws-c-common/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aclosed%20), issues to make sure somebody else hasn't already\nreported the issue. Please try to include as much information as you can. Details like these are incredibly useful:\n",
                    "rendered": {
                      "text": "\n## Reporting Bugs/Feature Requests\n\nWe welcome you to use the GitHub issue tracker to report bugs or suggest features.\n\nWhen filing an issue, please check [existing open](https://github.com/awslabs/aws-c-common/issues), or [recently closed](https://github.com/awslabs/aws-c-common/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aclosed%20), issues to make sure somebody else hasn't already\nreported the issue. Please try to include as much information as you can. Details like these are incredibly useful:\n",
                      "markdown": "`\n## Reporting Bugs/Feature Requests\n\nWe welcome you to use the GitHub issue tracker to report bugs or suggest features.\n\nWhen filing an issue, please check [existing open](https://github.com/awslabs/aws-c-common/issues), or [recently closed](https://github.com/awslabs/aws-c-common/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aclosed%20), issues to make sure somebody else hasn't already\nreported the issue. Please try to include as much information as you can. Details like these are incredibly useful:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 48,
                  "endLine": 44,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-common/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                    "rendered": {
                      "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-common/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                      "markdown": "`\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-common/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-common.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 77,
                  "endLine": 28,
                  "endColumn": 83,
                  "snippet": {
                    "text": "\n1. You are working against the latest source on the *main* branch.\n2. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already.\n3. You open an issue to discuss any significant work - we would hate for your time to be wasted.\n\nTo send us a pull request, please:\n\n",
                    "rendered": {
                      "text": "\n1. You are working against the latest source on the *main* branch.\n2. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already.\n3. You open an issue to discuss any significant work - we would hate for your time to be wasted.\n\nTo send us a pull request, please:\n\n",
                      "markdown": "`\n1. You are working against the latest source on the *main* branch.\n2. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already.\n3. You open an issue to discuss any significant work - we would hate for your time to be wasted.\n\nTo send us a pull request, please:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}