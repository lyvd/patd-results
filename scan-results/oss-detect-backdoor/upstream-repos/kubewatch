{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_utils.tpl"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 57,
                  "endLine": 15,
                  "endColumn": 65,
                  "snippet": {
                    "text": "{{/*\nBuild env var name given a field\nUsage:\n{{ include \"common.utils.fieldToEnvVar\" dict \"field\" \"my-password\" }}\n*/}}\n{{- define \"common.utils.fieldToEnvVar\" -}}\n  {{- $fieldNameSplit := splitList \"-\" .field -}}\n",
                    "rendered": {
                      "text": "{{/*\nBuild env var name given a field\nUsage:\n{{ include \"common.utils.fieldToEnvVar\" dict \"field\" \"my-password\" }}\n*/}}\n{{- define \"common.utils.fieldToEnvVar\" -}}\n  {{- $fieldNameSplit := splitList \"-\" .field -}}\n",
                      "markdown": "`{{/*\nBuild env var name given a field\nUsage:\n{{ include \"common.utils.fieldToEnvVar\" dict \"field\" \"my-password\" }}\n*/}}\n{{- define \"common.utils.fieldToEnvVar\" -}}\n  {{- $fieldNameSplit := splitList \"-\" .field -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_utils.tpl"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 147,
                  "endLine": 9,
                  "endColumn": 153,
                  "snippet": {
                    "text": "*/}}\n{{- define \"common.utils.secret.getvalue\" -}}\n{{- $varname := include \"common.utils.fieldToEnvVar\" . -}}\nexport {{ $varname }}=$(kubectl get secret --namespace {{ .context.Release.Namespace | quote }} {{ .secret }} -o jsonpath=\"{.data.{{ .field }}}\" | base64 --decode)\n{{- end -}}\n\n{{/*\n",
                    "rendered": {
                      "text": "*/}}\n{{- define \"common.utils.secret.getvalue\" -}}\n{{- $varname := include \"common.utils.fieldToEnvVar\" . -}}\nexport {{ $varname }}=$(kubectl get secret --namespace {{ .context.Release.Namespace | quote }} {{ .secret }} -o jsonpath=\"{.data.{{ .field }}}\" | base64 --decode)\n{{- end -}}\n\n{{/*\n",
                      "markdown": "`*/}}\n{{- define \"common.utils.secret.getvalue\" -}}\n{{- $varname := include \"common.utils.fieldToEnvVar\" . -}}\nexport {{ $varname }}=$(kubectl get secret --namespace {{ .context.Release.Namespace | quote }} {{ .secret }} -o jsonpath=\"{.data.{{ .field }}}\" | base64 --decode)\n{{- end -}}\n\n{{/*\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_utils.tpl"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 5,
                  "endLine": 13,
                  "endColumn": 10,
                  "snippet": {
                    "text": "{{- end -}}\n\n{{/*\nBuild env var name given a field\nUsage:\n{{ include \"common.utils.fieldToEnvVar\" dict \"field\" \"my-password\" }}\n*/}}\n",
                    "rendered": {
                      "text": "{{- end -}}\n\n{{/*\nBuild env var name given a field\nUsage:\n{{ include \"common.utils.fieldToEnvVar\" dict \"field\" \"my-password\" }}\n*/}}\n",
                      "markdown": "`{{- end -}}\n\n{{/*\nBuild env var name given a field\nUsage:\n{{ include \"common.utils.fieldToEnvVar\" dict \"field\" \"my-password\" }}\n*/}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_utils.tpl"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 146,
                  "endLine": 9,
                  "endColumn": 154,
                  "snippet": {
                    "text": "*/}}\n{{- define \"common.utils.secret.getvalue\" -}}\n{{- $varname := include \"common.utils.fieldToEnvVar\" . -}}\nexport {{ $varname }}=$(kubectl get secret --namespace {{ .context.Release.Namespace | quote }} {{ .secret }} -o jsonpath=\"{.data.{{ .field }}}\" | base64 --decode)\n{{- end -}}\n\n{{/*\n",
                    "rendered": {
                      "text": "*/}}\n{{- define \"common.utils.secret.getvalue\" -}}\n{{- $varname := include \"common.utils.fieldToEnvVar\" . -}}\nexport {{ $varname }}=$(kubectl get secret --namespace {{ .context.Release.Namespace | quote }} {{ .secret }} -o jsonpath=\"{.data.{{ .field }}}\" | base64 --decode)\n{{- end -}}\n\n{{/*\n",
                      "markdown": "`*/}}\n{{- define \"common.utils.secret.getvalue\" -}}\n{{- $varname := include \"common.utils.fieldToEnvVar\" . -}}\nexport {{ $varname }}=$(kubectl get secret --namespace {{ .context.Release.Namespace | quote }} {{ .secret }} -o jsonpath=\"{.data.{{ .field }}}\" | base64 --decode)\n{{- end -}}\n\n{{/*\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/cmd/config.go"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 7,
                  "endLine": 18,
                  "snippet": {
                    "text": "limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"fmt\"\n\t\"os\"\n",
                    "rendered": {
                      "text": "limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"fmt\"\n\t\"os\"\n",
                      "markdown": "`limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"fmt\"\n\t\"os\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/go.sum"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 20,
                  "endLine": 69,
                  "endColumn": 27,
                  "snippet": {
                    "text": "M=\ncloud.google.com/go/apigeeregistry v0.6.0/go.mod h1:BFNzW7yQVLZ3yj0TKcwzb8n25CFBri51GVGOEUcgQsc=\ncloud.google.com/go/apikeys v0.4.0/go.mod h1:XATS/yqZbaBK0HOssf+ALHp8jAlNHUgyfprvNcBIszU=\ncloud.google.com/go/apikeys v0.5.0/go.mod h1:5aQfwY4D+ewMMWScd3hm2en3hCj+BROlyrt3ytS7KLI=\ncloud.google.com/go/apikeys v0.6.0/go.mod h1:kbpXu5upyiAlGkKrJgQl8A0rKNNJ7dQ377pdroRSSi8=\ncloud.google.com/go/appengine v1.4.0/go.mod h1:CS2NhuBuDXM9f+qscZ6V86m1MIIqPj3WC/UoEuR1Sno=\ncloud.google.com/go/appengine v1.5.0/go.mod h1:TfasSozdkFI0zeoxW3PTBLiNqRmzraodCWatWI9Dmak=\ncloud.google.com/go/appengine v1.6.0/go.mod h1:hg6i0J",
                    "rendered": {
                      "text": "M=\ncloud.google.com/go/apigeeregistry v0.6.0/go.mod h1:BFNzW7yQVLZ3yj0TKcwzb8n25CFBri51GVGOEUcgQsc=\ncloud.google.com/go/apikeys v0.4.0/go.mod h1:XATS/yqZbaBK0HOssf+ALHp8jAlNHUgyfprvNcBIszU=\ncloud.google.com/go/apikeys v0.5.0/go.mod h1:5aQfwY4D+ewMMWScd3hm2en3hCj+BROlyrt3ytS7KLI=\ncloud.google.com/go/apikeys v0.6.0/go.mod h1:kbpXu5upyiAlGkKrJgQl8A0rKNNJ7dQ377pdroRSSi8=\ncloud.google.com/go/appengine v1.4.0/go.mod h1:CS2NhuBuDXM9f+qscZ6V86m1MIIqPj3WC/UoEuR1Sno=\ncloud.google.com/go/appengine v1.5.0/go.mod h1:TfasSozdkFI0zeoxW3PTBLiNqRmzraodCWatWI9Dmak=\ncloud.google.com/go/appengine v1.6.0/go.mod h1:hg6i0J",
                      "markdown": "`M=\ncloud.google.com/go/apigeeregistry v0.6.0/go.mod h1:BFNzW7yQVLZ3yj0TKcwzb8n25CFBri51GVGOEUcgQsc=\ncloud.google.com/go/apikeys v0.4.0/go.mod h1:XATS/yqZbaBK0HOssf+ALHp8jAlNHUgyfprvNcBIszU=\ncloud.google.com/go/apikeys v0.5.0/go.mod h1:5aQfwY4D+ewMMWScd3hm2en3hCj+BROlyrt3ytS7KLI=\ncloud.google.com/go/apikeys v0.6.0/go.mod h1:kbpXu5upyiAlGkKrJgQl8A0rKNNJ7dQ377pdroRSSi8=\ncloud.google.com/go/appengine v1.4.0/go.mod h1:CS2NhuBuDXM9f+qscZ6V86m1MIIqPj3WC/UoEuR1Sno=\ncloud.google.com/go/appengine v1.5.0/go.mod h1:TfasSozdkFI0zeoxW3PTBLiNqRmzraodCWatWI9Dmak=\ncloud.google.com/go/appengine v1.6.0/go.mod h1:hg6i0J`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/go.sum"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 20,
                  "endLine": 68,
                  "endColumn": 27,
                  "snippet": {
                    "text": "d.google.com/go/apigeeregistry v0.5.0/go.mod h1:YR5+s0BVNZfVOUkMa5pAR2xGd0A473vA5M7j247o1wM=\ncloud.google.com/go/apigeeregistry v0.6.0/go.mod h1:BFNzW7yQVLZ3yj0TKcwzb8n25CFBri51GVGOEUcgQsc=\ncloud.google.com/go/apikeys v0.4.0/go.mod h1:XATS/yqZbaBK0HOssf+ALHp8jAlNHUgyfprvNcBIszU=\ncloud.google.com/go/apikeys v0.5.0/go.mod h1:5aQfwY4D+ewMMWScd3hm2en3hCj+BROlyrt3ytS7KLI=\ncloud.google.com/go/apikeys v0.6.0/go.mod h1:kbpXu5upyiAlGkKrJgQl8A0rKNNJ7dQ377pdroRSSi8=\ncloud.google.com/go/appengine v1.4.0/go.mod h1:CS2NhuBuDXM9f+qscZ6V86m1MIIqPj3WC/UoEuR1Sno=\ncloud.google.com/go/appengine v1.5.0/go.mod h1:TfasSozd",
                    "rendered": {
                      "text": "d.google.com/go/apigeeregistry v0.5.0/go.mod h1:YR5+s0BVNZfVOUkMa5pAR2xGd0A473vA5M7j247o1wM=\ncloud.google.com/go/apigeeregistry v0.6.0/go.mod h1:BFNzW7yQVLZ3yj0TKcwzb8n25CFBri51GVGOEUcgQsc=\ncloud.google.com/go/apikeys v0.4.0/go.mod h1:XATS/yqZbaBK0HOssf+ALHp8jAlNHUgyfprvNcBIszU=\ncloud.google.com/go/apikeys v0.5.0/go.mod h1:5aQfwY4D+ewMMWScd3hm2en3hCj+BROlyrt3ytS7KLI=\ncloud.google.com/go/apikeys v0.6.0/go.mod h1:kbpXu5upyiAlGkKrJgQl8A0rKNNJ7dQ377pdroRSSi8=\ncloud.google.com/go/appengine v1.4.0/go.mod h1:CS2NhuBuDXM9f+qscZ6V86m1MIIqPj3WC/UoEuR1Sno=\ncloud.google.com/go/appengine v1.5.0/go.mod h1:TfasSozd",
                      "markdown": "`d.google.com/go/apigeeregistry v0.5.0/go.mod h1:YR5+s0BVNZfVOUkMa5pAR2xGd0A473vA5M7j247o1wM=\ncloud.google.com/go/apigeeregistry v0.6.0/go.mod h1:BFNzW7yQVLZ3yj0TKcwzb8n25CFBri51GVGOEUcgQsc=\ncloud.google.com/go/apikeys v0.4.0/go.mod h1:XATS/yqZbaBK0HOssf+ALHp8jAlNHUgyfprvNcBIszU=\ncloud.google.com/go/apikeys v0.5.0/go.mod h1:5aQfwY4D+ewMMWScd3hm2en3hCj+BROlyrt3ytS7KLI=\ncloud.google.com/go/apikeys v0.6.0/go.mod h1:kbpXu5upyiAlGkKrJgQl8A0rKNNJ7dQ377pdroRSSi8=\ncloud.google.com/go/appengine v1.4.0/go.mod h1:CS2NhuBuDXM9f+qscZ6V86m1MIIqPj3WC/UoEuR1Sno=\ncloud.google.com/go/appengine v1.5.0/go.mod h1:TfasSozd`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/go.sum"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 20,
                  "endLine": 67,
                  "endColumn": 27,
                  "snippet": {
                    "text": "e.com/go/apigeeregistry v0.4.0/go.mod h1:EUG4PGcsZvxOXAdyEghIdXwAEi/4MEaoqLMLDMIwKXY=\ncloud.google.com/go/apigeeregistry v0.5.0/go.mod h1:YR5+s0BVNZfVOUkMa5pAR2xGd0A473vA5M7j247o1wM=\ncloud.google.com/go/apigeeregistry v0.6.0/go.mod h1:BFNzW7yQVLZ3yj0TKcwzb8n25CFBri51GVGOEUcgQsc=\ncloud.google.com/go/apikeys v0.4.0/go.mod h1:XATS/yqZbaBK0HOssf+ALHp8jAlNHUgyfprvNcBIszU=\ncloud.google.com/go/apikeys v0.5.0/go.mod h1:5aQfwY4D+ewMMWScd3hm2en3hCj+BROlyrt3ytS7KLI=\ncloud.google.com/go/apikeys v0.6.0/go.mod h1:kbpXu5upyiAlGkKrJgQl8A0rKNNJ7dQ377pdroRSSi8=\ncloud.google.com/go/appengine v1.4.0/go.mod h1:CS2NhuBuDX",
                    "rendered": {
                      "text": "e.com/go/apigeeregistry v0.4.0/go.mod h1:EUG4PGcsZvxOXAdyEghIdXwAEi/4MEaoqLMLDMIwKXY=\ncloud.google.com/go/apigeeregistry v0.5.0/go.mod h1:YR5+s0BVNZfVOUkMa5pAR2xGd0A473vA5M7j247o1wM=\ncloud.google.com/go/apigeeregistry v0.6.0/go.mod h1:BFNzW7yQVLZ3yj0TKcwzb8n25CFBri51GVGOEUcgQsc=\ncloud.google.com/go/apikeys v0.4.0/go.mod h1:XATS/yqZbaBK0HOssf+ALHp8jAlNHUgyfprvNcBIszU=\ncloud.google.com/go/apikeys v0.5.0/go.mod h1:5aQfwY4D+ewMMWScd3hm2en3hCj+BROlyrt3ytS7KLI=\ncloud.google.com/go/apikeys v0.6.0/go.mod h1:kbpXu5upyiAlGkKrJgQl8A0rKNNJ7dQ377pdroRSSi8=\ncloud.google.com/go/appengine v1.4.0/go.mod h1:CS2NhuBuDX",
                      "markdown": "`e.com/go/apigeeregistry v0.4.0/go.mod h1:EUG4PGcsZvxOXAdyEghIdXwAEi/4MEaoqLMLDMIwKXY=\ncloud.google.com/go/apigeeregistry v0.5.0/go.mod h1:YR5+s0BVNZfVOUkMa5pAR2xGd0A473vA5M7j247o1wM=\ncloud.google.com/go/apigeeregistry v0.6.0/go.mod h1:BFNzW7yQVLZ3yj0TKcwzb8n25CFBri51GVGOEUcgQsc=\ncloud.google.com/go/apikeys v0.4.0/go.mod h1:XATS/yqZbaBK0HOssf+ALHp8jAlNHUgyfprvNcBIszU=\ncloud.google.com/go/apikeys v0.5.0/go.mod h1:5aQfwY4D+ewMMWScd3hm2en3hCj+BROlyrt3ytS7KLI=\ncloud.google.com/go/apikeys v0.6.0/go.mod h1:kbpXu5upyiAlGkKrJgQl8A0rKNNJ7dQ377pdroRSSi8=\ncloud.google.com/go/appengine v1.4.0/go.mod h1:CS2NhuBuDX`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/pre-applypatch.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/pre-receive.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_validations.tpl"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 75,
                  "endLine": 31,
                  "endColumn": 83,
                  "snippet": {
                    "text": "  - valueKey - String - Required. The path to the validating value in the values.yaml, e.g: \"mysql.password\"\n  - secret - String - Optional. Name of the secret where the validating value is generated/stored, e.g: \"mysql-passwords-secret\"\n  - field - String - Optional. Name of the field in the secret data, e.g: \"mysql-password\"\n  - subchart - String - Optional - Name of the subchart that the validated password is part of.\n*/}}\n{{- define \"common.validations.values.single.empty\" -}}\n  {{- $value := include \"common.utils.getValueFromKey\" (dict \"key\" .valueKey \"context\" .context) }}\n",
                    "rendered": {
                      "text": "  - valueKey - String - Required. The path to the validating value in the values.yaml, e.g: \"mysql.password\"\n  - secret - String - Optional. Name of the secret where the validating value is generated/stored, e.g: \"mysql-passwords-secret\"\n  - field - String - Optional. Name of the field in the secret data, e.g: \"mysql-password\"\n  - subchart - String - Optional - Name of the subchart that the validated password is part of.\n*/}}\n{{- define \"common.validations.values.single.empty\" -}}\n  {{- $value := include \"common.utils.getValueFromKey\" (dict \"key\" .valueKey \"context\" .context) }}\n",
                      "markdown": "`  - valueKey - String - Required. The path to the validating value in the values.yaml, e.g: \"mysql.password\"\n  - secret - String - Optional. Name of the secret where the validating value is generated/stored, e.g: \"mysql-passwords-secret\"\n  - field - String - Optional. Name of the field in the secret data, e.g: \"mysql-password\"\n  - subchart - String - Optional - Name of the subchart that the validated password is part of.\n*/}}\n{{- define \"common.validations.values.single.empty\" -}}\n  {{- $value := include \"common.utils.getValueFromKey\" (dict \"key\" .valueKey \"context\" .context) }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_validations.tpl"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 81,
                  "endLine": 30,
                  "endColumn": 89,
                  "snippet": {
                    "text": "Validate value params:\n  - valueKey - String - Required. The path to the validating value in the values.yaml, e.g: \"mysql.password\"\n  - secret - String - Optional. Name of the secret where the validating value is generated/stored, e.g: \"mysql-passwords-secret\"\n  - field - String - Optional. Name of the field in the secret data, e.g: \"mysql-password\"\n  - subchart - String - Optional - Name of the subchart that the validated password is part of.\n*/}}\n{{- define \"common.validations.values.single.empty\" -}}\n",
                    "rendered": {
                      "text": "Validate value params:\n  - valueKey - String - Required. The path to the validating value in the values.yaml, e.g: \"mysql.password\"\n  - secret - String - Optional. Name of the secret where the validating value is generated/stored, e.g: \"mysql-passwords-secret\"\n  - field - String - Optional. Name of the field in the secret data, e.g: \"mysql-password\"\n  - subchart - String - Optional - Name of the subchart that the validated password is part of.\n*/}}\n{{- define \"common.validations.values.single.empty\" -}}\n",
                      "markdown": "`Validate value params:\n  - valueKey - String - Required. The path to the validating value in the values.yaml, e.g: \"mysql.password\"\n  - secret - String - Optional. Name of the secret where the validating value is generated/stored, e.g: \"mysql-passwords-secret\"\n  - field - String - Optional. Name of the field in the secret data, e.g: \"mysql-password\"\n  - subchart - String - Optional - Name of the subchart that the validated password is part of.\n*/}}\n{{- define \"common.validations.values.single.empty\" -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_validations.tpl"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 111,
                  "endLine": 29,
                  "endColumn": 119,
                  "snippet": {
                    "text": "\nValidate value params:\n  - valueKey - String - Required. The path to the validating value in the values.yaml, e.g: \"mysql.password\"\n  - secret - String - Optional. Name of the secret where the validating value is generated/stored, e.g: \"mysql-passwords-secret\"\n  - field - String - Optional. Name of the field in the secret data, e.g: \"mysql-password\"\n  - subchart - String - Optional - Name of the subchart that the validated password is part of.\n*/}}\n",
                    "rendered": {
                      "text": "\nValidate value params:\n  - valueKey - String - Required. The path to the validating value in the values.yaml, e.g: \"mysql.password\"\n  - secret - String - Optional. Name of the secret where the validating value is generated/stored, e.g: \"mysql-passwords-secret\"\n  - field - String - Optional. Name of the field in the secret data, e.g: \"mysql-password\"\n  - subchart - String - Optional - Name of the subchart that the validated password is part of.\n*/}}\n",
                      "markdown": "`\nValidate value params:\n  - valueKey - String - Required. The path to the validating value in the values.yaml, e.g: \"mysql.password\"\n  - secret - String - Optional. Name of the secret where the validating value is generated/stored, e.g: \"mysql-passwords-secret\"\n  - field - String - Optional. Name of the field in the secret data, e.g: \"mysql-password\"\n  - subchart - String - Optional - Name of the subchart that the validated password is part of.\n*/}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_validations.tpl"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 99,
                  "endLine": 28,
                  "endColumn": 107,
                  "snippet": {
                    "text": "empty.\n\nUsage:\n{{ include \"common.validations.value.empty\" (dict \"valueKey\" \"mariadb.password\" \"secret\" \"secretName\" \"field\" \"my-password\" \"subchart\" \"subchart\" \"context\" $) }}\n\nValidate value params:\n  - valueKey - String - Required. The path to the validating value in the values.yaml, e.g: \"mysql.password\"\n  - secret - String - Optional. Name of the secret where the validating value is generated/stored, e.g: \"mysql-passwords-secret\"\n  - field - String - Optional. Name of the field in the secret data, e.g: \"mysql-password\"\n  - subchart - String - Optional - Name of the subchart that the validated pas",
                    "rendered": {
                      "text": "empty.\n\nUsage:\n{{ include \"common.validations.value.empty\" (dict \"valueKey\" \"mariadb.password\" \"secret\" \"secretName\" \"field\" \"my-password\" \"subchart\" \"subchart\" \"context\" $) }}\n\nValidate value params:\n  - valueKey - String - Required. The path to the validating value in the values.yaml, e.g: \"mysql.password\"\n  - secret - String - Optional. Name of the secret where the validating value is generated/stored, e.g: \"mysql-passwords-secret\"\n  - field - String - Optional. Name of the field in the secret data, e.g: \"mysql-password\"\n  - subchart - String - Optional - Name of the subchart that the validated pas",
                      "markdown": "`empty.\n\nUsage:\n{{ include \"common.validations.value.empty\" (dict \"valueKey\" \"mariadb.password\" \"secret\" \"secretName\" \"field\" \"my-password\" \"subchart\" \"subchart\" \"context\" $) }}\n\nValidate value params:\n  - valueKey - String - Required. The path to the validating value in the values.yaml, e.g: \"mysql.password\"\n  - secret - String - Optional. Name of the secret where the validating value is generated/stored, e.g: \"mysql-passwords-secret\"\n  - field - String - Optional. Name of the field in the secret data, e.g: \"mysql-password\"\n  - subchart - String - Optional - Name of the subchart that the validated pas`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_validations.tpl"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 114,
                  "endLine": 25,
                  "endColumn": 122,
                  "snippet": {
                    "text": "Validate a value must not be empty.\n\nUsage:\n{{ include \"common.validations.value.empty\" (dict \"valueKey\" \"mariadb.password\" \"secret\" \"secretName\" \"field\" \"my-password\" \"subchart\" \"subchart\" \"context\" $) }}\n\nValidate value params:\n  - valueKey - String - Required. The path to the validating value in the values.yaml, e.g: \"mysql.password\"\n",
                    "rendered": {
                      "text": "Validate a value must not be empty.\n\nUsage:\n{{ include \"common.validations.value.empty\" (dict \"valueKey\" \"mariadb.password\" \"secret\" \"secretName\" \"field\" \"my-password\" \"subchart\" \"subchart\" \"context\" $) }}\n\nValidate value params:\n  - valueKey - String - Required. The path to the validating value in the values.yaml, e.g: \"mysql.password\"\n",
                      "markdown": "`Validate a value must not be empty.\n\nUsage:\n{{ include \"common.validations.value.empty\" (dict \"valueKey\" \"mariadb.password\" \"secret\" \"secretName\" \"field\" \"my-password\" \"subchart\" \"subchart\" \"context\" $) }}\n\nValidate value params:\n  - valueKey - String - Required. The path to the validating value in the values.yaml, e.g: \"mysql.password\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_validations.tpl"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 70,
                  "endLine": 25,
                  "endColumn": 78,
                  "snippet": {
                    "text": "Validate a value must not be empty.\n\nUsage:\n{{ include \"common.validations.value.empty\" (dict \"valueKey\" \"mariadb.password\" \"secret\" \"secretName\" \"field\" \"my-password\" \"subchart\" \"subchart\" \"context\" $) }}\n\nValidate value params:\n  - valueKey - String - Required. The path to the validating value in the values.yaml, e.g: \"mysql.password\"\n",
                    "rendered": {
                      "text": "Validate a value must not be empty.\n\nUsage:\n{{ include \"common.validations.value.empty\" (dict \"valueKey\" \"mariadb.password\" \"secret\" \"secretName\" \"field\" \"my-password\" \"subchart\" \"subchart\" \"context\" $) }}\n\nValidate value params:\n  - valueKey - String - Required. The path to the validating value in the values.yaml, e.g: \"mysql.password\"\n",
                      "markdown": "`Validate a value must not be empty.\n\nUsage:\n{{ include \"common.validations.value.empty\" (dict \"valueKey\" \"mariadb.password\" \"secret\" \"secretName\" \"field\" \"my-password\" \"subchart\" \"subchart\" \"context\" $) }}\n\nValidate value params:\n  - valueKey - String - Required. The path to the validating value in the values.yaml, e.g: \"mysql.password\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_validations.tpl"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 81,
                  "endLine": 13,
                  "endColumn": 89,
                  "snippet": {
                    "text": "Validate value params:\n  - valueKey - String - Required. The path to the validating value in the values.yaml, e.g: \"mysql.password\"\n  - secret - String - Optional. Name of the secret where the validating value is generated/stored, e.g: \"mysql-passwords-secret\"\n  - field - String - Optional. Name of the field in the secret data, e.g: \"mysql-password\"\n*/}}\n{{- define \"common.validations.values.multiple.empty\" -}}\n  {{- range .required -}}\n",
                    "rendered": {
                      "text": "Validate value params:\n  - valueKey - String - Required. The path to the validating value in the values.yaml, e.g: \"mysql.password\"\n  - secret - String - Optional. Name of the secret where the validating value is generated/stored, e.g: \"mysql-passwords-secret\"\n  - field - String - Optional. Name of the field in the secret data, e.g: \"mysql-password\"\n*/}}\n{{- define \"common.validations.values.multiple.empty\" -}}\n  {{- range .required -}}\n",
                      "markdown": "`Validate value params:\n  - valueKey - String - Required. The path to the validating value in the values.yaml, e.g: \"mysql.password\"\n  - secret - String - Optional. Name of the secret where the validating value is generated/stored, e.g: \"mysql-passwords-secret\"\n  - field - String - Optional. Name of the field in the secret data, e.g: \"mysql-password\"\n*/}}\n{{- define \"common.validations.values.multiple.empty\" -}}\n  {{- range .required -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_validations.tpl"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 111,
                  "endLine": 12,
                  "endColumn": 119,
                  "snippet": {
                    "text": "\nValidate value params:\n  - valueKey - String - Required. The path to the validating value in the values.yaml, e.g: \"mysql.password\"\n  - secret - String - Optional. Name of the secret where the validating value is generated/stored, e.g: \"mysql-passwords-secret\"\n  - field - String - Optional. Name of the field in the secret data, e.g: \"mysql-password\"\n*/}}\n{{- define \"common.validations.values.multiple.empty\" -}}\n",
                    "rendered": {
                      "text": "\nValidate value params:\n  - valueKey - String - Required. The path to the validating value in the values.yaml, e.g: \"mysql.password\"\n  - secret - String - Optional. Name of the secret where the validating value is generated/stored, e.g: \"mysql-passwords-secret\"\n  - field - String - Optional. Name of the field in the secret data, e.g: \"mysql-password\"\n*/}}\n{{- define \"common.validations.values.multiple.empty\" -}}\n",
                      "markdown": "`\nValidate value params:\n  - valueKey - String - Required. The path to the validating value in the values.yaml, e.g: \"mysql.password\"\n  - secret - String - Optional. Name of the secret where the validating value is generated/stored, e.g: \"mysql-passwords-secret\"\n  - field - String - Optional. Name of the field in the secret data, e.g: \"mysql-password\"\n*/}}\n{{- define \"common.validations.values.multiple.empty\" -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_validations.tpl"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 99,
                  "endLine": 11,
                  "endColumn": 107,
                  "snippet": {
                    "text": "{{ include \"common.validations.values.empty\" (dict \"required\" (list $validateValueConf00 $validateValueConf01) \"context\" $) }}\n\nValidate value params:\n  - valueKey - String - Required. The path to the validating value in the values.yaml, e.g: \"mysql.password\"\n  - secret - String - Optional. Name of the secret where the validating value is generated/stored, e.g: \"mysql-passwords-secret\"\n  - field - String - Optional. Name of the field in the secret data, e.g: \"mysql-password\"\n*/}}\n",
                    "rendered": {
                      "text": "{{ include \"common.validations.values.empty\" (dict \"required\" (list $validateValueConf00 $validateValueConf01) \"context\" $) }}\n\nValidate value params:\n  - valueKey - String - Required. The path to the validating value in the values.yaml, e.g: \"mysql.password\"\n  - secret - String - Optional. Name of the secret where the validating value is generated/stored, e.g: \"mysql-passwords-secret\"\n  - field - String - Optional. Name of the field in the secret data, e.g: \"mysql-password\"\n*/}}\n",
                      "markdown": "`{{ include \"common.validations.values.empty\" (dict \"required\" (list $validateValueConf00 $validateValueConf01) \"context\" $) }}\n\nValidate value params:\n  - valueKey - String - Required. The path to the validating value in the values.yaml, e.g: \"mysql.password\"\n  - secret - String - Optional. Name of the secret where the validating value is generated/stored, e.g: \"mysql-passwords-secret\"\n  - field - String - Optional. Name of the field in the secret data, e.g: \"mysql-password\"\n*/}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_validations.tpl"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 92,
                  "endLine": 7,
                  "endColumn": 100,
                  "snippet": {
                    "text": "\nUsage:\n{{- $validateValueConf00 := (dict \"valueKey\" \"path.to.value\" \"secret\" \"secretName\" \"field\" \"password-00\") -}}\n{{- $validateValueConf01 := (dict \"valueKey\" \"path.to.value\" \"secret\" \"secretName\" \"field\" \"password-01\") -}}\n{{ include \"common.validations.values.empty\" (dict \"required\" (list $validateValueConf00 $validateValueConf01) \"context\" $) }}\n\nValidate value params:\n",
                    "rendered": {
                      "text": "\nUsage:\n{{- $validateValueConf00 := (dict \"valueKey\" \"path.to.value\" \"secret\" \"secretName\" \"field\" \"password-00\") -}}\n{{- $validateValueConf01 := (dict \"valueKey\" \"path.to.value\" \"secret\" \"secretName\" \"field\" \"password-01\") -}}\n{{ include \"common.validations.values.empty\" (dict \"required\" (list $validateValueConf00 $validateValueConf01) \"context\" $) }}\n\nValidate value params:\n",
                      "markdown": "`\nUsage:\n{{- $validateValueConf00 := (dict \"valueKey\" \"path.to.value\" \"secret\" \"secretName\" \"field\" \"password-00\") -}}\n{{- $validateValueConf01 := (dict \"valueKey\" \"path.to.value\" \"secret\" \"secretName\" \"field\" \"password-01\") -}}\n{{ include \"common.validations.values.empty\" (dict \"required\" (list $validateValueConf00 $validateValueConf01) \"context\" $) }}\n\nValidate value params:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_validations.tpl"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 92,
                  "endLine": 6,
                  "endColumn": 100,
                  "snippet": {
                    "text": "Validate values must not be empty.\n\nUsage:\n{{- $validateValueConf00 := (dict \"valueKey\" \"path.to.value\" \"secret\" \"secretName\" \"field\" \"password-00\") -}}\n{{- $validateValueConf01 := (dict \"valueKey\" \"path.to.value\" \"secret\" \"secretName\" \"field\" \"password-01\") -}}\n{{ include \"common.validations.values.empty\" (dict \"required\" (list $validateValueConf00 $validateValueConf01) \"context\" $) }}\n\n",
                    "rendered": {
                      "text": "Validate values must not be empty.\n\nUsage:\n{{- $validateValueConf00 := (dict \"valueKey\" \"path.to.value\" \"secret\" \"secretName\" \"field\" \"password-00\") -}}\n{{- $validateValueConf01 := (dict \"valueKey\" \"path.to.value\" \"secret\" \"secretName\" \"field\" \"password-01\") -}}\n{{ include \"common.validations.values.empty\" (dict \"required\" (list $validateValueConf00 $validateValueConf01) \"context\" $) }}\n\n",
                      "markdown": "`Validate values must not be empty.\n\nUsage:\n{{- $validateValueConf00 := (dict \"valueKey\" \"path.to.value\" \"secret\" \"secretName\" \"field\" \"password-00\") -}}\n{{- $validateValueConf01 := (dict \"valueKey\" \"path.to.value\" \"secret\" \"secretName\" \"field\" \"password-01\") -}}\n{{ include \"common.validations.values.empty\" (dict \"required\" (list $validateValueConf00 $validateValueConf01) \"context\" $) }}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 7,
                  "endLine": 18,
                  "snippet": {
                    "text": "limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n",
                    "rendered": {
                      "text": "limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n",
                      "markdown": "`limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 2,
                  "endLine": 50,
                  "snippet": {
                    "text": " - slack\n - hipchat\n - mattermost\n - flock\n - webhook\n - lark\n`,\n\n",
                    "rendered": {
                      "text": " - slack\n - hipchat\n - mattermost\n - flock\n - webhook\n - lark\n`,\n\n",
                      "markdown": "` - slack\n - hipchat\n - mattermost\n - flock\n - webhook\n - lark\n`,\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/cmd/msteams.go"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 7,
                  "endLine": 18,
                  "snippet": {
                    "text": "limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"github.com/bitnami-labs/kubewatch/config\"\n\t\"github.com/sirupsen/logrus\"\n",
                    "rendered": {
                      "text": "limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"github.com/bitnami-labs/kubewatch/config\"\n\t\"github.com/sirupsen/logrus\"\n",
                      "markdown": "`limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"github.com/bitnami-labs/kubewatch/config\"\n\t\"github.com/sirupsen/logrus\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/config/config.go"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 40,
                  "endLine": 193,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t// Username for PLAN and LOGIN auth mechanisms.\n\tUsername string `json:\"username\" yaml:\"username,omitempty\"`\n\t// Password for PLAIN and LOGIN auth mechanisms.\n\tPassword string `json:\"password\" yaml:\"password,omitempty\"`\n\t// Identity for PLAIN auth mechanism\n\tIdentity string `json:\"identity\" yaml:\"identity,omitempty\"`\n\t// Secret for CRAM-MD5 auth mechanism\n",
                    "rendered": {
                      "text": "\t// Username for PLAN and LOGIN auth mechanisms.\n\tUsername string `json:\"username\" yaml:\"username,omitempty\"`\n\t// Password for PLAIN and LOGIN auth mechanisms.\n\tPassword string `json:\"password\" yaml:\"password,omitempty\"`\n\t// Identity for PLAIN auth mechanism\n\tIdentity string `json:\"identity\" yaml:\"identity,omitempty\"`\n\t// Secret for CRAM-MD5 auth mechanism\n",
                      "markdown": "`\t// Username for PLAN and LOGIN auth mechanisms.\n\tUsername string `json:\"username\" yaml:\"username,omitempty\"`\n\t// Password for PLAIN and LOGIN auth mechanisms.\n\tPassword string `json:\"password\" yaml:\"password,omitempty\"`\n\t// Identity for PLAIN auth mechanism\n\tIdentity string `json:\"identity\" yaml:\"identity,omitempty\"`\n\t// Secret for CRAM-MD5 auth mechanism\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/config/config.go"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 24,
                  "endLine": 193,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\t// Username for PLAN and LOGIN auth mechanisms.\n\tUsername string `json:\"username\" yaml:\"username,omitempty\"`\n\t// Password for PLAIN and LOGIN auth mechanisms.\n\tPassword string `json:\"password\" yaml:\"password,omitempty\"`\n\t// Identity for PLAIN auth mechanism\n\tIdentity string `json:\"identity\" yaml:\"identity,omitempty\"`\n\t// Secret for CRAM-MD5 auth mechanism\n",
                    "rendered": {
                      "text": "\t// Username for PLAN and LOGIN auth mechanisms.\n\tUsername string `json:\"username\" yaml:\"username,omitempty\"`\n\t// Password for PLAIN and LOGIN auth mechanisms.\n\tPassword string `json:\"password\" yaml:\"password,omitempty\"`\n\t// Identity for PLAIN auth mechanism\n\tIdentity string `json:\"identity\" yaml:\"identity,omitempty\"`\n\t// Secret for CRAM-MD5 auth mechanism\n",
                      "markdown": "`\t// Username for PLAN and LOGIN auth mechanisms.\n\tUsername string `json:\"username\" yaml:\"username,omitempty\"`\n\t// Password for PLAIN and LOGIN auth mechanisms.\n\tPassword string `json:\"password\" yaml:\"password,omitempty\"`\n\t// Identity for PLAIN auth mechanism\n\tIdentity string `json:\"identity\" yaml:\"identity,omitempty\"`\n\t// Secret for CRAM-MD5 auth mechanism\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/config/config.go"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 1,
                  "endLine": 193,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\t// Username for PLAN and LOGIN auth mechanisms.\n\tUsername string `json:\"username\" yaml:\"username,omitempty\"`\n\t// Password for PLAIN and LOGIN auth mechanisms.\n\tPassword string `json:\"password\" yaml:\"password,omitempty\"`\n\t// Identity for PLAIN auth mechanism\n\tIdentity string `json:\"identity\" yaml:\"identity,omitempty\"`\n\t// Secret for CRAM-MD5 auth mechanism\n",
                    "rendered": {
                      "text": "\t// Username for PLAN and LOGIN auth mechanisms.\n\tUsername string `json:\"username\" yaml:\"username,omitempty\"`\n\t// Password for PLAIN and LOGIN auth mechanisms.\n\tPassword string `json:\"password\" yaml:\"password,omitempty\"`\n\t// Identity for PLAIN auth mechanism\n\tIdentity string `json:\"identity\" yaml:\"identity,omitempty\"`\n\t// Secret for CRAM-MD5 auth mechanism\n",
                      "markdown": "`\t// Username for PLAN and LOGIN auth mechanisms.\n\tUsername string `json:\"username\" yaml:\"username,omitempty\"`\n\t// Password for PLAIN and LOGIN auth mechanisms.\n\tPassword string `json:\"password\" yaml:\"password,omitempty\"`\n\t// Identity for PLAIN auth mechanism\n\tIdentity string `json:\"identity\" yaml:\"identity,omitempty\"`\n\t// Secret for CRAM-MD5 auth mechanism\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/config/config.go"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 4,
                  "endLine": 192,
                  "endColumn": 12,
                  "snippet": {
                    "text": "type SMTPAuth struct {\n\t// Username for PLAN and LOGIN auth mechanisms.\n\tUsername string `json:\"username\" yaml:\"username,omitempty\"`\n\t// Password for PLAIN and LOGIN auth mechanisms.\n\tPassword string `json:\"password\" yaml:\"password,omitempty\"`\n\t// Identity for PLAIN auth mechanism\n\tIdentity string `json:\"identity\" yaml:\"identity,omitempty\"`\n",
                    "rendered": {
                      "text": "type SMTPAuth struct {\n\t// Username for PLAN and LOGIN auth mechanisms.\n\tUsername string `json:\"username\" yaml:\"username,omitempty\"`\n\t// Password for PLAIN and LOGIN auth mechanisms.\n\tPassword string `json:\"password\" yaml:\"password,omitempty\"`\n\t// Identity for PLAIN auth mechanism\n\tIdentity string `json:\"identity\" yaml:\"identity,omitempty\"`\n",
                      "markdown": "`type SMTPAuth struct {\n\t// Username for PLAN and LOGIN auth mechanisms.\n\tUsername string `json:\"username\" yaml:\"username,omitempty\"`\n\t// Password for PLAIN and LOGIN auth mechanisms.\n\tPassword string `json:\"password\" yaml:\"password,omitempty\"`\n\t// Identity for PLAIN auth mechanism\n\tIdentity string `json:\"identity\" yaml:\"identity,omitempty\"`\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/config/config.go"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 4,
                  "endLine": 139,
                  "endColumn": 11,
                  "snippet": {
                    "text": "}\n\n// Flock contains flock configuration\ntype Flock struct {\n\t// URL of the flock API.\n\tUrl string `json:\"url\"`\n}\n",
                    "rendered": {
                      "text": "}\n\n// Flock contains flock configuration\ntype Flock struct {\n\t// URL of the flock API.\n\tUrl string `json:\"url\"`\n}\n",
                      "markdown": "`}\n\n// Flock contains flock configuration\ntype Flock struct {\n\t// URL of the flock API.\n\tUrl string `json:\"url\"`\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/config/config.go"
                },
                "region": {
                  "startLine": 62,
                  "endLine": 62,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\tServices              bool `json:\"svc\"`\n\tPod                   bool `json:\"po\"`\n\tJob                   bool `json:\"job\"`\n\tNode                  bool `json:\"node\"`\n\tClusterRole           bool `json:\"clusterrole\"`\n\tClusterRoleBinding    bool `json:\"clusterrolebinding\"`\n\tServiceAccount        bool `json:\"sa\"`\n",
                    "rendered": {
                      "text": "\tServices              bool `json:\"svc\"`\n\tPod                   bool `json:\"po\"`\n\tJob                   bool `json:\"job\"`\n\tNode                  bool `json:\"node\"`\n\tClusterRole           bool `json:\"clusterrole\"`\n\tClusterRoleBinding    bool `json:\"clusterrolebinding\"`\n\tServiceAccount        bool `json:\"sa\"`\n",
                      "markdown": "`\tServices              bool `json:\"svc\"`\n\tPod                   bool `json:\"po\"`\n\tJob                   bool `json:\"job\"`\n\tNode                  bool `json:\"node\"`\n\tClusterRole           bool `json:\"clusterrole\"`\n\tClusterRoleBinding    bool `json:\"clusterrolebinding\"`\n\tServiceAccount        bool `json:\"sa\"`\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/config/config.go"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 13,
                  "endLine": 44,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\tSlackWebhook SlackWebhook `json:\"slackwebhook\"`\n\tHipchat      Hipchat      `json:\"hipchat\"`\n\tMattermost   Mattermost   `json:\"mattermost\"`\n\tFlock        Flock        `json:\"flock\"`\n\tWebhook      Webhook      `json:\"webhook\"`\n\tCloudEvent   CloudEvent   `json:\"cloudevent\"`\n\tMSTeams      MSTeams      `json:\"msteams\"`\n",
                    "rendered": {
                      "text": "\tSlackWebhook SlackWebhook `json:\"slackwebhook\"`\n\tHipchat      Hipchat      `json:\"hipchat\"`\n\tMattermost   Mattermost   `json:\"mattermost\"`\n\tFlock        Flock        `json:\"flock\"`\n\tWebhook      Webhook      `json:\"webhook\"`\n\tCloudEvent   CloudEvent   `json:\"cloudevent\"`\n\tMSTeams      MSTeams      `json:\"msteams\"`\n",
                      "markdown": "`\tSlackWebhook SlackWebhook `json:\"slackwebhook\"`\n\tHipchat      Hipchat      `json:\"hipchat\"`\n\tMattermost   Mattermost   `json:\"mattermost\"`\n\tFlock        Flock        `json:\"flock\"`\n\tWebhook      Webhook      `json:\"webhook\"`\n\tCloudEvent   CloudEvent   `json:\"cloudevent\"`\n\tMSTeams      MSTeams      `json:\"msteams\"`\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/config/config.go"
                },
                "region": {
                  "startLine": 44,
                  "endLine": 44,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\tSlackWebhook SlackWebhook `json:\"slackwebhook\"`\n\tHipchat      Hipchat      `json:\"hipchat\"`\n\tMattermost   Mattermost   `json:\"mattermost\"`\n\tFlock        Flock        `json:\"flock\"`\n\tWebhook      Webhook      `json:\"webhook\"`\n\tCloudEvent   CloudEvent   `json:\"cloudevent\"`\n\tMSTeams      MSTeams      `json:\"msteams\"`\n",
                    "rendered": {
                      "text": "\tSlackWebhook SlackWebhook `json:\"slackwebhook\"`\n\tHipchat      Hipchat      `json:\"hipchat\"`\n\tMattermost   Mattermost   `json:\"mattermost\"`\n\tFlock        Flock        `json:\"flock\"`\n\tWebhook      Webhook      `json:\"webhook\"`\n\tCloudEvent   CloudEvent   `json:\"cloudevent\"`\n\tMSTeams      MSTeams      `json:\"msteams\"`\n",
                      "markdown": "`\tSlackWebhook SlackWebhook `json:\"slackwebhook\"`\n\tHipchat      Hipchat      `json:\"hipchat\"`\n\tMattermost   Mattermost   `json:\"mattermost\"`\n\tFlock        Flock        `json:\"flock\"`\n\tWebhook      Webhook      `json:\"webhook\"`\n\tCloudEvent   CloudEvent   `json:\"cloudevent\"`\n\tMSTeams      MSTeams      `json:\"msteams\"`\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_images.tpl"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 17,
                  "endLine": 50,
                  "endColumn": 25,
                  "snippet": {
                    "text": "{{- end -}}\n\n{{/*\nReturn the proper Docker Image Registry Secret Names evaluating values as templates\n{{ include \"common.images.renderPullSecrets\" ( dict \"images\" (list .Values.path.to.the.image1, .Values.path.to.the.image2) \"context\" $) }}\n*/}}\n{{- define \"common.images.renderPullSecrets\" -}}\n",
                    "rendered": {
                      "text": "{{- end -}}\n\n{{/*\nReturn the proper Docker Image Registry Secret Names evaluating values as templates\n{{ include \"common.images.renderPullSecrets\" ( dict \"images\" (list .Values.path.to.the.image1, .Values.path.to.the.image2) \"context\" $) }}\n*/}}\n{{- define \"common.images.renderPullSecrets\" -}}\n",
                      "markdown": "`{{- end -}}\n\n{{/*\nReturn the proper Docker Image Registry Secret Names evaluating values as templates\n{{ include \"common.images.renderPullSecrets\" ( dict \"images\" (list .Values.path.to.the.image1, .Values.path.to.the.image2) \"context\" $) }}\n*/}}\n{{- define \"common.images.renderPullSecrets\" -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_images.tpl"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 17,
                  "endLine": 23,
                  "endColumn": 25,
                  "snippet": {
                    "text": "{{- end -}}\n\n{{/*\nReturn the proper Docker Image Registry Secret Names (deprecated: use common.images.renderPullSecrets instead)\n{{ include \"common.images.pullSecrets\" ( dict \"images\" (list .Values.path.to.the.image1, .Values.path.to.the.image2) \"global\" .Values.global) }}\n*/}}\n{{- define \"common.images.pullSecrets\" -}}\n",
                    "rendered": {
                      "text": "{{- end -}}\n\n{{/*\nReturn the proper Docker Image Registry Secret Names (deprecated: use common.images.renderPullSecrets instead)\n{{ include \"common.images.pullSecrets\" ( dict \"images\" (list .Values.path.to.the.image1, .Values.path.to.the.image2) \"global\" .Values.global) }}\n*/}}\n{{- define \"common.images.pullSecrets\" -}}\n",
                      "markdown": "`{{- end -}}\n\n{{/*\nReturn the proper Docker Image Registry Secret Names (deprecated: use common.images.renderPullSecrets instead)\n{{ include \"common.images.pullSecrets\" ( dict \"images\" (list .Values.path.to.the.image1, .Values.path.to.the.image2) \"global\" .Values.global) }}\n*/}}\n{{- define \"common.images.pullSecrets\" -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_ingress.tpl"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 45,
                  "endLine": 10,
                  "endColumn": 54,
                  "snippet": {
                    "text": "{{ include \"common.ingress.backend\" (dict \"serviceName\" \"backendName\" \"servicePort\" \"backendPort\" \"context\" $) }}\n\nParams:\n  - serviceName - String. Name of an existing service backend\n  - servicePort - String/Int. Port name (or number) of the service. It will be translated to different yaml depending if it is a string or an integer.\n  - context - Dict - Required. The context for the template evaluation.\n*/}}\n",
                    "rendered": {
                      "text": "{{ include \"common.ingress.backend\" (dict \"serviceName\" \"backendName\" \"servicePort\" \"backendPort\" \"context\" $) }}\n\nParams:\n  - serviceName - String. Name of an existing service backend\n  - servicePort - String/Int. Port name (or number) of the service. It will be translated to different yaml depending if it is a string or an integer.\n  - context - Dict - Required. The context for the template evaluation.\n*/}}\n",
                      "markdown": "`{{ include \"common.ingress.backend\" (dict \"serviceName\" \"backendName\" \"servicePort\" \"backendPort\" \"context\" $) }}\n\nParams:\n  - serviceName - String. Name of an existing service backend\n  - servicePort - String/Int. Port name (or number) of the service. It will be translated to different yaml depending if it is a string or an integer.\n  - context - Dict - Required. The context for the template evaluation.\n*/}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/slack/slack.go"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 55,
                  "endLine": 98,
                  "endColumn": 59,
                  "snippet": {
                    "text": "\t\treturn\n\t}\n\n\tlogrus.Printf(\"Message successfully sent to channel %s at %s\", channelID, timestamp)\n}\n\nfunc checkMissingSlackVars(s *Slack) error {\n",
                    "rendered": {
                      "text": "\t\treturn\n\t}\n\n\tlogrus.Printf(\"Message successfully sent to channel %s at %s\", channelID, timestamp)\n}\n\nfunc checkMissingSlackVars(s *Slack) error {\n",
                      "markdown": "`\t\treturn\n\t}\n\n\tlogrus.Printf(\"Message successfully sent to channel %s at %s\", channelID, timestamp)\n}\n\nfunc checkMissingSlackVars(s *Slack) error {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/lark/webhook.go"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 61,
                  "endLine": 80,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\t\tlogrus.Printf(\"%s\\n\", err)\n\t\treturn\n\t}\n\tlogrus.Printf(\"Message successfully sent to lark webhook: %s at %s \", m.Url, time.Now())\n}\n\nfunc checkMissingWebhookVars(s *Webhook) error {\n",
                    "rendered": {
                      "text": "\t\tlogrus.Printf(\"%s\\n\", err)\n\t\treturn\n\t}\n\tlogrus.Printf(\"Message successfully sent to lark webhook: %s at %s \", m.Url, time.Now())\n}\n\nfunc checkMissingWebhookVars(s *Webhook) error {\n",
                      "markdown": "`\t\tlogrus.Printf(\"%s\\n\", err)\n\t\treturn\n\t}\n\tlogrus.Printf(\"Message successfully sent to lark webhook: %s at %s \", m.Url, time.Now())\n}\n\nfunc checkMissingWebhookVars(s *Webhook) error {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                    "rendered": {
                      "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                      "markdown": "`# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 37,
                  "endLine": 37,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                    "rendered": {
                      "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                      "markdown": "`#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                    "rendered": {
                      "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                      "markdown": "`# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                    "rendered": {
                      "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                      "markdown": "`# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 39,
                  "endLine": 89,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                    "rendered": {
                      "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                      "markdown": "`\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                    "rendered": {
                      "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                      "markdown": "`\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/pre-merge-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 45,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                    "rendered": {
                      "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                      "markdown": "`\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 29,
                  "endLine": 151,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                    "rendered": {
                      "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                      "markdown": "` * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                    "rendered": {
                      "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                      "markdown": "`    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 104,
                  "snippet": {
                    "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                    "rendered": {
                      "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                      "markdown": "`\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                    "rendered": {
                      "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                      "markdown": "`\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                    "rendered": {
                      "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                      "markdown": "`To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                    "rendered": {
                      "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                      "markdown": "`\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                    "rendered": {
                      "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                      "markdown": "`\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 42,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                    "rendered": {
                      "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                      "markdown": "`   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                      "markdown": "`# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 9,
                  "snippet": {
                    "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                    "rendered": {
                      "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                      "markdown": "`esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 26,
                  "snippet": {
                    "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                    "rendered": {
                      "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                      "markdown": "`\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/config/sample.go"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 6,
                  "endLine": 55,
                  "endColumn": 14,
                  "snippet": {
                    "text": "      # Username for PLAN and LOGIN auth mechanisms.\n      username: \"\"\n      # Password for PLAIN and LOGIN auth mechanisms.\n      password: \"\"\n      # Identity for PLAIN auth mechanism\n      identity: \"\"\n      # Secret for CRAM-MD5 auth mechanism\n",
                    "rendered": {
                      "text": "      # Username for PLAN and LOGIN auth mechanisms.\n      username: \"\"\n      # Password for PLAIN and LOGIN auth mechanisms.\n      password: \"\"\n      # Identity for PLAIN auth mechanism\n      identity: \"\"\n      # Secret for CRAM-MD5 auth mechanism\n",
                      "markdown": "`      # Username for PLAN and LOGIN auth mechanisms.\n      username: \"\"\n      # Password for PLAIN and LOGIN auth mechanisms.\n      password: \"\"\n      # Identity for PLAIN auth mechanism\n      identity: \"\"\n      # Secret for CRAM-MD5 auth mechanism\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/config/sample.go"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 8,
                  "endLine": 54,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    auth:\n      # Username for PLAN and LOGIN auth mechanisms.\n      username: \"\"\n      # Password for PLAIN and LOGIN auth mechanisms.\n      password: \"\"\n      # Identity for PLAIN auth mechanism\n      identity: \"\"\n",
                    "rendered": {
                      "text": "    auth:\n      # Username for PLAN and LOGIN auth mechanisms.\n      username: \"\"\n      # Password for PLAIN and LOGIN auth mechanisms.\n      password: \"\"\n      # Identity for PLAIN auth mechanism\n      identity: \"\"\n",
                      "markdown": "`    auth:\n      # Username for PLAN and LOGIN auth mechanisms.\n      username: \"\"\n      # Password for PLAIN and LOGIN auth mechanisms.\n      password: \"\"\n      # Identity for PLAIN auth mechanism\n      identity: \"\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/config/sample.go"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 16,
                  "endLine": 24,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    url: \"\"\n    username: \"\"\n  flock:\n    # URL of the flock API.\n    url: \"\"\n  webhook:\n    # Webhook URL.\n",
                    "rendered": {
                      "text": "    url: \"\"\n    username: \"\"\n  flock:\n    # URL of the flock API.\n    url: \"\"\n  webhook:\n    # Webhook URL.\n",
                      "markdown": "`    url: \"\"\n    username: \"\"\n  flock:\n    # URL of the flock API.\n    url: \"\"\n  webhook:\n    # Webhook URL.\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/values.yaml"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 4,
                  "endLine": 183,
                  "endColumn": 12,
                  "snippet": {
                    "text": "  ##\n  auth:\n    username: \"\"\n    password: \"\"\n    secret: \"\"\n    identity: \"\"\n  ## @param smtp.requireTLS Force STARTTLS. Set to `true` or `false`\n",
                    "rendered": {
                      "text": "  ##\n  auth:\n    username: \"\"\n    password: \"\"\n    secret: \"\"\n    identity: \"\"\n  ## @param smtp.requireTLS Force STARTTLS. Set to `true` or `false`\n",
                      "markdown": "`  ##\n  auth:\n    username: \"\"\n    password: \"\"\n    secret: \"\"\n    identity: \"\"\n  ## @param smtp.requireTLS Force STARTTLS. Set to `true` or `false`\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/values.yaml"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 31,
                  "endLine": 177,
                  "endColumn": 39,
                  "snippet": {
                    "text": "  ##\n  subject: \"\"\n  ## @param smtp.auth.username Username for LOGIN and PLAIN auth mech\n  ## @param smtp.auth.password Password for LOGIN and PLAIN auth mech\n  ## @param smtp.auth.secret Secret for CRAM-MD5 auth mech\n  ## @param smtp.auth.identity Identity for PLAIN auth mech\n  ##\n",
                    "rendered": {
                      "text": "  ##\n  subject: \"\"\n  ## @param smtp.auth.username Username for LOGIN and PLAIN auth mech\n  ## @param smtp.auth.password Password for LOGIN and PLAIN auth mech\n  ## @param smtp.auth.secret Secret for CRAM-MD5 auth mech\n  ## @param smtp.auth.identity Identity for PLAIN auth mech\n  ##\n",
                      "markdown": "`  ##\n  subject: \"\"\n  ## @param smtp.auth.username Username for LOGIN and PLAIN auth mech\n  ## @param smtp.auth.password Password for LOGIN and PLAIN auth mech\n  ## @param smtp.auth.secret Secret for CRAM-MD5 auth mech\n  ## @param smtp.auth.identity Identity for PLAIN auth mech\n  ##\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/values.yaml"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 22,
                  "endLine": 177,
                  "endColumn": 30,
                  "snippet": {
                    "text": "  ##\n  subject: \"\"\n  ## @param smtp.auth.username Username for LOGIN and PLAIN auth mech\n  ## @param smtp.auth.password Password for LOGIN and PLAIN auth mech\n  ## @param smtp.auth.secret Secret for CRAM-MD5 auth mech\n  ## @param smtp.auth.identity Identity for PLAIN auth mech\n  ##\n",
                    "rendered": {
                      "text": "  ##\n  subject: \"\"\n  ## @param smtp.auth.username Username for LOGIN and PLAIN auth mech\n  ## @param smtp.auth.password Password for LOGIN and PLAIN auth mech\n  ## @param smtp.auth.secret Secret for CRAM-MD5 auth mech\n  ## @param smtp.auth.identity Identity for PLAIN auth mech\n  ##\n",
                      "markdown": "`  ##\n  subject: \"\"\n  ## @param smtp.auth.username Username for LOGIN and PLAIN auth mech\n  ## @param smtp.auth.password Password for LOGIN and PLAIN auth mech\n  ## @param smtp.auth.secret Secret for CRAM-MD5 auth mech\n  ## @param smtp.auth.identity Identity for PLAIN auth mech\n  ##\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/values.yaml"
                },
                "region": {
                  "startLine": 468,
                  "startColumn": 52,
                  "endLine": 468,
                  "endColumn": 61,
                  "snippet": {
                    "text": "## @param serviceAccount.create Specifies whether a ServiceAccount should be created\n## @param serviceAccount.name Name of the service account to use. If not set and create is true, a name is generated using the fullname template.\n## @param serviceAccount.automountServiceAccountToken Automount service account token for the server service account\n## @param serviceAccount.annotations Annotations for service account. Evaluated as a template. Only used if `create` is `true`.\n##\nserviceAccount:\n  create: true\n",
                    "rendered": {
                      "text": "## @param serviceAccount.create Specifies whether a ServiceAccount should be created\n## @param serviceAccount.name Name of the service account to use. If not set and create is true, a name is generated using the fullname template.\n## @param serviceAccount.automountServiceAccountToken Automount service account token for the server service account\n## @param serviceAccount.annotations Annotations for service account. Evaluated as a template. Only used if `create` is `true`.\n##\nserviceAccount:\n  create: true\n",
                      "markdown": "`## @param serviceAccount.create Specifies whether a ServiceAccount should be created\n## @param serviceAccount.name Name of the service account to use. If not set and create is true, a name is generated using the fullname template.\n## @param serviceAccount.automountServiceAccountToken Automount service account token for the server service account\n## @param serviceAccount.annotations Annotations for service account. Evaluated as a template. Only used if `create` is `true`.\n##\nserviceAccount:\n  create: true\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/values.yaml"
                },
                "region": {
                  "startLine": 467,
                  "startColumn": 100,
                  "endLine": 467,
                  "endColumn": 109,
                  "snippet": {
                    "text": "## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n## @param serviceAccount.create Specifies whether a ServiceAccount should be created\n## @param serviceAccount.name Name of the service account to use. If not set and create is true, a name is generated using the fullname template.\n## @param serviceAccount.automountServiceAccountToken Automount service account token for the server service account\n## @param serviceAccount.annotations Annotations for service account. Evaluated as a template. Only used if `create` is `true`.\n##\nserviceAccount:\n",
                    "rendered": {
                      "text": "## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n## @param serviceAccount.create Specifies whether a ServiceAccount should be created\n## @param serviceAccount.name Name of the service account to use. If not set and create is true, a name is generated using the fullname template.\n## @param serviceAccount.automountServiceAccountToken Automount service account token for the server service account\n## @param serviceAccount.annotations Annotations for service account. Evaluated as a template. Only used if `create` is `true`.\n##\nserviceAccount:\n",
                      "markdown": "`## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n## @param serviceAccount.create Specifies whether a ServiceAccount should be created\n## @param serviceAccount.name Name of the service account to use. If not set and create is true, a name is generated using the fullname template.\n## @param serviceAccount.automountServiceAccountToken Automount service account token for the server service account\n## @param serviceAccount.annotations Annotations for service account. Evaluated as a template. Only used if `create` is `true`.\n##\nserviceAccount:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/values.yaml"
                },
                "region": {
                  "startLine": 467,
                  "startColumn": 63,
                  "endLine": 467,
                  "endColumn": 72,
                  "snippet": {
                    "text": "## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n## @param serviceAccount.create Specifies whether a ServiceAccount should be created\n## @param serviceAccount.name Name of the service account to use. If not set and create is true, a name is generated using the fullname template.\n## @param serviceAccount.automountServiceAccountToken Automount service account token for the server service account\n## @param serviceAccount.annotations Annotations for service account. Evaluated as a template. Only used if `create` is `true`.\n##\nserviceAccount:\n",
                    "rendered": {
                      "text": "## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n## @param serviceAccount.create Specifies whether a ServiceAccount should be created\n## @param serviceAccount.name Name of the service account to use. If not set and create is true, a name is generated using the fullname template.\n## @param serviceAccount.automountServiceAccountToken Automount service account token for the server service account\n## @param serviceAccount.annotations Annotations for service account. Evaluated as a template. Only used if `create` is `true`.\n##\nserviceAccount:\n",
                      "markdown": "`## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n## @param serviceAccount.create Specifies whether a ServiceAccount should be created\n## @param serviceAccount.name Name of the service account to use. If not set and create is true, a name is generated using the fullname template.\n## @param serviceAccount.automountServiceAccountToken Automount service account token for the server service account\n## @param serviceAccount.annotations Annotations for service account. Evaluated as a template. Only used if `create` is `true`.\n##\nserviceAccount:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/values.yaml"
                },
                "region": {
                  "startLine": 466,
                  "startColumn": 41,
                  "endLine": 466,
                  "endColumn": 50,
                  "snippet": {
                    "text": "## Pods Service Account\n## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n## @param serviceAccount.create Specifies whether a ServiceAccount should be created\n## @param serviceAccount.name Name of the service account to use. If not set and create is true, a name is generated using the fullname template.\n## @param serviceAccount.automountServiceAccountToken Automount service account token for the server service account\n## @param serviceAccount.annotations Annotations for service account. Evaluated as a template. Only used if `create` is `true`.\n##\n",
                    "rendered": {
                      "text": "## Pods Service Account\n## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n## @param serviceAccount.create Specifies whether a ServiceAccount should be created\n## @param serviceAccount.name Name of the service account to use. If not set and create is true, a name is generated using the fullname template.\n## @param serviceAccount.automountServiceAccountToken Automount service account token for the server service account\n## @param serviceAccount.annotations Annotations for service account. Evaluated as a template. Only used if `create` is `true`.\n##\n",
                      "markdown": "`## Pods Service Account\n## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n## @param serviceAccount.create Specifies whether a ServiceAccount should be created\n## @param serviceAccount.name Name of the service account to use. If not set and create is true, a name is generated using the fullname template.\n## @param serviceAccount.automountServiceAccountToken Automount service account token for the server service account\n## @param serviceAccount.annotations Annotations for service account. Evaluated as a template. Only used if `create` is `true`.\n##\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/values.yaml"
                },
                "region": {
                  "startLine": 463,
                  "startColumn": 7,
                  "endLine": 463,
                  "endColumn": 16,
                  "snippet": {
                    "text": "##     verbs: [\"get\", \"list\", \"watch\"]\n## \n  customRoles: []\n## Pods Service Account\n## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n## @param serviceAccount.create Specifies whether a ServiceAccount should be created\n## @param serviceAccount.name Name of the service account to use. If not set and create is true, a name is generated using the fullname template.\n",
                    "rendered": {
                      "text": "##     verbs: [\"get\", \"list\", \"watch\"]\n## \n  customRoles: []\n## Pods Service Account\n## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n## @param serviceAccount.create Specifies whether a ServiceAccount should be created\n## @param serviceAccount.name Name of the service account to use. If not set and create is true, a name is generated using the fullname template.\n",
                      "markdown": "`##     verbs: [\"get\", \"list\", \"watch\"]\n## \n  customRoles: []\n## Pods Service Account\n## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n## @param serviceAccount.create Specifies whether a ServiceAccount should be created\n## @param serviceAccount.name Name of the service account to use. If not set and create is true, a name is generated using the fullname template.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/values.yaml"
                },
                "region": {
                  "startLine": 381,
                  "startColumn": 22,
                  "endLine": 381,
                  "endColumn": 28,
                  "snippet": {
                    "text": "## Note: podAffinityPreset, podAntiAffinityPreset, and nodeAffinityPreset will be ignored when it's set\n##\naffinity: {}\n## @param nodeSelector Node labels for pod assignment\n## ref: https://kubernetes.io/docs/user-guide/node-selection/\n##\nnodeSelector: {}\n",
                    "rendered": {
                      "text": "## Note: podAffinityPreset, podAntiAffinityPreset, and nodeAffinityPreset will be ignored when it's set\n##\naffinity: {}\n## @param nodeSelector Node labels for pod assignment\n## ref: https://kubernetes.io/docs/user-guide/node-selection/\n##\nnodeSelector: {}\n",
                      "markdown": "`## Note: podAffinityPreset, podAntiAffinityPreset, and nodeAffinityPreset will be ignored when it's set\n##\naffinity: {}\n## @param nodeSelector Node labels for pod assignment\n## ref: https://kubernetes.io/docs/user-guide/node-selection/\n##\nnodeSelector: {}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/values.yaml"
                },
                "region": {
                  "startLine": 369,
                  "startColumn": 37,
                  "endLine": 369,
                  "endColumn": 43,
                  "snippet": {
                    "text": "  ## key: \"kubernetes.io/e2e-az-name\"\n  ##\n  key: \"\"\n  ## @param nodeAffinityPreset.values Node label values to match. Ignored if `affinity` is set.\n  ## E.g.\n  ## values:\n  ##   - e2e-az1\n",
                    "rendered": {
                      "text": "  ## key: \"kubernetes.io/e2e-az-name\"\n  ##\n  key: \"\"\n  ## @param nodeAffinityPreset.values Node label values to match. Ignored if `affinity` is set.\n  ## E.g.\n  ## values:\n  ##   - e2e-az1\n",
                      "markdown": "`  ## key: \"kubernetes.io/e2e-az-name\"\n  ##\n  key: \"\"\n  ## @param nodeAffinityPreset.values Node label values to match. Ignored if `affinity` is set.\n  ## E.g.\n  ## values:\n  ##   - e2e-az1\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/values.yaml"
                },
                "region": {
                  "startLine": 364,
                  "startColumn": 34,
                  "endLine": 364,
                  "endColumn": 40,
                  "snippet": {
                    "text": "  ## @param nodeAffinityPreset.type Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`\n  ##\n  type: \"\"\n  ## @param nodeAffinityPreset.key Node label key to match. Ignored if `affinity` is set.\n  ## E.g.\n  ## key: \"kubernetes.io/e2e-az-name\"\n  ##\n",
                    "rendered": {
                      "text": "  ## @param nodeAffinityPreset.type Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`\n  ##\n  type: \"\"\n  ## @param nodeAffinityPreset.key Node label key to match. Ignored if `affinity` is set.\n  ## E.g.\n  ## key: \"kubernetes.io/e2e-az-name\"\n  ##\n",
                      "markdown": "`  ## @param nodeAffinityPreset.type Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`\n  ##\n  type: \"\"\n  ## @param nodeAffinityPreset.key Node label key to match. Ignored if `affinity` is set.\n  ## E.g.\n  ## key: \"kubernetes.io/e2e-az-name\"\n  ##\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/values.yaml"
                },
                "region": {
                  "startLine": 361,
                  "startColumn": 35,
                  "endLine": 361,
                  "endColumn": 41,
                  "snippet": {
                    "text": "## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity\n##\nnodeAffinityPreset:\n  ## @param nodeAffinityPreset.type Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`\n  ##\n  type: \"\"\n  ## @param nodeAffinityPreset.key Node label key to match. Ignored if `affinity` is set.\n",
                    "rendered": {
                      "text": "## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity\n##\nnodeAffinityPreset:\n  ## @param nodeAffinityPreset.type Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`\n  ##\n  type: \"\"\n  ## @param nodeAffinityPreset.key Node label key to match. Ignored if `affinity` is set.\n",
                      "markdown": "`## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity\n##\nnodeAffinityPreset:\n  ## @param nodeAffinityPreset.type Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`\n  ##\n  type: \"\"\n  ## @param nodeAffinityPreset.key Node label key to match. Ignored if `affinity` is set.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/values.yaml"
                },
                "region": {
                  "startLine": 357,
                  "startColumn": 2,
                  "endLine": 357,
                  "endColumn": 8,
                  "snippet": {
                    "text": "## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity\n##\npodAntiAffinityPreset: soft\n## Node affinity preset\n## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity\n##\nnodeAffinityPreset:\n",
                    "rendered": {
                      "text": "## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity\n##\npodAntiAffinityPreset: soft\n## Node affinity preset\n## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity\n##\nnodeAffinityPreset:\n",
                      "markdown": "`## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity\n##\npodAntiAffinityPreset: soft\n## Node affinity preset\n## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity\n##\nnodeAffinityPreset:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/values.yaml"
                },
                "region": {
                  "startLine": 329,
                  "startColumn": 39,
                  "endLine": 329,
                  "endColumn": 48,
                  "snippet": {
                    "text": "## @param readinessProbe.enabled Enable readinessProbe\n## @param readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe\n## @param readinessProbe.periodSeconds Period seconds for readinessProbe\n## @param readinessProbe.timeoutSeconds Timeout seconds for readinessProbe\n## @param readinessProbe.failureThreshold Failure threshold for readinessProbe\n## @param readinessProbe.successThreshold Success threshold for readinessProbe\n##\n",
                    "rendered": {
                      "text": "## @param readinessProbe.enabled Enable readinessProbe\n## @param readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe\n## @param readinessProbe.periodSeconds Period seconds for readinessProbe\n## @param readinessProbe.timeoutSeconds Timeout seconds for readinessProbe\n## @param readinessProbe.failureThreshold Failure threshold for readinessProbe\n## @param readinessProbe.successThreshold Success threshold for readinessProbe\n##\n",
                      "markdown": "`## @param readinessProbe.enabled Enable readinessProbe\n## @param readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe\n## @param readinessProbe.periodSeconds Period seconds for readinessProbe\n## @param readinessProbe.timeoutSeconds Timeout seconds for readinessProbe\n## @param readinessProbe.failureThreshold Failure threshold for readinessProbe\n## @param readinessProbe.successThreshold Success threshold for readinessProbe\n##\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/values.yaml"
                },
                "region": {
                  "startLine": 313,
                  "startColumn": 38,
                  "endLine": 313,
                  "endColumn": 47,
                  "snippet": {
                    "text": "## @param livenessProbe.enabled Enable livenessProbe\n## @param livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe\n## @param livenessProbe.periodSeconds Period seconds for livenessProbe\n## @param livenessProbe.timeoutSeconds Timeout seconds for livenessProbe\n## @param livenessProbe.failureThreshold Failure threshold for livenessProbe\n## @param livenessProbe.successThreshold Success threshold for livenessProbe\n##\n",
                    "rendered": {
                      "text": "## @param livenessProbe.enabled Enable livenessProbe\n## @param livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe\n## @param livenessProbe.periodSeconds Period seconds for livenessProbe\n## @param livenessProbe.timeoutSeconds Timeout seconds for livenessProbe\n## @param livenessProbe.failureThreshold Failure threshold for livenessProbe\n## @param livenessProbe.successThreshold Success threshold for livenessProbe\n##\n",
                      "markdown": "`## @param livenessProbe.enabled Enable livenessProbe\n## @param livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe\n## @param livenessProbe.periodSeconds Period seconds for livenessProbe\n## @param livenessProbe.timeoutSeconds Timeout seconds for livenessProbe\n## @param livenessProbe.failureThreshold Failure threshold for livenessProbe\n## @param livenessProbe.successThreshold Success threshold for livenessProbe\n##\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/values.yaml"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 37,
                  "endLine": 297,
                  "endColumn": 46,
                  "snippet": {
                    "text": "## @param startupProbe.enabled Enable startupProbe\n## @param startupProbe.initialDelaySeconds Initial delay seconds for startupProbe\n## @param startupProbe.periodSeconds Period seconds for startupProbe\n## @param startupProbe.timeoutSeconds Timeout seconds for startupProbe\n## @param startupProbe.failureThreshold Failure threshold for startupProbe\n## @param startupProbe.successThreshold Success threshold for startupProbe\n##\n",
                    "rendered": {
                      "text": "## @param startupProbe.enabled Enable startupProbe\n## @param startupProbe.initialDelaySeconds Initial delay seconds for startupProbe\n## @param startupProbe.periodSeconds Period seconds for startupProbe\n## @param startupProbe.timeoutSeconds Timeout seconds for startupProbe\n## @param startupProbe.failureThreshold Failure threshold for startupProbe\n## @param startupProbe.successThreshold Success threshold for startupProbe\n##\n",
                      "markdown": "`## @param startupProbe.enabled Enable startupProbe\n## @param startupProbe.initialDelaySeconds Initial delay seconds for startupProbe\n## @param startupProbe.periodSeconds Period seconds for startupProbe\n## @param startupProbe.timeoutSeconds Timeout seconds for startupProbe\n## @param startupProbe.failureThreshold Failure threshold for startupProbe\n## @param startupProbe.successThreshold Success threshold for startupProbe\n##\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/values.yaml"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 69,
                  "endLine": 245,
                  "endColumn": 74,
                  "snippet": {
                    "text": "## @param extraEnvVarsCM Name of existing ConfigMap containing extra env vars\n##\nextraEnvVarsCM: \"\"\n## @param extraEnvVarsSecret Name of existing Secret containing extra env vars\n##\nextraEnvVarsSecret: \"\"\n\n",
                    "rendered": {
                      "text": "## @param extraEnvVarsCM Name of existing ConfigMap containing extra env vars\n##\nextraEnvVarsCM: \"\"\n## @param extraEnvVarsSecret Name of existing Secret containing extra env vars\n##\nextraEnvVarsSecret: \"\"\n\n",
                      "markdown": "`## @param extraEnvVarsCM Name of existing ConfigMap containing extra env vars\n##\nextraEnvVarsCM: \"\"\n## @param extraEnvVarsSecret Name of existing Secret containing extra env vars\n##\nextraEnvVarsSecret: \"\"\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/values.yaml"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 68,
                  "endLine": 242,
                  "endColumn": 73,
                  "snippet": {
                    "text": "##     value: \"bar\"\n##\nextraEnvVars: []\n## @param extraEnvVarsCM Name of existing ConfigMap containing extra env vars\n##\nextraEnvVarsCM: \"\"\n## @param extraEnvVarsSecret Name of existing Secret containing extra env vars\n",
                    "rendered": {
                      "text": "##     value: \"bar\"\n##\nextraEnvVars: []\n## @param extraEnvVarsCM Name of existing ConfigMap containing extra env vars\n##\nextraEnvVarsCM: \"\"\n## @param extraEnvVarsSecret Name of existing Secret containing extra env vars\n",
                      "markdown": "`##     value: \"bar\"\n##\nextraEnvVars: []\n## @param extraEnvVarsCM Name of existing ConfigMap containing extra env vars\n##\nextraEnvVarsCM: \"\"\n## @param extraEnvVarsSecret Name of existing Secret containing extra env vars\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/values.yaml"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 52,
                  "endLine": 218,
                  "endColumn": 59,
                  "snippet": {
                    "text": "  persistentvolume: false\n  event: true\n\n## @param customresources Define custom resources to watch for changes\n## Example:\n## customresources:\n##   - group: monitoring.coreos.com\n",
                    "rendered": {
                      "text": "  persistentvolume: false\n  event: true\n\n## @param customresources Define custom resources to watch for changes\n## Example:\n## customresources:\n##   - group: monitoring.coreos.com\n",
                      "markdown": "`  persistentvolume: false\n  event: true\n\n## @param customresources Define custom resources to watch for changes\n## Example:\n## customresources:\n##   - group: monitoring.coreos.com\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/values.yaml"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 32,
                  "endLine": 205,
                  "endColumn": 39,
                  "snippet": {
                    "text": "## @param resourcesToWatch.pod Watch changes to Pods\n## @param resourcesToWatch.job Watch changes to Jobs\n## @param resourcesToWatch.persistentvolume Watch changes to PersistentVolumes\n## @param resourcesToWatch.event Watch changes to Events\n##\nresourcesToWatch:\n  deployment: true\n",
                    "rendered": {
                      "text": "## @param resourcesToWatch.pod Watch changes to Pods\n## @param resourcesToWatch.job Watch changes to Jobs\n## @param resourcesToWatch.persistentvolume Watch changes to PersistentVolumes\n## @param resourcesToWatch.event Watch changes to Events\n##\nresourcesToWatch:\n  deployment: true\n",
                      "markdown": "`## @param resourcesToWatch.pod Watch changes to Pods\n## @param resourcesToWatch.job Watch changes to Jobs\n## @param resourcesToWatch.persistentvolume Watch changes to PersistentVolumes\n## @param resourcesToWatch.event Watch changes to Events\n##\nresourcesToWatch:\n  deployment: true\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/values.yaml"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 43,
                  "endLine": 204,
                  "endColumn": 50,
                  "snippet": {
                    "text": "## @param resourcesToWatch.services Watch changes to Services\n## @param resourcesToWatch.pod Watch changes to Pods\n## @param resourcesToWatch.job Watch changes to Jobs\n## @param resourcesToWatch.persistentvolume Watch changes to PersistentVolumes\n## @param resourcesToWatch.event Watch changes to Events\n##\nresourcesToWatch:\n",
                    "rendered": {
                      "text": "## @param resourcesToWatch.services Watch changes to Services\n## @param resourcesToWatch.pod Watch changes to Pods\n## @param resourcesToWatch.job Watch changes to Jobs\n## @param resourcesToWatch.persistentvolume Watch changes to PersistentVolumes\n## @param resourcesToWatch.event Watch changes to Events\n##\nresourcesToWatch:\n",
                      "markdown": "`## @param resourcesToWatch.services Watch changes to Services\n## @param resourcesToWatch.pod Watch changes to Pods\n## @param resourcesToWatch.job Watch changes to Jobs\n## @param resourcesToWatch.persistentvolume Watch changes to PersistentVolumes\n## @param resourcesToWatch.event Watch changes to Events\n##\nresourcesToWatch:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/values.yaml"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 30,
                  "endLine": 203,
                  "endColumn": 37,
                  "snippet": {
                    "text": "## @param resourcesToWatch.daemonset Watch changes to DaemonSets\n## @param resourcesToWatch.services Watch changes to Services\n## @param resourcesToWatch.pod Watch changes to Pods\n## @param resourcesToWatch.job Watch changes to Jobs\n## @param resourcesToWatch.persistentvolume Watch changes to PersistentVolumes\n## @param resourcesToWatch.event Watch changes to Events\n##\n",
                    "rendered": {
                      "text": "## @param resourcesToWatch.daemonset Watch changes to DaemonSets\n## @param resourcesToWatch.services Watch changes to Services\n## @param resourcesToWatch.pod Watch changes to Pods\n## @param resourcesToWatch.job Watch changes to Jobs\n## @param resourcesToWatch.persistentvolume Watch changes to PersistentVolumes\n## @param resourcesToWatch.event Watch changes to Events\n##\n",
                      "markdown": "`## @param resourcesToWatch.daemonset Watch changes to DaemonSets\n## @param resourcesToWatch.services Watch changes to Services\n## @param resourcesToWatch.pod Watch changes to Pods\n## @param resourcesToWatch.job Watch changes to Jobs\n## @param resourcesToWatch.persistentvolume Watch changes to PersistentVolumes\n## @param resourcesToWatch.event Watch changes to Events\n##\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/values.yaml"
                },
                "region": {
                  "startLine": 202,
                  "startColumn": 30,
                  "endLine": 202,
                  "endColumn": 37,
                  "snippet": {
                    "text": "## @param resourcesToWatch.replicaset Watch changes to ReplicaSets\n## @param resourcesToWatch.daemonset Watch changes to DaemonSets\n## @param resourcesToWatch.services Watch changes to Services\n## @param resourcesToWatch.pod Watch changes to Pods\n## @param resourcesToWatch.job Watch changes to Jobs\n## @param resourcesToWatch.persistentvolume Watch changes to PersistentVolumes\n## @param resourcesToWatch.event Watch changes to Events\n",
                    "rendered": {
                      "text": "## @param resourcesToWatch.replicaset Watch changes to ReplicaSets\n## @param resourcesToWatch.daemonset Watch changes to DaemonSets\n## @param resourcesToWatch.services Watch changes to Services\n## @param resourcesToWatch.pod Watch changes to Pods\n## @param resourcesToWatch.job Watch changes to Jobs\n## @param resourcesToWatch.persistentvolume Watch changes to PersistentVolumes\n## @param resourcesToWatch.event Watch changes to Events\n",
                      "markdown": "`## @param resourcesToWatch.replicaset Watch changes to ReplicaSets\n## @param resourcesToWatch.daemonset Watch changes to DaemonSets\n## @param resourcesToWatch.services Watch changes to Services\n## @param resourcesToWatch.pod Watch changes to Pods\n## @param resourcesToWatch.job Watch changes to Jobs\n## @param resourcesToWatch.persistentvolume Watch changes to PersistentVolumes\n## @param resourcesToWatch.event Watch changes to Events\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/values.yaml"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 35,
                  "endLine": 201,
                  "endColumn": 42,
                  "snippet": {
                    "text": "## @param resourcesToWatch.replicationcontroller Watch changes to ReplicationControllers\n## @param resourcesToWatch.replicaset Watch changes to ReplicaSets\n## @param resourcesToWatch.daemonset Watch changes to DaemonSets\n## @param resourcesToWatch.services Watch changes to Services\n## @param resourcesToWatch.pod Watch changes to Pods\n## @param resourcesToWatch.job Watch changes to Jobs\n## @param resourcesToWatch.persistentvolume Watch changes to PersistentVolumes\n",
                    "rendered": {
                      "text": "## @param resourcesToWatch.replicationcontroller Watch changes to ReplicationControllers\n## @param resourcesToWatch.replicaset Watch changes to ReplicaSets\n## @param resourcesToWatch.daemonset Watch changes to DaemonSets\n## @param resourcesToWatch.services Watch changes to Services\n## @param resourcesToWatch.pod Watch changes to Pods\n## @param resourcesToWatch.job Watch changes to Jobs\n## @param resourcesToWatch.persistentvolume Watch changes to PersistentVolumes\n",
                      "markdown": "`## @param resourcesToWatch.replicationcontroller Watch changes to ReplicationControllers\n## @param resourcesToWatch.replicaset Watch changes to ReplicaSets\n## @param resourcesToWatch.daemonset Watch changes to DaemonSets\n## @param resourcesToWatch.services Watch changes to Services\n## @param resourcesToWatch.pod Watch changes to Pods\n## @param resourcesToWatch.job Watch changes to Jobs\n## @param resourcesToWatch.persistentvolume Watch changes to PersistentVolumes\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/values.yaml"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 36,
                  "endLine": 200,
                  "endColumn": 43,
                  "snippet": {
                    "text": "## @param resourcesToWatch.deployment Watch changes to Deployments\n## @param resourcesToWatch.replicationcontroller Watch changes to ReplicationControllers\n## @param resourcesToWatch.replicaset Watch changes to ReplicaSets\n## @param resourcesToWatch.daemonset Watch changes to DaemonSets\n## @param resourcesToWatch.services Watch changes to Services\n## @param resourcesToWatch.pod Watch changes to Pods\n## @param resourcesToWatch.job Watch changes to Jobs\n",
                    "rendered": {
                      "text": "## @param resourcesToWatch.deployment Watch changes to Deployments\n## @param resourcesToWatch.replicationcontroller Watch changes to ReplicationControllers\n## @param resourcesToWatch.replicaset Watch changes to ReplicaSets\n## @param resourcesToWatch.daemonset Watch changes to DaemonSets\n## @param resourcesToWatch.services Watch changes to Services\n## @param resourcesToWatch.pod Watch changes to Pods\n## @param resourcesToWatch.job Watch changes to Jobs\n",
                      "markdown": "`## @param resourcesToWatch.deployment Watch changes to Deployments\n## @param resourcesToWatch.replicationcontroller Watch changes to ReplicationControllers\n## @param resourcesToWatch.replicaset Watch changes to ReplicaSets\n## @param resourcesToWatch.daemonset Watch changes to DaemonSets\n## @param resourcesToWatch.services Watch changes to Services\n## @param resourcesToWatch.pod Watch changes to Pods\n## @param resourcesToWatch.job Watch changes to Jobs\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/values.yaml"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 37,
                  "endLine": 199,
                  "endColumn": 44,
                  "snippet": {
                    "text": "## Resources to watch\n## @param resourcesToWatch.deployment Watch changes to Deployments\n## @param resourcesToWatch.replicationcontroller Watch changes to ReplicationControllers\n## @param resourcesToWatch.replicaset Watch changes to ReplicaSets\n## @param resourcesToWatch.daemonset Watch changes to DaemonSets\n## @param resourcesToWatch.services Watch changes to Services\n## @param resourcesToWatch.pod Watch changes to Pods\n",
                    "rendered": {
                      "text": "## Resources to watch\n## @param resourcesToWatch.deployment Watch changes to Deployments\n## @param resourcesToWatch.replicationcontroller Watch changes to ReplicationControllers\n## @param resourcesToWatch.replicaset Watch changes to ReplicaSets\n## @param resourcesToWatch.daemonset Watch changes to DaemonSets\n## @param resourcesToWatch.services Watch changes to Services\n## @param resourcesToWatch.pod Watch changes to Pods\n",
                      "markdown": "`## Resources to watch\n## @param resourcesToWatch.deployment Watch changes to Deployments\n## @param resourcesToWatch.replicationcontroller Watch changes to ReplicationControllers\n## @param resourcesToWatch.replicaset Watch changes to ReplicaSets\n## @param resourcesToWatch.daemonset Watch changes to DaemonSets\n## @param resourcesToWatch.services Watch changes to Services\n## @param resourcesToWatch.pod Watch changes to Pods\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/values.yaml"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 48,
                  "endLine": 198,
                  "endColumn": 55,
                  "snippet": {
                    "text": "namespaceToWatch: \"\"\n## Resources to watch\n## @param resourcesToWatch.deployment Watch changes to Deployments\n## @param resourcesToWatch.replicationcontroller Watch changes to ReplicationControllers\n## @param resourcesToWatch.replicaset Watch changes to ReplicaSets\n## @param resourcesToWatch.daemonset Watch changes to DaemonSets\n## @param resourcesToWatch.services Watch changes to Services\n",
                    "rendered": {
                      "text": "namespaceToWatch: \"\"\n## Resources to watch\n## @param resourcesToWatch.deployment Watch changes to Deployments\n## @param resourcesToWatch.replicationcontroller Watch changes to ReplicationControllers\n## @param resourcesToWatch.replicaset Watch changes to ReplicaSets\n## @param resourcesToWatch.daemonset Watch changes to DaemonSets\n## @param resourcesToWatch.services Watch changes to Services\n",
                      "markdown": "`namespaceToWatch: \"\"\n## Resources to watch\n## @param resourcesToWatch.deployment Watch changes to Deployments\n## @param resourcesToWatch.replicationcontroller Watch changes to ReplicationControllers\n## @param resourcesToWatch.replicaset Watch changes to ReplicaSets\n## @param resourcesToWatch.daemonset Watch changes to DaemonSets\n## @param resourcesToWatch.services Watch changes to Services\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/values.yaml"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 37,
                  "endLine": 197,
                  "endColumn": 44,
                  "snippet": {
                    "text": "##\nnamespaceToWatch: \"\"\n## Resources to watch\n## @param resourcesToWatch.deployment Watch changes to Deployments\n## @param resourcesToWatch.replicationcontroller Watch changes to ReplicationControllers\n## @param resourcesToWatch.replicaset Watch changes to ReplicaSets\n## @param resourcesToWatch.daemonset Watch changes to DaemonSets\n",
                    "rendered": {
                      "text": "##\nnamespaceToWatch: \"\"\n## Resources to watch\n## @param resourcesToWatch.deployment Watch changes to Deployments\n## @param resourcesToWatch.replicationcontroller Watch changes to ReplicationControllers\n## @param resourcesToWatch.replicaset Watch changes to ReplicaSets\n## @param resourcesToWatch.daemonset Watch changes to DaemonSets\n",
                      "markdown": "`##\nnamespaceToWatch: \"\"\n## Resources to watch\n## @param resourcesToWatch.deployment Watch changes to Deployments\n## @param resourcesToWatch.replicationcontroller Watch changes to ReplicationControllers\n## @param resourcesToWatch.replicaset Watch changes to ReplicaSets\n## @param resourcesToWatch.daemonset Watch changes to DaemonSets\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/values.yaml"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 15,
                  "endLine": 197,
                  "snippet": {
                    "text": "## @param namespaceToWatch Namespace to watch, leave it empty for watching all\n##\nnamespaceToWatch: \"\"\n## Resources to watch\n## @param resourcesToWatch.deployment Watch changes to Deployments\n## @param resourcesToWatch.replicationcontroller Watch changes to ReplicationControllers\n## @param resourcesToWatch.replicaset Watch changes to ReplicaSets\n## @param resourcesToWatch.daemonset Watch changes to DaemonSets\n",
                    "rendered": {
                      "text": "## @param namespaceToWatch Namespace to watch, leave it empty for watching all\n##\nnamespaceToWatch: \"\"\n## Resources to watch\n## @param resourcesToWatch.deployment Watch changes to Deployments\n## @param resourcesToWatch.replicationcontroller Watch changes to ReplicationControllers\n## @param resourcesToWatch.replicaset Watch changes to ReplicaSets\n## @param resourcesToWatch.daemonset Watch changes to DaemonSets\n",
                      "markdown": "`## @param namespaceToWatch Namespace to watch, leave it empty for watching all\n##\nnamespaceToWatch: \"\"\n## Resources to watch\n## @param resourcesToWatch.deployment Watch changes to Deployments\n## @param resourcesToWatch.replicationcontroller Watch changes to ReplicationControllers\n## @param resourcesToWatch.replicaset Watch changes to ReplicaSets\n## @param resourcesToWatch.daemonset Watch changes to DaemonSets\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/values.yaml"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 19,
                  "endLine": 126,
                  "endColumn": 26,
                  "snippet": {
                    "text": "  url: \"\"\n  username: \"\"\n## @param flock.enabled Enable Flock notifications\n## @param flock.url Flock URL\n##\nflock:\n  enabled: false\n",
                    "rendered": {
                      "text": "  url: \"\"\n  username: \"\"\n## @param flock.enabled Enable Flock notifications\n## @param flock.url Flock URL\n##\nflock:\n  enabled: false\n",
                      "markdown": "`  url: \"\"\n  username: \"\"\n## @param flock.enabled Enable Flock notifications\n## @param flock.url Flock URL\n##\nflock:\n  enabled: false\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/values.yaml"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 30,
                  "endLine": 125,
                  "endColumn": 37,
                  "snippet": {
                    "text": "  channel: \"\"\n  url: \"\"\n  username: \"\"\n## @param flock.enabled Enable Flock notifications\n## @param flock.url Flock URL\n##\nflock:\n",
                    "rendered": {
                      "text": "  channel: \"\"\n  url: \"\"\n  username: \"\"\n## @param flock.enabled Enable Flock notifications\n## @param flock.url Flock URL\n##\nflock:\n",
                      "markdown": "`  channel: \"\"\n  url: \"\"\n  username: \"\"\n## @param flock.enabled Enable Flock notifications\n## @param flock.url Flock URL\n##\nflock:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/values.yaml"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 40,
                  "endLine": 7,
                  "endColumn": 48,
                  "snippet": {
                    "text": "## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass\n\n## @param global.imageRegistry Global Docker image registry\n## @param global.imagePullSecrets Global Docker registry secret names as an array\n##\nglobal:\n  imageRegistry: \"\"\n",
                    "rendered": {
                      "text": "## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass\n\n## @param global.imageRegistry Global Docker image registry\n## @param global.imagePullSecrets Global Docker registry secret names as an array\n##\nglobal:\n  imageRegistry: \"\"\n",
                      "markdown": "`## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass\n\n## @param global.imageRegistry Global Docker image registry\n## @param global.imagePullSecrets Global Docker registry secret names as an array\n##\nglobal:\n  imageRegistry: \"\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/values.yaml"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 37,
                  "endLine": 6,
                  "endColumn": 45,
                  "snippet": {
                    "text": "## Please, note that this will override the image parameters, including dependencies, configured to use the global value\n## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass\n\n## @param global.imageRegistry Global Docker image registry\n## @param global.imagePullSecrets Global Docker registry secret names as an array\n##\nglobal:\n",
                    "rendered": {
                      "text": "## Please, note that this will override the image parameters, including dependencies, configured to use the global value\n## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass\n\n## @param global.imageRegistry Global Docker image registry\n## @param global.imagePullSecrets Global Docker registry secret names as an array\n##\nglobal:\n",
                      "markdown": "`## Please, note that this will override the image parameters, including dependencies, configured to use the global value\n## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass\n\n## @param global.imageRegistry Global Docker image registry\n## @param global.imagePullSecrets Global Docker registry secret names as an array\n##\nglobal:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/values.yaml"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 27,
                  "endLine": 4,
                  "endColumn": 35,
                  "snippet": {
                    "text": "## @section Global parameters\n## Global Docker image parameters\n## Please, note that this will override the image parameters, including dependencies, configured to use the global value\n## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass\n\n## @param global.imageRegistry Global Docker image registry\n## @param global.imagePullSecrets Global Docker registry secret names as an array\n",
                    "rendered": {
                      "text": "## @section Global parameters\n## Global Docker image parameters\n## Please, note that this will override the image parameters, including dependencies, configured to use the global value\n## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass\n\n## @param global.imageRegistry Global Docker image registry\n## @param global.imagePullSecrets Global Docker registry secret names as an array\n",
                      "markdown": "`## @section Global parameters\n## Global Docker image parameters\n## Please, note that this will override the image parameters, including dependencies, configured to use the global value\n## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass\n\n## @param global.imageRegistry Global Docker image registry\n## @param global.imagePullSecrets Global Docker registry secret names as an array\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/values.yaml"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 9,
                  "endLine": 2,
                  "endColumn": 17,
                  "snippet": {
                    "text": "## @section Global parameters\n## Global Docker image parameters\n## Please, note that this will override the image parameters, including dependencies, configured to use the global value\n## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass\n\n",
                    "rendered": {
                      "text": "## @section Global parameters\n## Global Docker image parameters\n## Please, note that this will override the image parameters, including dependencies, configured to use the global value\n## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass\n\n",
                      "markdown": "`## @section Global parameters\n## Global Docker image parameters\n## Please, note that this will override the image parameters, including dependencies, configured to use the global value\n## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/smtp/client.go"
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 19,
                  "endLine": 289,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\t\tcase \"username:\":\n\t\t\treturn []byte(a.username), nil\n\t\tcase \"password:\":\n\t\t\treturn []byte(a.password), nil\n\t\tdefault:\n\t\t\treturn nil, fmt.Errorf(\"unexpected server challenge\")\n\t\t}\n",
                    "rendered": {
                      "text": "\t\tcase \"username:\":\n\t\t\treturn []byte(a.username), nil\n\t\tcase \"password:\":\n\t\t\treturn []byte(a.password), nil\n\t\tdefault:\n\t\t\treturn nil, fmt.Errorf(\"unexpected server challenge\")\n\t\t}\n",
                      "markdown": "`\t\tcase \"username:\":\n\t\t\treturn []byte(a.username), nil\n\t\tcase \"password:\":\n\t\t\treturn []byte(a.password), nil\n\t\tdefault:\n\t\t\treturn nil, fmt.Errorf(\"unexpected server challenge\")\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/smtp/client.go"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 8,
                  "endLine": 288,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t\tswitch strings.ToLower(string(fromServer)) {\n\t\tcase \"username:\":\n\t\t\treturn []byte(a.username), nil\n\t\tcase \"password:\":\n\t\t\treturn []byte(a.password), nil\n\t\tdefault:\n\t\t\treturn nil, fmt.Errorf(\"unexpected server challenge\")\n",
                    "rendered": {
                      "text": "\t\tswitch strings.ToLower(string(fromServer)) {\n\t\tcase \"username:\":\n\t\t\treturn []byte(a.username), nil\n\t\tcase \"password:\":\n\t\t\treturn []byte(a.password), nil\n\t\tdefault:\n\t\t\treturn nil, fmt.Errorf(\"unexpected server challenge\")\n",
                      "markdown": "`\t\tswitch strings.ToLower(string(fromServer)) {\n\t\tcase \"username:\":\n\t\t\treturn []byte(a.username), nil\n\t\tcase \"password:\":\n\t\t\treturn []byte(a.password), nil\n\t\tdefault:\n\t\t\treturn nil, fmt.Errorf(\"unexpected server challenge\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/smtp/client.go"
                },
                "region": {
                  "startLine": 282,
                  "startColumn": 31,
                  "endLine": 282,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\treturn \"LOGIN\", []byte{}, nil\n}\n\n// Used for AUTH LOGIN. (Maybe password should be encrypted)\nfunc (a *loginAuth) Next(fromServer []byte, more bool) ([]byte, error) {\n\tif more {\n\t\tswitch strings.ToLower(string(fromServer)) {\n",
                    "rendered": {
                      "text": "\treturn \"LOGIN\", []byte{}, nil\n}\n\n// Used for AUTH LOGIN. (Maybe password should be encrypted)\nfunc (a *loginAuth) Next(fromServer []byte, more bool) ([]byte, error) {\n\tif more {\n\t\tswitch strings.ToLower(string(fromServer)) {\n",
                      "markdown": "`\treturn \"LOGIN\", []byte{}, nil\n}\n\n// Used for AUTH LOGIN. (Maybe password should be encrypted)\nfunc (a *loginAuth) Next(fromServer []byte, more bool) ([]byte, error) {\n\tif more {\n\t\tswitch strings.ToLower(string(fromServer)) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/smtp/client.go"
                },
                "region": {
                  "startLine": 275,
                  "startColumn": 29,
                  "endLine": 275,
                  "endColumn": 37,
                  "snippet": {
                    "text": "}\n\nfunc LoginAuth(username, password string) smtp.Auth {\n\treturn &loginAuth{username, password}\n}\n\nfunc (a *loginAuth) Start(server *smtp.ServerInfo) (string, []byte, error) {\n",
                    "rendered": {
                      "text": "}\n\nfunc LoginAuth(username, password string) smtp.Auth {\n\treturn &loginAuth{username, password}\n}\n\nfunc (a *loginAuth) Start(server *smtp.ServerInfo) (string, []byte, error) {\n",
                      "markdown": "`}\n\nfunc LoginAuth(username, password string) smtp.Auth {\n\treturn &loginAuth{username, password}\n}\n\nfunc (a *loginAuth) Start(server *smtp.ServerInfo) (string, []byte, error) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/smtp/client.go"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 25,
                  "endLine": 274,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\tusername, password string\n}\n\nfunc LoginAuth(username, password string) smtp.Auth {\n\treturn &loginAuth{username, password}\n}\n\n",
                    "rendered": {
                      "text": "\tusername, password string\n}\n\nfunc LoginAuth(username, password string) smtp.Auth {\n\treturn &loginAuth{username, password}\n}\n\n",
                      "markdown": "`\tusername, password string\n}\n\nfunc LoginAuth(username, password string) smtp.Auth {\n\treturn &loginAuth{username, password}\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/smtp/client.go"
                },
                "region": {
                  "startLine": 271,
                  "startColumn": 11,
                  "endLine": 271,
                  "endColumn": 19,
                  "snippet": {
                    "text": "}\n\ntype loginAuth struct {\n\tusername, password string\n}\n\nfunc LoginAuth(username, password string) smtp.Auth {\n",
                    "rendered": {
                      "text": "}\n\ntype loginAuth struct {\n\tusername, password string\n}\n\nfunc LoginAuth(username, password string) smtp.Auth {\n",
                      "markdown": "`}\n\ntype loginAuth struct {\n\tusername, password string\n}\n\nfunc LoginAuth(username, password string) smtp.Auth {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/smtp/client.go"
                },
                "region": {
                  "startLine": 261,
                  "startColumn": 30,
                  "endLine": 261,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\t\t\t\terrs = append(errs, fmt.Errorf(\"missing password for LOGIN auth mechanism\"))\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn LoginAuth(username, password), nil\n\t\t}\n\t}\n\tif len(errs) == 0 {\n",
                    "rendered": {
                      "text": "\t\t\t\terrs = append(errs, fmt.Errorf(\"missing password for LOGIN auth mechanism\"))\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn LoginAuth(username, password), nil\n\t\t}\n\t}\n\tif len(errs) == 0 {\n",
                      "markdown": "`\t\t\t\terrs = append(errs, fmt.Errorf(\"missing password for LOGIN auth mechanism\"))\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn LoginAuth(username, password), nil\n\t\t}\n\t}\n\tif len(errs) == 0 {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/smtp/client.go"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 44,
                  "endLine": 258,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\t\tcase \"LOGIN\":\n\t\t\tpassword := string(conf.Password)\n\t\t\tif password == \"\" {\n\t\t\t\terrs = append(errs, fmt.Errorf(\"missing password for LOGIN auth mechanism\"))\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn LoginAuth(username, password), nil\n",
                    "rendered": {
                      "text": "\t\tcase \"LOGIN\":\n\t\t\tpassword := string(conf.Password)\n\t\t\tif password == \"\" {\n\t\t\t\terrs = append(errs, fmt.Errorf(\"missing password for LOGIN auth mechanism\"))\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn LoginAuth(username, password), nil\n",
                      "markdown": "`\t\tcase \"LOGIN\":\n\t\t\tpassword := string(conf.Password)\n\t\t\tif password == \"\" {\n\t\t\t\terrs = append(errs, fmt.Errorf(\"missing password for LOGIN auth mechanism\"))\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn LoginAuth(username, password), nil\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/smtp/client.go"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 6,
                  "endLine": 257,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\t\t\treturn smtp.PlainAuth(identity, username, password, host), nil\n\t\tcase \"LOGIN\":\n\t\t\tpassword := string(conf.Password)\n\t\t\tif password == \"\" {\n\t\t\t\terrs = append(errs, fmt.Errorf(\"missing password for LOGIN auth mechanism\"))\n\t\t\t\tcontinue\n\t\t\t}\n",
                    "rendered": {
                      "text": "\t\t\treturn smtp.PlainAuth(identity, username, password, host), nil\n\t\tcase \"LOGIN\":\n\t\t\tpassword := string(conf.Password)\n\t\t\tif password == \"\" {\n\t\t\t\terrs = append(errs, fmt.Errorf(\"missing password for LOGIN auth mechanism\"))\n\t\t\t\tcontinue\n\t\t\t}\n",
                      "markdown": "`\t\t\treturn smtp.PlainAuth(identity, username, password, host), nil\n\t\tcase \"LOGIN\":\n\t\t\tpassword := string(conf.Password)\n\t\t\tif password == \"\" {\n\t\t\t\terrs = append(errs, fmt.Errorf(\"missing password for LOGIN auth mechanism\"))\n\t\t\t\tcontinue\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/smtp/client.go"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 27,
                  "endLine": 256,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n\t\t\treturn smtp.PlainAuth(identity, username, password, host), nil\n\t\tcase \"LOGIN\":\n\t\t\tpassword := string(conf.Password)\n\t\t\tif password == \"\" {\n\t\t\t\terrs = append(errs, fmt.Errorf(\"missing password for LOGIN auth mechanism\"))\n\t\t\t\tcontinue\n",
                    "rendered": {
                      "text": "\n\t\t\treturn smtp.PlainAuth(identity, username, password, host), nil\n\t\tcase \"LOGIN\":\n\t\t\tpassword := string(conf.Password)\n\t\t\tif password == \"\" {\n\t\t\t\terrs = append(errs, fmt.Errorf(\"missing password for LOGIN auth mechanism\"))\n\t\t\t\tcontinue\n",
                      "markdown": "`\n\t\t\treturn smtp.PlainAuth(identity, username, password, host), nil\n\t\tcase \"LOGIN\":\n\t\t\tpassword := string(conf.Password)\n\t\t\tif password == \"\" {\n\t\t\t\terrs = append(errs, fmt.Errorf(\"missing password for LOGIN auth mechanism\"))\n\t\t\t\tcontinue\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/smtp/client.go"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 3,
                  "endLine": 256,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n\t\t\treturn smtp.PlainAuth(identity, username, password, host), nil\n\t\tcase \"LOGIN\":\n\t\t\tpassword := string(conf.Password)\n\t\t\tif password == \"\" {\n\t\t\t\terrs = append(errs, fmt.Errorf(\"missing password for LOGIN auth mechanism\"))\n\t\t\t\tcontinue\n",
                    "rendered": {
                      "text": "\n\t\t\treturn smtp.PlainAuth(identity, username, password, host), nil\n\t\tcase \"LOGIN\":\n\t\t\tpassword := string(conf.Password)\n\t\t\tif password == \"\" {\n\t\t\t\terrs = append(errs, fmt.Errorf(\"missing password for LOGIN auth mechanism\"))\n\t\t\t\tcontinue\n",
                      "markdown": "`\n\t\t\treturn smtp.PlainAuth(identity, username, password, host), nil\n\t\tcase \"LOGIN\":\n\t\t\tpassword := string(conf.Password)\n\t\t\tif password == \"\" {\n\t\t\t\terrs = append(errs, fmt.Errorf(\"missing password for LOGIN auth mechanism\"))\n\t\t\t\tcontinue\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/smtp/client.go"
                },
                "region": {
                  "startLine": 254,
                  "startColumn": 45,
                  "endLine": 254,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\t\t\t}\n\t\t\tidentity := conf.Identity\n\n\t\t\treturn smtp.PlainAuth(identity, username, password, host), nil\n\t\tcase \"LOGIN\":\n\t\t\tpassword := string(conf.Password)\n\t\t\tif password == \"\" {\n",
                    "rendered": {
                      "text": "\t\t\t}\n\t\t\tidentity := conf.Identity\n\n\t\t\treturn smtp.PlainAuth(identity, username, password, host), nil\n\t\tcase \"LOGIN\":\n\t\t\tpassword := string(conf.Password)\n\t\t\tif password == \"\" {\n",
                      "markdown": "`\t\t\t}\n\t\t\tidentity := conf.Identity\n\n\t\t\treturn smtp.PlainAuth(identity, username, password, host), nil\n\t\tcase \"LOGIN\":\n\t\t\tpassword := string(conf.Password)\n\t\t\tif password == \"\" {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/smtp/client.go"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 44,
                  "endLine": 249,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\t\tcase \"PLAIN\":\n\t\t\tpassword := string(conf.Password)\n\t\t\tif password == \"\" {\n\t\t\t\terrs = append(errs, fmt.Errorf(\"missing password for PLAIN auth mechanism\"))\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tidentity := conf.Identity\n",
                    "rendered": {
                      "text": "\t\tcase \"PLAIN\":\n\t\t\tpassword := string(conf.Password)\n\t\t\tif password == \"\" {\n\t\t\t\terrs = append(errs, fmt.Errorf(\"missing password for PLAIN auth mechanism\"))\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tidentity := conf.Identity\n",
                      "markdown": "`\t\tcase \"PLAIN\":\n\t\t\tpassword := string(conf.Password)\n\t\t\tif password == \"\" {\n\t\t\t\terrs = append(errs, fmt.Errorf(\"missing password for PLAIN auth mechanism\"))\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tidentity := conf.Identity\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/smtp/client.go"
                },
                "region": {
                  "startLine": 248,
                  "startColumn": 6,
                  "endLine": 248,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n\t\tcase \"PLAIN\":\n\t\t\tpassword := string(conf.Password)\n\t\t\tif password == \"\" {\n\t\t\t\terrs = append(errs, fmt.Errorf(\"missing password for PLAIN auth mechanism\"))\n\t\t\t\tcontinue\n\t\t\t}\n",
                    "rendered": {
                      "text": "\n\t\tcase \"PLAIN\":\n\t\t\tpassword := string(conf.Password)\n\t\t\tif password == \"\" {\n\t\t\t\terrs = append(errs, fmt.Errorf(\"missing password for PLAIN auth mechanism\"))\n\t\t\t\tcontinue\n\t\t\t}\n",
                      "markdown": "`\n\t\tcase \"PLAIN\":\n\t\t\tpassword := string(conf.Password)\n\t\t\tif password == \"\" {\n\t\t\t\terrs = append(errs, fmt.Errorf(\"missing password for PLAIN auth mechanism\"))\n\t\t\t\tcontinue\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/smtp/client.go"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 27,
                  "endLine": 247,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\t\t\treturn smtp.CRAMMD5Auth(username, secret), nil\n\n\t\tcase \"PLAIN\":\n\t\t\tpassword := string(conf.Password)\n\t\t\tif password == \"\" {\n\t\t\t\terrs = append(errs, fmt.Errorf(\"missing password for PLAIN auth mechanism\"))\n\t\t\t\tcontinue\n",
                    "rendered": {
                      "text": "\t\t\treturn smtp.CRAMMD5Auth(username, secret), nil\n\n\t\tcase \"PLAIN\":\n\t\t\tpassword := string(conf.Password)\n\t\t\tif password == \"\" {\n\t\t\t\terrs = append(errs, fmt.Errorf(\"missing password for PLAIN auth mechanism\"))\n\t\t\t\tcontinue\n",
                      "markdown": "`\t\t\treturn smtp.CRAMMD5Auth(username, secret), nil\n\n\t\tcase \"PLAIN\":\n\t\t\tpassword := string(conf.Password)\n\t\t\tif password == \"\" {\n\t\t\t\terrs = append(errs, fmt.Errorf(\"missing password for PLAIN auth mechanism\"))\n\t\t\t\tcontinue\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/smtp/client.go"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 3,
                  "endLine": 247,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t\t\treturn smtp.CRAMMD5Auth(username, secret), nil\n\n\t\tcase \"PLAIN\":\n\t\t\tpassword := string(conf.Password)\n\t\t\tif password == \"\" {\n\t\t\t\terrs = append(errs, fmt.Errorf(\"missing password for PLAIN auth mechanism\"))\n\t\t\t\tcontinue\n",
                    "rendered": {
                      "text": "\t\t\treturn smtp.CRAMMD5Auth(username, secret), nil\n\n\t\tcase \"PLAIN\":\n\t\t\tpassword := string(conf.Password)\n\t\t\tif password == \"\" {\n\t\t\t\terrs = append(errs, fmt.Errorf(\"missing password for PLAIN auth mechanism\"))\n\t\t\t\tcontinue\n",
                      "markdown": "`\t\t\treturn smtp.CRAMMD5Auth(username, secret), nil\n\n\t\tcase \"PLAIN\":\n\t\t\tpassword := string(conf.Password)\n\t\t\tif password == \"\" {\n\t\t\t\terrs = append(errs, fmt.Errorf(\"missing password for PLAIN auth mechanism\"))\n\t\t\t\tcontinue\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/smtp/client.go"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 108,
                  "endLine": 179,
                  "endColumn": 116,
                  "snippet": {
                    "text": "\t\treturn err\n\t}\n\tif _, ok := conf.Headers[\"Message-Id\"]; !ok {\n\t\tfmt.Fprintf(buffer, \"Message-Id: %s\\r\\n\", fmt.Sprintf(\"<%d.%d@%s>\", time.Now().UnixNano(), rand.Uint64(), hostname))\n\t}\n\n\tmultipartBuffer := &bytes.Buffer{}\n",
                    "rendered": {
                      "text": "\t\treturn err\n\t}\n\tif _, ok := conf.Headers[\"Message-Id\"]; !ok {\n\t\tfmt.Fprintf(buffer, \"Message-Id: %s\\r\\n\", fmt.Sprintf(\"<%d.%d@%s>\", time.Now().UnixNano(), rand.Uint64(), hostname))\n\t}\n\n\tmultipartBuffer := &bytes.Buffer{}\n",
                      "markdown": "`\t\treturn err\n\t}\n\tif _, ok := conf.Headers[\"Message-Id\"]; !ok {\n\t\tfmt.Fprintf(buffer, \"Message-Id: %s\\r\\n\", fmt.Sprintf(\"<%d.%d@%s>\", time.Now().UnixNano(), rand.Uint64(), hostname))\n\t}\n\n\tmultipartBuffer := &bytes.Buffer{}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/smtp/client.go"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 1,
                  "endLine": 174,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\t\tfmt.Fprintf(buffer, \"%s: %s\\r\\n\", header, mime.QEncoding.Encode(\"utf-8\", value))\n\t}\n\n\thostname, err := os.Hostname()\n\tif err != nil {\n\t\treturn err\n\t}\n",
                    "rendered": {
                      "text": "\t\tfmt.Fprintf(buffer, \"%s: %s\\r\\n\", header, mime.QEncoding.Encode(\"utf-8\", value))\n\t}\n\n\thostname, err := os.Hostname()\n\tif err != nil {\n\t\treturn err\n\t}\n",
                      "markdown": "`\t\tfmt.Fprintf(buffer, \"%s: %s\\r\\n\", header, mime.QEncoding.Encode(\"utf-8\", value))\n\t}\n\n\thostname, err := os.Hostname()\n\tif err != nil {\n\t\treturn err\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/smtp/client.go"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 25,
                  "endLine": 133,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\t\treturn fmt.Errorf(\"must be exactly one 'from' address (got: %d)\", len(addrs))\n\t}\n\tif err = c.Mail(addrs[0].Address); err != nil {\n\t\treturn fmt.Errorf(\"send MAIL command: %w\", err)\n\t}\n\taddrs, err = mail.ParseAddressList(conf.To)\n\tif err != nil {\n",
                    "rendered": {
                      "text": "\t\treturn fmt.Errorf(\"must be exactly one 'from' address (got: %d)\", len(addrs))\n\t}\n\tif err = c.Mail(addrs[0].Address); err != nil {\n\t\treturn fmt.Errorf(\"send MAIL command: %w\", err)\n\t}\n\taddrs, err = mail.ParseAddressList(conf.To)\n\tif err != nil {\n",
                      "markdown": "`\t\treturn fmt.Errorf(\"must be exactly one 'from' address (got: %d)\", len(addrs))\n\t}\n\tif err = c.Mail(addrs[0].Address); err != nil {\n\t\treturn fmt.Errorf(\"send MAIL command: %w\", err)\n\t}\n\taddrs, err = mail.ParseAddressList(conf.To)\n\tif err != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/smtp/smtp.go"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 18,
                  "endLine": 45,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    subject: Test notification\n    auth:\n      username: myusername\n      password: mypassword\n    requireTLS: true\n`\n)\n",
                    "rendered": {
                      "text": "    subject: Test notification\n    auth:\n      username: myusername\n      password: mypassword\n    requireTLS: true\n`\n)\n",
                      "markdown": "`    subject: Test notification\n    auth:\n      username: myusername\n      password: mypassword\n    requireTLS: true\n`\n)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/smtp/smtp.go"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 6,
                  "endLine": 45,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    subject: Test notification\n    auth:\n      username: myusername\n      password: mypassword\n    requireTLS: true\n`\n)\n",
                    "rendered": {
                      "text": "    subject: Test notification\n    auth:\n      username: myusername\n      password: mypassword\n    requireTLS: true\n`\n)\n",
                      "markdown": "`    subject: Test notification\n    auth:\n      username: myusername\n      password: mypassword\n    requireTLS: true\n`\n)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/smtp/smtp.go"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 47,
                  "endLine": 75,
                  "endColumn": 51,
                  "snippet": {
                    "text": "// Handle handles the notification.\nfunc (s *SMTP) Handle(e event.Event) {\n\tsend(s.cfg, e.Message())\n\tlogrus.Printf(\"Message successfully sent to %s at %s \", s.cfg.To, time.Now())\n}\n\nfunc formatEmail(e event.Event) (string, error) {\n",
                    "rendered": {
                      "text": "// Handle handles the notification.\nfunc (s *SMTP) Handle(e event.Event) {\n\tsend(s.cfg, e.Message())\n\tlogrus.Printf(\"Message successfully sent to %s at %s \", s.cfg.To, time.Now())\n}\n\nfunc formatEmail(e event.Event) (string, error) {\n",
                      "markdown": "`// Handle handles the notification.\nfunc (s *SMTP) Handle(e event.Event) {\n\tsend(s.cfg, e.Message())\n\tlogrus.Printf(\"Message successfully sent to %s at %s \", s.cfg.To, time.Now())\n}\n\nfunc formatEmail(e event.Event) (string, error) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 24,
                  "endLine": 26,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                    "rendered": {
                      "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                      "markdown": "`\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                    "rendered": {
                      "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                      "markdown": "`fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                    "rendered": {
                      "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                      "markdown": "`\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                    "rendered": {
                      "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                      "markdown": "`\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                    "rendered": {
                      "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                      "markdown": "`\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                    "rendered": {
                      "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                      "markdown": "`then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 2,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_secrets.tpl"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 73,
                  "endLine": 132,
                  "endColumn": 81,
                  "snippet": {
                    "text": "{{ include \"common.secrets.exists\" (dict \"secret\" \"secret-name\" \"context\" $) }}\n\nParams:\n  - secret - String - Required - Name of the 'Secret' resource where the password is stored.\n  - context - Context - Required - Parent context.\n*/}}\n{{- define \"common.secrets.exists\" -}}\n",
                    "rendered": {
                      "text": "{{ include \"common.secrets.exists\" (dict \"secret\" \"secret-name\" \"context\" $) }}\n\nParams:\n  - secret - String - Required - Name of the 'Secret' resource where the password is stored.\n  - context - Context - Required - Parent context.\n*/}}\n{{- define \"common.secrets.exists\" -}}\n",
                      "markdown": "`{{ include \"common.secrets.exists\" (dict \"secret\" \"secret-name\" \"context\" $) }}\n\nParams:\n  - secret - String - Required - Name of the 'Secret' resource where the password is stored.\n  - context - Context - Required - Parent context.\n*/}}\n{{- define \"common.secrets.exists\" -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_secrets.tpl"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 17,
                  "endLine": 122,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    {{- $password = randAlphaNum $passwordLength | b64enc | quote }}\n  {{- end }}\n{{- end -}}\n{{- printf \"%s\" $password -}}\n{{- end -}}\n\n{{/*\n",
                    "rendered": {
                      "text": "    {{- $password = randAlphaNum $passwordLength | b64enc | quote }}\n  {{- end }}\n{{- end -}}\n{{- printf \"%s\" $password -}}\n{{- end -}}\n\n{{/*\n",
                      "markdown": "`    {{- $password = randAlphaNum $passwordLength | b64enc | quote }}\n  {{- end }}\n{{- end -}}\n{{- printf \"%s\" $password -}}\n{{- end -}}\n\n{{/*\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_secrets.tpl"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 34,
                  "endLine": 119,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    {{- $password = regexReplaceAllLiteral \"\\\\W\" $password \"@\" | substr 5 $passwordLength }}\n    {{- $password = printf \"%s%s\" $subStr $password | toString | shuffle | b64enc | quote }}\n  {{- else }}\n    {{- $password = randAlphaNum $passwordLength | b64enc | quote }}\n  {{- end }}\n{{- end -}}\n{{- printf \"%s\" $password -}}\n",
                    "rendered": {
                      "text": "    {{- $password = regexReplaceAllLiteral \"\\\\W\" $password \"@\" | substr 5 $passwordLength }}\n    {{- $password = printf \"%s%s\" $subStr $password | toString | shuffle | b64enc | quote }}\n  {{- else }}\n    {{- $password = randAlphaNum $passwordLength | b64enc | quote }}\n  {{- end }}\n{{- end -}}\n{{- printf \"%s\" $password -}}\n",
                      "markdown": "`    {{- $password = regexReplaceAllLiteral \"\\\\W\" $password \"@\" | substr 5 $passwordLength }}\n    {{- $password = printf \"%s%s\" $subStr $password | toString | shuffle | b64enc | quote }}\n  {{- else }}\n    {{- $password = randAlphaNum $passwordLength | b64enc | quote }}\n  {{- end }}\n{{- end -}}\n{{- printf \"%s\" $password -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_secrets.tpl"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 9,
                  "endLine": 119,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    {{- $password = regexReplaceAllLiteral \"\\\\W\" $password \"@\" | substr 5 $passwordLength }}\n    {{- $password = printf \"%s%s\" $subStr $password | toString | shuffle | b64enc | quote }}\n  {{- else }}\n    {{- $password = randAlphaNum $passwordLength | b64enc | quote }}\n  {{- end }}\n{{- end -}}\n{{- printf \"%s\" $password -}}\n",
                    "rendered": {
                      "text": "    {{- $password = regexReplaceAllLiteral \"\\\\W\" $password \"@\" | substr 5 $passwordLength }}\n    {{- $password = printf \"%s%s\" $subStr $password | toString | shuffle | b64enc | quote }}\n  {{- else }}\n    {{- $password = randAlphaNum $passwordLength | b64enc | quote }}\n  {{- end }}\n{{- end -}}\n{{- printf \"%s\" $password -}}\n",
                      "markdown": "`    {{- $password = regexReplaceAllLiteral \"\\\\W\" $password \"@\" | substr 5 $passwordLength }}\n    {{- $password = printf \"%s%s\" $subStr $password | toString | shuffle | b64enc | quote }}\n  {{- else }}\n    {{- $password = randAlphaNum $passwordLength | b64enc | quote }}\n  {{- end }}\n{{- end -}}\n{{- printf \"%s\" $password -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_secrets.tpl"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 43,
                  "endLine": 117,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    {{- $subStr := list (lower (randAlpha 1)) (randNumeric 1) (upper (randAlpha 1)) | join \"_\" }}\n    {{- $password = randAscii $passwordLength }}\n    {{- $password = regexReplaceAllLiteral \"\\\\W\" $password \"@\" | substr 5 $passwordLength }}\n    {{- $password = printf \"%s%s\" $subStr $password | toString | shuffle | b64enc | quote }}\n  {{- else }}\n    {{- $password = randAlphaNum $passwordLength | b64enc | quote }}\n  {{- end }}\n",
                    "rendered": {
                      "text": "    {{- $subStr := list (lower (randAlpha 1)) (randNumeric 1) (upper (randAlpha 1)) | join \"_\" }}\n    {{- $password = randAscii $passwordLength }}\n    {{- $password = regexReplaceAllLiteral \"\\\\W\" $password \"@\" | substr 5 $passwordLength }}\n    {{- $password = printf \"%s%s\" $subStr $password | toString | shuffle | b64enc | quote }}\n  {{- else }}\n    {{- $password = randAlphaNum $passwordLength | b64enc | quote }}\n  {{- end }}\n",
                      "markdown": "`    {{- $subStr := list (lower (randAlpha 1)) (randNumeric 1) (upper (randAlpha 1)) | join \"_\" }}\n    {{- $password = randAscii $passwordLength }}\n    {{- $password = regexReplaceAllLiteral \"\\\\W\" $password \"@\" | substr 5 $passwordLength }}\n    {{- $password = printf \"%s%s\" $subStr $password | toString | shuffle | b64enc | quote }}\n  {{- else }}\n    {{- $password = randAlphaNum $passwordLength | b64enc | quote }}\n  {{- end }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_secrets.tpl"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 9,
                  "endLine": 117,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    {{- $subStr := list (lower (randAlpha 1)) (randNumeric 1) (upper (randAlpha 1)) | join \"_\" }}\n    {{- $password = randAscii $passwordLength }}\n    {{- $password = regexReplaceAllLiteral \"\\\\W\" $password \"@\" | substr 5 $passwordLength }}\n    {{- $password = printf \"%s%s\" $subStr $password | toString | shuffle | b64enc | quote }}\n  {{- else }}\n    {{- $password = randAlphaNum $passwordLength | b64enc | quote }}\n  {{- end }}\n",
                    "rendered": {
                      "text": "    {{- $subStr := list (lower (randAlpha 1)) (randNumeric 1) (upper (randAlpha 1)) | join \"_\" }}\n    {{- $password = randAscii $passwordLength }}\n    {{- $password = regexReplaceAllLiteral \"\\\\W\" $password \"@\" | substr 5 $passwordLength }}\n    {{- $password = printf \"%s%s\" $subStr $password | toString | shuffle | b64enc | quote }}\n  {{- else }}\n    {{- $password = randAlphaNum $passwordLength | b64enc | quote }}\n  {{- end }}\n",
                      "markdown": "`    {{- $subStr := list (lower (randAlpha 1)) (randNumeric 1) (upper (randAlpha 1)) | join \"_\" }}\n    {{- $password = randAscii $passwordLength }}\n    {{- $password = regexReplaceAllLiteral \"\\\\W\" $password \"@\" | substr 5 $passwordLength }}\n    {{- $password = printf \"%s%s\" $subStr $password | toString | shuffle | b64enc | quote }}\n  {{- else }}\n    {{- $password = randAlphaNum $passwordLength | b64enc | quote }}\n  {{- end }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_secrets.tpl"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 75,
                  "endLine": 116,
                  "endColumn": 83,
                  "snippet": {
                    "text": "  {{- if .strong }}\n    {{- $subStr := list (lower (randAlpha 1)) (randNumeric 1) (upper (randAlpha 1)) | join \"_\" }}\n    {{- $password = randAscii $passwordLength }}\n    {{- $password = regexReplaceAllLiteral \"\\\\W\" $password \"@\" | substr 5 $passwordLength }}\n    {{- $password = printf \"%s%s\" $subStr $password | toString | shuffle | b64enc | quote }}\n  {{- else }}\n    {{- $password = randAlphaNum $passwordLength | b64enc | quote }}\n",
                    "rendered": {
                      "text": "  {{- if .strong }}\n    {{- $subStr := list (lower (randAlpha 1)) (randNumeric 1) (upper (randAlpha 1)) | join \"_\" }}\n    {{- $password = randAscii $passwordLength }}\n    {{- $password = regexReplaceAllLiteral \"\\\\W\" $password \"@\" | substr 5 $passwordLength }}\n    {{- $password = printf \"%s%s\" $subStr $password | toString | shuffle | b64enc | quote }}\n  {{- else }}\n    {{- $password = randAlphaNum $passwordLength | b64enc | quote }}\n",
                      "markdown": "`  {{- if .strong }}\n    {{- $subStr := list (lower (randAlpha 1)) (randNumeric 1) (upper (randAlpha 1)) | join \"_\" }}\n    {{- $password = randAscii $passwordLength }}\n    {{- $password = regexReplaceAllLiteral \"\\\\W\" $password \"@\" | substr 5 $passwordLength }}\n    {{- $password = printf \"%s%s\" $subStr $password | toString | shuffle | b64enc | quote }}\n  {{- else }}\n    {{- $password = randAlphaNum $passwordLength | b64enc | quote }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_secrets.tpl"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 50,
                  "endLine": 116,
                  "endColumn": 58,
                  "snippet": {
                    "text": "  {{- if .strong }}\n    {{- $subStr := list (lower (randAlpha 1)) (randNumeric 1) (upper (randAlpha 1)) | join \"_\" }}\n    {{- $password = randAscii $passwordLength }}\n    {{- $password = regexReplaceAllLiteral \"\\\\W\" $password \"@\" | substr 5 $passwordLength }}\n    {{- $password = printf \"%s%s\" $subStr $password | toString | shuffle | b64enc | quote }}\n  {{- else }}\n    {{- $password = randAlphaNum $passwordLength | b64enc | quote }}\n",
                    "rendered": {
                      "text": "  {{- if .strong }}\n    {{- $subStr := list (lower (randAlpha 1)) (randNumeric 1) (upper (randAlpha 1)) | join \"_\" }}\n    {{- $password = randAscii $passwordLength }}\n    {{- $password = regexReplaceAllLiteral \"\\\\W\" $password \"@\" | substr 5 $passwordLength }}\n    {{- $password = printf \"%s%s\" $subStr $password | toString | shuffle | b64enc | quote }}\n  {{- else }}\n    {{- $password = randAlphaNum $passwordLength | b64enc | quote }}\n",
                      "markdown": "`  {{- if .strong }}\n    {{- $subStr := list (lower (randAlpha 1)) (randNumeric 1) (upper (randAlpha 1)) | join \"_\" }}\n    {{- $password = randAscii $passwordLength }}\n    {{- $password = regexReplaceAllLiteral \"\\\\W\" $password \"@\" | substr 5 $passwordLength }}\n    {{- $password = printf \"%s%s\" $subStr $password | toString | shuffle | b64enc | quote }}\n  {{- else }}\n    {{- $password = randAlphaNum $passwordLength | b64enc | quote }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_secrets.tpl"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 9,
                  "endLine": 116,
                  "endColumn": 17,
                  "snippet": {
                    "text": "  {{- if .strong }}\n    {{- $subStr := list (lower (randAlpha 1)) (randNumeric 1) (upper (randAlpha 1)) | join \"_\" }}\n    {{- $password = randAscii $passwordLength }}\n    {{- $password = regexReplaceAllLiteral \"\\\\W\" $password \"@\" | substr 5 $passwordLength }}\n    {{- $password = printf \"%s%s\" $subStr $password | toString | shuffle | b64enc | quote }}\n  {{- else }}\n    {{- $password = randAlphaNum $passwordLength | b64enc | quote }}\n",
                    "rendered": {
                      "text": "  {{- if .strong }}\n    {{- $subStr := list (lower (randAlpha 1)) (randNumeric 1) (upper (randAlpha 1)) | join \"_\" }}\n    {{- $password = randAscii $passwordLength }}\n    {{- $password = regexReplaceAllLiteral \"\\\\W\" $password \"@\" | substr 5 $passwordLength }}\n    {{- $password = printf \"%s%s\" $subStr $password | toString | shuffle | b64enc | quote }}\n  {{- else }}\n    {{- $password = randAlphaNum $passwordLength | b64enc | quote }}\n",
                      "markdown": "`  {{- if .strong }}\n    {{- $subStr := list (lower (randAlpha 1)) (randNumeric 1) (upper (randAlpha 1)) | join \"_\" }}\n    {{- $password = randAscii $passwordLength }}\n    {{- $password = regexReplaceAllLiteral \"\\\\W\" $password \"@\" | substr 5 $passwordLength }}\n    {{- $password = printf \"%s%s\" $subStr $password | toString | shuffle | b64enc | quote }}\n  {{- else }}\n    {{- $password = randAlphaNum $passwordLength | b64enc | quote }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_secrets.tpl"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 31,
                  "endLine": 115,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\n  {{- if .strong }}\n    {{- $subStr := list (lower (randAlpha 1)) (randNumeric 1) (upper (randAlpha 1)) | join \"_\" }}\n    {{- $password = randAscii $passwordLength }}\n    {{- $password = regexReplaceAllLiteral \"\\\\W\" $password \"@\" | substr 5 $passwordLength }}\n    {{- $password = printf \"%s%s\" $subStr $password | toString | shuffle | b64enc | quote }}\n  {{- else }}\n",
                    "rendered": {
                      "text": "\n  {{- if .strong }}\n    {{- $subStr := list (lower (randAlpha 1)) (randNumeric 1) (upper (randAlpha 1)) | join \"_\" }}\n    {{- $password = randAscii $passwordLength }}\n    {{- $password = regexReplaceAllLiteral \"\\\\W\" $password \"@\" | substr 5 $passwordLength }}\n    {{- $password = printf \"%s%s\" $subStr $password | toString | shuffle | b64enc | quote }}\n  {{- else }}\n",
                      "markdown": "`\n  {{- if .strong }}\n    {{- $subStr := list (lower (randAlpha 1)) (randNumeric 1) (upper (randAlpha 1)) | join \"_\" }}\n    {{- $password = randAscii $passwordLength }}\n    {{- $password = regexReplaceAllLiteral \"\\\\W\" $password \"@\" | substr 5 $passwordLength }}\n    {{- $password = printf \"%s%s\" $subStr $password | toString | shuffle | b64enc | quote }}\n  {{- else }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_secrets.tpl"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 9,
                  "endLine": 115,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n  {{- if .strong }}\n    {{- $subStr := list (lower (randAlpha 1)) (randNumeric 1) (upper (randAlpha 1)) | join \"_\" }}\n    {{- $password = randAscii $passwordLength }}\n    {{- $password = regexReplaceAllLiteral \"\\\\W\" $password \"@\" | substr 5 $passwordLength }}\n    {{- $password = printf \"%s%s\" $subStr $password | toString | shuffle | b64enc | quote }}\n  {{- else }}\n",
                    "rendered": {
                      "text": "\n  {{- if .strong }}\n    {{- $subStr := list (lower (randAlpha 1)) (randNumeric 1) (upper (randAlpha 1)) | join \"_\" }}\n    {{- $password = randAscii $passwordLength }}\n    {{- $password = regexReplaceAllLiteral \"\\\\W\" $password \"@\" | substr 5 $passwordLength }}\n    {{- $password = printf \"%s%s\" $subStr $password | toString | shuffle | b64enc | quote }}\n  {{- else }}\n",
                      "markdown": "`\n  {{- if .strong }}\n    {{- $subStr := list (lower (randAlpha 1)) (randNumeric 1) (upper (randAlpha 1)) | join \"_\" }}\n    {{- $password = randAscii $passwordLength }}\n    {{- $password = regexReplaceAllLiteral \"\\\\W\" $password \"@\" | substr 5 $passwordLength }}\n    {{- $password = printf \"%s%s\" $subStr $password | toString | shuffle | b64enc | quote }}\n  {{- else }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_secrets.tpl"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 80,
                  "endLine": 111,
                  "endColumn": 88,
                  "snippet": {
                    "text": "  {{- $requiredPassword := dict \"valueKey\" $providedPasswordKey \"secret\" .secret \"field\" .key \"subchart\" $subchart \"context\" $.context -}}\n  {{- $requiredPasswordError := include \"common.validations.values.single.empty\" $requiredPassword -}}\n  {{- $passwordValidationErrors := list $requiredPasswordError -}}\n  {{- include \"common.errors.upgrade.passwords.empty\" (dict \"validationErrors\" $passwordValidationErrors \"context\" $.context) -}}\n\n  {{- if .strong }}\n    {{- $subStr := list (lower (randAlpha 1)) (randNumeric 1) (upper (randAlpha 1)) | join \"_\" }}\n",
                    "rendered": {
                      "text": "  {{- $requiredPassword := dict \"valueKey\" $providedPasswordKey \"secret\" .secret \"field\" .key \"subchart\" $subchart \"context\" $.context -}}\n  {{- $requiredPasswordError := include \"common.validations.values.single.empty\" $requiredPassword -}}\n  {{- $passwordValidationErrors := list $requiredPasswordError -}}\n  {{- include \"common.errors.upgrade.passwords.empty\" (dict \"validationErrors\" $passwordValidationErrors \"context\" $.context) -}}\n\n  {{- if .strong }}\n    {{- $subStr := list (lower (randAlpha 1)) (randNumeric 1) (upper (randAlpha 1)) | join \"_\" }}\n",
                      "markdown": "`  {{- $requiredPassword := dict \"valueKey\" $providedPasswordKey \"secret\" .secret \"field\" .key \"subchart\" $subchart \"context\" $.context -}}\n  {{- $requiredPasswordError := include \"common.validations.values.single.empty\" $requiredPassword -}}\n  {{- $passwordValidationErrors := list $requiredPasswordError -}}\n  {{- include \"common.errors.upgrade.passwords.empty\" (dict \"validationErrors\" $passwordValidationErrors \"context\" $.context) -}}\n\n  {{- if .strong }}\n    {{- $subStr := list (lower (randAlpha 1)) (randNumeric 1) (upper (randAlpha 1)) | join \"_\" }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_secrets.tpl"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 37,
                  "endLine": 111,
                  "endColumn": 45,
                  "snippet": {
                    "text": "  {{- $requiredPassword := dict \"valueKey\" $providedPasswordKey \"secret\" .secret \"field\" .key \"subchart\" $subchart \"context\" $.context -}}\n  {{- $requiredPasswordError := include \"common.validations.values.single.empty\" $requiredPassword -}}\n  {{- $passwordValidationErrors := list $requiredPasswordError -}}\n  {{- include \"common.errors.upgrade.passwords.empty\" (dict \"validationErrors\" $passwordValidationErrors \"context\" $.context) -}}\n\n  {{- if .strong }}\n    {{- $subStr := list (lower (randAlpha 1)) (randNumeric 1) (upper (randAlpha 1)) | join \"_\" }}\n",
                    "rendered": {
                      "text": "  {{- $requiredPassword := dict \"valueKey\" $providedPasswordKey \"secret\" .secret \"field\" .key \"subchart\" $subchart \"context\" $.context -}}\n  {{- $requiredPasswordError := include \"common.validations.values.single.empty\" $requiredPassword -}}\n  {{- $passwordValidationErrors := list $requiredPasswordError -}}\n  {{- include \"common.errors.upgrade.passwords.empty\" (dict \"validationErrors\" $passwordValidationErrors \"context\" $.context) -}}\n\n  {{- if .strong }}\n    {{- $subStr := list (lower (randAlpha 1)) (randNumeric 1) (upper (randAlpha 1)) | join \"_\" }}\n",
                      "markdown": "`  {{- $requiredPassword := dict \"valueKey\" $providedPasswordKey \"secret\" .secret \"field\" .key \"subchart\" $subchart \"context\" $.context -}}\n  {{- $requiredPasswordError := include \"common.validations.values.single.empty\" $requiredPassword -}}\n  {{- $passwordValidationErrors := list $requiredPasswordError -}}\n  {{- include \"common.errors.upgrade.passwords.empty\" (dict \"validationErrors\" $passwordValidationErrors \"context\" $.context) -}}\n\n  {{- if .strong }}\n    {{- $subStr := list (lower (randAlpha 1)) (randNumeric 1) (upper (randAlpha 1)) | join \"_\" }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_secrets.tpl"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 49,
                  "endLine": 110,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\n  {{- $requiredPassword := dict \"valueKey\" $providedPasswordKey \"secret\" .secret \"field\" .key \"subchart\" $subchart \"context\" $.context -}}\n  {{- $requiredPasswordError := include \"common.validations.values.single.empty\" $requiredPassword -}}\n  {{- $passwordValidationErrors := list $requiredPasswordError -}}\n  {{- include \"common.errors.upgrade.passwords.empty\" (dict \"validationErrors\" $passwordValidationErrors \"context\" $.context) -}}\n\n  {{- if .strong }}\n",
                    "rendered": {
                      "text": "\n  {{- $requiredPassword := dict \"valueKey\" $providedPasswordKey \"secret\" .secret \"field\" .key \"subchart\" $subchart \"context\" $.context -}}\n  {{- $requiredPasswordError := include \"common.validations.values.single.empty\" $requiredPassword -}}\n  {{- $passwordValidationErrors := list $requiredPasswordError -}}\n  {{- include \"common.errors.upgrade.passwords.empty\" (dict \"validationErrors\" $passwordValidationErrors \"context\" $.context) -}}\n\n  {{- if .strong }}\n",
                      "markdown": "`\n  {{- $requiredPassword := dict \"valueKey\" $providedPasswordKey \"secret\" .secret \"field\" .key \"subchart\" $subchart \"context\" $.context -}}\n  {{- $requiredPasswordError := include \"common.validations.values.single.empty\" $requiredPassword -}}\n  {{- $passwordValidationErrors := list $requiredPasswordError -}}\n  {{- include \"common.errors.upgrade.passwords.empty\" (dict \"validationErrors\" $passwordValidationErrors \"context\" $.context) -}}\n\n  {{- if .strong }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_secrets.tpl"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 7,
                  "endLine": 110,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n  {{- $requiredPassword := dict \"valueKey\" $providedPasswordKey \"secret\" .secret \"field\" .key \"subchart\" $subchart \"context\" $.context -}}\n  {{- $requiredPasswordError := include \"common.validations.values.single.empty\" $requiredPassword -}}\n  {{- $passwordValidationErrors := list $requiredPasswordError -}}\n  {{- include \"common.errors.upgrade.passwords.empty\" (dict \"validationErrors\" $passwordValidationErrors \"context\" $.context) -}}\n\n  {{- if .strong }}\n",
                    "rendered": {
                      "text": "\n  {{- $requiredPassword := dict \"valueKey\" $providedPasswordKey \"secret\" .secret \"field\" .key \"subchart\" $subchart \"context\" $.context -}}\n  {{- $requiredPasswordError := include \"common.validations.values.single.empty\" $requiredPassword -}}\n  {{- $passwordValidationErrors := list $requiredPasswordError -}}\n  {{- include \"common.errors.upgrade.passwords.empty\" (dict \"validationErrors\" $passwordValidationErrors \"context\" $.context) -}}\n\n  {{- if .strong }}\n",
                      "markdown": "`\n  {{- $requiredPassword := dict \"valueKey\" $providedPasswordKey \"secret\" .secret \"field\" .key \"subchart\" $subchart \"context\" $.context -}}\n  {{- $requiredPasswordError := include \"common.validations.values.single.empty\" $requiredPassword -}}\n  {{- $passwordValidationErrors := list $requiredPasswordError -}}\n  {{- include \"common.errors.upgrade.passwords.empty\" (dict \"validationErrors\" $passwordValidationErrors \"context\" $.context) -}}\n\n  {{- if .strong }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_secrets.tpl"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 90,
                  "endLine": 109,
                  "endColumn": 98,
                  "snippet": {
                    "text": "  {{- end -}}\n\n  {{- $requiredPassword := dict \"valueKey\" $providedPasswordKey \"secret\" .secret \"field\" .key \"subchart\" $subchart \"context\" $.context -}}\n  {{- $requiredPasswordError := include \"common.validations.values.single.empty\" $requiredPassword -}}\n  {{- $passwordValidationErrors := list $requiredPasswordError -}}\n  {{- include \"common.errors.upgrade.passwords.empty\" (dict \"validationErrors\" $passwordValidationErrors \"context\" $.context) -}}\n\n",
                    "rendered": {
                      "text": "  {{- end -}}\n\n  {{- $requiredPassword := dict \"valueKey\" $providedPasswordKey \"secret\" .secret \"field\" .key \"subchart\" $subchart \"context\" $.context -}}\n  {{- $requiredPasswordError := include \"common.validations.values.single.empty\" $requiredPassword -}}\n  {{- $passwordValidationErrors := list $requiredPasswordError -}}\n  {{- include \"common.errors.upgrade.passwords.empty\" (dict \"validationErrors\" $passwordValidationErrors \"context\" $.context) -}}\n\n",
                      "markdown": "`  {{- end -}}\n\n  {{- $requiredPassword := dict \"valueKey\" $providedPasswordKey \"secret\" .secret \"field\" .key \"subchart\" $subchart \"context\" $.context -}}\n  {{- $requiredPasswordError := include \"common.validations.values.single.empty\" $requiredPassword -}}\n  {{- $passwordValidationErrors := list $requiredPasswordError -}}\n  {{- include \"common.errors.upgrade.passwords.empty\" (dict \"validationErrors\" $passwordValidationErrors \"context\" $.context) -}}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_secrets.tpl"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 15,
                  "endLine": 109,
                  "endColumn": 23,
                  "snippet": {
                    "text": "  {{- end -}}\n\n  {{- $requiredPassword := dict \"valueKey\" $providedPasswordKey \"secret\" .secret \"field\" .key \"subchart\" $subchart \"context\" $.context -}}\n  {{- $requiredPasswordError := include \"common.validations.values.single.empty\" $requiredPassword -}}\n  {{- $passwordValidationErrors := list $requiredPasswordError -}}\n  {{- include \"common.errors.upgrade.passwords.empty\" (dict \"validationErrors\" $passwordValidationErrors \"context\" $.context) -}}\n\n",
                    "rendered": {
                      "text": "  {{- end -}}\n\n  {{- $requiredPassword := dict \"valueKey\" $providedPasswordKey \"secret\" .secret \"field\" .key \"subchart\" $subchart \"context\" $.context -}}\n  {{- $requiredPasswordError := include \"common.validations.values.single.empty\" $requiredPassword -}}\n  {{- $passwordValidationErrors := list $requiredPasswordError -}}\n  {{- include \"common.errors.upgrade.passwords.empty\" (dict \"validationErrors\" $passwordValidationErrors \"context\" $.context) -}}\n\n",
                      "markdown": "`  {{- end -}}\n\n  {{- $requiredPassword := dict \"valueKey\" $providedPasswordKey \"secret\" .secret \"field\" .key \"subchart\" $subchart \"context\" $.context -}}\n  {{- $requiredPasswordError := include \"common.validations.values.single.empty\" $requiredPassword -}}\n  {{- $passwordValidationErrors := list $requiredPasswordError -}}\n  {{- include \"common.errors.upgrade.passwords.empty\" (dict \"validationErrors\" $passwordValidationErrors \"context\" $.context) -}}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_secrets.tpl"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 52,
                  "endLine": 108,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    {{- $subchart = $chartName }}\n  {{- end -}}\n\n  {{- $requiredPassword := dict \"valueKey\" $providedPasswordKey \"secret\" .secret \"field\" .key \"subchart\" $subchart \"context\" $.context -}}\n  {{- $requiredPasswordError := include \"common.validations.values.single.empty\" $requiredPassword -}}\n  {{- $passwordValidationErrors := list $requiredPasswordError -}}\n  {{- include \"common.errors.upgrade.passwords.empty\" (dict \"validationErrors\" $passwordValidationErrors \"context\" $.context) -}}\n",
                    "rendered": {
                      "text": "    {{- $subchart = $chartName }}\n  {{- end -}}\n\n  {{- $requiredPassword := dict \"valueKey\" $providedPasswordKey \"secret\" .secret \"field\" .key \"subchart\" $subchart \"context\" $.context -}}\n  {{- $requiredPasswordError := include \"common.validations.values.single.empty\" $requiredPassword -}}\n  {{- $passwordValidationErrors := list $requiredPasswordError -}}\n  {{- include \"common.errors.upgrade.passwords.empty\" (dict \"validationErrors\" $passwordValidationErrors \"context\" $.context) -}}\n",
                      "markdown": "`    {{- $subchart = $chartName }}\n  {{- end -}}\n\n  {{- $requiredPassword := dict \"valueKey\" $providedPasswordKey \"secret\" .secret \"field\" .key \"subchart\" $subchart \"context\" $.context -}}\n  {{- $requiredPasswordError := include \"common.validations.values.single.empty\" $requiredPassword -}}\n  {{- $passwordValidationErrors := list $requiredPasswordError -}}\n  {{- include \"common.errors.upgrade.passwords.empty\" (dict \"validationErrors\" $passwordValidationErrors \"context\" $.context) -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_secrets.tpl"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 15,
                  "endLine": 108,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    {{- $subchart = $chartName }}\n  {{- end -}}\n\n  {{- $requiredPassword := dict \"valueKey\" $providedPasswordKey \"secret\" .secret \"field\" .key \"subchart\" $subchart \"context\" $.context -}}\n  {{- $requiredPasswordError := include \"common.validations.values.single.empty\" $requiredPassword -}}\n  {{- $passwordValidationErrors := list $requiredPasswordError -}}\n  {{- include \"common.errors.upgrade.passwords.empty\" (dict \"validationErrors\" $passwordValidationErrors \"context\" $.context) -}}\n",
                    "rendered": {
                      "text": "    {{- $subchart = $chartName }}\n  {{- end -}}\n\n  {{- $requiredPassword := dict \"valueKey\" $providedPasswordKey \"secret\" .secret \"field\" .key \"subchart\" $subchart \"context\" $.context -}}\n  {{- $requiredPasswordError := include \"common.validations.values.single.empty\" $requiredPassword -}}\n  {{- $passwordValidationErrors := list $requiredPasswordError -}}\n  {{- include \"common.errors.upgrade.passwords.empty\" (dict \"validationErrors\" $passwordValidationErrors \"context\" $.context) -}}\n",
                      "markdown": "`    {{- $subchart = $chartName }}\n  {{- end -}}\n\n  {{- $requiredPassword := dict \"valueKey\" $providedPasswordKey \"secret\" .secret \"field\" .key \"subchart\" $subchart \"context\" $.context -}}\n  {{- $requiredPasswordError := include \"common.validations.values.single.empty\" $requiredPassword -}}\n  {{- $passwordValidationErrors := list $requiredPasswordError -}}\n  {{- include \"common.errors.upgrade.passwords.empty\" (dict \"validationErrors\" $passwordValidationErrors \"context\" $.context) -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_secrets.tpl"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 27,
                  "endLine": 101,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    {{- printf \"\\nPASSWORDS ERROR: The secret \\\"%s\\\" does not contain the key \\\"%s\\\"\\n\" .secret .key | fail -}}\n  {{- end -}}\n{{- else if $providedPasswordValue }}\n  {{- $password = $providedPasswordValue | toString | b64enc | quote }}\n{{- else }}\n\n  {{- if .context.Values.enabled }}\n",
                    "rendered": {
                      "text": "    {{- printf \"\\nPASSWORDS ERROR: The secret \\\"%s\\\" does not contain the key \\\"%s\\\"\\n\" .secret .key | fail -}}\n  {{- end -}}\n{{- else if $providedPasswordValue }}\n  {{- $password = $providedPasswordValue | toString | b64enc | quote }}\n{{- else }}\n\n  {{- if .context.Values.enabled }}\n",
                      "markdown": "`    {{- printf \"\\nPASSWORDS ERROR: The secret \\\"%s\\\" does not contain the key \\\"%s\\\"\\n\" .secret .key | fail -}}\n  {{- end -}}\n{{- else if $providedPasswordValue }}\n  {{- $password = $providedPasswordValue | toString | b64enc | quote }}\n{{- else }}\n\n  {{- if .context.Values.enabled }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_secrets.tpl"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 7,
                  "endLine": 101,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    {{- printf \"\\nPASSWORDS ERROR: The secret \\\"%s\\\" does not contain the key \\\"%s\\\"\\n\" .secret .key | fail -}}\n  {{- end -}}\n{{- else if $providedPasswordValue }}\n  {{- $password = $providedPasswordValue | toString | b64enc | quote }}\n{{- else }}\n\n  {{- if .context.Values.enabled }}\n",
                    "rendered": {
                      "text": "    {{- printf \"\\nPASSWORDS ERROR: The secret \\\"%s\\\" does not contain the key \\\"%s\\\"\\n\" .secret .key | fail -}}\n  {{- end -}}\n{{- else if $providedPasswordValue }}\n  {{- $password = $providedPasswordValue | toString | b64enc | quote }}\n{{- else }}\n\n  {{- if .context.Values.enabled }}\n",
                      "markdown": "`    {{- printf \"\\nPASSWORDS ERROR: The secret \\\"%s\\\" does not contain the key \\\"%s\\\"\\n\" .secret .key | fail -}}\n  {{- end -}}\n{{- else if $providedPasswordValue }}\n  {{- $password = $providedPasswordValue | toString | b64enc | quote }}\n{{- else }}\n\n  {{- if .context.Values.enabled }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_secrets.tpl"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 21,
                  "endLine": 100,
                  "endColumn": 29,
                  "snippet": {
                    "text": "  {{- else }}\n    {{- printf \"\\nPASSWORDS ERROR: The secret \\\"%s\\\" does not contain the key \\\"%s\\\"\\n\" .secret .key | fail -}}\n  {{- end -}}\n{{- else if $providedPasswordValue }}\n  {{- $password = $providedPasswordValue | toString | b64enc | quote }}\n{{- else }}\n\n",
                    "rendered": {
                      "text": "  {{- else }}\n    {{- printf \"\\nPASSWORDS ERROR: The secret \\\"%s\\\" does not contain the key \\\"%s\\\"\\n\" .secret .key | fail -}}\n  {{- end -}}\n{{- else if $providedPasswordValue }}\n  {{- $password = $providedPasswordValue | toString | b64enc | quote }}\n{{- else }}\n\n",
                      "markdown": "`  {{- else }}\n    {{- printf \"\\nPASSWORDS ERROR: The secret \\\"%s\\\" does not contain the key \\\"%s\\\"\\n\" .secret .key | fail -}}\n  {{- end -}}\n{{- else if $providedPasswordValue }}\n  {{- $password = $providedPasswordValue | toString | b64enc | quote }}\n{{- else }}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_secrets.tpl"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 18,
                  "endLine": 98,
                  "endColumn": 26,
                  "snippet": {
                    "text": "  {{- if hasKey $secretData .key }}\n    {{- $password = index $secretData .key }}\n  {{- else }}\n    {{- printf \"\\nPASSWORDS ERROR: The secret \\\"%s\\\" does not contain the key \\\"%s\\\"\\n\" .secret .key | fail -}}\n  {{- end -}}\n{{- else if $providedPasswordValue }}\n  {{- $password = $providedPasswordValue | toString | b64enc | quote }}\n",
                    "rendered": {
                      "text": "  {{- if hasKey $secretData .key }}\n    {{- $password = index $secretData .key }}\n  {{- else }}\n    {{- printf \"\\nPASSWORDS ERROR: The secret \\\"%s\\\" does not contain the key \\\"%s\\\"\\n\" .secret .key | fail -}}\n  {{- end -}}\n{{- else if $providedPasswordValue }}\n  {{- $password = $providedPasswordValue | toString | b64enc | quote }}\n",
                      "markdown": "`  {{- if hasKey $secretData .key }}\n    {{- $password = index $secretData .key }}\n  {{- else }}\n    {{- printf \"\\nPASSWORDS ERROR: The secret \\\"%s\\\" does not contain the key \\\"%s\\\"\\n\" .secret .key | fail -}}\n  {{- end -}}\n{{- else if $providedPasswordValue }}\n  {{- $password = $providedPasswordValue | toString | b64enc | quote }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_secrets.tpl"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 9,
                  "endLine": 96,
                  "endColumn": 17,
                  "snippet": {
                    "text": "{{- $secretData := (lookup \"v1\" \"Secret\" $.context.Release.Namespace .secret).data }}\n{{- if $secretData }}\n  {{- if hasKey $secretData .key }}\n    {{- $password = index $secretData .key }}\n  {{- else }}\n    {{- printf \"\\nPASSWORDS ERROR: The secret \\\"%s\\\" does not contain the key \\\"%s\\\"\\n\" .secret .key | fail -}}\n  {{- end -}}\n",
                    "rendered": {
                      "text": "{{- $secretData := (lookup \"v1\" \"Secret\" $.context.Release.Namespace .secret).data }}\n{{- if $secretData }}\n  {{- if hasKey $secretData .key }}\n    {{- $password = index $secretData .key }}\n  {{- else }}\n    {{- printf \"\\nPASSWORDS ERROR: The secret \\\"%s\\\" does not contain the key \\\"%s\\\"\\n\" .secret .key | fail -}}\n  {{- end -}}\n",
                      "markdown": "`{{- $secretData := (lookup \"v1\" \"Secret\" $.context.Release.Namespace .secret).data }}\n{{- if $secretData }}\n  {{- if hasKey $secretData .key }}\n    {{- $password = index $secretData .key }}\n  {{- else }}\n    {{- printf \"\\nPASSWORDS ERROR: The secret \\\"%s\\\" does not contain the key \\\"%s\\\"\\n\" .secret .key | fail -}}\n  {{- end -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_secrets.tpl"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 90,
                  "endLine": 92,
                  "endColumn": 98,
                  "snippet": {
                    "text": "{{- $chartName := default \"\" .chartName }}\n{{- $passwordLength := default 10 .length }}\n{{- $providedPasswordKey := include \"common.utils.getKeyFromList\" (dict \"keys\" .providedValues \"context\" $.context) }}\n{{- $providedPasswordValue := include \"common.utils.getValueFromKey\" (dict \"key\" $providedPasswordKey \"context\" $.context) }}\n{{- $secretData := (lookup \"v1\" \"Secret\" $.context.Release.Namespace .secret).data }}\n{{- if $secretData }}\n  {{- if hasKey $secretData .key }}\n",
                    "rendered": {
                      "text": "{{- $chartName := default \"\" .chartName }}\n{{- $passwordLength := default 10 .length }}\n{{- $providedPasswordKey := include \"common.utils.getKeyFromList\" (dict \"keys\" .providedValues \"context\" $.context) }}\n{{- $providedPasswordValue := include \"common.utils.getValueFromKey\" (dict \"key\" $providedPasswordKey \"context\" $.context) }}\n{{- $secretData := (lookup \"v1\" \"Secret\" $.context.Release.Namespace .secret).data }}\n{{- if $secretData }}\n  {{- if hasKey $secretData .key }}\n",
                      "markdown": "`{{- $chartName := default \"\" .chartName }}\n{{- $passwordLength := default 10 .length }}\n{{- $providedPasswordKey := include \"common.utils.getKeyFromList\" (dict \"keys\" .providedValues \"context\" $.context) }}\n{{- $providedPasswordValue := include \"common.utils.getValueFromKey\" (dict \"key\" $providedPasswordKey \"context\" $.context) }}\n{{- $secretData := (lookup \"v1\" \"Secret\" $.context.Release.Namespace .secret).data }}\n{{- if $secretData }}\n  {{- if hasKey $secretData .key }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_secrets.tpl"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 13,
                  "endLine": 92,
                  "endColumn": 21,
                  "snippet": {
                    "text": "{{- $chartName := default \"\" .chartName }}\n{{- $passwordLength := default 10 .length }}\n{{- $providedPasswordKey := include \"common.utils.getKeyFromList\" (dict \"keys\" .providedValues \"context\" $.context) }}\n{{- $providedPasswordValue := include \"common.utils.getValueFromKey\" (dict \"key\" $providedPasswordKey \"context\" $.context) }}\n{{- $secretData := (lookup \"v1\" \"Secret\" $.context.Release.Namespace .secret).data }}\n{{- if $secretData }}\n  {{- if hasKey $secretData .key }}\n",
                    "rendered": {
                      "text": "{{- $chartName := default \"\" .chartName }}\n{{- $passwordLength := default 10 .length }}\n{{- $providedPasswordKey := include \"common.utils.getKeyFromList\" (dict \"keys\" .providedValues \"context\" $.context) }}\n{{- $providedPasswordValue := include \"common.utils.getValueFromKey\" (dict \"key\" $providedPasswordKey \"context\" $.context) }}\n{{- $secretData := (lookup \"v1\" \"Secret\" $.context.Release.Namespace .secret).data }}\n{{- if $secretData }}\n  {{- if hasKey $secretData .key }}\n",
                      "markdown": "`{{- $chartName := default \"\" .chartName }}\n{{- $passwordLength := default 10 .length }}\n{{- $providedPasswordKey := include \"common.utils.getKeyFromList\" (dict \"keys\" .providedValues \"context\" $.context) }}\n{{- $providedPasswordValue := include \"common.utils.getValueFromKey\" (dict \"key\" $providedPasswordKey \"context\" $.context) }}\n{{- $secretData := (lookup \"v1\" \"Secret\" $.context.Release.Namespace .secret).data }}\n{{- if $secretData }}\n  {{- if hasKey $secretData .key }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_secrets.tpl"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 13,
                  "endLine": 91,
                  "endColumn": 21,
                  "snippet": {
                    "text": "{{- $subchart := \"\" }}\n{{- $chartName := default \"\" .chartName }}\n{{- $passwordLength := default 10 .length }}\n{{- $providedPasswordKey := include \"common.utils.getKeyFromList\" (dict \"keys\" .providedValues \"context\" $.context) }}\n{{- $providedPasswordValue := include \"common.utils.getValueFromKey\" (dict \"key\" $providedPasswordKey \"context\" $.context) }}\n{{- $secretData := (lookup \"v1\" \"Secret\" $.context.Release.Namespace .secret).data }}\n{{- if $secretData }}\n",
                    "rendered": {
                      "text": "{{- $subchart := \"\" }}\n{{- $chartName := default \"\" .chartName }}\n{{- $passwordLength := default 10 .length }}\n{{- $providedPasswordKey := include \"common.utils.getKeyFromList\" (dict \"keys\" .providedValues \"context\" $.context) }}\n{{- $providedPasswordValue := include \"common.utils.getValueFromKey\" (dict \"key\" $providedPasswordKey \"context\" $.context) }}\n{{- $secretData := (lookup \"v1\" \"Secret\" $.context.Release.Namespace .secret).data }}\n{{- if $secretData }}\n",
                      "markdown": "`{{- $subchart := \"\" }}\n{{- $chartName := default \"\" .chartName }}\n{{- $passwordLength := default 10 .length }}\n{{- $providedPasswordKey := include \"common.utils.getKeyFromList\" (dict \"keys\" .providedValues \"context\" $.context) }}\n{{- $providedPasswordValue := include \"common.utils.getValueFromKey\" (dict \"key\" $providedPasswordKey \"context\" $.context) }}\n{{- $secretData := (lookup \"v1\" \"Secret\" $.context.Release.Namespace .secret).data }}\n{{- if $secretData }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_secrets.tpl"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 5,
                  "endLine": 90,
                  "endColumn": 13,
                  "snippet": {
                    "text": "{{- $password := \"\" }}\n{{- $subchart := \"\" }}\n{{- $chartName := default \"\" .chartName }}\n{{- $passwordLength := default 10 .length }}\n{{- $providedPasswordKey := include \"common.utils.getKeyFromList\" (dict \"keys\" .providedValues \"context\" $.context) }}\n{{- $providedPasswordValue := include \"common.utils.getValueFromKey\" (dict \"key\" $providedPasswordKey \"context\" $.context) }}\n{{- $secretData := (lookup \"v1\" \"Secret\" $.context.Release.Namespace .secret).data }}\n",
                    "rendered": {
                      "text": "{{- $password := \"\" }}\n{{- $subchart := \"\" }}\n{{- $chartName := default \"\" .chartName }}\n{{- $passwordLength := default 10 .length }}\n{{- $providedPasswordKey := include \"common.utils.getKeyFromList\" (dict \"keys\" .providedValues \"context\" $.context) }}\n{{- $providedPasswordValue := include \"common.utils.getValueFromKey\" (dict \"key\" $providedPasswordKey \"context\" $.context) }}\n{{- $secretData := (lookup \"v1\" \"Secret\" $.context.Release.Namespace .secret).data }}\n",
                      "markdown": "`{{- $password := \"\" }}\n{{- $subchart := \"\" }}\n{{- $chartName := default \"\" .chartName }}\n{{- $passwordLength := default 10 .length }}\n{{- $providedPasswordKey := include \"common.utils.getKeyFromList\" (dict \"keys\" .providedValues \"context\" $.context) }}\n{{- $providedPasswordValue := include \"common.utils.getValueFromKey\" (dict \"key\" $providedPasswordKey \"context\" $.context) }}\n{{- $secretData := (lookup \"v1\" \"Secret\" $.context.Release.Namespace .secret).data }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_secrets.tpl"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 5,
                  "endLine": 87,
                  "endColumn": 13,
                  "snippet": {
                    "text": "*/}}\n{{- define \"common.secrets.passwords.manage\" -}}\n\n{{- $password := \"\" }}\n{{- $subchart := \"\" }}\n{{- $chartName := default \"\" .chartName }}\n{{- $passwordLength := default 10 .length }}\n",
                    "rendered": {
                      "text": "*/}}\n{{- define \"common.secrets.passwords.manage\" -}}\n\n{{- $password := \"\" }}\n{{- $subchart := \"\" }}\n{{- $chartName := default \"\" .chartName }}\n{{- $passwordLength := default 10 .length }}\n",
                      "markdown": "`*/}}\n{{- define \"common.secrets.passwords.manage\" -}}\n\n{{- $password := \"\" }}\n{{- $subchart := \"\" }}\n{{- $chartName := default \"\" .chartName }}\n{{- $passwordLength := default 10 .length }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_secrets.tpl"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 27,
                  "endLine": 85,
                  "endColumn": 35,
                  "snippet": {
                    "text": "     (A new random secret password with the length specified in the 'length' parameter will be generated and returned)\n\n*/}}\n{{- define \"common.secrets.passwords.manage\" -}}\n\n{{- $password := \"\" }}\n{{- $subchart := \"\" }}\n",
                    "rendered": {
                      "text": "     (A new random secret password with the length specified in the 'length' parameter will be generated and returned)\n\n*/}}\n{{- define \"common.secrets.passwords.manage\" -}}\n\n{{- $password := \"\" }}\n{{- $subchart := \"\" }}\n",
                      "markdown": "`     (A new random secret password with the length specified in the 'length' parameter will be generated and returned)\n\n*/}}\n{{- define \"common.secrets.passwords.manage\" -}}\n\n{{- $password := \"\" }}\n{{- $subchart := \"\" }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_secrets.tpl"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 26,
                  "endLine": 82,
                  "endColumn": 34,
                  "snippet": {
                    "text": "  2. Password provided via the values.yaml\n     (If one of the keys passed to the 'providedValues' parameter to this function is a valid path to a key in the values.yaml and has a value, the value of the first key with a value will be returned)\n  3. Randomly generated secret password\n     (A new random secret password with the length specified in the 'length' parameter will be generated and returned)\n\n*/}}\n{{- define \"common.secrets.passwords.manage\" -}}\n",
                    "rendered": {
                      "text": "  2. Password provided via the values.yaml\n     (If one of the keys passed to the 'providedValues' parameter to this function is a valid path to a key in the values.yaml and has a value, the value of the first key with a value will be returned)\n  3. Randomly generated secret password\n     (A new random secret password with the length specified in the 'length' parameter will be generated and returned)\n\n*/}}\n{{- define \"common.secrets.passwords.manage\" -}}\n",
                      "markdown": "`  2. Password provided via the values.yaml\n     (If one of the keys passed to the 'providedValues' parameter to this function is a valid path to a key in the values.yaml and has a value, the value of the first key with a value will be returned)\n  3. Randomly generated secret password\n     (A new random secret password with the length specified in the 'length' parameter will be generated and returned)\n\n*/}}\n{{- define \"common.secrets.passwords.manage\" -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_secrets.tpl"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 31,
                  "endLine": 81,
                  "endColumn": 39,
                  "snippet": {
                    "text": "sword will be returned)\n  2. Password provided via the values.yaml\n     (If one of the keys passed to the 'providedValues' parameter to this function is a valid path to a key in the values.yaml and has a value, the value of the first key with a value will be returned)\n  3. Randomly generated secret password\n     (A new random secret password with the length specified in the 'length' parameter will be generated and returned)\n\n*/}}\n{{- define \"common.secrets.passwords.manage\" -}}\n\n{{- $password := \"\" }}\n{{- $subchart := \"\" }}\n{{- $chartName := default \"\" .chartName }}\n{{- $passwordLength := default 10 .",
                    "rendered": {
                      "text": "sword will be returned)\n  2. Password provided via the values.yaml\n     (If one of the keys passed to the 'providedValues' parameter to this function is a valid path to a key in the values.yaml and has a value, the value of the first key with a value will be returned)\n  3. Randomly generated secret password\n     (A new random secret password with the length specified in the 'length' parameter will be generated and returned)\n\n*/}}\n{{- define \"common.secrets.passwords.manage\" -}}\n\n{{- $password := \"\" }}\n{{- $subchart := \"\" }}\n{{- $chartName := default \"\" .chartName }}\n{{- $passwordLength := default 10 .",
                      "markdown": "`sword will be returned)\n  2. Password provided via the values.yaml\n     (If one of the keys passed to the 'providedValues' parameter to this function is a valid path to a key in the values.yaml and has a value, the value of the first key with a value will be returned)\n  3. Randomly generated secret password\n     (A new random secret password with the length specified in the 'length' parameter will be generated and returned)\n\n*/}}\n{{- define \"common.secrets.passwords.manage\" -}}\n\n{{- $password := \"\" }}\n{{- $subchart := \"\" }}\n{{- $chartName := default \"\" .chartName }}\n{{- $passwordLength := default 10 .`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_secrets.tpl"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 5,
                  "endLine": 79,
                  "endColumn": 13,
                  "snippet": {
                    "text": "ng 'Secret' resource\n     (If a 'Secret' resource is found under the name provided to the 'secret' parameter to this function and that 'Secret' resource contains a key with the name passed as the 'key' parameter to this function then the value of this existing secret password will be returned)\n  2. Password provided via the values.yaml\n     (If one of the keys passed to the 'providedValues' parameter to this function is a valid path to a key in the values.yaml and has a value, the value of the first key with a value will be returned)\n  3. Randomly generated secret password\n     (A new random secret pa",
                    "rendered": {
                      "text": "ng 'Secret' resource\n     (If a 'Secret' resource is found under the name provided to the 'secret' parameter to this function and that 'Secret' resource contains a key with the name passed as the 'key' parameter to this function then the value of this existing secret password will be returned)\n  2. Password provided via the values.yaml\n     (If one of the keys passed to the 'providedValues' parameter to this function is a valid path to a key in the values.yaml and has a value, the value of the first key with a value will be returned)\n  3. Randomly generated secret password\n     (A new random secret pa",
                      "markdown": "`ng 'Secret' resource\n     (If a 'Secret' resource is found under the name provided to the 'secret' parameter to this function and that 'Secret' resource contains a key with the name passed as the 'key' parameter to this function then the value of this existing secret password will be returned)\n  2. Password provided via the values.yaml\n     (If one of the keys passed to the 'providedValues' parameter to this function is a valid path to a key in the values.yaml and has a value, the value of the first key with a value will be returned)\n  3. Randomly generated secret password\n     (A new random secret pa`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_secrets.tpl"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 247,
                  "endLine": 78,
                  "endColumn": 255,
                  "snippet": {
                    "text": "et password:\n  1. Already existing 'Secret' resource\n     (If a 'Secret' resource is found under the name provided to the 'secret' parameter to this function and that 'Secret' resource contains a key with the name passed as the 'key' parameter to this function then the value of this existing secret password will be returned)\n  2. Password provided via the values.yaml\n     (If one of the keys passed to the 'providedValues' parameter to this function is a valid path to a key in the values.yaml and has a value, the value of the first key with a value will be returned)\n  3. Randomly generated secret passw",
                    "rendered": {
                      "text": "et password:\n  1. Already existing 'Secret' resource\n     (If a 'Secret' resource is found under the name provided to the 'secret' parameter to this function and that 'Secret' resource contains a key with the name passed as the 'key' parameter to this function then the value of this existing secret password will be returned)\n  2. Password provided via the values.yaml\n     (If one of the keys passed to the 'providedValues' parameter to this function is a valid path to a key in the values.yaml and has a value, the value of the first key with a value will be returned)\n  3. Randomly generated secret passw",
                      "markdown": "`et password:\n  1. Already existing 'Secret' resource\n     (If a 'Secret' resource is found under the name provided to the 'secret' parameter to this function and that 'Secret' resource contains a key with the name passed as the 'key' parameter to this function then the value of this existing secret password will be returned)\n  2. Password provided via the values.yaml\n     (If one of the keys passed to the 'providedValues' parameter to this function is a valid path to a key in the values.yaml and has a value, the value of the first key with a value will be returned)\n  3. Randomly generated secret passw`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_secrets.tpl"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 50,
                  "endLine": 76,
                  "endColumn": 58,
                  "snippet": {
                    "text": "  - chartName - String - Optional - Name of the chart used when said chart is deployed as a subchart.\n  - context - Context - Required - Parent context.\n\nThe order in which this function returns a secret password:\n  1. Already existing 'Secret' resource\n     (If a 'Secret' resource is found under the name provided to the 'secret' parameter to this function and that 'Secret' resource contains a key with the name passed as the 'key' parameter to this function then the value of this existing secret password will be returned)\n  2. Password provided via the values.yaml\n",
                    "rendered": {
                      "text": "  - chartName - String - Optional - Name of the chart used when said chart is deployed as a subchart.\n  - context - Context - Required - Parent context.\n\nThe order in which this function returns a secret password:\n  1. Already existing 'Secret' resource\n     (If a 'Secret' resource is found under the name provided to the 'secret' parameter to this function and that 'Secret' resource contains a key with the name passed as the 'key' parameter to this function then the value of this existing secret password will be returned)\n  2. Password provided via the values.yaml\n",
                      "markdown": "`  - chartName - String - Optional - Name of the chart used when said chart is deployed as a subchart.\n  - context - Context - Required - Parent context.\n\nThe order in which this function returns a secret password:\n  1. Already existing 'Secret' resource\n     (If a 'Secret' resource is found under the name provided to the 'secret' parameter to this function and that 'Secret' resource contains a key with the name passed as the 'key' parameter to this function then the value of this existing secret password will be returned)\n  2. Password provided via the values.yaml\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_secrets.tpl"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 81,
                  "endLine": 72,
                  "endColumn": 89,
                  "snippet": {
                    "text": "  - key - String - Required - Name of the key in the secret.\n  - providedValues - List<String> - Required - The path to the validating value in the values.yaml, e.g: \"mysql.password\". Will pick first parameter with a defined value.\n  - length - int - Optional - Length of the generated random password.\n  - strong - Boolean - Optional - Whether to add symbols to the generated random password.\n  - chartName - String - Optional - Name of the chart used when said chart is deployed as a subchart.\n  - context - Context - Required - Parent context.\n\n",
                    "rendered": {
                      "text": "  - key - String - Required - Name of the key in the secret.\n  - providedValues - List<String> - Required - The path to the validating value in the values.yaml, e.g: \"mysql.password\". Will pick first parameter with a defined value.\n  - length - int - Optional - Length of the generated random password.\n  - strong - Boolean - Optional - Whether to add symbols to the generated random password.\n  - chartName - String - Optional - Name of the chart used when said chart is deployed as a subchart.\n  - context - Context - Required - Parent context.\n\n",
                      "markdown": "`  - key - String - Required - Name of the key in the secret.\n  - providedValues - List<String> - Required - The path to the validating value in the values.yaml, e.g: \"mysql.password\". Will pick first parameter with a defined value.\n  - length - int - Optional - Length of the generated random password.\n  - strong - Boolean - Optional - Whether to add symbols to the generated random password.\n  - chartName - String - Optional - Name of the chart used when said chart is deployed as a subchart.\n  - context - Context - Required - Parent context.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_secrets.tpl"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 61,
                  "endLine": 71,
                  "endColumn": 69,
                  "snippet": {
                    "text": "tored.\n  - key - String - Required - Name of the key in the secret.\n  - providedValues - List<String> - Required - The path to the validating value in the values.yaml, e.g: \"mysql.password\". Will pick first parameter with a defined value.\n  - length - int - Optional - Length of the generated random password.\n  - strong - Boolean - Optional - Whether to add symbols to the generated random password.\n  - chartName - String - Optional - Name of the chart used when said chart is deployed as a subchart.\n  - context - Context - Required - Parent context.\n\nThe order in which this function returns a secret pas",
                    "rendered": {
                      "text": "tored.\n  - key - String - Required - Name of the key in the secret.\n  - providedValues - List<String> - Required - The path to the validating value in the values.yaml, e.g: \"mysql.password\". Will pick first parameter with a defined value.\n  - length - int - Optional - Length of the generated random password.\n  - strong - Boolean - Optional - Whether to add symbols to the generated random password.\n  - chartName - String - Optional - Name of the chart used when said chart is deployed as a subchart.\n  - context - Context - Required - Parent context.\n\nThe order in which this function returns a secret pas",
                      "markdown": "`tored.\n  - key - String - Required - Name of the key in the secret.\n  - providedValues - List<String> - Required - The path to the validating value in the values.yaml, e.g: \"mysql.password\". Will pick first parameter with a defined value.\n  - length - int - Optional - Length of the generated random password.\n  - strong - Boolean - Optional - Whether to add symbols to the generated random password.\n  - chartName - String - Optional - Name of the chart used when said chart is deployed as a subchart.\n  - context - Context - Required - Parent context.\n\nThe order in which this function returns a secret pas`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_secrets.tpl"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 112,
                  "endLine": 70,
                  "endColumn": 120,
                  "snippet": {
                    "text": "Params:\n  - secret - String - Required - Name of the 'Secret' resource where the password is stored.\n  - key - String - Required - Name of the key in the secret.\n  - providedValues - List<String> - Required - The path to the validating value in the values.yaml, e.g: \"mysql.password\". Will pick first parameter with a defined value.\n  - length - int - Optional - Length of the generated random password.\n  - strong - Boolean - Optional - Whether to add symbols to the generated random password.\n  - chartName - String - Optional - Name of the chart used when said chart is deployed as a subchart.\n",
                    "rendered": {
                      "text": "Params:\n  - secret - String - Required - Name of the 'Secret' resource where the password is stored.\n  - key - String - Required - Name of the key in the secret.\n  - providedValues - List<String> - Required - The path to the validating value in the values.yaml, e.g: \"mysql.password\". Will pick first parameter with a defined value.\n  - length - int - Optional - Length of the generated random password.\n  - strong - Boolean - Optional - Whether to add symbols to the generated random password.\n  - chartName - String - Optional - Name of the chart used when said chart is deployed as a subchart.\n",
                      "markdown": "`Params:\n  - secret - String - Required - Name of the 'Secret' resource where the password is stored.\n  - key - String - Required - Name of the key in the secret.\n  - providedValues - List<String> - Required - The path to the validating value in the values.yaml, e.g: \"mysql.password\". Will pick first parameter with a defined value.\n  - length - int - Optional - Length of the generated random password.\n  - strong - Boolean - Optional - Whether to add symbols to the generated random password.\n  - chartName - String - Optional - Name of the chart used when said chart is deployed as a subchart.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_secrets.tpl"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 73,
                  "endLine": 68,
                  "endColumn": 81,
                  "snippet": {
                    "text": "include \"common.secrets.passwords.manage\" (dict \"secret\" \"secret-name\" \"key\" \"keyName\" \"providedValues\" (list \"path.to.password1\" \"path.to.password2\") \"length\" 10 \"strong\" false \"chartName\" \"chartName\" \"context\" $) }}\n\nParams:\n  - secret - String - Required - Name of the 'Secret' resource where the password is stored.\n  - key - String - Required - Name of the key in the secret.\n  - providedValues - List<String> - Required - The path to the validating value in the values.yaml, e.g: \"mysql.password\". Will pick first parameter with a defined value.\n  - length - int - Optional - Length of the generated ra",
                    "rendered": {
                      "text": "include \"common.secrets.passwords.manage\" (dict \"secret\" \"secret-name\" \"key\" \"keyName\" \"providedValues\" (list \"path.to.password1\" \"path.to.password2\") \"length\" 10 \"strong\" false \"chartName\" \"chartName\" \"context\" $) }}\n\nParams:\n  - secret - String - Required - Name of the 'Secret' resource where the password is stored.\n  - key - String - Required - Name of the key in the secret.\n  - providedValues - List<String> - Required - The path to the validating value in the values.yaml, e.g: \"mysql.password\". Will pick first parameter with a defined value.\n  - length - int - Optional - Length of the generated ra",
                      "markdown": "`include \"common.secrets.passwords.manage\" (dict \"secret\" \"secret-name\" \"key\" \"keyName\" \"providedValues\" (list \"path.to.password1\" \"path.to.password2\") \"length\" 10 \"strong\" false \"chartName\" \"chartName\" \"context\" $) }}\n\nParams:\n  - secret - String - Required - Name of the 'Secret' resource where the password is stored.\n  - key - String - Required - Name of the key in the secret.\n  - providedValues - List<String> - Required - The path to the validating value in the values.yaml, e.g: \"mysql.password\". Will pick first parameter with a defined value.\n  - length - int - Optional - Length of the generated ra`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_secrets.tpl"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 142,
                  "endLine": 65,
                  "endColumn": 150,
                  "snippet": {
                    "text": "Generate secret password or retrieve one if already created.\n\nUsage:\n{{ include \"common.secrets.passwords.manage\" (dict \"secret\" \"secret-name\" \"key\" \"keyName\" \"providedValues\" (list \"path.to.password1\" \"path.to.password2\") \"length\" 10 \"strong\" false \"chartName\" \"chartName\" \"context\" $) }}\n\nParams:\n  - secret - String - Required - Name of the 'Secret' resource where the password is stored.\n",
                    "rendered": {
                      "text": "Generate secret password or retrieve one if already created.\n\nUsage:\n{{ include \"common.secrets.passwords.manage\" (dict \"secret\" \"secret-name\" \"key\" \"keyName\" \"providedValues\" (list \"path.to.password1\" \"path.to.password2\") \"length\" 10 \"strong\" false \"chartName\" \"chartName\" \"context\" $) }}\n\nParams:\n  - secret - String - Required - Name of the 'Secret' resource where the password is stored.\n",
                      "markdown": "`Generate secret password or retrieve one if already created.\n\nUsage:\n{{ include \"common.secrets.passwords.manage\" (dict \"secret\" \"secret-name\" \"key\" \"keyName\" \"providedValues\" (list \"path.to.password1\" \"path.to.password2\") \"length\" 10 \"strong\" false \"chartName\" \"chartName\" \"context\" $) }}\n\nParams:\n  - secret - String - Required - Name of the 'Secret' resource where the password is stored.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_secrets.tpl"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 122,
                  "endLine": 65,
                  "endColumn": 130,
                  "snippet": {
                    "text": "Generate secret password or retrieve one if already created.\n\nUsage:\n{{ include \"common.secrets.passwords.manage\" (dict \"secret\" \"secret-name\" \"key\" \"keyName\" \"providedValues\" (list \"path.to.password1\" \"path.to.password2\") \"length\" 10 \"strong\" false \"chartName\" \"chartName\" \"context\" $) }}\n\nParams:\n  - secret - String - Required - Name of the 'Secret' resource where the password is stored.\n",
                    "rendered": {
                      "text": "Generate secret password or retrieve one if already created.\n\nUsage:\n{{ include \"common.secrets.passwords.manage\" (dict \"secret\" \"secret-name\" \"key\" \"keyName\" \"providedValues\" (list \"path.to.password1\" \"path.to.password2\") \"length\" 10 \"strong\" false \"chartName\" \"chartName\" \"context\" $) }}\n\nParams:\n  - secret - String - Required - Name of the 'Secret' resource where the password is stored.\n",
                      "markdown": "`Generate secret password or retrieve one if already created.\n\nUsage:\n{{ include \"common.secrets.passwords.manage\" (dict \"secret\" \"secret-name\" \"key\" \"keyName\" \"providedValues\" (list \"path.to.password1\" \"path.to.password2\") \"length\" 10 \"strong\" false \"chartName\" \"chartName\" \"context\" $) }}\n\nParams:\n  - secret - String - Required - Name of the 'Secret' resource where the password is stored.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_secrets.tpl"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 27,
                  "endLine": 65,
                  "endColumn": 35,
                  "snippet": {
                    "text": "Generate secret password or retrieve one if already created.\n\nUsage:\n{{ include \"common.secrets.passwords.manage\" (dict \"secret\" \"secret-name\" \"key\" \"keyName\" \"providedValues\" (list \"path.to.password1\" \"path.to.password2\") \"length\" 10 \"strong\" false \"chartName\" \"chartName\" \"context\" $) }}\n\nParams:\n  - secret - String - Required - Name of the 'Secret' resource where the password is stored.\n",
                    "rendered": {
                      "text": "Generate secret password or retrieve one if already created.\n\nUsage:\n{{ include \"common.secrets.passwords.manage\" (dict \"secret\" \"secret-name\" \"key\" \"keyName\" \"providedValues\" (list \"path.to.password1\" \"path.to.password2\") \"length\" 10 \"strong\" false \"chartName\" \"chartName\" \"context\" $) }}\n\nParams:\n  - secret - String - Required - Name of the 'Secret' resource where the password is stored.\n",
                      "markdown": "`Generate secret password or retrieve one if already created.\n\nUsage:\n{{ include \"common.secrets.passwords.manage\" (dict \"secret\" \"secret-name\" \"key\" \"keyName\" \"providedValues\" (list \"path.to.password1\" \"path.to.password2\") \"length\" 10 \"strong\" false \"chartName\" \"chartName\" \"context\" $) }}\n\nParams:\n  - secret - String - Required - Name of the 'Secret' resource where the password is stored.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_secrets.tpl"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 16,
                  "endLine": 62,
                  "endColumn": 24,
                  "snippet": {
                    "text": "{{- end -}}\n\n{{/*\nGenerate secret password or retrieve one if already created.\n\nUsage:\n{{ include \"common.secrets.passwords.manage\" (dict \"secret\" \"secret-name\" \"key\" \"keyName\" \"providedValues\" (list \"path.to.password1\" \"path.to.password2\") \"length\" 10 \"strong\" false \"chartName\" \"chartName\" \"context\" $) }}\n",
                    "rendered": {
                      "text": "{{- end -}}\n\n{{/*\nGenerate secret password or retrieve one if already created.\n\nUsage:\n{{ include \"common.secrets.passwords.manage\" (dict \"secret\" \"secret-name\" \"key\" \"keyName\" \"providedValues\" (list \"path.to.password1\" \"path.to.password2\") \"length\" 10 \"strong\" false \"chartName\" \"chartName\" \"context\" $) }}\n",
                      "markdown": "`{{- end -}}\n\n{{/*\nGenerate secret password or retrieve one if already created.\n\nUsage:\n{{ include \"common.secrets.passwords.manage\" (dict \"secret\" \"secret-name\" \"key\" \"keyName\" \"providedValues\" (list \"path.to.password1\" \"path.to.password2\") \"length\" 10 \"strong\" false \"chartName\" \"chartName\" \"context\" $) }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_affinities.tpl"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 31,
                  "endLine": 89,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        {{- end }}\n    namespaces:\n      - {{ .context.Release.Namespace | quote }}\n    topologyKey: kubernetes.io/hostname\n{{- end -}}\n\n{{/*\n",
                    "rendered": {
                      "text": "        {{- end }}\n    namespaces:\n      - {{ .context.Release.Namespace | quote }}\n    topologyKey: kubernetes.io/hostname\n{{- end -}}\n\n{{/*\n",
                      "markdown": "`        {{- end }}\n    namespaces:\n      - {{ .context.Release.Namespace | quote }}\n    topologyKey: kubernetes.io/hostname\n{{- end -}}\n\n{{/*\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_affinities.tpl"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 33,
                  "endLine": 67,
                  "endColumn": 41,
                  "snippet": {
                    "text": "          {{- end }}\n      namespaces:\n        - {{ .context.Release.Namespace | quote }}\n      topologyKey: kubernetes.io/hostname\n    weight: 1\n{{- end -}}\n\n",
                    "rendered": {
                      "text": "          {{- end }}\n      namespaces:\n        - {{ .context.Release.Namespace | quote }}\n      topologyKey: kubernetes.io/hostname\n    weight: 1\n{{- end -}}\n\n",
                      "markdown": "`          {{- end }}\n      namespaces:\n        - {{ .context.Release.Namespace | quote }}\n      topologyKey: kubernetes.io/hostname\n    weight: 1\n{{- end -}}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_errors.tpl"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 74,
                  "endLine": 17,
                  "endColumn": 82,
                  "snippet": {
                    "text": " context - Context - Required. Parent context.\n*/}}\n{{- define \"common.errors.upgrade.passwords.empty\" -}}\n  {{- $validationErrors := join \"\" .validationErrors -}}\n  {{- if and $validationErrors .context.Release.IsUpgrade -}}\n    {{- $errorString := \"\\nPASSWORDS ERROR: You must provide your current passwords when upgrading the release.\" -}}\n    {{- $errorString = print $errorString \"\\n                 Note that even after reinstallation, old credentials may be needed as they may be kept in persistent volume claims.\" -}}\n    {{- $errorString = print $errorString \"\\n                 Further information ",
                    "rendered": {
                      "text": " context - Context - Required. Parent context.\n*/}}\n{{- define \"common.errors.upgrade.passwords.empty\" -}}\n  {{- $validationErrors := join \"\" .validationErrors -}}\n  {{- if and $validationErrors .context.Release.IsUpgrade -}}\n    {{- $errorString := \"\\nPASSWORDS ERROR: You must provide your current passwords when upgrading the release.\" -}}\n    {{- $errorString = print $errorString \"\\n                 Note that even after reinstallation, old credentials may be needed as they may be kept in persistent volume claims.\" -}}\n    {{- $errorString = print $errorString \"\\n                 Further information ",
                      "markdown": "` context - Context - Required. Parent context.\n*/}}\n{{- define \"common.errors.upgrade.passwords.empty\" -}}\n  {{- $validationErrors := join \"\" .validationErrors -}}\n  {{- if and $validationErrors .context.Release.IsUpgrade -}}\n    {{- $errorString := \"\\nPASSWORDS ERROR: You must provide your current passwords when upgrading the release.\" -}}\n    {{- $errorString = print $errorString \"\\n                 Note that even after reinstallation, old credentials may be needed as they may be kept in persistent volume claims.\" -}}\n    {{- $errorString = print $errorString \"\\n                 Further information `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_errors.tpl"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 27,
                  "endLine": 17,
                  "endColumn": 35,
                  "snippet": {
                    "text": "eturn, if it is empty it won't throw error.\n  - context - Context - Required. Parent context.\n*/}}\n{{- define \"common.errors.upgrade.passwords.empty\" -}}\n  {{- $validationErrors := join \"\" .validationErrors -}}\n  {{- if and $validationErrors .context.Release.IsUpgrade -}}\n    {{- $errorString := \"\\nPASSWORDS ERROR: You must provide your current passwords when upgrading the release.\" -}}\n    {{- $errorString = print $errorString \"\\n                 Note that even after reinstallation, old credentials may be needed as they may be kept in persistent volume claims.\" -}}\n    {{- $errorString = print $error",
                    "rendered": {
                      "text": "eturn, if it is empty it won't throw error.\n  - context - Context - Required. Parent context.\n*/}}\n{{- define \"common.errors.upgrade.passwords.empty\" -}}\n  {{- $validationErrors := join \"\" .validationErrors -}}\n  {{- if and $validationErrors .context.Release.IsUpgrade -}}\n    {{- $errorString := \"\\nPASSWORDS ERROR: You must provide your current passwords when upgrading the release.\" -}}\n    {{- $errorString = print $errorString \"\\n                 Note that even after reinstallation, old credentials may be needed as they may be kept in persistent volume claims.\" -}}\n    {{- $errorString = print $error",
                      "markdown": "`eturn, if it is empty it won't throw error.\n  - context - Context - Required. Parent context.\n*/}}\n{{- define \"common.errors.upgrade.passwords.empty\" -}}\n  {{- $validationErrors := join \"\" .validationErrors -}}\n  {{- if and $validationErrors .context.Release.IsUpgrade -}}\n    {{- $errorString := \"\\nPASSWORDS ERROR: You must provide your current passwords when upgrading the release.\" -}}\n    {{- $errorString = print $errorString \"\\n                 Note that even after reinstallation, old credentials may be needed as they may be kept in persistent volume claims.\" -}}\n    {{- $errorString = print $error`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_errors.tpl"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 34,
                  "endLine": 14,
                  "endColumn": 42,
                  "snippet": {
                    "text": "  - validationErrors - String - Required. List of validation strings to be return, if it is empty it won't throw error.\n  - context - Context - Required. Parent context.\n*/}}\n{{- define \"common.errors.upgrade.passwords.empty\" -}}\n  {{- $validationErrors := join \"\" .validationErrors -}}\n  {{- if and $validationErrors .context.Release.IsUpgrade -}}\n    {{- $errorString := \"\\nPASSWORDS ERROR: You must provide your current passwords when upgrading the release.\" -}}\n",
                    "rendered": {
                      "text": "  - validationErrors - String - Required. List of validation strings to be return, if it is empty it won't throw error.\n  - context - Context - Required. Parent context.\n*/}}\n{{- define \"common.errors.upgrade.passwords.empty\" -}}\n  {{- $validationErrors := join \"\" .validationErrors -}}\n  {{- if and $validationErrors .context.Release.IsUpgrade -}}\n    {{- $errorString := \"\\nPASSWORDS ERROR: You must provide your current passwords when upgrading the release.\" -}}\n",
                      "markdown": "`  - validationErrors - String - Required. List of validation strings to be return, if it is empty it won't throw error.\n  - context - Context - Required. Parent context.\n*/}}\n{{- define \"common.errors.upgrade.passwords.empty\" -}}\n  {{- $validationErrors := join \"\" .validationErrors -}}\n  {{- if and $validationErrors .context.Release.IsUpgrade -}}\n    {{- $errorString := \"\\nPASSWORDS ERROR: You must provide your current passwords when upgrading the release.\" -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_errors.tpl"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 9,
                  "endLine": 10,
                  "endColumn": 17,
                  "snippet": {
                    "text": "{{- $validationError01 := include \"common.validations.values.single.empty\" (dict \"valueKey\" \"path.to.password01\" \"secret\" \"secretName\" \"field\" \"password-01\") -}}\n{{ include \"common.errors.upgrade.passwords.empty\" (dict \"validationErrors\" (list $validationError00 $validationError01) \"context\" $) }}\n\nRequired password params:\n  - validationErrors - String - Required. List of validation strings to be return, if it is empty it won't throw error.\n  - context - Context - Required. Parent context.\n*/}}\n",
                    "rendered": {
                      "text": "{{- $validationError01 := include \"common.validations.values.single.empty\" (dict \"valueKey\" \"path.to.password01\" \"secret\" \"secretName\" \"field\" \"password-01\") -}}\n{{ include \"common.errors.upgrade.passwords.empty\" (dict \"validationErrors\" (list $validationError00 $validationError01) \"context\" $) }}\n\nRequired password params:\n  - validationErrors - String - Required. List of validation strings to be return, if it is empty it won't throw error.\n  - context - Context - Required. Parent context.\n*/}}\n",
                      "markdown": "`{{- $validationError01 := include \"common.validations.values.single.empty\" (dict \"valueKey\" \"path.to.password01\" \"secret\" \"secretName\" \"field\" \"password-01\") -}}\n{{ include \"common.errors.upgrade.passwords.empty\" (dict \"validationErrors\" (list $validationError00 $validationError01) \"context\" $) }}\n\nRequired password params:\n  - validationErrors - String - Required. List of validation strings to be return, if it is empty it won't throw error.\n  - context - Context - Required. Parent context.\n*/}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_errors.tpl"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 34,
                  "endLine": 8,
                  "endColumn": 42,
                  "snippet": {
                    "text": "es.single.empty\" (dict \"valueKey\" \"path.to.password00\" \"secret\" \"secretName\" \"field\" \"password-00\") -}}\n{{- $validationError01 := include \"common.validations.values.single.empty\" (dict \"valueKey\" \"path.to.password01\" \"secret\" \"secretName\" \"field\" \"password-01\") -}}\n{{ include \"common.errors.upgrade.passwords.empty\" (dict \"validationErrors\" (list $validationError00 $validationError01) \"context\" $) }}\n\nRequired password params:\n  - validationErrors - String - Required. List of validation strings to be return, if it is empty it won't throw error.\n  - context - Context - Required. Parent context.\n*/}}\n{{-",
                    "rendered": {
                      "text": "es.single.empty\" (dict \"valueKey\" \"path.to.password00\" \"secret\" \"secretName\" \"field\" \"password-00\") -}}\n{{- $validationError01 := include \"common.validations.values.single.empty\" (dict \"valueKey\" \"path.to.password01\" \"secret\" \"secretName\" \"field\" \"password-01\") -}}\n{{ include \"common.errors.upgrade.passwords.empty\" (dict \"validationErrors\" (list $validationError00 $validationError01) \"context\" $) }}\n\nRequired password params:\n  - validationErrors - String - Required. List of validation strings to be return, if it is empty it won't throw error.\n  - context - Context - Required. Parent context.\n*/}}\n{{-",
                      "markdown": "`es.single.empty\" (dict \"valueKey\" \"path.to.password00\" \"secret\" \"secretName\" \"field\" \"password-00\") -}}\n{{- $validationError01 := include \"common.validations.values.single.empty\" (dict \"valueKey\" \"path.to.password01\" \"secret\" \"secretName\" \"field\" \"password-01\") -}}\n{{ include \"common.errors.upgrade.passwords.empty\" (dict \"validationErrors\" (list $validationError00 $validationError01) \"context\" $) }}\n\nRequired password params:\n  - validationErrors - String - Required. List of validation strings to be return, if it is empty it won't throw error.\n  - context - Context - Required. Parent context.\n*/}}\n{{-`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_errors.tpl"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 144,
                  "endLine": 7,
                  "endColumn": 152,
                  "snippet": {
                    "text": "\nUsage:\n{{- $validationError00 := include \"common.validations.values.single.empty\" (dict \"valueKey\" \"path.to.password00\" \"secret\" \"secretName\" \"field\" \"password-00\") -}}\n{{- $validationError01 := include \"common.validations.values.single.empty\" (dict \"valueKey\" \"path.to.password01\" \"secret\" \"secretName\" \"field\" \"password-01\") -}}\n{{ include \"common.errors.upgrade.passwords.empty\" (dict \"validationErrors\" (list $validationError00 $validationError01) \"context\" $) }}\n\nRequired password params:\n",
                    "rendered": {
                      "text": "\nUsage:\n{{- $validationError00 := include \"common.validations.values.single.empty\" (dict \"valueKey\" \"path.to.password00\" \"secret\" \"secretName\" \"field\" \"password-00\") -}}\n{{- $validationError01 := include \"common.validations.values.single.empty\" (dict \"valueKey\" \"path.to.password01\" \"secret\" \"secretName\" \"field\" \"password-01\") -}}\n{{ include \"common.errors.upgrade.passwords.empty\" (dict \"validationErrors\" (list $validationError00 $validationError01) \"context\" $) }}\n\nRequired password params:\n",
                      "markdown": "`\nUsage:\n{{- $validationError00 := include \"common.validations.values.single.empty\" (dict \"valueKey\" \"path.to.password00\" \"secret\" \"secretName\" \"field\" \"password-00\") -}}\n{{- $validationError01 := include \"common.validations.values.single.empty\" (dict \"valueKey\" \"path.to.password01\" \"secret\" \"secretName\" \"field\" \"password-01\") -}}\n{{ include \"common.errors.upgrade.passwords.empty\" (dict \"validationErrors\" (list $validationError00 $validationError01) \"context\" $) }}\n\nRequired password params:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_errors.tpl"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 101,
                  "endLine": 7,
                  "endColumn": 109,
                  "snippet": {
                    "text": "\nUsage:\n{{- $validationError00 := include \"common.validations.values.single.empty\" (dict \"valueKey\" \"path.to.password00\" \"secret\" \"secretName\" \"field\" \"password-00\") -}}\n{{- $validationError01 := include \"common.validations.values.single.empty\" (dict \"valueKey\" \"path.to.password01\" \"secret\" \"secretName\" \"field\" \"password-01\") -}}\n{{ include \"common.errors.upgrade.passwords.empty\" (dict \"validationErrors\" (list $validationError00 $validationError01) \"context\" $) }}\n\nRequired password params:\n",
                    "rendered": {
                      "text": "\nUsage:\n{{- $validationError00 := include \"common.validations.values.single.empty\" (dict \"valueKey\" \"path.to.password00\" \"secret\" \"secretName\" \"field\" \"password-00\") -}}\n{{- $validationError01 := include \"common.validations.values.single.empty\" (dict \"valueKey\" \"path.to.password01\" \"secret\" \"secretName\" \"field\" \"password-01\") -}}\n{{ include \"common.errors.upgrade.passwords.empty\" (dict \"validationErrors\" (list $validationError00 $validationError01) \"context\" $) }}\n\nRequired password params:\n",
                      "markdown": "`\nUsage:\n{{- $validationError00 := include \"common.validations.values.single.empty\" (dict \"valueKey\" \"path.to.password00\" \"secret\" \"secretName\" \"field\" \"password-00\") -}}\n{{- $validationError01 := include \"common.validations.values.single.empty\" (dict \"valueKey\" \"path.to.password01\" \"secret\" \"secretName\" \"field\" \"password-01\") -}}\n{{ include \"common.errors.upgrade.passwords.empty\" (dict \"validationErrors\" (list $validationError00 $validationError01) \"context\" $) }}\n\nRequired password params:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_errors.tpl"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 144,
                  "endLine": 6,
                  "endColumn": 152,
                  "snippet": {
                    "text": "Through error when upgrading using empty passwords values that must not be empty.\n\nUsage:\n{{- $validationError00 := include \"common.validations.values.single.empty\" (dict \"valueKey\" \"path.to.password00\" \"secret\" \"secretName\" \"field\" \"password-00\") -}}\n{{- $validationError01 := include \"common.validations.values.single.empty\" (dict \"valueKey\" \"path.to.password01\" \"secret\" \"secretName\" \"field\" \"password-01\") -}}\n{{ include \"common.errors.upgrade.passwords.empty\" (dict \"validationErrors\" (list $validationError00 $validationError01) \"context\" $) }}\n\n",
                    "rendered": {
                      "text": "Through error when upgrading using empty passwords values that must not be empty.\n\nUsage:\n{{- $validationError00 := include \"common.validations.values.single.empty\" (dict \"valueKey\" \"path.to.password00\" \"secret\" \"secretName\" \"field\" \"password-00\") -}}\n{{- $validationError01 := include \"common.validations.values.single.empty\" (dict \"valueKey\" \"path.to.password01\" \"secret\" \"secretName\" \"field\" \"password-01\") -}}\n{{ include \"common.errors.upgrade.passwords.empty\" (dict \"validationErrors\" (list $validationError00 $validationError01) \"context\" $) }}\n\n",
                      "markdown": "`Through error when upgrading using empty passwords values that must not be empty.\n\nUsage:\n{{- $validationError00 := include \"common.validations.values.single.empty\" (dict \"valueKey\" \"path.to.password00\" \"secret\" \"secretName\" \"field\" \"password-00\") -}}\n{{- $validationError01 := include \"common.validations.values.single.empty\" (dict \"valueKey\" \"path.to.password01\" \"secret\" \"secretName\" \"field\" \"password-01\") -}}\n{{ include \"common.errors.upgrade.passwords.empty\" (dict \"validationErrors\" (list $validationError00 $validationError01) \"context\" $) }}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_errors.tpl"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 101,
                  "endLine": 6,
                  "endColumn": 109,
                  "snippet": {
                    "text": "Through error when upgrading using empty passwords values that must not be empty.\n\nUsage:\n{{- $validationError00 := include \"common.validations.values.single.empty\" (dict \"valueKey\" \"path.to.password00\" \"secret\" \"secretName\" \"field\" \"password-00\") -}}\n{{- $validationError01 := include \"common.validations.values.single.empty\" (dict \"valueKey\" \"path.to.password01\" \"secret\" \"secretName\" \"field\" \"password-01\") -}}\n{{ include \"common.errors.upgrade.passwords.empty\" (dict \"validationErrors\" (list $validationError00 $validationError01) \"context\" $) }}\n\n",
                    "rendered": {
                      "text": "Through error when upgrading using empty passwords values that must not be empty.\n\nUsage:\n{{- $validationError00 := include \"common.validations.values.single.empty\" (dict \"valueKey\" \"path.to.password00\" \"secret\" \"secretName\" \"field\" \"password-00\") -}}\n{{- $validationError01 := include \"common.validations.values.single.empty\" (dict \"valueKey\" \"path.to.password01\" \"secret\" \"secretName\" \"field\" \"password-01\") -}}\n{{ include \"common.errors.upgrade.passwords.empty\" (dict \"validationErrors\" (list $validationError00 $validationError01) \"context\" $) }}\n\n",
                      "markdown": "`Through error when upgrading using empty passwords values that must not be empty.\n\nUsage:\n{{- $validationError00 := include \"common.validations.values.single.empty\" (dict \"valueKey\" \"path.to.password00\" \"secret\" \"secretName\" \"field\" \"password-00\") -}}\n{{- $validationError01 := include \"common.validations.values.single.empty\" (dict \"valueKey\" \"path.to.password01\" \"secret\" \"secretName\" \"field\" \"password-01\") -}}\n{{ include \"common.errors.upgrade.passwords.empty\" (dict \"validationErrors\" (list $validationError00 $validationError01) \"context\" $) }}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_errors.tpl"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 41,
                  "endLine": 3,
                  "endColumn": 49,
                  "snippet": {
                    "text": "{{/* vim: set filetype=mustache: */}}\n{{/*\nThrough error when upgrading using empty passwords values that must not be empty.\n\nUsage:\n{{- $validationError00 := include \"common.validations.values.single.empty\" (dict \"valueKey\" \"path.to.password00\" \"secret\" \"secretName\" \"field\" \"password-00\") -}}\n",
                    "rendered": {
                      "text": "{{/* vim: set filetype=mustache: */}}\n{{/*\nThrough error when upgrading using empty passwords values that must not be empty.\n\nUsage:\n{{- $validationError00 := include \"common.validations.values.single.empty\" (dict \"valueKey\" \"path.to.password00\" \"secret\" \"secretName\" \"field\" \"password-00\") -}}\n",
                      "markdown": "`{{/* vim: set filetype=mustache: */}}\n{{/*\nThrough error when upgrading using empty passwords values that must not be empty.\n\nUsage:\n{{- $validationError00 := include \"common.validations.values.single.empty\" (dict \"valueKey\" \"path.to.password00\" \"secret\" \"secretName\" \"field\" \"password-00\") -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_errors.tpl"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 97,
                  "endLine": 19,
                  "endColumn": 101,
                  "snippet": {
                    "text": "g the release.\" -}}\n    {{- $errorString = print $errorString \"\\n                 Note that even after reinstallation, old credentials may be needed as they may be kept in persistent volume claims.\" -}}\n    {{- $errorString = print $errorString \"\\n                 Further information can be obtained at https://docs.bitnami.com/general/how-to/troubleshoot-helm-chart-issues/#credential-errors-while-upgrading-chart-releases\" -}}\n    {{- $errorString = print $errorString \"\\n%s\" -}}\n    {{- printf $errorString $validationErrors | fail -}}\n  {{- end -}}\n{{- end -}}\n",
                    "rendered": {
                      "text": "g the release.\" -}}\n    {{- $errorString = print $errorString \"\\n                 Note that even after reinstallation, old credentials may be needed as they may be kept in persistent volume claims.\" -}}\n    {{- $errorString = print $errorString \"\\n                 Further information can be obtained at https://docs.bitnami.com/general/how-to/troubleshoot-helm-chart-issues/#credential-errors-while-upgrading-chart-releases\" -}}\n    {{- $errorString = print $errorString \"\\n%s\" -}}\n    {{- printf $errorString $validationErrors | fail -}}\n  {{- end -}}\n{{- end -}}\n",
                      "markdown": "`g the release.\" -}}\n    {{- $errorString = print $errorString \"\\n                 Note that even after reinstallation, old credentials may be needed as they may be kept in persistent volume claims.\" -}}\n    {{- $errorString = print $errorString \"\\n                 Further information can be obtained at https://docs.bitnami.com/general/how-to/troubleshoot-helm-chart-issues/#credential-errors-while-upgrading-chart-releases\" -}}\n    {{- $errorString = print $errorString \"\\n%s\" -}}\n    {{- printf $errorString $validationErrors | fail -}}\n  {{- end -}}\n{{- end -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/Chart.yaml"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 3,
                  "endLine": 21,
                  "snippet": {
                    "text": "  - slack\n  - hipchat\n  - mattermost\n  - flock\n  - msteams\nmaintainers: []\nname: kubewatch\nsources:\n",
                    "rendered": {
                      "text": "  - slack\n  - hipchat\n  - mattermost\n  - flock\n  - msteams\nmaintainers: []\nname: kubewatch\nsources:\n",
                      "markdown": "`  - slack\n  - hipchat\n  - mattermost\n  - flock\n  - msteams\nmaintainers: []\nname: kubewatch\nsources:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/upload_chart.sh"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 6,
                  "endLine": 9,
                  "endColumn": 13,
                  "snippet": {
                    "text": "mv *.tgz ./kubewatch\ncurl https://robusta-charts.storage.googleapis.com/index.yaml > index.yaml\nhelm repo index --merge index.yaml --url https://robusta-charts.storage.googleapis.com ./kubewatch\ngsutil rsync -r kubewatch gs://robusta-charts\ngsutil setmeta -h \"Cache-Control:max-age=0\" gs://robusta-charts/index.yaml\ncd ../\nrm -rf ./tmp",
                    "rendered": {
                      "text": "mv *.tgz ./kubewatch\ncurl https://robusta-charts.storage.googleapis.com/index.yaml > index.yaml\nhelm repo index --merge index.yaml --url https://robusta-charts.storage.googleapis.com ./kubewatch\ngsutil rsync -r kubewatch gs://robusta-charts\ngsutil setmeta -h \"Cache-Control:max-age=0\" gs://robusta-charts/index.yaml\ncd ../\nrm -rf ./tmp",
                      "markdown": "`mv *.tgz ./kubewatch\ncurl https://robusta-charts.storage.googleapis.com/index.yaml > index.yaml\nhelm repo index --merge index.yaml --url https://robusta-charts.storage.googleapis.com ./kubewatch\ngsutil rsync -r kubewatch gs://robusta-charts\ngsutil setmeta -h \"Cache-Control:max-age=0\" gs://robusta-charts/index.yaml\ncd ../\nrm -rf ./tmp`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/upload_chart.sh"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 20,
                  "endLine": 7,
                  "endColumn": 5,
                  "snippet": {
                    "text": "cd ./tmp\nhelm package ../kubewatch\nmkdir kubewatch\nmv *.tgz ./kubewatch\ncurl https://robusta-charts.storage.googleapis.com/index.yaml > index.yaml\nhelm repo index --merge index.yaml --url https://robusta-charts.storage.googleapis.com ./kubewatch\ngsutil rsync -r kubewatch gs://robusta-charts\ngsutil setmeta -h \"Cache-Control:max-age=0\" gs://robusta-charts/index.yaml\n",
                    "rendered": {
                      "text": "cd ./tmp\nhelm package ../kubewatch\nmkdir kubewatch\nmv *.tgz ./kubewatch\ncurl https://robusta-charts.storage.googleapis.com/index.yaml > index.yaml\nhelm repo index --merge index.yaml --url https://robusta-charts.storage.googleapis.com ./kubewatch\ngsutil rsync -r kubewatch gs://robusta-charts\ngsutil setmeta -h \"Cache-Control:max-age=0\" gs://robusta-charts/index.yaml\n",
                      "markdown": "`cd ./tmp\nhelm package ../kubewatch\nmkdir kubewatch\nmv *.tgz ./kubewatch\ncurl https://robusta-charts.storage.googleapis.com/index.yaml > index.yaml\nhelm repo index --merge index.yaml --url https://robusta-charts.storage.googleapis.com ./kubewatch\ngsutil rsync -r kubewatch gs://robusta-charts\ngsutil setmeta -h \"Cache-Control:max-age=0\" gs://robusta-charts/index.yaml\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/upload_chart.sh"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 15,
                  "endLine": 6,
                  "endColumn": 3,
                  "snippet": {
                    "text": "mkdir ./tmp\ncd ./tmp\nhelm package ../kubewatch\nmkdir kubewatch\nmv *.tgz ./kubewatch\ncurl https://robusta-charts.storage.googleapis.com/index.yaml > index.yaml\nhelm repo index --merge index.yaml --url https://robusta-charts.storage.googleapis.com ./kubewatch\ngsutil rsync -r kubewatch gs://robusta-charts\n",
                    "rendered": {
                      "text": "mkdir ./tmp\ncd ./tmp\nhelm package ../kubewatch\nmkdir kubewatch\nmv *.tgz ./kubewatch\ncurl https://robusta-charts.storage.googleapis.com/index.yaml > index.yaml\nhelm repo index --merge index.yaml --url https://robusta-charts.storage.googleapis.com ./kubewatch\ngsutil rsync -r kubewatch gs://robusta-charts\n",
                      "markdown": "`mkdir ./tmp\ncd ./tmp\nhelm package ../kubewatch\nmkdir kubewatch\nmv *.tgz ./kubewatch\ncurl https://robusta-charts.storage.googleapis.com/index.yaml > index.yaml\nhelm repo index --merge index.yaml --url https://robusta-charts.storage.googleapis.com ./kubewatch\ngsutil rsync -r kubewatch gs://robusta-charts\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/mattermost/mattermost.go"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 55,
                  "endLine": 111,
                  "endColumn": 59,
                  "snippet": {
                    "text": "\t\treturn\n\t}\n\n\tlogrus.Printf(\"Message successfully sent to channel %s at %s\", m.Channel, time.Now())\n}\n\nfunc checkMissingMattermostVars(s *Mattermost) error {\n",
                    "rendered": {
                      "text": "\t\treturn\n\t}\n\n\tlogrus.Printf(\"Message successfully sent to channel %s at %s\", m.Channel, time.Now())\n}\n\nfunc checkMissingMattermostVars(s *Mattermost) error {\n",
                      "markdown": "`\t\treturn\n\t}\n\n\tlogrus.Printf(\"Message successfully sent to channel %s at %s\", m.Channel, time.Now())\n}\n\nfunc checkMissingMattermostVars(s *Mattermost) error {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/event/event.go"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 5,
                  "endLine": 56,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t\t)\n\tcase \"node\":\n\t\tmsg = fmt.Sprintf(\n\t\t\t\"A node `%s` has been `%s`\",\n\t\t\te.Name,\n\t\t\te.Reason,\n\t\t)\n",
                    "rendered": {
                      "text": "\t\t)\n\tcase \"node\":\n\t\tmsg = fmt.Sprintf(\n\t\t\t\"A node `%s` has been `%s`\",\n\t\t\te.Name,\n\t\t\te.Reason,\n\t\t)\n",
                      "markdown": "`\t\t)\n\tcase \"node\":\n\t\tmsg = fmt.Sprintf(\n\t\t\t\"A node `%s` has been `%s`\",\n\t\t\te.Name,\n\t\t\te.Reason,\n\t\t)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.github/workflows/pr-description-check.yaml"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 27,
                  "endLine": 26,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        # Extract the \"Tests performed\" section\n        tests_performed_section=$(sed -n '/## Tests performed/,/##/p' <<< \"${{ github.event.pull_request.body }}\")\n\n        # Check if there is at least one test description in the \"Tests performed\" section\n        if [[ ! \"$tests_performed_section\" =~ \"- \" ]]; then\n          echo \"The 'Tests performed' section does not contain a list of tests.\"\n          exit 1\n",
                    "rendered": {
                      "text": "        # Extract the \"Tests performed\" section\n        tests_performed_section=$(sed -n '/## Tests performed/,/##/p' <<< \"${{ github.event.pull_request.body }}\")\n\n        # Check if there is at least one test description in the \"Tests performed\" section\n        if [[ ! \"$tests_performed_section\" =~ \"- \" ]]; then\n          echo \"The 'Tests performed' section does not contain a list of tests.\"\n          exit 1\n",
                      "markdown": "`        # Extract the \"Tests performed\" section\n        tests_performed_section=$(sed -n '/## Tests performed/,/##/p' <<< \"${{ github.event.pull_request.body }}\")\n\n        # Check if there is at least one test description in the \"Tests performed\" section\n        if [[ ! \"$tests_performed_section\" =~ \"- \" ]]; then\n          echo \"The 'Tests performed' section does not contain a list of tests.\"\n          exit 1\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/cmd/slack.go"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 7,
                  "endLine": 18,
                  "snippet": {
                    "text": "limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"github.com/bitnami-labs/kubewatch/config\"\n\t\"github.com/sirupsen/logrus\"\n",
                    "rendered": {
                      "text": "limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"github.com/bitnami-labs/kubewatch/config\"\n\t\"github.com/sirupsen/logrus\"\n",
                      "markdown": "`limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"github.com/bitnami-labs/kubewatch/config\"\n\t\"github.com/sirupsen/logrus\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/cmd/flock.go"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 7,
                  "endLine": 18,
                  "snippet": {
                    "text": "limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"github.com/bitnami-labs/kubewatch/config\"\n\t\"github.com/sirupsen/logrus\"\n",
                    "rendered": {
                      "text": "limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"github.com/bitnami-labs/kubewatch/config\"\n\t\"github.com/sirupsen/logrus\"\n",
                      "markdown": "`limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"github.com/bitnami-labs/kubewatch/config\"\n\t\"github.com/sirupsen/logrus\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/cmd/flock.go"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 56,
                  "endLine": 52,
                  "endColumn": 63,
                  "snippet": {
                    "text": "}\n\nfunc init() {\n\tflockConfigCmd.Flags().StringP(\"url\", \"u\", \"\", \"Specify Flock url\")\n}\n",
                    "rendered": {
                      "text": "}\n\nfunc init() {\n\tflockConfigCmd.Flags().StringP(\"url\", \"u\", \"\", \"Specify Flock url\")\n}\n",
                      "markdown": "`}\n\nfunc init() {\n\tflockConfigCmd.Flags().StringP(\"url\", \"u\", \"\", \"Specify Flock url\")\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/cmd/flock.go"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 17,
                  "endLine": 29,
                  "endColumn": 24,
                  "snippet": {
                    "text": "var flockConfigCmd = &cobra.Command{\n\tUse:   \"flock\",\n\tShort: \"specific flock configuration\",\n\tLong:  `specific flock configuration`,\n\tRun: func(cmd *cobra.Command, args []string) {\n\t\tconf, err := config.New()\n\t\tif err != nil {\n",
                    "rendered": {
                      "text": "var flockConfigCmd = &cobra.Command{\n\tUse:   \"flock\",\n\tShort: \"specific flock configuration\",\n\tLong:  `specific flock configuration`,\n\tRun: func(cmd *cobra.Command, args []string) {\n\t\tconf, err := config.New()\n\t\tif err != nil {\n",
                      "markdown": "`var flockConfigCmd = &cobra.Command{\n\tUse:   \"flock\",\n\tShort: \"specific flock configuration\",\n\tLong:  `specific flock configuration`,\n\tRun: func(cmd *cobra.Command, args []string) {\n\t\tconf, err := config.New()\n\t\tif err != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/cmd/flock.go"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 17,
                  "endLine": 28,
                  "endColumn": 24,
                  "snippet": {
                    "text": "// flockConfigCmd represents the flock subcommand\nvar flockConfigCmd = &cobra.Command{\n\tUse:   \"flock\",\n\tShort: \"specific flock configuration\",\n\tLong:  `specific flock configuration`,\n\tRun: func(cmd *cobra.Command, args []string) {\n\t\tconf, err := config.New()\n",
                    "rendered": {
                      "text": "// flockConfigCmd represents the flock subcommand\nvar flockConfigCmd = &cobra.Command{\n\tUse:   \"flock\",\n\tShort: \"specific flock configuration\",\n\tLong:  `specific flock configuration`,\n\tRun: func(cmd *cobra.Command, args []string) {\n\t\tconf, err := config.New()\n",
                      "markdown": "`// flockConfigCmd represents the flock subcommand\nvar flockConfigCmd = &cobra.Command{\n\tUse:   \"flock\",\n\tShort: \"specific flock configuration\",\n\tLong:  `specific flock configuration`,\n\tRun: func(cmd *cobra.Command, args []string) {\n\t\tconf, err := config.New()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/cmd/cloudevent.go"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 7,
                  "endLine": 18,
                  "snippet": {
                    "text": "limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"github.com/bitnami-labs/kubewatch/config\"\n\t\"github.com/sirupsen/logrus\"\n",
                    "rendered": {
                      "text": "limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"github.com/bitnami-labs/kubewatch/config\"\n\t\"github.com/sirupsen/logrus\"\n",
                      "markdown": "`limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"github.com/bitnami-labs/kubewatch/config\"\n\t\"github.com/sirupsen/logrus\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                    "rendered": {
                      "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                      "markdown": "`\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                    "rendered": {
                      "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                      "markdown": "`unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                    "rendered": {
                      "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                      "markdown": "`\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                    "rendered": {
                      "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                      "markdown": "`\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                    "rendered": {
                      "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                      "markdown": "`if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                    "rendered": {
                      "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                      "markdown": "`validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 21,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                    "rendered": {
                      "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                      "markdown": "`# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "endLine": 15,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                    "rendered": {
                      "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                      "markdown": "`# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/info/exclude"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                    "rendered": {
                      "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                      "markdown": "`# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/examples/conf/kubewatch.conf.flock.yaml"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 116,
                  "endLine": 3,
                  "endColumn": 123,
                  "snippet": {
                    "text": "handler:\n  flock:\n    url: \"https://api.flock.com/hooks/sendMessage/XXXXXXXX\" # XXXXXXXX to be replaced with incomming webhooks of the flock channl\nresource:\n  deployment: true\n  replicationcontroller: false\n",
                    "rendered": {
                      "text": "handler:\n  flock:\n    url: \"https://api.flock.com/hooks/sendMessage/XXXXXXXX\" # XXXXXXXX to be replaced with incomming webhooks of the flock channl\nresource:\n  deployment: true\n  replicationcontroller: false\n",
                      "markdown": "`handler:\n  flock:\n    url: \"https://api.flock.com/hooks/sendMessage/XXXXXXXX\" # XXXXXXXX to be replaced with incomming webhooks of the flock channl\nresource:\n  deployment: true\n  replicationcontroller: false\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_names.tpl"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 11,
                  "endLine": 36,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n{{/*\nCreate a default fully qualified dependency name.\nWe truncate at 63 chars because some Kubernetes name fields are limited to this (by the DNS naming spec).\nIf release name contains chart name it will be used as a full name.\nUsage:\n{{ include \"common.names.dependency.fullname\" (dict \"chartName\" \"dependency-chart-name\" \"chartValues\" .Values.dependency-chart \"context\" $) }}\n",
                    "rendered": {
                      "text": "\n{{/*\nCreate a default fully qualified dependency name.\nWe truncate at 63 chars because some Kubernetes name fields are limited to this (by the DNS naming spec).\nIf release name contains chart name it will be used as a full name.\nUsage:\n{{ include \"common.names.dependency.fullname\" (dict \"chartName\" \"dependency-chart-name\" \"chartValues\" .Values.dependency-chart \"context\" $) }}\n",
                      "markdown": "`\n{{/*\nCreate a default fully qualified dependency name.\nWe truncate at 63 chars because some Kubernetes name fields are limited to this (by the DNS naming spec).\nIf release name contains chart name it will be used as a full name.\nUsage:\n{{ include \"common.names.dependency.fullname\" (dict \"chartName\" \"dependency-chart-name\" \"chartValues\" .Values.dependency-chart \"context\" $) }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_names.tpl"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 11,
                  "endLine": 18,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n{{/*\nCreate a default fully qualified app name.\nWe truncate at 63 chars because some Kubernetes name fields are limited to this (by the DNS naming spec).\nIf release name contains chart name it will be used as a full name.\n*/}}\n{{- define \"common.names.fullname\" -}}\n",
                    "rendered": {
                      "text": "\n{{/*\nCreate a default fully qualified app name.\nWe truncate at 63 chars because some Kubernetes name fields are limited to this (by the DNS naming spec).\nIf release name contains chart name it will be used as a full name.\n*/}}\n{{- define \"common.names.fullname\" -}}\n",
                      "markdown": "`\n{{/*\nCreate a default fully qualified app name.\nWe truncate at 63 chars because some Kubernetes name fields are limited to this (by the DNS naming spec).\nIf release name contains chart name it will be used as a full name.\n*/}}\n{{- define \"common.names.fullname\" -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_names.tpl"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 4,
                  "endLine": 3,
                  "endColumn": 7,
                  "snippet": {
                    "text": "{{/* vim: set filetype=mustache: */}}\n{{/*\nExpand the name of the chart.\n*/}}\n{{- define \"common.names.name\" -}}\n{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix \"-\" -}}\n",
                    "rendered": {
                      "text": "{{/* vim: set filetype=mustache: */}}\n{{/*\nExpand the name of the chart.\n*/}}\n{{- define \"common.names.name\" -}}\n{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix \"-\" -}}\n",
                      "markdown": "`{{/* vim: set filetype=mustache: */}}\n{{/*\nExpand the name of the chart.\n*/}}\n{{- define \"common.names.name\" -}}\n{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix \"-\" -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/_names.tpl"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 4,
                  "endLine": 3,
                  "endColumn": 7,
                  "snippet": {
                    "text": "{{/* vim: set filetype=mustache: */}}\n{{/*\nExpand the name of the chart.\n*/}}\n{{- define \"common.names.name\" -}}\n{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix \"-\" -}}\n",
                    "rendered": {
                      "text": "{{/* vim: set filetype=mustache: */}}\n{{/*\nExpand the name of the chart.\n*/}}\n{{- define \"common.names.name\" -}}\n{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix \"-\" -}}\n",
                      "markdown": "`{{/* vim: set filetype=mustache: */}}\n{{/*\nExpand the name of the chart.\n*/}}\n{{- define \"common.names.name\" -}}\n{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix \"-\" -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/controller/controller.go"
                },
                "region": {
                  "startLine": 710,
                  "startColumn": 26,
                  "endLine": 710,
                  "endColumn": 31,
                  "snippet": {
                    "text": "}\n\nfunc (c *Controller) processNextItem() bool {\n\tnewEvent, quit := c.queue.Get()\n\n\tif quit {\n\t\treturn false\n",
                    "rendered": {
                      "text": "}\n\nfunc (c *Controller) processNextItem() bool {\n\tnewEvent, quit := c.queue.Get()\n\n\tif quit {\n\t\treturn false\n",
                      "markdown": "`}\n\nfunc (c *Controller) processNextItem() bool {\n\tnewEvent, quit := c.queue.Get()\n\n\tif quit {\n\t\treturn false\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/controller/controller.go"
                },
                "region": {
                  "startLine": 637,
                  "startColumn": 71,
                  "endLine": 637,
                  "endColumn": 79,
                  "snippet": {
                    "text": "\t\t\tif !ok {\n\t\t\t\tlogrus.WithField(\"pkg\", \"kubewatch-\"+resourceType).Errorf(\"cannot convert old to runtime.Object for update on %v\", old)\n\t\t\t}\n\t\t\tlogrus.WithField(\"pkg\", \"kubewatch-\"+resourceType).Infof(\"Processing update to %v: %s\", resourceType, newEvent.key)\n\t\t\tif err == nil {\n\t\t\t\tqueue.Add(newEvent)\n\t\t\t}\n",
                    "rendered": {
                      "text": "\t\t\tif !ok {\n\t\t\t\tlogrus.WithField(\"pkg\", \"kubewatch-\"+resourceType).Errorf(\"cannot convert old to runtime.Object for update on %v\", old)\n\t\t\t}\n\t\t\tlogrus.WithField(\"pkg\", \"kubewatch-\"+resourceType).Infof(\"Processing update to %v: %s\", resourceType, newEvent.key)\n\t\t\tif err == nil {\n\t\t\t\tqueue.Add(newEvent)\n\t\t\t}\n",
                      "markdown": "`\t\t\tif !ok {\n\t\t\t\tlogrus.WithField(\"pkg\", \"kubewatch-\"+resourceType).Errorf(\"cannot convert old to runtime.Object for update on %v\", old)\n\t\t\t}\n\t\t\tlogrus.WithField(\"pkg\", \"kubewatch-\"+resourceType).Infof(\"Processing update to %v: %s\", resourceType, newEvent.key)\n\t\t\tif err == nil {\n\t\t\t\tqueue.Add(newEvent)\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/controller/controller.go"
                },
                "region": {
                  "startLine": 635,
                  "startColumn": 103,
                  "endLine": 635,
                  "endColumn": 111,
                  "snippet": {
                    "text": "\t\t\t}\n\t\t\tnewEvent.oldObj, ok = old.(runtime.Object)\n\t\t\tif !ok {\n\t\t\t\tlogrus.WithField(\"pkg\", \"kubewatch-\"+resourceType).Errorf(\"cannot convert old to runtime.Object for update on %v\", old)\n\t\t\t}\n\t\t\tlogrus.WithField(\"pkg\", \"kubewatch-\"+resourceType).Infof(\"Processing update to %v: %s\", resourceType, newEvent.key)\n\t\t\tif err == nil {\n",
                    "rendered": {
                      "text": "\t\t\t}\n\t\t\tnewEvent.oldObj, ok = old.(runtime.Object)\n\t\t\tif !ok {\n\t\t\t\tlogrus.WithField(\"pkg\", \"kubewatch-\"+resourceType).Errorf(\"cannot convert old to runtime.Object for update on %v\", old)\n\t\t\t}\n\t\t\tlogrus.WithField(\"pkg\", \"kubewatch-\"+resourceType).Infof(\"Processing update to %v: %s\", resourceType, newEvent.key)\n\t\t\tif err == nil {\n",
                      "markdown": "`\t\t\t}\n\t\t\tnewEvent.oldObj, ok = old.(runtime.Object)\n\t\t\tif !ok {\n\t\t\t\tlogrus.WithField(\"pkg\", \"kubewatch-\"+resourceType).Errorf(\"cannot convert old to runtime.Object for update on %v\", old)\n\t\t\t}\n\t\t\tlogrus.WithField(\"pkg\", \"kubewatch-\"+resourceType).Infof(\"Processing update to %v: %s\", resourceType, newEvent.key)\n\t\t\tif err == nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/controller/controller.go"
                },
                "region": {
                  "startLine": 631,
                  "startColumn": 99,
                  "endLine": 631,
                  "endColumn": 107,
                  "snippet": {
                    "text": "\t\t\tnewEvent.apiVersion = apiVersion\n\t\t\tnewEvent.obj, ok = new.(runtime.Object)\n\t\t\tif !ok {\n\t\t\t\tlogrus.WithField(\"pkg\", \"kubewatch-\"+resourceType).Errorf(\"cannot convert to runtime.Object for update on %v\", new)\n\t\t\t}\n\t\t\tnewEvent.oldObj, ok = old.(runtime.Object)\n\t\t\tif !ok {\n",
                    "rendered": {
                      "text": "\t\t\tnewEvent.apiVersion = apiVersion\n\t\t\tnewEvent.obj, ok = new.(runtime.Object)\n\t\t\tif !ok {\n\t\t\t\tlogrus.WithField(\"pkg\", \"kubewatch-\"+resourceType).Errorf(\"cannot convert to runtime.Object for update on %v\", new)\n\t\t\t}\n\t\t\tnewEvent.oldObj, ok = old.(runtime.Object)\n\t\t\tif !ok {\n",
                      "markdown": "`\t\t\tnewEvent.apiVersion = apiVersion\n\t\t\tnewEvent.obj, ok = new.(runtime.Object)\n\t\t\tif !ok {\n\t\t\t\tlogrus.WithField(\"pkg\", \"kubewatch-\"+resourceType).Errorf(\"cannot convert to runtime.Object for update on %v\", new)\n\t\t\t}\n\t\t\tnewEvent.oldObj, ok = old.(runtime.Object)\n\t\t\tif !ok {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.github/workflows/release.yaml"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 37,
                  "endLine": 47,
                  "endColumn": 45,
                  "snippet": {
                    "text": "      uses: docker/login-action@v1\n      with:\n        username: ${{ secrets.DOCKER_USERNAME }}\n        password: ${{ secrets.DOCKER_PASSWORD }}\n\n    - name: Build and push Docker images Dockerhub\n      uses: docker/build-push-action@v2\n",
                    "rendered": {
                      "text": "      uses: docker/login-action@v1\n      with:\n        username: ${{ secrets.DOCKER_USERNAME }}\n        password: ${{ secrets.DOCKER_PASSWORD }}\n\n    - name: Build and push Docker images Dockerhub\n      uses: docker/build-push-action@v2\n",
                      "markdown": "`      uses: docker/login-action@v1\n      with:\n        username: ${{ secrets.DOCKER_USERNAME }}\n        password: ${{ secrets.DOCKER_PASSWORD }}\n\n    - name: Build and push Docker images Dockerhub\n      uses: docker/build-push-action@v2\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.github/workflows/release.yaml"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 8,
                  "endLine": 47,
                  "endColumn": 16,
                  "snippet": {
                    "text": "      uses: docker/login-action@v1\n      with:\n        username: ${{ secrets.DOCKER_USERNAME }}\n        password: ${{ secrets.DOCKER_PASSWORD }}\n\n    - name: Build and push Docker images Dockerhub\n      uses: docker/build-push-action@v2\n",
                    "rendered": {
                      "text": "      uses: docker/login-action@v1\n      with:\n        username: ${{ secrets.DOCKER_USERNAME }}\n        password: ${{ secrets.DOCKER_PASSWORD }}\n\n    - name: Build and push Docker images Dockerhub\n      uses: docker/build-push-action@v2\n",
                      "markdown": "`      uses: docker/login-action@v1\n      with:\n        username: ${{ secrets.DOCKER_USERNAME }}\n        password: ${{ secrets.DOCKER_PASSWORD }}\n\n    - name: Build and push Docker images Dockerhub\n      uses: docker/build-push-action@v2\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.github/workflows/release.yaml"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 26,
                  "endLine": 49,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        username: ${{ secrets.DOCKER_USERNAME }}\n        password: ${{ secrets.DOCKER_PASSWORD }}\n\n    - name: Build and push Docker images Dockerhub\n      uses: docker/build-push-action@v2\n      with:\n        file: Dockerfile\n",
                    "rendered": {
                      "text": "        username: ${{ secrets.DOCKER_USERNAME }}\n        password: ${{ secrets.DOCKER_PASSWORD }}\n\n    - name: Build and push Docker images Dockerhub\n      uses: docker/build-push-action@v2\n      with:\n        file: Dockerfile\n",
                      "markdown": "`        username: ${{ secrets.DOCKER_USERNAME }}\n        password: ${{ secrets.DOCKER_PASSWORD }}\n\n    - name: Build and push Docker images Dockerhub\n      uses: docker/build-push-action@v2\n      with:\n        file: Dockerfile\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.github/workflows/release.yaml"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 20,
                  "endLine": 43,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        push: true\n        tags: us-central1-docker.pkg.dev/genuine-flight-317411/devel/kubewatch:${{ env.RELEASE_VER }}\n\n    - name: Login to Docker Hub\n      uses: docker/login-action@v1\n      with:\n        username: ${{ secrets.DOCKER_USERNAME }}\n",
                    "rendered": {
                      "text": "        push: true\n        tags: us-central1-docker.pkg.dev/genuine-flight-317411/devel/kubewatch:${{ env.RELEASE_VER }}\n\n    - name: Login to Docker Hub\n      uses: docker/login-action@v1\n      with:\n        username: ${{ secrets.DOCKER_USERNAME }}\n",
                      "markdown": "`        push: true\n        tags: us-central1-docker.pkg.dev/genuine-flight-317411/devel/kubewatch:${{ env.RELEASE_VER }}\n\n    - name: Login to Docker Hub\n      uses: docker/login-action@v1\n      with:\n        username: ${{ secrets.DOCKER_USERNAME }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.github/workflows/release.yaml"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 26,
                  "endLine": 34,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    - name: Set up Docker Buildx\n      uses: docker/setup-buildx-action@v1\n\n    - name: Build and push Docker images\n      uses: docker/build-push-action@v2\n      with:\n        file: Dockerfile\n",
                    "rendered": {
                      "text": "    - name: Set up Docker Buildx\n      uses: docker/setup-buildx-action@v1\n\n    - name: Build and push Docker images\n      uses: docker/build-push-action@v2\n      with:\n        file: Dockerfile\n",
                      "markdown": "`    - name: Set up Docker Buildx\n      uses: docker/setup-buildx-action@v1\n\n    - name: Build and push Docker images\n      uses: docker/build-push-action@v2\n      with:\n        file: Dockerfile\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.github/workflows/release.yaml"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 18,
                  "endLine": 31,
                  "endColumn": 26,
                  "snippet": {
                    "text": "      run: |-\n        gcloud config get-value project\n\n    - name: Set up Docker Buildx\n      uses: docker/setup-buildx-action@v1\n\n    - name: Build and push Docker images\n",
                    "rendered": {
                      "text": "      run: |-\n        gcloud config get-value project\n\n    - name: Set up Docker Buildx\n      uses: docker/setup-buildx-action@v1\n\n    - name: Build and push Docker images\n",
                      "markdown": "`      run: |-\n        gcloud config get-value project\n\n    - name: Set up Docker Buildx\n      uses: docker/setup-buildx-action@v1\n\n    - name: Build and push Docker images\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.github/workflows/release.yaml"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 21,
                  "endLine": 24,
                  "snippet": {
                    "text": "        project_id: genuine-flight-317411\n        export_default_credentials: true\n\n    - name: Configure Docker\n      run: |-\n        gcloud auth configure-docker us-central1-docker.pkg.dev\n\n    - name: Verify gcloud configuration\n",
                    "rendered": {
                      "text": "        project_id: genuine-flight-317411\n        export_default_credentials: true\n\n    - name: Configure Docker\n      run: |-\n        gcloud auth configure-docker us-central1-docker.pkg.dev\n\n    - name: Verify gcloud configuration\n",
                      "markdown": "`        project_id: genuine-flight-317411\n        export_default_credentials: true\n\n    - name: Configure Docker\n      run: |-\n        gcloud auth configure-docker us-central1-docker.pkg.dev\n\n    - name: Verify gcloud configuration\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                      "markdown": "`\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                    "rendered": {
                      "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                      "markdown": "`\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 15,
                  "endLine": 77,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                    "rendered": {
                      "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                      "markdown": "`#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 27,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                    "rendered": {
                      "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                      "markdown": "`\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                      "markdown": "`\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                    "rendered": {
                      "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                      "markdown": "`# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                    "rendered": {
                      "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                      "markdown": "`# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                    "rendered": {
                      "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                      "markdown": "`\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/applypatch-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 45,
                  "endLine": 13,
                  "endColumn": 53,
                  "snippet": {
                    "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                    "rendered": {
                      "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                      "markdown": "`#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 51,
                  "endLine": 12,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                    "rendered": {
                      "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                      "markdown": "`# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 53,
                  "endLine": 11,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                    "rendered": {
                      "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                      "markdown": "`# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                    "rendered": {
                      "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                      "markdown": "`\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                    "rendered": {
                      "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                      "markdown": "`\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 30,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                    "rendered": {
                      "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                      "markdown": "`\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 28,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                    "rendered": {
                      "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                      "markdown": "`\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                    "rendered": {
                      "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                      "markdown": "`\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 45,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                    "rendered": {
                      "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                      "markdown": "`use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                    "rendered": {
                      "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                      "markdown": "`use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/templates/clusterrole.yaml"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 7,
                  "endLine": 79,
                  "snippet": {
                    "text": "    verbs:\n      - get\n      - list\n      - watch\n  {{- range .Values.rbac.customRoles }}\n  - apiGroups: {{ toYaml .apiGroups | nindent 4 }}\n    resources: {{ toYaml .resources | nindent 4 }}\n    verbs: {{ toYaml .verbs | nindent 4 }}\n",
                    "rendered": {
                      "text": "    verbs:\n      - get\n      - list\n      - watch\n  {{- range .Values.rbac.customRoles }}\n  - apiGroups: {{ toYaml .apiGroups | nindent 4 }}\n    resources: {{ toYaml .resources | nindent 4 }}\n    verbs: {{ toYaml .verbs | nindent 4 }}\n",
                      "markdown": "`    verbs:\n      - get\n      - list\n      - watch\n  {{- range .Values.rbac.customRoles }}\n  - apiGroups: {{ toYaml .apiGroups | nindent 4 }}\n    resources: {{ toYaml .resources | nindent 4 }}\n    verbs: {{ toYaml .verbs | nindent 4 }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/templates/clusterrole.yaml"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 7,
                  "endLine": 70,
                  "snippet": {
                    "text": "    verbs:\n      - get\n      - list\n      - watch\n  - apiGroups:\n      - batch\n    resources:\n      - cronjobs\n",
                    "rendered": {
                      "text": "    verbs:\n      - get\n      - list\n      - watch\n  - apiGroups:\n      - batch\n    resources:\n      - cronjobs\n",
                      "markdown": "`    verbs:\n      - get\n      - list\n      - watch\n  - apiGroups:\n      - batch\n    resources:\n      - cronjobs\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/templates/clusterrole.yaml"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 7,
                  "endLine": 54,
                  "snippet": {
                    "text": "      - horizontalpodautoscalers\n    verbs:\n      - list\n      - watch\n      - get\n  - apiGroups:\n      - extensions\n      - networking.k8s.io\n",
                    "rendered": {
                      "text": "      - horizontalpodautoscalers\n    verbs:\n      - list\n      - watch\n      - get\n  - apiGroups:\n      - extensions\n      - networking.k8s.io\n",
                      "markdown": "`      - horizontalpodautoscalers\n    verbs:\n      - list\n      - watch\n      - get\n  - apiGroups:\n      - extensions\n      - networking.k8s.io\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/templates/clusterrole.yaml"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 7,
                  "endLine": 47,
                  "snippet": {
                    "text": "    verbs:\n      - get\n      - list\n      - watch\n  - apiGroups:\n      - autoscaling \n    resources:\n      - horizontalpodautoscalers\n",
                    "rendered": {
                      "text": "    verbs:\n      - get\n      - list\n      - watch\n  - apiGroups:\n      - autoscaling \n    resources:\n      - horizontalpodautoscalers\n",
                      "markdown": "`    verbs:\n      - get\n      - list\n      - watch\n  - apiGroups:\n      - autoscaling \n    resources:\n      - horizontalpodautoscalers\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/templates/clusterrole.yaml"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 7,
                  "endLine": 33,
                  "snippet": {
                    "text": "      - services\n    verbs:\n      - list\n      - watch\n      - get\n  - apiGroups:\n      - apps\n    resources:\n",
                    "rendered": {
                      "text": "      - services\n    verbs:\n      - list\n      - watch\n      - get\n  - apiGroups:\n      - apps\n    resources:\n",
                      "markdown": "`      - services\n    verbs:\n      - list\n      - watch\n      - get\n  - apiGroups:\n      - apps\n    resources:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/templates/deployment.yaml"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 10,
                  "endLine": 87,
                  "endColumn": 22,
                  "snippet": {
                    "text": "          lifecycle: {{- include \"common.tplvalues.render\" (dict \"value\" .Values.lifecycleHooks \"context\" $) | nindent 12 }}\n          {{- end }}\n          {{- if .Values.extraEnvVars }}\n          env: {{- include \"common.tplvalues.render\" (dict \"value\" .Values.extraEnvVars \"context\" $) | nindent 12 }}\n          {{- end }}\n          {{- if or .Values.extraEnvVarsCM .Values.extraEnvVarsSecret }}\n          envFrom:\n",
                    "rendered": {
                      "text": "          lifecycle: {{- include \"common.tplvalues.render\" (dict \"value\" .Values.lifecycleHooks \"context\" $) | nindent 12 }}\n          {{- end }}\n          {{- if .Values.extraEnvVars }}\n          env: {{- include \"common.tplvalues.render\" (dict \"value\" .Values.extraEnvVars \"context\" $) | nindent 12 }}\n          {{- end }}\n          {{- if or .Values.extraEnvVarsCM .Values.extraEnvVarsSecret }}\n          envFrom:\n",
                      "markdown": "`          lifecycle: {{- include \"common.tplvalues.render\" (dict \"value\" .Values.lifecycleHooks \"context\" $) | nindent 12 }}\n          {{- end }}\n          {{- if .Values.extraEnvVars }}\n          env: {{- include \"common.tplvalues.render\" (dict \"value\" .Values.extraEnvVars \"context\" $) | nindent 12 }}\n          {{- end }}\n          {{- if or .Values.extraEnvVarsCM .Values.extraEnvVarsSecret }}\n          envFrom:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_cassandra.tpl"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 85,
                  "endLine": 23,
                  "endColumn": 93,
                  "snippet": {
                    "text": "    {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"cassandra-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n\n  {{- end -}}\n{{- end -}}\n",
                    "rendered": {
                      "text": "    {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"cassandra-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n\n  {{- end -}}\n{{- end -}}\n",
                      "markdown": "`    {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"cassandra-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n\n  {{- end -}}\n{{- end -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_cassandra.tpl"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 64,
                  "endLine": 21,
                  "endColumn": 72,
                  "snippet": {
                    "text": "    {{- $requiredPasswords := list -}}\n\n    {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"cassandra-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n\n",
                    "rendered": {
                      "text": "    {{- $requiredPasswords := list -}}\n\n    {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"cassandra-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n\n",
                      "markdown": "`    {{- $requiredPasswords := list -}}\n\n    {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"cassandra-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_cassandra.tpl"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 45,
                  "endLine": 21,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    {{- $requiredPasswords := list -}}\n\n    {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"cassandra-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n\n",
                    "rendered": {
                      "text": "    {{- $requiredPasswords := list -}}\n\n    {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"cassandra-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n\n",
                      "markdown": "`    {{- $requiredPasswords := list -}}\n\n    {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"cassandra-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_cassandra.tpl"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 17,
                  "endLine": 21,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    {{- $requiredPasswords := list -}}\n\n    {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"cassandra-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n\n",
                    "rendered": {
                      "text": "    {{- $requiredPasswords := list -}}\n\n    {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"cassandra-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n\n",
                      "markdown": "`    {{- $requiredPasswords := list -}}\n\n    {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"cassandra-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_cassandra.tpl"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 99,
                  "endLine": 20,
                  "endColumn": 107,
                  "snippet": {
                    "text": "  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n\n    {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"cassandra-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n",
                    "rendered": {
                      "text": "  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n\n    {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"cassandra-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n",
                      "markdown": "`  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n\n    {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"cassandra-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_cassandra.tpl"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 54,
                  "endLine": 20,
                  "endColumn": 62,
                  "snippet": {
                    "text": "  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n\n    {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"cassandra-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n",
                    "rendered": {
                      "text": "  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n\n    {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"cassandra-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n",
                      "markdown": "`  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n\n    {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"cassandra-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_cassandra.tpl"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 17,
                  "endLine": 20,
                  "endColumn": 25,
                  "snippet": {
                    "text": "  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n\n    {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"cassandra-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n",
                    "rendered": {
                      "text": "  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n\n    {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"cassandra-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n",
                      "markdown": "`  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n\n    {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"cassandra-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_cassandra.tpl"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 17,
                  "endLine": 18,
                  "endColumn": 25,
                  "snippet": {
                    "text": "  {{- $valueKeyPassword := printf \"%s.password\" $dbUserPrefix -}}\n\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n\n    {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"cassandra-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n",
                    "rendered": {
                      "text": "  {{- $valueKeyPassword := printf \"%s.password\" $dbUserPrefix -}}\n\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n\n    {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"cassandra-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n",
                      "markdown": "`  {{- $valueKeyPassword := printf \"%s.password\" $dbUserPrefix -}}\n\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n\n    {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"cassandra-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_cassandra.tpl"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 38,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "  {{- $existingSecret := include \"common.cassandra.values.existingSecret\" . -}}\n  {{- $enabled := include \"common.cassandra.values.enabled\" . -}}\n  {{- $dbUserPrefix := include \"common.cassandra.values.key.dbUser\" . -}}\n  {{- $valueKeyPassword := printf \"%s.password\" $dbUserPrefix -}}\n\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n",
                    "rendered": {
                      "text": "  {{- $existingSecret := include \"common.cassandra.values.existingSecret\" . -}}\n  {{- $enabled := include \"common.cassandra.values.enabled\" . -}}\n  {{- $dbUserPrefix := include \"common.cassandra.values.key.dbUser\" . -}}\n  {{- $valueKeyPassword := printf \"%s.password\" $dbUserPrefix -}}\n\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n",
                      "markdown": "`  {{- $existingSecret := include \"common.cassandra.values.existingSecret\" . -}}\n  {{- $enabled := include \"common.cassandra.values.enabled\" . -}}\n  {{- $dbUserPrefix := include \"common.cassandra.values.key.dbUser\" . -}}\n  {{- $valueKeyPassword := printf \"%s.password\" $dbUserPrefix -}}\n\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_cassandra.tpl"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 15,
                  "endLine": 15,
                  "endColumn": 23,
                  "snippet": {
                    "text": "  {{- $existingSecret := include \"common.cassandra.values.existingSecret\" . -}}\n  {{- $enabled := include \"common.cassandra.values.enabled\" . -}}\n  {{- $dbUserPrefix := include \"common.cassandra.values.key.dbUser\" . -}}\n  {{- $valueKeyPassword := printf \"%s.password\" $dbUserPrefix -}}\n\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n",
                    "rendered": {
                      "text": "  {{- $existingSecret := include \"common.cassandra.values.existingSecret\" . -}}\n  {{- $enabled := include \"common.cassandra.values.enabled\" . -}}\n  {{- $dbUserPrefix := include \"common.cassandra.values.key.dbUser\" . -}}\n  {{- $valueKeyPassword := printf \"%s.password\" $dbUserPrefix -}}\n\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n",
                      "markdown": "`  {{- $existingSecret := include \"common.cassandra.values.existingSecret\" . -}}\n  {{- $enabled := include \"common.cassandra.values.enabled\" . -}}\n  {{- $dbUserPrefix := include \"common.cassandra.values.key.dbUser\" . -}}\n  {{- $valueKeyPassword := printf \"%s.password\" $dbUserPrefix -}}\n\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_cassandra.tpl"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 48,
                  "endLine": 11,
                  "endColumn": 56,
                  "snippet": {
                    "text": "  - secret - String - Required. Name of the secret where Cassandra values are stored, e.g: \"cassandra-passwords-secret\"\n  - subchart - Boolean - Optional. Whether Cassandra is used as subchart or not. Default: false\n*/}}\n{{- define \"common.validations.values.cassandra.passwords\" -}}\n  {{- $existingSecret := include \"common.cassandra.values.existingSecret\" . -}}\n  {{- $enabled := include \"common.cassandra.values.enabled\" . -}}\n  {{- $dbUserPrefix := include \"common.cassandra.values.key.dbUser\" . -}}\n",
                    "rendered": {
                      "text": "  - secret - String - Required. Name of the secret where Cassandra values are stored, e.g: \"cassandra-passwords-secret\"\n  - subchart - Boolean - Optional. Whether Cassandra is used as subchart or not. Default: false\n*/}}\n{{- define \"common.validations.values.cassandra.passwords\" -}}\n  {{- $existingSecret := include \"common.cassandra.values.existingSecret\" . -}}\n  {{- $enabled := include \"common.cassandra.values.enabled\" . -}}\n  {{- $dbUserPrefix := include \"common.cassandra.values.key.dbUser\" . -}}\n",
                      "markdown": "`  - secret - String - Required. Name of the secret where Cassandra values are stored, e.g: \"cassandra-passwords-secret\"\n  - subchart - Boolean - Optional. Whether Cassandra is used as subchart or not. Default: false\n*/}}\n{{- define \"common.validations.values.cassandra.passwords\" -}}\n  {{- $existingSecret := include \"common.cassandra.values.existingSecret\" . -}}\n  {{- $enabled := include \"common.cassandra.values.enabled\" . -}}\n  {{- $dbUserPrefix := include \"common.cassandra.values.key.dbUser\" . -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_cassandra.tpl"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 102,
                  "endLine": 8,
                  "endColumn": 110,
                  "snippet": {
                    "text": "Usage:\n{{ include \"common.validations.values.cassandra.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\nParams:\n  - secret - String - Required. Name of the secret where Cassandra values are stored, e.g: \"cassandra-passwords-secret\"\n  - subchart - Boolean - Optional. Whether Cassandra is used as subchart or not. Default: false\n*/}}\n{{- define \"common.validations.values.cassandra.passwords\" -}}\n",
                    "rendered": {
                      "text": "Usage:\n{{ include \"common.validations.values.cassandra.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\nParams:\n  - secret - String - Required. Name of the secret where Cassandra values are stored, e.g: \"cassandra-passwords-secret\"\n  - subchart - Boolean - Optional. Whether Cassandra is used as subchart or not. Default: false\n*/}}\n{{- define \"common.validations.values.cassandra.passwords\" -}}\n",
                      "markdown": "`Usage:\n{{ include \"common.validations.values.cassandra.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\nParams:\n  - secret - String - Required. Name of the secret where Cassandra values are stored, e.g: \"cassandra-passwords-secret\"\n  - subchart - Boolean - Optional. Whether Cassandra is used as subchart or not. Default: false\n*/}}\n{{- define \"common.validations.values.cassandra.passwords\" -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_cassandra.tpl"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 48,
                  "endLine": 6,
                  "endColumn": 56,
                  "snippet": {
                    "text": "Validate Cassandra required passwords are not empty.\n\nUsage:\n{{ include \"common.validations.values.cassandra.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\nParams:\n  - secret - String - Required. Name of the secret where Cassandra values are stored, e.g: \"cassandra-passwords-secret\"\n  - subchart - Boolean - Optional. Whether Cassandra is used as subchart or not. Default: false\n",
                    "rendered": {
                      "text": "Validate Cassandra required passwords are not empty.\n\nUsage:\n{{ include \"common.validations.values.cassandra.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\nParams:\n  - secret - String - Required. Name of the secret where Cassandra values are stored, e.g: \"cassandra-passwords-secret\"\n  - subchart - Boolean - Optional. Whether Cassandra is used as subchart or not. Default: false\n",
                      "markdown": "`Validate Cassandra required passwords are not empty.\n\nUsage:\n{{ include \"common.validations.values.cassandra.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\nParams:\n  - secret - String - Required. Name of the secret where Cassandra values are stored, e.g: \"cassandra-passwords-secret\"\n  - subchart - Boolean - Optional. Whether Cassandra is used as subchart or not. Default: false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_cassandra.tpl"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 28,
                  "endLine": 3,
                  "endColumn": 36,
                  "snippet": {
                    "text": "{{/* vim: set filetype=mustache: */}}\n{{/*\nValidate Cassandra required passwords are not empty.\n\nUsage:\n{{ include \"common.validations.values.cassandra.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\n",
                    "rendered": {
                      "text": "{{/* vim: set filetype=mustache: */}}\n{{/*\nValidate Cassandra required passwords are not empty.\n\nUsage:\n{{ include \"common.validations.values.cassandra.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\n",
                      "markdown": "`{{/* vim: set filetype=mustache: */}}\n{{/*\nValidate Cassandra required passwords are not empty.\n\nUsage:\n{{ include \"common.validations.values.cassandra.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_redis.tpl"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 85,
                  "endLine": 32,
                  "endColumn": 93,
                  "snippet": {
                    "text": "      {{- $requiredPasswords = append $requiredPasswords $requiredRedisPassword -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n  {{- end -}}\n{{- end -}}\n\n",
                    "rendered": {
                      "text": "      {{- $requiredPasswords = append $requiredPasswords $requiredRedisPassword -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n  {{- end -}}\n{{- end -}}\n\n",
                      "markdown": "`      {{- $requiredPasswords = append $requiredPasswords $requiredRedisPassword -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n  {{- end -}}\n{{- end -}}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_redis.tpl"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 71,
                  "endLine": 29,
                  "endColumn": 79,
                  "snippet": {
                    "text": "    {{- $useAuth := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyRedisUseAuth \"context\" .context) -}}\n    {{- if eq $useAuth \"true\" -}}\n      {{- $requiredRedisPassword := dict \"valueKey\" $valueKeyRedisPassword \"secret\" .secret \"field\" \"redis-password\" -}}\n      {{- $requiredPasswords = append $requiredPasswords $requiredRedisPassword -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n",
                    "rendered": {
                      "text": "    {{- $useAuth := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyRedisUseAuth \"context\" .context) -}}\n    {{- if eq $useAuth \"true\" -}}\n      {{- $requiredRedisPassword := dict \"valueKey\" $valueKeyRedisPassword \"secret\" .secret \"field\" \"redis-password\" -}}\n      {{- $requiredPasswords = append $requiredPasswords $requiredRedisPassword -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n",
                      "markdown": "`    {{- $useAuth := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyRedisUseAuth \"context\" .context) -}}\n    {{- if eq $useAuth \"true\" -}}\n      {{- $requiredRedisPassword := dict \"valueKey\" $valueKeyRedisPassword \"secret\" .secret \"field\" \"redis-password\" -}}\n      {{- $requiredPasswords = append $requiredPasswords $requiredRedisPassword -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_redis.tpl"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 47,
                  "endLine": 29,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    {{- $useAuth := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyRedisUseAuth \"context\" .context) -}}\n    {{- if eq $useAuth \"true\" -}}\n      {{- $requiredRedisPassword := dict \"valueKey\" $valueKeyRedisPassword \"secret\" .secret \"field\" \"redis-password\" -}}\n      {{- $requiredPasswords = append $requiredPasswords $requiredRedisPassword -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n",
                    "rendered": {
                      "text": "    {{- $useAuth := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyRedisUseAuth \"context\" .context) -}}\n    {{- if eq $useAuth \"true\" -}}\n      {{- $requiredRedisPassword := dict \"valueKey\" $valueKeyRedisPassword \"secret\" .secret \"field\" \"redis-password\" -}}\n      {{- $requiredPasswords = append $requiredPasswords $requiredRedisPassword -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n",
                      "markdown": "`    {{- $useAuth := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyRedisUseAuth \"context\" .context) -}}\n    {{- if eq $useAuth \"true\" -}}\n      {{- $requiredRedisPassword := dict \"valueKey\" $valueKeyRedisPassword \"secret\" .secret \"field\" \"redis-password\" -}}\n      {{- $requiredPasswords = append $requiredPasswords $requiredRedisPassword -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_redis.tpl"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 19,
                  "endLine": 29,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    {{- $useAuth := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyRedisUseAuth \"context\" .context) -}}\n    {{- if eq $useAuth \"true\" -}}\n      {{- $requiredRedisPassword := dict \"valueKey\" $valueKeyRedisPassword \"secret\" .secret \"field\" \"redis-password\" -}}\n      {{- $requiredPasswords = append $requiredPasswords $requiredRedisPassword -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n",
                    "rendered": {
                      "text": "    {{- $useAuth := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyRedisUseAuth \"context\" .context) -}}\n    {{- if eq $useAuth \"true\" -}}\n      {{- $requiredRedisPassword := dict \"valueKey\" $valueKeyRedisPassword \"secret\" .secret \"field\" \"redis-password\" -}}\n      {{- $requiredPasswords = append $requiredPasswords $requiredRedisPassword -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n",
                      "markdown": "`    {{- $useAuth := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyRedisUseAuth \"context\" .context) -}}\n    {{- if eq $useAuth \"true\" -}}\n      {{- $requiredRedisPassword := dict \"valueKey\" $valueKeyRedisPassword \"secret\" .secret \"field\" \"redis-password\" -}}\n      {{- $requiredPasswords = append $requiredPasswords $requiredRedisPassword -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_redis.tpl"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 107,
                  "endLine": 28,
                  "endColumn": 115,
                  "snippet": {
                    "text": "\n    {{- $useAuth := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyRedisUseAuth \"context\" .context) -}}\n    {{- if eq $useAuth \"true\" -}}\n      {{- $requiredRedisPassword := dict \"valueKey\" $valueKeyRedisPassword \"secret\" .secret \"field\" \"redis-password\" -}}\n      {{- $requiredPasswords = append $requiredPasswords $requiredRedisPassword -}}\n    {{- end -}}\n\n",
                    "rendered": {
                      "text": "\n    {{- $useAuth := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyRedisUseAuth \"context\" .context) -}}\n    {{- if eq $useAuth \"true\" -}}\n      {{- $requiredRedisPassword := dict \"valueKey\" $valueKeyRedisPassword \"secret\" .secret \"field\" \"redis-password\" -}}\n      {{- $requiredPasswords = append $requiredPasswords $requiredRedisPassword -}}\n    {{- end -}}\n\n",
                      "markdown": "`\n    {{- $useAuth := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyRedisUseAuth \"context\" .context) -}}\n    {{- if eq $useAuth \"true\" -}}\n      {{- $requiredRedisPassword := dict \"valueKey\" $valueKeyRedisPassword \"secret\" .secret \"field\" \"redis-password\" -}}\n      {{- $requiredPasswords = append $requiredPasswords $requiredRedisPassword -}}\n    {{- end -}}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_redis.tpl"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 66,
                  "endLine": 28,
                  "endColumn": 74,
                  "snippet": {
                    "text": "\n    {{- $useAuth := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyRedisUseAuth \"context\" .context) -}}\n    {{- if eq $useAuth \"true\" -}}\n      {{- $requiredRedisPassword := dict \"valueKey\" $valueKeyRedisPassword \"secret\" .secret \"field\" \"redis-password\" -}}\n      {{- $requiredPasswords = append $requiredPasswords $requiredRedisPassword -}}\n    {{- end -}}\n\n",
                    "rendered": {
                      "text": "\n    {{- $useAuth := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyRedisUseAuth \"context\" .context) -}}\n    {{- if eq $useAuth \"true\" -}}\n      {{- $requiredRedisPassword := dict \"valueKey\" $valueKeyRedisPassword \"secret\" .secret \"field\" \"redis-password\" -}}\n      {{- $requiredPasswords = append $requiredPasswords $requiredRedisPassword -}}\n    {{- end -}}\n\n",
                      "markdown": "`\n    {{- $useAuth := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyRedisUseAuth \"context\" .context) -}}\n    {{- if eq $useAuth \"true\" -}}\n      {{- $requiredRedisPassword := dict \"valueKey\" $valueKeyRedisPassword \"secret\" .secret \"field\" \"redis-password\" -}}\n      {{- $requiredPasswords = append $requiredPasswords $requiredRedisPassword -}}\n    {{- end -}}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_redis.tpl"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 24,
                  "endLine": 28,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n    {{- $useAuth := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyRedisUseAuth \"context\" .context) -}}\n    {{- if eq $useAuth \"true\" -}}\n      {{- $requiredRedisPassword := dict \"valueKey\" $valueKeyRedisPassword \"secret\" .secret \"field\" \"redis-password\" -}}\n      {{- $requiredPasswords = append $requiredPasswords $requiredRedisPassword -}}\n    {{- end -}}\n\n",
                    "rendered": {
                      "text": "\n    {{- $useAuth := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyRedisUseAuth \"context\" .context) -}}\n    {{- if eq $useAuth \"true\" -}}\n      {{- $requiredRedisPassword := dict \"valueKey\" $valueKeyRedisPassword \"secret\" .secret \"field\" \"redis-password\" -}}\n      {{- $requiredPasswords = append $requiredPasswords $requiredRedisPassword -}}\n    {{- end -}}\n\n",
                      "markdown": "`\n    {{- $useAuth := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyRedisUseAuth \"context\" .context) -}}\n    {{- if eq $useAuth \"true\" -}}\n      {{- $requiredRedisPassword := dict \"valueKey\" $valueKeyRedisPassword \"secret\" .secret \"field\" \"redis-password\" -}}\n      {{- $requiredPasswords = append $requiredPasswords $requiredRedisPassword -}}\n    {{- end -}}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_redis.tpl"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 17,
                  "endLine": 24,
                  "endColumn": 25,
                  "snippet": {
                    "text": "  {{- $valueKeyRedisUseAuth := ternary (printf \"%s%s\" $valueKeyPrefix \"auth.enabled\") (printf \"%s%s\" $valueKeyPrefix \"usePassword\") (eq $standarizedVersion \"true\") }}\n\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n\n    {{- $useAuth := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyRedisUseAuth \"context\" .context) -}}\n    {{- if eq $useAuth \"true\" -}}\n",
                    "rendered": {
                      "text": "  {{- $valueKeyRedisUseAuth := ternary (printf \"%s%s\" $valueKeyPrefix \"auth.enabled\") (printf \"%s%s\" $valueKeyPrefix \"usePassword\") (eq $standarizedVersion \"true\") }}\n\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n\n    {{- $useAuth := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyRedisUseAuth \"context\" .context) -}}\n    {{- if eq $useAuth \"true\" -}}\n",
                      "markdown": "`  {{- $valueKeyRedisUseAuth := ternary (printf \"%s%s\" $valueKeyPrefix \"auth.enabled\") (printf \"%s%s\" $valueKeyPrefix \"usePassword\") (eq $standarizedVersion \"true\") }}\n\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n\n    {{- $useAuth := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyRedisUseAuth \"context\" .context) -}}\n    {{- if eq $useAuth \"true\" -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_redis.tpl"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 121,
                  "endLine": 21,
                  "endColumn": 129,
                  "snippet": {
                    "text": "  {{- $existingSecretValue := include \"common.utils.getValueFromKey\" (dict \"key\" $existingSecret \"context\" .context) }}\n\n  {{- $valueKeyRedisPassword := ternary (printf \"%s%s\" $valueKeyPrefix \"auth.password\") (printf \"%s%s\" $valueKeyPrefix \"password\") (eq $standarizedVersion \"true\") }}\n  {{- $valueKeyRedisUseAuth := ternary (printf \"%s%s\" $valueKeyPrefix \"auth.enabled\") (printf \"%s%s\" $valueKeyPrefix \"usePassword\") (eq $standarizedVersion \"true\") }}\n\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n",
                    "rendered": {
                      "text": "  {{- $existingSecretValue := include \"common.utils.getValueFromKey\" (dict \"key\" $existingSecret \"context\" .context) }}\n\n  {{- $valueKeyRedisPassword := ternary (printf \"%s%s\" $valueKeyPrefix \"auth.password\") (printf \"%s%s\" $valueKeyPrefix \"password\") (eq $standarizedVersion \"true\") }}\n  {{- $valueKeyRedisUseAuth := ternary (printf \"%s%s\" $valueKeyPrefix \"auth.enabled\") (printf \"%s%s\" $valueKeyPrefix \"usePassword\") (eq $standarizedVersion \"true\") }}\n\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n",
                      "markdown": "`  {{- $existingSecretValue := include \"common.utils.getValueFromKey\" (dict \"key\" $existingSecret \"context\" .context) }}\n\n  {{- $valueKeyRedisPassword := ternary (printf \"%s%s\" $valueKeyPrefix \"auth.password\") (printf \"%s%s\" $valueKeyPrefix \"password\") (eq $standarizedVersion \"true\") }}\n  {{- $valueKeyRedisUseAuth := ternary (printf \"%s%s\" $valueKeyPrefix \"auth.enabled\") (printf \"%s%s\" $valueKeyPrefix \"usePassword\") (eq $standarizedVersion \"true\") }}\n\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_redis.tpl"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 120,
                  "endLine": 20,
                  "endColumn": 128,
                  "snippet": {
                    "text": "refix \"existingSecret\") (eq $standarizedVersion \"true\") }}\n  {{- $existingSecretValue := include \"common.utils.getValueFromKey\" (dict \"key\" $existingSecret \"context\" .context) }}\n\n  {{- $valueKeyRedisPassword := ternary (printf \"%s%s\" $valueKeyPrefix \"auth.password\") (printf \"%s%s\" $valueKeyPrefix \"password\") (eq $standarizedVersion \"true\") }}\n  {{- $valueKeyRedisUseAuth := ternary (printf \"%s%s\" $valueKeyPrefix \"auth.enabled\") (printf \"%s%s\" $valueKeyPrefix \"usePassword\") (eq $standarizedVersion \"true\") }}\n\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n ",
                    "rendered": {
                      "text": "refix \"existingSecret\") (eq $standarizedVersion \"true\") }}\n  {{- $existingSecretValue := include \"common.utils.getValueFromKey\" (dict \"key\" $existingSecret \"context\" .context) }}\n\n  {{- $valueKeyRedisPassword := ternary (printf \"%s%s\" $valueKeyPrefix \"auth.password\") (printf \"%s%s\" $valueKeyPrefix \"password\") (eq $standarizedVersion \"true\") }}\n  {{- $valueKeyRedisUseAuth := ternary (printf \"%s%s\" $valueKeyPrefix \"auth.enabled\") (printf \"%s%s\" $valueKeyPrefix \"usePassword\") (eq $standarizedVersion \"true\") }}\n\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n ",
                      "markdown": "`refix \"existingSecret\") (eq $standarizedVersion \"true\") }}\n  {{- $existingSecretValue := include \"common.utils.getValueFromKey\" (dict \"key\" $existingSecret \"context\" .context) }}\n\n  {{- $valueKeyRedisPassword := ternary (printf \"%s%s\" $valueKeyPrefix \"auth.password\") (printf \"%s%s\" $valueKeyPrefix \"password\") (eq $standarizedVersion \"true\") }}\n  {{- $valueKeyRedisUseAuth := ternary (printf \"%s%s\" $valueKeyPrefix \"auth.enabled\") (printf \"%s%s\" $valueKeyPrefix \"usePassword\") (eq $standarizedVersion \"true\") }}\n\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_redis.tpl"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 77,
                  "endLine": 20,
                  "endColumn": 85,
                  "snippet": {
                    "text": ".existingSecret\") (printf \"%s%s\" $valueKeyPrefix \"existingSecret\") (eq $standarizedVersion \"true\") }}\n  {{- $existingSecretValue := include \"common.utils.getValueFromKey\" (dict \"key\" $existingSecret \"context\" .context) }}\n\n  {{- $valueKeyRedisPassword := ternary (printf \"%s%s\" $valueKeyPrefix \"auth.password\") (printf \"%s%s\" $valueKeyPrefix \"password\") (eq $standarizedVersion \"true\") }}\n  {{- $valueKeyRedisUseAuth := ternary (printf \"%s%s\" $valueKeyPrefix \"auth.enabled\") (printf \"%s%s\" $valueKeyPrefix \"usePassword\") (eq $standarizedVersion \"true\") }}\n\n  {{- if and (or (not $existingSecret) (eq $existin",
                    "rendered": {
                      "text": ".existingSecret\") (printf \"%s%s\" $valueKeyPrefix \"existingSecret\") (eq $standarizedVersion \"true\") }}\n  {{- $existingSecretValue := include \"common.utils.getValueFromKey\" (dict \"key\" $existingSecret \"context\" .context) }}\n\n  {{- $valueKeyRedisPassword := ternary (printf \"%s%s\" $valueKeyPrefix \"auth.password\") (printf \"%s%s\" $valueKeyPrefix \"password\") (eq $standarizedVersion \"true\") }}\n  {{- $valueKeyRedisUseAuth := ternary (printf \"%s%s\" $valueKeyPrefix \"auth.enabled\") (printf \"%s%s\" $valueKeyPrefix \"usePassword\") (eq $standarizedVersion \"true\") }}\n\n  {{- if and (or (not $existingSecret) (eq $existin",
                      "markdown": "`.existingSecret\") (printf \"%s%s\" $valueKeyPrefix \"existingSecret\") (eq $standarizedVersion \"true\") }}\n  {{- $existingSecretValue := include \"common.utils.getValueFromKey\" (dict \"key\" $existingSecret \"context\" .context) }}\n\n  {{- $valueKeyRedisPassword := ternary (printf \"%s%s\" $valueKeyPrefix \"auth.password\") (printf \"%s%s\" $valueKeyPrefix \"password\") (eq $standarizedVersion \"true\") }}\n  {{- $valueKeyRedisUseAuth := ternary (printf \"%s%s\" $valueKeyPrefix \"auth.enabled\") (printf \"%s%s\" $valueKeyPrefix \"usePassword\") (eq $standarizedVersion \"true\") }}\n\n  {{- if and (or (not $existingSecret) (eq $existin`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_redis.tpl"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 20,
                  "endLine": 20,
                  "endColumn": 28,
                  "snippet": {
                    "text": "ingSecret := ternary (printf \"%s%s\" $valueKeyPrefix \"auth.existingSecret\") (printf \"%s%s\" $valueKeyPrefix \"existingSecret\") (eq $standarizedVersion \"true\") }}\n  {{- $existingSecretValue := include \"common.utils.getValueFromKey\" (dict \"key\" $existingSecret \"context\" .context) }}\n\n  {{- $valueKeyRedisPassword := ternary (printf \"%s%s\" $valueKeyPrefix \"auth.password\") (printf \"%s%s\" $valueKeyPrefix \"password\") (eq $standarizedVersion \"true\") }}\n  {{- $valueKeyRedisUseAuth := ternary (printf \"%s%s\" $valueKeyPrefix \"auth.enabled\") (printf \"%s%s\" $valueKeyPrefix \"usePassword\") (eq $standarizedVersion \"true\"",
                    "rendered": {
                      "text": "ingSecret := ternary (printf \"%s%s\" $valueKeyPrefix \"auth.existingSecret\") (printf \"%s%s\" $valueKeyPrefix \"existingSecret\") (eq $standarizedVersion \"true\") }}\n  {{- $existingSecretValue := include \"common.utils.getValueFromKey\" (dict \"key\" $existingSecret \"context\" .context) }}\n\n  {{- $valueKeyRedisPassword := ternary (printf \"%s%s\" $valueKeyPrefix \"auth.password\") (printf \"%s%s\" $valueKeyPrefix \"password\") (eq $standarizedVersion \"true\") }}\n  {{- $valueKeyRedisUseAuth := ternary (printf \"%s%s\" $valueKeyPrefix \"auth.enabled\") (printf \"%s%s\" $valueKeyPrefix \"usePassword\") (eq $standarizedVersion \"true\"",
                      "markdown": "`ingSecret := ternary (printf \"%s%s\" $valueKeyPrefix \"auth.existingSecret\") (printf \"%s%s\" $valueKeyPrefix \"existingSecret\") (eq $standarizedVersion \"true\") }}\n  {{- $existingSecretValue := include \"common.utils.getValueFromKey\" (dict \"key\" $existingSecret \"context\" .context) }}\n\n  {{- $valueKeyRedisPassword := ternary (printf \"%s%s\" $valueKeyPrefix \"auth.password\") (printf \"%s%s\" $valueKeyPrefix \"password\") (eq $standarizedVersion \"true\") }}\n  {{- $valueKeyRedisUseAuth := ternary (printf \"%s%s\" $valueKeyPrefix \"auth.enabled\") (printf \"%s%s\" $valueKeyPrefix \"usePassword\") (eq $standarizedVersion \"true\"`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_redis.tpl"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 44,
                  "endLine": 12,
                  "endColumn": 52,
                  "snippet": {
                    "text": "  - secret - String - Required. Name of the secret where redis values are stored, e.g: \"redis-passwords-secret\"\n  - subchart - Boolean - Optional. Whether redis is used as subchart or not. Default: false\n*/}}\n{{- define \"common.validations.values.redis.passwords\" -}}\n  {{- $enabled := include \"common.redis.values.enabled\" . -}}\n  {{- $valueKeyPrefix := include \"common.redis.values.keys.prefix\" . -}}\n  {{- $standarizedVersion := include \"common.redis.values.standarized.version\" . }}\n",
                    "rendered": {
                      "text": "  - secret - String - Required. Name of the secret where redis values are stored, e.g: \"redis-passwords-secret\"\n  - subchart - Boolean - Optional. Whether redis is used as subchart or not. Default: false\n*/}}\n{{- define \"common.validations.values.redis.passwords\" -}}\n  {{- $enabled := include \"common.redis.values.enabled\" . -}}\n  {{- $valueKeyPrefix := include \"common.redis.values.keys.prefix\" . -}}\n  {{- $standarizedVersion := include \"common.redis.values.standarized.version\" . }}\n",
                      "markdown": "`  - secret - String - Required. Name of the secret where redis values are stored, e.g: \"redis-passwords-secret\"\n  - subchart - Boolean - Optional. Whether redis is used as subchart or not. Default: false\n*/}}\n{{- define \"common.validations.values.redis.passwords\" -}}\n  {{- $enabled := include \"common.redis.values.enabled\" . -}}\n  {{- $valueKeyPrefix := include \"common.redis.values.keys.prefix\" . -}}\n  {{- $standarizedVersion := include \"common.redis.values.standarized.version\" . }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_redis.tpl"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 94,
                  "endLine": 9,
                  "endColumn": 102,
                  "snippet": {
                    "text": "Usage:\n{{ include \"common.validations.values.redis.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\nParams:\n  - secret - String - Required. Name of the secret where redis values are stored, e.g: \"redis-passwords-secret\"\n  - subchart - Boolean - Optional. Whether redis is used as subchart or not. Default: false\n*/}}\n{{- define \"common.validations.values.redis.passwords\" -}}\n",
                    "rendered": {
                      "text": "Usage:\n{{ include \"common.validations.values.redis.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\nParams:\n  - secret - String - Required. Name of the secret where redis values are stored, e.g: \"redis-passwords-secret\"\n  - subchart - Boolean - Optional. Whether redis is used as subchart or not. Default: false\n*/}}\n{{- define \"common.validations.values.redis.passwords\" -}}\n",
                      "markdown": "`Usage:\n{{ include \"common.validations.values.redis.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\nParams:\n  - secret - String - Required. Name of the secret where redis values are stored, e.g: \"redis-passwords-secret\"\n  - subchart - Boolean - Optional. Whether redis is used as subchart or not. Default: false\n*/}}\n{{- define \"common.validations.values.redis.passwords\" -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_redis.tpl"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 44,
                  "endLine": 7,
                  "endColumn": 52,
                  "snippet": {
                    "text": "Validate Redis&trade; required passwords are not empty.\n\nUsage:\n{{ include \"common.validations.values.redis.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\nParams:\n  - secret - String - Required. Name of the secret where redis values are stored, e.g: \"redis-passwords-secret\"\n  - subchart - Boolean - Optional. Whether redis is used as subchart or not. Default: false\n",
                    "rendered": {
                      "text": "Validate Redis&trade; required passwords are not empty.\n\nUsage:\n{{ include \"common.validations.values.redis.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\nParams:\n  - secret - String - Required. Name of the secret where redis values are stored, e.g: \"redis-passwords-secret\"\n  - subchart - Boolean - Optional. Whether redis is used as subchart or not. Default: false\n",
                      "markdown": "`Validate Redis&trade; required passwords are not empty.\n\nUsage:\n{{ include \"common.validations.values.redis.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\nParams:\n  - secret - String - Required. Name of the secret where redis values are stored, e.g: \"redis-passwords-secret\"\n  - subchart - Boolean - Optional. Whether redis is used as subchart or not. Default: false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_redis.tpl"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 31,
                  "endLine": 4,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\n{{/* vim: set filetype=mustache: */}}\n{{/*\nValidate Redis&trade; required passwords are not empty.\n\nUsage:\n{{ include \"common.validations.values.redis.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\n",
                    "rendered": {
                      "text": "\n{{/* vim: set filetype=mustache: */}}\n{{/*\nValidate Redis&trade; required passwords are not empty.\n\nUsage:\n{{ include \"common.validations.values.redis.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\n",
                      "markdown": "`\n{{/* vim: set filetype=mustache: */}}\n{{/*\nValidate Redis&trade; required passwords are not empty.\n\nUsage:\n{{ include \"common.validations.values.redis.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 305,
                  "startColumn": 99,
                  "endLine": 305,
                  "endColumn": 107,
                  "snippet": {
                    "text": "\n    'path.to.value01' must not be empty, please add '--set path.to.value01=$PASSWORD_01' to the command. To get the current value:\n\n        export PASSWORD_01=$(kubectl get secret --namespace default secretName -o jsonpath=\"{.data.password-01}\" | base64 --decode)\n```\n\n## Upgrading\n",
                    "rendered": {
                      "text": "\n    'path.to.value01' must not be empty, please add '--set path.to.value01=$PASSWORD_01' to the command. To get the current value:\n\n        export PASSWORD_01=$(kubectl get secret --namespace default secretName -o jsonpath=\"{.data.password-01}\" | base64 --decode)\n```\n\n## Upgrading\n",
                      "markdown": "`\n    'path.to.value01' must not be empty, please add '--set path.to.value01=$PASSWORD_01' to the command. To get the current value:\n\n        export PASSWORD_01=$(kubectl get secret --namespace default secretName -o jsonpath=\"{.data.password-01}\" | base64 --decode)\n```\n\n## Upgrading\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 305,
                  "startColumn": 15,
                  "endLine": 305,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n    'path.to.value01' must not be empty, please add '--set path.to.value01=$PASSWORD_01' to the command. To get the current value:\n\n        export PASSWORD_01=$(kubectl get secret --namespace default secretName -o jsonpath=\"{.data.password-01}\" | base64 --decode)\n```\n\n## Upgrading\n",
                    "rendered": {
                      "text": "\n    'path.to.value01' must not be empty, please add '--set path.to.value01=$PASSWORD_01' to the command. To get the current value:\n\n        export PASSWORD_01=$(kubectl get secret --namespace default secretName -o jsonpath=\"{.data.password-01}\" | base64 --decode)\n```\n\n## Upgrading\n",
                      "markdown": "`\n    'path.to.value01' must not be empty, please add '--set path.to.value01=$PASSWORD_01' to the command. To get the current value:\n\n        export PASSWORD_01=$(kubectl get secret --namespace default secretName -o jsonpath=\"{.data.password-01}\" | base64 --decode)\n```\n\n## Upgrading\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 76,
                  "endLine": 303,
                  "endColumn": 84,
                  "snippet": {
                    "text": "\n        export PASSWORD_00=$(kubectl get secret --namespace default secretName -o jsonpath=\"{.data.password-00}\" | base64 --decode)\n\n    'path.to.value01' must not be empty, please add '--set path.to.value01=$PASSWORD_01' to the command. To get the current value:\n\n        export PASSWORD_01=$(kubectl get secret --namespace default secretName -o jsonpath=\"{.data.password-01}\" | base64 --decode)\n```\n",
                    "rendered": {
                      "text": "\n        export PASSWORD_00=$(kubectl get secret --namespace default secretName -o jsonpath=\"{.data.password-00}\" | base64 --decode)\n\n    'path.to.value01' must not be empty, please add '--set path.to.value01=$PASSWORD_01' to the command. To get the current value:\n\n        export PASSWORD_01=$(kubectl get secret --namespace default secretName -o jsonpath=\"{.data.password-01}\" | base64 --decode)\n```\n",
                      "markdown": "`\n        export PASSWORD_00=$(kubectl get secret --namespace default secretName -o jsonpath=\"{.data.password-00}\" | base64 --decode)\n\n    'path.to.value01' must not be empty, please add '--set path.to.value01=$PASSWORD_01' to the command. To get the current value:\n\n        export PASSWORD_01=$(kubectl get secret --namespace default secretName -o jsonpath=\"{.data.password-01}\" | base64 --decode)\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 301,
                  "startColumn": 99,
                  "endLine": 301,
                  "endColumn": 107,
                  "snippet": {
                    "text": "$ helm install test mychart --set path.to.value00=\"\",path.to.value01=\"\"\n    'path.to.value00' must not be empty, please add '--set path.to.value00=$PASSWORD_00' to the command. To get the current value:\n\n        export PASSWORD_00=$(kubectl get secret --namespace default secretName -o jsonpath=\"{.data.password-00}\" | base64 --decode)\n\n    'path.to.value01' must not be empty, please add '--set path.to.value01=$PASSWORD_01' to the command. To get the current value:\n\n",
                    "rendered": {
                      "text": "$ helm install test mychart --set path.to.value00=\"\",path.to.value01=\"\"\n    'path.to.value00' must not be empty, please add '--set path.to.value00=$PASSWORD_00' to the command. To get the current value:\n\n        export PASSWORD_00=$(kubectl get secret --namespace default secretName -o jsonpath=\"{.data.password-00}\" | base64 --decode)\n\n    'path.to.value01' must not be empty, please add '--set path.to.value01=$PASSWORD_01' to the command. To get the current value:\n\n",
                      "markdown": "`$ helm install test mychart --set path.to.value00=\"\",path.to.value01=\"\"\n    'path.to.value00' must not be empty, please add '--set path.to.value00=$PASSWORD_00' to the command. To get the current value:\n\n        export PASSWORD_00=$(kubectl get secret --namespace default secretName -o jsonpath=\"{.data.password-00}\" | base64 --decode)\n\n    'path.to.value01' must not be empty, please add '--set path.to.value01=$PASSWORD_01' to the command. To get the current value:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 301,
                  "startColumn": 15,
                  "endLine": 301,
                  "endColumn": 23,
                  "snippet": {
                    "text": "$ helm install test mychart --set path.to.value00=\"\",path.to.value01=\"\"\n    'path.to.value00' must not be empty, please add '--set path.to.value00=$PASSWORD_00' to the command. To get the current value:\n\n        export PASSWORD_00=$(kubectl get secret --namespace default secretName -o jsonpath=\"{.data.password-00}\" | base64 --decode)\n\n    'path.to.value01' must not be empty, please add '--set path.to.value01=$PASSWORD_01' to the command. To get the current value:\n\n",
                    "rendered": {
                      "text": "$ helm install test mychart --set path.to.value00=\"\",path.to.value01=\"\"\n    'path.to.value00' must not be empty, please add '--set path.to.value00=$PASSWORD_00' to the command. To get the current value:\n\n        export PASSWORD_00=$(kubectl get secret --namespace default secretName -o jsonpath=\"{.data.password-00}\" | base64 --decode)\n\n    'path.to.value01' must not be empty, please add '--set path.to.value01=$PASSWORD_01' to the command. To get the current value:\n\n",
                      "markdown": "`$ helm install test mychart --set path.to.value00=\"\",path.to.value01=\"\"\n    'path.to.value00' must not be empty, please add '--set path.to.value00=$PASSWORD_00' to the command. To get the current value:\n\n        export PASSWORD_00=$(kubectl get secret --namespace default secretName -o jsonpath=\"{.data.password-00}\" | base64 --decode)\n\n    'path.to.value01' must not be empty, please add '--set path.to.value01=$PASSWORD_01' to the command. To get the current value:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 299,
                  "startColumn": 76,
                  "endLine": 299,
                  "endColumn": 84,
                  "snippet": {
                    "text": "\n```console\n$ helm install test mychart --set path.to.value00=\"\",path.to.value01=\"\"\n    'path.to.value00' must not be empty, please add '--set path.to.value00=$PASSWORD_00' to the command. To get the current value:\n\n        export PASSWORD_00=$(kubectl get secret --namespace default secretName -o jsonpath=\"{.data.password-00}\" | base64 --decode)\n\n",
                    "rendered": {
                      "text": "\n```console\n$ helm install test mychart --set path.to.value00=\"\",path.to.value01=\"\"\n    'path.to.value00' must not be empty, please add '--set path.to.value00=$PASSWORD_00' to the command. To get the current value:\n\n        export PASSWORD_00=$(kubectl get secret --namespace default secretName -o jsonpath=\"{.data.password-00}\" | base64 --decode)\n\n",
                      "markdown": "`\n```console\n$ helm install test mychart --set path.to.value00=\"\",path.to.value01=\"\"\n    'path.to.value00' must not be empty, please add '--set path.to.value00=$PASSWORD_00' to the command. To get the current value:\n\n        export PASSWORD_00=$(kubectl get secret --namespace default secretName -o jsonpath=\"{.data.password-00}\" | base64 --decode)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 290,
                  "startColumn": 94,
                  "endLine": 290,
                  "endColumn": 102,
                  "snippet": {
                    "text": "\n```console\n{{- $validateValueConf00 := (dict \"valueKey\" \"path.to.value00\" \"secret\" \"secretName\" \"field\" \"password-00\") -}}\n{{- $validateValueConf01 := (dict \"valueKey\" \"path.to.value01\" \"secret\" \"secretName\" \"field\" \"password-01\") -}}\n\n{{ include \"common.validations.values.multiple.empty\" (dict \"required\" (list $validateValueConf00 $validateValueConf01) \"context\" $) }}\n```\n",
                    "rendered": {
                      "text": "\n```console\n{{- $validateValueConf00 := (dict \"valueKey\" \"path.to.value00\" \"secret\" \"secretName\" \"field\" \"password-00\") -}}\n{{- $validateValueConf01 := (dict \"valueKey\" \"path.to.value01\" \"secret\" \"secretName\" \"field\" \"password-01\") -}}\n\n{{ include \"common.validations.values.multiple.empty\" (dict \"required\" (list $validateValueConf00 $validateValueConf01) \"context\" $) }}\n```\n",
                      "markdown": "`\n```console\n{{- $validateValueConf00 := (dict \"valueKey\" \"path.to.value00\" \"secret\" \"secretName\" \"field\" \"password-00\") -}}\n{{- $validateValueConf01 := (dict \"valueKey\" \"path.to.value01\" \"secret\" \"secretName\" \"field\" \"password-01\") -}}\n\n{{ include \"common.validations.values.multiple.empty\" (dict \"required\" (list $validateValueConf00 $validateValueConf01) \"context\" $) }}\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 94,
                  "endLine": 289,
                  "endColumn": 102,
                  "snippet": {
                    "text": "#### NOTES.txt\n\n```console\n{{- $validateValueConf00 := (dict \"valueKey\" \"path.to.value00\" \"secret\" \"secretName\" \"field\" \"password-00\") -}}\n{{- $validateValueConf01 := (dict \"valueKey\" \"path.to.value01\" \"secret\" \"secretName\" \"field\" \"password-01\") -}}\n\n{{ include \"common.validations.values.multiple.empty\" (dict \"required\" (list $validateValueConf00 $validateValueConf01) \"context\" $) }}\n",
                    "rendered": {
                      "text": "#### NOTES.txt\n\n```console\n{{- $validateValueConf00 := (dict \"valueKey\" \"path.to.value00\" \"secret\" \"secretName\" \"field\" \"password-00\") -}}\n{{- $validateValueConf01 := (dict \"valueKey\" \"path.to.value01\" \"secret\" \"secretName\" \"field\" \"password-01\") -}}\n\n{{ include \"common.validations.values.multiple.empty\" (dict \"required\" (list $validateValueConf00 $validateValueConf01) \"context\" $) }}\n",
                      "markdown": "`#### NOTES.txt\n\n```console\n{{- $validateValueConf00 := (dict \"valueKey\" \"path.to.value00\" \"secret\" \"secretName\" \"field\" \"password-00\") -}}\n{{- $validateValueConf01 := (dict \"valueKey\" \"path.to.value01\" \"secret\" \"secretName\" \"field\" \"password-01\") -}}\n\n{{ include \"common.validations.values.multiple.empty\" (dict \"required\" (list $validateValueConf00 $validateValueConf01) \"context\" $) }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 281,
                  "startColumn": 14,
                  "endLine": 281,
                  "endColumn": 22,
                  "snippet": {
                    "text": "---\nname: mySecret\nkeyMapping:\n  password: myPasswordKey\n```\n\n### ValidateValue\n",
                    "rendered": {
                      "text": "---\nname: mySecret\nkeyMapping:\n  password: myPasswordKey\n```\n\n### ValidateValue\n",
                      "markdown": "`---\nname: mySecret\nkeyMapping:\n  password: myPasswordKey\n```\n\n### ValidateValue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 281,
                  "startColumn": 2,
                  "endLine": 281,
                  "endColumn": 10,
                  "snippet": {
                    "text": "---\nname: mySecret\nkeyMapping:\n  password: myPasswordKey\n```\n\n### ValidateValue\n",
                    "rendered": {
                      "text": "---\nname: mySecret\nkeyMapping:\n  password: myPasswordKey\n```\n\n### ValidateValue\n",
                      "markdown": "`---\nname: mySecret\nkeyMapping:\n  password: myPasswordKey\n```\n\n### ValidateValue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 104,
                  "endLine": 274,
                  "endColumn": 112,
                  "snippet": {
                    "text": "          valueFrom:\n            secretKeyRef:\n              name: {{ include \"common.secrets.name\" (dict \"existingSecret\" .Values.existingSecret \"context\" $) }}\n              key: {{ include \"common.secrets.key\" (dict \"existingSecret\" .Values.existingSecret \"key\" \"password\") }}\n...\n\n# values.yaml\n",
                    "rendered": {
                      "text": "          valueFrom:\n            secretKeyRef:\n              name: {{ include \"common.secrets.name\" (dict \"existingSecret\" .Values.existingSecret \"context\" $) }}\n              key: {{ include \"common.secrets.key\" (dict \"existingSecret\" .Values.existingSecret \"key\" \"password\") }}\n...\n\n# values.yaml\n",
                      "markdown": "`          valueFrom:\n            secretKeyRef:\n              name: {{ include \"common.secrets.name\" (dict \"existingSecret\" .Values.existingSecret \"context\" $) }}\n              key: {{ include \"common.secrets.key\" (dict \"existingSecret\" .Values.existingSecret \"key\" \"password\") }}\n...\n\n# values.yaml\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 12,
                  "endLine": 272,
                  "endColumn": 21,
                  "snippet": {
                    "text": "      env:\n        - name: PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: {{ include \"common.secrets.name\" (dict \"existingSecret\" .Values.existingSecret \"context\" $) }}\n              key: {{ include \"common.secrets.key\" (dict \"existingSecret\" .Values.existingSecret \"key\" \"password\") }}\n...\n",
                    "rendered": {
                      "text": "      env:\n        - name: PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: {{ include \"common.secrets.name\" (dict \"existingSecret\" .Values.existingSecret \"context\" $) }}\n              key: {{ include \"common.secrets.key\" (dict \"existingSecret\" .Values.existingSecret \"key\" \"password\") }}\n...\n",
                      "markdown": "`      env:\n        - name: PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: {{ include \"common.secrets.name\" (dict \"existingSecret\" .Values.existingSecret \"context\" $) }}\n              key: {{ include \"common.secrets.key\" (dict \"existingSecret\" .Values.existingSecret \"key\" \"password\") }}\n...\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 270,
                  "startColumn": 16,
                  "endLine": 270,
                  "endColumn": 24,
                  "snippet": {
                    "text": "---\n...\n      env:\n        - name: PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: {{ include \"common.secrets.name\" (dict \"existingSecret\" .Values.existingSecret \"context\" $) }}\n",
                    "rendered": {
                      "text": "---\n...\n      env:\n        - name: PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: {{ include \"common.secrets.name\" (dict \"existingSecret\" .Values.existingSecret \"context\" $) }}\n",
                      "markdown": "`---\n...\n      env:\n        - name: PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: {{ include \"common.secrets.name\" (dict \"existingSecret\" .Values.existingSecret \"context\" $) }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 264,
                  "startColumn": 23,
                  "endLine": 264,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    app: {{ include \"common.names.fullname\" . }}\ntype: Opaque\ndata:\n  password: {{ .Values.password | b64enc | quote }}\n\n# templates/dpl.yaml\n---\n",
                    "rendered": {
                      "text": "    app: {{ include \"common.names.fullname\" . }}\ntype: Opaque\ndata:\n  password: {{ .Values.password | b64enc | quote }}\n\n# templates/dpl.yaml\n---\n",
                      "markdown": "`    app: {{ include \"common.names.fullname\" . }}\ntype: Opaque\ndata:\n  password: {{ .Values.password | b64enc | quote }}\n\n# templates/dpl.yaml\n---\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 264,
                  "startColumn": 2,
                  "endLine": 264,
                  "endColumn": 10,
                  "snippet": {
                    "text": "    app: {{ include \"common.names.fullname\" . }}\ntype: Opaque\ndata:\n  password: {{ .Values.password | b64enc | quote }}\n\n# templates/dpl.yaml\n---\n",
                    "rendered": {
                      "text": "    app: {{ include \"common.names.fullname\" . }}\ntype: Opaque\ndata:\n  password: {{ .Values.password | b64enc | quote }}\n\n# templates/dpl.yaml\n---\n",
                      "markdown": "`    app: {{ include \"common.names.fullname\" . }}\ntype: Opaque\ndata:\n  password: {{ .Values.password | b64enc | quote }}\n\n# templates/dpl.yaml\n---\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 246,
                  "startColumn": 16,
                  "endLine": 246,
                  "endColumn": 24,
                  "snippet": {
                    "text": "## An instance would be:\n# name: mySecret\n# keyMapping:\n#   password: myPasswordKey\n```\n\n#### Example of use\n",
                    "rendered": {
                      "text": "## An instance would be:\n# name: mySecret\n# keyMapping:\n#   password: myPasswordKey\n```\n\n#### Example of use\n",
                      "markdown": "`## An instance would be:\n# name: mySecret\n# keyMapping:\n#   password: myPasswordKey\n```\n\n#### Example of use\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 246,
                  "startColumn": 4,
                  "endLine": 246,
                  "endColumn": 12,
                  "snippet": {
                    "text": "## An instance would be:\n# name: mySecret\n# keyMapping:\n#   password: myPasswordKey\n```\n\n#### Example of use\n",
                    "rendered": {
                      "text": "## An instance would be:\n# name: mySecret\n# keyMapping:\n#   password: myPasswordKey\n```\n\n#### Example of use\n",
                      "markdown": "`## An instance would be:\n# name: mySecret\n# keyMapping:\n#   password: myPasswordKey\n```\n\n#### Example of use\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 86,
                  "endLine": 145,
                  "endColumn": 94,
                  "snippet": {
                    "text": "context\" $` subchart field is optional and could be true or false it depends on where you will use cassandra chart and the helper.                                                                                  |\n| `common.validations.values.mongodb.passwords`    | This helper will ensure required password for MongoDB&reg; are not empty. It returns a shared error for all the values.            | `dict \"secret\" \"mongodb-secret\" \"subchart\" \"true\" \"context\" $` subchart field is optional and could be true or false it depends on where you will use mongodb chart and the helper.                             ",
                    "rendered": {
                      "text": "context\" $` subchart field is optional and could be true or false it depends on where you will use cassandra chart and the helper.                                                                                  |\n| `common.validations.values.mongodb.passwords`    | This helper will ensure required password for MongoDB&reg; are not empty. It returns a shared error for all the values.            | `dict \"secret\" \"mongodb-secret\" \"subchart\" \"true\" \"context\" $` subchart field is optional and could be true or false it depends on where you will use mongodb chart and the helper.                             ",
                      "markdown": "`context\" $` subchart field is optional and could be true or false it depends on where you will use cassandra chart and the helper.                                                                                  |\n| `common.validations.values.mongodb.passwords`    | This helper will ensure required password for MongoDB&reg; are not empty. It returns a shared error for all the values.            | `dict \"secret\" \"mongodb-secret\" \"subchart\" \"true\" \"context\" $` subchart field is optional and could be true or false it depends on where you will use mongodb chart and the helper.                             `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 37,
                  "endLine": 145,
                  "endColumn": 45,
                  "snippet": {
                    "text": "t \"secret\" \"cassandra-secret\" \"subchart\" \"true\" \"context\" $` subchart field is optional and could be true or false it depends on where you will use cassandra chart and the helper.                                                                                  |\n| `common.validations.values.mongodb.passwords`    | This helper will ensure required password for MongoDB&reg; are not empty. It returns a shared error for all the values.            | `dict \"secret\" \"mongodb-secret\" \"subchart\" \"true\" \"context\" $` subchart field is optional and could be true or false it depends on where you will use mongodb c",
                    "rendered": {
                      "text": "t \"secret\" \"cassandra-secret\" \"subchart\" \"true\" \"context\" $` subchart field is optional and could be true or false it depends on where you will use cassandra chart and the helper.                                                                                  |\n| `common.validations.values.mongodb.passwords`    | This helper will ensure required password for MongoDB&reg; are not empty. It returns a shared error for all the values.            | `dict \"secret\" \"mongodb-secret\" \"subchart\" \"true\" \"context\" $` subchart field is optional and could be true or false it depends on where you will use mongodb c",
                      "markdown": "`t \"secret\" \"cassandra-secret\" \"subchart\" \"true\" \"context\" $` subchart field is optional and could be true or false it depends on where you will use cassandra chart and the helper.                                                                                  |\n| `common.validations.values.mongodb.passwords`    | This helper will ensure required password for MongoDB&reg; are not empty. It returns a shared error for all the values.            | `dict \"secret\" \"mongodb-secret\" \"subchart\" \"true\" \"context\" $` subchart field is optional and could be true or false it depends on where you will use mongodb c`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 86,
                  "endLine": 144,
                  "endColumn": 94,
                  "snippet": {
                    "text": "ext\" $` subchart field is optional and could be true or false it depends on where you will use redis chart and the helper.                                                                                          |\n| `common.validations.values.cassandra.passwords`  | This helper will ensure required password for Cassandra are not empty. It returns a shared error for all the values.          | `dict \"secret\" \"cassandra-secret\" \"subchart\" \"true\" \"context\" $` subchart field is optional and could be true or false it depends on where you will use cassandra chart and the helper.                              ",
                    "rendered": {
                      "text": "ext\" $` subchart field is optional and could be true or false it depends on where you will use redis chart and the helper.                                                                                          |\n| `common.validations.values.cassandra.passwords`  | This helper will ensure required password for Cassandra are not empty. It returns a shared error for all the values.          | `dict \"secret\" \"cassandra-secret\" \"subchart\" \"true\" \"context\" $` subchart field is optional and could be true or false it depends on where you will use cassandra chart and the helper.                              ",
                      "markdown": "`ext\" $` subchart field is optional and could be true or false it depends on where you will use redis chart and the helper.                                                                                          |\n| `common.validations.values.cassandra.passwords`  | This helper will ensure required password for Cassandra are not empty. It returns a shared error for all the values.          | `dict \"secret\" \"cassandra-secret\" \"subchart\" \"true\" \"context\" $` subchart field is optional and could be true or false it depends on where you will use cassandra chart and the helper.                              `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 39,
                  "endLine": 144,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\"secret\" \"redis-secret\" \"subchart\" \"true\" \"context\" $` subchart field is optional and could be true or false it depends on where you will use redis chart and the helper.                                                                                          |\n| `common.validations.values.cassandra.passwords`  | This helper will ensure required password for Cassandra are not empty. It returns a shared error for all the values.          | `dict \"secret\" \"cassandra-secret\" \"subchart\" \"true\" \"context\" $` subchart field is optional and could be true or false it depends on where you will use cassandra char",
                    "rendered": {
                      "text": "\"secret\" \"redis-secret\" \"subchart\" \"true\" \"context\" $` subchart field is optional and could be true or false it depends on where you will use redis chart and the helper.                                                                                          |\n| `common.validations.values.cassandra.passwords`  | This helper will ensure required password for Cassandra are not empty. It returns a shared error for all the values.          | `dict \"secret\" \"cassandra-secret\" \"subchart\" \"true\" \"context\" $` subchart field is optional and could be true or false it depends on where you will use cassandra char",
                      "markdown": "`\"secret\" \"redis-secret\" \"subchart\" \"true\" \"context\" $` subchart field is optional and could be true or false it depends on where you will use redis chart and the helper.                                                                                          |\n| `common.validations.values.cassandra.passwords`  | This helper will ensure required password for Cassandra are not empty. It returns a shared error for all the values.          | `dict \"secret\" \"cassandra-secret\" \"subchart\" \"true\" \"context\" $` subchart field is optional and could be true or false it depends on where you will use cassandra char`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 86,
                  "endLine": 143,
                  "endColumn": 94,
                  "snippet": {
                    "text": "\"context\" $` subchart field is optional and could be true or false it depends on where you will use postgresql chart and the helper.                                                                                |\n| `common.validations.values.redis.passwords`      | This helper will ensure required password for Redis&trade; are not empty. It returns a shared error for all the values. | `dict \"secret\" \"redis-secret\" \"subchart\" \"true\" \"context\" $` subchart field is optional and could be true or false it depends on where you will use redis chart and the helper.                                            ",
                    "rendered": {
                      "text": "\"context\" $` subchart field is optional and could be true or false it depends on where you will use postgresql chart and the helper.                                                                                |\n| `common.validations.values.redis.passwords`      | This helper will ensure required password for Redis&trade; are not empty. It returns a shared error for all the values. | `dict \"secret\" \"redis-secret\" \"subchart\" \"true\" \"context\" $` subchart field is optional and could be true or false it depends on where you will use redis chart and the helper.                                            ",
                      "markdown": "`\"context\" $` subchart field is optional and could be true or false it depends on where you will use postgresql chart and the helper.                                                                                |\n| `common.validations.values.redis.passwords`      | This helper will ensure required password for Redis&trade; are not empty. It returns a shared error for all the values. | `dict \"secret\" \"redis-secret\" \"subchart\" \"true\" \"context\" $` subchart field is optional and could be true or false it depends on where you will use redis chart and the helper.                                            `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 35,
                  "endLine": 143,
                  "endColumn": 43,
                  "snippet": {
                    "text": "ict \"secret\" \"postgresql-secret\" \"subchart\" \"true\" \"context\" $` subchart field is optional and could be true or false it depends on where you will use postgresql chart and the helper.                                                                                |\n| `common.validations.values.redis.passwords`      | This helper will ensure required password for Redis&trade; are not empty. It returns a shared error for all the values. | `dict \"secret\" \"redis-secret\" \"subchart\" \"true\" \"context\" $` subchart field is optional and could be true or false it depends on where you will use redis chart and the ",
                    "rendered": {
                      "text": "ict \"secret\" \"postgresql-secret\" \"subchart\" \"true\" \"context\" $` subchart field is optional and could be true or false it depends on where you will use postgresql chart and the helper.                                                                                |\n| `common.validations.values.redis.passwords`      | This helper will ensure required password for Redis&trade; are not empty. It returns a shared error for all the values. | `dict \"secret\" \"redis-secret\" \"subchart\" \"true\" \"context\" $` subchart field is optional and could be true or false it depends on where you will use redis chart and the ",
                      "markdown": "`ict \"secret\" \"postgresql-secret\" \"subchart\" \"true\" \"context\" $` subchart field is optional and could be true or false it depends on where you will use postgresql chart and the helper.                                                                                |\n| `common.validations.values.redis.passwords`      | This helper will ensure required password for Redis&trade; are not empty. It returns a shared error for all the values. | `dict \"secret\" \"redis-secret\" \"subchart\" \"true\" \"context\" $` subchart field is optional and could be true or false it depends on where you will use redis chart and the `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 86,
                  "endLine": 142,
                  "endColumn": 94,
                  "snippet": {
                    "text": "ntext\" $` subchart field is optional and could be true or false it depends on where you will use mariadb chart and the helper.                                                                                      |\n| `common.validations.values.postgresql.passwords` | This helper will ensure required password for PostgreSQL are not empty. It returns a shared error for all the values.         | `dict \"secret\" \"postgresql-secret\" \"subchart\" \"true\" \"context\" $` subchart field is optional and could be true or false it depends on where you will use postgresql chart and the helper.                            ",
                    "rendered": {
                      "text": "ntext\" $` subchart field is optional and could be true or false it depends on where you will use mariadb chart and the helper.                                                                                      |\n| `common.validations.values.postgresql.passwords` | This helper will ensure required password for PostgreSQL are not empty. It returns a shared error for all the values.         | `dict \"secret\" \"postgresql-secret\" \"subchart\" \"true\" \"context\" $` subchart field is optional and could be true or false it depends on where you will use postgresql chart and the helper.                            ",
                      "markdown": "`ntext\" $` subchart field is optional and could be true or false it depends on where you will use mariadb chart and the helper.                                                                                      |\n| `common.validations.values.postgresql.passwords` | This helper will ensure required password for PostgreSQL are not empty. It returns a shared error for all the values.         | `dict \"secret\" \"postgresql-secret\" \"subchart\" \"true\" \"context\" $` subchart field is optional and could be true or false it depends on where you will use postgresql chart and the helper.                            `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 40,
                  "endLine": 142,
                  "endColumn": 48,
                  "snippet": {
                    "text": "secret\" \"mariadb-secret\" \"subchart\" \"true\" \"context\" $` subchart field is optional and could be true or false it depends on where you will use mariadb chart and the helper.                                                                                      |\n| `common.validations.values.postgresql.passwords` | This helper will ensure required password for PostgreSQL are not empty. It returns a shared error for all the values.         | `dict \"secret\" \"postgresql-secret\" \"subchart\" \"true\" \"context\" $` subchart field is optional and could be true or false it depends on where you will use postgresql cha",
                    "rendered": {
                      "text": "secret\" \"mariadb-secret\" \"subchart\" \"true\" \"context\" $` subchart field is optional and could be true or false it depends on where you will use mariadb chart and the helper.                                                                                      |\n| `common.validations.values.postgresql.passwords` | This helper will ensure required password for PostgreSQL are not empty. It returns a shared error for all the values.         | `dict \"secret\" \"postgresql-secret\" \"subchart\" \"true\" \"context\" $` subchart field is optional and could be true or false it depends on where you will use postgresql cha",
                      "markdown": "`secret\" \"mariadb-secret\" \"subchart\" \"true\" \"context\" $` subchart field is optional and could be true or false it depends on where you will use mariadb chart and the helper.                                                                                      |\n| `common.validations.values.postgresql.passwords` | This helper will ensure required password for PostgreSQL are not empty. It returns a shared error for all the values.         | `dict \"secret\" \"postgresql-secret\" \"subchart\" \"true\" \"context\" $` subchart field is optional and could be true or false it depends on where you will use postgresql cha`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 86,
                  "endLine": 141,
                  "endColumn": 94,
                  "snippet": {
                    "text": "ValueConf01) \"context\" $`. See [ValidateValue](#validatevalue)                                                                                                                                                      |\n| `common.validations.values.mariadb.passwords`    | This helper will ensure required password for MariaDB are not empty. It returns a shared error for all the values.            | `dict \"secret\" \"mariadb-secret\" \"subchart\" \"true\" \"context\" $` subchart field is optional and could be true or false it depends on where you will use mariadb chart and the helper.                                  ",
                    "rendered": {
                      "text": "ValueConf01) \"context\" $`. See [ValidateValue](#validatevalue)                                                                                                                                                      |\n| `common.validations.values.mariadb.passwords`    | This helper will ensure required password for MariaDB are not empty. It returns a shared error for all the values.            | `dict \"secret\" \"mariadb-secret\" \"subchart\" \"true\" \"context\" $` subchart field is optional and could be true or false it depends on where you will use mariadb chart and the helper.                                  ",
                      "markdown": "`ValueConf01) \"context\" $`. See [ValidateValue](#validatevalue)                                                                                                                                                      |\n| `common.validations.values.mariadb.passwords`    | This helper will ensure required password for MariaDB are not empty. It returns a shared error for all the values.            | `dict \"secret\" \"mariadb-secret\" \"subchart\" \"true\" \"context\" $` subchart field is optional and could be true or false it depends on where you will use mariadb chart and the helper.                                  `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 37,
                  "endLine": 141,
                  "endColumn": 45,
                  "snippet": {
                    "text": "t \"required\" (list $validateValueConf00 $validateValueConf01) \"context\" $`. See [ValidateValue](#validatevalue)                                                                                                                                                      |\n| `common.validations.values.mariadb.passwords`    | This helper will ensure required password for MariaDB are not empty. It returns a shared error for all the values.            | `dict \"secret\" \"mariadb-secret\" \"subchart\" \"true\" \"context\" $` subchart field is optional and could be true or false it depends on where you will use mariadb chart ",
                    "rendered": {
                      "text": "t \"required\" (list $validateValueConf00 $validateValueConf01) \"context\" $`. See [ValidateValue](#validatevalue)                                                                                                                                                      |\n| `common.validations.values.mariadb.passwords`    | This helper will ensure required password for MariaDB are not empty. It returns a shared error for all the values.            | `dict \"secret\" \"mariadb-secret\" \"subchart\" \"true\" \"context\" $` subchart field is optional and could be true or false it depends on where you will use mariadb chart ",
                      "markdown": "`t \"required\" (list $validateValueConf00 $validateValueConf01) \"context\" $`. See [ValidateValue](#validatevalue)                                                                                                                                                      |\n| `common.validations.values.mariadb.passwords`    | This helper will ensure required password for MariaDB are not empty. It returns a shared error for all the values.            | `dict \"secret\" \"mariadb-secret\" \"subchart\" \"true\" \"context\" $` subchart field is optional and could be true or false it depends on where you will use mariadb chart `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 249,
                  "endLine": 139,
                  "endColumn": 257,
                  "snippet": {
                    "text": "-------------------------------------------------|\n| `common.validations.values.single.empty`         | Validate a value must not be empty.                                                                                           | `dict \"valueKey\" \"path.to.value\" \"secret\" \"secret.name\" \"field\" \"my-password\" \"subchart\" \"subchart\" \"context\" $` secret, field and subchart are optional. In case they are given, the helper will generate a how to get instruction. See [ValidateValue](#validatevalue) |\n| `common.validations.values.multiple.empty`       | Validate a multiple values must not be empty. It returns",
                    "rendered": {
                      "text": "-------------------------------------------------|\n| `common.validations.values.single.empty`         | Validate a value must not be empty.                                                                                           | `dict \"valueKey\" \"path.to.value\" \"secret\" \"secret.name\" \"field\" \"my-password\" \"subchart\" \"subchart\" \"context\" $` secret, field and subchart are optional. In case they are given, the helper will generate a how to get instruction. See [ValidateValue](#validatevalue) |\n| `common.validations.values.multiple.empty`       | Validate a multiple values must not be empty. It returns",
                      "markdown": "`-------------------------------------------------|\n| `common.validations.values.single.empty`         | Validate a value must not be empty.                                                                                           | `dict \"valueKey\" \"path.to.value\" \"secret\" \"secret.name\" \"field\" \"my-password\" \"subchart\" \"subchart\" \"context\" $` secret, field and subchart are optional. In case they are given, the helper will generate a how to get instruction. See [ValidateValue](#validatevalue) |\n| `common.validations.values.multiple.empty`       | Validate a multiple values must not be empty. It returns`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 144,
                  "endLine": 130,
                  "endColumn": 152,
                  "snippet": {
                    "text": "---------------------------------------------------------------------------------|------------------------------------------------------------------------|\n| `common.utils.fieldToEnvVar`   | Build environment variable name given a field.                                           | `dict \"field\" \"my-password\"`                                           |\n| `common.utils.secret.getvalue` | Print instructions to get a secret value.                                                | `dict \"secret\" \"secret-name\" \"field\" \"secret-value-field\" \"context\" $` |\n| `common.utils.getValueFromKey` | Gets a value from `",
                    "rendered": {
                      "text": "---------------------------------------------------------------------------------|------------------------------------------------------------------------|\n| `common.utils.fieldToEnvVar`   | Build environment variable name given a field.                                           | `dict \"field\" \"my-password\"`                                           |\n| `common.utils.secret.getvalue` | Print instructions to get a secret value.                                                | `dict \"secret\" \"secret-name\" \"field\" \"secret-value-field\" \"context\" $` |\n| `common.utils.getValueFromKey` | Gets a value from `",
                      "markdown": "`---------------------------------------------------------------------------------|------------------------------------------------------------------------|\n| `common.utils.fieldToEnvVar`   | Build environment variable name given a field.                                           | `dict \"field\" \"my-password\"`                                           |\n| `common.utils.secret.getvalue` | Print instructions to get a secret value.                                                | `dict \"secret\" \"secret-name\" \"field\" \"secret-value-field\" \"context\" $` |\n| `common.utils.getValueFromKey` | Gets a value from ``"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 190,
                  "endLine": 111,
                  "endColumn": 198,
                  "snippet": {
                    "text": " the structure.                                                                                             |\n| `common.passwords.manage` | Generate secret password or retrieve one if already created. | `dict \"secret\" \"secret-name\" \"key\" \"keyName\" \"providedValues\" (list \"path.to.password1\" \"path.to.password2\") \"length\" 10 \"strong\" false \"chartName\" \"chartName\" \"context\" $`, length, strong and chartNAme fields are optional. |\n| `common.secrets.exists`   | Returns whether a previous generated secret already exists.  | `dict \"secret\" \"secret-name\" \"context\" $`                                             ",
                    "rendered": {
                      "text": " the structure.                                                                                             |\n| `common.passwords.manage` | Generate secret password or retrieve one if already created. | `dict \"secret\" \"secret-name\" \"key\" \"keyName\" \"providedValues\" (list \"path.to.password1\" \"path.to.password2\") \"length\" 10 \"strong\" false \"chartName\" \"chartName\" \"context\" $`, length, strong and chartNAme fields are optional. |\n| `common.secrets.exists`   | Returns whether a previous generated secret already exists.  | `dict \"secret\" \"secret-name\" \"context\" $`                                             ",
                      "markdown": "` the structure.                                                                                             |\n| `common.passwords.manage` | Generate secret password or retrieve one if already created. | `dict \"secret\" \"secret-name\" \"key\" \"keyName\" \"providedValues\" (list \"path.to.password1\" \"path.to.password2\") \"length\" 10 \"strong\" false \"chartName\" \"chartName\" \"context\" $`, length, strong and chartNAme fields are optional. |\n| `common.secrets.exists`   | Returns whether a previous generated secret already exists.  | `dict \"secret\" \"secret-name\" \"context\" $`                                             `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 170,
                  "endLine": 111,
                  "endColumn": 178,
                  "snippet": {
                    "text": "#existingsecret) for the structure.                                                                                             |\n| `common.passwords.manage` | Generate secret password or retrieve one if already created. | `dict \"secret\" \"secret-name\" \"key\" \"keyName\" \"providedValues\" (list \"path.to.password1\" \"path.to.password2\") \"length\" 10 \"strong\" false \"chartName\" \"chartName\" \"context\" $`, length, strong and chartNAme fields are optional. |\n| `common.secrets.exists`   | Returns whether a previous generated secret already exists.  | `dict \"secret\" \"secret-name\" \"context\" $`                         ",
                    "rendered": {
                      "text": "#existingsecret) for the structure.                                                                                             |\n| `common.passwords.manage` | Generate secret password or retrieve one if already created. | `dict \"secret\" \"secret-name\" \"key\" \"keyName\" \"providedValues\" (list \"path.to.password1\" \"path.to.password2\") \"length\" 10 \"strong\" false \"chartName\" \"chartName\" \"context\" $`, length, strong and chartNAme fields are optional. |\n| `common.secrets.exists`   | Returns whether a previous generated secret already exists.  | `dict \"secret\" \"secret-name\" \"context\" $`                         ",
                      "markdown": "`#existingsecret) for the structure.                                                                                             |\n| `common.passwords.manage` | Generate secret password or retrieve one if already created. | `dict \"secret\" \"secret-name\" \"key\" \"keyName\" \"providedValues\" (list \"path.to.password1\" \"path.to.password2\") \"length\" 10 \"strong\" false \"chartName\" \"chartName\" \"context\" $`, length, strong and chartNAme fields are optional. |\n| `common.secrets.exists`   | Returns whether a previous generated secret already exists.  | `dict \"secret\" \"secret-name\" \"context\" $`                         `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 46,
                  "endLine": 111,
                  "endColumn": 54,
                  "snippet": {
                    "text": "                          | `dict \"existingSecret\" .Values.path.to.the.existingSecret \"key\" \"keyName\"` see [ExistingSecret](#existingsecret) for the structure.                                                                                             |\n| `common.passwords.manage` | Generate secret password or retrieve one if already created. | `dict \"secret\" \"secret-name\" \"key\" \"keyName\" \"providedValues\" (list \"path.to.password1\" \"path.to.password2\") \"length\" 10 \"strong\" false \"chartName\" \"chartName\" \"context\" $`, length, strong and chartNAme fields are optional. |\n| `common.secrets.exists`   | Retur",
                    "rendered": {
                      "text": "                          | `dict \"existingSecret\" .Values.path.to.the.existingSecret \"key\" \"keyName\"` see [ExistingSecret](#existingsecret) for the structure.                                                                                             |\n| `common.passwords.manage` | Generate secret password or retrieve one if already created. | `dict \"secret\" \"secret-name\" \"key\" \"keyName\" \"providedValues\" (list \"path.to.password1\" \"path.to.password2\") \"length\" 10 \"strong\" false \"chartName\" \"chartName\" \"context\" $`, length, strong and chartNAme fields are optional. |\n| `common.secrets.exists`   | Retur",
                      "markdown": "`                          | `dict \"existingSecret\" .Values.path.to.the.existingSecret \"key\" \"keyName\"` see [ExistingSecret](#existingsecret) for the structure.                                                                                             |\n| `common.passwords.manage` | Generate secret password or retrieve one if already created. | `dict \"secret\" \"secret-name\" \"key\" \"keyName\" \"providedValues\" (list \"path.to.password1\" \"path.to.password2\") \"length\" 10 \"strong\" false \"chartName\" \"chartName\" \"context\" $`, length, strong and chartNAme fields are optional. |\n| `common.secrets.exists`   | Retur`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 10,
                  "endLine": 111,
                  "endColumn": 18,
                  "snippet": {
                    "text": " Generate secret key.                                         | `dict \"existingSecret\" .Values.path.to.the.existingSecret \"key\" \"keyName\"` see [ExistingSecret](#existingsecret) for the structure.                                                                                             |\n| `common.passwords.manage` | Generate secret password or retrieve one if already created. | `dict \"secret\" \"secret-name\" \"key\" \"keyName\" \"providedValues\" (list \"path.to.password1\" \"path.to.password2\") \"length\" 10 \"strong\" false \"chartName\" \"chartName\" \"context\" $`, length, strong and chartNAme fields are optional. |",
                    "rendered": {
                      "text": " Generate secret key.                                         | `dict \"existingSecret\" .Values.path.to.the.existingSecret \"key\" \"keyName\"` see [ExistingSecret](#existingsecret) for the structure.                                                                                             |\n| `common.passwords.manage` | Generate secret password or retrieve one if already created. | `dict \"secret\" \"secret-name\" \"key\" \"keyName\" \"providedValues\" (list \"path.to.password1\" \"path.to.password2\") \"length\" 10 \"strong\" false \"chartName\" \"chartName\" \"context\" $`, length, strong and chartNAme fields are optional. |",
                      "markdown": "` Generate secret key.                                         | `dict \"existingSecret\" .Values.path.to.the.existingSecret \"key\" \"keyName\"` see [ExistingSecret](#existingsecret) for the structure.                                                                                             |\n| `common.passwords.manage` | Generate secret password or retrieve one if already created. | `dict \"secret\" \"secret-name\" \"key\" \"keyName\" \"providedValues\" (list \"path.to.password1\" \"path.to.password2\") \"length\" 10 \"strong\" false \"chartName\" \"chartName\" \"context\" $`, length, strong and chartNAme fields are optional. |`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 68,
                  "endLine": 70,
                  "endColumn": 76,
                  "snippet": {
                    "text": "------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------|\n| `common.errors.upgrade.passwords.empty` | It will ensure required passwords are given when we are upgrading a chart. If `validationErrors` is not empty it will throw an error and will stop the upgrade action. | `dict \"validationErrors\" (list $validationError00 $validationError01)  \"context\" $` |\n\n### Images\n\n| Helper identifier           | Description                     ",
                    "rendered": {
                      "text": "------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------|\n| `common.errors.upgrade.passwords.empty` | It will ensure required passwords are given when we are upgrading a chart. If `validationErrors` is not empty it will throw an error and will stop the upgrade action. | `dict \"validationErrors\" (list $validationError00 $validationError01)  \"context\" $` |\n\n### Images\n\n| Helper identifier           | Description                     ",
                      "markdown": "`------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------|\n| `common.errors.upgrade.passwords.empty` | It will ensure required passwords are given when we are upgrading a chart. If `validationErrors` is not empty it will throw an error and will stop the upgrade action. | `dict \"validationErrors\" (list $validationError00 $validationError01)  \"context\" $` |\n\n### Images\n\n| Helper identifier           | Description                     `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 25,
                  "endLine": 70,
                  "endColumn": 33,
                  "snippet": {
                    "text": "------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------|\n| `common.errors.upgrade.passwords.empty` | It will ensure required passwords are given when we are upgrading a chart. If `validationErrors` is not empty it will throw an error and will stop the upgrade action. | `dict \"validationErrors\" (list $validationError00 $validationError01)  \"context\" $` |\n\n### Images\n\n| Helper identifier  ",
                    "rendered": {
                      "text": "------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------|\n| `common.errors.upgrade.passwords.empty` | It will ensure required passwords are given when we are upgrading a chart. If `validationErrors` is not empty it will throw an error and will stop the upgrade action. | `dict \"validationErrors\" (list $validationError00 $validationError01)  \"context\" $` |\n\n### Images\n\n| Helper identifier  ",
                      "markdown": "`------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------|\n| `common.errors.upgrade.passwords.empty` | It will ensure required passwords are given when we are upgrading a chart. If `validationErrors` is not empty it will throw an error and will stop the upgrade action. | `dict \"validationErrors\" (list $validationError00 $validationError01)  \"context\" $` |\n\n### Images\n\n| Helper identifier  `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 305,
                  "startColumn": 115,
                  "endLine": 305,
                  "endColumn": 121,
                  "snippet": {
                    "text": "\n    'path.to.value01' must not be empty, please add '--set path.to.value01=$PASSWORD_01' to the command. To get the current value:\n\n        export PASSWORD_01=$(kubectl get secret --namespace default secretName -o jsonpath=\"{.data.password-01}\" | base64 --decode)\n```\n\n## Upgrading\n",
                    "rendered": {
                      "text": "\n    'path.to.value01' must not be empty, please add '--set path.to.value01=$PASSWORD_01' to the command. To get the current value:\n\n        export PASSWORD_01=$(kubectl get secret --namespace default secretName -o jsonpath=\"{.data.password-01}\" | base64 --decode)\n```\n\n## Upgrading\n",
                      "markdown": "`\n    'path.to.value01' must not be empty, please add '--set path.to.value01=$PASSWORD_01' to the command. To get the current value:\n\n        export PASSWORD_01=$(kubectl get secret --namespace default secretName -o jsonpath=\"{.data.password-01}\" | base64 --decode)\n```\n\n## Upgrading\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 301,
                  "startColumn": 115,
                  "endLine": 301,
                  "endColumn": 121,
                  "snippet": {
                    "text": "$ helm install test mychart --set path.to.value00=\"\",path.to.value01=\"\"\n    'path.to.value00' must not be empty, please add '--set path.to.value00=$PASSWORD_00' to the command. To get the current value:\n\n        export PASSWORD_00=$(kubectl get secret --namespace default secretName -o jsonpath=\"{.data.password-00}\" | base64 --decode)\n\n    'path.to.value01' must not be empty, please add '--set path.to.value01=$PASSWORD_01' to the command. To get the current value:\n\n",
                    "rendered": {
                      "text": "$ helm install test mychart --set path.to.value00=\"\",path.to.value01=\"\"\n    'path.to.value00' must not be empty, please add '--set path.to.value00=$PASSWORD_00' to the command. To get the current value:\n\n        export PASSWORD_00=$(kubectl get secret --namespace default secretName -o jsonpath=\"{.data.password-00}\" | base64 --decode)\n\n    'path.to.value01' must not be empty, please add '--set path.to.value01=$PASSWORD_01' to the command. To get the current value:\n\n",
                      "markdown": "`$ helm install test mychart --set path.to.value00=\"\",path.to.value01=\"\"\n    'path.to.value00' must not be empty, please add '--set path.to.value00=$PASSWORD_00' to the command. To get the current value:\n\n        export PASSWORD_00=$(kubectl get secret --namespace default secretName -o jsonpath=\"{.data.password-00}\" | base64 --decode)\n\n    'path.to.value01' must not be empty, please add '--set path.to.value01=$PASSWORD_01' to the command. To get the current value:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 338,
                  "startColumn": 36,
                  "endLine": 339,
                  "snippet": {
                    "text": "\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 28,
                  "endLine": 100,
                  "endColumn": 36,
                  "snippet": {
                    "text": "vc.spec.selector` | `.` Chart context |\n\n### Names\n\n| Helper identifier        | Description                                                | Expected Input    |\n|--------------------------|------------------------------------------------------------|-------------------|\n| `common.names.name`      | Expand the name of the chart or use `.Values.nameOverride` | `.` Chart context |\n| `common.names.fullname`  | Create a default fully qualified app name.                 | `.` Chart context |\n| `common.names.namespace` | Allow the release namespace to be overridden               | `.` Chart context |\n| `com",
                    "rendered": {
                      "text": "vc.spec.selector` | `.` Chart context |\n\n### Names\n\n| Helper identifier        | Description                                                | Expected Input    |\n|--------------------------|------------------------------------------------------------|-------------------|\n| `common.names.name`      | Expand the name of the chart or use `.Values.nameOverride` | `.` Chart context |\n| `common.names.fullname`  | Create a default fully qualified app name.                 | `.` Chart context |\n| `common.names.namespace` | Allow the release namespace to be overridden               | `.` Chart context |\n| `com",
                      "markdown": "`vc.spec.selector` | `.` Chart context |\n\n### Names\n\n| Helper identifier        | Description                                                | Expected Input    |\n|--------------------------|------------------------------------------------------------|-------------------|\n| `common.names.name`      | Expand the name of the chart or use `.Values.nameOverride` | `.` Chart context |\n| `common.names.fullname`  | Create a default fully qualified app name.                 | `.` Chart context |\n| `common.names.namespace` | Allow the release namespace to be overridden               | `.` Chart context |\n| `com`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 17,
                  "endLine": 16,
                  "snippet": {
                    "text": "```\n\n```bash\n$ helm dependency update\n```\n\n```yaml\napiVersion: v1\n",
                    "rendered": {
                      "text": "```\n\n```bash\n$ helm dependency update\n```\n\n```yaml\napiVersion: v1\n",
                      "markdown": "````\n\n```bash\n$ helm dependency update\n```\n\n```yaml\napiVersion: v1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 317,
                  "startColumn": 89,
                  "endLine": 317,
                  "endColumn": 95,
                  "snippet": {
                    "text": "and 3), this Helm Chart was updated to `apiVersion: v2` (installable by Helm 3 only). [Here](https://helm.sh/docs/topics/charts/#the-apiversion-field) you can find more information about the `apiVersion` field.\n- Use `type: library`. [Here](https://v3.helm.sh/docs/faq/#library-chart-support) you can find more information.\n- The different fields present in the *Chart.yaml* file has been ordered alphabetically in a homogeneous way for all the Bitnami Helm Charts\n\n**Considerations when upgrading to this version**\n\n- If you want to upgrade to this version from a previous one installed with Helm v3, you ",
                    "rendered": {
                      "text": "and 3), this Helm Chart was updated to `apiVersion: v2` (installable by Helm 3 only). [Here](https://helm.sh/docs/topics/charts/#the-apiversion-field) you can find more information about the `apiVersion` field.\n- Use `type: library`. [Here](https://v3.helm.sh/docs/faq/#library-chart-support) you can find more information.\n- The different fields present in the *Chart.yaml* file has been ordered alphabetically in a homogeneous way for all the Bitnami Helm Charts\n\n**Considerations when upgrading to this version**\n\n- If you want to upgrade to this version from a previous one installed with Helm v3, you ",
                      "markdown": "`and 3), this Helm Chart was updated to `apiVersion: v2` (installable by Helm 3 only). [Here](https://helm.sh/docs/topics/charts/#the-apiversion-field) you can find more information about the `apiVersion` field.\n- Use `type: library`. [Here](https://v3.helm.sh/docs/faq/#library-chart-support) you can find more information.\n- The different fields present in the *Chart.yaml* file has been ordered alphabetically in a homogeneous way for all the Bitnami Helm Charts\n\n**Considerations when upgrading to this version**\n\n- If you want to upgrade to this version from a previous one installed with Helm v3, you `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 316,
                  "startColumn": 246,
                  "endLine": 316,
                  "endColumn": 252,
                  "snippet": {
                    "text": "hat changes were introduced in this major version?**\n\n- Previous versions of this Helm Chart use `apiVersion: v1` (installable by both Helm 2 and 3), this Helm Chart was updated to `apiVersion: v2` (installable by Helm 3 only). [Here](https://helm.sh/docs/topics/charts/#the-apiversion-field) you can find more information about the `apiVersion` field.\n- Use `type: library`. [Here](https://v3.helm.sh/docs/faq/#library-chart-support) you can find more information.\n- The different fields present in the *Chart.yaml* file has been ordered alphabetically in a homogeneous way for all the Bitnami Helm Charts",
                    "rendered": {
                      "text": "hat changes were introduced in this major version?**\n\n- Previous versions of this Helm Chart use `apiVersion: v1` (installable by both Helm 2 and 3), this Helm Chart was updated to `apiVersion: v2` (installable by Helm 3 only). [Here](https://helm.sh/docs/topics/charts/#the-apiversion-field) you can find more information about the `apiVersion` field.\n- Use `type: library`. [Here](https://v3.helm.sh/docs/faq/#library-chart-support) you can find more information.\n- The different fields present in the *Chart.yaml* file has been ordered alphabetically in a homogeneous way for all the Bitnami Helm Charts",
                      "markdown": "`hat changes were introduced in this major version?**\n\n- Previous versions of this Helm Chart use `apiVersion: v1` (installable by both Helm 2 and 3), this Helm Chart was updated to `apiVersion: v2` (installable by Helm 3 only). [Here](https://helm.sh/docs/topics/charts/#the-apiversion-field) you can find more information about the `apiVersion` field.\n- Use `type: library`. [Here](https://v3.helm.sh/docs/faq/#library-chart-support) you can find more information.\n- The different fields present in the *Chart.yaml* file has been ordered alphabetically in a homogeneous way for all the Bitnami Helm Charts`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 305,
                  "startColumn": 114,
                  "endLine": 305,
                  "endColumn": 122,
                  "snippet": {
                    "text": "\n    'path.to.value01' must not be empty, please add '--set path.to.value01=$PASSWORD_01' to the command. To get the current value:\n\n        export PASSWORD_01=$(kubectl get secret --namespace default secretName -o jsonpath=\"{.data.password-01}\" | base64 --decode)\n```\n\n## Upgrading\n",
                    "rendered": {
                      "text": "\n    'path.to.value01' must not be empty, please add '--set path.to.value01=$PASSWORD_01' to the command. To get the current value:\n\n        export PASSWORD_01=$(kubectl get secret --namespace default secretName -o jsonpath=\"{.data.password-01}\" | base64 --decode)\n```\n\n## Upgrading\n",
                      "markdown": "`\n    'path.to.value01' must not be empty, please add '--set path.to.value01=$PASSWORD_01' to the command. To get the current value:\n\n        export PASSWORD_01=$(kubectl get secret --namespace default secretName -o jsonpath=\"{.data.password-01}\" | base64 --decode)\n```\n\n## Upgrading\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 301,
                  "startColumn": 114,
                  "endLine": 301,
                  "endColumn": 122,
                  "snippet": {
                    "text": "$ helm install test mychart --set path.to.value00=\"\",path.to.value01=\"\"\n    'path.to.value00' must not be empty, please add '--set path.to.value00=$PASSWORD_00' to the command. To get the current value:\n\n        export PASSWORD_00=$(kubectl get secret --namespace default secretName -o jsonpath=\"{.data.password-00}\" | base64 --decode)\n\n    'path.to.value01' must not be empty, please add '--set path.to.value01=$PASSWORD_01' to the command. To get the current value:\n\n",
                    "rendered": {
                      "text": "$ helm install test mychart --set path.to.value00=\"\",path.to.value01=\"\"\n    'path.to.value00' must not be empty, please add '--set path.to.value00=$PASSWORD_00' to the command. To get the current value:\n\n        export PASSWORD_00=$(kubectl get secret --namespace default secretName -o jsonpath=\"{.data.password-00}\" | base64 --decode)\n\n    'path.to.value01' must not be empty, please add '--set path.to.value01=$PASSWORD_01' to the command. To get the current value:\n\n",
                      "markdown": "`$ helm install test mychart --set path.to.value00=\"\",path.to.value01=\"\"\n    'path.to.value00' must not be empty, please add '--set path.to.value00=$PASSWORD_00' to the command. To get the current value:\n\n        export PASSWORD_00=$(kubectl get secret --namespace default secretName -o jsonpath=\"{.data.password-00}\" | base64 --decode)\n\n    'path.to.value01' must not be empty, please add '--set path.to.value01=$PASSWORD_01' to the command. To get the current value:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 14,
                  "endLine": 160,
                  "endColumn": 22,
                  "snippet": {
                    "text": "```yaml\nregistry:\n  type: string\n  description: Docker registry where the image is located\n  example: docker.io\n\nrepository:\n",
                    "rendered": {
                      "text": "```yaml\nregistry:\n  type: string\n  description: Docker registry where the image is located\n  example: docker.io\n\nrepository:\n",
                      "markdown": "````yaml\nregistry:\n  type: string\n  description: Docker registry where the image is located\n  example: docker.io\n\nrepository:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 28,
                  "endLine": 100,
                  "endColumn": 36,
                  "snippet": {
                    "text": "vc.spec.selector` | `.` Chart context |\n\n### Names\n\n| Helper identifier        | Description                                                | Expected Input    |\n|--------------------------|------------------------------------------------------------|-------------------|\n| `common.names.name`      | Expand the name of the chart or use `.Values.nameOverride` | `.` Chart context |\n| `common.names.fullname`  | Create a default fully qualified app name.                 | `.` Chart context |\n| `common.names.namespace` | Allow the release namespace to be overridden               | `.` Chart context |\n| `com",
                    "rendered": {
                      "text": "vc.spec.selector` | `.` Chart context |\n\n### Names\n\n| Helper identifier        | Description                                                | Expected Input    |\n|--------------------------|------------------------------------------------------------|-------------------|\n| `common.names.name`      | Expand the name of the chart or use `.Values.nameOverride` | `.` Chart context |\n| `common.names.fullname`  | Create a default fully qualified app name.                 | `.` Chart context |\n| `common.names.namespace` | Allow the release namespace to be overridden               | `.` Chart context |\n| `com",
                      "markdown": "`vc.spec.selector` | `.` Chart context |\n\n### Names\n\n| Helper identifier        | Description                                                | Expected Input    |\n|--------------------------|------------------------------------------------------------|-------------------|\n| `common.names.name`      | Expand the name of the chart or use `.Values.nameOverride` | `.` Chart context |\n| `common.names.fullname`  | Create a default fully qualified app name.                 | `.` Chart context |\n| `common.names.namespace` | Allow the release namespace to be overridden               | `.` Chart context |\n| `com`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 55,
                  "endLine": 78,
                  "endColumn": 63,
                  "snippet": {
                    "text": "ommon.images.pullSecrets` | Return the proper Docker Image Registry Secret Names (deprecated: use common.images.renderPullSecrets instead) | `dict \"images\" (list .Values.path.to.the.image1, .Values.path.to.the.image2) \"global\" .Values.global` |\n| `common.images.renderPullSecrets` | Return the proper Docker Image Registry Secret Names (evaluates values as templates) | `dict \"images\" (list .Values.path.to.the.image1, .Values.path.to.the.image2) \"context\" $` |\n\n### Ingress\n\n| Helper identifier                         | Description                                                                           ",
                    "rendered": {
                      "text": "ommon.images.pullSecrets` | Return the proper Docker Image Registry Secret Names (deprecated: use common.images.renderPullSecrets instead) | `dict \"images\" (list .Values.path.to.the.image1, .Values.path.to.the.image2) \"global\" .Values.global` |\n| `common.images.renderPullSecrets` | Return the proper Docker Image Registry Secret Names (evaluates values as templates) | `dict \"images\" (list .Values.path.to.the.image1, .Values.path.to.the.image2) \"context\" $` |\n\n### Ingress\n\n| Helper identifier                         | Description                                                                           ",
                      "markdown": "`ommon.images.pullSecrets` | Return the proper Docker Image Registry Secret Names (deprecated: use common.images.renderPullSecrets instead) | `dict \"images\" (list .Values.path.to.the.image1, .Values.path.to.the.image2) \"global\" .Values.global` |\n| `common.images.renderPullSecrets` | Return the proper Docker Image Registry Secret Names (evaluates values as templates) | `dict \"images\" (list .Values.path.to.the.image1, .Values.path.to.the.image2) \"context\" $` |\n\n### Ingress\n\n| Helper identifier                         | Description                                                                           `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 49,
                  "endLine": 77,
                  "endColumn": 57,
                  "snippet": {
                    "text": "--------------------------------------------------------|\n| `common.images.image`       | Return the proper and full image name                | `dict \"imageRoot\" .Values.path.to.the.image \"global\" $`, see [ImageRoot](#imageroot) for the structure. |\n| `common.images.pullSecrets` | Return the proper Docker Image Registry Secret Names (deprecated: use common.images.renderPullSecrets instead) | `dict \"images\" (list .Values.path.to.the.image1, .Values.path.to.the.image2) \"global\" .Values.global` |\n| `common.images.renderPullSecrets` | Return the proper Docker Image Registry Secret Names (evaluates values",
                    "rendered": {
                      "text": "--------------------------------------------------------|\n| `common.images.image`       | Return the proper and full image name                | `dict \"imageRoot\" .Values.path.to.the.image \"global\" $`, see [ImageRoot](#imageroot) for the structure. |\n| `common.images.pullSecrets` | Return the proper Docker Image Registry Secret Names (deprecated: use common.images.renderPullSecrets instead) | `dict \"images\" (list .Values.path.to.the.image1, .Values.path.to.the.image2) \"global\" .Values.global` |\n| `common.images.renderPullSecrets` | Return the proper Docker Image Registry Secret Names (evaluates values",
                      "markdown": "`--------------------------------------------------------|\n| `common.images.image`       | Return the proper and full image name                | `dict \"imageRoot\" .Values.path.to.the.image \"global\" $`, see [ImageRoot](#imageroot) for the structure. |\n| `common.images.pullSecrets` | Return the proper Docker Image Registry Secret Names (deprecated: use common.images.renderPullSecrets instead) | `dict \"images\" (list .Values.path.to.the.image1, .Values.path.to.the.image2) \"global\" .Values.global` |\n| `common.images.renderPullSecrets` | Return the proper Docker Image Registry Secret Names (evaluates values`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/README.md"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 158,
                  "endLine": 31,
                  "endColumn": 163,
                  "snippet": {
                    "text": "\nThis chart provides a common template helpers which can be used to develop new charts using [Helm](https://helm.sh) package manager.\n\nBitnami charts can be used with [Kubeapps](https://kubeapps.com/) for deployment and management of Helm Charts in clusters. This Helm chart has been tested on top of [Bitnami Kubernetes Production Runtime](https://kubeprod.io/) (BKPR). Deploy BKPR to get automated TLS certificates, logging and monitoring for your applications.\n\n## Prerequisites\n\n",
                    "rendered": {
                      "text": "\nThis chart provides a common template helpers which can be used to develop new charts using [Helm](https://helm.sh) package manager.\n\nBitnami charts can be used with [Kubeapps](https://kubeapps.com/) for deployment and management of Helm Charts in clusters. This Helm chart has been tested on top of [Bitnami Kubernetes Production Runtime](https://kubeprod.io/) (BKPR). Deploy BKPR to get automated TLS certificates, logging and monitoring for your applications.\n\n## Prerequisites\n\n",
                      "markdown": "`\nThis chart provides a common template helpers which can be used to develop new charts using [Helm](https://helm.sh) package manager.\n\nBitnami charts can be used with [Kubeapps](https://kubeapps.com/) for deployment and management of Helm Charts in clusters. This Helm chart has been tested on top of [Bitnami Kubernetes Production Runtime](https://kubeprod.io/) (BKPR). Deploy BKPR to get automated TLS certificates, logging and monitoring for your applications.\n\n## Prerequisites\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/slackwebhook/slackwebhook.go"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 13,
                  "endLine": 35,
                  "endColumn": 22,
                  "snippet": {
                    "text": "      \"icon_emoji\": \"\"\n  }\n  msg = json.dumps(msg).encode('utf-8')\n  resp = http.request('POST',url, body=msg)\n*/\n\npackage slackwebhook\n",
                    "rendered": {
                      "text": "      \"icon_emoji\": \"\"\n  }\n  msg = json.dumps(msg).encode('utf-8')\n  resp = http.request('POST',url, body=msg)\n*/\n\npackage slackwebhook\n",
                      "markdown": "`      \"icon_emoji\": \"\"\n  }\n  msg = json.dumps(msg).encode('utf-8')\n  resp = http.request('POST',url, body=msg)\n*/\n\npackage slackwebhook\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/slackwebhook/slackwebhook.go"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 47,
                  "endLine": 123,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\t\treturn\n\t}\n\n\tlogrus.Printf(\"Message successfully sent to %s at %s. Message: %s\", m.Slackwebhookurl, time.Now(), webhookMessage.Text)\n}\n\nfunc checkMissingWebhookVars(s *SlackWebhook) error {\n",
                    "rendered": {
                      "text": "\t\treturn\n\t}\n\n\tlogrus.Printf(\"Message successfully sent to %s at %s. Message: %s\", m.Slackwebhookurl, time.Now(), webhookMessage.Text)\n}\n\nfunc checkMissingWebhookVars(s *SlackWebhook) error {\n",
                      "markdown": "`\t\treturn\n\t}\n\n\tlogrus.Printf(\"Message successfully sent to %s at %s. Message: %s\", m.Slackwebhookurl, time.Now(), webhookMessage.Text)\n}\n\nfunc checkMissingWebhookVars(s *SlackWebhook) error {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/webhook/webhook.go"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 47,
                  "endLine": 115,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\t\treturn\n\t}\n\n\tlogrus.Printf(\"Message successfully sent to %s at %s \", m.Url, time.Now())\n}\n\nfunc checkMissingWebhookVars(s *Webhook) error {\n",
                    "rendered": {
                      "text": "\t\treturn\n\t}\n\n\tlogrus.Printf(\"Message successfully sent to %s at %s \", m.Url, time.Now())\n}\n\nfunc checkMissingWebhookVars(s *Webhook) error {\n",
                      "markdown": "`\t\treturn\n\t}\n\n\tlogrus.Printf(\"Message successfully sent to %s at %s \", m.Url, time.Now())\n}\n\nfunc checkMissingWebhookVars(s *Webhook) error {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/webhook/webhook.go"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 58,
                  "endColumn": 6,
                  "snippet": {
                    "text": "type WebhookMessage struct {\n\tEventMeta EventMeta `json:\"eventmeta\"`\n\tText      string    `json:\"text\"`\n\tTime      time.Time `json:\"time\"`\n}\n\n// EventMeta containes the meta data about the event occurred\n",
                    "rendered": {
                      "text": "type WebhookMessage struct {\n\tEventMeta EventMeta `json:\"eventmeta\"`\n\tText      string    `json:\"text\"`\n\tTime      time.Time `json:\"time\"`\n}\n\n// EventMeta containes the meta data about the event occurred\n",
                      "markdown": "`type WebhookMessage struct {\n\tEventMeta EventMeta `json:\"eventmeta\"`\n\tText      string    `json:\"text\"`\n\tTime      time.Time `json:\"time\"`\n}\n\n// EventMeta containes the meta data about the event occurred\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/tools/yannotated/yannotated.go"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 30,
                  "endLine": 113,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\t\t\tdefault:\n\t\t\t\tt, found := types[name]\n\t\t\t\tif !found {\n\t\t\t\t\treturn fmt.Errorf(\"cannot find type %q\", name)\n\t\t\t\t}\n\t\t\t\tfmt.Fprintf(w, \"\\n\")\n\t\t\t\tiw := textio.NewPrefixWriter(w, \"  \")\n",
                    "rendered": {
                      "text": "\t\t\tdefault:\n\t\t\t\tt, found := types[name]\n\t\t\t\tif !found {\n\t\t\t\t\treturn fmt.Errorf(\"cannot find type %q\", name)\n\t\t\t\t}\n\t\t\t\tfmt.Fprintf(w, \"\\n\")\n\t\t\t\tiw := textio.NewPrefixWriter(w, \"  \")\n",
                      "markdown": "`\t\t\tdefault:\n\t\t\t\tt, found := types[name]\n\t\t\t\tif !found {\n\t\t\t\t\treturn fmt.Errorf(\"cannot find type %q\", name)\n\t\t\t\t}\n\t\t\t\tfmt.Fprintf(w, \"\\n\")\n\t\t\t\tiw := textio.NewPrefixWriter(w, \"  \")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/tools/yannotated/yannotated.go"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 56,
                  "endLine": 85,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\treturn emit(w, types, root)\n}\n\nfunc emit(w io.Writer, types map[string]*ast.StructType, node *ast.StructType) error {\n\tfor _, field := range node.Fields.List {\n\t\tname, err := fieldName(field)\n\t\tif err != nil {\n",
                    "rendered": {
                      "text": "\treturn emit(w, types, root)\n}\n\nfunc emit(w io.Writer, types map[string]*ast.StructType, node *ast.StructType) error {\n\tfor _, field := range node.Fields.List {\n\t\tname, err := fieldName(field)\n\t\tif err != nil {\n",
                      "markdown": "`\treturn emit(w, types, root)\n}\n\nfunc emit(w io.Writer, types map[string]*ast.StructType, node *ast.StructType) error {\n\tfor _, field := range node.Fields.List {\n\t\tname, err := fieldName(field)\n\t\tif err != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/tools/yannotated/yannotated.go"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 27,
                  "endLine": 68,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n\troot, found := types[flags.Type]\n\tif !found {\n\t\treturn fmt.Errorf(\"cannot find root type %q in %v\", flags.Type, types)\n\t}\n\tw, err := os.Create(flags.Output)\n\tif err != nil {\n",
                    "rendered": {
                      "text": "\n\troot, found := types[flags.Type]\n\tif !found {\n\t\treturn fmt.Errorf(\"cannot find root type %q in %v\", flags.Type, types)\n\t}\n\tw, err := os.Create(flags.Output)\n\tif err != nil {\n",
                      "markdown": "`\n\troot, found := types[flags.Type]\n\tif !found {\n\t\treturn fmt.Errorf(\"cannot find root type %q in %v\", flags.Type, types)\n\t}\n\tw, err := os.Create(flags.Output)\n\tif err != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/tools/yannotated/yannotated.go"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 27,
                  "endLine": 56,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\t}\n\tpkg, found := pkgs[flags.Package]\n\tif !found {\n\t\treturn fmt.Errorf(\"cannot find package %q in %v\", flags.Package, pkgs)\n\t}\n\n\t// trim all unexported symbols\n",
                    "rendered": {
                      "text": "\t}\n\tpkg, found := pkgs[flags.Package]\n\tif !found {\n\t\treturn fmt.Errorf(\"cannot find package %q in %v\", flags.Package, pkgs)\n\t}\n\n\t// trim all unexported symbols\n",
                      "markdown": "`\t}\n\tpkg, found := pkgs[flags.Package]\n\tif !found {\n\t\treturn fmt.Errorf(\"cannot find package %q in %v\", flags.Package, pkgs)\n\t}\n\n\t// trim all unexported symbols\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/cmd/version.go"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 7,
                  "endLine": 18,
                  "snippet": {
                    "text": "limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"github.com/sirupsen/logrus\"\n\t\"github.com/spf13/cobra\"\n",
                    "rendered": {
                      "text": "limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"github.com/sirupsen/logrus\"\n\t\"github.com/spf13/cobra\"\n",
                      "markdown": "`limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"github.com/sirupsen/logrus\"\n\t\"github.com/spf13/cobra\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/cmd/slackwebhook.go"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 7,
                  "endLine": 18,
                  "snippet": {
                    "text": "limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"github.com/bitnami-labs/kubewatch/config\"\n\t\"github.com/sirupsen/logrus\"\n",
                    "rendered": {
                      "text": "limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"github.com/bitnami-labs/kubewatch/config\"\n\t\"github.com/sirupsen/logrus\"\n",
                      "markdown": "`limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"github.com/bitnami-labs/kubewatch/config\"\n\t\"github.com/sirupsen/logrus\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/cmd/mattermost.go"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 7,
                  "endLine": 18,
                  "snippet": {
                    "text": "limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"github.com/bitnami-labs/kubewatch/config\"\n\t\"github.com/sirupsen/logrus\"\n",
                    "rendered": {
                      "text": "limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"github.com/bitnami-labs/kubewatch/config\"\n\t\"github.com/sirupsen/logrus\"\n",
                      "markdown": "`limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"github.com/bitnami-labs/kubewatch/config\"\n\t\"github.com/sirupsen/logrus\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/cmd/hipchat.go"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 7,
                  "endLine": 18,
                  "snippet": {
                    "text": "limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"github.com/bitnami-labs/kubewatch/config\"\n\t\"github.com/sirupsen/logrus\"\n",
                    "rendered": {
                      "text": "limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"github.com/bitnami-labs/kubewatch/config\"\n\t\"github.com/sirupsen/logrus\"\n",
                      "markdown": "`limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"github.com/bitnami-labs/kubewatch/config\"\n\t\"github.com/sirupsen/logrus\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_postgresql.tpl"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 16,
                  "endLine": 127,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  {{- if .subchart -}}\n    postgresql.replication.password\n  {{- else -}}\n    replication.password\n  {{- end -}}\n{{- end -}}\n",
                    "rendered": {
                      "text": "  {{- if .subchart -}}\n    postgresql.replication.password\n  {{- else -}}\n    replication.password\n  {{- end -}}\n{{- end -}}\n",
                      "markdown": "`  {{- if .subchart -}}\n    postgresql.replication.password\n  {{- else -}}\n    replication.password\n  {{- end -}}\n{{- end -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_postgresql.tpl"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 27,
                  "endLine": 125,
                  "endColumn": 35,
                  "snippet": {
                    "text": "*/}}\n{{- define \"common.postgresql.values.key.replicationPassword\" -}}\n  {{- if .subchart -}}\n    postgresql.replication.password\n  {{- else -}}\n    replication.password\n  {{- end -}}\n",
                    "rendered": {
                      "text": "*/}}\n{{- define \"common.postgresql.values.key.replicationPassword\" -}}\n  {{- if .subchart -}}\n    postgresql.replication.password\n  {{- else -}}\n    replication.password\n  {{- end -}}\n",
                      "markdown": "`*/}}\n{{- define \"common.postgresql.values.key.replicationPassword\" -}}\n  {{- if .subchart -}}\n    postgresql.replication.password\n  {{- else -}}\n    replication.password\n  {{- end -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_postgresql.tpl"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 52,
                  "endLine": 123,
                  "endColumn": 60,
                  "snippet": {
                    "text": "Params:\n  - subchart - Boolean - Optional. Whether postgresql is used as subchart or not. Default: false\n*/}}\n{{- define \"common.postgresql.values.key.replicationPassword\" -}}\n  {{- if .subchart -}}\n    postgresql.replication.password\n  {{- else -}}\n",
                    "rendered": {
                      "text": "Params:\n  - subchart - Boolean - Optional. Whether postgresql is used as subchart or not. Default: false\n*/}}\n{{- define \"common.postgresql.values.key.replicationPassword\" -}}\n  {{- if .subchart -}}\n    postgresql.replication.password\n  {{- else -}}\n",
                      "markdown": "`Params:\n  - subchart - Boolean - Optional. Whether postgresql is used as subchart or not. Default: false\n*/}}\n{{- define \"common.postgresql.values.key.replicationPassword\" -}}\n  {{- if .subchart -}}\n    postgresql.replication.password\n  {{- else -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_postgresql.tpl"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 52,
                  "endLine": 119,
                  "endColumn": 60,
                  "snippet": {
                    "text": "Auxiliary function to get the right value for the key replication.password.\n\nUsage:\n{{ include \"common.postgresql.values.key.replicationPassword\" (dict \"subchart\" \"true\" \"context\" $) }}\nParams:\n  - subchart - Boolean - Optional. Whether postgresql is used as subchart or not. Default: false\n*/}}\n",
                    "rendered": {
                      "text": "Auxiliary function to get the right value for the key replication.password.\n\nUsage:\n{{ include \"common.postgresql.values.key.replicationPassword\" (dict \"subchart\" \"true\" \"context\" $) }}\nParams:\n  - subchart - Boolean - Optional. Whether postgresql is used as subchart or not. Default: false\n*/}}\n",
                      "markdown": "`Auxiliary function to get the right value for the key replication.password.\n\nUsage:\n{{ include \"common.postgresql.values.key.replicationPassword\" (dict \"subchart\" \"true\" \"context\" $) }}\nParams:\n  - subchart - Boolean - Optional. Whether postgresql is used as subchart or not. Default: false\n*/}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_postgresql.tpl"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 66,
                  "endLine": 116,
                  "endColumn": 74,
                  "snippet": {
                    "text": "{{- end -}}\n\n{{/*\nAuxiliary function to get the right value for the key replication.password.\n\nUsage:\n{{ include \"common.postgresql.values.key.replicationPassword\" (dict \"subchart\" \"true\" \"context\" $) }}\n",
                    "rendered": {
                      "text": "{{- end -}}\n\n{{/*\nAuxiliary function to get the right value for the key replication.password.\n\nUsage:\n{{ include \"common.postgresql.values.key.replicationPassword\" (dict \"subchart\" \"true\" \"context\" $) }}\n",
                      "markdown": "`{{- end -}}\n\n{{/*\nAuxiliary function to get the right value for the key replication.password.\n\nUsage:\n{{ include \"common.postgresql.values.key.replicationPassword\" (dict \"subchart\" \"true\" \"context\" $) }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_postgresql.tpl"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 32,
                  "endLine": 95,
                  "endColumn": 40,
                  "snippet": {
                    "text": "      postgresqlPassword\n    {{- end -}}\n  {{- else -}}\n    global.postgresql.postgresqlPassword\n  {{- end -}}\n{{- end -}}\n\n",
                    "rendered": {
                      "text": "      postgresqlPassword\n    {{- end -}}\n  {{- else -}}\n    global.postgresql.postgresqlPassword\n  {{- end -}}\n{{- end -}}\n\n",
                      "markdown": "`      postgresqlPassword\n    {{- end -}}\n  {{- else -}}\n    global.postgresql.postgresqlPassword\n  {{- end -}}\n{{- end -}}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_postgresql.tpl"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 16,
                  "endLine": 92,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    {{- if .subchart -}}\n      postgresql.postgresqlPassword\n    {{- else -}}\n      postgresqlPassword\n    {{- end -}}\n  {{- else -}}\n    global.postgresql.postgresqlPassword\n",
                    "rendered": {
                      "text": "    {{- if .subchart -}}\n      postgresql.postgresqlPassword\n    {{- else -}}\n      postgresqlPassword\n    {{- end -}}\n  {{- else -}}\n    global.postgresql.postgresqlPassword\n",
                      "markdown": "`    {{- if .subchart -}}\n      postgresql.postgresqlPassword\n    {{- else -}}\n      postgresqlPassword\n    {{- end -}}\n  {{- else -}}\n    global.postgresql.postgresqlPassword\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_postgresql.tpl"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 27,
                  "endLine": 90,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n  {{- if not $globalValue -}}\n    {{- if .subchart -}}\n      postgresql.postgresqlPassword\n    {{- else -}}\n      postgresqlPassword\n    {{- end -}}\n",
                    "rendered": {
                      "text": "\n  {{- if not $globalValue -}}\n    {{- if .subchart -}}\n      postgresql.postgresqlPassword\n    {{- else -}}\n      postgresqlPassword\n    {{- end -}}\n",
                      "markdown": "`\n  {{- if not $globalValue -}}\n    {{- if .subchart -}}\n      postgresql.postgresqlPassword\n    {{- else -}}\n      postgresqlPassword\n    {{- end -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_postgresql.tpl"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 50,
                  "endLine": 85,
                  "endColumn": 58,
                  "snippet": {
                    "text": "Params:\n  - subchart - Boolean - Optional. Whether postgresql is used as subchart or not. Default: false\n*/}}\n{{- define \"common.postgresql.values.key.postgressPassword\" -}}\n  {{- $globalValue := include \"common.postgresql.values.use.global\" (dict \"key\" \"postgresqlUsername\" \"context\" .context) -}}\n\n  {{- if not $globalValue -}}\n",
                    "rendered": {
                      "text": "Params:\n  - subchart - Boolean - Optional. Whether postgresql is used as subchart or not. Default: false\n*/}}\n{{- define \"common.postgresql.values.key.postgressPassword\" -}}\n  {{- $globalValue := include \"common.postgresql.values.use.global\" (dict \"key\" \"postgresqlUsername\" \"context\" .context) -}}\n\n  {{- if not $globalValue -}}\n",
                      "markdown": "`Params:\n  - subchart - Boolean - Optional. Whether postgresql is used as subchart or not. Default: false\n*/}}\n{{- define \"common.postgresql.values.key.postgressPassword\" -}}\n  {{- $globalValue := include \"common.postgresql.values.use.global\" (dict \"key\" \"postgresqlUsername\" \"context\" .context) -}}\n\n  {{- if not $globalValue -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_postgresql.tpl"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 50,
                  "endLine": 81,
                  "endColumn": 58,
                  "snippet": {
                    "text": "Auxiliary function to get the right value for the key postgressPassword.\n\nUsage:\n{{ include \"common.postgresql.values.key.postgressPassword\" (dict \"subchart\" \"true\" \"context\" $) }}\nParams:\n  - subchart - Boolean - Optional. Whether postgresql is used as subchart or not. Default: false\n*/}}\n",
                    "rendered": {
                      "text": "Auxiliary function to get the right value for the key postgressPassword.\n\nUsage:\n{{ include \"common.postgresql.values.key.postgressPassword\" (dict \"subchart\" \"true\" \"context\" $) }}\nParams:\n  - subchart - Boolean - Optional. Whether postgresql is used as subchart or not. Default: false\n*/}}\n",
                      "markdown": "`Auxiliary function to get the right value for the key postgressPassword.\n\nUsage:\n{{ include \"common.postgresql.values.key.postgressPassword\" (dict \"subchart\" \"true\" \"context\" $) }}\nParams:\n  - subchart - Boolean - Optional. Whether postgresql is used as subchart or not. Default: false\n*/}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_postgresql.tpl"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 63,
                  "endLine": 78,
                  "endColumn": 71,
                  "snippet": {
                    "text": "{{- end -}}\n\n{{/*\nAuxiliary function to get the right value for the key postgressPassword.\n\nUsage:\n{{ include \"common.postgresql.values.key.postgressPassword\" (dict \"subchart\" \"true\" \"context\" $) }}\n",
                    "rendered": {
                      "text": "{{- end -}}\n\n{{/*\nAuxiliary function to get the right value for the key postgressPassword.\n\nUsage:\n{{ include \"common.postgresql.values.key.postgressPassword\" (dict \"subchart\" \"true\" \"context\" $) }}\n",
                      "markdown": "`{{- end -}}\n\n{{/*\nAuxiliary function to get the right value for the key postgressPassword.\n\nUsage:\n{{ include \"common.postgresql.values.key.postgressPassword\" (dict \"subchart\" \"true\" \"context\" $) }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_postgresql.tpl"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 85,
                  "endLine": 27,
                  "endColumn": 93,
                  "snippet": {
                    "text": "        {{- $requiredPasswords = append $requiredPasswords $requiredPostgresqlReplicationPassword -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n  {{- end -}}\n{{- end -}}\n\n",
                    "rendered": {
                      "text": "        {{- $requiredPasswords = append $requiredPasswords $requiredPostgresqlReplicationPassword -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n  {{- end -}}\n{{- end -}}\n\n",
                      "markdown": "`        {{- $requiredPasswords = append $requiredPasswords $requiredPostgresqlReplicationPassword -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n  {{- end -}}\n{{- end -}}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_postgresql.tpl"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 89,
                  "endLine": 24,
                  "endColumn": 97,
                  "snippet": {
                    "text": "    {{- $enabledReplication := include \"common.postgresql.values.enabled.replication\" . -}}\n    {{- if (eq $enabledReplication \"true\") -}}\n        {{- $requiredPostgresqlReplicationPassword := dict \"valueKey\" $valueKeyPostgresqlReplicationEnabled \"secret\" .secret \"field\" \"postgresql-replication-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPostgresqlReplicationPassword -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n",
                    "rendered": {
                      "text": "    {{- $enabledReplication := include \"common.postgresql.values.enabled.replication\" . -}}\n    {{- if (eq $enabledReplication \"true\") -}}\n        {{- $requiredPostgresqlReplicationPassword := dict \"valueKey\" $valueKeyPostgresqlReplicationEnabled \"secret\" .secret \"field\" \"postgresql-replication-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPostgresqlReplicationPassword -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n",
                      "markdown": "`    {{- $enabledReplication := include \"common.postgresql.values.enabled.replication\" . -}}\n    {{- if (eq $enabledReplication \"true\") -}}\n        {{- $requiredPostgresqlReplicationPassword := dict \"valueKey\" $valueKeyPostgresqlReplicationEnabled \"secret\" .secret \"field\" \"postgresql-replication-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPostgresqlReplicationPassword -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_postgresql.tpl"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 49,
                  "endLine": 24,
                  "endColumn": 57,
                  "snippet": {
                    "text": "    {{- $enabledReplication := include \"common.postgresql.values.enabled.replication\" . -}}\n    {{- if (eq $enabledReplication \"true\") -}}\n        {{- $requiredPostgresqlReplicationPassword := dict \"valueKey\" $valueKeyPostgresqlReplicationEnabled \"secret\" .secret \"field\" \"postgresql-replication-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPostgresqlReplicationPassword -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n",
                    "rendered": {
                      "text": "    {{- $enabledReplication := include \"common.postgresql.values.enabled.replication\" . -}}\n    {{- if (eq $enabledReplication \"true\") -}}\n        {{- $requiredPostgresqlReplicationPassword := dict \"valueKey\" $valueKeyPostgresqlReplicationEnabled \"secret\" .secret \"field\" \"postgresql-replication-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPostgresqlReplicationPassword -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n",
                      "markdown": "`    {{- $enabledReplication := include \"common.postgresql.values.enabled.replication\" . -}}\n    {{- if (eq $enabledReplication \"true\") -}}\n        {{- $requiredPostgresqlReplicationPassword := dict \"valueKey\" $valueKeyPostgresqlReplicationEnabled \"secret\" .secret \"field\" \"postgresql-replication-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPostgresqlReplicationPassword -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_postgresql.tpl"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 21,
                  "endLine": 24,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    {{- $enabledReplication := include \"common.postgresql.values.enabled.replication\" . -}}\n    {{- if (eq $enabledReplication \"true\") -}}\n        {{- $requiredPostgresqlReplicationPassword := dict \"valueKey\" $valueKeyPostgresqlReplicationEnabled \"secret\" .secret \"field\" \"postgresql-replication-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPostgresqlReplicationPassword -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n",
                    "rendered": {
                      "text": "    {{- $enabledReplication := include \"common.postgresql.values.enabled.replication\" . -}}\n    {{- if (eq $enabledReplication \"true\") -}}\n        {{- $requiredPostgresqlReplicationPassword := dict \"valueKey\" $valueKeyPostgresqlReplicationEnabled \"secret\" .secret \"field\" \"postgresql-replication-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPostgresqlReplicationPassword -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n",
                      "markdown": "`    {{- $enabledReplication := include \"common.postgresql.values.enabled.replication\" . -}}\n    {{- if (eq $enabledReplication \"true\") -}}\n        {{- $requiredPostgresqlReplicationPassword := dict \"valueKey\" $valueKeyPostgresqlReplicationEnabled \"secret\" .secret \"field\" \"postgresql-replication-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPostgresqlReplicationPassword -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_postgresql.tpl"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 157,
                  "endLine": 23,
                  "endColumn": 165,
                  "snippet": {
                    "text": "\n    {{- $enabledReplication := include \"common.postgresql.values.enabled.replication\" . -}}\n    {{- if (eq $enabledReplication \"true\") -}}\n        {{- $requiredPostgresqlReplicationPassword := dict \"valueKey\" $valueKeyPostgresqlReplicationEnabled \"secret\" .secret \"field\" \"postgresql-replication-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPostgresqlReplicationPassword -}}\n    {{- end -}}\n\n",
                    "rendered": {
                      "text": "\n    {{- $enabledReplication := include \"common.postgresql.values.enabled.replication\" . -}}\n    {{- if (eq $enabledReplication \"true\") -}}\n        {{- $requiredPostgresqlReplicationPassword := dict \"valueKey\" $valueKeyPostgresqlReplicationEnabled \"secret\" .secret \"field\" \"postgresql-replication-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPostgresqlReplicationPassword -}}\n    {{- end -}}\n\n",
                      "markdown": "`\n    {{- $enabledReplication := include \"common.postgresql.values.enabled.replication\" . -}}\n    {{- if (eq $enabledReplication \"true\") -}}\n        {{- $requiredPostgresqlReplicationPassword := dict \"valueKey\" $valueKeyPostgresqlReplicationEnabled \"secret\" .secret \"field\" \"postgresql-replication-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPostgresqlReplicationPassword -}}\n    {{- end -}}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_postgresql.tpl"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 42,
                  "endLine": 23,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\n    {{- $enabledReplication := include \"common.postgresql.values.enabled.replication\" . -}}\n    {{- if (eq $enabledReplication \"true\") -}}\n        {{- $requiredPostgresqlReplicationPassword := dict \"valueKey\" $valueKeyPostgresqlReplicationEnabled \"secret\" .secret \"field\" \"postgresql-replication-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPostgresqlReplicationPassword -}}\n    {{- end -}}\n\n",
                    "rendered": {
                      "text": "\n    {{- $enabledReplication := include \"common.postgresql.values.enabled.replication\" . -}}\n    {{- if (eq $enabledReplication \"true\") -}}\n        {{- $requiredPostgresqlReplicationPassword := dict \"valueKey\" $valueKeyPostgresqlReplicationEnabled \"secret\" .secret \"field\" \"postgresql-replication-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPostgresqlReplicationPassword -}}\n    {{- end -}}\n\n",
                      "markdown": "`\n    {{- $enabledReplication := include \"common.postgresql.values.enabled.replication\" . -}}\n    {{- if (eq $enabledReplication \"true\") -}}\n        {{- $requiredPostgresqlReplicationPassword := dict \"valueKey\" $valueKeyPostgresqlReplicationEnabled \"secret\" .secret \"field\" \"postgresql-replication-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPostgresqlReplicationPassword -}}\n    {{- end -}}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_postgresql.tpl"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 74,
                  "endLine": 19,
                  "endColumn": 82,
                  "snippet": {
                    "text": "  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n    {{- $requiredPostgresqlPassword := dict \"valueKey\" $valueKeyPostgresqlPassword \"secret\" .secret \"field\" \"postgresql-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPostgresqlPassword -}}\n\n    {{- $enabledReplication := include \"common.postgresql.values.enabled.replication\" . -}}\n    {{- if (eq $enabledReplication \"true\") -}}\n",
                    "rendered": {
                      "text": "  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n    {{- $requiredPostgresqlPassword := dict \"valueKey\" $valueKeyPostgresqlPassword \"secret\" .secret \"field\" \"postgresql-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPostgresqlPassword -}}\n\n    {{- $enabledReplication := include \"common.postgresql.values.enabled.replication\" . -}}\n    {{- if (eq $enabledReplication \"true\") -}}\n",
                      "markdown": "`  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n    {{- $requiredPostgresqlPassword := dict \"valueKey\" $valueKeyPostgresqlPassword \"secret\" .secret \"field\" \"postgresql-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPostgresqlPassword -}}\n\n    {{- $enabledReplication := include \"common.postgresql.values.enabled.replication\" . -}}\n    {{- if (eq $enabledReplication \"true\") -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_postgresql.tpl"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 45,
                  "endLine": 19,
                  "endColumn": 53,
                  "snippet": {
                    "text": "  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n    {{- $requiredPostgresqlPassword := dict \"valueKey\" $valueKeyPostgresqlPassword \"secret\" .secret \"field\" \"postgresql-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPostgresqlPassword -}}\n\n    {{- $enabledReplication := include \"common.postgresql.values.enabled.replication\" . -}}\n    {{- if (eq $enabledReplication \"true\") -}}\n",
                    "rendered": {
                      "text": "  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n    {{- $requiredPostgresqlPassword := dict \"valueKey\" $valueKeyPostgresqlPassword \"secret\" .secret \"field\" \"postgresql-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPostgresqlPassword -}}\n\n    {{- $enabledReplication := include \"common.postgresql.values.enabled.replication\" . -}}\n    {{- if (eq $enabledReplication \"true\") -}}\n",
                      "markdown": "`  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n    {{- $requiredPostgresqlPassword := dict \"valueKey\" $valueKeyPostgresqlPassword \"secret\" .secret \"field\" \"postgresql-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPostgresqlPassword -}}\n\n    {{- $enabledReplication := include \"common.postgresql.values.enabled.replication\" . -}}\n    {{- if (eq $enabledReplication \"true\") -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_postgresql.tpl"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 17,
                  "endLine": 19,
                  "endColumn": 25,
                  "snippet": {
                    "text": "  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n    {{- $requiredPostgresqlPassword := dict \"valueKey\" $valueKeyPostgresqlPassword \"secret\" .secret \"field\" \"postgresql-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPostgresqlPassword -}}\n\n    {{- $enabledReplication := include \"common.postgresql.values.enabled.replication\" . -}}\n    {{- if (eq $enabledReplication \"true\") -}}\n",
                    "rendered": {
                      "text": "  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n    {{- $requiredPostgresqlPassword := dict \"valueKey\" $valueKeyPostgresqlPassword \"secret\" .secret \"field\" \"postgresql-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPostgresqlPassword -}}\n\n    {{- $enabledReplication := include \"common.postgresql.values.enabled.replication\" . -}}\n    {{- if (eq $enabledReplication \"true\") -}}\n",
                      "markdown": "`  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n    {{- $requiredPostgresqlPassword := dict \"valueKey\" $valueKeyPostgresqlPassword \"secret\" .secret \"field\" \"postgresql-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPostgresqlPassword -}}\n\n    {{- $enabledReplication := include \"common.postgresql.values.enabled.replication\" . -}}\n    {{- if (eq $enabledReplication \"true\") -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_postgresql.tpl"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 120,
                  "endLine": 18,
                  "endColumn": 128,
                  "snippet": {
                    "text": "  {{- $valueKeyPostgresqlReplicationEnabled := include \"common.postgresql.values.key.replicationPassword\" . -}}\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n    {{- $requiredPostgresqlPassword := dict \"valueKey\" $valueKeyPostgresqlPassword \"secret\" .secret \"field\" \"postgresql-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPostgresqlPassword -}}\n\n    {{- $enabledReplication := include \"common.postgresql.values.enabled.replication\" . -}}\n",
                    "rendered": {
                      "text": "  {{- $valueKeyPostgresqlReplicationEnabled := include \"common.postgresql.values.key.replicationPassword\" . -}}\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n    {{- $requiredPostgresqlPassword := dict \"valueKey\" $valueKeyPostgresqlPassword \"secret\" .secret \"field\" \"postgresql-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPostgresqlPassword -}}\n\n    {{- $enabledReplication := include \"common.postgresql.values.enabled.replication\" . -}}\n",
                      "markdown": "`  {{- $valueKeyPostgresqlReplicationEnabled := include \"common.postgresql.values.key.replicationPassword\" . -}}\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n    {{- $requiredPostgresqlPassword := dict \"valueKey\" $valueKeyPostgresqlPassword \"secret\" .secret \"field\" \"postgresql-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPostgresqlPassword -}}\n\n    {{- $enabledReplication := include \"common.postgresql.values.enabled.replication\" . -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_postgresql.tpl"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 74,
                  "endLine": 18,
                  "endColumn": 82,
                  "snippet": {
                    "text": "  {{- $valueKeyPostgresqlReplicationEnabled := include \"common.postgresql.values.key.replicationPassword\" . -}}\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n    {{- $requiredPostgresqlPassword := dict \"valueKey\" $valueKeyPostgresqlPassword \"secret\" .secret \"field\" \"postgresql-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPostgresqlPassword -}}\n\n    {{- $enabledReplication := include \"common.postgresql.values.enabled.replication\" . -}}\n",
                    "rendered": {
                      "text": "  {{- $valueKeyPostgresqlReplicationEnabled := include \"common.postgresql.values.key.replicationPassword\" . -}}\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n    {{- $requiredPostgresqlPassword := dict \"valueKey\" $valueKeyPostgresqlPassword \"secret\" .secret \"field\" \"postgresql-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPostgresqlPassword -}}\n\n    {{- $enabledReplication := include \"common.postgresql.values.enabled.replication\" . -}}\n",
                      "markdown": "`  {{- $valueKeyPostgresqlReplicationEnabled := include \"common.postgresql.values.key.replicationPassword\" . -}}\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n    {{- $requiredPostgresqlPassword := dict \"valueKey\" $valueKeyPostgresqlPassword \"secret\" .secret \"field\" \"postgresql-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPostgresqlPassword -}}\n\n    {{- $enabledReplication := include \"common.postgresql.values.enabled.replication\" . -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_postgresql.tpl"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 27,
                  "endLine": 18,
                  "endColumn": 35,
                  "snippet": {
                    "text": "  {{- $valueKeyPostgresqlReplicationEnabled := include \"common.postgresql.values.key.replicationPassword\" . -}}\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n    {{- $requiredPostgresqlPassword := dict \"valueKey\" $valueKeyPostgresqlPassword \"secret\" .secret \"field\" \"postgresql-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPostgresqlPassword -}}\n\n    {{- $enabledReplication := include \"common.postgresql.values.enabled.replication\" . -}}\n",
                    "rendered": {
                      "text": "  {{- $valueKeyPostgresqlReplicationEnabled := include \"common.postgresql.values.key.replicationPassword\" . -}}\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n    {{- $requiredPostgresqlPassword := dict \"valueKey\" $valueKeyPostgresqlPassword \"secret\" .secret \"field\" \"postgresql-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPostgresqlPassword -}}\n\n    {{- $enabledReplication := include \"common.postgresql.values.enabled.replication\" . -}}\n",
                      "markdown": "`  {{- $valueKeyPostgresqlReplicationEnabled := include \"common.postgresql.values.key.replicationPassword\" . -}}\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n    {{- $requiredPostgresqlPassword := dict \"valueKey\" $valueKeyPostgresqlPassword \"secret\" .secret \"field\" \"postgresql-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPostgresqlPassword -}}\n\n    {{- $enabledReplication := include \"common.postgresql.values.enabled.replication\" . -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_postgresql.tpl"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 17,
                  "endLine": 17,
                  "endColumn": 25,
                  "snippet": {
                    "text": "  {{- $valueKeyPostgresqlPassword := include \"common.postgresql.values.key.postgressPassword\" . -}}\n  {{- $valueKeyPostgresqlReplicationEnabled := include \"common.postgresql.values.key.replicationPassword\" . -}}\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n    {{- $requiredPostgresqlPassword := dict \"valueKey\" $valueKeyPostgresqlPassword \"secret\" .secret \"field\" \"postgresql-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPostgresqlPassword -}}\n\n",
                    "rendered": {
                      "text": "  {{- $valueKeyPostgresqlPassword := include \"common.postgresql.values.key.postgressPassword\" . -}}\n  {{- $valueKeyPostgresqlReplicationEnabled := include \"common.postgresql.values.key.replicationPassword\" . -}}\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n    {{- $requiredPostgresqlPassword := dict \"valueKey\" $valueKeyPostgresqlPassword \"secret\" .secret \"field\" \"postgresql-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPostgresqlPassword -}}\n\n",
                      "markdown": "`  {{- $valueKeyPostgresqlPassword := include \"common.postgresql.values.key.postgressPassword\" . -}}\n  {{- $valueKeyPostgresqlReplicationEnabled := include \"common.postgresql.values.key.replicationPassword\" . -}}\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n    {{- $requiredPostgresqlPassword := dict \"valueKey\" $valueKeyPostgresqlPassword \"secret\" .secret \"field\" \"postgresql-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredPostgresqlPassword -}}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_postgresql.tpl"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 96,
                  "endLine": 15,
                  "endColumn": 104,
                  "snippet": {
                    "text": "tgresql.values.existingSecret\" . -}}\n  {{- $enabled := include \"common.postgresql.values.enabled\" . -}}\n  {{- $valueKeyPostgresqlPassword := include \"common.postgresql.values.key.postgressPassword\" . -}}\n  {{- $valueKeyPostgresqlReplicationEnabled := include \"common.postgresql.values.key.replicationPassword\" . -}}\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n    {{- $requiredPostgresqlPassword := dict \"valueKey\" $valueKeyPostgresqlPassword \"secret\" .secret \"field\" \"postgresql-password\" -}}\n    {{- $requiredPasswords",
                    "rendered": {
                      "text": "tgresql.values.existingSecret\" . -}}\n  {{- $enabled := include \"common.postgresql.values.enabled\" . -}}\n  {{- $valueKeyPostgresqlPassword := include \"common.postgresql.values.key.postgressPassword\" . -}}\n  {{- $valueKeyPostgresqlReplicationEnabled := include \"common.postgresql.values.key.replicationPassword\" . -}}\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n    {{- $requiredPostgresqlPassword := dict \"valueKey\" $valueKeyPostgresqlPassword \"secret\" .secret \"field\" \"postgresql-password\" -}}\n    {{- $requiredPasswords",
                      "markdown": "`tgresql.values.existingSecret\" . -}}\n  {{- $enabled := include \"common.postgresql.values.enabled\" . -}}\n  {{- $valueKeyPostgresqlPassword := include \"common.postgresql.values.key.postgressPassword\" . -}}\n  {{- $valueKeyPostgresqlReplicationEnabled := include \"common.postgresql.values.key.replicationPassword\" . -}}\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n    {{- $requiredPostgresqlPassword := dict \"valueKey\" $valueKeyPostgresqlPassword \"secret\" .secret \"field\" \"postgresql-password\" -}}\n    {{- $requiredPasswords`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_postgresql.tpl"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 84,
                  "endLine": 14,
                  "endColumn": 92,
                  "snippet": {
                    "text": "{{- define \"common.validations.values.postgresql.passwords\" -}}\n  {{- $existingSecret := include \"common.postgresql.values.existingSecret\" . -}}\n  {{- $enabled := include \"common.postgresql.values.enabled\" . -}}\n  {{- $valueKeyPostgresqlPassword := include \"common.postgresql.values.key.postgressPassword\" . -}}\n  {{- $valueKeyPostgresqlReplicationEnabled := include \"common.postgresql.values.key.replicationPassword\" . -}}\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n",
                    "rendered": {
                      "text": "{{- define \"common.validations.values.postgresql.passwords\" -}}\n  {{- $existingSecret := include \"common.postgresql.values.existingSecret\" . -}}\n  {{- $enabled := include \"common.postgresql.values.enabled\" . -}}\n  {{- $valueKeyPostgresqlPassword := include \"common.postgresql.values.key.postgressPassword\" . -}}\n  {{- $valueKeyPostgresqlReplicationEnabled := include \"common.postgresql.values.key.replicationPassword\" . -}}\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n",
                      "markdown": "`{{- define \"common.validations.values.postgresql.passwords\" -}}\n  {{- $existingSecret := include \"common.postgresql.values.existingSecret\" . -}}\n  {{- $enabled := include \"common.postgresql.values.enabled\" . -}}\n  {{- $valueKeyPostgresqlPassword := include \"common.postgresql.values.key.postgressPassword\" . -}}\n  {{- $valueKeyPostgresqlReplicationEnabled := include \"common.postgresql.values.key.replicationPassword\" . -}}\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_postgresql.tpl"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 25,
                  "endLine": 14,
                  "endColumn": 33,
                  "snippet": {
                    "text": "{{- define \"common.validations.values.postgresql.passwords\" -}}\n  {{- $existingSecret := include \"common.postgresql.values.existingSecret\" . -}}\n  {{- $enabled := include \"common.postgresql.values.enabled\" . -}}\n  {{- $valueKeyPostgresqlPassword := include \"common.postgresql.values.key.postgressPassword\" . -}}\n  {{- $valueKeyPostgresqlReplicationEnabled := include \"common.postgresql.values.key.replicationPassword\" . -}}\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n",
                    "rendered": {
                      "text": "{{- define \"common.validations.values.postgresql.passwords\" -}}\n  {{- $existingSecret := include \"common.postgresql.values.existingSecret\" . -}}\n  {{- $enabled := include \"common.postgresql.values.enabled\" . -}}\n  {{- $valueKeyPostgresqlPassword := include \"common.postgresql.values.key.postgressPassword\" . -}}\n  {{- $valueKeyPostgresqlReplicationEnabled := include \"common.postgresql.values.key.replicationPassword\" . -}}\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n",
                      "markdown": "`{{- define \"common.validations.values.postgresql.passwords\" -}}\n  {{- $existingSecret := include \"common.postgresql.values.existingSecret\" . -}}\n  {{- $enabled := include \"common.postgresql.values.enabled\" . -}}\n  {{- $valueKeyPostgresqlPassword := include \"common.postgresql.values.key.postgressPassword\" . -}}\n  {{- $valueKeyPostgresqlReplicationEnabled := include \"common.postgresql.values.key.replicationPassword\" . -}}\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_postgresql.tpl"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 49,
                  "endLine": 11,
                  "endColumn": 57,
                  "snippet": {
                    "text": "  - secret - String - Required. Name of the secret where postgresql values are stored, e.g: \"postgresql-passwords-secret\"\n  - subchart - Boolean - Optional. Whether postgresql is used as subchart or not. Default: false\n*/}}\n{{- define \"common.validations.values.postgresql.passwords\" -}}\n  {{- $existingSecret := include \"common.postgresql.values.existingSecret\" . -}}\n  {{- $enabled := include \"common.postgresql.values.enabled\" . -}}\n  {{- $valueKeyPostgresqlPassword := include \"common.postgresql.values.key.postgressPassword\" . -}}\n",
                    "rendered": {
                      "text": "  - secret - String - Required. Name of the secret where postgresql values are stored, e.g: \"postgresql-passwords-secret\"\n  - subchart - Boolean - Optional. Whether postgresql is used as subchart or not. Default: false\n*/}}\n{{- define \"common.validations.values.postgresql.passwords\" -}}\n  {{- $existingSecret := include \"common.postgresql.values.existingSecret\" . -}}\n  {{- $enabled := include \"common.postgresql.values.enabled\" . -}}\n  {{- $valueKeyPostgresqlPassword := include \"common.postgresql.values.key.postgressPassword\" . -}}\n",
                      "markdown": "`  - secret - String - Required. Name of the secret where postgresql values are stored, e.g: \"postgresql-passwords-secret\"\n  - subchart - Boolean - Optional. Whether postgresql is used as subchart or not. Default: false\n*/}}\n{{- define \"common.validations.values.postgresql.passwords\" -}}\n  {{- $existingSecret := include \"common.postgresql.values.existingSecret\" . -}}\n  {{- $enabled := include \"common.postgresql.values.enabled\" . -}}\n  {{- $valueKeyPostgresqlPassword := include \"common.postgresql.values.key.postgressPassword\" . -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_postgresql.tpl"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 104,
                  "endLine": 8,
                  "endColumn": 112,
                  "snippet": {
                    "text": "Usage:\n{{ include \"common.validations.values.postgresql.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\nParams:\n  - secret - String - Required. Name of the secret where postgresql values are stored, e.g: \"postgresql-passwords-secret\"\n  - subchart - Boolean - Optional. Whether postgresql is used as subchart or not. Default: false\n*/}}\n{{- define \"common.validations.values.postgresql.passwords\" -}}\n",
                    "rendered": {
                      "text": "Usage:\n{{ include \"common.validations.values.postgresql.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\nParams:\n  - secret - String - Required. Name of the secret where postgresql values are stored, e.g: \"postgresql-passwords-secret\"\n  - subchart - Boolean - Optional. Whether postgresql is used as subchart or not. Default: false\n*/}}\n{{- define \"common.validations.values.postgresql.passwords\" -}}\n",
                      "markdown": "`Usage:\n{{ include \"common.validations.values.postgresql.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\nParams:\n  - secret - String - Required. Name of the secret where postgresql values are stored, e.g: \"postgresql-passwords-secret\"\n  - subchart - Boolean - Optional. Whether postgresql is used as subchart or not. Default: false\n*/}}\n{{- define \"common.validations.values.postgresql.passwords\" -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_postgresql.tpl"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 49,
                  "endLine": 6,
                  "endColumn": 57,
                  "snippet": {
                    "text": "Validate PostgreSQL required passwords are not empty.\n\nUsage:\n{{ include \"common.validations.values.postgresql.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\nParams:\n  - secret - String - Required. Name of the secret where postgresql values are stored, e.g: \"postgresql-passwords-secret\"\n  - subchart - Boolean - Optional. Whether postgresql is used as subchart or not. Default: false\n",
                    "rendered": {
                      "text": "Validate PostgreSQL required passwords are not empty.\n\nUsage:\n{{ include \"common.validations.values.postgresql.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\nParams:\n  - secret - String - Required. Name of the secret where postgresql values are stored, e.g: \"postgresql-passwords-secret\"\n  - subchart - Boolean - Optional. Whether postgresql is used as subchart or not. Default: false\n",
                      "markdown": "`Validate PostgreSQL required passwords are not empty.\n\nUsage:\n{{ include \"common.validations.values.postgresql.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\nParams:\n  - secret - String - Required. Name of the secret where postgresql values are stored, e.g: \"postgresql-passwords-secret\"\n  - subchart - Boolean - Optional. Whether postgresql is used as subchart or not. Default: false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_postgresql.tpl"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 29,
                  "endLine": 3,
                  "endColumn": 37,
                  "snippet": {
                    "text": "{{/* vim: set filetype=mustache: */}}\n{{/*\nValidate PostgreSQL required passwords are not empty.\n\nUsage:\n{{ include \"common.validations.values.postgresql.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\n",
                    "rendered": {
                      "text": "{{/* vim: set filetype=mustache: */}}\n{{/*\nValidate PostgreSQL required passwords are not empty.\n\nUsage:\n{{ include \"common.validations.values.postgresql.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\n",
                      "markdown": "`{{/* vim: set filetype=mustache: */}}\n{{/*\nValidate PostgreSQL required passwords are not empty.\n\nUsage:\n{{ include \"common.validations.values.postgresql.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mongodb.tpl"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 85,
                  "endLine": 43,
                  "endColumn": 93,
                  "snippet": {
                    "text": "        {{- $requiredPasswords = append $requiredPasswords $requiredReplicaSetKey -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n\n  {{- end -}}\n{{- end -}}\n",
                    "rendered": {
                      "text": "        {{- $requiredPasswords = append $requiredPasswords $requiredReplicaSetKey -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n\n  {{- end -}}\n{{- end -}}\n",
                      "markdown": "`        {{- $requiredPasswords = append $requiredPasswords $requiredReplicaSetKey -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n\n  {{- end -}}\n{{- end -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mongodb.tpl"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 49,
                  "endLine": 40,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\n    {{- if (eq $architecture \"replicaset\") -}}\n        {{- $requiredReplicaSetKey := dict \"valueKey\" $valueKeyReplicaSetKey \"secret\" .secret \"field\" \"mongodb-replica-set-key\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredReplicaSetKey -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n",
                    "rendered": {
                      "text": "\n    {{- if (eq $architecture \"replicaset\") -}}\n        {{- $requiredReplicaSetKey := dict \"valueKey\" $valueKeyReplicaSetKey \"secret\" .secret \"field\" \"mongodb-replica-set-key\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredReplicaSetKey -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n",
                      "markdown": "`\n    {{- if (eq $architecture \"replicaset\") -}}\n        {{- $requiredReplicaSetKey := dict \"valueKey\" $valueKeyReplicaSetKey \"secret\" .secret \"field\" \"mongodb-replica-set-key\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredReplicaSetKey -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mongodb.tpl"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 21,
                  "endLine": 40,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n    {{- if (eq $architecture \"replicaset\") -}}\n        {{- $requiredReplicaSetKey := dict \"valueKey\" $valueKeyReplicaSetKey \"secret\" .secret \"field\" \"mongodb-replica-set-key\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredReplicaSetKey -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n",
                    "rendered": {
                      "text": "\n    {{- if (eq $architecture \"replicaset\") -}}\n        {{- $requiredReplicaSetKey := dict \"valueKey\" $valueKeyReplicaSetKey \"secret\" .secret \"field\" \"mongodb-replica-set-key\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredReplicaSetKey -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n",
                      "markdown": "`\n    {{- if (eq $architecture \"replicaset\") -}}\n        {{- $requiredReplicaSetKey := dict \"valueKey\" $valueKeyReplicaSetKey \"secret\" .secret \"field\" \"mongodb-replica-set-key\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredReplicaSetKey -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mongodb.tpl"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 68,
                  "endLine": 35,
                  "endColumn": 76,
                  "snippet": {
                    "text": "    {{- $valueDatabase := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyDatabase \"context\" .context) }}\n    {{- if and $valueUsername $valueDatabase -}}\n        {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"mongodb-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n    {{- end -}}\n\n    {{- if (eq $architecture \"replicaset\") -}}\n",
                    "rendered": {
                      "text": "    {{- $valueDatabase := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyDatabase \"context\" .context) }}\n    {{- if and $valueUsername $valueDatabase -}}\n        {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"mongodb-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n    {{- end -}}\n\n    {{- if (eq $architecture \"replicaset\") -}}\n",
                      "markdown": "`    {{- $valueDatabase := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyDatabase \"context\" .context) }}\n    {{- if and $valueUsername $valueDatabase -}}\n        {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"mongodb-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n    {{- end -}}\n\n    {{- if (eq $architecture \"replicaset\") -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mongodb.tpl"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 49,
                  "endLine": 35,
                  "endColumn": 57,
                  "snippet": {
                    "text": "    {{- $valueDatabase := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyDatabase \"context\" .context) }}\n    {{- if and $valueUsername $valueDatabase -}}\n        {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"mongodb-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n    {{- end -}}\n\n    {{- if (eq $architecture \"replicaset\") -}}\n",
                    "rendered": {
                      "text": "    {{- $valueDatabase := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyDatabase \"context\" .context) }}\n    {{- if and $valueUsername $valueDatabase -}}\n        {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"mongodb-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n    {{- end -}}\n\n    {{- if (eq $architecture \"replicaset\") -}}\n",
                      "markdown": "`    {{- $valueDatabase := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyDatabase \"context\" .context) }}\n    {{- if and $valueUsername $valueDatabase -}}\n        {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"mongodb-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n    {{- end -}}\n\n    {{- if (eq $architecture \"replicaset\") -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mongodb.tpl"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    {{- $valueDatabase := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyDatabase \"context\" .context) }}\n    {{- if and $valueUsername $valueDatabase -}}\n        {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"mongodb-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n    {{- end -}}\n\n    {{- if (eq $architecture \"replicaset\") -}}\n",
                    "rendered": {
                      "text": "    {{- $valueDatabase := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyDatabase \"context\" .context) }}\n    {{- if and $valueUsername $valueDatabase -}}\n        {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"mongodb-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n    {{- end -}}\n\n    {{- if (eq $architecture \"replicaset\") -}}\n",
                      "markdown": "`    {{- $valueDatabase := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyDatabase \"context\" .context) }}\n    {{- if and $valueUsername $valueDatabase -}}\n        {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"mongodb-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n    {{- end -}}\n\n    {{- if (eq $architecture \"replicaset\") -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mongodb.tpl"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 101,
                  "endLine": 34,
                  "endColumn": 109,
                  "snippet": {
                    "text": "    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- $valueDatabase := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyDatabase \"context\" .context) }}\n    {{- if and $valueUsername $valueDatabase -}}\n        {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"mongodb-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n    {{- end -}}\n\n",
                    "rendered": {
                      "text": "    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- $valueDatabase := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyDatabase \"context\" .context) }}\n    {{- if and $valueUsername $valueDatabase -}}\n        {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"mongodb-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n    {{- end -}}\n\n",
                      "markdown": "`    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- $valueDatabase := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyDatabase \"context\" .context) }}\n    {{- if and $valueUsername $valueDatabase -}}\n        {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"mongodb-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n    {{- end -}}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mongodb.tpl"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 66,
                  "snippet": {
                    "text": "    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- $valueDatabase := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyDatabase \"context\" .context) }}\n    {{- if and $valueUsername $valueDatabase -}}\n        {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"mongodb-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n    {{- end -}}\n\n",
                    "rendered": {
                      "text": "    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- $valueDatabase := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyDatabase \"context\" .context) }}\n    {{- if and $valueUsername $valueDatabase -}}\n        {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"mongodb-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n    {{- end -}}\n\n",
                      "markdown": "`    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- $valueDatabase := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyDatabase \"context\" .context) }}\n    {{- if and $valueUsername $valueDatabase -}}\n        {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"mongodb-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n    {{- end -}}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mongodb.tpl"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- $valueDatabase := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyDatabase \"context\" .context) }}\n    {{- if and $valueUsername $valueDatabase -}}\n        {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"mongodb-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n    {{- end -}}\n\n",
                    "rendered": {
                      "text": "    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- $valueDatabase := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyDatabase \"context\" .context) }}\n    {{- if and $valueUsername $valueDatabase -}}\n        {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"mongodb-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n    {{- end -}}\n\n",
                      "markdown": "`    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- $valueDatabase := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyDatabase \"context\" .context) }}\n    {{- if and $valueUsername $valueDatabase -}}\n        {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"mongodb-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n    {{- end -}}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mongodb.tpl"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 68,
                  "endLine": 29,
                  "endColumn": 76,
                  "snippet": {
                    "text": "    {{- $requiredPasswords := list -}}\n\n    {{- $requiredRootPassword := dict \"valueKey\" $valueKeyRootPassword \"secret\" .secret \"field\" \"mongodb-root-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredRootPassword -}}\n\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- $valueDatabase := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyDatabase \"context\" .context) }}\n",
                    "rendered": {
                      "text": "    {{- $requiredPasswords := list -}}\n\n    {{- $requiredRootPassword := dict \"valueKey\" $valueKeyRootPassword \"secret\" .secret \"field\" \"mongodb-root-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredRootPassword -}}\n\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- $valueDatabase := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyDatabase \"context\" .context) }}\n",
                      "markdown": "`    {{- $requiredPasswords := list -}}\n\n    {{- $requiredRootPassword := dict \"valueKey\" $valueKeyRootPassword \"secret\" .secret \"field\" \"mongodb-root-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredRootPassword -}}\n\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- $valueDatabase := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyDatabase \"context\" .context) }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mongodb.tpl"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 45,
                  "endLine": 29,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    {{- $requiredPasswords := list -}}\n\n    {{- $requiredRootPassword := dict \"valueKey\" $valueKeyRootPassword \"secret\" .secret \"field\" \"mongodb-root-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredRootPassword -}}\n\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- $valueDatabase := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyDatabase \"context\" .context) }}\n",
                    "rendered": {
                      "text": "    {{- $requiredPasswords := list -}}\n\n    {{- $requiredRootPassword := dict \"valueKey\" $valueKeyRootPassword \"secret\" .secret \"field\" \"mongodb-root-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredRootPassword -}}\n\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- $valueDatabase := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyDatabase \"context\" .context) }}\n",
                      "markdown": "`    {{- $requiredPasswords := list -}}\n\n    {{- $requiredRootPassword := dict \"valueKey\" $valueKeyRootPassword \"secret\" .secret \"field\" \"mongodb-root-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredRootPassword -}}\n\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- $valueDatabase := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyDatabase \"context\" .context) }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mongodb.tpl"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 17,
                  "endLine": 29,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    {{- $requiredPasswords := list -}}\n\n    {{- $requiredRootPassword := dict \"valueKey\" $valueKeyRootPassword \"secret\" .secret \"field\" \"mongodb-root-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredRootPassword -}}\n\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- $valueDatabase := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyDatabase \"context\" .context) }}\n",
                    "rendered": {
                      "text": "    {{- $requiredPasswords := list -}}\n\n    {{- $requiredRootPassword := dict \"valueKey\" $valueKeyRootPassword \"secret\" .secret \"field\" \"mongodb-root-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredRootPassword -}}\n\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- $valueDatabase := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyDatabase \"context\" .context) }}\n",
                      "markdown": "`    {{- $requiredPasswords := list -}}\n\n    {{- $requiredRootPassword := dict \"valueKey\" $valueKeyRootPassword \"secret\" .secret \"field\" \"mongodb-root-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredRootPassword -}}\n\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- $valueDatabase := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyDatabase \"context\" .context) }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mongodb.tpl"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 110,
                  "endLine": 28,
                  "endColumn": 118,
                  "snippet": {
                    "text": "  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") (eq $authEnabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n\n    {{- $requiredRootPassword := dict \"valueKey\" $valueKeyRootPassword \"secret\" .secret \"field\" \"mongodb-root-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredRootPassword -}}\n\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n",
                    "rendered": {
                      "text": "  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") (eq $authEnabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n\n    {{- $requiredRootPassword := dict \"valueKey\" $valueKeyRootPassword \"secret\" .secret \"field\" \"mongodb-root-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredRootPassword -}}\n\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n",
                      "markdown": "`  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") (eq $authEnabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n\n    {{- $requiredRootPassword := dict \"valueKey\" $valueKeyRootPassword \"secret\" .secret \"field\" \"mongodb-root-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredRootPassword -}}\n\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mongodb.tpl"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 62,
                  "endLine": 28,
                  "endColumn": 70,
                  "snippet": {
                    "text": "  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") (eq $authEnabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n\n    {{- $requiredRootPassword := dict \"valueKey\" $valueKeyRootPassword \"secret\" .secret \"field\" \"mongodb-root-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredRootPassword -}}\n\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n",
                    "rendered": {
                      "text": "  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") (eq $authEnabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n\n    {{- $requiredRootPassword := dict \"valueKey\" $valueKeyRootPassword \"secret\" .secret \"field\" \"mongodb-root-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredRootPassword -}}\n\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n",
                      "markdown": "`  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") (eq $authEnabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n\n    {{- $requiredRootPassword := dict \"valueKey\" $valueKeyRootPassword \"secret\" .secret \"field\" \"mongodb-root-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredRootPassword -}}\n\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mongodb.tpl"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 21,
                  "endLine": 28,
                  "endColumn": 29,
                  "snippet": {
                    "text": "  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") (eq $authEnabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n\n    {{- $requiredRootPassword := dict \"valueKey\" $valueKeyRootPassword \"secret\" .secret \"field\" \"mongodb-root-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredRootPassword -}}\n\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n",
                    "rendered": {
                      "text": "  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") (eq $authEnabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n\n    {{- $requiredRootPassword := dict \"valueKey\" $valueKeyRootPassword \"secret\" .secret \"field\" \"mongodb-root-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredRootPassword -}}\n\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n",
                      "markdown": "`  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") (eq $authEnabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n\n    {{- $requiredRootPassword := dict \"valueKey\" $valueKeyRootPassword \"secret\" .secret \"field\" \"mongodb-root-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredRootPassword -}}\n\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mongodb.tpl"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 17,
                  "endLine": 26,
                  "endColumn": 25,
                  "snippet": {
                    "text": "  {{- $authEnabled := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyAuthEnabled \"context\" .context) -}}\n\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") (eq $authEnabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n\n    {{- $requiredRootPassword := dict \"valueKey\" $valueKeyRootPassword \"secret\" .secret \"field\" \"mongodb-root-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredRootPassword -}}\n",
                    "rendered": {
                      "text": "  {{- $authEnabled := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyAuthEnabled \"context\" .context) -}}\n\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") (eq $authEnabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n\n    {{- $requiredRootPassword := dict \"valueKey\" $valueKeyRootPassword \"secret\" .secret \"field\" \"mongodb-root-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredRootPassword -}}\n",
                      "markdown": "`  {{- $authEnabled := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyAuthEnabled \"context\" .context) -}}\n\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") (eq $authEnabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n\n    {{- $requiredRootPassword := dict \"valueKey\" $valueKeyRootPassword \"secret\" .secret \"field\" \"mongodb-root-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredRootPassword -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mongodb.tpl"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 38,
                  "endLine": 19,
                  "endColumn": 46,
                  "snippet": {
                    "text": "  {{- $valueKeyRootPassword := printf \"%s.rootPassword\" $authPrefix -}}\n  {{- $valueKeyUsername := printf \"%s.username\" $authPrefix -}}\n  {{- $valueKeyDatabase := printf \"%s.database\" $authPrefix -}}\n  {{- $valueKeyPassword := printf \"%s.password\" $authPrefix -}}\n  {{- $valueKeyReplicaSetKey := printf \"%s.replicaSetKey\" $authPrefix -}}\n  {{- $valueKeyAuthEnabled := printf \"%s.enabled\" $authPrefix -}}\n\n",
                    "rendered": {
                      "text": "  {{- $valueKeyRootPassword := printf \"%s.rootPassword\" $authPrefix -}}\n  {{- $valueKeyUsername := printf \"%s.username\" $authPrefix -}}\n  {{- $valueKeyDatabase := printf \"%s.database\" $authPrefix -}}\n  {{- $valueKeyPassword := printf \"%s.password\" $authPrefix -}}\n  {{- $valueKeyReplicaSetKey := printf \"%s.replicaSetKey\" $authPrefix -}}\n  {{- $valueKeyAuthEnabled := printf \"%s.enabled\" $authPrefix -}}\n\n",
                      "markdown": "`  {{- $valueKeyRootPassword := printf \"%s.rootPassword\" $authPrefix -}}\n  {{- $valueKeyUsername := printf \"%s.username\" $authPrefix -}}\n  {{- $valueKeyDatabase := printf \"%s.database\" $authPrefix -}}\n  {{- $valueKeyPassword := printf \"%s.password\" $authPrefix -}}\n  {{- $valueKeyReplicaSetKey := printf \"%s.replicaSetKey\" $authPrefix -}}\n  {{- $valueKeyAuthEnabled := printf \"%s.enabled\" $authPrefix -}}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mongodb.tpl"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 15,
                  "endLine": 19,
                  "endColumn": 23,
                  "snippet": {
                    "text": "  {{- $valueKeyRootPassword := printf \"%s.rootPassword\" $authPrefix -}}\n  {{- $valueKeyUsername := printf \"%s.username\" $authPrefix -}}\n  {{- $valueKeyDatabase := printf \"%s.database\" $authPrefix -}}\n  {{- $valueKeyPassword := printf \"%s.password\" $authPrefix -}}\n  {{- $valueKeyReplicaSetKey := printf \"%s.replicaSetKey\" $authPrefix -}}\n  {{- $valueKeyAuthEnabled := printf \"%s.enabled\" $authPrefix -}}\n\n",
                    "rendered": {
                      "text": "  {{- $valueKeyRootPassword := printf \"%s.rootPassword\" $authPrefix -}}\n  {{- $valueKeyUsername := printf \"%s.username\" $authPrefix -}}\n  {{- $valueKeyDatabase := printf \"%s.database\" $authPrefix -}}\n  {{- $valueKeyPassword := printf \"%s.password\" $authPrefix -}}\n  {{- $valueKeyReplicaSetKey := printf \"%s.replicaSetKey\" $authPrefix -}}\n  {{- $valueKeyAuthEnabled := printf \"%s.enabled\" $authPrefix -}}\n\n",
                      "markdown": "`  {{- $valueKeyRootPassword := printf \"%s.rootPassword\" $authPrefix -}}\n  {{- $valueKeyUsername := printf \"%s.username\" $authPrefix -}}\n  {{- $valueKeyDatabase := printf \"%s.database\" $authPrefix -}}\n  {{- $valueKeyPassword := printf \"%s.password\" $authPrefix -}}\n  {{- $valueKeyReplicaSetKey := printf \"%s.replicaSetKey\" $authPrefix -}}\n  {{- $valueKeyAuthEnabled := printf \"%s.enabled\" $authPrefix -}}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mongodb.tpl"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 46,
                  "endLine": 16,
                  "endColumn": 54,
                  "snippet": {
                    "text": "  {{- $enabled := include \"common.mongodb.values.enabled\" . -}}\n  {{- $authPrefix := include \"common.mongodb.values.key.auth\" . -}}\n  {{- $architecture := include \"common.mongodb.values.architecture\" . -}}\n  {{- $valueKeyRootPassword := printf \"%s.rootPassword\" $authPrefix -}}\n  {{- $valueKeyUsername := printf \"%s.username\" $authPrefix -}}\n  {{- $valueKeyDatabase := printf \"%s.database\" $authPrefix -}}\n  {{- $valueKeyPassword := printf \"%s.password\" $authPrefix -}}\n",
                    "rendered": {
                      "text": "  {{- $enabled := include \"common.mongodb.values.enabled\" . -}}\n  {{- $authPrefix := include \"common.mongodb.values.key.auth\" . -}}\n  {{- $architecture := include \"common.mongodb.values.architecture\" . -}}\n  {{- $valueKeyRootPassword := printf \"%s.rootPassword\" $authPrefix -}}\n  {{- $valueKeyUsername := printf \"%s.username\" $authPrefix -}}\n  {{- $valueKeyDatabase := printf \"%s.database\" $authPrefix -}}\n  {{- $valueKeyPassword := printf \"%s.password\" $authPrefix -}}\n",
                      "markdown": "`  {{- $enabled := include \"common.mongodb.values.enabled\" . -}}\n  {{- $authPrefix := include \"common.mongodb.values.key.auth\" . -}}\n  {{- $architecture := include \"common.mongodb.values.architecture\" . -}}\n  {{- $valueKeyRootPassword := printf \"%s.rootPassword\" $authPrefix -}}\n  {{- $valueKeyUsername := printf \"%s.username\" $authPrefix -}}\n  {{- $valueKeyDatabase := printf \"%s.database\" $authPrefix -}}\n  {{- $valueKeyPassword := printf \"%s.password\" $authPrefix -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mongodb.tpl"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 19,
                  "endLine": 16,
                  "endColumn": 27,
                  "snippet": {
                    "text": "  {{- $enabled := include \"common.mongodb.values.enabled\" . -}}\n  {{- $authPrefix := include \"common.mongodb.values.key.auth\" . -}}\n  {{- $architecture := include \"common.mongodb.values.architecture\" . -}}\n  {{- $valueKeyRootPassword := printf \"%s.rootPassword\" $authPrefix -}}\n  {{- $valueKeyUsername := printf \"%s.username\" $authPrefix -}}\n  {{- $valueKeyDatabase := printf \"%s.database\" $authPrefix -}}\n  {{- $valueKeyPassword := printf \"%s.password\" $authPrefix -}}\n",
                    "rendered": {
                      "text": "  {{- $enabled := include \"common.mongodb.values.enabled\" . -}}\n  {{- $authPrefix := include \"common.mongodb.values.key.auth\" . -}}\n  {{- $architecture := include \"common.mongodb.values.architecture\" . -}}\n  {{- $valueKeyRootPassword := printf \"%s.rootPassword\" $authPrefix -}}\n  {{- $valueKeyUsername := printf \"%s.username\" $authPrefix -}}\n  {{- $valueKeyDatabase := printf \"%s.database\" $authPrefix -}}\n  {{- $valueKeyPassword := printf \"%s.password\" $authPrefix -}}\n",
                      "markdown": "`  {{- $enabled := include \"common.mongodb.values.enabled\" . -}}\n  {{- $authPrefix := include \"common.mongodb.values.key.auth\" . -}}\n  {{- $architecture := include \"common.mongodb.values.architecture\" . -}}\n  {{- $valueKeyRootPassword := printf \"%s.rootPassword\" $authPrefix -}}\n  {{- $valueKeyUsername := printf \"%s.username\" $authPrefix -}}\n  {{- $valueKeyDatabase := printf \"%s.database\" $authPrefix -}}\n  {{- $valueKeyPassword := printf \"%s.password\" $authPrefix -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mongodb.tpl"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 46,
                  "endLine": 11,
                  "endColumn": 54,
                  "snippet": {
                    "text": "  - secret - String - Required. Name of the secret where MongoDB&reg; values are stored, e.g: \"mongodb-passwords-secret\"\n  - subchart - Boolean - Optional. Whether MongoDB&reg; is used as subchart or not. Default: false\n*/}}\n{{- define \"common.validations.values.mongodb.passwords\" -}}\n  {{- $existingSecret := include \"common.mongodb.values.auth.existingSecret\" . -}}\n  {{- $enabled := include \"common.mongodb.values.enabled\" . -}}\n  {{- $authPrefix := include \"common.mongodb.values.key.auth\" . -}}\n",
                    "rendered": {
                      "text": "  - secret - String - Required. Name of the secret where MongoDB&reg; values are stored, e.g: \"mongodb-passwords-secret\"\n  - subchart - Boolean - Optional. Whether MongoDB&reg; is used as subchart or not. Default: false\n*/}}\n{{- define \"common.validations.values.mongodb.passwords\" -}}\n  {{- $existingSecret := include \"common.mongodb.values.auth.existingSecret\" . -}}\n  {{- $enabled := include \"common.mongodb.values.enabled\" . -}}\n  {{- $authPrefix := include \"common.mongodb.values.key.auth\" . -}}\n",
                      "markdown": "`  - secret - String - Required. Name of the secret where MongoDB&reg; values are stored, e.g: \"mongodb-passwords-secret\"\n  - subchart - Boolean - Optional. Whether MongoDB&reg; is used as subchart or not. Default: false\n*/}}\n{{- define \"common.validations.values.mongodb.passwords\" -}}\n  {{- $existingSecret := include \"common.mongodb.values.auth.existingSecret\" . -}}\n  {{- $enabled := include \"common.mongodb.values.enabled\" . -}}\n  {{- $authPrefix := include \"common.mongodb.values.key.auth\" . -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mongodb.tpl"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 103,
                  "endLine": 8,
                  "endColumn": 111,
                  "snippet": {
                    "text": "Usage:\n{{ include \"common.validations.values.mongodb.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\nParams:\n  - secret - String - Required. Name of the secret where MongoDB&reg; values are stored, e.g: \"mongodb-passwords-secret\"\n  - subchart - Boolean - Optional. Whether MongoDB&reg; is used as subchart or not. Default: false\n*/}}\n{{- define \"common.validations.values.mongodb.passwords\" -}}\n",
                    "rendered": {
                      "text": "Usage:\n{{ include \"common.validations.values.mongodb.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\nParams:\n  - secret - String - Required. Name of the secret where MongoDB&reg; values are stored, e.g: \"mongodb-passwords-secret\"\n  - subchart - Boolean - Optional. Whether MongoDB&reg; is used as subchart or not. Default: false\n*/}}\n{{- define \"common.validations.values.mongodb.passwords\" -}}\n",
                      "markdown": "`Usage:\n{{ include \"common.validations.values.mongodb.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\nParams:\n  - secret - String - Required. Name of the secret where MongoDB&reg; values are stored, e.g: \"mongodb-passwords-secret\"\n  - subchart - Boolean - Optional. Whether MongoDB&reg; is used as subchart or not. Default: false\n*/}}\n{{- define \"common.validations.values.mongodb.passwords\" -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mongodb.tpl"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 46,
                  "endLine": 6,
                  "endColumn": 54,
                  "snippet": {
                    "text": "Validate MongoDB&reg; required passwords are not empty.\n\nUsage:\n{{ include \"common.validations.values.mongodb.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\nParams:\n  - secret - String - Required. Name of the secret where MongoDB&reg; values are stored, e.g: \"mongodb-passwords-secret\"\n  - subchart - Boolean - Optional. Whether MongoDB&reg; is used as subchart or not. Default: false\n",
                    "rendered": {
                      "text": "Validate MongoDB&reg; required passwords are not empty.\n\nUsage:\n{{ include \"common.validations.values.mongodb.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\nParams:\n  - secret - String - Required. Name of the secret where MongoDB&reg; values are stored, e.g: \"mongodb-passwords-secret\"\n  - subchart - Boolean - Optional. Whether MongoDB&reg; is used as subchart or not. Default: false\n",
                      "markdown": "`Validate MongoDB&reg; required passwords are not empty.\n\nUsage:\n{{ include \"common.validations.values.mongodb.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\nParams:\n  - secret - String - Required. Name of the secret where MongoDB&reg; values are stored, e.g: \"mongodb-passwords-secret\"\n  - subchart - Boolean - Optional. Whether MongoDB&reg; is used as subchart or not. Default: false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mongodb.tpl"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 31,
                  "endLine": 3,
                  "endColumn": 39,
                  "snippet": {
                    "text": "{{/* vim: set filetype=mustache: */}}\n{{/*\nValidate MongoDB&reg; required passwords are not empty.\n\nUsage:\n{{ include \"common.validations.values.mongodb.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\n",
                    "rendered": {
                      "text": "{{/* vim: set filetype=mustache: */}}\n{{/*\nValidate MongoDB&reg; required passwords are not empty.\n\nUsage:\n{{ include \"common.validations.values.mongodb.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\n",
                      "markdown": "`{{/* vim: set filetype=mustache: */}}\n{{/*\nValidate MongoDB&reg; required passwords are not empty.\n\nUsage:\n{{ include \"common.validations.values.mongodb.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mariadb.tpl"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 85,
                  "endLine": 38,
                  "endColumn": 93,
                  "snippet": {
                    "text": "        {{- $requiredPasswords = append $requiredPasswords $requiredReplicationPassword -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n\n  {{- end -}}\n{{- end -}}\n",
                    "rendered": {
                      "text": "        {{- $requiredPasswords = append $requiredPasswords $requiredReplicationPassword -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n\n  {{- end -}}\n{{- end -}}\n",
                      "markdown": "`        {{- $requiredPasswords = append $requiredPasswords $requiredReplicationPassword -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n\n  {{- end -}}\n{{- end -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mariadb.tpl"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 79,
                  "endLine": 35,
                  "endColumn": 87,
                  "snippet": {
                    "text": "\n    {{- if (eq $architecture \"replication\") -}}\n        {{- $requiredReplicationPassword := dict \"valueKey\" $valueKeyReplicationPassword \"secret\" .secret \"field\" \"mariadb-replication-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredReplicationPassword -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n",
                    "rendered": {
                      "text": "\n    {{- if (eq $architecture \"replication\") -}}\n        {{- $requiredReplicationPassword := dict \"valueKey\" $valueKeyReplicationPassword \"secret\" .secret \"field\" \"mariadb-replication-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredReplicationPassword -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n",
                      "markdown": "`\n    {{- if (eq $architecture \"replication\") -}}\n        {{- $requiredReplicationPassword := dict \"valueKey\" $valueKeyReplicationPassword \"secret\" .secret \"field\" \"mariadb-replication-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredReplicationPassword -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mariadb.tpl"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 49,
                  "endLine": 35,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\n    {{- if (eq $architecture \"replication\") -}}\n        {{- $requiredReplicationPassword := dict \"valueKey\" $valueKeyReplicationPassword \"secret\" .secret \"field\" \"mariadb-replication-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredReplicationPassword -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n",
                    "rendered": {
                      "text": "\n    {{- if (eq $architecture \"replication\") -}}\n        {{- $requiredReplicationPassword := dict \"valueKey\" $valueKeyReplicationPassword \"secret\" .secret \"field\" \"mariadb-replication-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredReplicationPassword -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n",
                      "markdown": "`\n    {{- if (eq $architecture \"replication\") -}}\n        {{- $requiredReplicationPassword := dict \"valueKey\" $valueKeyReplicationPassword \"secret\" .secret \"field\" \"mariadb-replication-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredReplicationPassword -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mariadb.tpl"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n    {{- if (eq $architecture \"replication\") -}}\n        {{- $requiredReplicationPassword := dict \"valueKey\" $valueKeyReplicationPassword \"secret\" .secret \"field\" \"mariadb-replication-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredReplicationPassword -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n",
                    "rendered": {
                      "text": "\n    {{- if (eq $architecture \"replication\") -}}\n        {{- $requiredReplicationPassword := dict \"valueKey\" $valueKeyReplicationPassword \"secret\" .secret \"field\" \"mariadb-replication-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredReplicationPassword -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n",
                      "markdown": "`\n    {{- if (eq $architecture \"replication\") -}}\n        {{- $requiredReplicationPassword := dict \"valueKey\" $valueKeyReplicationPassword \"secret\" .secret \"field\" \"mariadb-replication-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredReplicationPassword -}}\n    {{- end -}}\n\n    {{- include \"common.validations.values.multiple.empty\" (dict \"required\" $requiredPasswords \"context\" .context) -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mariadb.tpl"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 135,
                  "endLine": 34,
                  "endColumn": 143,
                  "snippet": {
                    "text": "    {{- end -}}\n\n    {{- if (eq $architecture \"replication\") -}}\n        {{- $requiredReplicationPassword := dict \"valueKey\" $valueKeyReplicationPassword \"secret\" .secret \"field\" \"mariadb-replication-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredReplicationPassword -}}\n    {{- end -}}\n\n",
                    "rendered": {
                      "text": "    {{- end -}}\n\n    {{- if (eq $architecture \"replication\") -}}\n        {{- $requiredReplicationPassword := dict \"valueKey\" $valueKeyReplicationPassword \"secret\" .secret \"field\" \"mariadb-replication-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredReplicationPassword -}}\n    {{- end -}}\n\n",
                      "markdown": "`    {{- end -}}\n\n    {{- if (eq $architecture \"replication\") -}}\n        {{- $requiredReplicationPassword := dict \"valueKey\" $valueKeyReplicationPassword \"secret\" .secret \"field\" \"mariadb-replication-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredReplicationPassword -}}\n    {{- end -}}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mariadb.tpl"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 80,
                  "endLine": 34,
                  "endColumn": 88,
                  "snippet": {
                    "text": "    {{- end -}}\n\n    {{- if (eq $architecture \"replication\") -}}\n        {{- $requiredReplicationPassword := dict \"valueKey\" $valueKeyReplicationPassword \"secret\" .secret \"field\" \"mariadb-replication-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredReplicationPassword -}}\n    {{- end -}}\n\n",
                    "rendered": {
                      "text": "    {{- end -}}\n\n    {{- if (eq $architecture \"replication\") -}}\n        {{- $requiredReplicationPassword := dict \"valueKey\" $valueKeyReplicationPassword \"secret\" .secret \"field\" \"mariadb-replication-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredReplicationPassword -}}\n    {{- end -}}\n\n",
                      "markdown": "`    {{- end -}}\n\n    {{- if (eq $architecture \"replication\") -}}\n        {{- $requiredReplicationPassword := dict \"valueKey\" $valueKeyReplicationPassword \"secret\" .secret \"field\" \"mariadb-replication-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredReplicationPassword -}}\n    {{- end -}}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mariadb.tpl"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 32,
                  "endLine": 34,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    {{- end -}}\n\n    {{- if (eq $architecture \"replication\") -}}\n        {{- $requiredReplicationPassword := dict \"valueKey\" $valueKeyReplicationPassword \"secret\" .secret \"field\" \"mariadb-replication-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredReplicationPassword -}}\n    {{- end -}}\n\n",
                    "rendered": {
                      "text": "    {{- end -}}\n\n    {{- if (eq $architecture \"replication\") -}}\n        {{- $requiredReplicationPassword := dict \"valueKey\" $valueKeyReplicationPassword \"secret\" .secret \"field\" \"mariadb-replication-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredReplicationPassword -}}\n    {{- end -}}\n\n",
                      "markdown": "`    {{- end -}}\n\n    {{- if (eq $architecture \"replication\") -}}\n        {{- $requiredReplicationPassword := dict \"valueKey\" $valueKeyReplicationPassword \"secret\" .secret \"field\" \"mariadb-replication-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredReplicationPassword -}}\n    {{- end -}}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mariadb.tpl"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 68,
                  "endLine": 30,
                  "endColumn": 76,
                  "snippet": {
                    "text": "    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- if not (empty $valueUsername) -}}\n        {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"mariadb-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n    {{- end -}}\n\n    {{- if (eq $architecture \"replication\") -}}\n",
                    "rendered": {
                      "text": "    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- if not (empty $valueUsername) -}}\n        {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"mariadb-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n    {{- end -}}\n\n    {{- if (eq $architecture \"replication\") -}}\n",
                      "markdown": "`    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- if not (empty $valueUsername) -}}\n        {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"mariadb-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n    {{- end -}}\n\n    {{- if (eq $architecture \"replication\") -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mariadb.tpl"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 49,
                  "endLine": 30,
                  "endColumn": 57,
                  "snippet": {
                    "text": "    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- if not (empty $valueUsername) -}}\n        {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"mariadb-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n    {{- end -}}\n\n    {{- if (eq $architecture \"replication\") -}}\n",
                    "rendered": {
                      "text": "    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- if not (empty $valueUsername) -}}\n        {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"mariadb-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n    {{- end -}}\n\n    {{- if (eq $architecture \"replication\") -}}\n",
                      "markdown": "`    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- if not (empty $valueUsername) -}}\n        {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"mariadb-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n    {{- end -}}\n\n    {{- if (eq $architecture \"replication\") -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mariadb.tpl"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 21,
                  "endLine": 30,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- if not (empty $valueUsername) -}}\n        {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"mariadb-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n    {{- end -}}\n\n    {{- if (eq $architecture \"replication\") -}}\n",
                    "rendered": {
                      "text": "    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- if not (empty $valueUsername) -}}\n        {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"mariadb-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n    {{- end -}}\n\n    {{- if (eq $architecture \"replication\") -}}\n",
                      "markdown": "`    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- if not (empty $valueUsername) -}}\n        {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"mariadb-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n    {{- end -}}\n\n    {{- if (eq $architecture \"replication\") -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mariadb.tpl"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 101,
                  "endLine": 29,
                  "endColumn": 109,
                  "snippet": {
                    "text": "\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- if not (empty $valueUsername) -}}\n        {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"mariadb-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n    {{- end -}}\n\n",
                    "rendered": {
                      "text": "\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- if not (empty $valueUsername) -}}\n        {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"mariadb-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n    {{- end -}}\n\n",
                      "markdown": "`\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- if not (empty $valueUsername) -}}\n        {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"mariadb-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n    {{- end -}}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mariadb.tpl"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 58,
                  "endLine": 29,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- if not (empty $valueUsername) -}}\n        {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"mariadb-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n    {{- end -}}\n\n",
                    "rendered": {
                      "text": "\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- if not (empty $valueUsername) -}}\n        {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"mariadb-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n    {{- end -}}\n\n",
                      "markdown": "`\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- if not (empty $valueUsername) -}}\n        {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"mariadb-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n    {{- end -}}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mariadb.tpl"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 21,
                  "endLine": 29,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- if not (empty $valueUsername) -}}\n        {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"mariadb-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n    {{- end -}}\n\n",
                    "rendered": {
                      "text": "\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- if not (empty $valueUsername) -}}\n        {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"mariadb-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n    {{- end -}}\n\n",
                      "markdown": "`\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- if not (empty $valueUsername) -}}\n        {{- $requiredPassword := dict \"valueKey\" $valueKeyPassword \"secret\" .secret \"field\" \"mariadb-password\" -}}\n        {{- $requiredPasswords = append $requiredPasswords $requiredPassword -}}\n    {{- end -}}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mariadb.tpl"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 68,
                  "endLine": 25,
                  "endColumn": 76,
                  "snippet": {
                    "text": "    {{- $requiredPasswords := list -}}\n\n    {{- $requiredRootPassword := dict \"valueKey\" $valueKeyRootPassword \"secret\" .secret \"field\" \"mariadb-root-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredRootPassword -}}\n\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- if not (empty $valueUsername) -}}\n",
                    "rendered": {
                      "text": "    {{- $requiredPasswords := list -}}\n\n    {{- $requiredRootPassword := dict \"valueKey\" $valueKeyRootPassword \"secret\" .secret \"field\" \"mariadb-root-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredRootPassword -}}\n\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- if not (empty $valueUsername) -}}\n",
                      "markdown": "`    {{- $requiredPasswords := list -}}\n\n    {{- $requiredRootPassword := dict \"valueKey\" $valueKeyRootPassword \"secret\" .secret \"field\" \"mariadb-root-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredRootPassword -}}\n\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- if not (empty $valueUsername) -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mariadb.tpl"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 45,
                  "endLine": 25,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    {{- $requiredPasswords := list -}}\n\n    {{- $requiredRootPassword := dict \"valueKey\" $valueKeyRootPassword \"secret\" .secret \"field\" \"mariadb-root-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredRootPassword -}}\n\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- if not (empty $valueUsername) -}}\n",
                    "rendered": {
                      "text": "    {{- $requiredPasswords := list -}}\n\n    {{- $requiredRootPassword := dict \"valueKey\" $valueKeyRootPassword \"secret\" .secret \"field\" \"mariadb-root-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredRootPassword -}}\n\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- if not (empty $valueUsername) -}}\n",
                      "markdown": "`    {{- $requiredPasswords := list -}}\n\n    {{- $requiredRootPassword := dict \"valueKey\" $valueKeyRootPassword \"secret\" .secret \"field\" \"mariadb-root-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredRootPassword -}}\n\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- if not (empty $valueUsername) -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mariadb.tpl"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 17,
                  "endLine": 25,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    {{- $requiredPasswords := list -}}\n\n    {{- $requiredRootPassword := dict \"valueKey\" $valueKeyRootPassword \"secret\" .secret \"field\" \"mariadb-root-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredRootPassword -}}\n\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- if not (empty $valueUsername) -}}\n",
                    "rendered": {
                      "text": "    {{- $requiredPasswords := list -}}\n\n    {{- $requiredRootPassword := dict \"valueKey\" $valueKeyRootPassword \"secret\" .secret \"field\" \"mariadb-root-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredRootPassword -}}\n\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- if not (empty $valueUsername) -}}\n",
                      "markdown": "`    {{- $requiredPasswords := list -}}\n\n    {{- $requiredRootPassword := dict \"valueKey\" $valueKeyRootPassword \"secret\" .secret \"field\" \"mariadb-root-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredRootPassword -}}\n\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n    {{- if not (empty $valueUsername) -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mariadb.tpl"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 110,
                  "endLine": 24,
                  "endColumn": 118,
                  "snippet": {
                    "text": "  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n\n    {{- $requiredRootPassword := dict \"valueKey\" $valueKeyRootPassword \"secret\" .secret \"field\" \"mariadb-root-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredRootPassword -}}\n\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n",
                    "rendered": {
                      "text": "  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n\n    {{- $requiredRootPassword := dict \"valueKey\" $valueKeyRootPassword \"secret\" .secret \"field\" \"mariadb-root-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredRootPassword -}}\n\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n",
                      "markdown": "`  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n\n    {{- $requiredRootPassword := dict \"valueKey\" $valueKeyRootPassword \"secret\" .secret \"field\" \"mariadb-root-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredRootPassword -}}\n\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mariadb.tpl"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 62,
                  "endLine": 24,
                  "endColumn": 70,
                  "snippet": {
                    "text": "  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n\n    {{- $requiredRootPassword := dict \"valueKey\" $valueKeyRootPassword \"secret\" .secret \"field\" \"mariadb-root-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredRootPassword -}}\n\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n",
                    "rendered": {
                      "text": "  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n\n    {{- $requiredRootPassword := dict \"valueKey\" $valueKeyRootPassword \"secret\" .secret \"field\" \"mariadb-root-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredRootPassword -}}\n\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n",
                      "markdown": "`  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n\n    {{- $requiredRootPassword := dict \"valueKey\" $valueKeyRootPassword \"secret\" .secret \"field\" \"mariadb-root-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredRootPassword -}}\n\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mariadb.tpl"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 21,
                  "endLine": 24,
                  "endColumn": 29,
                  "snippet": {
                    "text": "  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n\n    {{- $requiredRootPassword := dict \"valueKey\" $valueKeyRootPassword \"secret\" .secret \"field\" \"mariadb-root-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredRootPassword -}}\n\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n",
                    "rendered": {
                      "text": "  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n\n    {{- $requiredRootPassword := dict \"valueKey\" $valueKeyRootPassword \"secret\" .secret \"field\" \"mariadb-root-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredRootPassword -}}\n\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n",
                      "markdown": "`  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n\n    {{- $requiredRootPassword := dict \"valueKey\" $valueKeyRootPassword \"secret\" .secret \"field\" \"mariadb-root-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredRootPassword -}}\n\n    {{- $valueUsername := include \"common.utils.getValueFromKey\" (dict \"key\" $valueKeyUsername \"context\" .context) }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mariadb.tpl"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 17,
                  "endLine": 22,
                  "endColumn": 25,
                  "snippet": {
                    "text": "  {{- $valueKeyReplicationPassword := printf \"%s.replicationPassword\" $authPrefix -}}\n\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n\n    {{- $requiredRootPassword := dict \"valueKey\" $valueKeyRootPassword \"secret\" .secret \"field\" \"mariadb-root-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredRootPassword -}}\n",
                    "rendered": {
                      "text": "  {{- $valueKeyReplicationPassword := printf \"%s.replicationPassword\" $authPrefix -}}\n\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n\n    {{- $requiredRootPassword := dict \"valueKey\" $valueKeyRootPassword \"secret\" .secret \"field\" \"mariadb-root-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredRootPassword -}}\n",
                      "markdown": "`  {{- $valueKeyReplicationPassword := printf \"%s.replicationPassword\" $authPrefix -}}\n\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n\n    {{- $requiredRootPassword := dict \"valueKey\" $valueKeyRootPassword \"secret\" .secret \"field\" \"mariadb-root-password\" -}}\n    {{- $requiredPasswords = append $requiredPasswords $requiredRootPassword -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mariadb.tpl"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 60,
                  "endLine": 19,
                  "endColumn": 68,
                  "snippet": {
                    "text": "  {{- $valueKeyRootPassword := printf \"%s.rootPassword\" $authPrefix -}}\n  {{- $valueKeyUsername := printf \"%s.username\" $authPrefix -}}\n  {{- $valueKeyPassword := printf \"%s.password\" $authPrefix -}}\n  {{- $valueKeyReplicationPassword := printf \"%s.replicationPassword\" $authPrefix -}}\n\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n",
                    "rendered": {
                      "text": "  {{- $valueKeyRootPassword := printf \"%s.rootPassword\" $authPrefix -}}\n  {{- $valueKeyUsername := printf \"%s.username\" $authPrefix -}}\n  {{- $valueKeyPassword := printf \"%s.password\" $authPrefix -}}\n  {{- $valueKeyReplicationPassword := printf \"%s.replicationPassword\" $authPrefix -}}\n\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n",
                      "markdown": "`  {{- $valueKeyRootPassword := printf \"%s.rootPassword\" $authPrefix -}}\n  {{- $valueKeyUsername := printf \"%s.username\" $authPrefix -}}\n  {{- $valueKeyPassword := printf \"%s.password\" $authPrefix -}}\n  {{- $valueKeyReplicationPassword := printf \"%s.replicationPassword\" $authPrefix -}}\n\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mariadb.tpl"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 26,
                  "endLine": 19,
                  "endColumn": 34,
                  "snippet": {
                    "text": "  {{- $valueKeyRootPassword := printf \"%s.rootPassword\" $authPrefix -}}\n  {{- $valueKeyUsername := printf \"%s.username\" $authPrefix -}}\n  {{- $valueKeyPassword := printf \"%s.password\" $authPrefix -}}\n  {{- $valueKeyReplicationPassword := printf \"%s.replicationPassword\" $authPrefix -}}\n\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n",
                    "rendered": {
                      "text": "  {{- $valueKeyRootPassword := printf \"%s.rootPassword\" $authPrefix -}}\n  {{- $valueKeyUsername := printf \"%s.username\" $authPrefix -}}\n  {{- $valueKeyPassword := printf \"%s.password\" $authPrefix -}}\n  {{- $valueKeyReplicationPassword := printf \"%s.replicationPassword\" $authPrefix -}}\n\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n",
                      "markdown": "`  {{- $valueKeyRootPassword := printf \"%s.rootPassword\" $authPrefix -}}\n  {{- $valueKeyUsername := printf \"%s.username\" $authPrefix -}}\n  {{- $valueKeyPassword := printf \"%s.password\" $authPrefix -}}\n  {{- $valueKeyReplicationPassword := printf \"%s.replicationPassword\" $authPrefix -}}\n\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n    {{- $requiredPasswords := list -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mariadb.tpl"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 38,
                  "endLine": 18,
                  "endColumn": 46,
                  "snippet": {
                    "text": "  {{- $authPrefix := include \"common.mariadb.values.key.auth\" . -}}\n  {{- $valueKeyRootPassword := printf \"%s.rootPassword\" $authPrefix -}}\n  {{- $valueKeyUsername := printf \"%s.username\" $authPrefix -}}\n  {{- $valueKeyPassword := printf \"%s.password\" $authPrefix -}}\n  {{- $valueKeyReplicationPassword := printf \"%s.replicationPassword\" $authPrefix -}}\n\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n",
                    "rendered": {
                      "text": "  {{- $authPrefix := include \"common.mariadb.values.key.auth\" . -}}\n  {{- $valueKeyRootPassword := printf \"%s.rootPassword\" $authPrefix -}}\n  {{- $valueKeyUsername := printf \"%s.username\" $authPrefix -}}\n  {{- $valueKeyPassword := printf \"%s.password\" $authPrefix -}}\n  {{- $valueKeyReplicationPassword := printf \"%s.replicationPassword\" $authPrefix -}}\n\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n",
                      "markdown": "`  {{- $authPrefix := include \"common.mariadb.values.key.auth\" . -}}\n  {{- $valueKeyRootPassword := printf \"%s.rootPassword\" $authPrefix -}}\n  {{- $valueKeyUsername := printf \"%s.username\" $authPrefix -}}\n  {{- $valueKeyPassword := printf \"%s.password\" $authPrefix -}}\n  {{- $valueKeyReplicationPassword := printf \"%s.replicationPassword\" $authPrefix -}}\n\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mariadb.tpl"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 15,
                  "endLine": 18,
                  "endColumn": 23,
                  "snippet": {
                    "text": "  {{- $authPrefix := include \"common.mariadb.values.key.auth\" . -}}\n  {{- $valueKeyRootPassword := printf \"%s.rootPassword\" $authPrefix -}}\n  {{- $valueKeyUsername := printf \"%s.username\" $authPrefix -}}\n  {{- $valueKeyPassword := printf \"%s.password\" $authPrefix -}}\n  {{- $valueKeyReplicationPassword := printf \"%s.replicationPassword\" $authPrefix -}}\n\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n",
                    "rendered": {
                      "text": "  {{- $authPrefix := include \"common.mariadb.values.key.auth\" . -}}\n  {{- $valueKeyRootPassword := printf \"%s.rootPassword\" $authPrefix -}}\n  {{- $valueKeyUsername := printf \"%s.username\" $authPrefix -}}\n  {{- $valueKeyPassword := printf \"%s.password\" $authPrefix -}}\n  {{- $valueKeyReplicationPassword := printf \"%s.replicationPassword\" $authPrefix -}}\n\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n",
                      "markdown": "`  {{- $authPrefix := include \"common.mariadb.values.key.auth\" . -}}\n  {{- $valueKeyRootPassword := printf \"%s.rootPassword\" $authPrefix -}}\n  {{- $valueKeyUsername := printf \"%s.username\" $authPrefix -}}\n  {{- $valueKeyPassword := printf \"%s.password\" $authPrefix -}}\n  {{- $valueKeyReplicationPassword := printf \"%s.replicationPassword\" $authPrefix -}}\n\n  {{- if and (or (not $existingSecret) (eq $existingSecret \"\\\"\\\"\")) (eq $enabled \"true\") -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mariadb.tpl"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 46,
                  "endLine": 16,
                  "endColumn": 54,
                  "snippet": {
                    "text": "  {{- $enabled := include \"common.mariadb.values.enabled\" . -}}\n  {{- $architecture := include \"common.mariadb.values.architecture\" . -}}\n  {{- $authPrefix := include \"common.mariadb.values.key.auth\" . -}}\n  {{- $valueKeyRootPassword := printf \"%s.rootPassword\" $authPrefix -}}\n  {{- $valueKeyUsername := printf \"%s.username\" $authPrefix -}}\n  {{- $valueKeyPassword := printf \"%s.password\" $authPrefix -}}\n  {{- $valueKeyReplicationPassword := printf \"%s.replicationPassword\" $authPrefix -}}\n",
                    "rendered": {
                      "text": "  {{- $enabled := include \"common.mariadb.values.enabled\" . -}}\n  {{- $architecture := include \"common.mariadb.values.architecture\" . -}}\n  {{- $authPrefix := include \"common.mariadb.values.key.auth\" . -}}\n  {{- $valueKeyRootPassword := printf \"%s.rootPassword\" $authPrefix -}}\n  {{- $valueKeyUsername := printf \"%s.username\" $authPrefix -}}\n  {{- $valueKeyPassword := printf \"%s.password\" $authPrefix -}}\n  {{- $valueKeyReplicationPassword := printf \"%s.replicationPassword\" $authPrefix -}}\n",
                      "markdown": "`  {{- $enabled := include \"common.mariadb.values.enabled\" . -}}\n  {{- $architecture := include \"common.mariadb.values.architecture\" . -}}\n  {{- $authPrefix := include \"common.mariadb.values.key.auth\" . -}}\n  {{- $valueKeyRootPassword := printf \"%s.rootPassword\" $authPrefix -}}\n  {{- $valueKeyUsername := printf \"%s.username\" $authPrefix -}}\n  {{- $valueKeyPassword := printf \"%s.password\" $authPrefix -}}\n  {{- $valueKeyReplicationPassword := printf \"%s.replicationPassword\" $authPrefix -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mariadb.tpl"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 19,
                  "endLine": 16,
                  "endColumn": 27,
                  "snippet": {
                    "text": "  {{- $enabled := include \"common.mariadb.values.enabled\" . -}}\n  {{- $architecture := include \"common.mariadb.values.architecture\" . -}}\n  {{- $authPrefix := include \"common.mariadb.values.key.auth\" . -}}\n  {{- $valueKeyRootPassword := printf \"%s.rootPassword\" $authPrefix -}}\n  {{- $valueKeyUsername := printf \"%s.username\" $authPrefix -}}\n  {{- $valueKeyPassword := printf \"%s.password\" $authPrefix -}}\n  {{- $valueKeyReplicationPassword := printf \"%s.replicationPassword\" $authPrefix -}}\n",
                    "rendered": {
                      "text": "  {{- $enabled := include \"common.mariadb.values.enabled\" . -}}\n  {{- $architecture := include \"common.mariadb.values.architecture\" . -}}\n  {{- $authPrefix := include \"common.mariadb.values.key.auth\" . -}}\n  {{- $valueKeyRootPassword := printf \"%s.rootPassword\" $authPrefix -}}\n  {{- $valueKeyUsername := printf \"%s.username\" $authPrefix -}}\n  {{- $valueKeyPassword := printf \"%s.password\" $authPrefix -}}\n  {{- $valueKeyReplicationPassword := printf \"%s.replicationPassword\" $authPrefix -}}\n",
                      "markdown": "`  {{- $enabled := include \"common.mariadb.values.enabled\" . -}}\n  {{- $architecture := include \"common.mariadb.values.architecture\" . -}}\n  {{- $authPrefix := include \"common.mariadb.values.key.auth\" . -}}\n  {{- $valueKeyRootPassword := printf \"%s.rootPassword\" $authPrefix -}}\n  {{- $valueKeyUsername := printf \"%s.username\" $authPrefix -}}\n  {{- $valueKeyPassword := printf \"%s.password\" $authPrefix -}}\n  {{- $valueKeyReplicationPassword := printf \"%s.replicationPassword\" $authPrefix -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mariadb.tpl"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 46,
                  "endLine": 11,
                  "endColumn": 54,
                  "snippet": {
                    "text": "  - secret - String - Required. Name of the secret where MariaDB values are stored, e.g: \"mysql-passwords-secret\"\n  - subchart - Boolean - Optional. Whether MariaDB is used as subchart or not. Default: false\n*/}}\n{{- define \"common.validations.values.mariadb.passwords\" -}}\n  {{- $existingSecret := include \"common.mariadb.values.auth.existingSecret\" . -}}\n  {{- $enabled := include \"common.mariadb.values.enabled\" . -}}\n  {{- $architecture := include \"common.mariadb.values.architecture\" . -}}\n",
                    "rendered": {
                      "text": "  - secret - String - Required. Name of the secret where MariaDB values are stored, e.g: \"mysql-passwords-secret\"\n  - subchart - Boolean - Optional. Whether MariaDB is used as subchart or not. Default: false\n*/}}\n{{- define \"common.validations.values.mariadb.passwords\" -}}\n  {{- $existingSecret := include \"common.mariadb.values.auth.existingSecret\" . -}}\n  {{- $enabled := include \"common.mariadb.values.enabled\" . -}}\n  {{- $architecture := include \"common.mariadb.values.architecture\" . -}}\n",
                      "markdown": "`  - secret - String - Required. Name of the secret where MariaDB values are stored, e.g: \"mysql-passwords-secret\"\n  - subchart - Boolean - Optional. Whether MariaDB is used as subchart or not. Default: false\n*/}}\n{{- define \"common.validations.values.mariadb.passwords\" -}}\n  {{- $existingSecret := include \"common.mariadb.values.auth.existingSecret\" . -}}\n  {{- $enabled := include \"common.mariadb.values.enabled\" . -}}\n  {{- $architecture := include \"common.mariadb.values.architecture\" . -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mariadb.tpl"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 96,
                  "endLine": 8,
                  "endColumn": 104,
                  "snippet": {
                    "text": "Usage:\n{{ include \"common.validations.values.mariadb.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\nParams:\n  - secret - String - Required. Name of the secret where MariaDB values are stored, e.g: \"mysql-passwords-secret\"\n  - subchart - Boolean - Optional. Whether MariaDB is used as subchart or not. Default: false\n*/}}\n{{- define \"common.validations.values.mariadb.passwords\" -}}\n",
                    "rendered": {
                      "text": "Usage:\n{{ include \"common.validations.values.mariadb.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\nParams:\n  - secret - String - Required. Name of the secret where MariaDB values are stored, e.g: \"mysql-passwords-secret\"\n  - subchart - Boolean - Optional. Whether MariaDB is used as subchart or not. Default: false\n*/}}\n{{- define \"common.validations.values.mariadb.passwords\" -}}\n",
                      "markdown": "`Usage:\n{{ include \"common.validations.values.mariadb.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\nParams:\n  - secret - String - Required. Name of the secret where MariaDB values are stored, e.g: \"mysql-passwords-secret\"\n  - subchart - Boolean - Optional. Whether MariaDB is used as subchart or not. Default: false\n*/}}\n{{- define \"common.validations.values.mariadb.passwords\" -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mariadb.tpl"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 46,
                  "endLine": 6,
                  "endColumn": 54,
                  "snippet": {
                    "text": "Validate MariaDB required passwords are not empty.\n\nUsage:\n{{ include \"common.validations.values.mariadb.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\nParams:\n  - secret - String - Required. Name of the secret where MariaDB values are stored, e.g: \"mysql-passwords-secret\"\n  - subchart - Boolean - Optional. Whether MariaDB is used as subchart or not. Default: false\n",
                    "rendered": {
                      "text": "Validate MariaDB required passwords are not empty.\n\nUsage:\n{{ include \"common.validations.values.mariadb.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\nParams:\n  - secret - String - Required. Name of the secret where MariaDB values are stored, e.g: \"mysql-passwords-secret\"\n  - subchart - Boolean - Optional. Whether MariaDB is used as subchart or not. Default: false\n",
                      "markdown": "`Validate MariaDB required passwords are not empty.\n\nUsage:\n{{ include \"common.validations.values.mariadb.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\nParams:\n  - secret - String - Required. Name of the secret where MariaDB values are stored, e.g: \"mysql-passwords-secret\"\n  - subchart - Boolean - Optional. Whether MariaDB is used as subchart or not. Default: false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/charts/common/templates/validations/_mariadb.tpl"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 26,
                  "endLine": 3,
                  "endColumn": 34,
                  "snippet": {
                    "text": "{{/* vim: set filetype=mustache: */}}\n{{/*\nValidate MariaDB required passwords are not empty.\n\nUsage:\n{{ include \"common.validations.values.mariadb.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\n",
                    "rendered": {
                      "text": "{{/* vim: set filetype=mustache: */}}\n{{/*\nValidate MariaDB required passwords are not empty.\n\nUsage:\n{{ include \"common.validations.values.mariadb.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\n",
                      "markdown": "`{{/* vim: set filetype=mustache: */}}\n{{/*\nValidate MariaDB required passwords are not empty.\n\nUsage:\n{{ include \"common.validations.values.mariadb.passwords\" (dict \"secret\" \"secretName\" \"subchart\" false \"context\" $) }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/msteam/msteam.go"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 17,
                  "endLine": 95,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\tif err := json.NewEncoder(buffer).Encode(card); err != nil {\n\t\treturn nil, fmt.Errorf(\"Failed encoding message card: %v\", err)\n\t}\n\tres, err := http.Post(ms.TeamsWebhookURL, \"application/json\", buffer)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"Failed sending to webhook url %s. Got the error: %v\",\n\t\t\tms.TeamsWebhookURL, err)\n",
                    "rendered": {
                      "text": "\tif err := json.NewEncoder(buffer).Encode(card); err != nil {\n\t\treturn nil, fmt.Errorf(\"Failed encoding message card: %v\", err)\n\t}\n\tres, err := http.Post(ms.TeamsWebhookURL, \"application/json\", buffer)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"Failed sending to webhook url %s. Got the error: %v\",\n\t\t\tms.TeamsWebhookURL, err)\n",
                      "markdown": "`\tif err := json.NewEncoder(buffer).Encode(card); err != nil {\n\t\treturn nil, fmt.Errorf(\"Failed encoding message card: %v\", err)\n\t}\n\tres, err := http.Post(ms.TeamsWebhookURL, \"application/json\", buffer)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"Failed sending to webhook url %s. Got the error: %v\",\n\t\t\tms.TeamsWebhookURL, err)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/cloudevent/cloudevent.go"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 47,
                  "endLine": 102,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\t\treturn\n\t}\n\n\tlogrus.Printf(\"Message successfully sent to %s at %s \", m.Url, time.Now())\n}\n\nfunc (m *CloudEvent) prepareMessage(e event.Event) *CloudEventMessage {\n",
                    "rendered": {
                      "text": "\t\treturn\n\t}\n\n\tlogrus.Printf(\"Message successfully sent to %s at %s \", m.Url, time.Now())\n}\n\nfunc (m *CloudEvent) prepareMessage(e event.Event) *CloudEventMessage {\n",
                      "markdown": "`\t\treturn\n\t}\n\n\tlogrus.Printf(\"Message successfully sent to %s at %s \", m.Url, time.Now())\n}\n\nfunc (m *CloudEvent) prepareMessage(e event.Event) *CloudEventMessage {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/cloudevent/cloudevent.go"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 60,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\tSource          string                `json:\"source\"`\n\tSubject         string                `json:\"subject\"`\n\tID              string                `json:\"id\"`\n\tTime            time.Time             `json:\"time\"`\n\tDataContentType string                `json:\"datacontenttype\"`\n\tData            CloudEventMessageData `json:\"data\"`\n}\n",
                    "rendered": {
                      "text": "\tSource          string                `json:\"source\"`\n\tSubject         string                `json:\"subject\"`\n\tID              string                `json:\"id\"`\n\tTime            time.Time             `json:\"time\"`\n\tDataContentType string                `json:\"datacontenttype\"`\n\tData            CloudEventMessageData `json:\"data\"`\n}\n",
                      "markdown": "`\tSource          string                `json:\"source\"`\n\tSubject         string                `json:\"subject\"`\n\tID              string                `json:\"id\"`\n\tTime            time.Time             `json:\"time\"`\n\tDataContentType string                `json:\"datacontenttype\"`\n\tData            CloudEventMessageData `json:\"data\"`\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/docs/design.md"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 45,
                  "snippet": {
                    "text": "With each event get from k8s and matched filtering from configuration, it is passed to handler. Currently, `kubewatch` has 8 handlers:\n\n - `Default`: which just print the event in JSON format\n - `Flock`: which send notification to Flock channel based on information from config\n - `Hipchat`: which send notification to Hipchat room based on information from config\n - `Mattermost`: which send notification to Mattermost channel based on information from config\n - `MS Teams`: which send notification to MS Team incoming webhook based on information from config\n",
                    "rendered": {
                      "text": "With each event get from k8s and matched filtering from configuration, it is passed to handler. Currently, `kubewatch` has 8 handlers:\n\n - `Default`: which just print the event in JSON format\n - `Flock`: which send notification to Flock channel based on information from config\n - `Hipchat`: which send notification to Hipchat room based on information from config\n - `Mattermost`: which send notification to Mattermost channel based on information from config\n - `MS Teams`: which send notification to MS Team incoming webhook based on information from config\n",
                      "markdown": "`With each event get from k8s and matched filtering from configuration, it is passed to handler. Currently, `kubewatch` has 8 handlers:\n\n - `Default`: which just print the event in JSON format\n - `Flock`: which send notification to Flock channel based on information from config\n - `Hipchat`: which send notification to Hipchat room based on information from config\n - `Mattermost`: which send notification to Mattermost channel based on information from config\n - `MS Teams`: which send notification to MS Team incoming webhook based on information from config\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/Dockerfile"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 11,
                  "endLine": 4,
                  "endColumn": 19,
                  "snippet": {
                    "text": "FROM golang AS builder\nMAINTAINER \"Cuong Manh Le <cuong.manhle.vn@gmail.com>\"\n\nRUN apt-get update && \\\n    dpkg --add-architecture arm64 &&\\\n    apt-get install -y --no-install-recommends build-essential && \\\n    apt-get clean && \\\n",
                    "rendered": {
                      "text": "FROM golang AS builder\nMAINTAINER \"Cuong Manh Le <cuong.manhle.vn@gmail.com>\"\n\nRUN apt-get update && \\\n    dpkg --add-architecture arm64 &&\\\n    apt-get install -y --no-install-recommends build-essential && \\\n    apt-get clean && \\\n",
                      "markdown": "`FROM golang AS builder\nMAINTAINER \"Cuong Manh Le <cuong.manhle.vn@gmail.com>\"\n\nRUN apt-get update && \\\n    dpkg --add-architecture arm64 &&\\\n    apt-get install -y --no-install-recommends build-essential && \\\n    apt-get clean && \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/Dockerfile"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 19,
                  "endColumn": 4,
                  "snippet": {
                    "text": "FROM cgr.dev/chainguard/bash:latest\n\nCOPY --from=builder /kubewatch /bin/kubewatch\n\nENV KW_CONFIG=/opt/bitnami/kubewatch\n\nENTRYPOINT [\"/bin/kubewatch\"]\n",
                    "rendered": {
                      "text": "FROM cgr.dev/chainguard/bash:latest\n\nCOPY --from=builder /kubewatch /bin/kubewatch\n\nENV KW_CONFIG=/opt/bitnami/kubewatch\n\nENTRYPOINT [\"/bin/kubewatch\"]\n",
                      "markdown": "`FROM cgr.dev/chainguard/bash:latest\n\nCOPY --from=builder /kubewatch /bin/kubewatch\n\nENV KW_CONFIG=/opt/bitnami/kubewatch\n\nENTRYPOINT [\"/bin/kubewatch\"]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/Dockerfile"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 3,
                  "endLine": 7,
                  "endColumn": 12,
                  "snippet": {
                    "text": "RUN apt-get update && \\\n    dpkg --add-architecture arm64 &&\\\n    apt-get install -y --no-install-recommends build-essential && \\\n    apt-get clean && \\\n    mkdir -p \"$GOPATH/src/github.com/bitnami-labs/kubewatch\"\n\nADD . \"$GOPATH/src/github.com/bitnami-labs/kubewatch\"\n",
                    "rendered": {
                      "text": "RUN apt-get update && \\\n    dpkg --add-architecture arm64 &&\\\n    apt-get install -y --no-install-recommends build-essential && \\\n    apt-get clean && \\\n    mkdir -p \"$GOPATH/src/github.com/bitnami-labs/kubewatch\"\n\nADD . \"$GOPATH/src/github.com/bitnami-labs/kubewatch\"\n",
                      "markdown": "`RUN apt-get update && \\\n    dpkg --add-architecture arm64 &&\\\n    apt-get install -y --no-install-recommends build-essential && \\\n    apt-get clean && \\\n    mkdir -p \"$GOPATH/src/github.com/bitnami-labs/kubewatch\"\n\nADD . \"$GOPATH/src/github.com/bitnami-labs/kubewatch\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/Dockerfile"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 3,
                  "endLine": 6,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\nRUN apt-get update && \\\n    dpkg --add-architecture arm64 &&\\\n    apt-get install -y --no-install-recommends build-essential && \\\n    apt-get clean && \\\n    mkdir -p \"$GOPATH/src/github.com/bitnami-labs/kubewatch\"\n\n",
                    "rendered": {
                      "text": "\nRUN apt-get update && \\\n    dpkg --add-architecture arm64 &&\\\n    apt-get install -y --no-install-recommends build-essential && \\\n    apt-get clean && \\\n    mkdir -p \"$GOPATH/src/github.com/bitnami-labs/kubewatch\"\n\n",
                      "markdown": "`\nRUN apt-get update && \\\n    dpkg --add-architecture arm64 &&\\\n    apt-get install -y --no-install-recommends build-essential && \\\n    apt-get clean && \\\n    mkdir -p \"$GOPATH/src/github.com/bitnami-labs/kubewatch\"\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/Dockerfile"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 3,
                  "endLine": 5,
                  "endColumn": 9,
                  "snippet": {
                    "text": "MAINTAINER \"Cuong Manh Le <cuong.manhle.vn@gmail.com>\"\n\nRUN apt-get update && \\\n    dpkg --add-architecture arm64 &&\\\n    apt-get install -y --no-install-recommends build-essential && \\\n    apt-get clean && \\\n    mkdir -p \"$GOPATH/src/github.com/bitnami-labs/kubewatch\"\n",
                    "rendered": {
                      "text": "MAINTAINER \"Cuong Manh Le <cuong.manhle.vn@gmail.com>\"\n\nRUN apt-get update && \\\n    dpkg --add-architecture arm64 &&\\\n    apt-get install -y --no-install-recommends build-essential && \\\n    apt-get clean && \\\n    mkdir -p \"$GOPATH/src/github.com/bitnami-labs/kubewatch\"\n",
                      "markdown": "`MAINTAINER \"Cuong Manh Le <cuong.manhle.vn@gmail.com>\"\n\nRUN apt-get update && \\\n    dpkg --add-architecture arm64 &&\\\n    apt-get install -y --no-install-recommends build-essential && \\\n    apt-get clean && \\\n    mkdir -p \"$GOPATH/src/github.com/bitnami-labs/kubewatch\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/Dockerfile"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 3,
                  "endLine": 4,
                  "endColumn": 12,
                  "snippet": {
                    "text": "FROM golang AS builder\nMAINTAINER \"Cuong Manh Le <cuong.manhle.vn@gmail.com>\"\n\nRUN apt-get update && \\\n    dpkg --add-architecture arm64 &&\\\n    apt-get install -y --no-install-recommends build-essential && \\\n    apt-get clean && \\\n",
                    "rendered": {
                      "text": "FROM golang AS builder\nMAINTAINER \"Cuong Manh Le <cuong.manhle.vn@gmail.com>\"\n\nRUN apt-get update && \\\n    dpkg --add-architecture arm64 &&\\\n    apt-get install -y --no-install-recommends build-essential && \\\n    apt-get clean && \\\n",
                      "markdown": "`FROM golang AS builder\nMAINTAINER \"Cuong Manh Le <cuong.manhle.vn@gmail.com>\"\n\nRUN apt-get update && \\\n    dpkg --add-architecture arm64 &&\\\n    apt-get install -y --no-install-recommends build-essential && \\\n    apt-get clean && \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/cmd/smtp.go"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 7,
                  "endLine": 18,
                  "snippet": {
                    "text": "limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"fmt\"\n\t\"os\"\n",
                    "rendered": {
                      "text": "limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"fmt\"\n\t\"os\"\n",
                      "markdown": "`limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"fmt\"\n\t\"os\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/cmd/webhook.go"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 7,
                  "endLine": 18,
                  "snippet": {
                    "text": "limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"strconv\"\n\n",
                    "rendered": {
                      "text": "limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"strconv\"\n\n",
                      "markdown": "`limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"strconv\"\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/cmd/lark.go"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 7,
                  "endLine": 18,
                  "snippet": {
                    "text": "limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"github.com/bitnami-labs/kubewatch/config\"\n\t\"github.com/sirupsen/logrus\"\n",
                    "rendered": {
                      "text": "limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"github.com/bitnami-labs/kubewatch/config\"\n\t\"github.com/sirupsen/logrus\"\n",
                      "markdown": "`limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"github.com/bitnami-labs/kubewatch/config\"\n\t\"github.com/sirupsen/logrus\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/cmd/resource.go"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 40,
                  "endLine": 77,
                  "endColumn": 45,
                  "snippet": {
                    "text": "}\n\n// configures resource in config based on operation add/remove\nfunc configureResource(operation string, cmd *cobra.Command, conf *config.Config) {\n\n\t// flags struct\n\tflags := []struct {\n",
                    "rendered": {
                      "text": "}\n\n// configures resource in config based on operation add/remove\nfunc configureResource(operation string, cmd *cobra.Command, conf *config.Config) {\n\n\t// flags struct\n\tflags := []struct {\n",
                      "markdown": "`}\n\n// configures resource in config based on operation add/remove\nfunc configureResource(operation string, cmd *cobra.Command, conf *config.Config) {\n\n\t// flags struct\n\tflags := []struct {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/cmd/resource.go"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 7,
                  "endLine": 18,
                  "snippet": {
                    "text": "limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"github.com/bitnami-labs/kubewatch/config\"\n\t\"github.com/sirupsen/logrus\"\n",
                    "rendered": {
                      "text": "limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"github.com/bitnami-labs/kubewatch/config\"\n\t\"github.com/sirupsen/logrus\"\n",
                      "markdown": "`limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"github.com/bitnami-labs/kubewatch/config\"\n\t\"github.com/sirupsen/logrus\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/cmd/resource.go"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 65,
                  "endLine": 203,
                  "endColumn": 74,
                  "snippet": {
                    "text": "\tresourceConfigCmd.PersistentFlags().Bool(\"node\", false, \"watch for Nodes\")\n\tresourceConfigCmd.PersistentFlags().Bool(\"clusterrole\", false, \"watch for cluster roles\")\n\tresourceConfigCmd.PersistentFlags().Bool(\"clusterrolebinding\", false, \"watch for cluster roles binding\")\n\tresourceConfigCmd.PersistentFlags().Bool(\"sa\", false, \"watch for service accounts\")\n\tresourceConfigCmd.PersistentFlags().Bool(\"coreevent\", false, \"watch for events (old events object)\")\n}\n",
                    "rendered": {
                      "text": "\tresourceConfigCmd.PersistentFlags().Bool(\"node\", false, \"watch for Nodes\")\n\tresourceConfigCmd.PersistentFlags().Bool(\"clusterrole\", false, \"watch for cluster roles\")\n\tresourceConfigCmd.PersistentFlags().Bool(\"clusterrolebinding\", false, \"watch for cluster roles binding\")\n\tresourceConfigCmd.PersistentFlags().Bool(\"sa\", false, \"watch for service accounts\")\n\tresourceConfigCmd.PersistentFlags().Bool(\"coreevent\", false, \"watch for events (old events object)\")\n}\n",
                      "markdown": "`\tresourceConfigCmd.PersistentFlags().Bool(\"node\", false, \"watch for Nodes\")\n\tresourceConfigCmd.PersistentFlags().Bool(\"clusterrole\", false, \"watch for cluster roles\")\n\tresourceConfigCmd.PersistentFlags().Bool(\"clusterrolebinding\", false, \"watch for cluster roles binding\")\n\tresourceConfigCmd.PersistentFlags().Bool(\"sa\", false, \"watch for service accounts\")\n\tresourceConfigCmd.PersistentFlags().Bool(\"coreevent\", false, \"watch for events (old events object)\")\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/templates/_helpers.tpl"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 17,
                  "endLine": 22,
                  "endColumn": 25,
                  "snippet": {
                    "text": "{{- end -}}\n\n{{/*\nReturn the proper Docker Image Registry Secret Names\n*/}}\n{{- define \"kubewatch.imagePullSecrets\" -}}\n{{- include \"common.images.pullSecrets\" (dict \"images\" (list .Values.image) \"global\" .Values.global) -}}\n",
                    "rendered": {
                      "text": "{{- end -}}\n\n{{/*\nReturn the proper Docker Image Registry Secret Names\n*/}}\n{{- define \"kubewatch.imagePullSecrets\" -}}\n{{- include \"common.images.pullSecrets\" (dict \"images\" (list .Values.image) \"global\" .Values.global) -}}\n",
                      "markdown": "`{{- end -}}\n\n{{/*\nReturn the proper Docker Image Registry Secret Names\n*/}}\n{{- define \"kubewatch.imagePullSecrets\" -}}\n{{- include \"common.images.pullSecrets\" (dict \"images\" (list .Values.image) \"global\" .Values.global) -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/templates/_helpers.tpl"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 22,
                  "endLine": 4,
                  "endColumn": 31,
                  "snippet": {
                    "text": "{{/* vim: set filetype=mustache: */}}\n\n{{/*\nCreate the name of the service account to use\n*/}}\n{{- define \"kubewatch.serviceAccountName\" -}}\n{{- if .Values.serviceAccount.create -}}\n",
                    "rendered": {
                      "text": "{{/* vim: set filetype=mustache: */}}\n\n{{/*\nCreate the name of the service account to use\n*/}}\n{{- define \"kubewatch.serviceAccountName\" -}}\n{{- if .Values.serviceAccount.create -}}\n",
                      "markdown": "`{{/* vim: set filetype=mustache: */}}\n\n{{/*\nCreate the name of the service account to use\n*/}}\n{{- define \"kubewatch.serviceAccountName\" -}}\n{{- if .Values.serviceAccount.create -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/README.md"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 45,
                  "endLine": 104,
                  "endColumn": 53,
                  "snippet": {
                    "text": " email subject                                                             | `\"\"`                   |\n| `smtp.auth.username`                     | Username for LOGIN and PLAIN auth mech                                           | `\"\"`                   |\n| `smtp.auth.password`                     | Password for LOGIN and PLAIN auth mech                                           | `\"\"`                   |\n| `smtp.auth.secret`                       | Secret for CRAM-MD5 auth mech                                                    | `\"\"`                   |\n| `smtp.auth.identity`                     | Id",
                    "rendered": {
                      "text": " email subject                                                             | `\"\"`                   |\n| `smtp.auth.username`                     | Username for LOGIN and PLAIN auth mech                                           | `\"\"`                   |\n| `smtp.auth.password`                     | Password for LOGIN and PLAIN auth mech                                           | `\"\"`                   |\n| `smtp.auth.secret`                       | Secret for CRAM-MD5 auth mech                                                    | `\"\"`                   |\n| `smtp.auth.identity`                     | Id",
                      "markdown": "` email subject                                                             | `\"\"`                   |\n| `smtp.auth.username`                     | Username for LOGIN and PLAIN auth mech                                           | `\"\"`                   |\n| `smtp.auth.password`                     | Password for LOGIN and PLAIN auth mech                                           | `\"\"`                   |\n| `smtp.auth.secret`                       | Secret for CRAM-MD5 auth mech                                                    | `\"\"`                   |\n| `smtp.auth.identity`                     | Id`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/README.md"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 13,
                  "endLine": 104,
                  "endColumn": 21,
                  "snippet": {
                    "text": "                        | Source email subject                                                             | `\"\"`                   |\n| `smtp.auth.username`                     | Username for LOGIN and PLAIN auth mech                                           | `\"\"`                   |\n| `smtp.auth.password`                     | Password for LOGIN and PLAIN auth mech                                           | `\"\"`                   |\n| `smtp.auth.secret`                       | Secret for CRAM-MD5 auth mech                                                    | `\"\"`                   |\n| `smtp.auth.id",
                    "rendered": {
                      "text": "                        | Source email subject                                                             | `\"\"`                   |\n| `smtp.auth.username`                     | Username for LOGIN and PLAIN auth mech                                           | `\"\"`                   |\n| `smtp.auth.password`                     | Password for LOGIN and PLAIN auth mech                                           | `\"\"`                   |\n| `smtp.auth.secret`                       | Secret for CRAM-MD5 auth mech                                                    | `\"\"`                   |\n| `smtp.auth.id",
                      "markdown": "`                        | Source email subject                                                             | `\"\"`                   |\n| `smtp.auth.username`                     | Username for LOGIN and PLAIN auth mech                                           | `\"\"`                   |\n| `smtp.auth.password`                     | Password for LOGIN and PLAIN auth mech                                           | `\"\"`                   |\n| `smtp.auth.secret`                       | Secret for CRAM-MD5 auth mech                                                    | `\"\"`                   |\n| `smtp.auth.id`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/README.md"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 30,
                  "endLine": 221,
                  "endColumn": 70,
                  "snippet": {
                    "text": "\n### Adding extra environment variables\n\nIn case you want to add extra environment variables (useful for advanced operations like custom init scripts), you can use the `extraEnvVars` property.\n\n```yaml\nextraEnvVars:\n",
                    "rendered": {
                      "text": "\n### Adding extra environment variables\n\nIn case you want to add extra environment variables (useful for advanced operations like custom init scripts), you can use the `extraEnvVars` property.\n\n```yaml\nextraEnvVars:\n",
                      "markdown": "`\n### Adding extra environment variables\n\nIn case you want to add extra environment variables (useful for advanced operations like custom init scripts), you can use the `extraEnvVars` property.\n\n```yaml\nextraEnvVars:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/README.md"
                },
                "region": {
                  "startLine": 317,
                  "startColumn": 36,
                  "endLine": 318,
                  "snippet": {
                    "text": "\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/README.md"
                },
                "region": {
                  "startLine": 265,
                  "startColumn": 124,
                  "endLine": 265,
                  "endColumn": 128,
                  "snippet": {
                    "text": ". Find more information about Pod's affinity in the [kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity).\n\nAs an alternative, you can use of the preset configurations for pod affinity, pod anti-affinity, and node affinity available at the [bitnami/common](https://github.com/bitnami/charts/tree/master/bitnami/common#affinities) chart. To do so, set the `podAffinityPreset`, `podAntiAffinityPreset`, or `nodeAffinityPreset` parameters.\n\n## Troubleshooting\n\nFind more information about how to deal with common errors related to Bitnami'",
                    "rendered": {
                      "text": ". Find more information about Pod's affinity in the [kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity).\n\nAs an alternative, you can use of the preset configurations for pod affinity, pod anti-affinity, and node affinity available at the [bitnami/common](https://github.com/bitnami/charts/tree/master/bitnami/common#affinities) chart. To do so, set the `podAffinityPreset`, `podAntiAffinityPreset`, or `nodeAffinityPreset` parameters.\n\n## Troubleshooting\n\nFind more information about how to deal with common errors related to Bitnami'",
                      "markdown": "`. Find more information about Pod's affinity in the [kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity).\n\nAs an alternative, you can use of the preset configurations for pod affinity, pod anti-affinity, and node affinity available at the [bitnami/common](https://github.com/bitnami/charts/tree/master/bitnami/common#affinities) chart. To do so, set the `podAffinityPreset`, `podAntiAffinityPreset`, or `nodeAffinityPreset` parameters.\n\n## Troubleshooting\n\nFind more information about how to deal with common errors related to Bitnami'`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/README.md"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 82,
                  "endLine": 13,
                  "snippet": {
                    "text": "## TL;DR\n\n```console\n$ helm repo add robusta https://robusta-charts.storage.googleapis.com && helm repo update\n$ helm install my-release robusta/kubewatch\n```\n\n## Introduction\n",
                    "rendered": {
                      "text": "## TL;DR\n\n```console\n$ helm repo add robusta https://robusta-charts.storage.googleapis.com && helm repo update\n$ helm install my-release robusta/kubewatch\n```\n\n## Introduction\n",
                      "markdown": "`## TL;DR\n\n```console\n$ helm repo add robusta https://robusta-charts.storage.googleapis.com && helm repo update\n$ helm install my-release robusta/kubewatch\n```\n\n## Introduction\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/README.md"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 246,
                  "endLine": 288,
                  "endColumn": 252,
                  "snippet": {
                    "text": "\n**What changes were introduced in this major version?**\n\n- Previous versions of this Helm Chart use `apiVersion: v1` (installable by both Helm 2 and 3), this Helm Chart was updated to `apiVersion: v2` (installable by Helm 3 only). [Here](https://helm.sh/docs/topics/charts/#the-apiversion-field) you can find more information about the `apiVersion` field.\n- The different fields present in the *Chart.yaml* file has been ordered alphabetically in a homogeneous way for all the Bitnami Helm Charts\n\n**Considerations when upgrading to this version**\n",
                    "rendered": {
                      "text": "\n**What changes were introduced in this major version?**\n\n- Previous versions of this Helm Chart use `apiVersion: v1` (installable by both Helm 2 and 3), this Helm Chart was updated to `apiVersion: v2` (installable by Helm 3 only). [Here](https://helm.sh/docs/topics/charts/#the-apiversion-field) you can find more information about the `apiVersion` field.\n- The different fields present in the *Chart.yaml* file has been ordered alphabetically in a homogeneous way for all the Bitnami Helm Charts\n\n**Considerations when upgrading to this version**\n",
                      "markdown": "`\n**What changes were introduced in this major version?**\n\n- Previous versions of this Helm Chart use `apiVersion: v1` (installable by both Helm 2 and 3), this Helm Chart was updated to `apiVersion: v2` (installable by Helm 3 only). [Here](https://helm.sh/docs/topics/charts/#the-apiversion-field) you can find more information about the `apiVersion` field.\n- The different fields present in the *Chart.yaml* file has been ordered alphabetically in a homogeneous way for all the Bitnami Helm Charts\n\n**Considerations when upgrading to this version**\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/README.md"
                },
                "region": {
                  "startLine": 268,
                  "endLine": 269,
                  "endColumn": 5,
                  "snippet": {
                    "text": "As an alternative, you can use of the preset configurations for pod affinity, pod anti-affinity, and node affinity available at the [bitnami/common](https://github.com/bitnami/charts/tree/master/bitnami/common#affinities) chart. To do so, set the `podAffinityPreset`, `podAntiAffinityPreset`, or `nodeAffinityPreset` parameters.\n\n## Troubleshooting\n\nFind more information about how to deal with common errors related to Bitnami's Helm charts in [this troubleshooting guide](https://docs.bitnami.com/general/how-to/troubleshoot-helm-chart-issues).\n\n## Upgrading\n\n",
                    "rendered": {
                      "text": "As an alternative, you can use of the preset configurations for pod affinity, pod anti-affinity, and node affinity available at the [bitnami/common](https://github.com/bitnami/charts/tree/master/bitnami/common#affinities) chart. To do so, set the `podAffinityPreset`, `podAntiAffinityPreset`, or `nodeAffinityPreset` parameters.\n\n## Troubleshooting\n\nFind more information about how to deal with common errors related to Bitnami's Helm charts in [this troubleshooting guide](https://docs.bitnami.com/general/how-to/troubleshoot-helm-chart-issues).\n\n## Upgrading\n\n",
                      "markdown": "`As an alternative, you can use of the preset configurations for pod affinity, pod anti-affinity, and node affinity available at the [bitnami/common](https://github.com/bitnami/charts/tree/master/bitnami/common#affinities) chart. To do so, set the `podAffinityPreset`, `podAntiAffinityPreset`, or `nodeAffinityPreset` parameters.\n\n## Troubleshooting\n\nFind more information about how to deal with common errors related to Bitnami's Helm charts in [this troubleshooting guide](https://docs.bitnami.com/general/how-to/troubleshoot-helm-chart-issues).\n\n## Upgrading\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/README.md"
                },
                "region": {
                  "startLine": 265,
                  "startColumn": 100,
                  "endLine": 265,
                  "endColumn": 106,
                  "snippet": {
                    "text": "the `affinity` parameter. Find more information about Pod's affinity in the [kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity).\n\nAs an alternative, you can use of the preset configurations for pod affinity, pod anti-affinity, and node affinity available at the [bitnami/common](https://github.com/bitnami/charts/tree/master/bitnami/common#affinities) chart. To do so, set the `podAffinityPreset`, `podAntiAffinityPreset`, or `nodeAffinityPreset` parameters.\n\n## Troubleshooting\n\nFind more information about how to deal with common erro",
                    "rendered": {
                      "text": "the `affinity` parameter. Find more information about Pod's affinity in the [kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity).\n\nAs an alternative, you can use of the preset configurations for pod affinity, pod anti-affinity, and node affinity available at the [bitnami/common](https://github.com/bitnami/charts/tree/master/bitnami/common#affinities) chart. To do so, set the `podAffinityPreset`, `podAntiAffinityPreset`, or `nodeAffinityPreset` parameters.\n\n## Troubleshooting\n\nFind more information about how to deal with common erro",
                      "markdown": "`the `affinity` parameter. Find more information about Pod's affinity in the [kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity).\n\nAs an alternative, you can use of the preset configurations for pod affinity, pod anti-affinity, and node affinity available at the [bitnami/common](https://github.com/bitnami/charts/tree/master/bitnami/common#affinities) chart. To do so, set the `podAffinityPreset`, `podAntiAffinityPreset`, or `nodeAffinityPreset` parameters.\n\n## Troubleshooting\n\nFind more information about how to deal with common erro`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/README.md"
                },
                "region": {
                  "startLine": 263,
                  "startColumn": 81,
                  "endLine": 263,
                  "endColumn": 87,
                  "snippet": {
                    "text": "on or some extra deployment with a micro service used by your app. For covering this case, the chart allows adding the full specification of other objects using the `extraDeploy` parameter.\n\n### Setting Pod's affinity\n\nThis chart allows you to set your custom affinity using the `affinity` parameter. Find more information about Pod's affinity in the [kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity).\n\nAs an alternative, you can use of the preset configurations for pod affinity, pod anti-affinity, and node affinity available at the",
                    "rendered": {
                      "text": "on or some extra deployment with a micro service used by your app. For covering this case, the chart allows adding the full specification of other objects using the `extraDeploy` parameter.\n\n### Setting Pod's affinity\n\nThis chart allows you to set your custom affinity using the `affinity` parameter. Find more information about Pod's affinity in the [kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity).\n\nAs an alternative, you can use of the preset configurations for pod affinity, pod anti-affinity, and node affinity available at the",
                      "markdown": "`on or some extra deployment with a micro service used by your app. For covering this case, the chart allows adding the full specification of other objects using the `extraDeploy` parameter.\n\n### Setting Pod's affinity\n\nThis chart allows you to set your custom affinity using the `affinity` parameter. Find more information about Pod's affinity in the [kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity).\n\nAs an alternative, you can use of the preset configurations for pod affinity, pod anti-affinity, and node affinity available at the`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/README.md"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 150,
                  "endLine": 259,
                  "endColumn": 159,
                  "snippet": {
                    "text": "\n### Deploying extra resources\n\nThere are cases where you may want to deploy extra objects, such a ConfigMap containing your app's configuration or some extra deployment with a micro service used by your app. For covering this case, the chart allows adding the full specification of other objects using the `extraDeploy` parameter.\n\n### Setting Pod's affinity\n\n",
                    "rendered": {
                      "text": "\n### Deploying extra resources\n\nThere are cases where you may want to deploy extra objects, such a ConfigMap containing your app's configuration or some extra deployment with a micro service used by your app. For covering this case, the chart allows adding the full specification of other objects using the `extraDeploy` parameter.\n\n### Setting Pod's affinity\n\n",
                      "markdown": "`\n### Deploying extra resources\n\nThere are cases where you may want to deploy extra objects, such a ConfigMap containing your app's configuration or some extra deployment with a micro service used by your app. For covering this case, the chart allows adding the full specification of other objects using the `extraDeploy` parameter.\n\n### Setting Pod's affinity\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/README.md"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 65,
                  "endLine": 186,
                  "endColumn": 74,
                  "snippet": {
                    "text": "me is generated using the fullname template. | `\"\"`    |\n| `serviceAccount.automountServiceAccountToken` | Automount service account token for the server service account                                                      | `true`  |\n| `serviceAccount.annotations`                  | Annotations for service account. Evaluated as a template. Only used if `create` is `true`.                          | `{}`    |\n\n\nSpecify each parameter using the `--set key=value[,key=value]` argument to `helm install`. For example,\n\n```console\n$ helm install my-release bitnami/kubewatch \\\n  --set=slack.channel=\"#bots\",sl",
                    "rendered": {
                      "text": "me is generated using the fullname template. | `\"\"`    |\n| `serviceAccount.automountServiceAccountToken` | Automount service account token for the server service account                                                      | `true`  |\n| `serviceAccount.annotations`                  | Annotations for service account. Evaluated as a template. Only used if `create` is `true`.                          | `{}`    |\n\n\nSpecify each parameter using the `--set key=value[,key=value]` argument to `helm install`. For example,\n\n```console\n$ helm install my-release bitnami/kubewatch \\\n  --set=slack.channel=\"#bots\",sl",
                      "markdown": "`me is generated using the fullname template. | `\"\"`    |\n| `serviceAccount.automountServiceAccountToken` | Automount service account token for the server service account                                                      | `true`  |\n| `serviceAccount.annotations`                  | Annotations for service account. Evaluated as a template. Only used if `create` is `true`.                          | `{}`    |\n\n\nSpecify each parameter using the `--set key=value[,key=value]` argument to `helm install`. For example,\n\n```console\n$ helm install my-release bitnami/kubewatch \\\n  --set=slack.channel=\"#bots\",sl`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/README.md"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 96,
                  "endLine": 185,
                  "endColumn": 105,
                  "snippet": {
                    "text": "              | `true`  |\n| `serviceAccount.name`                         | Name of the service account to use. If not set and create is true, a name is generated using the fullname template. | `\"\"`    |\n| `serviceAccount.automountServiceAccountToken` | Automount service account token for the server service account                                                      | `true`  |\n| `serviceAccount.annotations`                  | Annotations for service account. Evaluated as a template. Only used if `create` is `true`.                          | `{}`    |\n\n\nSpecify each parameter using the `--set key=val",
                    "rendered": {
                      "text": "              | `true`  |\n| `serviceAccount.name`                         | Name of the service account to use. If not set and create is true, a name is generated using the fullname template. | `\"\"`    |\n| `serviceAccount.automountServiceAccountToken` | Automount service account token for the server service account                                                      | `true`  |\n| `serviceAccount.annotations`                  | Annotations for service account. Evaluated as a template. Only used if `create` is `true`.                          | `{}`    |\n\n\nSpecify each parameter using the `--set key=val",
                      "markdown": "`              | `true`  |\n| `serviceAccount.name`                         | Name of the service account to use. If not set and create is true, a name is generated using the fullname template. | `\"\"`    |\n| `serviceAccount.automountServiceAccountToken` | Automount service account token for the server service account                                                      | `true`  |\n| `serviceAccount.annotations`                  | Annotations for service account. Evaluated as a template. Only used if `create` is `true`.                          | `{}`    |\n\n\nSpecify each parameter using the `--set key=val`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/README.md"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 59,
                  "endLine": 185,
                  "endColumn": 68,
                  "snippet": {
                    "text": "                                                   | `true`  |\n| `serviceAccount.name`                         | Name of the service account to use. If not set and create is true, a name is generated using the fullname template. | `\"\"`    |\n| `serviceAccount.automountServiceAccountToken` | Automount service account token for the server service account                                                      | `true`  |\n| `serviceAccount.annotations`                  | Annotations for service account. Evaluated as a template. Only used if `create` is `true`.                          | `{}`    |\n\n\nSpecify ea",
                    "rendered": {
                      "text": "                                                   | `true`  |\n| `serviceAccount.name`                         | Name of the service account to use. If not set and create is true, a name is generated using the fullname template. | `\"\"`    |\n| `serviceAccount.automountServiceAccountToken` | Automount service account token for the server service account                                                      | `true`  |\n| `serviceAccount.annotations`                  | Annotations for service account. Evaluated as a template. Only used if `create` is `true`.                          | `{}`    |\n\n\nSpecify ea",
                      "markdown": "`                                                   | `true`  |\n| `serviceAccount.name`                         | Name of the service account to use. If not set and create is true, a name is generated using the fullname template. | `\"\"`    |\n| `serviceAccount.automountServiceAccountToken` | Automount service account token for the server service account                                                      | `true`  |\n| `serviceAccount.annotations`                  | Annotations for service account. Evaluated as a template. Only used if `create` is `true`.                          | `{}`    |\n\n\nSpecify ea`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/README.md"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 61,
                  "endLine": 184,
                  "endColumn": 70,
                  "snippet": {
                    "text": "                                                 | `false` |\n| `serviceAccount.create`                       | Specifies whether a ServiceAccount should be created                                                                | `true`  |\n| `serviceAccount.name`                         | Name of the service account to use. If not set and create is true, a name is generated using the fullname template. | `\"\"`    |\n| `serviceAccount.automountServiceAccountToken` | Automount service account token for the server service account                                                      | `true`  |\n| `serviceAcco",
                    "rendered": {
                      "text": "                                                 | `false` |\n| `serviceAccount.create`                       | Specifies whether a ServiceAccount should be created                                                                | `true`  |\n| `serviceAccount.name`                         | Name of the service account to use. If not set and create is true, a name is generated using the fullname template. | `\"\"`    |\n| `serviceAccount.automountServiceAccountToken` | Automount service account token for the server service account                                                      | `true`  |\n| `serviceAcco",
                      "markdown": "`                                                 | `false` |\n| `serviceAccount.create`                       | Specifies whether a ServiceAccount should be created                                                                | `true`  |\n| `serviceAccount.name`                         | Name of the service account to use. If not set and create is true, a name is generated using the fullname template. | `\"\"`    |\n| `serviceAccount.automountServiceAccountToken` | Automount service account token for the server service account                                                      | `true`  |\n| `serviceAcco`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/README.md"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 43,
                  "endLine": 164,
                  "endColumn": 49,
                  "snippet": {
                    "text": "bel values to match. Ignored if `affinity` is set.                                 | `[]`            |\n| `affinity`                              | Affinity for pod assignment                                                               | `{}`            |\n| `nodeSelector`                          | Node labels for pod assignment                                                            | `{}`            |\n| `tolerations`                           | Tolerations for pod assignment                                                            | `[]`            |\n| `priorityClassName`                    ",
                    "rendered": {
                      "text": "bel values to match. Ignored if `affinity` is set.                                 | `[]`            |\n| `affinity`                              | Affinity for pod assignment                                                               | `{}`            |\n| `nodeSelector`                          | Node labels for pod assignment                                                            | `{}`            |\n| `tolerations`                           | Tolerations for pod assignment                                                            | `[]`            |\n| `priorityClassName`                    ",
                      "markdown": "`bel values to match. Ignored if `affinity` is set.                                 | `[]`            |\n| `affinity`                              | Affinity for pod assignment                                                               | `{}`            |\n| `nodeSelector`                          | Node labels for pod assignment                                                            | `{}`            |\n| `tolerations`                           | Tolerations for pod assignment                                                            | `[]`            |\n| `priorityClassName`                    `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/README.md"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 43,
                  "endLine": 162,
                  "endColumn": 49,
                  "snippet": {
                    "text": "finity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard` | `\"\"`            |\n| `nodeAffinityPreset.key`                | Node label key to match. Ignored if `affinity` is set.                                    | `\"\"`            |\n| `nodeAffinityPreset.values`             | Node label values to match. Ignored if `affinity` is set.                                 | `[]`            |\n| `affinity`                              | Affinity for pod assignment                                                               | `{}`            |\n| `nodeSelector`                         ",
                    "rendered": {
                      "text": "finity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard` | `\"\"`            |\n| `nodeAffinityPreset.key`                | Node label key to match. Ignored if `affinity` is set.                                    | `\"\"`            |\n| `nodeAffinityPreset.values`             | Node label values to match. Ignored if `affinity` is set.                                 | `[]`            |\n| `affinity`                              | Affinity for pod assignment                                                               | `{}`            |\n| `nodeSelector`                         ",
                      "markdown": "`finity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard` | `\"\"`            |\n| `nodeAffinityPreset.key`                | Node label key to match. Ignored if `affinity` is set.                                    | `\"\"`            |\n| `nodeAffinityPreset.values`             | Node label values to match. Ignored if `affinity` is set.                                 | `[]`            |\n| `affinity`                              | Affinity for pod assignment                                                               | `{}`            |\n| `nodeSelector`                         `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/README.md"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 43,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "i-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`  | `soft`          |\n| `nodeAffinityPreset.type`               | Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard` | `\"\"`            |\n| `nodeAffinityPreset.key`                | Node label key to match. Ignored if `affinity` is set.                                    | `\"\"`            |\n| `nodeAffinityPreset.values`             | Node label values to match. Ignored if `affinity` is set.                                 | `[]`            |\n| `affinity`                             ",
                    "rendered": {
                      "text": "i-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`  | `soft`          |\n| `nodeAffinityPreset.type`               | Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard` | `\"\"`            |\n| `nodeAffinityPreset.key`                | Node label key to match. Ignored if `affinity` is set.                                    | `\"\"`            |\n| `nodeAffinityPreset.values`             | Node label values to match. Ignored if `affinity` is set.                                 | `[]`            |\n| `affinity`                             ",
                      "markdown": "`i-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`  | `soft`          |\n| `nodeAffinityPreset.type`               | Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard` | `\"\"`            |\n| `nodeAffinityPreset.key`                | Node label key to match. Ignored if `affinity` is set.                                    | `\"\"`            |\n| `nodeAffinityPreset.values`             | Node label values to match. Ignored if `affinity` is set.                                 | `[]`            |\n| `affinity`                             `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/README.md"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 43,
                  "endLine": 160,
                  "endColumn": 49,
                  "snippet": {
                    "text": "inity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`       | `\"\"`            |\n| `podAntiAffinityPreset`                 | Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`  | `soft`          |\n| `nodeAffinityPreset.type`               | Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard` | `\"\"`            |\n| `nodeAffinityPreset.key`                | Node label key to match. Ignored if `affinity` is set.                                    | `\"\"`            |\n| `nodeAffinityPreset.values`            ",
                    "rendered": {
                      "text": "inity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`       | `\"\"`            |\n| `podAntiAffinityPreset`                 | Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`  | `soft`          |\n| `nodeAffinityPreset.type`               | Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard` | `\"\"`            |\n| `nodeAffinityPreset.key`                | Node label key to match. Ignored if `affinity` is set.                                    | `\"\"`            |\n| `nodeAffinityPreset.values`            ",
                      "markdown": "`inity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`       | `\"\"`            |\n| `podAntiAffinityPreset`                 | Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`  | `soft`          |\n| `nodeAffinityPreset.type`               | Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard` | `\"\"`            |\n| `nodeAffinityPreset.key`                | Node label key to match. Ignored if `affinity` is set.                                    | `\"\"`            |\n| `nodeAffinityPreset.values`            `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/README.md"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 43,
                  "endLine": 152,
                  "endColumn": 52,
                  "snippet": {
                    "text": " delay seconds for readinessProbe                                                  | `10`            |\n| `readinessProbe.periodSeconds`          | Period seconds for readinessProbe                                                         | `10`            |\n| `readinessProbe.timeoutSeconds`         | Timeout seconds for readinessProbe                                                        | `1`             |\n| `readinessProbe.failureThreshold`       | Failure threshold for readinessProbe                                                      | `3`             |\n| `readinessProbe.successThreshold`       | ",
                    "rendered": {
                      "text": " delay seconds for readinessProbe                                                  | `10`            |\n| `readinessProbe.periodSeconds`          | Period seconds for readinessProbe                                                         | `10`            |\n| `readinessProbe.timeoutSeconds`         | Timeout seconds for readinessProbe                                                        | `1`             |\n| `readinessProbe.failureThreshold`       | Failure threshold for readinessProbe                                                      | `3`             |\n| `readinessProbe.successThreshold`       | ",
                      "markdown": "` delay seconds for readinessProbe                                                  | `10`            |\n| `readinessProbe.periodSeconds`          | Period seconds for readinessProbe                                                         | `10`            |\n| `readinessProbe.timeoutSeconds`         | Timeout seconds for readinessProbe                                                        | `1`             |\n| `readinessProbe.failureThreshold`       | Failure threshold for readinessProbe                                                      | `3`             |\n| `readinessProbe.successThreshold`       | `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/README.md"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 43,
                  "endLine": 146,
                  "endColumn": 52,
                  "snippet": {
                    "text": " delay seconds for livenessProbe                                                   | `10`            |\n| `livenessProbe.periodSeconds`           | Period seconds for livenessProbe                                                          | `10`            |\n| `livenessProbe.timeoutSeconds`          | Timeout seconds for livenessProbe                                                         | `1`             |\n| `livenessProbe.failureThreshold`        | Failure threshold for livenessProbe                                                       | `3`             |\n| `livenessProbe.successThreshold`        | ",
                    "rendered": {
                      "text": " delay seconds for livenessProbe                                                   | `10`            |\n| `livenessProbe.periodSeconds`           | Period seconds for livenessProbe                                                          | `10`            |\n| `livenessProbe.timeoutSeconds`          | Timeout seconds for livenessProbe                                                         | `1`             |\n| `livenessProbe.failureThreshold`        | Failure threshold for livenessProbe                                                       | `3`             |\n| `livenessProbe.successThreshold`        | ",
                      "markdown": "` delay seconds for livenessProbe                                                   | `10`            |\n| `livenessProbe.periodSeconds`           | Period seconds for livenessProbe                                                          | `10`            |\n| `livenessProbe.timeoutSeconds`          | Timeout seconds for livenessProbe                                                         | `1`             |\n| `livenessProbe.failureThreshold`        | Failure threshold for livenessProbe                                                       | `3`             |\n| `livenessProbe.successThreshold`        | `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/README.md"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 43,
                  "endLine": 140,
                  "endColumn": 52,
                  "snippet": {
                    "text": " delay seconds for startupProbe                                                    | `10`            |\n| `startupProbe.periodSeconds`            | Period seconds for startupProbe                                                           | `10`            |\n| `startupProbe.timeoutSeconds`           | Timeout seconds for startupProbe                                                          | `1`             |\n| `startupProbe.failureThreshold`         | Failure threshold for startupProbe                                                        | `3`             |\n| `startupProbe.successThreshold`         | ",
                    "rendered": {
                      "text": " delay seconds for startupProbe                                                    | `10`            |\n| `startupProbe.periodSeconds`            | Period seconds for startupProbe                                                           | `10`            |\n| `startupProbe.timeoutSeconds`           | Timeout seconds for startupProbe                                                          | `1`             |\n| `startupProbe.failureThreshold`         | Failure threshold for startupProbe                                                        | `3`             |\n| `startupProbe.successThreshold`         | ",
                      "markdown": "` delay seconds for startupProbe                                                    | `10`            |\n| `startupProbe.periodSeconds`            | Period seconds for startupProbe                                                           | `10`            |\n| `startupProbe.timeoutSeconds`           | Timeout seconds for startupProbe                                                          | `1`             |\n| `startupProbe.failureThreshold`         | Failure threshold for startupProbe                                                        | `3`             |\n| `startupProbe.successThreshold`         | `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/README.md"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 85,
                  "endLine": 122,
                  "endColumn": 90,
                  "snippet": {
                    "text": "atch container                     | `[]`                   |\n| `extraEnvVarsCM`                         | Name of existing ConfigMap containing extra env vars                             | `\"\"`                   |\n| `extraEnvVarsSecret`                     | Name of existing Secret containing extra env vars                                | `\"\"`                   |\n\n\n### Kubewatch deployment parameters\n\n| Name                                    | Description                                                                               | Value           |\n| --------------------------------------- | ",
                    "rendered": {
                      "text": "atch container                     | `[]`                   |\n| `extraEnvVarsCM`                         | Name of existing ConfigMap containing extra env vars                             | `\"\"`                   |\n| `extraEnvVarsSecret`                     | Name of existing Secret containing extra env vars                                | `\"\"`                   |\n\n\n### Kubewatch deployment parameters\n\n| Name                                    | Description                                                                               | Value           |\n| --------------------------------------- | ",
                      "markdown": "`atch container                     | `[]`                   |\n| `extraEnvVarsCM`                         | Name of existing ConfigMap containing extra env vars                             | `\"\"`                   |\n| `extraEnvVarsSecret`                     | Name of existing Secret containing extra env vars                                | `\"\"`                   |\n\n\n### Kubewatch deployment parameters\n\n| Name                                    | Description                                                                               | Value           |\n| --------------------------------------- | `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/README.md"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 88,
                  "endLine": 121,
                  "endColumn": 93,
                  "snippet": {
                    "text": "uration before or after startup | `{}`                   |\n| `extraEnvVars`                           | Extra environment variables to be set on Kubewatch container                     | `[]`                   |\n| `extraEnvVarsCM`                         | Name of existing ConfigMap containing extra env vars                             | `\"\"`                   |\n| `extraEnvVarsSecret`                     | Name of existing Secret containing extra env vars                                | `\"\"`                   |\n\n\n### Kubewatch deployment parameters\n\n| Name                                    | Desc",
                    "rendered": {
                      "text": "uration before or after startup | `{}`                   |\n| `extraEnvVars`                           | Extra environment variables to be set on Kubewatch container                     | `[]`                   |\n| `extraEnvVarsCM`                         | Name of existing ConfigMap containing extra env vars                             | `\"\"`                   |\n| `extraEnvVarsSecret`                     | Name of existing Secret containing extra env vars                                | `\"\"`                   |\n\n\n### Kubewatch deployment parameters\n\n| Name                                    | Desc",
                      "markdown": "`uration before or after startup | `{}`                   |\n| `extraEnvVars`                           | Extra environment variables to be set on Kubewatch container                     | `[]`                   |\n| `extraEnvVarsCM`                         | Name of existing ConfigMap containing extra env vars                             | `\"\"`                   |\n| `extraEnvVarsSecret`                     | Name of existing Secret containing extra env vars                                | `\"\"`                   |\n\n\n### Kubewatch deployment parameters\n\n| Name                                    | Desc`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/README.md"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 44,
                  "endLine": 116,
                  "endColumn": 51,
                  "snippet": {
                    "text": " changes to Pods                                                            | `true`                 |\n| `resourcesToWatch.job`                   | Watch changes to Jobs                                                            | `false`                |\n| `resourcesToWatch.persistentvolume`      | Watch changes to PersistentVolumes                                               | `false`                |\n| `command`                                | Override default container command (useful when using custom images)             | `[]`                   |\n| `args`                                   | ",
                    "rendered": {
                      "text": " changes to Pods                                                            | `true`                 |\n| `resourcesToWatch.job`                   | Watch changes to Jobs                                                            | `false`                |\n| `resourcesToWatch.persistentvolume`      | Watch changes to PersistentVolumes                                               | `false`                |\n| `command`                                | Override default container command (useful when using custom images)             | `[]`                   |\n| `args`                                   | ",
                      "markdown": "` changes to Pods                                                            | `true`                 |\n| `resourcesToWatch.job`                   | Watch changes to Jobs                                                            | `false`                |\n| `resourcesToWatch.persistentvolume`      | Watch changes to PersistentVolumes                                               | `false`                |\n| `command`                                | Override default container command (useful when using custom images)             | `[]`                   |\n| `args`                                   | `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/README.md"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 44,
                  "endLine": 115,
                  "endColumn": 51,
                  "snippet": {
                    "text": " changes to Services                                                        | `false`                |\n| `resourcesToWatch.pod`                   | Watch changes to Pods                                                            | `true`                 |\n| `resourcesToWatch.job`                   | Watch changes to Jobs                                                            | `false`                |\n| `resourcesToWatch.persistentvolume`      | Watch changes to PersistentVolumes                                               | `false`                |\n| `command`                                | ",
                    "rendered": {
                      "text": " changes to Services                                                        | `false`                |\n| `resourcesToWatch.pod`                   | Watch changes to Pods                                                            | `true`                 |\n| `resourcesToWatch.job`                   | Watch changes to Jobs                                                            | `false`                |\n| `resourcesToWatch.persistentvolume`      | Watch changes to PersistentVolumes                                               | `false`                |\n| `command`                                | ",
                      "markdown": "` changes to Services                                                        | `false`                |\n| `resourcesToWatch.pod`                   | Watch changes to Pods                                                            | `true`                 |\n| `resourcesToWatch.job`                   | Watch changes to Jobs                                                            | `false`                |\n| `resourcesToWatch.persistentvolume`      | Watch changes to PersistentVolumes                                               | `false`                |\n| `command`                                | `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/README.md"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 44,
                  "endLine": 114,
                  "endColumn": 51,
                  "snippet": {
                    "text": " changes to DaemonSets                                                      | `false`                |\n| `resourcesToWatch.services`              | Watch changes to Services                                                        | `false`                |\n| `resourcesToWatch.pod`                   | Watch changes to Pods                                                            | `true`                 |\n| `resourcesToWatch.job`                   | Watch changes to Jobs                                                            | `false`                |\n| `resourcesToWatch.persistentvolume`      | ",
                    "rendered": {
                      "text": " changes to DaemonSets                                                      | `false`                |\n| `resourcesToWatch.services`              | Watch changes to Services                                                        | `false`                |\n| `resourcesToWatch.pod`                   | Watch changes to Pods                                                            | `true`                 |\n| `resourcesToWatch.job`                   | Watch changes to Jobs                                                            | `false`                |\n| `resourcesToWatch.persistentvolume`      | ",
                      "markdown": "` changes to DaemonSets                                                      | `false`                |\n| `resourcesToWatch.services`              | Watch changes to Services                                                        | `false`                |\n| `resourcesToWatch.pod`                   | Watch changes to Pods                                                            | `true`                 |\n| `resourcesToWatch.job`                   | Watch changes to Jobs                                                            | `false`                |\n| `resourcesToWatch.persistentvolume`      | `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/README.md"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 44,
                  "endLine": 113,
                  "endColumn": 51,
                  "snippet": {
                    "text": " changes to ReplicaSets                                                     | `false`                |\n| `resourcesToWatch.daemonset`             | Watch changes to DaemonSets                                                      | `false`                |\n| `resourcesToWatch.services`              | Watch changes to Services                                                        | `false`                |\n| `resourcesToWatch.pod`                   | Watch changes to Pods                                                            | `true`                 |\n| `resourcesToWatch.job`                   | ",
                    "rendered": {
                      "text": " changes to ReplicaSets                                                     | `false`                |\n| `resourcesToWatch.daemonset`             | Watch changes to DaemonSets                                                      | `false`                |\n| `resourcesToWatch.services`              | Watch changes to Services                                                        | `false`                |\n| `resourcesToWatch.pod`                   | Watch changes to Pods                                                            | `true`                 |\n| `resourcesToWatch.job`                   | ",
                      "markdown": "` changes to ReplicaSets                                                     | `false`                |\n| `resourcesToWatch.daemonset`             | Watch changes to DaemonSets                                                      | `false`                |\n| `resourcesToWatch.services`              | Watch changes to Services                                                        | `false`                |\n| `resourcesToWatch.pod`                   | Watch changes to Pods                                                            | `true`                 |\n| `resourcesToWatch.job`                   | `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/README.md"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 44,
                  "endLine": 112,
                  "endColumn": 51,
                  "snippet": {
                    "text": " changes to ReplicationControllers                                          | `false`                |\n| `resourcesToWatch.replicaset`            | Watch changes to ReplicaSets                                                     | `false`                |\n| `resourcesToWatch.daemonset`             | Watch changes to DaemonSets                                                      | `false`                |\n| `resourcesToWatch.services`              | Watch changes to Services                                                        | `false`                |\n| `resourcesToWatch.pod`                   | ",
                    "rendered": {
                      "text": " changes to ReplicationControllers                                          | `false`                |\n| `resourcesToWatch.replicaset`            | Watch changes to ReplicaSets                                                     | `false`                |\n| `resourcesToWatch.daemonset`             | Watch changes to DaemonSets                                                      | `false`                |\n| `resourcesToWatch.services`              | Watch changes to Services                                                        | `false`                |\n| `resourcesToWatch.pod`                   | ",
                      "markdown": "` changes to ReplicationControllers                                          | `false`                |\n| `resourcesToWatch.replicaset`            | Watch changes to ReplicaSets                                                     | `false`                |\n| `resourcesToWatch.daemonset`             | Watch changes to DaemonSets                                                      | `false`                |\n| `resourcesToWatch.services`              | Watch changes to Services                                                        | `false`                |\n| `resourcesToWatch.pod`                   | `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/README.md"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 44,
                  "endLine": 111,
                  "endColumn": 51,
                  "snippet": {
                    "text": " changes to Deployments                                                     | `true`                 |\n| `resourcesToWatch.replicationcontroller` | Watch changes to ReplicationControllers                                          | `false`                |\n| `resourcesToWatch.replicaset`            | Watch changes to ReplicaSets                                                     | `false`                |\n| `resourcesToWatch.daemonset`             | Watch changes to DaemonSets                                                      | `false`                |\n| `resourcesToWatch.services`              | ",
                    "rendered": {
                      "text": " changes to Deployments                                                     | `true`                 |\n| `resourcesToWatch.replicationcontroller` | Watch changes to ReplicationControllers                                          | `false`                |\n| `resourcesToWatch.replicaset`            | Watch changes to ReplicaSets                                                     | `false`                |\n| `resourcesToWatch.daemonset`             | Watch changes to DaemonSets                                                      | `false`                |\n| `resourcesToWatch.services`              | ",
                      "markdown": "` changes to Deployments                                                     | `true`                 |\n| `resourcesToWatch.replicationcontroller` | Watch changes to ReplicationControllers                                          | `false`                |\n| `resourcesToWatch.replicaset`            | Watch changes to ReplicaSets                                                     | `false`                |\n| `resourcesToWatch.daemonset`             | Watch changes to DaemonSets                                                      | `false`                |\n| `resourcesToWatch.services`              | `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/README.md"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 44,
                  "endLine": 110,
                  "endColumn": 51,
                  "snippet": {
                    "text": "pace to watch, leave it empty for watching all                              | `\"\"`                   |\n| `resourcesToWatch.deployment`            | Watch changes to Deployments                                                     | `true`                 |\n| `resourcesToWatch.replicationcontroller` | Watch changes to ReplicationControllers                                          | `false`                |\n| `resourcesToWatch.replicaset`            | Watch changes to ReplicaSets                                                     | `false`                |\n| `resourcesToWatch.daemonset`             | ",
                    "rendered": {
                      "text": "pace to watch, leave it empty for watching all                              | `\"\"`                   |\n| `resourcesToWatch.deployment`            | Watch changes to Deployments                                                     | `true`                 |\n| `resourcesToWatch.replicationcontroller` | Watch changes to ReplicationControllers                                          | `false`                |\n| `resourcesToWatch.replicaset`            | Watch changes to ReplicaSets                                                     | `false`                |\n| `resourcesToWatch.daemonset`             | ",
                      "markdown": "`pace to watch, leave it empty for watching all                              | `\"\"`                   |\n| `resourcesToWatch.deployment`            | Watch changes to Deployments                                                     | `true`                 |\n| `resourcesToWatch.replicationcontroller` | Watch changes to ReplicationControllers                                          | `false`                |\n| `resourcesToWatch.replicaset`            | Watch changes to ReplicaSets                                                     | `false`                |\n| `resourcesToWatch.daemonset`             | `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/README.md"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 44,
                  "endLine": 109,
                  "endColumn": 51,
                  "snippet": {
                    "text": " STARTTLS. Set to `true` or `false`                                         | `\"\"`                   |\n| `namespaceToWatch`                       | Namespace to watch, leave it empty for watching all                              | `\"\"`                   |\n| `resourcesToWatch.deployment`            | Watch changes to Deployments                                                     | `true`                 |\n| `resourcesToWatch.replicationcontroller` | Watch changes to ReplicationControllers                                          | `false`                |\n| `resourcesToWatch.replicaset`            | ",
                    "rendered": {
                      "text": " STARTTLS. Set to `true` or `false`                                         | `\"\"`                   |\n| `namespaceToWatch`                       | Namespace to watch, leave it empty for watching all                              | `\"\"`                   |\n| `resourcesToWatch.deployment`            | Watch changes to Deployments                                                     | `true`                 |\n| `resourcesToWatch.replicationcontroller` | Watch changes to ReplicationControllers                                          | `false`                |\n| `resourcesToWatch.replicaset`            | ",
                      "markdown": "` STARTTLS. Set to `true` or `false`                                         | `\"\"`                   |\n| `namespaceToWatch`                       | Namespace to watch, leave it empty for watching all                              | `\"\"`                   |\n| `resourcesToWatch.deployment`            | Watch changes to Deployments                                                     | `true`                 |\n| `resourcesToWatch.replicationcontroller` | Watch changes to ReplicationControllers                                          | `false`                |\n| `resourcesToWatch.replicaset`            | `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/README.md"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 44,
                  "endLine": 92,
                  "endColumn": 51,
                  "snippet": {
                    "text": "rmost user to notify                                                        | `\"\"`                   |\n| `flock.enabled`                          | Enable Flock notifications                                                       | `false`                |\n| `flock.url`                              | Flock URL                                                                        | `\"\"`                   |\n| `msteams.enabled`                        | Enable Microsoft Teams notifications                                             | `false`                |\n| `msteams.webhookurl`                     | ",
                    "rendered": {
                      "text": "rmost user to notify                                                        | `\"\"`                   |\n| `flock.enabled`                          | Enable Flock notifications                                                       | `false`                |\n| `flock.url`                              | Flock URL                                                                        | `\"\"`                   |\n| `msteams.enabled`                        | Enable Microsoft Teams notifications                                             | `false`                |\n| `msteams.webhookurl`                     | ",
                      "markdown": "`rmost user to notify                                                        | `\"\"`                   |\n| `flock.enabled`                          | Enable Flock notifications                                                       | `false`                |\n| `flock.url`                              | Flock URL                                                                        | `\"\"`                   |\n| `msteams.enabled`                        | Enable Microsoft Teams notifications                                             | `false`                |\n| `msteams.webhookurl`                     | `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/README.md"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 51,
                  "endLine": 91,
                  "endColumn": 58,
                  "snippet": {
                    "text": "RL                                                                   | `\"\"`                   |\n| `mattermost.username`                    | Mattermost user to notify                                                        | `\"\"`                   |\n| `flock.enabled`                          | Enable Flock notifications                                                       | `false`                |\n| `flock.url`                              | Flock URL                                                                        | `\"\"`                   |\n| `msteams.enabled`                        | Enable ",
                    "rendered": {
                      "text": "RL                                                                   | `\"\"`                   |\n| `mattermost.username`                    | Mattermost user to notify                                                        | `\"\"`                   |\n| `flock.enabled`                          | Enable Flock notifications                                                       | `false`                |\n| `flock.url`                              | Flock URL                                                                        | `\"\"`                   |\n| `msteams.enabled`                        | Enable ",
                      "markdown": "`RL                                                                   | `\"\"`                   |\n| `mattermost.username`                    | Mattermost user to notify                                                        | `\"\"`                   |\n| `flock.enabled`                          | Enable Flock notifications                                                       | `false`                |\n| `flock.url`                              | Flock URL                                                                        | `\"\"`                   |\n| `msteams.enabled`                        | Enable `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/README.md"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 36,
                  "endLine": 52,
                  "endColumn": 44,
                  "snippet": {
                    "text": "| Name                      | Description                                     | Value |\n| ------------------------- | ----------------------------------------------- | ----- |\n| `global.imageRegistry`    | Global Docker image registry                    | `\"\"`  |\n| `global.imagePullSecrets` | Global Docker registry secret names as an array | `[]`  |\n\n\n### Common parameters\n",
                    "rendered": {
                      "text": "| Name                      | Description                                     | Value |\n| ------------------------- | ----------------------------------------------- | ----- |\n| `global.imageRegistry`    | Global Docker image registry                    | `\"\"`  |\n| `global.imagePullSecrets` | Global Docker registry secret names as an array | `[]`  |\n\n\n### Common parameters\n",
                      "markdown": "`| Name                      | Description                                     | Value |\n| ------------------------- | ----------------------------------------------- | ----- |\n| `global.imageRegistry`    | Global Docker image registry                    | `\"\"`  |\n| `global.imagePullSecrets` | Global Docker registry secret names as an array | `[]`  |\n\n\n### Common parameters\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/helm/kubewatch/README.md"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 36,
                  "endLine": 51,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\n| Name                      | Description                                     | Value |\n| ------------------------- | ----------------------------------------------- | ----- |\n| `global.imageRegistry`    | Global Docker image registry                    | `\"\"`  |\n| `global.imagePullSecrets` | Global Docker registry secret names as an array | `[]`  |\n\n\n",
                    "rendered": {
                      "text": "\n| Name                      | Description                                     | Value |\n| ------------------------- | ----------------------------------------------- | ----- |\n| `global.imageRegistry`    | Global Docker image registry                    | `\"\"`  |\n| `global.imagePullSecrets` | Global Docker registry secret names as an array | `[]`  |\n\n\n",
                      "markdown": "`\n| Name                      | Description                                     | Value |\n| ------------------------- | ----------------------------------------------- | ----- |\n| `global.imageRegistry`    | Global Docker image registry                    | `\"\"`  |\n| `global.imagePullSecrets` | Global Docker registry secret names as an array | `[]`  |\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/flock/flock.go"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 55,
                  "endLine": 99,
                  "endColumn": 59,
                  "snippet": {
                    "text": "\t\treturn\n\t}\n\n\tlogrus.Printf(\"Message successfully sent to channel %s at %s\", f.Url, time.Now())\n}\n\nfunc checkMissingFlockVars(s *Flock) error {\n",
                    "rendered": {
                      "text": "\t\treturn\n\t}\n\n\tlogrus.Printf(\"Message successfully sent to channel %s at %s\", f.Url, time.Now())\n}\n\nfunc checkMissingFlockVars(s *Flock) error {\n",
                      "markdown": "`\t\treturn\n\t}\n\n\tlogrus.Printf(\"Message successfully sent to channel %s at %s\", f.Url, time.Now())\n}\n\nfunc checkMissingFlockVars(s *Flock) error {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/flock/flock.go"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 41,
                  "endLine": 104,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\nfunc checkMissingFlockVars(s *Flock) error {\n\tif s.Url == \"\" {\n\t\treturn fmt.Errorf(flockErrMsg, \"Missing Flock url\")\n\t}\n\n\treturn nil\n",
                    "rendered": {
                      "text": "\nfunc checkMissingFlockVars(s *Flock) error {\n\tif s.Url == \"\" {\n\t\treturn fmt.Errorf(flockErrMsg, \"Missing Flock url\")\n\t}\n\n\treturn nil\n",
                      "markdown": "`\nfunc checkMissingFlockVars(s *Flock) error {\n\tif s.Url == \"\" {\n\t\treturn fmt.Errorf(flockErrMsg, \"Missing Flock url\")\n\t}\n\n\treturn nil\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/flock/flock.go"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 16,
                  "endLine": 76,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\tFlockml string `json:\"flockml\"`\n}\n\n// Init prepares Flock configuration\nfunc (f *Flock) Init(c *config.Config) error {\n\turl := c.Handler.Flock.Url\n\n",
                    "rendered": {
                      "text": "\tFlockml string `json:\"flockml\"`\n}\n\n// Init prepares Flock configuration\nfunc (f *Flock) Init(c *config.Config) error {\n\turl := c.Handler.Flock.Url\n\n",
                      "markdown": "`\tFlockml string `json:\"flockml\"`\n}\n\n// Init prepares Flock configuration\nfunc (f *Flock) Init(c *config.Config) error {\n\turl := c.Handler.Flock.Url\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/flock/flock.go"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 4,
                  "endLine": 53,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n// Flock handler implements handler.Handler interface,\n// Notify event to Flock channel\ntype Flock struct {\n\tUrl string\n}\n\n",
                    "rendered": {
                      "text": "\n// Flock handler implements handler.Handler interface,\n// Notify event to Flock channel\ntype Flock struct {\n\tUrl string\n}\n\n",
                      "markdown": "`\n// Flock handler implements handler.Handler interface,\n// Notify event to Flock channel\ntype Flock struct {\n\tUrl string\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/flock/flock.go"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 18,
                  "endLine": 52,
                  "endColumn": 25,
                  "snippet": {
                    "text": "`\n\n// Flock handler implements handler.Handler interface,\n// Notify event to Flock channel\ntype Flock struct {\n\tUrl string\n}\n",
                    "rendered": {
                      "text": "`\n\n// Flock handler implements handler.Handler interface,\n// Notify event to Flock channel\ntype Flock struct {\n\tUrl string\n}\n",
                      "markdown": "``\n\n// Flock handler implements handler.Handler interface,\n// Notify event to Flock channel\ntype Flock struct {\n\tUrl string\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/flock/flock.go"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 2,
                  "endLine": 51,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n`\n\n// Flock handler implements handler.Handler interface,\n// Notify event to Flock channel\ntype Flock struct {\n\tUrl string\n",
                    "rendered": {
                      "text": "\n`\n\n// Flock handler implements handler.Handler interface,\n// Notify event to Flock channel\ntype Flock struct {\n\tUrl string\n",
                      "markdown": "`\n`\n\n// Flock handler implements handler.Handler interface,\n// Notify event to Flock channel\ntype Flock struct {\n\tUrl string\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/flock/flock.go"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 29,
                  "endLine": 42,
                  "endColumn": 36,
                  "snippet": {
                    "text": "var flockErrMsg = `\n%s\n\nYou need to set Flock url for Flock notify,\nusing \"--url/-u\" or using environment variables:\n\nexport KW_FLOCK_URL=flock_url\n",
                    "rendered": {
                      "text": "var flockErrMsg = `\n%s\n\nYou need to set Flock url for Flock notify,\nusing \"--url/-u\" or using environment variables:\n\nexport KW_FLOCK_URL=flock_url\n",
                      "markdown": "`var flockErrMsg = `\n%s\n\nYou need to set Flock url for Flock notify,\nusing \"--url/-u\" or using environment variables:\n\nexport KW_FLOCK_URL=flock_url\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/flock/flock.go"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 15,
                  "endLine": 42,
                  "endColumn": 22,
                  "snippet": {
                    "text": "var flockErrMsg = `\n%s\n\nYou need to set Flock url for Flock notify,\nusing \"--url/-u\" or using environment variables:\n\nexport KW_FLOCK_URL=flock_url\n",
                    "rendered": {
                      "text": "var flockErrMsg = `\n%s\n\nYou need to set Flock url for Flock notify,\nusing \"--url/-u\" or using environment variables:\n\nexport KW_FLOCK_URL=flock_url\n",
                      "markdown": "`var flockErrMsg = `\n%s\n\nYou need to set Flock url for Flock notify,\nusing \"--url/-u\" or using environment variables:\n\nexport KW_FLOCK_URL=flock_url\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/flock/flock.go"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 7,
                  "endLine": 18,
                  "snippet": {
                    "text": "limitations under the License.\n*/\n\npackage flock\n\nimport (\n\t\"fmt\"\n\t\"github.com/sirupsen/logrus\"\n",
                    "rendered": {
                      "text": "limitations under the License.\n*/\n\npackage flock\n\nimport (\n\t\"fmt\"\n\t\"github.com/sirupsen/logrus\"\n",
                      "markdown": "`limitations under the License.\n*/\n\npackage flock\n\nimport (\n\t\"fmt\"\n\t\"github.com/sirupsen/logrus\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/flock/flock_test.go"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\texpectedError := fmt.Errorf(flockErrMsg, \"Missing Flock url\")\n\n\tvar Tests = []struct {\n\t\tflock config.Flock\n\t\terr   error\n\t}{\n\t\t{config.Flock{Url: \"foo\"}, nil},\n",
                    "rendered": {
                      "text": "\texpectedError := fmt.Errorf(flockErrMsg, \"Missing Flock url\")\n\n\tvar Tests = []struct {\n\t\tflock config.Flock\n\t\terr   error\n\t}{\n\t\t{config.Flock{Url: \"foo\"}, nil},\n",
                      "markdown": "`\texpectedError := fmt.Errorf(flockErrMsg, \"Missing Flock url\")\n\n\tvar Tests = []struct {\n\t\tflock config.Flock\n\t\terr   error\n\t}{\n\t\t{config.Flock{Url: \"foo\"}, nil},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/flock/flock_test.go"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 50,
                  "endLine": 29,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\nfunc TestFlockInit(t *testing.T) {\n\ts := &Flock{}\n\texpectedError := fmt.Errorf(flockErrMsg, \"Missing Flock url\")\n\n\tvar Tests = []struct {\n\t\tflock config.Flock\n",
                    "rendered": {
                      "text": "\nfunc TestFlockInit(t *testing.T) {\n\ts := &Flock{}\n\texpectedError := fmt.Errorf(flockErrMsg, \"Missing Flock url\")\n\n\tvar Tests = []struct {\n\t\tflock config.Flock\n",
                      "markdown": "`\nfunc TestFlockInit(t *testing.T) {\n\ts := &Flock{}\n\texpectedError := fmt.Errorf(flockErrMsg, \"Missing Flock url\")\n\n\tvar Tests = []struct {\n\t\tflock config.Flock\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/pkg/handlers/flock/flock_test.go"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 7,
                  "endLine": 18,
                  "snippet": {
                    "text": "limitations under the License.\n*/\n\npackage flock\n\nimport (\n\t\"fmt\"\n\t\"reflect\"\n",
                    "rendered": {
                      "text": "limitations under the License.\n*/\n\npackage flock\n\nimport (\n\t\"fmt\"\n\t\"reflect\"\n",
                      "markdown": "`limitations under the License.\n*/\n\npackage flock\n\nimport (\n\t\"fmt\"\n\t\"reflect\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/docs/CONTRIBUTION.md"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 26,
                  "endLine": 18,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\n1. Fork the repo and create your branch from `master`.\n2. If you've added code that should be tested, add tests.\n3. If you've changed APIs, update the documentation.\n4. Ensure the test suite passes.\n5. Make sure your code lints. (by using gofmt tool `gofmt -s -w . `)\n6. Issue that pull request!\n",
                    "rendered": {
                      "text": "\n1. Fork the repo and create your branch from `master`.\n2. If you've added code that should be tested, add tests.\n3. If you've changed APIs, update the documentation.\n4. Ensure the test suite passes.\n5. Make sure your code lints. (by using gofmt tool `gofmt -s -w . `)\n6. Issue that pull request!\n",
                      "markdown": "`\n1. Fork the repo and create your branch from `master`.\n2. If you've added code that should be tested, add tests.\n3. If you've changed APIs, update the documentation.\n4. Ensure the test suite passes.\n5. Make sure your code lints. (by using gofmt tool `gofmt -s -w . `)\n6. Issue that pull request!\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 459,
                  "startColumn": 61,
                  "endLine": 459,
                  "endColumn": 65,
                  "snippet": {
                    "text": "$ kubewatch config test\n\nTesting Handler configs from .kubewatch.yaml\n2019/06/03 12:29:23 Message successfully sent to channel ABCD at 1559545162.000100\n```\n\n## Viewing config\n",
                    "rendered": {
                      "text": "$ kubewatch config test\n\nTesting Handler configs from .kubewatch.yaml\n2019/06/03 12:29:23 Message successfully sent to channel ABCD at 1559545162.000100\n```\n\n## Viewing config\n",
                      "markdown": "`$ kubewatch config test\n\nTesting Handler configs from .kubewatch.yaml\n2019/06/03 12:29:23 Message successfully sent to channel ABCD at 1559545162.000100\n```\n\n## Viewing config\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 381,
                  "startColumn": 26,
                  "endLine": 381,
                  "endColumn": 32,
                  "snippet": {
                    "text": "  $ export KW_SLACK_WEBHOOK_URL=slack_webhook_url\n  ```\n  \n - Example apply done in a bash script:  \n  \n ```console\n $ cat kubewatch-configmap-slackwebhook.yaml | sed \"s|<slackchannel>|\"\\\"$SlackChannel\"\\\"|g;s|<slackusername>|\"\\\"$SlackUsesrName\"\\\"|g;s|<slackemoji>|\"\\\"$SlackEmoji\"\\\"|g;s|<SlackWebhookUrl>|\"\\\"$WebhookUrl\"\\\"|g\" | kubectl create -f -\n",
                    "rendered": {
                      "text": "  $ export KW_SLACK_WEBHOOK_URL=slack_webhook_url\n  ```\n  \n - Example apply done in a bash script:  \n  \n ```console\n $ cat kubewatch-configmap-slackwebhook.yaml | sed \"s|<slackchannel>|\"\\\"$SlackChannel\"\\\"|g;s|<slackusername>|\"\\\"$SlackUsesrName\"\\\"|g;s|<slackemoji>|\"\\\"$SlackEmoji\"\\\"|g;s|<SlackWebhookUrl>|\"\\\"$WebhookUrl\"\\\"|g\" | kubectl create -f -\n",
                      "markdown": "`  $ export KW_SLACK_WEBHOOK_URL=slack_webhook_url\n  ```\n  \n - Example apply done in a bash script:  \n  \n ```console\n $ cat kubewatch-configmap-slackwebhook.yaml | sed \"s|<slackchannel>|\"\\\"$SlackChannel\"\\\"|g;s|<slackusername>|\"\\\"$SlackUsesrName\"\\\"|g;s|<slackemoji>|\"\\\"$SlackEmoji\"\\\"|g;s|<SlackWebhookUrl>|\"\\\"$WebhookUrl\"\\\"|g\" | kubectl create -f -\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 313,
                  "startColumn": 80,
                  "endLine": 313,
                  "endColumn": 84,
                  "snippet": {
                    "text": "\n# Configure\n\nKubewatch supports `config` command for configuration. Config file will be saved at `$HOME/.kubewatch.yaml`\n\n```\n$ kubewatch config -h\n",
                    "rendered": {
                      "text": "\n# Configure\n\nKubewatch supports `config` command for configuration. Config file will be saved at `$HOME/.kubewatch.yaml`\n\n```\n$ kubewatch config -h\n",
                      "markdown": "`\n# Configure\n\nKubewatch supports `config` command for configuration. Config file will be saved at `$HOME/.kubewatch.yaml`\n\n```\n$ kubewatch config -h\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 240,
                  "startColumn": 46,
                  "endLine": 240,
                  "endColumn": 50,
                  "snippet": {
                    "text": "```\n\n#### Metrics\n`kubewatch` runs a Prometheus metrics endpoint at `/metrics` on port `2112` by default. This endpoint can be used to monitor health and the performance of `kubewatch`. \n\nThe `kubewatch_events_total` metric can help track the total number of Kubernetes events, categorized by resource type (e.g., `Pods`, `Deployments`) and event type (e.g., `Create`, `Delete`).\n\n",
                    "rendered": {
                      "text": "```\n\n#### Metrics\n`kubewatch` runs a Prometheus metrics endpoint at `/metrics` on port `2112` by default. This endpoint can be used to monitor health and the performance of `kubewatch`. \n\nThe `kubewatch_events_total` metric can help track the total number of Kubernetes events, categorized by resource type (e.g., `Pods`, `Deployments`) and event type (e.g., `Create`, `Delete`).\n\n",
                      "markdown": "````\n\n#### Metrics\n`kubewatch` runs a Prometheus metrics endpoint at `/metrics` on port `2112` by default. This endpoint can be used to monitor health and the performance of `kubewatch`. \n\nThe `kubewatch_events_total` metric can help track the total number of Kubernetes events, categorized by resource type (e.g., `Pods`, `Deployments`) and event type (e.g., `Create`, `Delete`).\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 86,
                  "endLine": 170,
                  "endColumn": 95,
                  "snippet": {
                    "text": "\n#### Working with RBAC\n\nKubernetes Engine clusters running versions 1.6 or higher introduced Role-Based Access Control (RBAC). We can create `ServiceAccount` for it to work with RBAC.\n\n```console\n$ kubectl create -f kubewatch-service-account.yaml\n",
                    "rendered": {
                      "text": "\n#### Working with RBAC\n\nKubernetes Engine clusters running versions 1.6 or higher introduced Role-Based Access Control (RBAC). We can create `ServiceAccount` for it to work with RBAC.\n\n```console\n$ kubectl create -f kubewatch-service-account.yaml\n",
                      "markdown": "`\n#### Working with RBAC\n\nKubernetes Engine clusters running versions 1.6 or higher introduced Role-Based Access Control (RBAC). We can create `ServiceAccount` for it to work with RBAC.\n\n```console\n$ kubectl create -f kubewatch-service-account.yaml\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 37,
                  "endLine": 140,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n![slack](./docs/slack.png)\n\nTo modify what notifications you get, update the `kubewatch` ConfigMap and turn on and off (true/false) resources or configure any resource of your choosing with customresources (CRDs):\n\n```\nresource:\n",
                    "rendered": {
                      "text": "\n![slack](./docs/slack.png)\n\nTo modify what notifications you get, update the `kubewatch` ConfigMap and turn on and off (true/false) resources or configure any resource of your choosing with customresources (CRDs):\n\n```\nresource:\n",
                      "markdown": "`\n![slack](./docs/slack.png)\n\nTo modify what notifications you get, update the `kubewatch` ConfigMap and turn on and off (true/false) resources or configure any resource of your choosing with customresources (CRDs):\n\n```\nresource:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 151,
                  "endLine": 120,
                  "endColumn": 159,
                  "snippet": {
                    "text": "\nIn order to run kubewatch in a Kubernetes cluster quickly, the easiest way is for you to create a [ConfigMap](https://github.com/robusta-dev/kubewatch/blob/master/kubewatch-configmap.yaml) to hold kubewatch configuration.\n\nAn example is provided at [`kubewatch-configmap.yaml`](https://github.com/robusta-dev/kubewatch/blob/master/kubewatch-configmap.yaml), do not forget to update your own slack channel and token parameters. Alternatively, you could use secrets.\n\nCreate k8s configmap:\n\n",
                    "rendered": {
                      "text": "\nIn order to run kubewatch in a Kubernetes cluster quickly, the easiest way is for you to create a [ConfigMap](https://github.com/robusta-dev/kubewatch/blob/master/kubewatch-configmap.yaml) to hold kubewatch configuration.\n\nAn example is provided at [`kubewatch-configmap.yaml`](https://github.com/robusta-dev/kubewatch/blob/master/kubewatch-configmap.yaml), do not forget to update your own slack channel and token parameters. Alternatively, you could use secrets.\n\nCreate k8s configmap:\n\n",
                      "markdown": "`\nIn order to run kubewatch in a Kubernetes cluster quickly, the easiest way is for you to create a [ConfigMap](https://github.com/robusta-dev/kubewatch/blob/master/kubewatch-configmap.yaml) to hold kubewatch configuration.\n\nAn example is provided at [`kubewatch-configmap.yaml`](https://github.com/robusta-dev/kubewatch/blob/master/kubewatch-configmap.yaml), do not forget to update your own slack channel and token parameters. Alternatively, you could use secrets.\n\nCreate k8s configmap:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 22,
                  "endLine": 120,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\nIn order to run kubewatch in a Kubernetes cluster quickly, the easiest way is for you to create a [ConfigMap](https://github.com/robusta-dev/kubewatch/blob/master/kubewatch-configmap.yaml) to hold kubewatch configuration.\n\nAn example is provided at [`kubewatch-configmap.yaml`](https://github.com/robusta-dev/kubewatch/blob/master/kubewatch-configmap.yaml), do not forget to update your own slack channel and token parameters. Alternatively, you could use secrets.\n\nCreate k8s configmap:\n\n",
                    "rendered": {
                      "text": "\nIn order to run kubewatch in a Kubernetes cluster quickly, the easiest way is for you to create a [ConfigMap](https://github.com/robusta-dev/kubewatch/blob/master/kubewatch-configmap.yaml) to hold kubewatch configuration.\n\nAn example is provided at [`kubewatch-configmap.yaml`](https://github.com/robusta-dev/kubewatch/blob/master/kubewatch-configmap.yaml), do not forget to update your own slack channel and token parameters. Alternatively, you could use secrets.\n\nCreate k8s configmap:\n\n",
                      "markdown": "`\nIn order to run kubewatch in a Kubernetes cluster quickly, the easiest way is for you to create a [ConfigMap](https://github.com/robusta-dev/kubewatch/blob/master/kubewatch-configmap.yaml) to hold kubewatch configuration.\n\nAn example is provided at [`kubewatch-configmap.yaml`](https://github.com/robusta-dev/kubewatch/blob/master/kubewatch-configmap.yaml), do not forget to update your own slack channel and token parameters. Alternatively, you could use secrets.\n\nCreate k8s configmap:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 80,
                  "endLine": 70,
                  "snippet": {
                    "text": "When you have helm installed in your cluster, use the following setup:\n\n```console\nhelm repo add robusta https://robusta-charts.storage.googleapis.com && helm repo update\nhelm install kubewatch robusta/kubewatch --set='rbac.create=true,slack.channel=#YOUR_CHANNEL,slack.token=xoxb-YOUR_TOKEN,resourcesToWatch.pod=true,resourcesToWatch.daemonset=true'\n```\n\nYou may also provide a values file instead:\n",
                    "rendered": {
                      "text": "When you have helm installed in your cluster, use the following setup:\n\n```console\nhelm repo add robusta https://robusta-charts.storage.googleapis.com && helm repo update\nhelm install kubewatch robusta/kubewatch --set='rbac.create=true,slack.channel=#YOUR_CHANNEL,slack.token=xoxb-YOUR_TOKEN,resourcesToWatch.pod=true,resourcesToWatch.daemonset=true'\n```\n\nYou may also provide a values file instead:\n",
                      "markdown": "`When you have helm installed in your cluster, use the following setup:\n\n```console\nhelm repo add robusta https://robusta-charts.storage.googleapis.com && helm repo update\nhelm install kubewatch robusta/kubewatch --set='rbac.create=true,slack.channel=#YOUR_CHANNEL,slack.token=xoxb-YOUR_TOKEN,resourcesToWatch.pod=true,resourcesToWatch.daemonset=true'\n```\n\nYou may also provide a values file instead:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 642,
                  "startColumn": 1,
                  "endLine": 642,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n```console\n$ make docker-image\n$ docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED              SIZE\nkubewatch           latest              919896d3cd90        3 minutes ago       27.9MB\n```\n",
                    "rendered": {
                      "text": "\n```console\n$ make docker-image\n$ docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED              SIZE\nkubewatch           latest              919896d3cd90        3 minutes ago       27.9MB\n```\n",
                      "markdown": "`\n```console\n$ make docker-image\n$ docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED              SIZE\nkubewatch           latest              919896d3cd90        3 minutes ago       27.9MB\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 638,
                  "startColumn": 9,
                  "endLine": 639,
                  "snippet": {
                    "text": "- You need to have [Go](http://golang.org) (v1.5 or later)  installed. Make sure to set `$GOPATH`\n\n\n### Using Docker\n\n```console\n$ make docker-image\n$ docker images\n",
                    "rendered": {
                      "text": "- You need to have [Go](http://golang.org) (v1.5 or later)  installed. Make sure to set `$GOPATH`\n\n\n### Using Docker\n\n```console\n$ make docker-image\n$ docker images\n",
                      "markdown": "`- You need to have [Go](http://golang.org) (v1.5 or later)  installed. Make sure to set `$GOPATH`\n\n\n### Using Docker\n\n```console\n$ make docker-image\n$ docker images\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 621,
                  "startColumn": 1,
                  "endLine": 621,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nClone the repository anywhere:\n```console\n$ git clone https://github.com/bitnami-labs/kubewatch.git\n$ cd kubewatch\n$ go build\n```\n",
                    "rendered": {
                      "text": "\nClone the repository anywhere:\n```console\n$ git clone https://github.com/bitnami-labs/kubewatch.git\n$ cd kubewatch\n$ go build\n```\n",
                      "markdown": "`\nClone the repository anywhere:\n```console\n$ git clone https://github.com/bitnami-labs/kubewatch.git\n$ cd kubewatch\n$ go build\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 581,
                  "startColumn": 31,
                  "endLine": 581,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      --sa                      watch for service accounts\n      --secret                  watch for plain secrets\n      --svc                     watch for services\n      --coreevent               watch for events from the kubernetes core api. (Old events api, replaced in kubernetes 1.19)\n\n```\n\n",
                    "rendered": {
                      "text": "      --sa                      watch for service accounts\n      --secret                  watch for plain secrets\n      --svc                     watch for services\n      --coreevent               watch for events from the kubernetes core api. (Old events api, replaced in kubernetes 1.19)\n\n```\n\n",
                      "markdown": "`      --sa                      watch for service accounts\n      --secret                  watch for plain secrets\n      --svc                     watch for services\n      --coreevent               watch for events from the kubernetes core api. (Old events api, replaced in kubernetes 1.19)\n\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 580,
                  "startColumn": 31,
                  "endLine": 580,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      --rs                      watch for replicasets\n      --sa                      watch for service accounts\n      --secret                  watch for plain secrets\n      --svc                     watch for services\n      --coreevent               watch for events from the kubernetes core api. (Old events api, replaced in kubernetes 1.19)\n\n```\n",
                    "rendered": {
                      "text": "      --rs                      watch for replicasets\n      --sa                      watch for service accounts\n      --secret                  watch for plain secrets\n      --svc                     watch for services\n      --coreevent               watch for events from the kubernetes core api. (Old events api, replaced in kubernetes 1.19)\n\n```\n",
                      "markdown": "`      --rs                      watch for replicasets\n      --sa                      watch for service accounts\n      --secret                  watch for plain secrets\n      --svc                     watch for services\n      --coreevent               watch for events from the kubernetes core api. (Old events api, replaced in kubernetes 1.19)\n\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 579,
                  "startColumn": 31,
                  "endLine": 579,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      --rc                      watch for replication controllers\n      --rs                      watch for replicasets\n      --sa                      watch for service accounts\n      --secret                  watch for plain secrets\n      --svc                     watch for services\n      --coreevent               watch for events from the kubernetes core api. (Old events api, replaced in kubernetes 1.19)\n\n",
                    "rendered": {
                      "text": "      --rc                      watch for replication controllers\n      --rs                      watch for replicasets\n      --sa                      watch for service accounts\n      --secret                  watch for plain secrets\n      --svc                     watch for services\n      --coreevent               watch for events from the kubernetes core api. (Old events api, replaced in kubernetes 1.19)\n\n",
                      "markdown": "`      --rc                      watch for replication controllers\n      --rs                      watch for replicasets\n      --sa                      watch for service accounts\n      --secret                  watch for plain secrets\n      --svc                     watch for services\n      --coreevent               watch for events from the kubernetes core api. (Old events api, replaced in kubernetes 1.19)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 578,
                  "startColumn": 41,
                  "endLine": 578,
                  "endColumn": 50,
                  "snippet": {
                    "text": "      --pv                      watch for persistent volumes\n      --rc                      watch for replication controllers\n      --rs                      watch for replicasets\n      --sa                      watch for service accounts\n      --secret                  watch for plain secrets\n      --svc                     watch for services\n      --coreevent               watch for events from the kubernetes core api. (Old events api, replaced in kubernetes 1.19)\n",
                    "rendered": {
                      "text": "      --pv                      watch for persistent volumes\n      --rc                      watch for replication controllers\n      --rs                      watch for replicasets\n      --sa                      watch for service accounts\n      --secret                  watch for plain secrets\n      --svc                     watch for services\n      --coreevent               watch for events from the kubernetes core api. (Old events api, replaced in kubernetes 1.19)\n",
                      "markdown": "`      --pv                      watch for persistent volumes\n      --rc                      watch for replication controllers\n      --rs                      watch for replicasets\n      --sa                      watch for service accounts\n      --secret                  watch for plain secrets\n      --svc                     watch for services\n      --coreevent               watch for events from the kubernetes core api. (Old events api, replaced in kubernetes 1.19)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 578,
                  "startColumn": 31,
                  "endLine": 578,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      --pv                      watch for persistent volumes\n      --rc                      watch for replication controllers\n      --rs                      watch for replicasets\n      --sa                      watch for service accounts\n      --secret                  watch for plain secrets\n      --svc                     watch for services\n      --coreevent               watch for events from the kubernetes core api. (Old events api, replaced in kubernetes 1.19)\n",
                    "rendered": {
                      "text": "      --pv                      watch for persistent volumes\n      --rc                      watch for replication controllers\n      --rs                      watch for replicasets\n      --sa                      watch for service accounts\n      --secret                  watch for plain secrets\n      --svc                     watch for services\n      --coreevent               watch for events from the kubernetes core api. (Old events api, replaced in kubernetes 1.19)\n",
                      "markdown": "`      --pv                      watch for persistent volumes\n      --rc                      watch for replication controllers\n      --rs                      watch for replicasets\n      --sa                      watch for service accounts\n      --secret                  watch for plain secrets\n      --svc                     watch for services\n      --coreevent               watch for events from the kubernetes core api. (Old events api, replaced in kubernetes 1.19)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 577,
                  "startColumn": 31,
                  "endLine": 577,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      --po                      watch for pods\n      --pv                      watch for persistent volumes\n      --rc                      watch for replication controllers\n      --rs                      watch for replicasets\n      --sa                      watch for service accounts\n      --secret                  watch for plain secrets\n      --svc                     watch for services\n",
                    "rendered": {
                      "text": "      --po                      watch for pods\n      --pv                      watch for persistent volumes\n      --rc                      watch for replication controllers\n      --rs                      watch for replicasets\n      --sa                      watch for service accounts\n      --secret                  watch for plain secrets\n      --svc                     watch for services\n",
                      "markdown": "`      --po                      watch for pods\n      --pv                      watch for persistent volumes\n      --rc                      watch for replication controllers\n      --rs                      watch for replicasets\n      --sa                      watch for service accounts\n      --secret                  watch for plain secrets\n      --svc                     watch for services\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 576,
                  "startColumn": 31,
                  "endLine": 576,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      --ns                      watch for namespaces\n      --po                      watch for pods\n      --pv                      watch for persistent volumes\n      --rc                      watch for replication controllers\n      --rs                      watch for replicasets\n      --sa                      watch for service accounts\n      --secret                  watch for plain secrets\n",
                    "rendered": {
                      "text": "      --ns                      watch for namespaces\n      --po                      watch for pods\n      --pv                      watch for persistent volumes\n      --rc                      watch for replication controllers\n      --rs                      watch for replicasets\n      --sa                      watch for service accounts\n      --secret                  watch for plain secrets\n",
                      "markdown": "`      --ns                      watch for namespaces\n      --po                      watch for pods\n      --pv                      watch for persistent volumes\n      --rc                      watch for replication controllers\n      --rs                      watch for replicasets\n      --sa                      watch for service accounts\n      --secret                  watch for plain secrets\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 575,
                  "startColumn": 31,
                  "endLine": 575,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      --node                    watch for Nodes\n      --ns                      watch for namespaces\n      --po                      watch for pods\n      --pv                      watch for persistent volumes\n      --rc                      watch for replication controllers\n      --rs                      watch for replicasets\n      --sa                      watch for service accounts\n",
                    "rendered": {
                      "text": "      --node                    watch for Nodes\n      --ns                      watch for namespaces\n      --po                      watch for pods\n      --pv                      watch for persistent volumes\n      --rc                      watch for replication controllers\n      --rs                      watch for replicasets\n      --sa                      watch for service accounts\n",
                      "markdown": "`      --node                    watch for Nodes\n      --ns                      watch for namespaces\n      --po                      watch for pods\n      --pv                      watch for persistent volumes\n      --rc                      watch for replication controllers\n      --rs                      watch for replicasets\n      --sa                      watch for service accounts\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 574,
                  "startColumn": 31,
                  "endLine": 574,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      --job                     watch for jobs\n      --node                    watch for Nodes\n      --ns                      watch for namespaces\n      --po                      watch for pods\n      --pv                      watch for persistent volumes\n      --rc                      watch for replication controllers\n      --rs                      watch for replicasets\n",
                    "rendered": {
                      "text": "      --job                     watch for jobs\n      --node                    watch for Nodes\n      --ns                      watch for namespaces\n      --po                      watch for pods\n      --pv                      watch for persistent volumes\n      --rc                      watch for replication controllers\n      --rs                      watch for replicasets\n",
                      "markdown": "`      --job                     watch for jobs\n      --node                    watch for Nodes\n      --ns                      watch for namespaces\n      --po                      watch for pods\n      --pv                      watch for persistent volumes\n      --rc                      watch for replication controllers\n      --rs                      watch for replicasets\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 573,
                  "startColumn": 31,
                  "endLine": 573,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      --ing                     watch for ingresses\n      --job                     watch for jobs\n      --node                    watch for Nodes\n      --ns                      watch for namespaces\n      --po                      watch for pods\n      --pv                      watch for persistent volumes\n      --rc                      watch for replication controllers\n",
                    "rendered": {
                      "text": "      --ing                     watch for ingresses\n      --job                     watch for jobs\n      --node                    watch for Nodes\n      --ns                      watch for namespaces\n      --po                      watch for pods\n      --pv                      watch for persistent volumes\n      --rc                      watch for replication controllers\n",
                      "markdown": "`      --ing                     watch for ingresses\n      --job                     watch for jobs\n      --node                    watch for Nodes\n      --ns                      watch for namespaces\n      --po                      watch for pods\n      --pv                      watch for persistent volumes\n      --rc                      watch for replication controllers\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 572,
                  "startColumn": 31,
                  "endLine": 572,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      --ds                      watch for daemonsets\n      --ing                     watch for ingresses\n      --job                     watch for jobs\n      --node                    watch for Nodes\n      --ns                      watch for namespaces\n      --po                      watch for pods\n      --pv                      watch for persistent volumes\n",
                    "rendered": {
                      "text": "      --ds                      watch for daemonsets\n      --ing                     watch for ingresses\n      --job                     watch for jobs\n      --node                    watch for Nodes\n      --ns                      watch for namespaces\n      --po                      watch for pods\n      --pv                      watch for persistent volumes\n",
                      "markdown": "`      --ds                      watch for daemonsets\n      --ing                     watch for ingresses\n      --job                     watch for jobs\n      --node                    watch for Nodes\n      --ns                      watch for namespaces\n      --po                      watch for pods\n      --pv                      watch for persistent volumes\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 571,
                  "startColumn": 31,
                  "endLine": 571,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      --deploy                  watch for deployments\n      --ds                      watch for daemonsets\n      --ing                     watch for ingresses\n      --job                     watch for jobs\n      --node                    watch for Nodes\n      --ns                      watch for namespaces\n      --po                      watch for pods\n",
                    "rendered": {
                      "text": "      --deploy                  watch for deployments\n      --ds                      watch for daemonsets\n      --ing                     watch for ingresses\n      --job                     watch for jobs\n      --node                    watch for Nodes\n      --ns                      watch for namespaces\n      --po                      watch for pods\n",
                      "markdown": "`      --deploy                  watch for deployments\n      --ds                      watch for daemonsets\n      --ing                     watch for ingresses\n      --job                     watch for jobs\n      --node                    watch for Nodes\n      --ns                      watch for namespaces\n      --po                      watch for pods\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 570,
                  "startColumn": 31,
                  "endLine": 570,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      --cm                      watch for plain configmaps\n      --deploy                  watch for deployments\n      --ds                      watch for daemonsets\n      --ing                     watch for ingresses\n      --job                     watch for jobs\n      --node                    watch for Nodes\n      --ns                      watch for namespaces\n",
                    "rendered": {
                      "text": "      --cm                      watch for plain configmaps\n      --deploy                  watch for deployments\n      --ds                      watch for daemonsets\n      --ing                     watch for ingresses\n      --job                     watch for jobs\n      --node                    watch for Nodes\n      --ns                      watch for namespaces\n",
                      "markdown": "`      --cm                      watch for plain configmaps\n      --deploy                  watch for deployments\n      --ds                      watch for daemonsets\n      --ing                     watch for ingresses\n      --job                     watch for jobs\n      --node                    watch for Nodes\n      --ns                      watch for namespaces\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 569,
                  "startColumn": 31,
                  "endLine": 569,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      --clusterrolebinding      watch for cluster role bindings\n      --cm                      watch for plain configmaps\n      --deploy                  watch for deployments\n      --ds                      watch for daemonsets\n      --ing                     watch for ingresses\n      --job                     watch for jobs\n      --node                    watch for Nodes\n",
                    "rendered": {
                      "text": "      --clusterrolebinding      watch for cluster role bindings\n      --cm                      watch for plain configmaps\n      --deploy                  watch for deployments\n      --ds                      watch for daemonsets\n      --ing                     watch for ingresses\n      --job                     watch for jobs\n      --node                    watch for Nodes\n",
                      "markdown": "`      --clusterrolebinding      watch for cluster role bindings\n      --cm                      watch for plain configmaps\n      --deploy                  watch for deployments\n      --ds                      watch for daemonsets\n      --ing                     watch for ingresses\n      --job                     watch for jobs\n      --node                    watch for Nodes\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 568,
                  "startColumn": 31,
                  "endLine": 568,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      --clusterrole             watch for cluster roles\n      --clusterrolebinding      watch for cluster role bindings\n      --cm                      watch for plain configmaps\n      --deploy                  watch for deployments\n      --ds                      watch for daemonsets\n      --ing                     watch for ingresses\n      --job                     watch for jobs\n",
                    "rendered": {
                      "text": "      --clusterrole             watch for cluster roles\n      --clusterrolebinding      watch for cluster role bindings\n      --cm                      watch for plain configmaps\n      --deploy                  watch for deployments\n      --ds                      watch for daemonsets\n      --ing                     watch for ingresses\n      --job                     watch for jobs\n",
                      "markdown": "`      --clusterrole             watch for cluster roles\n      --clusterrolebinding      watch for cluster role bindings\n      --cm                      watch for plain configmaps\n      --deploy                  watch for deployments\n      --ds                      watch for daemonsets\n      --ing                     watch for ingresses\n      --job                     watch for jobs\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 567,
                  "startColumn": 31,
                  "endLine": 567,
                  "endColumn": 38,
                  "snippet": {
                    "text": "Global Flags:\n      --clusterrole             watch for cluster roles\n      --clusterrolebinding      watch for cluster role bindings\n      --cm                      watch for plain configmaps\n      --deploy                  watch for deployments\n      --ds                      watch for daemonsets\n      --ing                     watch for ingresses\n",
                    "rendered": {
                      "text": "Global Flags:\n      --clusterrole             watch for cluster roles\n      --clusterrolebinding      watch for cluster role bindings\n      --cm                      watch for plain configmaps\n      --deploy                  watch for deployments\n      --ds                      watch for daemonsets\n      --ing                     watch for ingresses\n",
                      "markdown": "`Global Flags:\n      --clusterrole             watch for cluster roles\n      --clusterrolebinding      watch for cluster role bindings\n      --cm                      watch for plain configmaps\n      --deploy                  watch for deployments\n      --ds                      watch for daemonsets\n      --ing                     watch for ingresses\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 566,
                  "startColumn": 31,
                  "endLine": 566,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\nGlobal Flags:\n      --clusterrole             watch for cluster roles\n      --clusterrolebinding      watch for cluster role bindings\n      --cm                      watch for plain configmaps\n      --deploy                  watch for deployments\n      --ds                      watch for daemonsets\n",
                    "rendered": {
                      "text": "\nGlobal Flags:\n      --clusterrole             watch for cluster roles\n      --clusterrolebinding      watch for cluster role bindings\n      --cm                      watch for plain configmaps\n      --deploy                  watch for deployments\n      --ds                      watch for daemonsets\n",
                      "markdown": "`\nGlobal Flags:\n      --clusterrole             watch for cluster roles\n      --clusterrolebinding      watch for cluster role bindings\n      --cm                      watch for plain configmaps\n      --deploy                  watch for deployments\n      --ds                      watch for daemonsets\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 565,
                  "startColumn": 31,
                  "endLine": 565,
                  "endColumn": 38,
                  "snippet": {
                    "text": "  -h, --help   help for add\n\nGlobal Flags:\n      --clusterrole             watch for cluster roles\n      --clusterrolebinding      watch for cluster role bindings\n      --cm                      watch for plain configmaps\n      --deploy                  watch for deployments\n",
                    "rendered": {
                      "text": "  -h, --help   help for add\n\nGlobal Flags:\n      --clusterrole             watch for cluster roles\n      --clusterrolebinding      watch for cluster role bindings\n      --cm                      watch for plain configmaps\n      --deploy                  watch for deployments\n",
                      "markdown": "`  -h, --help   help for add\n\nGlobal Flags:\n      --clusterrole             watch for cluster roles\n      --clusterrolebinding      watch for cluster role bindings\n      --cm                      watch for plain configmaps\n      --deploy                  watch for deployments\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 546,
                  "startColumn": 31,
                  "endLine": 546,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      --sa                      watch for service accounts\n      --secret                  watch for plain secrets\n      --svc                     watch for services\n      --coreevent               watch for events from the kubernetes core api. (Old events api, replaced in kubernetes 1.19)\n\nUse \"kubewatch resource [command] --help\" for more information about a command.\n\n",
                    "rendered": {
                      "text": "      --sa                      watch for service accounts\n      --secret                  watch for plain secrets\n      --svc                     watch for services\n      --coreevent               watch for events from the kubernetes core api. (Old events api, replaced in kubernetes 1.19)\n\nUse \"kubewatch resource [command] --help\" for more information about a command.\n\n",
                      "markdown": "`      --sa                      watch for service accounts\n      --secret                  watch for plain secrets\n      --svc                     watch for services\n      --coreevent               watch for events from the kubernetes core api. (Old events api, replaced in kubernetes 1.19)\n\nUse \"kubewatch resource [command] --help\" for more information about a command.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 545,
                  "startColumn": 31,
                  "endLine": 545,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      --rs                      watch for replicasets\n      --sa                      watch for service accounts\n      --secret                  watch for plain secrets\n      --svc                     watch for services\n      --coreevent               watch for events from the kubernetes core api. (Old events api, replaced in kubernetes 1.19)\n\nUse \"kubewatch resource [command] --help\" for more information about a command.\n",
                    "rendered": {
                      "text": "      --rs                      watch for replicasets\n      --sa                      watch for service accounts\n      --secret                  watch for plain secrets\n      --svc                     watch for services\n      --coreevent               watch for events from the kubernetes core api. (Old events api, replaced in kubernetes 1.19)\n\nUse \"kubewatch resource [command] --help\" for more information about a command.\n",
                      "markdown": "`      --rs                      watch for replicasets\n      --sa                      watch for service accounts\n      --secret                  watch for plain secrets\n      --svc                     watch for services\n      --coreevent               watch for events from the kubernetes core api. (Old events api, replaced in kubernetes 1.19)\n\nUse \"kubewatch resource [command] --help\" for more information about a command.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 544,
                  "startColumn": 31,
                  "endLine": 544,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      --rc                      watch for replication controllers\n      --rs                      watch for replicasets\n      --sa                      watch for service accounts\n      --secret                  watch for plain secrets\n      --svc                     watch for services\n      --coreevent               watch for events from the kubernetes core api. (Old events api, replaced in kubernetes 1.19)\n\n",
                    "rendered": {
                      "text": "      --rc                      watch for replication controllers\n      --rs                      watch for replicasets\n      --sa                      watch for service accounts\n      --secret                  watch for plain secrets\n      --svc                     watch for services\n      --coreevent               watch for events from the kubernetes core api. (Old events api, replaced in kubernetes 1.19)\n\n",
                      "markdown": "`      --rc                      watch for replication controllers\n      --rs                      watch for replicasets\n      --sa                      watch for service accounts\n      --secret                  watch for plain secrets\n      --svc                     watch for services\n      --coreevent               watch for events from the kubernetes core api. (Old events api, replaced in kubernetes 1.19)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 543,
                  "startColumn": 41,
                  "endLine": 543,
                  "endColumn": 50,
                  "snippet": {
                    "text": "      --pv                      watch for persistent volumes\n      --rc                      watch for replication controllers\n      --rs                      watch for replicasets\n      --sa                      watch for service accounts\n      --secret                  watch for plain secrets\n      --svc                     watch for services\n      --coreevent               watch for events from the kubernetes core api. (Old events api, replaced in kubernetes 1.19)\n",
                    "rendered": {
                      "text": "      --pv                      watch for persistent volumes\n      --rc                      watch for replication controllers\n      --rs                      watch for replicasets\n      --sa                      watch for service accounts\n      --secret                  watch for plain secrets\n      --svc                     watch for services\n      --coreevent               watch for events from the kubernetes core api. (Old events api, replaced in kubernetes 1.19)\n",
                      "markdown": "`      --pv                      watch for persistent volumes\n      --rc                      watch for replication controllers\n      --rs                      watch for replicasets\n      --sa                      watch for service accounts\n      --secret                  watch for plain secrets\n      --svc                     watch for services\n      --coreevent               watch for events from the kubernetes core api. (Old events api, replaced in kubernetes 1.19)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 543,
                  "startColumn": 31,
                  "endLine": 543,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      --pv                      watch for persistent volumes\n      --rc                      watch for replication controllers\n      --rs                      watch for replicasets\n      --sa                      watch for service accounts\n      --secret                  watch for plain secrets\n      --svc                     watch for services\n      --coreevent               watch for events from the kubernetes core api. (Old events api, replaced in kubernetes 1.19)\n",
                    "rendered": {
                      "text": "      --pv                      watch for persistent volumes\n      --rc                      watch for replication controllers\n      --rs                      watch for replicasets\n      --sa                      watch for service accounts\n      --secret                  watch for plain secrets\n      --svc                     watch for services\n      --coreevent               watch for events from the kubernetes core api. (Old events api, replaced in kubernetes 1.19)\n",
                      "markdown": "`      --pv                      watch for persistent volumes\n      --rc                      watch for replication controllers\n      --rs                      watch for replicasets\n      --sa                      watch for service accounts\n      --secret                  watch for plain secrets\n      --svc                     watch for services\n      --coreevent               watch for events from the kubernetes core api. (Old events api, replaced in kubernetes 1.19)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 542,
                  "startColumn": 31,
                  "endLine": 542,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      --po                      watch for pods\n      --pv                      watch for persistent volumes\n      --rc                      watch for replication controllers\n      --rs                      watch for replicasets\n      --sa                      watch for service accounts\n      --secret                  watch for plain secrets\n      --svc                     watch for services\n",
                    "rendered": {
                      "text": "      --po                      watch for pods\n      --pv                      watch for persistent volumes\n      --rc                      watch for replication controllers\n      --rs                      watch for replicasets\n      --sa                      watch for service accounts\n      --secret                  watch for plain secrets\n      --svc                     watch for services\n",
                      "markdown": "`      --po                      watch for pods\n      --pv                      watch for persistent volumes\n      --rc                      watch for replication controllers\n      --rs                      watch for replicasets\n      --sa                      watch for service accounts\n      --secret                  watch for plain secrets\n      --svc                     watch for services\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 541,
                  "startColumn": 31,
                  "endLine": 541,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      --ns                      watch for namespaces\n      --po                      watch for pods\n      --pv                      watch for persistent volumes\n      --rc                      watch for replication controllers\n      --rs                      watch for replicasets\n      --sa                      watch for service accounts\n      --secret                  watch for plain secrets\n",
                    "rendered": {
                      "text": "      --ns                      watch for namespaces\n      --po                      watch for pods\n      --pv                      watch for persistent volumes\n      --rc                      watch for replication controllers\n      --rs                      watch for replicasets\n      --sa                      watch for service accounts\n      --secret                  watch for plain secrets\n",
                      "markdown": "`      --ns                      watch for namespaces\n      --po                      watch for pods\n      --pv                      watch for persistent volumes\n      --rc                      watch for replication controllers\n      --rs                      watch for replicasets\n      --sa                      watch for service accounts\n      --secret                  watch for plain secrets\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 540,
                  "startColumn": 31,
                  "endLine": 540,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      --node                    watch for Nodes\n      --ns                      watch for namespaces\n      --po                      watch for pods\n      --pv                      watch for persistent volumes\n      --rc                      watch for replication controllers\n      --rs                      watch for replicasets\n      --sa                      watch for service accounts\n",
                    "rendered": {
                      "text": "      --node                    watch for Nodes\n      --ns                      watch for namespaces\n      --po                      watch for pods\n      --pv                      watch for persistent volumes\n      --rc                      watch for replication controllers\n      --rs                      watch for replicasets\n      --sa                      watch for service accounts\n",
                      "markdown": "`      --node                    watch for Nodes\n      --ns                      watch for namespaces\n      --po                      watch for pods\n      --pv                      watch for persistent volumes\n      --rc                      watch for replication controllers\n      --rs                      watch for replicasets\n      --sa                      watch for service accounts\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 539,
                  "startColumn": 31,
                  "endLine": 539,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      --job                     watch for jobs\n      --node                    watch for Nodes\n      --ns                      watch for namespaces\n      --po                      watch for pods\n      --pv                      watch for persistent volumes\n      --rc                      watch for replication controllers\n      --rs                      watch for replicasets\n",
                    "rendered": {
                      "text": "      --job                     watch for jobs\n      --node                    watch for Nodes\n      --ns                      watch for namespaces\n      --po                      watch for pods\n      --pv                      watch for persistent volumes\n      --rc                      watch for replication controllers\n      --rs                      watch for replicasets\n",
                      "markdown": "`      --job                     watch for jobs\n      --node                    watch for Nodes\n      --ns                      watch for namespaces\n      --po                      watch for pods\n      --pv                      watch for persistent volumes\n      --rc                      watch for replication controllers\n      --rs                      watch for replicasets\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 538,
                  "startColumn": 31,
                  "endLine": 538,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      --ing                     watch for ingresses\n      --job                     watch for jobs\n      --node                    watch for Nodes\n      --ns                      watch for namespaces\n      --po                      watch for pods\n      --pv                      watch for persistent volumes\n      --rc                      watch for replication controllers\n",
                    "rendered": {
                      "text": "      --ing                     watch for ingresses\n      --job                     watch for jobs\n      --node                    watch for Nodes\n      --ns                      watch for namespaces\n      --po                      watch for pods\n      --pv                      watch for persistent volumes\n      --rc                      watch for replication controllers\n",
                      "markdown": "`      --ing                     watch for ingresses\n      --job                     watch for jobs\n      --node                    watch for Nodes\n      --ns                      watch for namespaces\n      --po                      watch for pods\n      --pv                      watch for persistent volumes\n      --rc                      watch for replication controllers\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 537,
                  "startColumn": 31,
                  "endLine": 537,
                  "endColumn": 38,
                  "snippet": {
                    "text": "  -h, --help                    help for resource\n      --ing                     watch for ingresses\n      --job                     watch for jobs\n      --node                    watch for Nodes\n      --ns                      watch for namespaces\n      --po                      watch for pods\n      --pv                      watch for persistent volumes\n",
                    "rendered": {
                      "text": "  -h, --help                    help for resource\n      --ing                     watch for ingresses\n      --job                     watch for jobs\n      --node                    watch for Nodes\n      --ns                      watch for namespaces\n      --po                      watch for pods\n      --pv                      watch for persistent volumes\n",
                      "markdown": "`  -h, --help                    help for resource\n      --ing                     watch for ingresses\n      --job                     watch for jobs\n      --node                    watch for Nodes\n      --ns                      watch for namespaces\n      --po                      watch for pods\n      --pv                      watch for persistent volumes\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 536,
                  "startColumn": 31,
                  "endLine": 536,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      --ds                      watch for daemonsets\n  -h, --help                    help for resource\n      --ing                     watch for ingresses\n      --job                     watch for jobs\n      --node                    watch for Nodes\n      --ns                      watch for namespaces\n      --po                      watch for pods\n",
                    "rendered": {
                      "text": "      --ds                      watch for daemonsets\n  -h, --help                    help for resource\n      --ing                     watch for ingresses\n      --job                     watch for jobs\n      --node                    watch for Nodes\n      --ns                      watch for namespaces\n      --po                      watch for pods\n",
                      "markdown": "`      --ds                      watch for daemonsets\n  -h, --help                    help for resource\n      --ing                     watch for ingresses\n      --job                     watch for jobs\n      --node                    watch for Nodes\n      --ns                      watch for namespaces\n      --po                      watch for pods\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 535,
                  "startColumn": 31,
                  "endLine": 535,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      --deploy                  watch for deployments\n      --ds                      watch for daemonsets\n  -h, --help                    help for resource\n      --ing                     watch for ingresses\n      --job                     watch for jobs\n      --node                    watch for Nodes\n      --ns                      watch for namespaces\n",
                    "rendered": {
                      "text": "      --deploy                  watch for deployments\n      --ds                      watch for daemonsets\n  -h, --help                    help for resource\n      --ing                     watch for ingresses\n      --job                     watch for jobs\n      --node                    watch for Nodes\n      --ns                      watch for namespaces\n",
                      "markdown": "`      --deploy                  watch for deployments\n      --ds                      watch for daemonsets\n  -h, --help                    help for resource\n      --ing                     watch for ingresses\n      --job                     watch for jobs\n      --node                    watch for Nodes\n      --ns                      watch for namespaces\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 533,
                  "startColumn": 31,
                  "endLine": 533,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      --clusterrole             watch for cluster roles\n      --cm                      watch for plain configmaps\n      --deploy                  watch for deployments\n      --ds                      watch for daemonsets\n  -h, --help                    help for resource\n      --ing                     watch for ingresses\n      --job                     watch for jobs\n",
                    "rendered": {
                      "text": "      --clusterrole             watch for cluster roles\n      --cm                      watch for plain configmaps\n      --deploy                  watch for deployments\n      --ds                      watch for daemonsets\n  -h, --help                    help for resource\n      --ing                     watch for ingresses\n      --job                     watch for jobs\n",
                      "markdown": "`      --clusterrole             watch for cluster roles\n      --cm                      watch for plain configmaps\n      --deploy                  watch for deployments\n      --ds                      watch for daemonsets\n  -h, --help                    help for resource\n      --ing                     watch for ingresses\n      --job                     watch for jobs\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 532,
                  "startColumn": 31,
                  "endLine": 532,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      --clusterrolebinding      watch for cluster role bindings\n      --clusterrole             watch for cluster roles\n      --cm                      watch for plain configmaps\n      --deploy                  watch for deployments\n      --ds                      watch for daemonsets\n  -h, --help                    help for resource\n      --ing                     watch for ingresses\n",
                    "rendered": {
                      "text": "      --clusterrolebinding      watch for cluster role bindings\n      --clusterrole             watch for cluster roles\n      --cm                      watch for plain configmaps\n      --deploy                  watch for deployments\n      --ds                      watch for daemonsets\n  -h, --help                    help for resource\n      --ing                     watch for ingresses\n",
                      "markdown": "`      --clusterrolebinding      watch for cluster role bindings\n      --clusterrole             watch for cluster roles\n      --cm                      watch for plain configmaps\n      --deploy                  watch for deployments\n      --ds                      watch for daemonsets\n  -h, --help                    help for resource\n      --ing                     watch for ingresses\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 531,
                  "startColumn": 31,
                  "endLine": 531,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      \n      --clusterrolebinding      watch for cluster role bindings\n      --clusterrole             watch for cluster roles\n      --cm                      watch for plain configmaps\n      --deploy                  watch for deployments\n      --ds                      watch for daemonsets\n  -h, --help                    help for resource\n",
                    "rendered": {
                      "text": "      \n      --clusterrolebinding      watch for cluster role bindings\n      --clusterrole             watch for cluster roles\n      --cm                      watch for plain configmaps\n      --deploy                  watch for deployments\n      --ds                      watch for daemonsets\n  -h, --help                    help for resource\n",
                      "markdown": "`      \n      --clusterrolebinding      watch for cluster role bindings\n      --clusterrole             watch for cluster roles\n      --cm                      watch for plain configmaps\n      --deploy                  watch for deployments\n      --ds                      watch for daemonsets\n  -h, --help                    help for resource\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 530,
                  "startColumn": 31,
                  "endLine": 530,
                  "endColumn": 38,
                  "snippet": {
                    "text": "Flags:\n      \n      --clusterrolebinding      watch for cluster role bindings\n      --clusterrole             watch for cluster roles\n      --cm                      watch for plain configmaps\n      --deploy                  watch for deployments\n      --ds                      watch for daemonsets\n",
                    "rendered": {
                      "text": "Flags:\n      \n      --clusterrolebinding      watch for cluster role bindings\n      --clusterrole             watch for cluster roles\n      --cm                      watch for plain configmaps\n      --deploy                  watch for deployments\n      --ds                      watch for daemonsets\n",
                      "markdown": "`Flags:\n      \n      --clusterrolebinding      watch for cluster role bindings\n      --clusterrole             watch for cluster roles\n      --cm                      watch for plain configmaps\n      --deploy                  watch for deployments\n      --ds                      watch for daemonsets\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 529,
                  "startColumn": 31,
                  "endLine": 529,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\nFlags:\n      \n      --clusterrolebinding      watch for cluster role bindings\n      --clusterrole             watch for cluster roles\n      --cm                      watch for plain configmaps\n      --deploy                  watch for deployments\n",
                    "rendered": {
                      "text": "\nFlags:\n      \n      --clusterrolebinding      watch for cluster role bindings\n      --clusterrole             watch for cluster roles\n      --cm                      watch for plain configmaps\n      --deploy                  watch for deployments\n",
                      "markdown": "`\nFlags:\n      \n      --clusterrolebinding      watch for cluster role bindings\n      --clusterrole             watch for cluster roles\n      --cm                      watch for plain configmaps\n      --deploy                  watch for deployments\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 432,
                  "startColumn": 43,
                  "endLine": 432,
                  "endColumn": 50,
                  "snippet": {
                    "text": "  ```console\n  $ kubewatch config add flock --url <flock_webhook_url>\n  ```\n  You have an altenative choice to set your FLOCK URL\n\n  ```console\n  $ export KW_FLOCK_URL='https://api.flock.com/hooks/sendMessage/XXXXXXXX'\n",
                    "rendered": {
                      "text": "  ```console\n  $ kubewatch config add flock --url <flock_webhook_url>\n  ```\n  You have an altenative choice to set your FLOCK URL\n\n  ```console\n  $ export KW_FLOCK_URL='https://api.flock.com/hooks/sendMessage/XXXXXXXX'\n",
                      "markdown": "`  ```console\n  $ kubewatch config add flock --url <flock_webhook_url>\n  ```\n  You have an altenative choice to set your FLOCK URL\n\n  ```console\n  $ export KW_FLOCK_URL='https://api.flock.com/hooks/sendMessage/XXXXXXXX'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 430,
                  "startColumn": 24,
                  "endLine": 430,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\n- Add flock webhook url to config using the following command.\n  ```console\n  $ kubewatch config add flock --url <flock_webhook_url>\n  ```\n  You have an altenative choice to set your FLOCK URL\n\n",
                    "rendered": {
                      "text": "\n- Add flock webhook url to config using the following command.\n  ```console\n  $ kubewatch config add flock --url <flock_webhook_url>\n  ```\n  You have an altenative choice to set your FLOCK URL\n\n",
                      "markdown": "`\n- Add flock webhook url to config using the following command.\n  ```console\n  $ kubewatch config add flock --url <flock_webhook_url>\n  ```\n  You have an altenative choice to set your FLOCK URL\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 428,
                  "startColumn": 5,
                  "endLine": 428,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n- Create a [flock bot](https://docs.flock.com/display/flockos/Bots).\n\n- Add flock webhook url to config using the following command.\n  ```console\n  $ kubewatch config add flock --url <flock_webhook_url>\n  ```\n",
                    "rendered": {
                      "text": "\n- Create a [flock bot](https://docs.flock.com/display/flockos/Bots).\n\n- Add flock webhook url to config using the following command.\n  ```console\n  $ kubewatch config add flock --url <flock_webhook_url>\n  ```\n",
                      "markdown": "`\n- Create a [flock bot](https://docs.flock.com/display/flockos/Bots).\n\n- Add flock webhook url to config using the following command.\n  ```console\n  $ kubewatch config add flock --url <flock_webhook_url>\n  ```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 384,
                  "startColumn": 46,
                  "endLine": 384,
                  "endColumn": 51,
                  "snippet": {
                    "text": " - Example apply done in a bash script:  \n  \n ```console\n $ cat kubewatch-configmap-slackwebhook.yaml | sed \"s|<slackchannel>|\"\\\"$SlackChannel\"\\\"|g;s|<slackusername>|\"\\\"$SlackUsesrName\"\\\"|g;s|<slackemoji>|\"\\\"$SlackEmoji\"\\\"|g;s|<SlackWebhookUrl>|\"\\\"$WebhookUrl\"\\\"|g\" | kubectl create -f -\n ```\n \n - An example kubewatch-configmap-slackwebhook.yaml YAML File:  \n",
                    "rendered": {
                      "text": " - Example apply done in a bash script:  \n  \n ```console\n $ cat kubewatch-configmap-slackwebhook.yaml | sed \"s|<slackchannel>|\"\\\"$SlackChannel\"\\\"|g;s|<slackusername>|\"\\\"$SlackUsesrName\"\\\"|g;s|<slackemoji>|\"\\\"$SlackEmoji\"\\\"|g;s|<SlackWebhookUrl>|\"\\\"$WebhookUrl\"\\\"|g\" | kubectl create -f -\n ```\n \n - An example kubewatch-configmap-slackwebhook.yaml YAML File:  \n",
                      "markdown": "` - Example apply done in a bash script:  \n  \n ```console\n $ cat kubewatch-configmap-slackwebhook.yaml | sed \"s|<slackchannel>|\"\\\"$SlackChannel\"\\\"|g;s|<slackusername>|\"\\\"$SlackUsesrName\"\\\"|g;s|<slackemoji>|\"\\\"$SlackEmoji\"\\\"|g;s|<SlackWebhookUrl>|\"\\\"$WebhookUrl\"\\\"|g\" | kubectl create -f -\n ```\n \n - An example kubewatch-configmap-slackwebhook.yaml YAML File:  \n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 384,
                  "startColumn": 2,
                  "endLine": 384,
                  "endColumn": 7,
                  "snippet": {
                    "text": " - Example apply done in a bash script:  \n  \n ```console\n $ cat kubewatch-configmap-slackwebhook.yaml | sed \"s|<slackchannel>|\"\\\"$SlackChannel\"\\\"|g;s|<slackusername>|\"\\\"$SlackUsesrName\"\\\"|g;s|<slackemoji>|\"\\\"$SlackEmoji\"\\\"|g;s|<SlackWebhookUrl>|\"\\\"$WebhookUrl\"\\\"|g\" | kubectl create -f -\n ```\n \n - An example kubewatch-configmap-slackwebhook.yaml YAML File:  \n",
                    "rendered": {
                      "text": " - Example apply done in a bash script:  \n  \n ```console\n $ cat kubewatch-configmap-slackwebhook.yaml | sed \"s|<slackchannel>|\"\\\"$SlackChannel\"\\\"|g;s|<slackusername>|\"\\\"$SlackUsesrName\"\\\"|g;s|<slackemoji>|\"\\\"$SlackEmoji\"\\\"|g;s|<SlackWebhookUrl>|\"\\\"$WebhookUrl\"\\\"|g\" | kubectl create -f -\n ```\n \n - An example kubewatch-configmap-slackwebhook.yaml YAML File:  \n",
                      "markdown": "` - Example apply done in a bash script:  \n  \n ```console\n $ cat kubewatch-configmap-slackwebhook.yaml | sed \"s|<slackchannel>|\"\\\"$SlackChannel\"\\\"|g;s|<slackusername>|\"\\\"$SlackUsesrName\"\\\"|g;s|<slackemoji>|\"\\\"$SlackEmoji\"\\\"|g;s|<SlackWebhookUrl>|\"\\\"$WebhookUrl\"\\\"|g\" | kubectl create -f -\n ```\n \n - An example kubewatch-configmap-slackwebhook.yaml YAML File:  \n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 381,
                  "startColumn": 26,
                  "endLine": 381,
                  "endColumn": 32,
                  "snippet": {
                    "text": "  $ export KW_SLACK_WEBHOOK_URL=slack_webhook_url\n  ```\n  \n - Example apply done in a bash script:  \n  \n ```console\n $ cat kubewatch-configmap-slackwebhook.yaml | sed \"s|<slackchannel>|\"\\\"$SlackChannel\"\\\"|g;s|<slackusername>|\"\\\"$SlackUsesrName\"\\\"|g;s|<slackemoji>|\"\\\"$SlackEmoji\"\\\"|g;s|<SlackWebhookUrl>|\"\\\"$WebhookUrl\"\\\"|g\" | kubectl create -f -\n",
                    "rendered": {
                      "text": "  $ export KW_SLACK_WEBHOOK_URL=slack_webhook_url\n  ```\n  \n - Example apply done in a bash script:  \n  \n ```console\n $ cat kubewatch-configmap-slackwebhook.yaml | sed \"s|<slackchannel>|\"\\\"$SlackChannel\"\\\"|g;s|<slackusername>|\"\\\"$SlackUsesrName\"\\\"|g;s|<slackemoji>|\"\\\"$SlackEmoji\"\\\"|g;s|<SlackWebhookUrl>|\"\\\"$WebhookUrl\"\\\"|g\" | kubectl create -f -\n",
                      "markdown": "`  $ export KW_SLACK_WEBHOOK_URL=slack_webhook_url\n  ```\n  \n - Example apply done in a bash script:  \n  \n ```console\n $ cat kubewatch-configmap-slackwebhook.yaml | sed \"s|<slackchannel>|\"\\\"$SlackChannel\"\\\"|g;s|<slackusername>|\"\\\"$SlackUsesrName\"\\\"|g;s|<slackemoji>|\"\\\"$SlackEmoji\"\\\"|g;s|<SlackWebhookUrl>|\"\\\"$WebhookUrl\"\\\"|g\" | kubectl create -f -\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 308,
                  "startColumn": 1,
                  "endLine": 308,
                  "endColumn": 9,
                  "snippet": {
                    "text": "To Demonise Kubewatch container use\n\n```\n$ docker run --rm -d --network host -v $HOME/.kubewatch.yaml:/root/.kubewatch.yaml -v $HOME/.kube/config:/opt/bitnami/kubewatch/.kube/config --name kubewatch-app robustadev/kubewatch\n```\n\n# Configure\n",
                    "rendered": {
                      "text": "To Demonise Kubewatch container use\n\n```\n$ docker run --rm -d --network host -v $HOME/.kubewatch.yaml:/root/.kubewatch.yaml -v $HOME/.kube/config:/opt/bitnami/kubewatch/.kube/config --name kubewatch-app robustadev/kubewatch\n```\n\n# Configure\n",
                      "markdown": "`To Demonise Kubewatch container use\n\n```\n$ docker run --rm -d --network host -v $HOME/.kubewatch.yaml:/root/.kubewatch.yaml -v $HOME/.kube/config:/opt/bitnami/kubewatch/.kube/config --name kubewatch-app robustadev/kubewatch\n```\n\n# Configure\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 291,
                  "startColumn": 1,
                  "endLine": 291,
                  "endColumn": 9,
                  "snippet": {
                    "text": "Example:\n\n```\n$ docker run --rm -it --network host -v $HOME/.kubewatch.yaml:/root/.kubewatch.yaml -v $HOME/.kube/config:/opt/bitnami/kubewatch/.kube/config --name kubewatch-app robustadev/kubewatch\n\n==> Writing config file...\nINFO[0000] Starting kubewatch controller                 pkg=kubewatch-service\n",
                    "rendered": {
                      "text": "Example:\n\n```\n$ docker run --rm -it --network host -v $HOME/.kubewatch.yaml:/root/.kubewatch.yaml -v $HOME/.kube/config:/opt/bitnami/kubewatch/.kube/config --name kubewatch-app robustadev/kubewatch\n\n==> Writing config file...\nINFO[0000] Starting kubewatch controller                 pkg=kubewatch-service\n",
                      "markdown": "`Example:\n\n```\n$ docker run --rm -it --network host -v $HOME/.kubewatch.yaml:/root/.kubewatch.yaml -v $HOME/.kube/config:/opt/bitnami/kubewatch/.kube/config --name kubewatch-app robustadev/kubewatch\n\n==> Writing config file...\nINFO[0000] Starting kubewatch controller                 pkg=kubewatch-service\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 284,
                  "startColumn": 3,
                  "endLine": 285,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\nTo Run Kubewatch Container interactively, place the config file in `$HOME/.kubewatch.yaml` location and use the following command.\n\n```\ndocker run --rm -it --network host -v $HOME/.kubewatch.yaml:/root/.kubewatch.yaml -v $HOME/.kube/config:/opt/bitnami/kubewatch/.kube/config --name <container-name> robustadev/kubewatch\n```\n\nExample:\n",
                    "rendered": {
                      "text": "\nTo Run Kubewatch Container interactively, place the config file in `$HOME/.kubewatch.yaml` location and use the following command.\n\n```\ndocker run --rm -it --network host -v $HOME/.kubewatch.yaml:/root/.kubewatch.yaml -v $HOME/.kube/config:/opt/bitnami/kubewatch/.kube/config --name <container-name> robustadev/kubewatch\n```\n\nExample:\n",
                      "markdown": "`\nTo Run Kubewatch Container interactively, place the config file in `$HOME/.kubewatch.yaml` location and use the following command.\n\n```\ndocker run --rm -it --network host -v $HOME/.kubewatch.yaml:/root/.kubewatch.yaml -v $HOME/.kube/config:/opt/bitnami/kubewatch/.kube/config --name <container-name> robustadev/kubewatch\n```\n\nExample:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 25,
                  "endLine": 196,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n#### Working with CRDs\n`kubewatch` can be configured to monitor Kubernetes Custom Resource Definitions (CRDs), allowing you to receive notifications when changes occur.\nTo configure kubewatch to watch custom resources, you need to define the `customresources` section either in your values file or by using the `--set` flag with Helm commands. \n\nInclude the custom resource configuration in your values file:\n\n",
                    "rendered": {
                      "text": "\n#### Working with CRDs\n`kubewatch` can be configured to monitor Kubernetes Custom Resource Definitions (CRDs), allowing you to receive notifications when changes occur.\nTo configure kubewatch to watch custom resources, you need to define the `customresources` section either in your values file or by using the `--set` flag with Helm commands. \n\nInclude the custom resource configuration in your values file:\n\n",
                      "markdown": "`\n#### Working with CRDs\n`kubewatch` can be configured to monitor Kubernetes Custom Resource Definitions (CRDs), allowing you to receive notifications when changes occur.\nTo configure kubewatch to watch custom resources, you need to define the `customresources` section either in your values file or by using the `--set` flag with Helm commands. \n\nInclude the custom resource configuration in your values file:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 1,
                  "endLine": 185,
                  "endColumn": 6,
                  "snippet": {
                    "text": "Edit `kubewatch.yaml`, and create a new field under `spec` with `serviceAccountName: kubewatch`, you can achieve this by running:\n\n```console\n$ sed -i '/spec:/a\\ \\ serviceAccountName: kubewatch' kubewatch.yaml\n```\n\nThen just create `pod` as usual with:\n",
                    "rendered": {
                      "text": "Edit `kubewatch.yaml`, and create a new field under `spec` with `serviceAccountName: kubewatch`, you can achieve this by running:\n\n```console\n$ sed -i '/spec:/a\\ \\ serviceAccountName: kubewatch' kubewatch.yaml\n```\n\nThen just create `pod` as usual with:\n",
                      "markdown": "`Edit `kubewatch.yaml`, and create a new field under `spec` with `serviceAccountName: kubewatch`, you can achieve this by running:\n\n```console\n$ sed -i '/spec:/a\\ \\ serviceAccountName: kubewatch' kubewatch.yaml\n```\n\nThen just create `pod` as usual with:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/kubewatch.zip/README.md"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 2,
                  "endLine": 41,
                  "snippet": {
                    "text": " - msteams\n - hipchat\n - mattermost\n - flock\n - webhook\n - cloudevent\n - smtp\n\n",
                    "rendered": {
                      "text": " - msteams\n - hipchat\n - mattermost\n - flock\n - webhook\n - cloudevent\n - smtp\n\n",
                      "markdown": "` - msteams\n - hipchat\n - mattermost\n - flock\n - webhook\n - cloudevent\n - smtp\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}