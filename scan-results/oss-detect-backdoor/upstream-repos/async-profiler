{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/jfr/JfrClass.java"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 30,
                  "endLine": 21,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    JfrClass(Map<String, String> attributes) {\n        this.id = Integer.parseInt(attributes.get(\"id\"));\n        this.simpleType = \"true\".equals(attributes.get(\"simpleType\"));\n        this.name = attributes.get(\"name\");\n        this.fields = new ArrayList<>(2);\n    }\n\n",
                    "rendered": {
                      "text": "    JfrClass(Map<String, String> attributes) {\n        this.id = Integer.parseInt(attributes.get(\"id\"));\n        this.simpleType = \"true\".equals(attributes.get(\"simpleType\"));\n        this.name = attributes.get(\"name\");\n        this.fields = new ArrayList<>(2);\n    }\n\n",
                      "markdown": "`    JfrClass(Map<String, String> attributes) {\n        this.id = Integer.parseInt(attributes.get(\"id\"));\n        this.simpleType = \"true\".equals(attributes.get(\"simpleType\"));\n        this.name = attributes.get(\"name\");\n        this.fields = new ArrayList<>(2);\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/jfr/JfrClass.java"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 50,
                  "endLine": 20,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\n    JfrClass(Map<String, String> attributes) {\n        this.id = Integer.parseInt(attributes.get(\"id\"));\n        this.simpleType = \"true\".equals(attributes.get(\"simpleType\"));\n        this.name = attributes.get(\"name\");\n        this.fields = new ArrayList<>(2);\n    }\n",
                    "rendered": {
                      "text": "\n    JfrClass(Map<String, String> attributes) {\n        this.id = Integer.parseInt(attributes.get(\"id\"));\n        this.simpleType = \"true\".equals(attributes.get(\"simpleType\"));\n        this.name = attributes.get(\"name\");\n        this.fields = new ArrayList<>(2);\n    }\n",
                      "markdown": "`\n    JfrClass(Map<String, String> attributes) {\n        this.id = Integer.parseInt(attributes.get(\"id\"));\n        this.simpleType = \"true\".equals(attributes.get(\"simpleType\"));\n        this.name = attributes.get(\"name\");\n        this.fields = new ArrayList<>(2);\n    }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/jfr/JfrClass.java"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 45,
                  "endLine": 19,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    final List<JfrField> fields;\n\n    JfrClass(Map<String, String> attributes) {\n        this.id = Integer.parseInt(attributes.get(\"id\"));\n        this.simpleType = \"true\".equals(attributes.get(\"simpleType\"));\n        this.name = attributes.get(\"name\");\n        this.fields = new ArrayList<>(2);\n",
                    "rendered": {
                      "text": "    final List<JfrField> fields;\n\n    JfrClass(Map<String, String> attributes) {\n        this.id = Integer.parseInt(attributes.get(\"id\"));\n        this.simpleType = \"true\".equals(attributes.get(\"simpleType\"));\n        this.name = attributes.get(\"name\");\n        this.fields = new ArrayList<>(2);\n",
                      "markdown": "`    final List<JfrField> fields;\n\n    JfrClass(Map<String, String> attributes) {\n        this.id = Integer.parseInt(attributes.get(\"id\"));\n        this.simpleType = \"true\".equals(attributes.get(\"simpleType\"));\n        this.name = attributes.get(\"name\");\n        this.fields = new ArrayList<>(2);\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/test/test/jfr/Cache.java"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 30,
                  "endLine": 30,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    }\n\n    public String get(Long key) {\n        ValueWithTime vt = map.get(key);\n        if (vt == null) {\n            return null;\n        }\n",
                    "rendered": {
                      "text": "    }\n\n    public String get(Long key) {\n        ValueWithTime vt = map.get(key);\n        if (vt == null) {\n            return null;\n        }\n",
                      "markdown": "`    }\n\n    public String get(Long key) {\n        ValueWithTime vt = map.get(key);\n        if (vt == null) {\n            return null;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/test/test/jfr/Cache.java"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 23,
                  "endLine": 41,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    private void calculateTop() {\n        long deadline = System.currentTimeMillis() - 1000;\n\n        ValueWithTime[] top = map.values()\n                .parallelStream()\n                .filter(vt -> vt.time > deadline)\n                .sorted(Comparator.comparing(vt -> Long.parseLong(vt.value)))\n",
                    "rendered": {
                      "text": "    private void calculateTop() {\n        long deadline = System.currentTimeMillis() - 1000;\n\n        ValueWithTime[] top = map.values()\n                .parallelStream()\n                .filter(vt -> vt.time > deadline)\n                .sorted(Comparator.comparing(vt -> Long.parseLong(vt.value)))\n",
                      "markdown": "`    private void calculateTop() {\n        long deadline = System.currentTimeMillis() - 1000;\n\n        ValueWithTime[] top = map.values()\n                .parallelStream()\n                .filter(vt -> vt.time > deadline)\n                .sorted(Comparator.comparing(vt -> Long.parseLong(vt.value)))\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/test/test/jfr/JfrTests.java"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 36,
                  "endLine": 75,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n        Assert.isGreater(eventsCount.get(\"jdk.ExecutionSample\"), 50);\n        Assert.isGreater(eventsCount.get(\"jdk.JavaMonitorEnter\"), 50);\n        Assert.isGreater(eventsCount.get(\"jdk.ObjectAllocationInNewTLAB\"), 100);\n    }\n}\n",
                    "rendered": {
                      "text": "\n        Assert.isGreater(eventsCount.get(\"jdk.ExecutionSample\"), 50);\n        Assert.isGreater(eventsCount.get(\"jdk.JavaMonitorEnter\"), 50);\n        Assert.isGreater(eventsCount.get(\"jdk.ObjectAllocationInNewTLAB\"), 100);\n    }\n}\n",
                      "markdown": "`\n        Assert.isGreater(eventsCount.get(\"jdk.ExecutionSample\"), 50);\n        Assert.isGreater(eventsCount.get(\"jdk.JavaMonitorEnter\"), 50);\n        Assert.isGreater(eventsCount.get(\"jdk.ObjectAllocationInNewTLAB\"), 100);\n    }\n}\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/test/test/jfr/JfrTests.java"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 36,
                  "endLine": 74,
                  "endColumn": 41,
                  "snippet": {
                    "text": "        }\n\n        Assert.isGreater(eventsCount.get(\"jdk.ExecutionSample\"), 50);\n        Assert.isGreater(eventsCount.get(\"jdk.JavaMonitorEnter\"), 50);\n        Assert.isGreater(eventsCount.get(\"jdk.ObjectAllocationInNewTLAB\"), 100);\n    }\n}\n",
                    "rendered": {
                      "text": "        }\n\n        Assert.isGreater(eventsCount.get(\"jdk.ExecutionSample\"), 50);\n        Assert.isGreater(eventsCount.get(\"jdk.JavaMonitorEnter\"), 50);\n        Assert.isGreater(eventsCount.get(\"jdk.ObjectAllocationInNewTLAB\"), 100);\n    }\n}\n",
                      "markdown": "`        }\n\n        Assert.isGreater(eventsCount.get(\"jdk.ExecutionSample\"), 50);\n        Assert.isGreater(eventsCount.get(\"jdk.JavaMonitorEnter\"), 50);\n        Assert.isGreater(eventsCount.get(\"jdk.ObjectAllocationInNewTLAB\"), 100);\n    }\n}\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/test/test/jfr/JfrTests.java"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 36,
                  "endLine": 73,
                  "endColumn": 41,
                  "snippet": {
                    "text": "            }\n        }\n\n        Assert.isGreater(eventsCount.get(\"jdk.ExecutionSample\"), 50);\n        Assert.isGreater(eventsCount.get(\"jdk.JavaMonitorEnter\"), 50);\n        Assert.isGreater(eventsCount.get(\"jdk.ObjectAllocationInNewTLAB\"), 100);\n    }\n",
                    "rendered": {
                      "text": "            }\n        }\n\n        Assert.isGreater(eventsCount.get(\"jdk.ExecutionSample\"), 50);\n        Assert.isGreater(eventsCount.get(\"jdk.JavaMonitorEnter\"), 50);\n        Assert.isGreater(eventsCount.get(\"jdk.ObjectAllocationInNewTLAB\"), 100);\n    }\n",
                      "markdown": "`            }\n        }\n\n        Assert.isGreater(eventsCount.get(\"jdk.ExecutionSample\"), 50);\n        Assert.isGreater(eventsCount.get(\"jdk.JavaMonitorEnter\"), 50);\n        Assert.isGreater(eventsCount.get(\"jdk.ObjectAllocationInNewTLAB\"), 100);\n    }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/test/test/jfr/JfrTests.java"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 66,
                  "endLine": 65,
                  "endColumn": 71,
                  "snippet": {
                    "text": "    public void parseMultiModeRecording(TestProcess p) throws Exception {\n        p.waitForExit();\n        Map<String, Integer> eventsCount = new HashMap<>();\n        try (RecordingFile recordingFile = new RecordingFile(Paths.get(p.getFile(\"%f\").getAbsolutePath()))) {\n            while (recordingFile.hasMoreEvents()) {\n                RecordedEvent event = recordingFile.readEvent();\n                String eventName = event.getEventType().getName();\n",
                    "rendered": {
                      "text": "    public void parseMultiModeRecording(TestProcess p) throws Exception {\n        p.waitForExit();\n        Map<String, Integer> eventsCount = new HashMap<>();\n        try (RecordingFile recordingFile = new RecordingFile(Paths.get(p.getFile(\"%f\").getAbsolutePath()))) {\n            while (recordingFile.hasMoreEvents()) {\n                RecordedEvent event = recordingFile.readEvent();\n                String eventName = event.getEventType().getName();\n",
                      "markdown": "`    public void parseMultiModeRecording(TestProcess p) throws Exception {\n        p.waitForExit();\n        Map<String, Integer> eventsCount = new HashMap<>();\n        try (RecordingFile recordingFile = new RecordingFile(Paths.get(p.getFile(\"%f\").getAbsolutePath()))) {\n            while (recordingFile.hasMoreEvents()) {\n                RecordedEvent event = recordingFile.readEvent();\n                String eventName = event.getEventType().getName();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/test/test/jfr/JfrTests.java"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 66,
                  "endLine": 43,
                  "endColumn": 71,
                  "snippet": {
                    "text": "    public void parseRecording(TestProcess p) throws Exception {\n        p.profile(\"-d 3 -e cpu -f %f.jfr\");\n        StringBuilder builder = new StringBuilder();\n        try (RecordingFile recordingFile = new RecordingFile(Paths.get(p.getFile(\"%f\").getAbsolutePath()))) {\n            while (recordingFile.hasMoreEvents()) {\n                RecordedEvent event = recordingFile.readEvent();\n                builder.append(event);\n",
                    "rendered": {
                      "text": "    public void parseRecording(TestProcess p) throws Exception {\n        p.profile(\"-d 3 -e cpu -f %f.jfr\");\n        StringBuilder builder = new StringBuilder();\n        try (RecordingFile recordingFile = new RecordingFile(Paths.get(p.getFile(\"%f\").getAbsolutePath()))) {\n            while (recordingFile.hasMoreEvents()) {\n                RecordedEvent event = recordingFile.readEvent();\n                builder.append(event);\n",
                      "markdown": "`    public void parseRecording(TestProcess p) throws Exception {\n        p.profile(\"-d 3 -e cpu -f %f.jfr\");\n        StringBuilder builder = new StringBuilder();\n        try (RecordingFile recordingFile = new RecordingFile(Paths.get(p.getFile(\"%f\").getAbsolutePath()))) {\n            while (recordingFile.hasMoreEvents()) {\n                RecordedEvent event = recordingFile.readEvent();\n                builder.append(event);\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/test/test/alloc/AllocTests.java"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 24,
                  "endLine": 71,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    assert !out.contains(\"_\\\\[k\\\\]\"); // we are using alloc tracer instead of object sampler, should definitely not happen on first profiling call\n        File asprofCopy = File.createTempFile(new File(p.profilerLibPath()).getName(), null);\n        asprofCopy.deleteOnExit();\n        Files.copy(Paths.get(p.profilerLibPath()), asprofCopy.toPath(), StandardCopyOption.REPLACE_EXISTING);\n        Output outWithCopy = p.profile(String.format(\"--libpath %s -e alloc -d 3 -o collapsed\", asprofCopy.getAbsolutePath()));\n        assert !outWithCopy.contains(\"_\\\\[k\\\\]\"); // first instance of profiler has not pro",
                    "rendered": {
                      "text": "    assert !out.contains(\"_\\\\[k\\\\]\"); // we are using alloc tracer instead of object sampler, should definitely not happen on first profiling call\n        File asprofCopy = File.createTempFile(new File(p.profilerLibPath()).getName(), null);\n        asprofCopy.deleteOnExit();\n        Files.copy(Paths.get(p.profilerLibPath()), asprofCopy.toPath(), StandardCopyOption.REPLACE_EXISTING);\n        Output outWithCopy = p.profile(String.format(\"--libpath %s -e alloc -d 3 -o collapsed\", asprofCopy.getAbsolutePath()));\n        assert !outWithCopy.contains(\"_\\\\[k\\\\]\"); // first instance of profiler has not pro",
                      "markdown": "`    assert !out.contains(\"_\\\\[k\\\\]\"); // we are using alloc tracer instead of object sampler, should definitely not happen on first profiling call\n        File asprofCopy = File.createTempFile(new File(p.profilerLibPath()).getName(), null);\n        asprofCopy.deleteOnExit();\n        Files.copy(Paths.get(p.profilerLibPath()), asprofCopy.toPath(), StandardCopyOption.REPLACE_EXISTING);\n        Output outWithCopy = p.profile(String.format(\"--libpath %s -e alloc -d 3 -o collapsed\", asprofCopy.getAbsolutePath()));\n        assert !outWithCopy.contains(\"_\\\\[k\\\\]\"); // first instance of profiler has not pro`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/test/one/profiler/test/TestProcess.java"
                },
                "region": {
                  "startLine": 296,
                  "startColumn": 23,
                  "endLine": 296,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    }\n\n    public File getFile(String fileId) {\n        return tmpFiles.get(fileId);\n    }\n\n    public Output readFile(String fileId) {\n",
                    "rendered": {
                      "text": "    }\n\n    public File getFile(String fileId) {\n        return tmpFiles.get(fileId);\n    }\n\n    public Output readFile(String fileId) {\n",
                      "markdown": "`    }\n\n    public File getFile(String fileId) {\n        return tmpFiles.get(fileId);\n    }\n\n    public Output readFile(String fileId) {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/test/one/profiler/test/TestProcess.java"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 53,
                  "endLine": 216,
                  "endColumn": 58,
                  "snippet": {
                    "text": "    }\n\n    private boolean isRoot() {\n        try (Stream<String> lines = Files.lines(Paths.get(\"/proc/self/status\"))) {\n            return lines.anyMatch(s -> s.startsWith(\"Uid:\") && s.matches(\"Uid:\\\\s+0\\\\s+0.*\"));\n        } catch (IOException e) {\n            return false;\n",
                    "rendered": {
                      "text": "    }\n\n    private boolean isRoot() {\n        try (Stream<String> lines = Files.lines(Paths.get(\"/proc/self/status\"))) {\n            return lines.anyMatch(s -> s.startsWith(\"Uid:\") && s.matches(\"Uid:\\\\s+0\\\\s+0.*\"));\n        } catch (IOException e) {\n            return false;\n",
                      "markdown": "`    }\n\n    private boolean isRoot() {\n        try (Stream<String> lines = Files.lines(Paths.get(\"/proc/self/status\"))) {\n            return lines.anyMatch(s -> s.startsWith(\"Uid:\") && s.matches(\"Uid:\\\\s+0\\\\s+0.*\"));\n        } catch (IOException e) {\n            return false;\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/test/one/profiler/test/TestProcess.java"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 35,
                  "endLine": 208,
                  "endColumn": 40,
                  "snippet": {
                    "text": "            File stderr = tmpFiles.getOrDefault(PROFERR, tmpFiles.get(STDERR));\n            moveLog(stderr, \"stderr\", false);\n\n            File profile = tmpFiles.get(\"%f\");\n            moveLog(profile, \"profile\", true);\n        } catch (IOException e) {\n            log.log(Level.WARNING, \"Failed to move logs\", e);\n",
                    "rendered": {
                      "text": "            File stderr = tmpFiles.getOrDefault(PROFERR, tmpFiles.get(STDERR));\n            moveLog(stderr, \"stderr\", false);\n\n            File profile = tmpFiles.get(\"%f\");\n            moveLog(profile, \"profile\", true);\n        } catch (IOException e) {\n            log.log(Level.WARNING, \"Failed to move logs\", e);\n",
                      "markdown": "`            File stderr = tmpFiles.getOrDefault(PROFERR, tmpFiles.get(STDERR));\n            moveLog(stderr, \"stderr\", false);\n\n            File profile = tmpFiles.get(\"%f\");\n            moveLog(profile, \"profile\", true);\n        } catch (IOException e) {\n            log.log(Level.WARNING, \"Failed to move logs\", e);\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/test/one/profiler/test/TestProcess.java"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 65,
                  "endLine": 205,
                  "endColumn": 70,
                  "snippet": {
                    "text": "            File stdout = tmpFiles.getOrDefault(PROFOUT, tmpFiles.get(STDOUT));\n            moveLog(stdout, \"stdout\", true);\n\n            File stderr = tmpFiles.getOrDefault(PROFERR, tmpFiles.get(STDERR));\n            moveLog(stderr, \"stderr\", false);\n\n            File profile = tmpFiles.get(\"%f\");\n",
                    "rendered": {
                      "text": "            File stdout = tmpFiles.getOrDefault(PROFOUT, tmpFiles.get(STDOUT));\n            moveLog(stdout, \"stdout\", true);\n\n            File stderr = tmpFiles.getOrDefault(PROFERR, tmpFiles.get(STDERR));\n            moveLog(stderr, \"stderr\", false);\n\n            File profile = tmpFiles.get(\"%f\");\n",
                      "markdown": "`            File stdout = tmpFiles.getOrDefault(PROFOUT, tmpFiles.get(STDOUT));\n            moveLog(stdout, \"stdout\", true);\n\n            File stderr = tmpFiles.getOrDefault(PROFERR, tmpFiles.get(STDERR));\n            moveLog(stderr, \"stderr\", false);\n\n            File profile = tmpFiles.get(\"%f\");\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/test/one/profiler/test/TestProcess.java"
                },
                "region": {
                  "startLine": 202,
                  "startColumn": 65,
                  "endLine": 202,
                  "endColumn": 70,
                  "snippet": {
                    "text": "        try {\n            Files.createDirectories(Paths.get(logDir));\n\n            File stdout = tmpFiles.getOrDefault(PROFOUT, tmpFiles.get(STDOUT));\n            moveLog(stdout, \"stdout\", true);\n\n            File stderr = tmpFiles.getOrDefault(PROFERR, tmpFiles.get(STDERR));\n",
                    "rendered": {
                      "text": "        try {\n            Files.createDirectories(Paths.get(logDir));\n\n            File stdout = tmpFiles.getOrDefault(PROFOUT, tmpFiles.get(STDOUT));\n            moveLog(stdout, \"stdout\", true);\n\n            File stderr = tmpFiles.getOrDefault(PROFERR, tmpFiles.get(STDERR));\n",
                      "markdown": "`        try {\n            Files.createDirectories(Paths.get(logDir));\n\n            File stdout = tmpFiles.getOrDefault(PROFOUT, tmpFiles.get(STDOUT));\n            moveLog(stdout, \"stdout\", true);\n\n            File stderr = tmpFiles.getOrDefault(PROFERR, tmpFiles.get(STDERR));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/test/one/profiler/test/TestProcess.java"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 41,
                  "endLine": 200,
                  "endColumn": 46,
                  "snippet": {
                    "text": "        }\n\n        try {\n            Files.createDirectories(Paths.get(logDir));\n\n            File stdout = tmpFiles.getOrDefault(PROFOUT, tmpFiles.get(STDOUT));\n            moveLog(stdout, \"stdout\", true);\n",
                    "rendered": {
                      "text": "        }\n\n        try {\n            Files.createDirectories(Paths.get(logDir));\n\n            File stdout = tmpFiles.getOrDefault(PROFOUT, tmpFiles.get(STDOUT));\n            moveLog(stdout, \"stdout\", true);\n",
                      "markdown": "`        }\n\n        try {\n            Files.createDirectories(Paths.get(logDir));\n\n            File stdout = tmpFiles.getOrDefault(PROFOUT, tmpFiles.get(STDOUT));\n            moveLog(stdout, \"stdout\", true);\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/test/one/profiler/test/TestProcess.java"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 43,
                  "endLine": 190,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    private void moveLog(File file, String name, boolean autoExtension) throws IOException {\n        if (file != null) {\n            String targetName = autoExtension ? name + getExtFromFile(file) : name;\n            Files.move(file.toPath(), Paths.get(logDir, targetName), StandardCopyOption.REPLACE_EXISTING);\n        }\n    }\n\n",
                    "rendered": {
                      "text": "    private void moveLog(File file, String name, boolean autoExtension) throws IOException {\n        if (file != null) {\n            String targetName = autoExtension ? name + getExtFromFile(file) : name;\n            Files.move(file.toPath(), Paths.get(logDir, targetName), StandardCopyOption.REPLACE_EXISTING);\n        }\n    }\n\n",
                      "markdown": "`    private void moveLog(File file, String name, boolean autoExtension) throws IOException {\n        if (file != null) {\n            String targetName = autoExtension ? name + getExtFromFile(file) : name;\n            Files.move(file.toPath(), Paths.get(logDir, targetName), StandardCopyOption.REPLACE_EXISTING);\n        }\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/test/one/profiler/test/TestProcess.java"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 15,
                  "endLine": 80,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        }\n        this.p = pb.start();\n\n        if (cmd.get(0).endsWith(\"java\")) {\n            // Give the JVM some time to initialize\n            Thread.sleep(700);\n        }\n",
                    "rendered": {
                      "text": "        }\n        this.p = pb.start();\n\n        if (cmd.get(0).endsWith(\"java\")) {\n            // Give the JVM some time to initialize\n            Thread.sleep(700);\n        }\n",
                      "markdown": "`        }\n        this.p = pb.start();\n\n        if (cmd.get(0).endsWith(\"java\")) {\n            // Give the JVM some time to initialize\n            Thread.sleep(700);\n        }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/test/one/profiler/test/TestProcess.java"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 20,
                  "endLine": 272,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    }\n\n    public Output profile(String args, boolean sudo) throws IOException, TimeoutException, InterruptedException {\n        List<String> cmd = new ArrayList<>();\n        if (sudo && (new File(\"/usr/bin/sudo\").exists() || !isRoot())) {\n            cmd.add(\"/usr/bin/sudo\");\n        }\n",
                    "rendered": {
                      "text": "    }\n\n    public Output profile(String args, boolean sudo) throws IOException, TimeoutException, InterruptedException {\n        List<String> cmd = new ArrayList<>();\n        if (sudo && (new File(\"/usr/bin/sudo\").exists() || !isRoot())) {\n            cmd.add(\"/usr/bin/sudo\");\n        }\n",
                      "markdown": "`    }\n\n    public Output profile(String args, boolean sudo) throws IOException, TimeoutException, InterruptedException {\n        List<String> cmd = new ArrayList<>();\n        if (sudo && (new File(\"/usr/bin/sudo\").exists() || !isRoot())) {\n            cmd.add(\"/usr/bin/sudo\");\n        }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/test/one/profiler/test/TestProcess.java"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 20,
                  "endLine": 99,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    }\n\n    private List<String> buildCommandLine(Test test, Os currentOs) {\n        List<String> cmd = new ArrayList<>();\n\n        String[] sh = test.sh();\n        if (sh.length > 0) {\n",
                    "rendered": {
                      "text": "    }\n\n    private List<String> buildCommandLine(Test test, Os currentOs) {\n        List<String> cmd = new ArrayList<>();\n\n        String[] sh = test.sh();\n        if (sh.length > 0) {\n",
                      "markdown": "`    }\n\n    private List<String> buildCommandLine(Test test, Os currentOs) {\n        List<String> cmd = new ArrayList<>();\n\n        String[] sh = test.sh();\n        if (sh.length > 0) {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/test/one/profiler/test/TestProcess.java"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 20,
                  "endLine": 68,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        this.logDir = logDir;\n        this.inputs = test.inputs();\n\n        List<String> cmd = buildCommandLine(test, currentOs);\n        log.log(Level.FINE, \"Running \" + cmd);\n\n        ProcessBuilder pb = new ProcessBuilder(cmd).inheritIO();\n",
                    "rendered": {
                      "text": "        this.logDir = logDir;\n        this.inputs = test.inputs();\n\n        List<String> cmd = buildCommandLine(test, currentOs);\n        log.log(Level.FINE, \"Running \" + cmd);\n\n        ProcessBuilder pb = new ProcessBuilder(cmd).inheritIO();\n",
                      "markdown": "`        this.logDir = logDir;\n        this.inputs = test.inputs();\n\n        List<String> cmd = buildCommandLine(test, currentOs);\n        log.log(Level.FINE, \"Running \" + cmd);\n\n        ProcessBuilder pb = new ProcessBuilder(cmd).inheritIO();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/test/one/profiler/test/TestProcess.java"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 32,
                  "endLine": 81,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        this.p = pb.start();\n\n        if (cmd.get(0).endsWith(\"java\")) {\n            // Give the JVM some time to initialize\n            Thread.sleep(700);\n        }\n    }\n",
                    "rendered": {
                      "text": "        this.p = pb.start();\n\n        if (cmd.get(0).endsWith(\"java\")) {\n            // Give the JVM some time to initialize\n            Thread.sleep(700);\n        }\n    }\n",
                      "markdown": "`        this.p = pb.start();\n\n        if (cmd.get(0).endsWith(\"java\")) {\n            // Give the JVM some time to initialize\n            Thread.sleep(700);\n        }\n    }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/test/one/profiler/test/TestProcess.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 21,
                  "endLine": 61,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    private final String[] inputs;\n    private final Process p;\n    private final Map<String, File> tmpFiles = new HashMap<>();\n    private final int timeout = 30;\n\n    public TestProcess(Test test, Os currentOs, String logDir) throws Exception {\n        this.currentOs = currentOs;\n",
                    "rendered": {
                      "text": "    private final String[] inputs;\n    private final Process p;\n    private final Map<String, File> tmpFiles = new HashMap<>();\n    private final int timeout = 30;\n\n    public TestProcess(Test test, Os currentOs, String logDir) throws Exception {\n        this.currentOs = currentOs;\n",
                      "markdown": "`    private final String[] inputs;\n    private final Process p;\n    private final Map<String, File> tmpFiles = new HashMap<>();\n    private final int timeout = 30;\n\n    public TestProcess(Test test, Os currentOs, String logDir) throws Exception {\n        this.currentOs = currentOs;\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/arguments.cpp"
                },
                "region": {
                  "startLine": 504,
                  "startColumn": 32,
                  "endLine": 504,
                  "endColumn": 47,
                  "snippet": {
                    "text": "                if (p != NULL && p - pattern < sizeof(env_key)) {\n                    memcpy(env_key, pattern, p - pattern);\n                    env_key[p - pattern] = 0;\n                    const char* env_value = getenv(env_key);\n                    if (env_value != NULL) {\n                        ptr += snprintf(ptr, end - ptr, \"%s\", env_value);\n                        pattern = p + 1;\n",
                    "rendered": {
                      "text": "                if (p != NULL && p - pattern < sizeof(env_key)) {\n                    memcpy(env_key, pattern, p - pattern);\n                    env_key[p - pattern] = 0;\n                    const char* env_value = getenv(env_key);\n                    if (env_value != NULL) {\n                        ptr += snprintf(ptr, end - ptr, \"%s\", env_value);\n                        pattern = p + 1;\n",
                      "markdown": "`                if (p != NULL && p - pattern < sizeof(env_key)) {\n                    memcpy(env_key, pattern, p - pattern);\n                    env_key[p - pattern] = 0;\n                    const char* env_value = getenv(env_key);\n                    if (env_value != NULL) {\n                        ptr += snprintf(ptr, end - ptr, \"%s\", env_value);\n                        pattern = p + 1;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/arguments.cpp"
                },
                "region": {
                  "startLine": 569,
                  "startColumn": 23,
                  "endLine": 569,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    int hh = str[0] >= '0' && str[0] <= '2' ? atoi(str) : 0xff;\n    int mm = p[1] >= '0' && p[1] <= '5' ? atoi(p + 1) : 0xff;\n    int ss = (p = strchr(p + 1, ':')) != NULL && p[1] >= '0' && p[1] <= '5' ? atoi(p + 1) : 0xff;\n    return 0xff000000 | hh << 16 | mm << 8 | ss;\n}\n\nArguments::~Arguments() {\n",
                    "rendered": {
                      "text": "    int hh = str[0] >= '0' && str[0] <= '2' ? atoi(str) : 0xff;\n    int mm = p[1] >= '0' && p[1] <= '5' ? atoi(p + 1) : 0xff;\n    int ss = (p = strchr(p + 1, ':')) != NULL && p[1] >= '0' && p[1] <= '5' ? atoi(p + 1) : 0xff;\n    return 0xff000000 | hh << 16 | mm << 8 | ss;\n}\n\nArguments::~Arguments() {\n",
                      "markdown": "`    int hh = str[0] >= '0' && str[0] <= '2' ? atoi(str) : 0xff;\n    int mm = p[1] >= '0' && p[1] <= '5' ? atoi(p + 1) : 0xff;\n    int ss = (p = strchr(p + 1, ':')) != NULL && p[1] >= '0' && p[1] <= '5' ? atoi(p + 1) : 0xff;\n    return 0xff000000 | hh << 16 | mm << 8 | ss;\n}\n\nArguments::~Arguments() {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/arguments.cpp"
                },
                "region": {
                  "startLine": 566,
                  "startColumn": 7,
                  "endLine": 566,
                  "endColumn": 11,
                  "snippet": {
                    "text": "        return parseUnits(str, SECONDS);\n    }\n\n    int hh = str[0] >= '0' && str[0] <= '2' ? atoi(str) : 0xff;\n    int mm = p[1] >= '0' && p[1] <= '5' ? atoi(p + 1) : 0xff;\n    int ss = (p = strchr(p + 1, ':')) != NULL && p[1] >= '0' && p[1] <= '5' ? atoi(p + 1) : 0xff;\n    return 0xff000000 | hh << 16 | mm << 8 | ss;\n",
                    "rendered": {
                      "text": "        return parseUnits(str, SECONDS);\n    }\n\n    int hh = str[0] >= '0' && str[0] <= '2' ? atoi(str) : 0xff;\n    int mm = p[1] >= '0' && p[1] <= '5' ? atoi(p + 1) : 0xff;\n    int ss = (p = strchr(p + 1, ':')) != NULL && p[1] >= '0' && p[1] <= '5' ? atoi(p + 1) : 0xff;\n    return 0xff000000 | hh << 16 | mm << 8 | ss;\n",
                      "markdown": "`        return parseUnits(str, SECONDS);\n    }\n\n    int hh = str[0] >= '0' && str[0] <= '2' ? atoi(str) : 0xff;\n    int mm = p[1] >= '0' && p[1] <= '5' ? atoi(p + 1) : 0xff;\n    int ss = (p = strchr(p + 1, ':')) != NULL && p[1] >= '0' && p[1] <= '5' ? atoi(p + 1) : 0xff;\n    return 0xff000000 | hh << 16 | mm << 8 | ss;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/arguments.cpp"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 50,
                  "endLine": 110,
                  "endColumn": 54,
                  "snippet": {
                    "text": "//     minwidth=PCT     - FlameGraph minimum frame width in percent\n//     reverse          - generate stack-reversed FlameGraph / Call tree\n//\n// It is possible to specify multiple dump options at the same time\n\nError Arguments::parse(const char* args) {\n    if (args == NULL) {\n",
                    "rendered": {
                      "text": "//     minwidth=PCT     - FlameGraph minimum frame width in percent\n//     reverse          - generate stack-reversed FlameGraph / Call tree\n//\n// It is possible to specify multiple dump options at the same time\n\nError Arguments::parse(const char* args) {\n    if (args == NULL) {\n",
                      "markdown": "`//     minwidth=PCT     - FlameGraph minimum frame width in percent\n//     reverse          - generate stack-reversed FlameGraph / Call tree\n//\n// It is possible to specify multiple dump options at the same time\n\nError Arguments::parse(const char* args) {\n    if (args == NULL) {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/arguments.cpp"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 52,
                  "endLine": 85,
                  "endColumn": 56,
                  "snippet": {
                    "text": "//     file=FILENAME    - output file name for dumping\n//     log=FILENAME     - log warnings and errors to the given dedicated stream\n//     loglevel=LEVEL   - logging level: TRACE, DEBUG, INFO, WARN, ERROR, or NONE\n//     server=ADDRESS   - start insecure HTTP server at ADDRESS/PORT\n//     filter=FILTER    - thread filter\n//     threads          - profile different threads separately\n//     sched            - group threads by scheduling policy\n",
                    "rendered": {
                      "text": "//     file=FILENAME    - output file name for dumping\n//     log=FILENAME     - log warnings and errors to the given dedicated stream\n//     loglevel=LEVEL   - logging level: TRACE, DEBUG, INFO, WARN, ERROR, or NONE\n//     server=ADDRESS   - start insecure HTTP server at ADDRESS/PORT\n//     filter=FILTER    - thread filter\n//     threads          - profile different threads separately\n//     sched            - group threads by scheduling policy\n",
                      "markdown": "`//     file=FILENAME    - output file name for dumping\n//     log=FILENAME     - log warnings and errors to the given dedicated stream\n//     loglevel=LEVEL   - logging level: TRACE, DEBUG, INFO, WARN, ERROR, or NONE\n//     server=ADDRESS   - start insecure HTTP server at ADDRESS/PORT\n//     filter=FILTER    - thread filter\n//     threads          - profile different threads separately\n//     sched            - group threads by scheduling policy\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/arguments.cpp"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 53,
                  "endLine": 75,
                  "endColumn": 57,
                  "snippet": {
                    "text": "//     total            - count the total value (time, bytes, etc.) instead of samples\n//     chunksize=N      - approximate size of JFR chunk in bytes (default: 100 MB)\n//     chunktime=N      - duration of JFR chunk in seconds (default: 1 hour)\n//     timeout=TIME     - automatically stop profiler at TIME (absolute or relative)\n//     loop=TIME        - run profiler in a loop (continuous profiling)\n//     interval=N       - sampling interval in ns (default: 10'000'000, i.e. 10 ms)\n//     jstackdepth=N    - maximum Java stack depth (default: 2048)\n",
                    "rendered": {
                      "text": "//     total            - count the total value (time, bytes, etc.) instead of samples\n//     chunksize=N      - approximate size of JFR chunk in bytes (default: 100 MB)\n//     chunktime=N      - duration of JFR chunk in seconds (default: 1 hour)\n//     timeout=TIME     - automatically stop profiler at TIME (absolute or relative)\n//     loop=TIME        - run profiler in a loop (continuous profiling)\n//     interval=N       - sampling interval in ns (default: 10'000'000, i.e. 10 ms)\n//     jstackdepth=N    - maximum Java stack depth (default: 2048)\n",
                      "markdown": "`//     total            - count the total value (time, bytes, etc.) instead of samples\n//     chunksize=N      - approximate size of JFR chunk in bytes (default: 100 MB)\n//     chunktime=N      - duration of JFR chunk in seconds (default: 1 hour)\n//     timeout=TIME     - automatically stop profiler at TIME (absolute or relative)\n//     loop=TIME        - run profiler in a loop (continuous profiling)\n//     interval=N       - sampling interval in ns (default: 10'000'000, i.e. 10 ms)\n//     jstackdepth=N    - maximum Java stack depth (default: 2048)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/arguments.cpp"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 62,
                  "endLine": 111,
                  "snippet": {
                    "text": "//     minwidth=PCT     - FlameGraph minimum frame width in percent\n//     reverse          - generate stack-reversed FlameGraph / Call tree\n//\n// It is possible to specify multiple dump options at the same time\n\nError Arguments::parse(const char* args) {\n    if (args == NULL) {\n        return Error::OK;\n",
                    "rendered": {
                      "text": "//     minwidth=PCT     - FlameGraph minimum frame width in percent\n//     reverse          - generate stack-reversed FlameGraph / Call tree\n//\n// It is possible to specify multiple dump options at the same time\n\nError Arguments::parse(const char* args) {\n    if (args == NULL) {\n        return Error::OK;\n",
                      "markdown": "`//     minwidth=PCT     - FlameGraph minimum frame width in percent\n//     reverse          - generate stack-reversed FlameGraph / Call tree\n//\n// It is possible to specify multiple dump options at the same time\n\nError Arguments::parse(const char* args) {\n    if (args == NULL) {\n        return Error::OK;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/arguments.cpp"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 56,
                  "endLine": 75,
                  "endColumn": 62,
                  "snippet": {
                    "text": "//     total            - count the total value (time, bytes, etc.) instead of samples\n//     chunksize=N      - approximate size of JFR chunk in bytes (default: 100 MB)\n//     chunktime=N      - duration of JFR chunk in seconds (default: 1 hour)\n//     timeout=TIME     - automatically stop profiler at TIME (absolute or relative)\n//     loop=TIME        - run profiler in a loop (continuous profiling)\n//     interval=N       - sampling interval in ns (default: 10'000'000, i.e. 10 ms)\n//     jstackdepth=N    - maximum Java stack depth (default: 2048)\n",
                    "rendered": {
                      "text": "//     total            - count the total value (time, bytes, etc.) instead of samples\n//     chunksize=N      - approximate size of JFR chunk in bytes (default: 100 MB)\n//     chunktime=N      - duration of JFR chunk in seconds (default: 1 hour)\n//     timeout=TIME     - automatically stop profiler at TIME (absolute or relative)\n//     loop=TIME        - run profiler in a loop (continuous profiling)\n//     interval=N       - sampling interval in ns (default: 10'000'000, i.e. 10 ms)\n//     jstackdepth=N    - maximum Java stack depth (default: 2048)\n",
                      "markdown": "`//     total            - count the total value (time, bytes, etc.) instead of samples\n//     chunksize=N      - approximate size of JFR chunk in bytes (default: 100 MB)\n//     chunktime=N      - duration of JFR chunk in seconds (default: 1 hour)\n//     timeout=TIME     - automatically stop profiler at TIME (absolute or relative)\n//     loop=TIME        - run profiler in a loop (continuous profiling)\n//     interval=N       - sampling interval in ns (default: 10'000'000, i.e. 10 ms)\n//     jstackdepth=N    - maximum Java stack depth (default: 2048)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/arguments.cpp"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 30,
                  "endLine": 70,
                  "endColumn": 35,
                  "snippet": {
                    "text": "//     jfropts=OPTIONS  - JFR recording options: numeric bitmask or 'mem'\n//     jfrsync[=CONFIG] - start Java Flight Recording with the given config along with the profiler\n//     traces[=N]       - dump top N call traces\n//     flat[=N]         - dump top N methods (aka flat profile)\n//     samples          - count the number of samples (default)\n//     total            - count the total value (time, bytes, etc.) instead of samples\n//     chunksize=N      - approximate size of JFR chunk in bytes (default: 100 MB)\n",
                    "rendered": {
                      "text": "//     jfropts=OPTIONS  - JFR recording options: numeric bitmask or 'mem'\n//     jfrsync[=CONFIG] - start Java Flight Recording with the given config along with the profiler\n//     traces[=N]       - dump top N call traces\n//     flat[=N]         - dump top N methods (aka flat profile)\n//     samples          - count the number of samples (default)\n//     total            - count the total value (time, bytes, etc.) instead of samples\n//     chunksize=N      - approximate size of JFR chunk in bytes (default: 100 MB)\n",
                      "markdown": "`//     jfropts=OPTIONS  - JFR recording options: numeric bitmask or 'mem'\n//     jfrsync[=CONFIG] - start Java Flight Recording with the given config along with the profiler\n//     traces[=N]       - dump top N call traces\n//     flat[=N]         - dump top N methods (aka flat profile)\n//     samples          - count the number of samples (default)\n//     total            - count the total value (time, bytes, etc.) instead of samples\n//     chunksize=N      - approximate size of JFR chunk in bytes (default: 100 MB)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/arguments.cpp"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 30,
                  "endLine": 69,
                  "endColumn": 35,
                  "snippet": {
                    "text": "//     jfr              - dump events in Java Flight Recorder format\n//     jfropts=OPTIONS  - JFR recording options: numeric bitmask or 'mem'\n//     jfrsync[=CONFIG] - start Java Flight Recording with the given config along with the profiler\n//     traces[=N]       - dump top N call traces\n//     flat[=N]         - dump top N methods (aka flat profile)\n//     samples          - count the number of samples (default)\n//     total            - count the total value (time, bytes, etc.) instead of samples\n",
                    "rendered": {
                      "text": "//     jfr              - dump events in Java Flight Recorder format\n//     jfropts=OPTIONS  - JFR recording options: numeric bitmask or 'mem'\n//     jfrsync[=CONFIG] - start Java Flight Recording with the given config along with the profiler\n//     traces[=N]       - dump top N call traces\n//     flat[=N]         - dump top N methods (aka flat profile)\n//     samples          - count the number of samples (default)\n//     total            - count the total value (time, bytes, etc.) instead of samples\n",
                      "markdown": "`//     jfr              - dump events in Java Flight Recorder format\n//     jfropts=OPTIONS  - JFR recording options: numeric bitmask or 'mem'\n//     jfrsync[=CONFIG] - start Java Flight Recording with the given config along with the profiler\n//     traces[=N]       - dump top N call traces\n//     flat[=N]         - dump top N methods (aka flat profile)\n//     samples          - count the number of samples (default)\n//     total            - count the total value (time, bytes, etc.) instead of samples\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/tsc.cpp"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 8,
                  "endLine": 45,
                  "endColumn": 23,
                  "snippet": {
                    "text": "            }\n        }\n\n        env->ExceptionClear();\n        _initialized = true;\n    }\n\n",
                    "rendered": {
                      "text": "            }\n        }\n\n        env->ExceptionClear();\n        _initialized = true;\n    }\n\n",
                      "markdown": "`            }\n        }\n\n        env->ExceptionClear();\n        _initialized = true;\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/tsc.cpp"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 28,
                  "endLine": 35,
                  "endColumn": 56,
                  "snippet": {
                    "text": "                && ((getTicksFrequency = env->GetMethodID(cls, \"getTicksFrequency\", \"()J\")) != NULL)\n                && ((counterTime = env->GetStaticMethodID(cls, \"counterTime\", \"()J\")) != NULL)) {\n\n            u64 frequency = env->CallLongMethod(env->GetStaticObjectField(cls, jvm), getTicksFrequency);\n            if (frequency > NANOTIME_FREQ) {\n                // Default 1GHz frequency might mean that rdtsc is not available\n                u64 jvm_ticks = env->CallStaticLongMethod(cls, counterTime);\n",
                    "rendered": {
                      "text": "                && ((getTicksFrequency = env->GetMethodID(cls, \"getTicksFrequency\", \"()J\")) != NULL)\n                && ((counterTime = env->GetStaticMethodID(cls, \"counterTime\", \"()J\")) != NULL)) {\n\n            u64 frequency = env->CallLongMethod(env->GetStaticObjectField(cls, jvm), getTicksFrequency);\n            if (frequency > NANOTIME_FREQ) {\n                // Default 1GHz frequency might mean that rdtsc is not available\n                u64 jvm_ticks = env->CallStaticLongMethod(cls, counterTime);\n",
                      "markdown": "`                && ((getTicksFrequency = env->GetMethodID(cls, \"getTicksFrequency\", \"()J\")) != NULL)\n                && ((counterTime = env->GetStaticMethodID(cls, \"counterTime\", \"()J\")) != NULL)) {\n\n            u64 frequency = env->CallLongMethod(env->GetStaticObjectField(cls, jvm), getTicksFrequency);\n            if (frequency > NANOTIME_FREQ) {\n                // Default 1GHz frequency might mean that rdtsc is not available\n                u64 jvm_ticks = env->CallStaticLongMethod(cls, counterTime);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/tsc.cpp"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 35,
                  "endLine": 33,
                  "endColumn": 43,
                  "snippet": {
                    "text": "        if (cls != NULL\n                && ((jvm = env->GetStaticFieldID(cls, \"jvm\", \"Ljdk/jfr/internal/JVM;\")) != NULL)\n                && ((getTicksFrequency = env->GetMethodID(cls, \"getTicksFrequency\", \"()J\")) != NULL)\n                && ((counterTime = env->GetStaticMethodID(cls, \"counterTime\", \"()J\")) != NULL)) {\n\n            u64 frequency = env->CallLongMethod(env->GetStaticObjectField(cls, jvm), getTicksFrequency);\n            if (frequency > NANOTIME_FREQ) {\n",
                    "rendered": {
                      "text": "        if (cls != NULL\n                && ((jvm = env->GetStaticFieldID(cls, \"jvm\", \"Ljdk/jfr/internal/JVM;\")) != NULL)\n                && ((getTicksFrequency = env->GetMethodID(cls, \"getTicksFrequency\", \"()J\")) != NULL)\n                && ((counterTime = env->GetStaticMethodID(cls, \"counterTime\", \"()J\")) != NULL)) {\n\n            u64 frequency = env->CallLongMethod(env->GetStaticObjectField(cls, jvm), getTicksFrequency);\n            if (frequency > NANOTIME_FREQ) {\n",
                      "markdown": "`        if (cls != NULL\n                && ((jvm = env->GetStaticFieldID(cls, \"jvm\", \"Ljdk/jfr/internal/JVM;\")) != NULL)\n                && ((getTicksFrequency = env->GetMethodID(cls, \"getTicksFrequency\", \"()J\")) != NULL)\n                && ((counterTime = env->GetStaticMethodID(cls, \"counterTime\", \"()J\")) != NULL)) {\n\n            u64 frequency = env->CallLongMethod(env->GetStaticObjectField(cls, jvm), getTicksFrequency);\n            if (frequency > NANOTIME_FREQ) {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/tsc.cpp"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 41,
                  "endLine": 32,
                  "endColumn": 80,
                  "snippet": {
                    "text": "        jclass cls = env->FindClass(\"jdk/jfr/internal/JVM\");\n        if (cls != NULL\n                && ((jvm = env->GetStaticFieldID(cls, \"jvm\", \"Ljdk/jfr/internal/JVM;\")) != NULL)\n                && ((getTicksFrequency = env->GetMethodID(cls, \"getTicksFrequency\", \"()J\")) != NULL)\n                && ((counterTime = env->GetStaticMethodID(cls, \"counterTime\", \"()J\")) != NULL)) {\n\n            u64 frequency = env->CallLongMethod(env->GetStaticObjectField(cls, jvm), getTicksFrequency);\n",
                    "rendered": {
                      "text": "        jclass cls = env->FindClass(\"jdk/jfr/internal/JVM\");\n        if (cls != NULL\n                && ((jvm = env->GetStaticFieldID(cls, \"jvm\", \"Ljdk/jfr/internal/JVM;\")) != NULL)\n                && ((getTicksFrequency = env->GetMethodID(cls, \"getTicksFrequency\", \"()J\")) != NULL)\n                && ((counterTime = env->GetStaticMethodID(cls, \"counterTime\", \"()J\")) != NULL)) {\n\n            u64 frequency = env->CallLongMethod(env->GetStaticObjectField(cls, jvm), getTicksFrequency);\n",
                      "markdown": "`        jclass cls = env->FindClass(\"jdk/jfr/internal/JVM\");\n        if (cls != NULL\n                && ((jvm = env->GetStaticFieldID(cls, \"jvm\", \"Ljdk/jfr/internal/JVM;\")) != NULL)\n                && ((getTicksFrequency = env->GetMethodID(cls, \"getTicksFrequency\", \"()J\")) != NULL)\n                && ((counterTime = env->GetStaticMethodID(cls, \"counterTime\", \"()J\")) != NULL)) {\n\n            u64 frequency = env->CallLongMethod(env->GetStaticObjectField(cls, jvm), getTicksFrequency);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/tsc.cpp"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 27,
                  "endLine": 31,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        jmethodID getTicksFrequency, counterTime;\n        jclass cls = env->FindClass(\"jdk/jfr/internal/JVM\");\n        if (cls != NULL\n                && ((jvm = env->GetStaticFieldID(cls, \"jvm\", \"Ljdk/jfr/internal/JVM;\")) != NULL)\n                && ((getTicksFrequency = env->GetMethodID(cls, \"getTicksFrequency\", \"()J\")) != NULL)\n                && ((counterTime = env->GetStaticMethodID(cls, \"counterTime\", \"()J\")) != NULL)) {\n\n",
                    "rendered": {
                      "text": "        jmethodID getTicksFrequency, counterTime;\n        jclass cls = env->FindClass(\"jdk/jfr/internal/JVM\");\n        if (cls != NULL\n                && ((jvm = env->GetStaticFieldID(cls, \"jvm\", \"Ljdk/jfr/internal/JVM;\")) != NULL)\n                && ((getTicksFrequency = env->GetMethodID(cls, \"getTicksFrequency\", \"()J\")) != NULL)\n                && ((counterTime = env->GetStaticMethodID(cls, \"counterTime\", \"()J\")) != NULL)) {\n\n",
                      "markdown": "`        jmethodID getTicksFrequency, counterTime;\n        jclass cls = env->FindClass(\"jdk/jfr/internal/JVM\");\n        if (cls != NULL\n                && ((jvm = env->GetStaticFieldID(cls, \"jvm\", \"Ljdk/jfr/internal/JVM;\")) != NULL)\n                && ((getTicksFrequency = env->GetMethodID(cls, \"getTicksFrequency\", \"()J\")) != NULL)\n                && ((counterTime = env->GetStaticMethodID(cls, \"counterTime\", \"()J\")) != NULL)) {\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/tsc.cpp"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 15,
                  "endLine": 25,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    }\n\n    if (!_initialized) {\n        JNIEnv* env = VM::jni();\n\n        jfieldID jvm;\n        jmethodID getTicksFrequency, counterTime;\n",
                    "rendered": {
                      "text": "    }\n\n    if (!_initialized) {\n        JNIEnv* env = VM::jni();\n\n        jfieldID jvm;\n        jmethodID getTicksFrequency, counterTime;\n",
                      "markdown": "`    }\n\n    if (!_initialized) {\n        JNIEnv* env = VM::jni();\n\n        jfieldID jvm;\n        jmethodID getTicksFrequency, counterTime;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/lockTracer.cpp"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 33,
                  "endLine": 241,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\nchar* LockTracer::getLockName(jvmtiEnv* jvmti, JNIEnv* env, jobject lock) {\n    char* class_name;\n    if (jvmti->GetClassSignature(env->GetObjectClass(lock), &class_name, NULL) != 0) {\n        return NULL;\n    }\n    return class_name;\n",
                    "rendered": {
                      "text": "\nchar* LockTracer::getLockName(jvmtiEnv* jvmti, JNIEnv* env, jobject lock) {\n    char* class_name;\n    if (jvmti->GetClassSignature(env->GetObjectClass(lock), &class_name, NULL) != 0) {\n        return NULL;\n    }\n    return class_name;\n",
                      "markdown": "`\nchar* LockTracer::getLockName(jvmtiEnv* jvmti, JNIEnv* env, jobject lock) {\n    char* class_name;\n    if (jvmti->GetClassSignature(env->GetObjectClass(lock), &class_name, NULL) != 0) {\n        return NULL;\n    }\n    return class_name;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/lockTracer.cpp"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 11,
                  "endLine": 236,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    if (jvmti->GetCurrentThread(&thread) != 0) {\n        return NULL;\n    }\n    return env->GetObjectField(thread, _parkBlocker);\n}\n\nchar* LockTracer::getLockName(jvmtiEnv* jvmti, JNIEnv* env, jobject lock) {\n",
                    "rendered": {
                      "text": "    if (jvmti->GetCurrentThread(&thread) != 0) {\n        return NULL;\n    }\n    return env->GetObjectField(thread, _parkBlocker);\n}\n\nchar* LockTracer::getLockName(jvmtiEnv* jvmti, JNIEnv* env, jobject lock) {\n",
                      "markdown": "`    if (jvmti->GetCurrentThread(&thread) != 0) {\n        return NULL;\n    }\n    return env->GetObjectField(thread, _parkBlocker);\n}\n\nchar* LockTracer::getLockName(jvmtiEnv* jvmti, JNIEnv* env, jobject lock) {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/lockTracer.cpp"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 22,
                  "endLine": 228,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        return;\n    }\n\n    _orig_unsafe_park(env, instance, isAbsolute, time);\n}\n\njobject LockTracer::getParkBlocker(jvmtiEnv* jvmti, JNIEnv* env) {\n",
                    "rendered": {
                      "text": "        return;\n    }\n\n    _orig_unsafe_park(env, instance, isAbsolute, time);\n}\n\njobject LockTracer::getParkBlocker(jvmtiEnv* jvmti, JNIEnv* env) {\n",
                      "markdown": "`        return;\n    }\n\n    _orig_unsafe_park(env, instance, isAbsolute, time);\n}\n\njobject LockTracer::getParkBlocker(jvmtiEnv* jvmti, JNIEnv* env) {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/lockTracer.cpp"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 26,
                  "endLine": 216,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        }\n\n        u64 park_start_time = TSC::ticks();\n        _orig_unsafe_park(env, instance, isAbsolute, time);\n        u64 park_end_time = TSC::ticks();\n\n        const u64 duration = park_end_time - park_start_time;\n",
                    "rendered": {
                      "text": "        }\n\n        u64 park_start_time = TSC::ticks();\n        _orig_unsafe_park(env, instance, isAbsolute, time);\n        u64 park_end_time = TSC::ticks();\n\n        const u64 duration = park_end_time - park_start_time;\n",
                      "markdown": "`        }\n\n        u64 park_start_time = TSC::ticks();\n        _orig_unsafe_park(env, instance, isAbsolute, time);\n        u64 park_end_time = TSC::ticks();\n\n        const u64 duration = park_end_time - park_start_time;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/lockTracer.cpp"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 43,
                  "endLine": 201,
                  "endColumn": 68,
                  "snippet": {
                    "text": "    return _orig_register_natives(env, cls, methods, nMethods);\n}\n\nvoid JNICALL LockTracer::UnsafeParkHook(JNIEnv* env, jobject instance, jboolean isAbsolute, jlong time) {\n    while (_enabled) {\n        jvmtiEnv* jvmti = VM::jvmti();\n        jobject park_blocker = getParkBlocker(jvmti, env);\n",
                    "rendered": {
                      "text": "    return _orig_register_natives(env, cls, methods, nMethods);\n}\n\nvoid JNICALL LockTracer::UnsafeParkHook(JNIEnv* env, jobject instance, jboolean isAbsolute, jlong time) {\n    while (_enabled) {\n        jvmtiEnv* jvmti = VM::jvmti();\n        jobject park_blocker = getParkBlocker(jvmti, env);\n",
                      "markdown": "`    return _orig_register_natives(env, cls, methods, nMethods);\n}\n\nvoid JNICALL LockTracer::UnsafeParkHook(JNIEnv* env, jobject instance, jboolean isAbsolute, jlong time) {\n    while (_enabled) {\n        jvmtiEnv* jvmti = VM::jvmti();\n        jobject park_blocker = getParkBlocker(jvmti, env);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/lockTracer.cpp"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 8,
                  "endLine": 145,
                  "endColumn": 23,
                  "snippet": {
                    "text": "void LockTracer::setUnsafeParkEntry(JNIEnv* env, UnsafeParkFunc entry) {\n    if (_setEntry != NULL) {\n        env->CallStaticVoidMethod(_LockTracer, _setEntry, (jlong)(uintptr_t)entry);\n        env->ExceptionClear();\n    }\n}\n\n",
                    "rendered": {
                      "text": "void LockTracer::setUnsafeParkEntry(JNIEnv* env, UnsafeParkFunc entry) {\n    if (_setEntry != NULL) {\n        env->CallStaticVoidMethod(_LockTracer, _setEntry, (jlong)(uintptr_t)entry);\n        env->ExceptionClear();\n    }\n}\n\n",
                      "markdown": "`void LockTracer::setUnsafeParkEntry(JNIEnv* env, UnsafeParkFunc entry) {\n    if (_setEntry != NULL) {\n        env->CallStaticVoidMethod(_LockTracer, _setEntry, (jlong)(uintptr_t)entry);\n        env->ExceptionClear();\n    }\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/lockTracer.cpp"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 39,
                  "endLine": 142,
                  "endColumn": 63,
                  "snippet": {
                    "text": "    return Error::OK;\n}\n\nvoid LockTracer::setUnsafeParkEntry(JNIEnv* env, UnsafeParkFunc entry) {\n    if (_setEntry != NULL) {\n        env->CallStaticVoidMethod(_LockTracer, _setEntry, (jlong)(uintptr_t)entry);\n        env->ExceptionClear();\n",
                    "rendered": {
                      "text": "    return Error::OK;\n}\n\nvoid LockTracer::setUnsafeParkEntry(JNIEnv* env, UnsafeParkFunc entry) {\n    if (_setEntry != NULL) {\n        env->CallStaticVoidMethod(_LockTracer, _setEntry, (jlong)(uintptr_t)entry);\n        env->ExceptionClear();\n",
                      "markdown": "`    return Error::OK;\n}\n\nvoid LockTracer::setUnsafeParkEntry(JNIEnv* env, UnsafeParkFunc entry) {\n    if (_setEntry != NULL) {\n        env->CallStaticVoidMethod(_LockTracer, _setEntry, (jlong)(uintptr_t)entry);\n        env->ExceptionClear();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/lockTracer.cpp"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 16,
                  "endLine": 134,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    }\n    _LockTracer = (jclass)env->NewGlobalRef(cls);\n\n    _setEntry = env->GetStaticMethodID(_LockTracer, \"setEntry\", \"(J)V\");\n    if (_setEntry == NULL) {\n        return Error(\"setEntry method not found\");\n    }\n",
                    "rendered": {
                      "text": "    }\n    _LockTracer = (jclass)env->NewGlobalRef(cls);\n\n    _setEntry = env->GetStaticMethodID(_LockTracer, \"setEntry\", \"(J)V\");\n    if (_setEntry == NULL) {\n        return Error(\"setEntry method not found\");\n    }\n",
                      "markdown": "`    }\n    _LockTracer = (jclass)env->NewGlobalRef(cls);\n\n    _setEntry = env->GetStaticMethodID(_LockTracer, \"setEntry\", \"(J)V\");\n    if (_setEntry == NULL) {\n        return Error(\"setEntry method not found\");\n    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/lockTracer.cpp"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 8,
                  "endLine": 127,
                  "endColumn": 23,
                  "snippet": {
                    "text": "            return Error(\"LockTracer registration failed\");\n        }\n    } else {\n        env->ExceptionClear();\n        if ((cls = env->FindClass(LOCK_TRACER_NAME)) == NULL) {\n            return Error(\"LockTracer registration failed\");\n        }\n",
                    "rendered": {
                      "text": "            return Error(\"LockTracer registration failed\");\n        }\n    } else {\n        env->ExceptionClear();\n        if ((cls = env->FindClass(LOCK_TRACER_NAME)) == NULL) {\n            return Error(\"LockTracer registration failed\");\n        }\n",
                      "markdown": "`            return Error(\"LockTracer registration failed\");\n        }\n    } else {\n        env->ExceptionClear();\n        if ((cls = env->FindClass(LOCK_TRACER_NAME)) == NULL) {\n            return Error(\"LockTracer registration failed\");\n        }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/lockTracer.cpp"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 19,
                  "endLine": 115,
                  "endColumn": 27,
                  "snippet": {
                    "text": "        return Error(\"Unsafe_park address not found\");\n    }\n\n    _parkBlocker = env->GetFieldID(env->FindClass(\"java/lang/Thread\"), \"parkBlocker\", \"Ljava/lang/Object;\");\n    if (_parkBlocker == NULL) {\n        return Error(\"parkBlocker field not found\");\n    }\n",
                    "rendered": {
                      "text": "        return Error(\"Unsafe_park address not found\");\n    }\n\n    _parkBlocker = env->GetFieldID(env->FindClass(\"java/lang/Thread\"), \"parkBlocker\", \"Ljava/lang/Object;\");\n    if (_parkBlocker == NULL) {\n        return Error(\"parkBlocker field not found\");\n    }\n",
                      "markdown": "`        return Error(\"Unsafe_park address not found\");\n    }\n\n    _parkBlocker = env->GetFieldID(env->FindClass(\"java/lang/Thread\"), \"parkBlocker\", \"Ljava/lang/Object;\");\n    if (_parkBlocker == NULL) {\n        return Error(\"parkBlocker field not found\");\n    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/lockTracer.cpp"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 8,
                  "endLine": 111,
                  "endColumn": 23,
                  "snippet": {
                    "text": "        jvmti->SetJNIFunctionTable(jni_functions);\n        jvmti->Deallocate((unsigned char*)jni_functions);\n    }\n    if (env->ExceptionCheck() || _orig_unsafe_park == NULL) {\n        return Error(\"Unsafe_park address not found\");\n    }\n\n",
                    "rendered": {
                      "text": "        jvmti->SetJNIFunctionTable(jni_functions);\n        jvmti->Deallocate((unsigned char*)jni_functions);\n    }\n    if (env->ExceptionCheck() || _orig_unsafe_park == NULL) {\n        return Error(\"Unsafe_park address not found\");\n    }\n\n",
                      "markdown": "`        jvmti->SetJNIFunctionTable(jni_functions);\n        jvmti->Deallocate((unsigned char*)jni_functions);\n    }\n    if (env->ExceptionCheck() || _orig_unsafe_park == NULL) {\n        return Error(\"Unsafe_park address not found\");\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/lockTracer.cpp"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 33,
                  "endLine": 93,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    }\n    _Unsafe = (jclass)env->NewGlobalRef(unsafe);\n\n    jmethodID register_natives = env->GetStaticMethodID(_Unsafe, \"registerNatives\", \"()V\");\n    if (register_natives == NULL) {\n        return Error(\"registerNatives method not found\");\n    }\n",
                    "rendered": {
                      "text": "    }\n    _Unsafe = (jclass)env->NewGlobalRef(unsafe);\n\n    jmethodID register_natives = env->GetStaticMethodID(_Unsafe, \"registerNatives\", \"()V\");\n    if (register_natives == NULL) {\n        return Error(\"registerNatives method not found\");\n    }\n",
                      "markdown": "`    }\n    _Unsafe = (jclass)env->NewGlobalRef(unsafe);\n\n    jmethodID register_natives = env->GetStaticMethodID(_Unsafe, \"registerNatives\", \"()V\");\n    if (register_natives == NULL) {\n        return Error(\"registerNatives method not found\");\n    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/lockTracer.cpp"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 8,
                  "endLine": 86,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    // Try JDK 9+ package first, then fallback to JDK 8 package\n    jclass unsafe = env->FindClass(\"jdk/internal/misc/Unsafe\");\n    if (unsafe == NULL) {\n        env->ExceptionClear();\n        if ((unsafe = env->FindClass(\"sun/misc/Unsafe\")) == NULL) {\n            return Error(\"Unsafe class not found\");\n        }\n",
                    "rendered": {
                      "text": "    // Try JDK 9+ package first, then fallback to JDK 8 package\n    jclass unsafe = env->FindClass(\"jdk/internal/misc/Unsafe\");\n    if (unsafe == NULL) {\n        env->ExceptionClear();\n        if ((unsafe = env->FindClass(\"sun/misc/Unsafe\")) == NULL) {\n            return Error(\"Unsafe class not found\");\n        }\n",
                      "markdown": "`    // Try JDK 9+ package first, then fallback to JDK 8 package\n    jclass unsafe = env->FindClass(\"jdk/internal/misc/Unsafe\");\n    if (unsafe == NULL) {\n        env->ExceptionClear();\n        if ((unsafe = env->FindClass(\"sun/misc/Unsafe\")) == NULL) {\n            return Error(\"Unsafe class not found\");\n        }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/lockTracer.cpp"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 12,
                  "endLine": 50,
                  "endColumn": 27,
                  "snippet": {
                    "text": "        Error error = initialize(jvmti, env);\n        if (error) {\n            Log::warn(\"ReentrantLock tracing unavailable: %s\", error.message());\n            env->ExceptionClear();\n        }\n        _initialized = true;\n    }\n",
                    "rendered": {
                      "text": "        Error error = initialize(jvmti, env);\n        if (error) {\n            Log::warn(\"ReentrantLock tracing unavailable: %s\", error.message());\n            env->ExceptionClear();\n        }\n        _initialized = true;\n    }\n",
                      "markdown": "`        Error error = initialize(jvmti, env);\n        if (error) {\n            Log::warn(\"ReentrantLock tracing unavailable: %s\", error.message());\n            env->ExceptionClear();\n        }\n        _initialized = true;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/lockTracer.cpp"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 6,
                  "endLine": 174,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        jvmti->GetTag(thread, (jlong*)&enter_time);\n    }\n\n    // Time is meaningless if lock attempt has started before profiling\n    if (enter_time < _start_time) {\n        return;\n    }\n",
                    "rendered": {
                      "text": "        jvmti->GetTag(thread, (jlong*)&enter_time);\n    }\n\n    // Time is meaningless if lock attempt has started before profiling\n    if (enter_time < _start_time) {\n        return;\n    }\n",
                      "markdown": "`        jvmti->GetTag(thread, (jlong*)&enter_time);\n    }\n\n    // Time is meaningless if lock attempt has started before profiling\n    if (enter_time < _start_time) {\n        return;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/lockTracer.cpp"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 44,
                  "endLine": 104,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        jni_functions->RegisterNatives = RegisterNativesHook;\n        jvmti->SetJNIFunctionTable(jni_functions);\n\n        // Trace Unsafe.registerNatives() to find the original address of Unsafe.park() native\n        env->CallStaticVoidMethod(_Unsafe, register_natives);\n\n        jni_functions->RegisterNatives = _orig_register_natives;\n",
                    "rendered": {
                      "text": "        jni_functions->RegisterNatives = RegisterNativesHook;\n        jvmti->SetJNIFunctionTable(jni_functions);\n\n        // Trace Unsafe.registerNatives() to find the original address of Unsafe.park() native\n        env->CallStaticVoidMethod(_Unsafe, register_natives);\n\n        jni_functions->RegisterNatives = _orig_register_natives;\n",
                      "markdown": "`        jni_functions->RegisterNatives = RegisterNativesHook;\n        jvmti->SetJNIFunctionTable(jni_functions);\n\n        // Trace Unsafe.registerNatives() to find the original address of Unsafe.park() native\n        env->CallStaticVoidMethod(_Unsafe, register_natives);\n\n        jni_functions->RegisterNatives = _orig_register_natives;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/lockTracer.cpp"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 11,
                  "endLine": 68,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\nvoid LockTracer::stop() {\n    jvmtiEnv* jvmti = VM::jvmti();\n    JNIEnv* env = VM::jni();\n\n    // Disable Java Monitor events\n    jvmti->SetEventNotificationMode(JVMTI_DISABLE, JVMTI_EVENT_MONITOR_CONTENDED_ENTER, NULL);\n",
                    "rendered": {
                      "text": "\nvoid LockTracer::stop() {\n    jvmtiEnv* jvmti = VM::jvmti();\n    JNIEnv* env = VM::jni();\n\n    // Disable Java Monitor events\n    jvmti->SetEventNotificationMode(JVMTI_DISABLE, JVMTI_EVENT_MONITOR_CONTENDED_ENTER, NULL);\n",
                      "markdown": "`\nvoid LockTracer::stop() {\n    jvmtiEnv* jvmti = VM::jvmti();\n    JNIEnv* env = VM::jni();\n\n    // Disable Java Monitor events\n    jvmti->SetEventNotificationMode(JVMTI_DISABLE, JVMTI_EVENT_MONITOR_CONTENDED_ENTER, NULL);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/lockTracer.cpp"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 11,
                  "endLine": 44,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    _total_duration = 0;\n\n    jvmtiEnv* jvmti = VM::jvmti();\n    JNIEnv* env = VM::jni();\n\n    if (!_initialized) {\n        Error error = initialize(jvmti, env);\n",
                    "rendered": {
                      "text": "    _total_duration = 0;\n\n    jvmtiEnv* jvmti = VM::jvmti();\n    JNIEnv* env = VM::jni();\n\n    if (!_initialized) {\n        Error error = initialize(jvmti, env);\n",
                      "markdown": "`    _total_duration = 0;\n\n    jvmtiEnv* jvmti = VM::jvmti();\n    JNIEnv* env = VM::jni();\n\n    if (!_initialized) {\n        Error error = initialize(jvmti, env);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/lockTracer.cpp"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 41,
                  "endLine": 14,
                  "endColumn": 47,
                  "snippet": {
                    "text": "#include \"tsc.h\"\n\n\n// On 64-bit platforms, we can store lock time in a pthread local.\n// This is faster than JVM TI SetTag/GetTag.\n#define CAN_USE_TLS (sizeof(void*) >= sizeof(u64))\n\n",
                    "rendered": {
                      "text": "#include \"tsc.h\"\n\n\n// On 64-bit platforms, we can store lock time in a pthread local.\n// This is faster than JVM TI SetTag/GetTag.\n#define CAN_USE_TLS (sizeof(void*) >= sizeof(u64))\n\n",
                      "markdown": "`#include \"tsc.h\"\n\n\n// On 64-bit platforms, we can store lock time in a pthread local.\n// This is faster than JVM TI SetTag/GetTag.\n#define CAN_USE_TLS (sizeof(void*) >= sizeof(u64))\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/stackFrame_riscv64.cpp"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 18,
                  "endLine": 68,
                  "endColumn": 22,
                  "snippet": {
                    "text": "}\n\nbool StackFrame::unwindStub(instruction_t* entry, const char* name, uintptr_t& pc, uintptr_t& sp, uintptr_t& fp) {\n    instruction_t* ip = (instruction_t*)pc;\n    if (ip == entry\n        || strncmp(name, \"itable\", 6) == 0\n        || strncmp(name, \"vtable\", 6) == 0\n",
                    "rendered": {
                      "text": "}\n\nbool StackFrame::unwindStub(instruction_t* entry, const char* name, uintptr_t& pc, uintptr_t& sp, uintptr_t& fp) {\n    instruction_t* ip = (instruction_t*)pc;\n    if (ip == entry\n        || strncmp(name, \"itable\", 6) == 0\n        || strncmp(name, \"vtable\", 6) == 0\n",
                      "markdown": "`}\n\nbool StackFrame::unwindStub(instruction_t* entry, const char* name, uintptr_t& pc, uintptr_t& sp, uintptr_t& fp) {\n    instruction_t* ip = (instruction_t*)pc;\n    if (ip == entry\n        || strncmp(name, \"itable\", 6) == 0\n        || strncmp(name, \"vtable\", 6) == 0\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/symbols_macos.cpp"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 41,
                  "endLine": 93,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n        for (uint32_t i = 0; i < header->ncmds; i++) {\n            if (lc->cmd == LC_SEGMENT_64) {\n                const segment_command_64* sc = (const segment_command_64*)lc;\n                if ((sc->initprot & 4) != 0) {\n                    if (text_base == UNDEFINED || strcmp(sc->segname, \"__TEXT\") == 0) {\n                        text_base = (const char*)_image_base - sc->vmaddr;\n",
                    "rendered": {
                      "text": "\n        for (uint32_t i = 0; i < header->ncmds; i++) {\n            if (lc->cmd == LC_SEGMENT_64) {\n                const segment_command_64* sc = (const segment_command_64*)lc;\n                if ((sc->initprot & 4) != 0) {\n                    if (text_base == UNDEFINED || strcmp(sc->segname, \"__TEXT\") == 0) {\n                        text_base = (const char*)_image_base - sc->vmaddr;\n",
                      "markdown": "`\n        for (uint32_t i = 0; i < header->ncmds; i++) {\n            if (lc->cmd == LC_SEGMENT_64) {\n                const segment_command_64* sc = (const segment_command_64*)lc;\n                if ((sc->initprot & 4) != 0) {\n                    if (text_base == UNDEFINED || strcmp(sc->segname, \"__TEXT\") == 0) {\n                        text_base = (const char*)_image_base - sc->vmaddr;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/stackFrame_aarch64.cpp"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 56,
                  "endLine": 212,
                  "endColumn": 61,
                  "snippet": {
                    "text": "            for (uintptr_t prev_pc = pc() - 4; pc() - prev_pc <= max_distance; prev_pc -= 4) {\n                instruction_t insn = *(instruction_t*)prev_pc;\n                unsigned int reg = (insn >> 16) & 31;\n                if ((insn & 0xffe0ffff) == 0xaa0003e0 && reg >= 6) {\n                    // mov x0, reg\n                    REG(regs[0], x[0]) = REG(regs[reg], x[reg]);\n                    pc() -= sizeof(instruction_t);\n",
                    "rendered": {
                      "text": "            for (uintptr_t prev_pc = pc() - 4; pc() - prev_pc <= max_distance; prev_pc -= 4) {\n                instruction_t insn = *(instruction_t*)prev_pc;\n                unsigned int reg = (insn >> 16) & 31;\n                if ((insn & 0xffe0ffff) == 0xaa0003e0 && reg >= 6) {\n                    // mov x0, reg\n                    REG(regs[0], x[0]) = REG(regs[reg], x[reg]);\n                    pc() -= sizeof(instruction_t);\n",
                      "markdown": "`            for (uintptr_t prev_pc = pc() - 4; pc() - prev_pc <= max_distance; prev_pc -= 4) {\n                instruction_t insn = *(instruction_t*)prev_pc;\n                unsigned int reg = (insn >> 16) & 31;\n                if ((insn & 0xffe0ffff) == 0xaa0003e0 && reg >= 6) {\n                    // mov x0, reg\n                    REG(regs[0], x[0]) = REG(regs[reg], x[reg]);\n                    pc() -= sizeof(instruction_t);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/stackFrame_aarch64.cpp"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 28,
                  "endLine": 211,
                  "endColumn": 33,
                  "snippet": {
                    "text": "            // Try to restore the original value of x0 saved in another register\n            for (uintptr_t prev_pc = pc() - 4; pc() - prev_pc <= max_distance; prev_pc -= 4) {\n                instruction_t insn = *(instruction_t*)prev_pc;\n                unsigned int reg = (insn >> 16) & 31;\n                if ((insn & 0xffe0ffff) == 0xaa0003e0 && reg >= 6) {\n                    // mov x0, reg\n                    REG(regs[0], x[0]) = REG(regs[reg], x[reg]);\n",
                    "rendered": {
                      "text": "            // Try to restore the original value of x0 saved in another register\n            for (uintptr_t prev_pc = pc() - 4; pc() - prev_pc <= max_distance; prev_pc -= 4) {\n                instruction_t insn = *(instruction_t*)prev_pc;\n                unsigned int reg = (insn >> 16) & 31;\n                if ((insn & 0xffe0ffff) == 0xaa0003e0 && reg >= 6) {\n                    // mov x0, reg\n                    REG(regs[0], x[0]) = REG(regs[reg], x[reg]);\n",
                      "markdown": "`            // Try to restore the original value of x0 saved in another register\n            for (uintptr_t prev_pc = pc() - 4; pc() - prev_pc <= max_distance; prev_pc -= 4) {\n                instruction_t insn = *(instruction_t*)prev_pc;\n                unsigned int reg = (insn >> 16) & 31;\n                if ((insn & 0xffe0ffff) == 0xaa0003e0 && reg >= 6) {\n                    // mov x0, reg\n                    REG(regs[0], x[0]) = REG(regs[reg], x[reg]);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/stackFrame_aarch64.cpp"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 18,
                  "endLine": 168,
                  "endColumn": 22,
                  "snippet": {
                    "text": "}\n\nvoid StackFrame::adjustSP(const void* entry, const void* pc, uintptr_t& sp) {\n    instruction_t* ip = (instruction_t*)pc;\n    if (ip > entry && (ip[-1] == 0xa9bf27ff || (ip[-1] == 0xd63f0100 && ip[-2] == 0xa9bf27ff))) {\n        // When calling a leaf native from Java, JVM puts a dummy frame link onto the stack,\n        // thus breaking the invariant: sender_sp == current_sp + frame_size.\n",
                    "rendered": {
                      "text": "}\n\nvoid StackFrame::adjustSP(const void* entry, const void* pc, uintptr_t& sp) {\n    instruction_t* ip = (instruction_t*)pc;\n    if (ip > entry && (ip[-1] == 0xa9bf27ff || (ip[-1] == 0xd63f0100 && ip[-2] == 0xa9bf27ff))) {\n        // When calling a leaf native from Java, JVM puts a dummy frame link onto the stack,\n        // thus breaking the invariant: sender_sp == current_sp + frame_size.\n",
                      "markdown": "`}\n\nvoid StackFrame::adjustSP(const void* entry, const void* pc, uintptr_t& sp) {\n    instruction_t* ip = (instruction_t*)pc;\n    if (ip > entry && (ip[-1] == 0xa9bf27ff || (ip[-1] == 0xd63f0100 && ip[-2] == 0xa9bf27ff))) {\n        // When calling a leaf native from Java, JVM puts a dummy frame link onto the stack,\n        // thus breaking the invariant: sender_sp == current_sp + frame_size.\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/stackFrame_aarch64.cpp"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 18,
                  "endLine": 128,
                  "endColumn": 22,
                  "snippet": {
                    "text": "}\n\nbool StackFrame::unwindCompiled(NMethod* nm, uintptr_t& pc, uintptr_t& sp, uintptr_t& fp) {\n    instruction_t* ip = (instruction_t*)pc;\n    instruction_t* entry = (instruction_t*)nm->entry();\n    if ((*ip & 0xffe07fff) == 0xa9007bfd) {\n        // stp  x29, x30, [sp, #offset]\n",
                    "rendered": {
                      "text": "}\n\nbool StackFrame::unwindCompiled(NMethod* nm, uintptr_t& pc, uintptr_t& sp, uintptr_t& fp) {\n    instruction_t* ip = (instruction_t*)pc;\n    instruction_t* entry = (instruction_t*)nm->entry();\n    if ((*ip & 0xffe07fff) == 0xa9007bfd) {\n        // stp  x29, x30, [sp, #offset]\n",
                      "markdown": "`}\n\nbool StackFrame::unwindCompiled(NMethod* nm, uintptr_t& pc, uintptr_t& sp, uintptr_t& fp) {\n    instruction_t* ip = (instruction_t*)pc;\n    instruction_t* entry = (instruction_t*)nm->entry();\n    if ((*ip & 0xffe07fff) == 0xa9007bfd) {\n        // stp  x29, x30, [sp, #offset]\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/stackFrame_aarch64.cpp"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 18,
                  "endLine": 77,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n\nbool StackFrame::unwindStub(instruction_t* entry, const char* name, uintptr_t& pc, uintptr_t& sp, uintptr_t& fp) {\n    instruction_t* ip = (instruction_t*)pc;\n    if (ip == entry || *ip == 0xd65f03c0\n        || strncmp(name, \"itable\", 6) == 0\n        || strncmp(name, \"vtable\", 6) == 0\n",
                    "rendered": {
                      "text": "\n\nbool StackFrame::unwindStub(instruction_t* entry, const char* name, uintptr_t& pc, uintptr_t& sp, uintptr_t& fp) {\n    instruction_t* ip = (instruction_t*)pc;\n    if (ip == entry || *ip == 0xd65f03c0\n        || strncmp(name, \"itable\", 6) == 0\n        || strncmp(name, \"vtable\", 6) == 0\n",
                      "markdown": "`\n\nbool StackFrame::unwindStub(instruction_t* entry, const char* name, uintptr_t& pc, uintptr_t& sp, uintptr_t& fp) {\n    instruction_t* ip = (instruction_t*)pc;\n    if (ip == entry || *ip == 0xd65f03c0\n        || strncmp(name, \"itable\", 6) == 0\n        || strncmp(name, \"vtable\", 6) == 0\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/flameGraph.cpp"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 7,
                  "endLine": 162,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        tail = printTill(out, tail, \"/*frames:*/\");\n        printFrame(out, FRAME_NATIVE << 28, _root, 0, 0);\n\n        tail = printTill(out, tail, \"/*highlight:*/\");\n\n        out << tail;\n    }\n",
                    "rendered": {
                      "text": "        tail = printTill(out, tail, \"/*frames:*/\");\n        printFrame(out, FRAME_NATIVE << 28, _root, 0, 0);\n\n        tail = printTill(out, tail, \"/*highlight:*/\");\n\n        out << tail;\n    }\n",
                      "markdown": "`        tail = printTill(out, tail, \"/*frames:*/\");\n        printFrame(out, FRAME_NATIVE << 28, _root, 0, 0);\n\n        tail = printTill(out, tail, \"/*highlight:*/\");\n\n        out << tail;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/flameGraph.cpp"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 7,
                  "endLine": 159,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        tail = printTill(out, tail, \"/*cpool:*/\");\n        printCpool(out);\n\n        tail = printTill(out, tail, \"/*frames:*/\");\n        printFrame(out, FRAME_NATIVE << 28, _root, 0, 0);\n\n        tail = printTill(out, tail, \"/*highlight:*/\");\n",
                    "rendered": {
                      "text": "        tail = printTill(out, tail, \"/*cpool:*/\");\n        printCpool(out);\n\n        tail = printTill(out, tail, \"/*frames:*/\");\n        printFrame(out, FRAME_NATIVE << 28, _root, 0, 0);\n\n        tail = printTill(out, tail, \"/*highlight:*/\");\n",
                      "markdown": "`        tail = printTill(out, tail, \"/*cpool:*/\");\n        printCpool(out);\n\n        tail = printTill(out, tail, \"/*frames:*/\");\n        printFrame(out, FRAME_NATIVE << 28, _root, 0, 0);\n\n        tail = printTill(out, tail, \"/*highlight:*/\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/flameGraph.cpp"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 7,
                  "endLine": 156,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        tail = printTill(out, tail, \"/*depth:*/0\");\n        out << depth;\n\n        tail = printTill(out, tail, \"/*cpool:*/\");\n        printCpool(out);\n\n        tail = printTill(out, tail, \"/*frames:*/\");\n",
                    "rendered": {
                      "text": "        tail = printTill(out, tail, \"/*depth:*/0\");\n        out << depth;\n\n        tail = printTill(out, tail, \"/*cpool:*/\");\n        printCpool(out);\n\n        tail = printTill(out, tail, \"/*frames:*/\");\n",
                      "markdown": "`        tail = printTill(out, tail, \"/*depth:*/0\");\n        out << depth;\n\n        tail = printTill(out, tail, \"/*cpool:*/\");\n        printCpool(out);\n\n        tail = printTill(out, tail, \"/*frames:*/\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/flameGraph.cpp"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 7,
                  "endLine": 153,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        tail = printTill(out, tail, \"/*reverse:*/false\");\n        out << (_reverse ? \"true\" : \"false\");\n\n        tail = printTill(out, tail, \"/*depth:*/0\");\n        out << depth;\n\n        tail = printTill(out, tail, \"/*cpool:*/\");\n",
                    "rendered": {
                      "text": "        tail = printTill(out, tail, \"/*reverse:*/false\");\n        out << (_reverse ? \"true\" : \"false\");\n\n        tail = printTill(out, tail, \"/*depth:*/0\");\n        out << depth;\n\n        tail = printTill(out, tail, \"/*cpool:*/\");\n",
                      "markdown": "`        tail = printTill(out, tail, \"/*reverse:*/false\");\n        out << (_reverse ? \"true\" : \"false\");\n\n        tail = printTill(out, tail, \"/*depth:*/0\");\n        out << depth;\n\n        tail = printTill(out, tail, \"/*cpool:*/\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/flameGraph.cpp"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 7,
                  "endLine": 150,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        tail = printTill(out, tail, \"/*title:*/\");\n        out << _title;\n\n        tail = printTill(out, tail, \"/*reverse:*/false\");\n        out << (_reverse ? \"true\" : \"false\");\n\n        tail = printTill(out, tail, \"/*depth:*/0\");\n",
                    "rendered": {
                      "text": "        tail = printTill(out, tail, \"/*title:*/\");\n        out << _title;\n\n        tail = printTill(out, tail, \"/*reverse:*/false\");\n        out << (_reverse ? \"true\" : \"false\");\n\n        tail = printTill(out, tail, \"/*depth:*/0\");\n",
                      "markdown": "`        tail = printTill(out, tail, \"/*title:*/\");\n        out << _title;\n\n        tail = printTill(out, tail, \"/*reverse:*/false\");\n        out << (_reverse ? \"true\" : \"false\");\n\n        tail = printTill(out, tail, \"/*depth:*/0\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/flameGraph.cpp"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 7,
                  "endLine": 147,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        tail = printTill(out, tail, \"/*height:*/300\");\n        out << std::min(depth * 16, MAX_CANVAS_HEIGHT);\n\n        tail = printTill(out, tail, \"/*title:*/\");\n        out << _title;\n\n        tail = printTill(out, tail, \"/*reverse:*/false\");\n",
                    "rendered": {
                      "text": "        tail = printTill(out, tail, \"/*height:*/300\");\n        out << std::min(depth * 16, MAX_CANVAS_HEIGHT);\n\n        tail = printTill(out, tail, \"/*title:*/\");\n        out << _title;\n\n        tail = printTill(out, tail, \"/*reverse:*/false\");\n",
                      "markdown": "`        tail = printTill(out, tail, \"/*height:*/300\");\n        out << std::min(depth * 16, MAX_CANVAS_HEIGHT);\n\n        tail = printTill(out, tail, \"/*title:*/\");\n        out << _title;\n\n        tail = printTill(out, tail, \"/*reverse:*/false\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/flameGraph.cpp"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 7,
                  "endLine": 144,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    } else {\n        const char* tail = FLAMEGRAPH_TEMPLATE;\n\n        tail = printTill(out, tail, \"/*height:*/300\");\n        out << std::min(depth * 16, MAX_CANVAS_HEIGHT);\n\n        tail = printTill(out, tail, \"/*title:*/\");\n",
                    "rendered": {
                      "text": "    } else {\n        const char* tail = FLAMEGRAPH_TEMPLATE;\n\n        tail = printTill(out, tail, \"/*height:*/300\");\n        out << std::min(depth * 16, MAX_CANVAS_HEIGHT);\n\n        tail = printTill(out, tail, \"/*title:*/\");\n",
                      "markdown": "`    } else {\n        const char* tail = FLAMEGRAPH_TEMPLATE;\n\n        tail = printTill(out, tail, \"/*height:*/300\");\n        out << std::min(depth * 16, MAX_CANVAS_HEIGHT);\n\n        tail = printTill(out, tail, \"/*title:*/\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/flameGraph.cpp"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 19,
                  "endLine": 142,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n        out << tail;\n    } else {\n        const char* tail = FLAMEGRAPH_TEMPLATE;\n\n        tail = printTill(out, tail, \"/*height:*/300\");\n        out << std::min(depth * 16, MAX_CANVAS_HEIGHT);\n",
                    "rendered": {
                      "text": "\n        out << tail;\n    } else {\n        const char* tail = FLAMEGRAPH_TEMPLATE;\n\n        tail = printTill(out, tail, \"/*height:*/300\");\n        out << std::min(depth * 16, MAX_CANVAS_HEIGHT);\n",
                      "markdown": "`\n        out << tail;\n    } else {\n        const char* tail = FLAMEGRAPH_TEMPLATE;\n\n        tail = printTill(out, tail, \"/*height:*/300\");\n        out << std::min(depth * 16, MAX_CANVAS_HEIGHT);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/flameGraph.cpp"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 7,
                  "endLine": 131,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        tail = printTill(out, tail, \"/*count:*/\");\n        out << Format().thousands(_root._total);\n\n        tail = printTill(out, tail, \"/*tree:*/\");\n\n        const char** names = new const char*[_cpool.size() + 1];\n        for (std::map<std::string, u32>::const_iterator it = _cpool.begin(); it != _cpool.end(); ++it) {\n",
                    "rendered": {
                      "text": "        tail = printTill(out, tail, \"/*count:*/\");\n        out << Format().thousands(_root._total);\n\n        tail = printTill(out, tail, \"/*tree:*/\");\n\n        const char** names = new const char*[_cpool.size() + 1];\n        for (std::map<std::string, u32>::const_iterator it = _cpool.begin(); it != _cpool.end(); ++it) {\n",
                      "markdown": "`        tail = printTill(out, tail, \"/*count:*/\");\n        out << Format().thousands(_root._total);\n\n        tail = printTill(out, tail, \"/*tree:*/\");\n\n        const char** names = new const char*[_cpool.size() + 1];\n        for (std::map<std::string, u32>::const_iterator it = _cpool.begin(); it != _cpool.end(); ++it) {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/flameGraph.cpp"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 7,
                  "endLine": 128,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        tail = printTill(out, tail, \"/*type:*/\");\n        out << (_counter == COUNTER_SAMPLES ? \"samples\" : \"counter\");\n\n        tail = printTill(out, tail, \"/*count:*/\");\n        out << Format().thousands(_root._total);\n\n        tail = printTill(out, tail, \"/*tree:*/\");\n",
                    "rendered": {
                      "text": "        tail = printTill(out, tail, \"/*type:*/\");\n        out << (_counter == COUNTER_SAMPLES ? \"samples\" : \"counter\");\n\n        tail = printTill(out, tail, \"/*count:*/\");\n        out << Format().thousands(_root._total);\n\n        tail = printTill(out, tail, \"/*tree:*/\");\n",
                      "markdown": "`        tail = printTill(out, tail, \"/*type:*/\");\n        out << (_counter == COUNTER_SAMPLES ? \"samples\" : \"counter\");\n\n        tail = printTill(out, tail, \"/*count:*/\");\n        out << Format().thousands(_root._total);\n\n        tail = printTill(out, tail, \"/*tree:*/\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/flameGraph.cpp"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 7,
                  "endLine": 125,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        tail = printTill(out, tail, \"/*title:*/\");\n        out << (_reverse ? \"Backtrace\" : \"Call tree\");\n\n        tail = printTill(out, tail, \"/*type:*/\");\n        out << (_counter == COUNTER_SAMPLES ? \"samples\" : \"counter\");\n\n        tail = printTill(out, tail, \"/*count:*/\");\n",
                    "rendered": {
                      "text": "        tail = printTill(out, tail, \"/*title:*/\");\n        out << (_reverse ? \"Backtrace\" : \"Call tree\");\n\n        tail = printTill(out, tail, \"/*type:*/\");\n        out << (_counter == COUNTER_SAMPLES ? \"samples\" : \"counter\");\n\n        tail = printTill(out, tail, \"/*count:*/\");\n",
                      "markdown": "`        tail = printTill(out, tail, \"/*title:*/\");\n        out << (_reverse ? \"Backtrace\" : \"Call tree\");\n\n        tail = printTill(out, tail, \"/*type:*/\");\n        out << (_counter == COUNTER_SAMPLES ? \"samples\" : \"counter\");\n\n        tail = printTill(out, tail, \"/*count:*/\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/flameGraph.cpp"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 7,
                  "endLine": 122,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    if (tree) {\n        const char* tail = TREE_TEMPLATE;\n\n        tail = printTill(out, tail, \"/*title:*/\");\n        out << (_reverse ? \"Backtrace\" : \"Call tree\");\n\n        tail = printTill(out, tail, \"/*type:*/\");\n",
                    "rendered": {
                      "text": "    if (tree) {\n        const char* tail = TREE_TEMPLATE;\n\n        tail = printTill(out, tail, \"/*title:*/\");\n        out << (_reverse ? \"Backtrace\" : \"Call tree\");\n\n        tail = printTill(out, tail, \"/*type:*/\");\n",
                      "markdown": "`    if (tree) {\n        const char* tail = TREE_TEMPLATE;\n\n        tail = printTill(out, tail, \"/*title:*/\");\n        out << (_reverse ? \"Backtrace\" : \"Call tree\");\n\n        tail = printTill(out, tail, \"/*type:*/\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/flameGraph.cpp"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 19,
                  "endLine": 120,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    int depth = _root.depth(_mintotal, _name_order);\n\n    if (tree) {\n        const char* tail = TREE_TEMPLATE;\n\n        tail = printTill(out, tail, \"/*title:*/\");\n        out << (_reverse ? \"Backtrace\" : \"Call tree\");\n",
                    "rendered": {
                      "text": "    int depth = _root.depth(_mintotal, _name_order);\n\n    if (tree) {\n        const char* tail = TREE_TEMPLATE;\n\n        tail = printTill(out, tail, \"/*title:*/\");\n        out << (_reverse ? \"Backtrace\" : \"Call tree\");\n",
                      "markdown": "`    int depth = _root.depth(_mintotal, _name_order);\n\n    if (tree) {\n        const char* tail = TREE_TEMPLATE;\n\n        tail = printTill(out, tail, \"/*title:*/\");\n        out << (_reverse ? \"Backtrace\" : \"Call tree\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/flameGraph.cpp"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 5,
                  "endLine": 68,
                  "endColumn": 11,
                  "snippet": {
                    "text": "};\n\n\nclass Node {\n  public:\n    u32 _key;\n    u32 _order;\n",
                    "rendered": {
                      "text": "};\n\n\nclass Node {\n  public:\n    u32 _key;\n    u32 _order;\n",
                      "markdown": "`};\n\n\nclass Node {\n  public:\n    u32 _key;\n    u32 _order;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/stackFrame_i386.cpp"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 18,
                  "endLine": 99,
                  "endColumn": 22,
                  "snippet": {
                    "text": "}\n\nbool StackFrame::unwindCompiled(NMethod* nm, uintptr_t& pc, uintptr_t& sp, uintptr_t& fp) {\n    instruction_t* ip = (instruction_t*)pc;\n    instruction_t* entry = (instruction_t*)nm->entry();\n    if (ip <= entry\n        || *ip == 0xc3      // ret\n",
                    "rendered": {
                      "text": "}\n\nbool StackFrame::unwindCompiled(NMethod* nm, uintptr_t& pc, uintptr_t& sp, uintptr_t& fp) {\n    instruction_t* ip = (instruction_t*)pc;\n    instruction_t* entry = (instruction_t*)nm->entry();\n    if (ip <= entry\n        || *ip == 0xc3      // ret\n",
                      "markdown": "`}\n\nbool StackFrame::unwindCompiled(NMethod* nm, uintptr_t& pc, uintptr_t& sp, uintptr_t& fp) {\n    instruction_t* ip = (instruction_t*)pc;\n    instruction_t* entry = (instruction_t*)nm->entry();\n    if (ip <= entry\n        || *ip == 0xc3      // ret\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/stackFrame_i386.cpp"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 18,
                  "endLine": 71,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n\nbool StackFrame::unwindStub(instruction_t* entry, const char* name, uintptr_t& pc, uintptr_t& sp, uintptr_t& fp) {\n    instruction_t* ip = (instruction_t*)pc;\n    if (ip == entry || *ip == 0xc3\n        || strncmp(name, \"itable\", 6) == 0\n        || strncmp(name, \"vtable\", 6) == 0\n",
                    "rendered": {
                      "text": "\n\nbool StackFrame::unwindStub(instruction_t* entry, const char* name, uintptr_t& pc, uintptr_t& sp, uintptr_t& fp) {\n    instruction_t* ip = (instruction_t*)pc;\n    if (ip == entry || *ip == 0xc3\n        || strncmp(name, \"itable\", 6) == 0\n        || strncmp(name, \"vtable\", 6) == 0\n",
                      "markdown": "`\n\nbool StackFrame::unwindStub(instruction_t* entry, const char* name, uintptr_t& pc, uintptr_t& sp, uintptr_t& fp) {\n    instruction_t* ip = (instruction_t*)pc;\n    if (ip == entry || *ip == 0xc3\n        || strncmp(name, \"itable\", 6) == 0\n        || strncmp(name, \"vtable\", 6) == 0\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/stackFrame_loongarch64.cpp"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 18,
                  "endLine": 68,
                  "endColumn": 22,
                  "snippet": {
                    "text": "}\n\nbool StackFrame::unwindStub(instruction_t* entry, const char* name, uintptr_t& pc, uintptr_t& sp, uintptr_t& fp) {\n    instruction_t* ip = (instruction_t*)pc;\n    if (ip == entry\n        || strncmp(name, \"itable\", 6) == 0\n        || strncmp(name, \"vtable\", 6) == 0\n",
                    "rendered": {
                      "text": "}\n\nbool StackFrame::unwindStub(instruction_t* entry, const char* name, uintptr_t& pc, uintptr_t& sp, uintptr_t& fp) {\n    instruction_t* ip = (instruction_t*)pc;\n    if (ip == entry\n        || strncmp(name, \"itable\", 6) == 0\n        || strncmp(name, \"vtable\", 6) == 0\n",
                      "markdown": "`}\n\nbool StackFrame::unwindStub(instruction_t* entry, const char* name, uintptr_t& pc, uintptr_t& sp, uintptr_t& fp) {\n    instruction_t* ip = (instruction_t*)pc;\n    if (ip == entry\n        || strncmp(name, \"itable\", 6) == 0\n        || strncmp(name, \"vtable\", 6) == 0\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                      "markdown": "`\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                    "rendered": {
                      "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                      "markdown": "`\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 15,
                  "endLine": 77,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                    "rendered": {
                      "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                      "markdown": "`#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 27,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                    "rendered": {
                      "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                      "markdown": "`\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                      "markdown": "`\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                    "rendered": {
                      "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                      "markdown": "`# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                    "rendered": {
                      "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                      "markdown": "`# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                    "rendered": {
                      "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                      "markdown": "`\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/applypatch-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 45,
                  "endLine": 13,
                  "endColumn": 53,
                  "snippet": {
                    "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                    "rendered": {
                      "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                      "markdown": "`#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 51,
                  "endLine": 12,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                    "rendered": {
                      "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                      "markdown": "`# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 53,
                  "endLine": 11,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                    "rendered": {
                      "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                      "markdown": "`# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                    "rendered": {
                      "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                      "markdown": "`\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                    "rendered": {
                      "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                      "markdown": "`\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 30,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                    "rendered": {
                      "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                      "markdown": "`\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 28,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                    "rendered": {
                      "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                      "markdown": "`\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                    "rendered": {
                      "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                      "markdown": "`\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 45,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                    "rendered": {
                      "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                      "markdown": "`use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                    "rendered": {
                      "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                      "markdown": "`use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                    "rendered": {
                      "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                      "markdown": "`# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 37,
                  "endLine": 37,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                    "rendered": {
                      "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                      "markdown": "`#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                    "rendered": {
                      "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                      "markdown": "`# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                    "rendered": {
                      "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                      "markdown": "`# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 39,
                  "endLine": 89,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                    "rendered": {
                      "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                      "markdown": "`\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                    "rendered": {
                      "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                      "markdown": "`\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/pre-merge-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 45,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                    "rendered": {
                      "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                      "markdown": "`\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 29,
                  "endLine": 151,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                    "rendered": {
                      "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                      "markdown": "` * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                    "rendered": {
                      "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                      "markdown": "`    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 104,
                  "snippet": {
                    "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                    "rendered": {
                      "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                      "markdown": "`\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                    "rendered": {
                      "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                      "markdown": "`\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                    "rendered": {
                      "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                      "markdown": "`To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                    "rendered": {
                      "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                      "markdown": "`\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                    "rendered": {
                      "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                      "markdown": "`\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 42,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                    "rendered": {
                      "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                      "markdown": "`   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                      "markdown": "`# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 9,
                  "snippet": {
                    "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                    "rendered": {
                      "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                      "markdown": "`esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 26,
                  "snippet": {
                    "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                    "rendered": {
                      "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                      "markdown": "`\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                    "rendered": {
                      "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                      "markdown": "`\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                    "rendered": {
                      "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                      "markdown": "`unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                    "rendered": {
                      "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                      "markdown": "`\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                    "rendered": {
                      "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                      "markdown": "`\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                    "rendered": {
                      "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                      "markdown": "`if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                    "rendered": {
                      "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                      "markdown": "`validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 21,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                    "rendered": {
                      "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                      "markdown": "`# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "endLine": 15,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                    "rendered": {
                      "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                      "markdown": "`# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/info/exclude"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                    "rendered": {
                      "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                      "markdown": "`# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/helper/one/profiler/JfrSync.java"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 38,
                  "endLine": 59,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\n        masterRecording = recording;\n\n        recording.setDestination(Paths.get(fileName));\n        recording.setToDisk(true);\n        recording.setDumpOnExit(true);\n        recording.start();\n",
                    "rendered": {
                      "text": "\n        masterRecording = recording;\n\n        recording.setDestination(Paths.get(fileName));\n        recording.setToDisk(true);\n        recording.setDumpOnExit(true);\n        recording.start();\n",
                      "markdown": "`\n        masterRecording = recording;\n\n        recording.setDestination(Paths.get(fileName));\n        recording.setToDisk(true);\n        recording.setDumpOnExit(true);\n        recording.start();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/helper/one/profiler/JfrSync.java"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 68,
                  "endLine": 52,
                  "endColumn": 73,
                  "snippet": {
                    "text": "            try {\n                recording = new Recording(Configuration.getConfiguration(settings));\n            } catch (NoSuchFileException e) {\n                recording = new Recording(Configuration.create(Paths.get(settings)));\n            }\n            disableBuiltinEvents(recording, eventMask);\n        }\n",
                    "rendered": {
                      "text": "            try {\n                recording = new Recording(Configuration.getConfiguration(settings));\n            } catch (NoSuchFileException e) {\n                recording = new Recording(Configuration.create(Paths.get(settings)));\n            }\n            disableBuiltinEvents(recording, eventMask);\n        }\n",
                      "markdown": "`            try {\n                recording = new Recording(Configuration.getConfiguration(settings));\n            } catch (NoSuchFileException e) {\n                recording = new Recording(Configuration.create(Paths.get(settings)));\n            }\n            disableBuiltinEvents(recording, eventMask);\n        }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/res/tree.html"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 17,
                  "endLine": 211,
                  "endColumn": 25,
                  "snippet": {
                    "text": "      .t4 {color: #A7A718;}\n      .t5 {color: #CC5200;}\n      .t6 {color: #7C8F45;}\n      @media only screen and (max-width: 968px) {\n        .only-desktop {\n          display: none;\n        }\n",
                    "rendered": {
                      "text": "      .t4 {color: #A7A718;}\n      .t5 {color: #CC5200;}\n      .t6 {color: #7C8F45;}\n      @media only screen and (max-width: 968px) {\n        .only-desktop {\n          display: none;\n        }\n",
                      "markdown": "`      .t4 {color: #A7A718;}\n      .t5 {color: #CC5200;}\n      .t6 {color: #7C8F45;}\n      @media only screen and (max-width: 968px) {\n        .only-desktop {\n          display: none;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/res/tree.html"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 20,
                  "endLine": 83,
                  "endColumn": 24,
                  "snippet": {
                    "text": "      .tree li > div:first-word {\n        font-weight: bold;\n      }\n      /* no children ul */\n      .o:after,\n      .o:before {\n        display: none !important;\n",
                    "rendered": {
                      "text": "      .tree li > div:first-word {\n        font-weight: bold;\n      }\n      /* no children ul */\n      .o:after,\n      .o:before {\n        display: none !important;\n",
                      "markdown": "`      .tree li > div:first-word {\n        font-weight: bold;\n      }\n      /* no children ul */\n      .o:after,\n      .o:before {\n        display: none !important;\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/res/tree.html"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 21,
                  "endLine": 43,
                  "endColumn": 25,
                  "snippet": {
                    "text": "      .tree li ul {\n        display: none;\n      }\n      .tree li.open > ul {\n        display: block;\n      }\n      .tree li div:before,\n",
                    "rendered": {
                      "text": "      .tree li ul {\n        display: none;\n      }\n      .tree li.open > ul {\n        display: block;\n      }\n      .tree li div:before,\n",
                      "markdown": "`      .tree li ul {\n        display: none;\n      }\n      .tree li.open > ul {\n        display: block;\n      }\n      .tree li div:before,\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/res/tree.html"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 14,
                  "endLine": 40,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        margin-left: 20px;\n        padding-left: 0;\n      }\n      .tree li ul {\n        display: none;\n      }\n      .tree li.open > ul {\n",
                    "rendered": {
                      "text": "        margin-left: 20px;\n        padding-left: 0;\n      }\n      .tree li ul {\n        display: none;\n      }\n      .tree li.open > ul {\n",
                      "markdown": "`        margin-left: 20px;\n        padding-left: 0;\n      }\n      .tree li ul {\n        display: none;\n      }\n      .tree li.open > ul {\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/res/tree.html"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 11,
                  "endLine": 36,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        position: relative;\n        white-space: nowrap;\n      }\n      .tree ul {\n        margin-left: 20px;\n        padding-left: 0;\n      }\n",
                    "rendered": {
                      "text": "        position: relative;\n        white-space: nowrap;\n      }\n      .tree ul {\n        margin-left: 20px;\n        padding-left: 0;\n      }\n",
                      "markdown": "`        position: relative;\n        white-space: nowrap;\n      }\n      .tree ul {\n        margin-left: 20px;\n        padding-left: 0;\n      }\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/res/tree.html"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 5,
                  "endLine": 27,
                  "endColumn": 9,
                  "snippet": {
                    "text": "        background: white;\n        font-size: 15px;\n      }\n      ul {\n        list-style: none;\n      }\n\n",
                    "rendered": {
                      "text": "        background: white;\n        font-size: 15px;\n      }\n      ul {\n        list-style: none;\n      }\n\n",
                      "markdown": "`        background: white;\n        font-size: 15px;\n      }\n      ul {\n        list-style: none;\n      }\n\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/launcher/launcher.cpp"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 22,
                  "endLine": 132,
                  "endColumn": 27,
                  "snippet": {
                    "text": "        return 1;\n    }\n\n    const char* const* cmd = build_cmdline(argc - 1, argv + 1);\n    run_java((char* const*)cmd);\n\n    // May reach here only if run_java() fails\n",
                    "rendered": {
                      "text": "        return 1;\n    }\n\n    const char* const* cmd = build_cmdline(argc - 1, argv + 1);\n    run_java((char* const*)cmd);\n\n    // May reach here only if run_java() fails\n",
                      "markdown": "`        return 1;\n    }\n\n    const char* const* cmd = build_cmdline(argc - 1, argv + 1);\n    run_java((char* const*)cmd);\n\n    // May reach here only if run_java() fails\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/launcher/launcher.cpp"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 16,
                  "endLine": 53,
                  "endColumn": 21,
                  "snippet": {
                    "text": "}\n\nstatic const char* const* build_cmdline(int argc, char** argv) {\n    const char** cmd = (const char**)malloc((argc + 6) * sizeof(char*));\n    int count = 0;\n\n    cmd[count++] = JAVA_EXE;\n",
                    "rendered": {
                      "text": "}\n\nstatic const char* const* build_cmdline(int argc, char** argv) {\n    const char** cmd = (const char**)malloc((argc + 6) * sizeof(char*));\n    int count = 0;\n\n    cmd[count++] = JAVA_EXE;\n",
                      "markdown": "`}\n\nstatic const char* const* build_cmdline(int argc, char** argv) {\n    const char** cmd = (const char**)malloc((argc + 6) * sizeof(char*));\n    int count = 0;\n\n    cmd[count++] = JAVA_EXE;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/launcher/launcher.cpp"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 16,
                  "endLine": 98,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        execv(java_path, cmd);\n    }\n\n    // 2. Try to find java in PATH\n    execvp(JAVA_EXE, cmd);\n\n    // 3. Try /etc/alternatives/java\n",
                    "rendered": {
                      "text": "        execv(java_path, cmd);\n    }\n\n    // 2. Try to find java in PATH\n    execvp(JAVA_EXE, cmd);\n\n    // 3. Try /etc/alternatives/java\n",
                      "markdown": "`        execv(java_path, cmd);\n    }\n\n    // 2. Try to find java in PATH\n    execvp(JAVA_EXE, cmd);\n\n    // 3. Try /etc/alternatives/java\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/main/fdtransferServer_linux.cpp"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 24,
                  "endLine": 315,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        return false;\n    }\n\n    printf(\"Server ready at '%s'\\n\", path);\n\n    while (true) {\n        int peer_pid = 0;\n",
                    "rendered": {
                      "text": "        return false;\n    }\n\n    printf(\"Server ready at '%s'\\n\", path);\n\n    while (true) {\n        int peer_pid = 0;\n",
                      "markdown": "`        return false;\n    }\n\n    printf(\"Server ready at '%s'\\n\", path);\n\n    while (true) {\n        int peer_pid = 0;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/main/fdtransferServer_linux.cpp"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 28,
                  "endLine": 39,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n    // Arbitrary timeout, to prevent it from listening forever.\n    if (accept_timeout > 0) {\n        const struct timeval timeout = {accept_timeout, 0};\n        if (setsockopt(_server, SOL_SOCKET, SO_RCVTIMEO, &timeout, sizeof(timeout)) < 0) {\n            perror(\"FdTransfer setsockopt(SO_RCVTIMEO)\");\n            close(_server);\n",
                    "rendered": {
                      "text": "\n    // Arbitrary timeout, to prevent it from listening forever.\n    if (accept_timeout > 0) {\n        const struct timeval timeout = {accept_timeout, 0};\n        if (setsockopt(_server, SOL_SOCKET, SO_RCVTIMEO, &timeout, sizeof(timeout)) < 0) {\n            perror(\"FdTransfer setsockopt(SO_RCVTIMEO)\");\n            close(_server);\n",
                      "markdown": "`\n    // Arbitrary timeout, to prevent it from listening forever.\n    if (accept_timeout > 0) {\n        const struct timeval timeout = {accept_timeout, 0};\n        if (setsockopt(_server, SOL_SOCKET, SO_RCVTIMEO, &timeout, sizeof(timeout)) < 0) {\n            perror(\"FdTransfer setsockopt(SO_RCVTIMEO)\");\n            close(_server);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/main/main.cpp"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 30,
                  "endLine": 88,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    \"                    from the non-privileged target\\n\"\n    \"\\n\"\n    \"<pid> is a numeric process ID of the target JVM\\n\"\n    \"      or 'jps' keyword to find running JVM automatically\\n\"\n    \"      or the application name as it would appear in the jps tool\\n\"\n    \"\\n\"\n    \"Example: \" APP_BINARY \" -d 30 -f profile.html 3456\\n\"\n",
                    "rendered": {
                      "text": "    \"                    from the non-privileged target\\n\"\n    \"\\n\"\n    \"<pid> is a numeric process ID of the target JVM\\n\"\n    \"      or 'jps' keyword to find running JVM automatically\\n\"\n    \"      or the application name as it would appear in the jps tool\\n\"\n    \"\\n\"\n    \"Example: \" APP_BINARY \" -d 30 -f profile.html 3456\\n\"\n",
                      "markdown": "`    \"                    from the non-privileged target\\n\"\n    \"\\n\"\n    \"<pid> is a numeric process ID of the target JVM\\n\"\n    \"      or 'jps' keyword to find running JVM automatically\\n\"\n    \"      or the application name as it would appear in the jps tool\\n\"\n    \"\\n\"\n    \"Example: \" APP_BINARY \" -d 30 -f profile.html 3456\\n\"\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/main/main.cpp"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 13,
                  "endLine": 67,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    \"  --minwidth pct    skip frames smaller than pct%%\\n\"\n    \"  --reverse         generate stack-reversed FlameGraph / Call tree\\n\"\n    \"\\n\"\n    \"  --loop time       run profiler in a loop\\n\"\n    \"  --alloc bytes     allocation profiling interval in bytes\\n\"\n    \"  --live            build allocation profile from live objects only\\n\"\n    \"  --lock duration   lock profiling threshold in nanoseconds\\n\"\n",
                    "rendered": {
                      "text": "    \"  --minwidth pct    skip frames smaller than pct%%\\n\"\n    \"  --reverse         generate stack-reversed FlameGraph / Call tree\\n\"\n    \"\\n\"\n    \"  --loop time       run profiler in a loop\\n\"\n    \"  --alloc bytes     allocation profiling interval in bytes\\n\"\n    \"  --live            build allocation profile from live objects only\\n\"\n    \"  --lock duration   lock profiling threshold in nanoseconds\\n\"\n",
                      "markdown": "`    \"  --minwidth pct    skip frames smaller than pct%%\\n\"\n    \"  --reverse         generate stack-reversed FlameGraph / Call tree\\n\"\n    \"\\n\"\n    \"  --loop time       run profiler in a loop\\n\"\n    \"  --alloc bytes     allocation profiling interval in bytes\\n\"\n    \"  --live            build allocation profile from live objects only\\n\"\n    \"  --lock duration   lock profiling threshold in nanoseconds\\n\"\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/main/main.cpp"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 9,
                  "endLine": 56,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    \"  -g, --sig         print method signatures\\n\"\n    \"  -a, --ann         annotate Java methods\\n\"\n    \"  -l, --lib         prepend library names\\n\"\n    \"  -o fmt            output format: flat|traces|collapsed|flamegraph|tree|jfr\\n\"\n    \"  -I include        output only stack traces containing the specified pattern\\n\"\n    \"  -X exclude        exclude stack traces with the specified pattern\\n\"\n    \"  -L level          log level: debug|info|warn|error|none\\n\"\n",
                    "rendered": {
                      "text": "    \"  -g, --sig         print method signatures\\n\"\n    \"  -a, --ann         annotate Java methods\\n\"\n    \"  -l, --lib         prepend library names\\n\"\n    \"  -o fmt            output format: flat|traces|collapsed|flamegraph|tree|jfr\\n\"\n    \"  -I include        output only stack traces containing the specified pattern\\n\"\n    \"  -X exclude        exclude stack traces with the specified pattern\\n\"\n    \"  -L level          log level: debug|info|warn|error|none\\n\"\n",
                      "markdown": "`    \"  -g, --sig         print method signatures\\n\"\n    \"  -a, --ann         annotate Java methods\\n\"\n    \"  -l, --lib         prepend library names\\n\"\n    \"  -o fmt            output format: flat|traces|collapsed|flamegraph|tree|jfr\\n\"\n    \"  -I include        output only stack traces containing the specified pattern\\n\"\n    \"  -X exclude        exclude stack traces with the specified pattern\\n\"\n    \"  -L level          log level: debug|info|warn|error|none\\n\"\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/jfr/event/Event.java"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 71,
                  "endLine": 39,
                  "endColumn": 76,
                  "snippet": {
                    "text": "                .append(\",stackTraceId=\").append(stackTraceId);\n        for (Field f : getClass().getDeclaredFields()) {\n            try {\n                sb.append(',').append(f.getName()).append('=').append(f.get(this));\n            } catch (ReflectiveOperationException e) {\n                break;\n            }\n",
                    "rendered": {
                      "text": "                .append(\",stackTraceId=\").append(stackTraceId);\n        for (Field f : getClass().getDeclaredFields()) {\n            try {\n                sb.append(',').append(f.getName()).append('=').append(f.get(this));\n            } catch (ReflectiveOperationException e) {\n                break;\n            }\n",
                      "markdown": "`                .append(\",stackTraceId=\").append(stackTraceId);\n        for (Field f : getClass().getDeclaredFields()) {\n            try {\n                sb.append(',').append(f.getName()).append('=').append(f.get(this));\n            } catch (ReflectiveOperationException e) {\n                break;\n            }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/Main.java"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 37,
                  "endLine": 39,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        }\n\n        for (int i = 0; i < fileCount; i++) {\n            String input = args.files.get(i);\n            String output = isDirectory ? new File(lastFile, replaceExt(input, args.output)).getPath() : lastFile;\n\n            System.out.print(\"Converting \" + getFileName(input) + \" -> \" + getFileName(output) + \" \");\n",
                    "rendered": {
                      "text": "        }\n\n        for (int i = 0; i < fileCount; i++) {\n            String input = args.files.get(i);\n            String output = isDirectory ? new File(lastFile, replaceExt(input, args.output)).getPath() : lastFile;\n\n            System.out.print(\"Converting \" + getFileName(input) + \" -> \" + getFileName(output) + \" \");\n",
                      "markdown": "`        }\n\n        for (int i = 0; i < fileCount; i++) {\n            String input = args.files.get(i);\n            String output = isDirectory ? new File(lastFile, replaceExt(input, args.output)).getPath() : lastFile;\n\n            System.out.print(\"Converting \" + getFileName(input) + \" -> \" + getFileName(output) + \" \");\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/Main.java"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 36,
                  "endLine": 26,
                  "endColumn": 41,
                  "snippet": {
                    "text": "        }\n\n        int fileCount = args.files.size() - 1;\n        String lastFile = args.files.get(fileCount);\n        boolean isDirectory = new File(lastFile).isDirectory();\n\n        if (args.output == null) {\n",
                    "rendered": {
                      "text": "        }\n\n        int fileCount = args.files.size() - 1;\n        String lastFile = args.files.get(fileCount);\n        boolean isDirectory = new File(lastFile).isDirectory();\n\n        if (args.output == null) {\n",
                      "markdown": "`        }\n\n        int fileCount = args.files.size() - 1;\n        String lastFile = args.files.get(fileCount);\n        boolean isDirectory = new File(lastFile).isDirectory();\n\n        if (args.output == null) {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/Main.java"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 44,
                  "endLine": 111,
                  "endColumn": 50,
                  "snippet": {
                    "text": "                \"     --norm             Normalize names of hidden classes / lambdas\\n\" +\n                \"     --dot              Dotted class names\\n\" +\n                \"     --from TIME        Start time in ms (absolute or relative)\\n\" +\n                \"     --to TIME          End time in ms (absolute or relative)\\n\" +\n                \"\\n\" +\n                \"Flame Graph options:\\n\" +\n                \"     --title STRING     Flame Graph title\\n\" +\n",
                    "rendered": {
                      "text": "                \"     --norm             Normalize names of hidden classes / lambdas\\n\" +\n                \"     --dot              Dotted class names\\n\" +\n                \"     --from TIME        Start time in ms (absolute or relative)\\n\" +\n                \"     --to TIME          End time in ms (absolute or relative)\\n\" +\n                \"\\n\" +\n                \"Flame Graph options:\\n\" +\n                \"     --title STRING     Flame Graph title\\n\" +\n",
                      "markdown": "`                \"     --norm             Normalize names of hidden classes / lambdas\\n\" +\n                \"     --dot              Dotted class names\\n\" +\n                \"     --from TIME        Start time in ms (absolute or relative)\\n\" +\n                \"     --to TIME          End time in ms (absolute or relative)\\n\" +\n                \"\\n\" +\n                \"Flame Graph options:\\n\" +\n                \"     --title STRING     Flame Graph title\\n\" +\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/Main.java"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 26,
                  "endLine": 111,
                  "endColumn": 32,
                  "snippet": {
                    "text": "                \"     --norm             Normalize names of hidden classes / lambdas\\n\" +\n                \"     --dot              Dotted class names\\n\" +\n                \"     --from TIME        Start time in ms (absolute or relative)\\n\" +\n                \"     --to TIME          End time in ms (absolute or relative)\\n\" +\n                \"\\n\" +\n                \"Flame Graph options:\\n\" +\n                \"     --title STRING     Flame Graph title\\n\" +\n",
                    "rendered": {
                      "text": "                \"     --norm             Normalize names of hidden classes / lambdas\\n\" +\n                \"     --dot              Dotted class names\\n\" +\n                \"     --from TIME        Start time in ms (absolute or relative)\\n\" +\n                \"     --to TIME          End time in ms (absolute or relative)\\n\" +\n                \"\\n\" +\n                \"Flame Graph options:\\n\" +\n                \"     --title STRING     Flame Graph title\\n\" +\n",
                      "markdown": "`                \"     --norm             Normalize names of hidden classes / lambdas\\n\" +\n                \"     --dot              Dotted class names\\n\" +\n                \"     --from TIME        Start time in ms (absolute or relative)\\n\" +\n                \"     --to TIME          End time in ms (absolute or relative)\\n\" +\n                \"\\n\" +\n                \"Flame Graph options:\\n\" +\n                \"     --title STRING     Flame Graph title\\n\" +\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/Main.java"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 46,
                  "endLine": 110,
                  "endColumn": 52,
                  "snippet": {
                    "text": "                \"     --simple           Simple class names instead of FQN\\n\" +\n                \"     --norm             Normalize names of hidden classes / lambdas\\n\" +\n                \"     --dot              Dotted class names\\n\" +\n                \"     --from TIME        Start time in ms (absolute or relative)\\n\" +\n                \"     --to TIME          End time in ms (absolute or relative)\\n\" +\n                \"\\n\" +\n                \"Flame Graph options:\\n\" +\n",
                    "rendered": {
                      "text": "                \"     --simple           Simple class names instead of FQN\\n\" +\n                \"     --norm             Normalize names of hidden classes / lambdas\\n\" +\n                \"     --dot              Dotted class names\\n\" +\n                \"     --from TIME        Start time in ms (absolute or relative)\\n\" +\n                \"     --to TIME          End time in ms (absolute or relative)\\n\" +\n                \"\\n\" +\n                \"Flame Graph options:\\n\" +\n",
                      "markdown": "`                \"     --simple           Simple class names instead of FQN\\n\" +\n                \"     --norm             Normalize names of hidden classes / lambdas\\n\" +\n                \"     --dot              Dotted class names\\n\" +\n                \"     --from TIME        Start time in ms (absolute or relative)\\n\" +\n                \"     --to TIME          End time in ms (absolute or relative)\\n\" +\n                \"\\n\" +\n                \"Flame Graph options:\\n\" +\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/Main.java"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 28,
                  "endLine": 110,
                  "endColumn": 34,
                  "snippet": {
                    "text": "                \"     --simple           Simple class names instead of FQN\\n\" +\n                \"     --norm             Normalize names of hidden classes / lambdas\\n\" +\n                \"     --dot              Dotted class names\\n\" +\n                \"     --from TIME        Start time in ms (absolute or relative)\\n\" +\n                \"     --to TIME          End time in ms (absolute or relative)\\n\" +\n                \"\\n\" +\n                \"Flame Graph options:\\n\" +\n",
                    "rendered": {
                      "text": "                \"     --simple           Simple class names instead of FQN\\n\" +\n                \"     --norm             Normalize names of hidden classes / lambdas\\n\" +\n                \"     --dot              Dotted class names\\n\" +\n                \"     --from TIME        Start time in ms (absolute or relative)\\n\" +\n                \"     --to TIME          End time in ms (absolute or relative)\\n\" +\n                \"\\n\" +\n                \"Flame Graph options:\\n\" +\n",
                      "markdown": "`                \"     --simple           Simple class names instead of FQN\\n\" +\n                \"     --norm             Normalize names of hidden classes / lambdas\\n\" +\n                \"     --dot              Dotted class names\\n\" +\n                \"     --from TIME        Start time in ms (absolute or relative)\\n\" +\n                \"     --to TIME          End time in ms (absolute or relative)\\n\" +\n                \"\\n\" +\n                \"Flame Graph options:\\n\" +\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/jattach/jattach_openj9.c"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 33,
                  "endLine": 109,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    size_t len = strlen(cmd) + 1;\n    size_t off = 0;\n    while (off < len) {\n        ssize_t bytes = write(fd, cmd + off, len - off);\n        if (bytes <= 0) {\n            return -1;\n        }\n",
                    "rendered": {
                      "text": "    size_t len = strlen(cmd) + 1;\n    size_t off = 0;\n    while (off < len) {\n        ssize_t bytes = write(fd, cmd + off, len - off);\n        if (bytes <= 0) {\n            return -1;\n        }\n",
                      "markdown": "`    size_t len = strlen(cmd) + 1;\n    size_t off = 0;\n    while (off < len) {\n        ssize_t bytes = write(fd, cmd + off, len - off);\n        if (bytes <= 0) {\n            return -1;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/jattach/jattach_openj9.c"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 15,
                  "endLine": 29,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n// Translate HotSpot command to OpenJ9 equivalent\nstatic void translate_command(char* buf, size_t bufsize, int argc, char** argv) {\n    const char* cmd = argv[0];\n\n    if (strcmp(cmd, \"load\") == 0 && argc >= 2) {\n        if (argc > 2 && strcmp(argv[2], \"true\") == 0) {\n",
                    "rendered": {
                      "text": "\n// Translate HotSpot command to OpenJ9 equivalent\nstatic void translate_command(char* buf, size_t bufsize, int argc, char** argv) {\n    const char* cmd = argv[0];\n\n    if (strcmp(cmd, \"load\") == 0 && argc >= 2) {\n        if (argc > 2 && strcmp(argv[2], \"true\") == 0) {\n",
                      "markdown": "`\n// Translate HotSpot command to OpenJ9 equivalent\nstatic void translate_command(char* buf, size_t bufsize, int argc, char** argv) {\n    const char* cmd = argv[0];\n\n    if (strcmp(cmd, \"load\") == 0 && argc >= 2) {\n        if (argc > 2 && strcmp(argv[2], \"true\") == 0) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/j9WallClock.cpp"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 7,
                  "endLine": 35,
                  "endColumn": 41,
                  "snippet": {
                    "text": "}\n\nvoid J9WallClock::timerLoop() {\n    JNIEnv* jni = VM::attachThread(\"Async-profiler Sampler\");\n    jvmtiEnv* jvmti = VM::jvmti();\n\n    int max_frames = _max_stack_depth + MAX_NATIVE_FRAMES + RESERVED_FRAMES;\n",
                    "rendered": {
                      "text": "}\n\nvoid J9WallClock::timerLoop() {\n    JNIEnv* jni = VM::attachThread(\"Async-profiler Sampler\");\n    jvmtiEnv* jvmti = VM::jvmti();\n\n    int max_frames = _max_stack_depth + MAX_NATIVE_FRAMES + RESERVED_FRAMES;\n",
                      "markdown": "`}\n\nvoid J9WallClock::timerLoop() {\n    JNIEnv* jni = VM::attachThread(\"Async-profiler Sampler\");\n    jvmtiEnv* jvmti = VM::jvmti();\n\n    int max_frames = _max_stack_depth + MAX_NATIVE_FRAMES + RESERVED_FRAMES;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/perfEvents_linux.cpp"
                },
                "region": {
                  "startLine": 393,
                  "startColumn": 17,
                  "endLine": 393,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        // Raw PMU register: rNNN\n        if (name[0] == 'r' && name[1] >= '0') {\n            char* end;\n            __u64 reg = strtoull(name + 1, &end, 16);\n            if (*end == 0) {\n                return getRawEvent(reg);\n            }\n",
                    "rendered": {
                      "text": "        // Raw PMU register: rNNN\n        if (name[0] == 'r' && name[1] >= '0') {\n            char* end;\n            __u64 reg = strtoull(name + 1, &end, 16);\n            if (*end == 0) {\n                return getRawEvent(reg);\n            }\n",
                      "markdown": "`        // Raw PMU register: rNNN\n        if (name[0] == 'r' && name[1] >= '0') {\n            char* end;\n            __u64 reg = strtoull(name + 1, &end, 16);\n            if (*end == 0) {\n                return getRawEvent(reg);\n            }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/perfEvents_linux.cpp"
                },
                "region": {
                  "startLine": 932,
                  "startColumn": 11,
                  "endLine": 932,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n    struct perf_event_mmap_page* page = event->_page;\n    if (page != NULL) {\n        u64 head = page->data_head;\n        rmb();\n        page->data_tail = head;\n    }\n",
                    "rendered": {
                      "text": "\n    struct perf_event_mmap_page* page = event->_page;\n    if (page != NULL) {\n        u64 head = page->data_head;\n        rmb();\n        page->data_tail = head;\n    }\n",
                      "markdown": "`\n    struct perf_event_mmap_page* page = event->_page;\n    if (page != NULL) {\n        u64 head = page->data_head;\n        rmb();\n        page->data_tail = head;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/perfEvents_linux.cpp"
                },
                "region": {
                  "startLine": 906,
                  "startColumn": 11,
                  "endLine": 906,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n                break;\n            }\n            tail += hdr->size;\n        }\n\nstack_complete:\n",
                    "rendered": {
                      "text": "\n                break;\n            }\n            tail += hdr->size;\n        }\n\nstack_complete:\n",
                      "markdown": "`\n                break;\n            }\n            tail += hdr->size;\n        }\n\nstack_complete:\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/perfEvents_linux.cpp"
                },
                "region": {
                  "startLine": 862,
                  "startColumn": 23,
                  "endLine": 862,
                  "endColumn": 27,
                  "snippet": {
                    "text": "            if (hdr->type == PERF_RECORD_SAMPLE) {\n                u64 nr = ring.next();\n                while (nr-- > 0) {\n                    u64 ip = ring.next();\n                    if (ip < PERF_CONTEXT_MAX) {\n                        const void* iptr = (const void*)ip;\n                        if (CodeHeap::contains(iptr) || depth >= max_depth) {\n",
                    "rendered": {
                      "text": "            if (hdr->type == PERF_RECORD_SAMPLE) {\n                u64 nr = ring.next();\n                while (nr-- > 0) {\n                    u64 ip = ring.next();\n                    if (ip < PERF_CONTEXT_MAX) {\n                        const void* iptr = (const void*)ip;\n                        if (CodeHeap::contains(iptr) || depth >= max_depth) {\n",
                      "markdown": "`            if (hdr->type == PERF_RECORD_SAMPLE) {\n                u64 nr = ring.next();\n                while (nr-- > 0) {\n                    u64 ip = ring.next();\n                    if (ip < PERF_CONTEXT_MAX) {\n                        const void* iptr = (const void*)ip;\n                        if (CodeHeap::contains(iptr) || depth >= max_depth) {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/perfEvents_linux.cpp"
                },
                "region": {
                  "startLine": 852,
                  "startColumn": 11,
                  "endLine": 852,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    struct perf_event_mmap_page* page = event->_page;\n    if (page != NULL) {\n        u64 tail = page->data_tail;\n        u64 head = page->data_head;\n        rmb();\n\n        RingBuffer ring(page);\n",
                    "rendered": {
                      "text": "    struct perf_event_mmap_page* page = event->_page;\n    if (page != NULL) {\n        u64 tail = page->data_tail;\n        u64 head = page->data_head;\n        rmb();\n\n        RingBuffer ring(page);\n",
                      "markdown": "`    struct perf_event_mmap_page* page = event->_page;\n    if (page != NULL) {\n        u64 tail = page->data_tail;\n        u64 head = page->data_head;\n        rmb();\n\n        RingBuffer ring(page);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/perfEvents_linux.cpp"
                },
                "region": {
                  "startLine": 851,
                  "startColumn": 11,
                  "endLine": 851,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n    struct perf_event_mmap_page* page = event->_page;\n    if (page != NULL) {\n        u64 tail = page->data_tail;\n        u64 head = page->data_head;\n        rmb();\n\n",
                    "rendered": {
                      "text": "\n    struct perf_event_mmap_page* page = event->_page;\n    if (page != NULL) {\n        u64 tail = page->data_tail;\n        u64 head = page->data_head;\n        rmb();\n\n",
                      "markdown": "`\n    struct perf_event_mmap_page* page = event->_page;\n    if (page != NULL) {\n        u64 tail = page->data_tail;\n        u64 head = page->data_head;\n        rmb();\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/perfEvents_linux.cpp"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 6,
                  "endLine": 183,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n    static char probe_func[256];\n\n    // Find which argument of a known function serves as a profiling counter,\n    // e.g. the first argument of malloc() is allocation size\n    static int findCounterArg(const char* name) {\n        for (FunctionWithCounter* func = KNOWN_FUNCTIONS; func->name != NULL; func++) {\n",
                    "rendered": {
                      "text": "\n    static char probe_func[256];\n\n    // Find which argument of a known function serves as a profiling counter,\n    // e.g. the first argument of malloc() is allocation size\n    static int findCounterArg(const char* name) {\n        for (FunctionWithCounter* func = KNOWN_FUNCTIONS; func->name != NULL; func++) {\n",
                      "markdown": "`\n    static char probe_func[256];\n\n    // Find which argument of a known function serves as a profiling counter,\n    // e.g. the first argument of malloc() is allocation size\n    static int findCounterArg(const char* name) {\n        for (FunctionWithCounter* func = KNOWN_FUNCTIONS; func->name != NULL; func++) {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/stackFrame_x64.cpp"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 20,
                  "endLine": 161,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    unsigned int insn = *(unsigned int*)pc();\n    if ((insn & 0x80fff8) == 0x008b48) {\n        // mov r64, [r64 + offs]\n        unsigned int reg = ((insn << 1) & 8) | ((insn >> 19) & 7);\n        switch (reg) {\n            case 0x0: REG(RAX, rax) = 0; break;\n            case 0x1: REG(RCX, rcx) = 0; break;\n",
                    "rendered": {
                      "text": "    unsigned int insn = *(unsigned int*)pc();\n    if ((insn & 0x80fff8) == 0x008b48) {\n        // mov r64, [r64 + offs]\n        unsigned int reg = ((insn << 1) & 8) | ((insn >> 19) & 7);\n        switch (reg) {\n            case 0x0: REG(RAX, rax) = 0; break;\n            case 0x1: REG(RCX, rcx) = 0; break;\n",
                      "markdown": "`    unsigned int insn = *(unsigned int*)pc();\n    if ((insn & 0x80fff8) == 0x008b48) {\n        // mov r64, [r64 + offs]\n        unsigned int reg = ((insn << 1) & 8) | ((insn >> 19) & 7);\n        switch (reg) {\n            case 0x0: REG(RAX, rax) = 0; break;\n            case 0x1: REG(RCX, rcx) = 0; break;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/stackFrame_x64.cpp"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 18,
                  "endLine": 106,
                  "endColumn": 22,
                  "snippet": {
                    "text": "}\n\nbool StackFrame::unwindCompiled(NMethod* nm, uintptr_t& pc, uintptr_t& sp, uintptr_t& fp) {\n    instruction_t* ip = (instruction_t*)pc;\n    instruction_t* entry = (instruction_t*)nm->entry();\n    if (ip <= entry\n        || *ip == 0xc3                                                          // ret\n",
                    "rendered": {
                      "text": "}\n\nbool StackFrame::unwindCompiled(NMethod* nm, uintptr_t& pc, uintptr_t& sp, uintptr_t& fp) {\n    instruction_t* ip = (instruction_t*)pc;\n    instruction_t* entry = (instruction_t*)nm->entry();\n    if (ip <= entry\n        || *ip == 0xc3                                                          // ret\n",
                      "markdown": "`}\n\nbool StackFrame::unwindCompiled(NMethod* nm, uintptr_t& pc, uintptr_t& sp, uintptr_t& fp) {\n    instruction_t* ip = (instruction_t*)pc;\n    instruction_t* entry = (instruction_t*)nm->entry();\n    if (ip <= entry\n        || *ip == 0xc3                                                          // ret\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/stackFrame_x64.cpp"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 18,
                  "endLine": 78,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n\nbool StackFrame::unwindStub(instruction_t* entry, const char* name, uintptr_t& pc, uintptr_t& sp, uintptr_t& fp) {\n    instruction_t* ip = (instruction_t*)pc;\n    if (ip == entry || *ip == 0xc3\n        || strncmp(name, \"itable\", 6) == 0\n        || strncmp(name, \"vtable\", 6) == 0\n",
                    "rendered": {
                      "text": "\n\nbool StackFrame::unwindStub(instruction_t* entry, const char* name, uintptr_t& pc, uintptr_t& sp, uintptr_t& fp) {\n    instruction_t* ip = (instruction_t*)pc;\n    if (ip == entry || *ip == 0xc3\n        || strncmp(name, \"itable\", 6) == 0\n        || strncmp(name, \"vtable\", 6) == 0\n",
                      "markdown": "`\n\nbool StackFrame::unwindStub(instruction_t* entry, const char* name, uintptr_t& pc, uintptr_t& sp, uintptr_t& fp) {\n    instruction_t* ip = (instruction_t*)pc;\n    if (ip == entry || *ip == 0xc3\n        || strncmp(name, \"itable\", 6) == 0\n        || strncmp(name, \"vtable\", 6) == 0\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/j9Ext.h"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 14,
                  "endLine": 54,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        return JVMTI_EXT(_GetOSThreadID, jthread, jlong*)(_jvmti, thread, &thread_id) == 0 ? (int)thread_id : -1;\n    }\n\n    static JNIEnv* GetJ9vmThread(jthread thread) {\n        JNIEnv* result;\n        return JVMTI_EXT(_GetJ9vmThread, jthread, JNIEnv**)(_jvmti, thread, &result) == 0 ? result : NULL;\n    }\n",
                    "rendered": {
                      "text": "        return JVMTI_EXT(_GetOSThreadID, jthread, jlong*)(_jvmti, thread, &thread_id) == 0 ? (int)thread_id : -1;\n    }\n\n    static JNIEnv* GetJ9vmThread(jthread thread) {\n        JNIEnv* result;\n        return JVMTI_EXT(_GetJ9vmThread, jthread, JNIEnv**)(_jvmti, thread, &result) == 0 ? result : NULL;\n    }\n",
                      "markdown": "`        return JVMTI_EXT(_GetOSThreadID, jthread, jlong*)(_jvmti, thread, &thread_id) == 0 ? (int)thread_id : -1;\n    }\n\n    static JNIEnv* GetJ9vmThread(jthread thread) {\n        JNIEnv* result;\n        return JVMTI_EXT(_GetJ9vmThread, jthread, JNIEnv**)(_jvmti, thread, &result) == 0 ? result : NULL;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/j9StackTraces.cpp"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 7,
                  "endLine": 80,
                  "endColumn": 41,
                  "snippet": {
                    "text": "}\n\nvoid J9StackTraces::timerLoop() {\n    JNIEnv* jni = VM::attachThread(\"Async-profiler Sampler\");\n    __atomic_store_n(&_self_env, jni, __ATOMIC_RELEASE);\n\n    jni->PushLocalFrame(64);\n",
                    "rendered": {
                      "text": "}\n\nvoid J9StackTraces::timerLoop() {\n    JNIEnv* jni = VM::attachThread(\"Async-profiler Sampler\");\n    __atomic_store_n(&_self_env, jni, __ATOMIC_RELEASE);\n\n    jni->PushLocalFrame(64);\n",
                      "markdown": "`}\n\nvoid J9StackTraces::timerLoop() {\n    JNIEnv* jni = VM::attachThread(\"Async-profiler Sampler\");\n    __atomic_store_n(&_self_env, jni, __ATOMIC_RELEASE);\n\n    jni->PushLocalFrame(64);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/j9StackTraces.cpp"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 22,
                  "endLine": 160,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    }\n\n    JNIEnv* env = VM::jni();\n    if (env != NULL && env != self_env) {\n        J9VMThread* vm_thread = (J9VMThread*)env;\n        uintptr_t flags = vm_thread->getAndSetFlag(J9_HALT_THREAD_INSPECTION);\n        if (flags & J9_HALT_THREAD_INSPECTION) {\n",
                    "rendered": {
                      "text": "    }\n\n    JNIEnv* env = VM::jni();\n    if (env != NULL && env != self_env) {\n        J9VMThread* vm_thread = (J9VMThread*)env;\n        uintptr_t flags = vm_thread->getAndSetFlag(J9_HALT_THREAD_INSPECTION);\n        if (flags & J9_HALT_THREAD_INSPECTION) {\n",
                      "markdown": "`    }\n\n    JNIEnv* env = VM::jni();\n    if (env != NULL && env != self_env) {\n        J9VMThread* vm_thread = (J9VMThread*)env;\n        uintptr_t flags = vm_thread->getAndSetFlag(J9_HALT_THREAD_INSPECTION);\n        if (flags & J9_HALT_THREAD_INSPECTION) {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/j9StackTraces.cpp"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 11,
                  "endLine": 159,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        return;\n    }\n\n    JNIEnv* env = VM::jni();\n    if (env != NULL && env != self_env) {\n        J9VMThread* vm_thread = (J9VMThread*)env;\n        uintptr_t flags = vm_thread->getAndSetFlag(J9_HALT_THREAD_INSPECTION);\n",
                    "rendered": {
                      "text": "        return;\n    }\n\n    JNIEnv* env = VM::jni();\n    if (env != NULL && env != self_env) {\n        J9VMThread* vm_thread = (J9VMThread*)env;\n        uintptr_t flags = vm_thread->getAndSetFlag(J9_HALT_THREAD_INSPECTION);\n",
                      "markdown": "`        return;\n    }\n\n    JNIEnv* env = VM::jni();\n    if (env != NULL && env != self_env) {\n        J9VMThread* vm_thread = (J9VMThread*)env;\n        uintptr_t flags = vm_thread->getAndSetFlag(J9_HALT_THREAD_INSPECTION);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/flightRecorder.cpp"
                },
                "region": {
                  "startLine": 1463,
                  "startColumn": 4,
                  "endLine": 1463,
                  "endColumn": 19,
                  "snippet": {
                    "text": "void FlightRecorder::stopMasterRecording() {\n    JNIEnv* env = VM::jni();\n    env->CallStaticVoidMethod(_jfr_sync_class, _stop_method);\n    env->ExceptionClear();\n}\n\nvoid FlightRecorder::recordEvent(int lock_index, int tid, u32 call_trace_id,\n",
                    "rendered": {
                      "text": "void FlightRecorder::stopMasterRecording() {\n    JNIEnv* env = VM::jni();\n    env->CallStaticVoidMethod(_jfr_sync_class, _stop_method);\n    env->ExceptionClear();\n}\n\nvoid FlightRecorder::recordEvent(int lock_index, int tid, u32 call_trace_id,\n",
                      "markdown": "`void FlightRecorder::stopMasterRecording() {\n    JNIEnv* env = VM::jni();\n    env->CallStaticVoidMethod(_jfr_sync_class, _stop_method);\n    env->ExceptionClear();\n}\n\nvoid FlightRecorder::recordEvent(int lock_index, int tid, u32 call_trace_id,\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/flightRecorder.cpp"
                },
                "region": {
                  "startLine": 1462,
                  "startColumn": 4,
                  "endLine": 1462,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\nvoid FlightRecorder::stopMasterRecording() {\n    JNIEnv* env = VM::jni();\n    env->CallStaticVoidMethod(_jfr_sync_class, _stop_method);\n    env->ExceptionClear();\n}\n\n",
                    "rendered": {
                      "text": "\nvoid FlightRecorder::stopMasterRecording() {\n    JNIEnv* env = VM::jni();\n    env->CallStaticVoidMethod(_jfr_sync_class, _stop_method);\n    env->ExceptionClear();\n}\n\n",
                      "markdown": "`\nvoid FlightRecorder::stopMasterRecording() {\n    JNIEnv* env = VM::jni();\n    env->CallStaticVoidMethod(_jfr_sync_class, _stop_method);\n    env->ExceptionClear();\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/flightRecorder.cpp"
                },
                "region": {
                  "startLine": 1452,
                  "startColumn": 8,
                  "endLine": 1452,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n    env->CallStaticVoidMethod(_jfr_sync_class, _start_method, jfilename, jsettings, event_mask);\n\n    if (env->ExceptionCheck()) {\n        env->ExceptionDescribe();\n        return Error(\"Could not start master JFR recording\");\n    }\n",
                    "rendered": {
                      "text": "\n    env->CallStaticVoidMethod(_jfr_sync_class, _start_method, jfilename, jsettings, event_mask);\n\n    if (env->ExceptionCheck()) {\n        env->ExceptionDescribe();\n        return Error(\"Could not start master JFR recording\");\n    }\n",
                      "markdown": "`\n    env->CallStaticVoidMethod(_jfr_sync_class, _start_method, jfilename, jsettings, event_mask);\n\n    if (env->ExceptionCheck()) {\n        env->ExceptionDescribe();\n        return Error(\"Could not start master JFR recording\");\n    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/flightRecorder.cpp"
                },
                "region": {
                  "startLine": 1450,
                  "startColumn": 4,
                  "endLine": 1450,
                  "endColumn": 39,
                  "snippet": {
                    "text": "                     (args._lock >= 0 ? 4 : 0) |\n                     ((args._jfr_options ^ JFR_SYNC_OPTS) << 4);\n\n    env->CallStaticVoidMethod(_jfr_sync_class, _start_method, jfilename, jsettings, event_mask);\n\n    if (env->ExceptionCheck()) {\n        env->ExceptionDescribe();\n",
                    "rendered": {
                      "text": "                     (args._lock >= 0 ? 4 : 0) |\n                     ((args._jfr_options ^ JFR_SYNC_OPTS) << 4);\n\n    env->CallStaticVoidMethod(_jfr_sync_class, _start_method, jfilename, jsettings, event_mask);\n\n    if (env->ExceptionCheck()) {\n        env->ExceptionDescribe();\n",
                      "markdown": "`                     (args._lock >= 0 ? 4 : 0) |\n                     ((args._jfr_options ^ JFR_SYNC_OPTS) << 4);\n\n    env->CallStaticVoidMethod(_jfr_sync_class, _start_method, jfilename, jsettings, event_mask);\n\n    if (env->ExceptionCheck()) {\n        env->ExceptionDescribe();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/flightRecorder.cpp"
                },
                "region": {
                  "startLine": 1444,
                  "startColumn": 56,
                  "endLine": 1444,
                  "endColumn": 88,
                  "snippet": {
                    "text": "    env->ExceptionClear();\n\n    jobject jfilename = env->NewStringUTF(filename);\n    jobject jsettings = args._jfr_sync == NULL ? NULL : env->NewStringUTF(args._jfr_sync);\n    int event_mask = (args._event != NULL ? 1 : 0) |\n                     (args._alloc >= 0 ? 2 : 0) |\n                     (args._lock >= 0 ? 4 : 0) |\n",
                    "rendered": {
                      "text": "    env->ExceptionClear();\n\n    jobject jfilename = env->NewStringUTF(filename);\n    jobject jsettings = args._jfr_sync == NULL ? NULL : env->NewStringUTF(args._jfr_sync);\n    int event_mask = (args._event != NULL ? 1 : 0) |\n                     (args._alloc >= 0 ? 2 : 0) |\n                     (args._lock >= 0 ? 4 : 0) |\n",
                      "markdown": "`    env->ExceptionClear();\n\n    jobject jfilename = env->NewStringUTF(filename);\n    jobject jsettings = args._jfr_sync == NULL ? NULL : env->NewStringUTF(args._jfr_sync);\n    int event_mask = (args._event != NULL ? 1 : 0) |\n                     (args._alloc >= 0 ? 2 : 0) |\n                     (args._lock >= 0 ? 4 : 0) |\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/flightRecorder.cpp"
                },
                "region": {
                  "startLine": 1441,
                  "startColumn": 4,
                  "endLine": 1441,
                  "endColumn": 19,
                  "snippet": {
                    "text": "            }\n        }\n    }\n    env->ExceptionClear();\n\n    jobject jfilename = env->NewStringUTF(filename);\n    jobject jsettings = args._jfr_sync == NULL ? NULL : env->NewStringUTF(args._jfr_sync);\n",
                    "rendered": {
                      "text": "            }\n        }\n    }\n    env->ExceptionClear();\n\n    jobject jfilename = env->NewStringUTF(filename);\n    jobject jsettings = args._jfr_sync == NULL ? NULL : env->NewStringUTF(args._jfr_sync);\n",
                      "markdown": "`            }\n        }\n    }\n    env->ExceptionClear();\n\n    jobject jfilename = env->NewStringUTF(filename);\n    jobject jsettings = args._jfr_sync == NULL ? NULL : env->NewStringUTF(args._jfr_sync);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/flightRecorder.cpp"
                },
                "region": {
                  "startLine": 1435,
                  "startColumn": 38,
                  "endLine": 1435,
                  "endColumn": 53,
                  "snippet": {
                    "text": "            jmethodID method = env->GetStaticMethodID(options_class, \"setStackDepth\", \"(Ljava/lang/Integer;)V\");\n            if (method != NULL) {\n                jobject value = env->CallStaticObjectMethod(_jfr_sync_class, _box_method, args._jstackdepth);\n                if (value != NULL && !env->ExceptionCheck()) {\n                    env->CallStaticVoidMethod(options_class, method, value);\n                }\n            }\n",
                    "rendered": {
                      "text": "            jmethodID method = env->GetStaticMethodID(options_class, \"setStackDepth\", \"(Ljava/lang/Integer;)V\");\n            if (method != NULL) {\n                jobject value = env->CallStaticObjectMethod(_jfr_sync_class, _box_method, args._jstackdepth);\n                if (value != NULL && !env->ExceptionCheck()) {\n                    env->CallStaticVoidMethod(options_class, method, value);\n                }\n            }\n",
                      "markdown": "`            jmethodID method = env->GetStaticMethodID(options_class, \"setStackDepth\", \"(Ljava/lang/Integer;)V\");\n            if (method != NULL) {\n                jobject value = env->CallStaticObjectMethod(_jfr_sync_class, _box_method, args._jstackdepth);\n                if (value != NULL && !env->ExceptionCheck()) {\n                    env->CallStaticVoidMethod(options_class, method, value);\n                }\n            }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/flightRecorder.cpp"
                },
                "region": {
                  "startLine": 1434,
                  "startColumn": 32,
                  "endLine": 1434,
                  "endColumn": 69,
                  "snippet": {
                    "text": "        if (args._jstackdepth > 0) {\n            jmethodID method = env->GetStaticMethodID(options_class, \"setStackDepth\", \"(Ljava/lang/Integer;)V\");\n            if (method != NULL) {\n                jobject value = env->CallStaticObjectMethod(_jfr_sync_class, _box_method, args._jstackdepth);\n                if (value != NULL && !env->ExceptionCheck()) {\n                    env->CallStaticVoidMethod(options_class, method, value);\n                }\n",
                    "rendered": {
                      "text": "        if (args._jstackdepth > 0) {\n            jmethodID method = env->GetStaticMethodID(options_class, \"setStackDepth\", \"(Ljava/lang/Integer;)V\");\n            if (method != NULL) {\n                jobject value = env->CallStaticObjectMethod(_jfr_sync_class, _box_method, args._jstackdepth);\n                if (value != NULL && !env->ExceptionCheck()) {\n                    env->CallStaticVoidMethod(options_class, method, value);\n                }\n",
                      "markdown": "`        if (args._jstackdepth > 0) {\n            jmethodID method = env->GetStaticMethodID(options_class, \"setStackDepth\", \"(Ljava/lang/Integer;)V\");\n            if (method != NULL) {\n                jobject value = env->CallStaticObjectMethod(_jfr_sync_class, _box_method, args._jstackdepth);\n                if (value != NULL && !env->ExceptionCheck()) {\n                    env->CallStaticVoidMethod(options_class, method, value);\n                }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/flightRecorder.cpp"
                },
                "region": {
                  "startLine": 1432,
                  "startColumn": 31,
                  "endLine": 1432,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        }\n\n        if (args._jstackdepth > 0) {\n            jmethodID method = env->GetStaticMethodID(options_class, \"setStackDepth\", \"(Ljava/lang/Integer;)V\");\n            if (method != NULL) {\n                jobject value = env->CallStaticObjectMethod(_jfr_sync_class, _box_method, args._jstackdepth);\n                if (value != NULL && !env->ExceptionCheck()) {\n",
                    "rendered": {
                      "text": "        }\n\n        if (args._jstackdepth > 0) {\n            jmethodID method = env->GetStaticMethodID(options_class, \"setStackDepth\", \"(Ljava/lang/Integer;)V\");\n            if (method != NULL) {\n                jobject value = env->CallStaticObjectMethod(_jfr_sync_class, _box_method, args._jstackdepth);\n                if (value != NULL && !env->ExceptionCheck()) {\n",
                      "markdown": "`        }\n\n        if (args._jstackdepth > 0) {\n            jmethodID method = env->GetStaticMethodID(options_class, \"setStackDepth\", \"(Ljava/lang/Integer;)V\");\n            if (method != NULL) {\n                jobject value = env->CallStaticObjectMethod(_jfr_sync_class, _box_method, args._jstackdepth);\n                if (value != NULL && !env->ExceptionCheck()) {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/flightRecorder.cpp"
                },
                "region": {
                  "startLine": 1427,
                  "startColumn": 16,
                  "endLine": 1427,
                  "endColumn": 31,
                  "snippet": {
                    "text": "            jmethodID method = env->GetStaticMethodID(options_class, \"setMaxChunkSize\", \"(J)V\");\n            if (method != NULL) {\n                env->CallStaticVoidMethod(options_class, method, args._chunk_size < 1024 * 1024 ? 1024 * 1024 : args._chunk_size);\n                env->ExceptionClear();\n            }\n        }\n\n",
                    "rendered": {
                      "text": "            jmethodID method = env->GetStaticMethodID(options_class, \"setMaxChunkSize\", \"(J)V\");\n            if (method != NULL) {\n                env->CallStaticVoidMethod(options_class, method, args._chunk_size < 1024 * 1024 ? 1024 * 1024 : args._chunk_size);\n                env->ExceptionClear();\n            }\n        }\n\n",
                      "markdown": "`            jmethodID method = env->GetStaticMethodID(options_class, \"setMaxChunkSize\", \"(J)V\");\n            if (method != NULL) {\n                env->CallStaticVoidMethod(options_class, method, args._chunk_size < 1024 * 1024 ? 1024 * 1024 : args._chunk_size);\n                env->ExceptionClear();\n            }\n        }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/flightRecorder.cpp"
                },
                "region": {
                  "startLine": 1424,
                  "startColumn": 31,
                  "endLine": 1424,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    jclass options_class = env->FindClass(\"jdk/jfr/internal/Options\");\n    if (options_class != NULL) {\n        if (args._chunk_size > 0) {\n            jmethodID method = env->GetStaticMethodID(options_class, \"setMaxChunkSize\", \"(J)V\");\n            if (method != NULL) {\n                env->CallStaticVoidMethod(options_class, method, args._chunk_size < 1024 * 1024 ? 1024 * 1024 : args._chunk_size);\n                env->ExceptionClear();\n",
                    "rendered": {
                      "text": "    jclass options_class = env->FindClass(\"jdk/jfr/internal/Options\");\n    if (options_class != NULL) {\n        if (args._chunk_size > 0) {\n            jmethodID method = env->GetStaticMethodID(options_class, \"setMaxChunkSize\", \"(J)V\");\n            if (method != NULL) {\n                env->CallStaticVoidMethod(options_class, method, args._chunk_size < 1024 * 1024 ? 1024 * 1024 : args._chunk_size);\n                env->ExceptionClear();\n",
                      "markdown": "`    jclass options_class = env->FindClass(\"jdk/jfr/internal/Options\");\n    if (options_class != NULL) {\n        if (args._chunk_size > 0) {\n            jmethodID method = env->GetStaticMethodID(options_class, \"setMaxChunkSize\", \"(J)V\");\n            if (method != NULL) {\n                env->CallStaticVoidMethod(options_class, method, args._chunk_size < 1024 * 1024 ? 1024 * 1024 : args._chunk_size);\n                env->ExceptionClear();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/flightRecorder.cpp"
                },
                "region": {
                  "startLine": 1414,
                  "startColumn": 34,
                  "endLine": 1414,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        if (cls == NULL || env->RegisterNatives(cls, &native_method, 1) != 0\n                || (_start_method = env->GetStaticMethodID(cls, \"start\", \"(Ljava/lang/String;Ljava/lang/String;I)V\")) == NULL\n                || (_stop_method = env->GetStaticMethodID(cls, \"stop\", \"()V\")) == NULL\n                || (_box_method = env->GetStaticMethodID(cls, \"box\", \"(I)Ljava/lang/Integer;\")) == NULL\n                || (_jfr_sync_class = (jclass)env->NewGlobalRef(cls)) == NULL) {\n            env->ExceptionDescribe();\n            return Error(\"Failed to initialize JfrSync class\");\n",
                    "rendered": {
                      "text": "        if (cls == NULL || env->RegisterNatives(cls, &native_method, 1) != 0\n                || (_start_method = env->GetStaticMethodID(cls, \"start\", \"(Ljava/lang/String;Ljava/lang/String;I)V\")) == NULL\n                || (_stop_method = env->GetStaticMethodID(cls, \"stop\", \"()V\")) == NULL\n                || (_box_method = env->GetStaticMethodID(cls, \"box\", \"(I)Ljava/lang/Integer;\")) == NULL\n                || (_jfr_sync_class = (jclass)env->NewGlobalRef(cls)) == NULL) {\n            env->ExceptionDescribe();\n            return Error(\"Failed to initialize JfrSync class\");\n",
                      "markdown": "`        if (cls == NULL || env->RegisterNatives(cls, &native_method, 1) != 0\n                || (_start_method = env->GetStaticMethodID(cls, \"start\", \"(Ljava/lang/String;Ljava/lang/String;I)V\")) == NULL\n                || (_stop_method = env->GetStaticMethodID(cls, \"stop\", \"()V\")) == NULL\n                || (_box_method = env->GetStaticMethodID(cls, \"box\", \"(I)Ljava/lang/Integer;\")) == NULL\n                || (_jfr_sync_class = (jclass)env->NewGlobalRef(cls)) == NULL) {\n            env->ExceptionDescribe();\n            return Error(\"Failed to initialize JfrSync class\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/flightRecorder.cpp"
                },
                "region": {
                  "startLine": 1413,
                  "startColumn": 35,
                  "endLine": 1413,
                  "endColumn": 43,
                  "snippet": {
                    "text": "(const jbyte*)JFR_SYNC_CLASS, INCBIN_SIZEOF(JFR_SYNC_CLASS));\n        if (cls == NULL || env->RegisterNatives(cls, &native_method, 1) != 0\n                || (_start_method = env->GetStaticMethodID(cls, \"start\", \"(Ljava/lang/String;Ljava/lang/String;I)V\")) == NULL\n                || (_stop_method = env->GetStaticMethodID(cls, \"stop\", \"()V\")) == NULL\n                || (_box_method = env->GetStaticMethodID(cls, \"box\", \"(I)Ljava/lang/Integer;\")) == NULL\n                || (_jfr_sync_class = (jclass)env->NewGlobalRef(cls)) == NULL) {\n            env->ExceptionDescribe();\n            return Error(\"Failed ",
                    "rendered": {
                      "text": "(const jbyte*)JFR_SYNC_CLASS, INCBIN_SIZEOF(JFR_SYNC_CLASS));\n        if (cls == NULL || env->RegisterNatives(cls, &native_method, 1) != 0\n                || (_start_method = env->GetStaticMethodID(cls, \"start\", \"(Ljava/lang/String;Ljava/lang/String;I)V\")) == NULL\n                || (_stop_method = env->GetStaticMethodID(cls, \"stop\", \"()V\")) == NULL\n                || (_box_method = env->GetStaticMethodID(cls, \"box\", \"(I)Ljava/lang/Integer;\")) == NULL\n                || (_jfr_sync_class = (jclass)env->NewGlobalRef(cls)) == NULL) {\n            env->ExceptionDescribe();\n            return Error(\"Failed ",
                      "markdown": "`(const jbyte*)JFR_SYNC_CLASS, INCBIN_SIZEOF(JFR_SYNC_CLASS));\n        if (cls == NULL || env->RegisterNatives(cls, &native_method, 1) != 0\n                || (_start_method = env->GetStaticMethodID(cls, \"start\", \"(Ljava/lang/String;Ljava/lang/String;I)V\")) == NULL\n                || (_stop_method = env->GetStaticMethodID(cls, \"stop\", \"()V\")) == NULL\n                || (_box_method = env->GetStaticMethodID(cls, \"box\", \"(I)Ljava/lang/Integer;\")) == NULL\n                || (_jfr_sync_class = (jclass)env->NewGlobalRef(cls)) == NULL) {\n            env->ExceptionDescribe();\n            return Error(\"Failed `"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/flightRecorder.cpp"
                },
                "region": {
                  "startLine": 1412,
                  "startColumn": 36,
                  "endLine": 1412,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\n        jclass cls = env->DefineClass(JFR_SYNC_NAME, NULL, (const jbyte*)JFR_SYNC_CLASS, INCBIN_SIZEOF(JFR_SYNC_CLASS));\n        if (cls == NULL || env->RegisterNatives(cls, &native_method, 1) != 0\n                || (_start_method = env->GetStaticMethodID(cls, \"start\", \"(Ljava/lang/String;Ljava/lang/String;I)V\")) == NULL\n                || (_stop_method = env->GetStaticMethodID(cls, \"stop\", \"()V\")) == NULL\n                || (_box_method = env->GetStaticMethodID(cls, \"box\", \"(I)Ljava/lang/Integer;\")) == NULL\n                || (_jfr_sync_class = (jclass)env->NewGlobalRef(cls)) == NULL) {\n",
                    "rendered": {
                      "text": "\n        jclass cls = env->DefineClass(JFR_SYNC_NAME, NULL, (const jbyte*)JFR_SYNC_CLASS, INCBIN_SIZEOF(JFR_SYNC_CLASS));\n        if (cls == NULL || env->RegisterNatives(cls, &native_method, 1) != 0\n                || (_start_method = env->GetStaticMethodID(cls, \"start\", \"(Ljava/lang/String;Ljava/lang/String;I)V\")) == NULL\n                || (_stop_method = env->GetStaticMethodID(cls, \"stop\", \"()V\")) == NULL\n                || (_box_method = env->GetStaticMethodID(cls, \"box\", \"(I)Ljava/lang/Integer;\")) == NULL\n                || (_jfr_sync_class = (jclass)env->NewGlobalRef(cls)) == NULL) {\n",
                      "markdown": "`\n        jclass cls = env->DefineClass(JFR_SYNC_NAME, NULL, (const jbyte*)JFR_SYNC_CLASS, INCBIN_SIZEOF(JFR_SYNC_CLASS));\n        if (cls == NULL || env->RegisterNatives(cls, &native_method, 1) != 0\n                || (_start_method = env->GetStaticMethodID(cls, \"start\", \"(Ljava/lang/String;Ljava/lang/String;I)V\")) == NULL\n                || (_stop_method = env->GetStaticMethodID(cls, \"stop\", \"()V\")) == NULL\n                || (_box_method = env->GetStaticMethodID(cls, \"box\", \"(I)Ljava/lang/Integer;\")) == NULL\n                || (_jfr_sync_class = (jclass)env->NewGlobalRef(cls)) == NULL) {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/flightRecorder.cpp"
                },
                "region": {
                  "startLine": 1410,
                  "startColumn": 21,
                  "endLine": 1410,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n        const JNINativeMethod native_method = {(char*)\"stopProfiler\", (char*)\"()V\", (void*)JfrSync_stopProfiler};\n\n        jclass cls = env->DefineClass(JFR_SYNC_NAME, NULL, (const jbyte*)JFR_SYNC_CLASS, INCBIN_SIZEOF(JFR_SYNC_CLASS));\n        if (cls == NULL || env->RegisterNatives(cls, &native_method, 1) != 0\n                || (_start_method = env->GetStaticMethodID(cls, \"start\", \"(Ljava/lang/String;Ljava/lang/String;I)V\")) == NULL\n                || (_stop_method = env->GetStaticMethodID(cls, \"stop\", \"()V\")) == NULL\n",
                    "rendered": {
                      "text": "\n        const JNINativeMethod native_method = {(char*)\"stopProfiler\", (char*)\"()V\", (void*)JfrSync_stopProfiler};\n\n        jclass cls = env->DefineClass(JFR_SYNC_NAME, NULL, (const jbyte*)JFR_SYNC_CLASS, INCBIN_SIZEOF(JFR_SYNC_CLASS));\n        if (cls == NULL || env->RegisterNatives(cls, &native_method, 1) != 0\n                || (_start_method = env->GetStaticMethodID(cls, \"start\", \"(Ljava/lang/String;Ljava/lang/String;I)V\")) == NULL\n                || (_stop_method = env->GetStaticMethodID(cls, \"stop\", \"()V\")) == NULL\n",
                      "markdown": "`\n        const JNINativeMethod native_method = {(char*)\"stopProfiler\", (char*)\"()V\", (void*)JfrSync_stopProfiler};\n\n        jclass cls = env->DefineClass(JFR_SYNC_NAME, NULL, (const jbyte*)JFR_SYNC_CLASS, INCBIN_SIZEOF(JFR_SYNC_CLASS));\n        if (cls == NULL || env->RegisterNatives(cls, &native_method, 1) != 0\n                || (_start_method = env->GetStaticMethodID(cls, \"start\", \"(Ljava/lang/String;Ljava/lang/String;I)V\")) == NULL\n                || (_stop_method = env->GetStaticMethodID(cls, \"stop\", \"()V\")) == NULL\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/flightRecorder.cpp"
                },
                "region": {
                  "startLine": 1404,
                  "startColumn": 12,
                  "endLine": 1404,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n    if (_jfr_sync_class == NULL) {\n        if (env->FindClass(\"jdk/jfr/FlightRecorderListener\") == NULL) {\n            env->ExceptionClear();\n            return Error(\"JDK Flight Recorder is not available\");\n        }\n\n",
                    "rendered": {
                      "text": "\n    if (_jfr_sync_class == NULL) {\n        if (env->FindClass(\"jdk/jfr/FlightRecorderListener\") == NULL) {\n            env->ExceptionClear();\n            return Error(\"JDK Flight Recorder is not available\");\n        }\n\n",
                      "markdown": "`\n    if (_jfr_sync_class == NULL) {\n        if (env->FindClass(\"jdk/jfr/FlightRecorderListener\") == NULL) {\n            env->ExceptionClear();\n            return Error(\"JDK Flight Recorder is not available\");\n        }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/flightRecorder.cpp"
                },
                "region": {
                  "startLine": 686,
                  "startColumn": 8,
                  "endLine": 686,
                  "endColumn": 23,
                  "snippet": {
                    "text": "                }\n            }\n        }\n        env->ExceptionClear();\n\n        if (_agent_properties == NULL) {\n            return false;\n",
                    "rendered": {
                      "text": "                }\n            }\n        }\n        env->ExceptionClear();\n\n        if (_agent_properties == NULL) {\n            return false;\n",
                      "markdown": "`                }\n            }\n        }\n        env->ExceptionClear();\n\n        if (_agent_properties == NULL) {\n            return false;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/flightRecorder.cpp"
                },
                "region": {
                  "startLine": 681,
                  "startColumn": 51,
                  "endLine": 681,
                  "endColumn": 59,
                  "snippet": {
                    "text": "                if (props != NULL && !env->ExceptionCheck()) {\n                    jstring str = (jstring)env->CallObjectMethod(props, to_string);\n                    if (str != NULL && !env->ExceptionCheck()) {\n                        _agent_properties = (char*)env->GetStringUTFChars(str, NULL);\n                    }\n                }\n            }\n",
                    "rendered": {
                      "text": "                if (props != NULL && !env->ExceptionCheck()) {\n                    jstring str = (jstring)env->CallObjectMethod(props, to_string);\n                    if (str != NULL && !env->ExceptionCheck()) {\n                        _agent_properties = (char*)env->GetStringUTFChars(str, NULL);\n                    }\n                }\n            }\n",
                      "markdown": "`                if (props != NULL && !env->ExceptionCheck()) {\n                    jstring str = (jstring)env->CallObjectMethod(props, to_string);\n                    if (str != NULL && !env->ExceptionCheck()) {\n                        _agent_properties = (char*)env->GetStringUTFChars(str, NULL);\n                    }\n                }\n            }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/flightRecorder.cpp"
                },
                "region": {
                  "startLine": 680,
                  "startColumn": 40,
                  "endLine": 680,
                  "endColumn": 55,
                  "snippet": {
                    "text": "                jobject props = env->CallStaticObjectMethod(vm_support, get_agent_props);\n                if (props != NULL && !env->ExceptionCheck()) {\n                    jstring str = (jstring)env->CallObjectMethod(props, to_string);\n                    if (str != NULL && !env->ExceptionCheck()) {\n                        _agent_properties = (char*)env->GetStringUTFChars(str, NULL);\n                    }\n                }\n",
                    "rendered": {
                      "text": "                jobject props = env->CallStaticObjectMethod(vm_support, get_agent_props);\n                if (props != NULL && !env->ExceptionCheck()) {\n                    jstring str = (jstring)env->CallObjectMethod(props, to_string);\n                    if (str != NULL && !env->ExceptionCheck()) {\n                        _agent_properties = (char*)env->GetStringUTFChars(str, NULL);\n                    }\n                }\n",
                      "markdown": "`                jobject props = env->CallStaticObjectMethod(vm_support, get_agent_props);\n                if (props != NULL && !env->ExceptionCheck()) {\n                    jstring str = (jstring)env->CallObjectMethod(props, to_string);\n                    if (str != NULL && !env->ExceptionCheck()) {\n                        _agent_properties = (char*)env->GetStringUTFChars(str, NULL);\n                    }\n                }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/flightRecorder.cpp"
                },
                "region": {
                  "startLine": 678,
                  "startColumn": 38,
                  "endLine": 678,
                  "endColumn": 53,
                  "snippet": {
                    "text": "            jmethodID to_string = env->GetMethodID(env->FindClass(\"java/lang/Object\"), \"toString\", \"()Ljava/lang/String;\");\n            if (get_agent_props != NULL && to_string != NULL) {\n                jobject props = env->CallStaticObjectMethod(vm_support, get_agent_props);\n                if (props != NULL && !env->ExceptionCheck()) {\n                    jstring str = (jstring)env->CallObjectMethod(props, to_string);\n                    if (str != NULL && !env->ExceptionCheck()) {\n                        _agent_properties = (char*)env->GetStringUTFChars(str, NULL);\n",
                    "rendered": {
                      "text": "            jmethodID to_string = env->GetMethodID(env->FindClass(\"java/lang/Object\"), \"toString\", \"()Ljava/lang/String;\");\n            if (get_agent_props != NULL && to_string != NULL) {\n                jobject props = env->CallStaticObjectMethod(vm_support, get_agent_props);\n                if (props != NULL && !env->ExceptionCheck()) {\n                    jstring str = (jstring)env->CallObjectMethod(props, to_string);\n                    if (str != NULL && !env->ExceptionCheck()) {\n                        _agent_properties = (char*)env->GetStringUTFChars(str, NULL);\n",
                      "markdown": "`            jmethodID to_string = env->GetMethodID(env->FindClass(\"java/lang/Object\"), \"toString\", \"()Ljava/lang/String;\");\n            if (get_agent_props != NULL && to_string != NULL) {\n                jobject props = env->CallStaticObjectMethod(vm_support, get_agent_props);\n                if (props != NULL && !env->ExceptionCheck()) {\n                    jstring str = (jstring)env->CallObjectMethod(props, to_string);\n                    if (str != NULL && !env->ExceptionCheck()) {\n                        _agent_properties = (char*)env->GetStringUTFChars(str, NULL);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/flightRecorder.cpp"
                },
                "region": {
                  "startLine": 677,
                  "startColumn": 32,
                  "endLine": 677,
                  "endColumn": 75,
                  "snippet": {
                    "text": "            jmethodID get_agent_props = env->GetStaticMethodID(vm_support, \"getAgentProperties\", \"()Ljava/util/Properties;\");\n            jmethodID to_string = env->GetMethodID(env->FindClass(\"java/lang/Object\"), \"toString\", \"()Ljava/lang/String;\");\n            if (get_agent_props != NULL && to_string != NULL) {\n                jobject props = env->CallStaticObjectMethod(vm_support, get_agent_props);\n                if (props != NULL && !env->ExceptionCheck()) {\n                    jstring str = (jstring)env->CallObjectMethod(props, to_string);\n                    if (str != NULL && !env->ExceptionCheck()) {\n",
                    "rendered": {
                      "text": "            jmethodID get_agent_props = env->GetStaticMethodID(vm_support, \"getAgentProperties\", \"()Ljava/util/Properties;\");\n            jmethodID to_string = env->GetMethodID(env->FindClass(\"java/lang/Object\"), \"toString\", \"()Ljava/lang/String;\");\n            if (get_agent_props != NULL && to_string != NULL) {\n                jobject props = env->CallStaticObjectMethod(vm_support, get_agent_props);\n                if (props != NULL && !env->ExceptionCheck()) {\n                    jstring str = (jstring)env->CallObjectMethod(props, to_string);\n                    if (str != NULL && !env->ExceptionCheck()) {\n",
                      "markdown": "`            jmethodID get_agent_props = env->GetStaticMethodID(vm_support, \"getAgentProperties\", \"()Ljava/util/Properties;\");\n            jmethodID to_string = env->GetMethodID(env->FindClass(\"java/lang/Object\"), \"toString\", \"()Ljava/lang/String;\");\n            if (get_agent_props != NULL && to_string != NULL) {\n                jobject props = env->CallStaticObjectMethod(vm_support, get_agent_props);\n                if (props != NULL && !env->ExceptionCheck()) {\n                    jstring str = (jstring)env->CallObjectMethod(props, to_string);\n                    if (str != NULL && !env->ExceptionCheck()) {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/flightRecorder.cpp"
                },
                "region": {
                  "startLine": 675,
                  "startColumn": 34,
                  "endLine": 675,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        }\n        if (vm_support != NULL) {\n            jmethodID get_agent_props = env->GetStaticMethodID(vm_support, \"getAgentProperties\", \"()Ljava/util/Properties;\");\n            jmethodID to_string = env->GetMethodID(env->FindClass(\"java/lang/Object\"), \"toString\", \"()Ljava/lang/String;\");\n            if (get_agent_props != NULL && to_string != NULL) {\n                jobject props = env->CallStaticObjectMethod(vm_support, get_agent_props);\n                if (props != NULL && !env->ExceptionCheck()) {\n",
                    "rendered": {
                      "text": "        }\n        if (vm_support != NULL) {\n            jmethodID get_agent_props = env->GetStaticMethodID(vm_support, \"getAgentProperties\", \"()Ljava/util/Properties;\");\n            jmethodID to_string = env->GetMethodID(env->FindClass(\"java/lang/Object\"), \"toString\", \"()Ljava/lang/String;\");\n            if (get_agent_props != NULL && to_string != NULL) {\n                jobject props = env->CallStaticObjectMethod(vm_support, get_agent_props);\n                if (props != NULL && !env->ExceptionCheck()) {\n",
                      "markdown": "`        }\n        if (vm_support != NULL) {\n            jmethodID get_agent_props = env->GetStaticMethodID(vm_support, \"getAgentProperties\", \"()Ljava/util/Properties;\");\n            jmethodID to_string = env->GetMethodID(env->FindClass(\"java/lang/Object\"), \"toString\", \"()Ljava/lang/String;\");\n            if (get_agent_props != NULL && to_string != NULL) {\n                jobject props = env->CallStaticObjectMethod(vm_support, get_agent_props);\n                if (props != NULL && !env->ExceptionCheck()) {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/flightRecorder.cpp"
                },
                "region": {
                  "startLine": 674,
                  "startColumn": 40,
                  "endLine": 674,
                  "endColumn": 79,
                  "snippet": {
                    "text": "            vm_support = env->FindClass(\"sun/misc/VMSupport\");\n        }\n        if (vm_support != NULL) {\n            jmethodID get_agent_props = env->GetStaticMethodID(vm_support, \"getAgentProperties\", \"()Ljava/util/Properties;\");\n            jmethodID to_string = env->GetMethodID(env->FindClass(\"java/lang/Object\"), \"toString\", \"()Ljava/lang/String;\");\n            if (get_agent_props != NULL && to_string != NULL) {\n                jobject props = env->CallStaticObjectMethod(vm_support, get_agent_props);\n",
                    "rendered": {
                      "text": "            vm_support = env->FindClass(\"sun/misc/VMSupport\");\n        }\n        if (vm_support != NULL) {\n            jmethodID get_agent_props = env->GetStaticMethodID(vm_support, \"getAgentProperties\", \"()Ljava/util/Properties;\");\n            jmethodID to_string = env->GetMethodID(env->FindClass(\"java/lang/Object\"), \"toString\", \"()Ljava/lang/String;\");\n            if (get_agent_props != NULL && to_string != NULL) {\n                jobject props = env->CallStaticObjectMethod(vm_support, get_agent_props);\n",
                      "markdown": "`            vm_support = env->FindClass(\"sun/misc/VMSupport\");\n        }\n        if (vm_support != NULL) {\n            jmethodID get_agent_props = env->GetStaticMethodID(vm_support, \"getAgentProperties\", \"()Ljava/util/Properties;\");\n            jmethodID to_string = env->GetMethodID(env->FindClass(\"java/lang/Object\"), \"toString\", \"()Ljava/lang/String;\");\n            if (get_agent_props != NULL && to_string != NULL) {\n                jobject props = env->CallStaticObjectMethod(vm_support, get_agent_props);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/flightRecorder.cpp"
                },
                "region": {
                  "startLine": 670,
                  "startColumn": 12,
                  "endLine": 670,
                  "endColumn": 27,
                  "snippet": {
                    "text": "        JNIEnv* env = VM::jni();\n        jclass vm_support = env->FindClass(\"jdk/internal/vm/VMSupport\");\n        if (vm_support == NULL) {\n            env->ExceptionClear();\n            vm_support = env->FindClass(\"sun/misc/VMSupport\");\n        }\n        if (vm_support != NULL) {\n",
                    "rendered": {
                      "text": "        JNIEnv* env = VM::jni();\n        jclass vm_support = env->FindClass(\"jdk/internal/vm/VMSupport\");\n        if (vm_support == NULL) {\n            env->ExceptionClear();\n            vm_support = env->FindClass(\"sun/misc/VMSupport\");\n        }\n        if (vm_support != NULL) {\n",
                      "markdown": "`        JNIEnv* env = VM::jni();\n        jclass vm_support = env->FindClass(\"jdk/internal/vm/VMSupport\");\n        if (vm_support == NULL) {\n            env->ExceptionClear();\n            vm_support = env->FindClass(\"sun/misc/VMSupport\");\n        }\n        if (vm_support != NULL) {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/flightRecorder.cpp"
                },
                "region": {
                  "startLine": 658,
                  "startColumn": 51,
                  "endLine": 658,
                  "endColumn": 55,
                  "snippet": {
                    "text": "            OS::copyFile(_fd, append_fd, 0, size);\n            close(append_fd);\n        } else {\n            Log::warn(\"Failed to open JFR recording at %s: %s\", target_file, strerror(errno));\n        }\n    }\n\n",
                    "rendered": {
                      "text": "            OS::copyFile(_fd, append_fd, 0, size);\n            close(append_fd);\n        } else {\n            Log::warn(\"Failed to open JFR recording at %s: %s\", target_file, strerror(errno));\n        }\n    }\n\n",
                      "markdown": "`            OS::copyFile(_fd, append_fd, 0, size);\n            close(append_fd);\n        } else {\n            Log::warn(\"Failed to open JFR recording at %s: %s\", target_file, strerror(errno));\n        }\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/flightRecorder.cpp"
                },
                "region": {
                  "startLine": 1461,
                  "startColumn": 11,
                  "endLine": 1461,
                  "endColumn": 16,
                  "snippet": {
                    "text": "}\n\nvoid FlightRecorder::stopMasterRecording() {\n    JNIEnv* env = VM::jni();\n    env->CallStaticVoidMethod(_jfr_sync_class, _stop_method);\n    env->ExceptionClear();\n}\n",
                    "rendered": {
                      "text": "}\n\nvoid FlightRecorder::stopMasterRecording() {\n    JNIEnv* env = VM::jni();\n    env->CallStaticVoidMethod(_jfr_sync_class, _stop_method);\n    env->ExceptionClear();\n}\n",
                      "markdown": "`}\n\nvoid FlightRecorder::stopMasterRecording() {\n    JNIEnv* env = VM::jni();\n    env->CallStaticVoidMethod(_jfr_sync_class, _stop_method);\n    env->ExceptionClear();\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/flightRecorder.cpp"
                },
                "region": {
                  "startLine": 1400,
                  "startColumn": 11,
                  "endLine": 1400,
                  "endColumn": 16,
                  "snippet": {
                    "text": "}\n\nError FlightRecorder::startMasterRecording(Arguments& args, const char* filename) {\n    JNIEnv* env = VM::jni();\n\n    if (_jfr_sync_class == NULL) {\n        if (env->FindClass(\"jdk/jfr/FlightRecorderListener\") == NULL) {\n",
                    "rendered": {
                      "text": "}\n\nError FlightRecorder::startMasterRecording(Arguments& args, const char* filename) {\n    JNIEnv* env = VM::jni();\n\n    if (_jfr_sync_class == NULL) {\n        if (env->FindClass(\"jdk/jfr/FlightRecorderListener\") == NULL) {\n",
                      "markdown": "`}\n\nError FlightRecorder::startMasterRecording(Arguments& args, const char* filename) {\n    JNIEnv* env = VM::jni();\n\n    if (_jfr_sync_class == NULL) {\n        if (env->FindClass(\"jdk/jfr/FlightRecorderListener\") == NULL) {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/flightRecorder.cpp"
                },
                "region": {
                  "startLine": 667,
                  "startColumn": 15,
                  "endLine": 667,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    }\n\n    bool parseAgentProperties() {\n        JNIEnv* env = VM::jni();\n        jclass vm_support = env->FindClass(\"jdk/internal/vm/VMSupport\");\n        if (vm_support == NULL) {\n            env->ExceptionClear();\n",
                    "rendered": {
                      "text": "    }\n\n    bool parseAgentProperties() {\n        JNIEnv* env = VM::jni();\n        jclass vm_support = env->FindClass(\"jdk/internal/vm/VMSupport\");\n        if (vm_support == NULL) {\n            env->ExceptionClear();\n",
                      "markdown": "`    }\n\n    bool parseAgentProperties() {\n        JNIEnv* env = VM::jni();\n        jclass vm_support = env->FindClass(\"jdk/internal/vm/VMSupport\");\n        if (vm_support == NULL) {\n            env->ExceptionClear();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/README.md"
                },
                "region": {
                  "startLine": 538,
                  "startColumn": 88,
                  "endLine": 538,
                  "endColumn": 92,
                  "snippet": {
                    "text": "  highly recommended to use `-XX:+UnlockDiagnosticVMOptions -XX:+DebugNonSafepoints` JVM flags.\n  Without those flags the profiler will still work correctly but results might be\n  less accurate. For example, without `-XX:+DebugNonSafepoints` there is a high chance\n  that simple inlined methods will not appear in the profile. When the agent is attached at runtime,\n  `CompiledMethodLoad` JVMTI event enables debug info, but only for methods compiled after attaching.\n\n## Troubleshooting\n",
                    "rendered": {
                      "text": "  highly recommended to use `-XX:+UnlockDiagnosticVMOptions -XX:+DebugNonSafepoints` JVM flags.\n  Without those flags the profiler will still work correctly but results might be\n  less accurate. For example, without `-XX:+DebugNonSafepoints` there is a high chance\n  that simple inlined methods will not appear in the profile. When the agent is attached at runtime,\n  `CompiledMethodLoad` JVMTI event enables debug info, but only for methods compiled after attaching.\n\n## Troubleshooting\n",
                      "markdown": "`  highly recommended to use `-XX:+UnlockDiagnosticVMOptions -XX:+DebugNonSafepoints` JVM flags.\n  Without those flags the profiler will still work correctly but results might be\n  less accurate. For example, without `-XX:+DebugNonSafepoints` there is a high chance\n  that simple inlined methods will not appear in the profile. When the agent is attached at runtime,\n  `CompiledMethodLoad` JVMTI event enables debug info, but only for methods compiled after attaching.\n\n## Troubleshooting\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/README.md"
                },
                "region": {
                  "startLine": 534,
                  "startColumn": 26,
                  "endLine": 534,
                  "endColumn": 30,
                  "snippet": {
                    "text": "  see [#97](https://github.com/async-profiler/async-profiler/issues/97).\n  The workaround is simply to increase the interval.\n\n* When agent is not loaded at JVM startup (by using -agentpath option) it is\n  highly recommended to use `-XX:+UnlockDiagnosticVMOptions -XX:+DebugNonSafepoints` JVM flags.\n  Without those flags the profiler will still work correctly but results might be\n  less accurate. For example, without `-XX:+DebugNonSafepoints` there is a high chance\n",
                    "rendered": {
                      "text": "  see [#97](https://github.com/async-profiler/async-profiler/issues/97).\n  The workaround is simply to increase the interval.\n\n* When agent is not loaded at JVM startup (by using -agentpath option) it is\n  highly recommended to use `-XX:+UnlockDiagnosticVMOptions -XX:+DebugNonSafepoints` JVM flags.\n  Without those flags the profiler will still work correctly but results might be\n  less accurate. For example, without `-XX:+DebugNonSafepoints` there is a high chance\n",
                      "markdown": "`  see [#97](https://github.com/async-profiler/async-profiler/issues/97).\n  The workaround is simply to increase the interval.\n\n* When agent is not loaded at JVM startup (by using -agentpath option) it is\n  highly recommended to use `-XX:+UnlockDiagnosticVMOptions -XX:+DebugNonSafepoints` JVM flags.\n  Without those flags the profiler will still work correctly but results might be\n  less accurate. For example, without `-XX:+DebugNonSafepoints` there is a high chance\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/README.md"
                },
                "region": {
                  "startLine": 331,
                  "startColumn": 59,
                  "endLine": 331,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\n  Two special event types are supported on Linux: hardware breakpoints\n  and kernel tracepoints:\n    - `-e mem:<func>[:rwx]` sets read/write/exec breakpoint at function\n      `<func>`. The format of `mem` event is the same as in `perf-record`.\n      Execution breakpoints can be also specified by the function name,\n      e.g. `-e malloc` will trace all calls of native `malloc` function.\n",
                    "rendered": {
                      "text": "\n  Two special event types are supported on Linux: hardware breakpoints\n  and kernel tracepoints:\n    - `-e mem:<func>[:rwx]` sets read/write/exec breakpoint at function\n      `<func>`. The format of `mem` event is the same as in `perf-record`.\n      Execution breakpoints can be also specified by the function name,\n      e.g. `-e malloc` will trace all calls of native `malloc` function.\n",
                      "markdown": "`\n  Two special event types are supported on Linux: hardware breakpoints\n  and kernel tracepoints:\n    - `-e mem:<func>[:rwx]` sets read/write/exec breakpoint at function\n      `<func>`. The format of `mem` event is the same as in `perf-record`.\n      Execution breakpoints can be also specified by the function name,\n      e.g. `-e malloc` will trace all calls of native `malloc` function.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/README.md"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 53,
                  "endLine": 249,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\n## Multiple events\n\nIt is possible to profile CPU, allocations, and locks at the same time.\nInstead of CPU, you may choose any other execution event: wall-clock,\nperf event, tracepoint, Java method, etc.\n\n",
                    "rendered": {
                      "text": "\n## Multiple events\n\nIt is possible to profile CPU, allocations, and locks at the same time.\nInstead of CPU, you may choose any other execution event: wall-clock,\nperf event, tracepoint, Java method, etc.\n\n",
                      "markdown": "`\n## Multiple events\n\nIt is possible to profile CPU, allocations, and locks at the same time.\nInstead of CPU, you may choose any other execution event: wall-clock,\nperf event, tracepoint, Java method, etc.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/README.md"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 32,
                  "endLine": 170,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\nasync-profiler works in the context of the target Java application,\ni.e. it runs as an agent in the process being profiled.\n`asprof` is a tool to attach and control the agent. \n\nA typical workflow would be to launch your Java application, attach\nthe agent and start profiling, exercise your performance scenario, and\n",
                    "rendered": {
                      "text": "\nasync-profiler works in the context of the target Java application,\ni.e. it runs as an agent in the process being profiled.\n`asprof` is a tool to attach and control the agent. \n\nA typical workflow would be to launch your Java application, attach\nthe agent and start profiling, exercise your performance scenario, and\n",
                      "markdown": "`\nasync-profiler works in the context of the target Java application,\ni.e. it runs as an agent in the process being profiled.\n`asprof` is a tool to attach and control the agent. \n\nA typical workflow would be to launch your Java application, attach\nthe agent and start profiling, exercise your performance scenario, and\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/README.md"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 46,
                  "endLine": 138,
                  "endColumn": 50,
                  "snippet": {
                    "text": "Only non-native Java methods are supported. To profile a native method,\nuse hardware breakpoint event instead, e.g. `-e Java_java_lang_Throwable_fillInStackTrace`\n\n**Be aware** that if you attach async-profiler at runtime, the first instrumentation\nof a non-native Java method may cause the [deoptimization](https://github.com/openjdk/jdk/blob/bf2e9ee9d321ed289466b2410f12ad10504d01a2/src/hotspot/share/prims/jvmtiRedefineClasses.cpp#L4092-L4096)\nof all compiled methods. The subsequent instrumentation flushes only the _dependent code_.\n\n",
                    "rendered": {
                      "text": "Only non-native Java methods are supported. To profile a native method,\nuse hardware breakpoint event instead, e.g. `-e Java_java_lang_Throwable_fillInStackTrace`\n\n**Be aware** that if you attach async-profiler at runtime, the first instrumentation\nof a non-native Java method may cause the [deoptimization](https://github.com/openjdk/jdk/blob/bf2e9ee9d321ed289466b2410f12ad10504d01a2/src/hotspot/share/prims/jvmtiRedefineClasses.cpp#L4092-L4096)\nof all compiled methods. The subsequent instrumentation flushes only the _dependent code_.\n\n",
                      "markdown": "`Only non-native Java methods are supported. To profile a native method,\nuse hardware breakpoint event instead, e.g. `-e Java_java_lang_Throwable_fillInStackTrace`\n\n**Be aware** that if you attach async-profiler at runtime, the first instrumentation\nof a non-native Java method may cause the [deoptimization](https://github.com/openjdk/jdk/blob/bf2e9ee9d321ed289466b2410f12ad10504d01a2/src/hotspot/share/prims/jvmtiRedefineClasses.cpp#L4092-L4096)\nof all compiled methods. The subsequent instrumentation flushes only the _dependent code_.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/README.md"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 62,
                  "endLine": 114,
                  "endColumn": 66,
                  "snippet": {
                    "text": "```\n$ gdb $JAVA_HOME/lib/server/libjvm.so -ex 'info address UseG1GC'\n```\nThis command's output will either contain `Symbol \"UseG1GC\" is at 0xxxxx`\nor `No symbol \"UseG1GC\" in current context`.\n\n## Wall-clock profiling\n",
                    "rendered": {
                      "text": "```\n$ gdb $JAVA_HOME/lib/server/libjvm.so -ex 'info address UseG1GC'\n```\nThis command's output will either contain `Symbol \"UseG1GC\" is at 0xxxxx`\nor `No symbol \"UseG1GC\" in current context`.\n\n## Wall-clock profiling\n",
                      "markdown": "````\n$ gdb $JAVA_HOME/lib/server/libjvm.so -ex 'info address UseG1GC'\n```\nThis command's output will either contain `Symbol \"UseG1GC\" is at 0xxxxx`\nor `No symbol \"UseG1GC\" in current context`.\n\n## Wall-clock profiling\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/README.md"
                },
                "region": {
                  "startLine": 561,
                  "startColumn": 35,
                  "endLine": 561,
                  "endColumn": 41,
                  "snippet": {
                    "text": "1. Attach socket `/tmp/.java_pidNNN` has been deleted. It is a common\n   practice to clean `/tmp` automatically with some scheduled script.\n   Configure the cleanup software to exclude `.java_pid*` files from deletion.  \n   How to check: run `lsof -p PID | grep java_pid`  \n   If it lists a socket file, but the file does not exist, then this is exactly\n   the described problem.\n2. JVM is started with `-XX:+DisableAttachMechanism` option.\n",
                    "rendered": {
                      "text": "1. Attach socket `/tmp/.java_pidNNN` has been deleted. It is a common\n   practice to clean `/tmp` automatically with some scheduled script.\n   Configure the cleanup software to exclude `.java_pid*` files from deletion.  \n   How to check: run `lsof -p PID | grep java_pid`  \n   If it lists a socket file, but the file does not exist, then this is exactly\n   the described problem.\n2. JVM is started with `-XX:+DisableAttachMechanism` option.\n",
                      "markdown": "`1. Attach socket `/tmp/.java_pidNNN` has been deleted. It is a common\n   practice to clean `/tmp` automatically with some scheduled script.\n   Configure the cleanup software to exclude `.java_pid*` files from deletion.  \n   How to check: run `lsof -p PID | grep java_pid`  \n   If it lists a socket file, but the file does not exist, then this is exactly\n   the described problem.\n2. JVM is started with `-XX:+DisableAttachMechanism` option.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/README.md"
                },
                "region": {
                  "startLine": 495,
                  "startColumn": 11,
                  "endLine": 495,
                  "endColumn": 19,
                  "snippet": {
                    "text": "the target container can access `libasyncProfiler.so` by the same\nabsolute path as on the host.\n\nBy default, Docker container restricts the access to `perf_event_open`\nsyscall. There are 3 alternatives to allow profiling in a container:\n1. You can modify the [seccomp profile](https://docs.docker.com/engine/security/seccomp/)\nor disable it altogether with `--security-opt seccomp=unconfined` option. In\n",
                    "rendered": {
                      "text": "the target container can access `libasyncProfiler.so` by the same\nabsolute path as on the host.\n\nBy default, Docker container restricts the access to `perf_event_open`\nsyscall. There are 3 alternatives to allow profiling in a container:\n1. You can modify the [seccomp profile](https://docs.docker.com/engine/security/seccomp/)\nor disable it altogether with `--security-opt seccomp=unconfined` option. In\n",
                      "markdown": "`the target container can access `libasyncProfiler.so` by the same\nabsolute path as on the host.\n\nBy default, Docker container restricts the access to `perf_event_open`\nsyscall. There are 3 alternatives to allow profiling in a container:\n1. You can modify the [seccomp profile](https://docs.docker.com/engine/security/seccomp/)\nor disable it altogether with `--security-opt seccomp=unconfined` option. In\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/README.md"
                },
                "region": {
                  "startLine": 486,
                  "startColumn": 66,
                  "endLine": 487,
                  "snippet": {
                    "text": "both from within a container and from the host system.\n\nWhen profiling from the host, `pid` should be the Java process ID in the host\nnamespace. Use `ps aux | grep java` or `docker top <container>` to find\nthe process ID.\n\nasync-profiler should be run from the host by a privileged user - it will\nautomatically switch to the proper pid/mount namespace and change\n",
                    "rendered": {
                      "text": "both from within a container and from the host system.\n\nWhen profiling from the host, `pid` should be the Java process ID in the host\nnamespace. Use `ps aux | grep java` or `docker top <container>` to find\nthe process ID.\n\nasync-profiler should be run from the host by a privileged user - it will\nautomatically switch to the proper pid/mount namespace and change\n",
                      "markdown": "`both from within a container and from the host system.\n\nWhen profiling from the host, `pid` should be the Java process ID in the host\nnamespace. Use `ps aux | grep java` or `docker top <container>` to find\nthe process ID.\n\nasync-profiler should be run from the host by a privileged user - it will\nautomatically switch to the proper pid/mount namespace and change\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/README.md"
                },
                "region": {
                  "startLine": 486,
                  "startColumn": 46,
                  "endLine": 486,
                  "endColumn": 51,
                  "snippet": {
                    "text": "both from within a container and from the host system.\n\nWhen profiling from the host, `pid` should be the Java process ID in the host\nnamespace. Use `ps aux | grep java` or `docker top <container>` to find\nthe process ID.\n\nasync-profiler should be run from the host by a privileged user - it will\n",
                    "rendered": {
                      "text": "both from within a container and from the host system.\n\nWhen profiling from the host, `pid` should be the Java process ID in the host\nnamespace. Use `ps aux | grep java` or `docker top <container>` to find\nthe process ID.\n\nasync-profiler should be run from the host by a privileged user - it will\n",
                      "markdown": "`both from within a container and from the host system.\n\nWhen profiling from the host, `pid` should be the Java process ID in the host\nnamespace. Use `ps aux | grep java` or `docker top <container>` to find\nthe process ID.\n\nasync-profiler should be run from the host by a privileged user - it will\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/README.md"
                },
                "region": {
                  "startLine": 486,
                  "startColumn": 24,
                  "endLine": 486,
                  "endColumn": 30,
                  "snippet": {
                    "text": "both from within a container and from the host system.\n\nWhen profiling from the host, `pid` should be the Java process ID in the host\nnamespace. Use `ps aux | grep java` or `docker top <container>` to find\nthe process ID.\n\nasync-profiler should be run from the host by a privileged user - it will\n",
                    "rendered": {
                      "text": "both from within a container and from the host system.\n\nWhen profiling from the host, `pid` should be the Java process ID in the host\nnamespace. Use `ps aux | grep java` or `docker top <container>` to find\nthe process ID.\n\nasync-profiler should be run from the host by a privileged user - it will\n",
                      "markdown": "`both from within a container and from the host system.\n\nWhen profiling from the host, `pid` should be the Java process ID in the host\nnamespace. Use `ps aux | grep java` or `docker top <container>` to find\nthe process ID.\n\nasync-profiler should be run from the host by a privileged user - it will\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/README.md"
                },
                "region": {
                  "startLine": 482,
                  "startColumn": 53,
                  "endLine": 482,
                  "endColumn": 61,
                  "snippet": {
                    "text": "\n## Profiling Java in a container\n\nIt is possible to profile Java processes running in a Docker or LXC container\nboth from within a container and from the host system.\n\nWhen profiling from the host, `pid` should be the Java process ID in the host\n",
                    "rendered": {
                      "text": "\n## Profiling Java in a container\n\nIt is possible to profile Java processes running in a Docker or LXC container\nboth from within a container and from the host system.\n\nWhen profiling from the host, `pid` should be the Java process ID in the host\n",
                      "markdown": "`\n## Profiling Java in a container\n\nIt is possible to profile Java processes running in a Docker or LXC container\nboth from within a container and from the host system.\n\nWhen profiling from the host, `pid` should be the Java process ID in the host\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/README.md"
                },
                "region": {
                  "startLine": 423,
                  "startColumn": 32,
                  "endLine": 423,
                  "endColumn": 38,
                  "snippet": {
                    "text": "  Example: `asprof -o collapsed -f /tmp/traces-%t.txt 8983`\n\n* `--loop TIME` - run profiler in a loop (continuous profiling).\n  The argument is either a clock time (`hh:mm:ss`) or\n  a loop duration in `s`econds, `m`inutes, `h`ours, or `d`ays.\n  Make sure the filename includes a timestamp pattern, or the output\n  will be overwritten on each iteration.  \n",
                    "rendered": {
                      "text": "  Example: `asprof -o collapsed -f /tmp/traces-%t.txt 8983`\n\n* `--loop TIME` - run profiler in a loop (continuous profiling).\n  The argument is either a clock time (`hh:mm:ss`) or\n  a loop duration in `s`econds, `m`inutes, `h`ours, or `d`ays.\n  Make sure the filename includes a timestamp pattern, or the output\n  will be overwritten on each iteration.  \n",
                      "markdown": "`  Example: `asprof -o collapsed -f /tmp/traces-%t.txt 8983`\n\n* `--loop TIME` - run profiler in a loop (continuous profiling).\n  The argument is either a clock time (`hh:mm:ss`) or\n  a loop duration in `s`econds, `m`inutes, `h`ours, or `d`ays.\n  Make sure the filename includes a timestamp pattern, or the output\n  will be overwritten on each iteration.  \n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/README.md"
                },
                "region": {
                  "startLine": 408,
                  "startColumn": 6,
                  "endLine": 408,
                  "endColumn": 11,
                  "snippet": {
                    "text": "* `-F features` - comma separated list of HotSpot-specific features\n  to include in stack traces. Supported features are:\n  - `vtable` - display targets of megamorphic virtual calls as an extra frame\n    on top of `vtable stub` or `itable stub`.\n  - `comptask` - display current compilation task (a Java method being compiled)\n    in a JIT compiler stack trace.\n\n",
                    "rendered": {
                      "text": "* `-F features` - comma separated list of HotSpot-specific features\n  to include in stack traces. Supported features are:\n  - `vtable` - display targets of megamorphic virtual calls as an extra frame\n    on top of `vtable stub` or `itable stub`.\n  - `comptask` - display current compilation task (a Java method being compiled)\n    in a JIT compiler stack trace.\n\n",
                      "markdown": "`* `-F features` - comma separated list of HotSpot-specific features\n  to include in stack traces. Supported features are:\n  - `vtable` - display targets of megamorphic virtual calls as an extra frame\n    on top of `vtable stub` or `itable stub`.\n  - `comptask` - display current compilation task (a Java method being compiled)\n    in a JIT compiler stack trace.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/README.md"
                },
                "region": {
                  "startLine": 391,
                  "startColumn": 57,
                  "endLine": 391,
                  "endColumn": 63,
                  "snippet": {
                    "text": "* `--total` - count the total value of the collected metric instead of the number of samples,\n  e.g. total allocation size.\n\n* `--chunksize N`, `--chunktime N` - approximate size and time limits for a single JFR chunk.\n  A new chunk will be started whenever either limit is reached.\n  The default `chunksize` is 100MB, and the default `chunktime` is 1 hour.  \n  Example: `asprof -f profile.jfr --chunksize 100m --chunktime 1h 8983`\n",
                    "rendered": {
                      "text": "* `--total` - count the total value of the collected metric instead of the number of samples,\n  e.g. total allocation size.\n\n* `--chunksize N`, `--chunktime N` - approximate size and time limits for a single JFR chunk.\n  A new chunk will be started whenever either limit is reached.\n  The default `chunksize` is 100MB, and the default `chunktime` is 1 hour.  \n  Example: `asprof -f profile.jfr --chunksize 100m --chunktime 1h 8983`\n",
                      "markdown": "`* `--total` - count the total value of the collected metric instead of the number of samples,\n  e.g. total allocation size.\n\n* `--chunksize N`, `--chunktime N` - approximate size and time limits for a single JFR chunk.\n  A new chunk will be started whenever either limit is reached.\n  The default `chunksize` is 100MB, and the default `chunktime` is 1 hour.  \n  Example: `asprof -f profile.jfr --chunksize 100m --chunktime 1h 8983`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/README.md"
                },
                "region": {
                  "startLine": 341,
                  "startColumn": 39,
                  "endLine": 341,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n* `-i N` - sets the profiling interval in nanoseconds or in other units,\n  if N is followed by `ms` (for milliseconds), `us` (for microseconds),\n  or `s` (for seconds). Only CPU active time is counted. No samples\n  are collected while CPU is idle. The default is 10000000 (10ms).  \n  Example: `asprof -i 500us 8983`\n\n",
                    "rendered": {
                      "text": "\n* `-i N` - sets the profiling interval in nanoseconds or in other units,\n  if N is followed by `ms` (for milliseconds), `us` (for microseconds),\n  or `s` (for seconds). Only CPU active time is counted. No samples\n  are collected while CPU is idle. The default is 10000000 (10ms).  \n  Example: `asprof -i 500us 8983`\n\n",
                      "markdown": "`\n* `-i N` - sets the profiling interval in nanoseconds or in other units,\n  if N is followed by `ms` (for milliseconds), `us` (for microseconds),\n  or `s` (for seconds). Only CPU active time is counted. No samples\n  are collected while CPU is idle. The default is 10000000 (10ms).  \n  Example: `asprof -i 500us 8983`\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/README.md"
                },
                "region": {
                  "startLine": 326,
                  "startColumn": 28,
                  "endLine": 326,
                  "endColumn": 33,
                  "snippet": {
                    "text": "  of the allocated object, and the counter is the heap pressure (the total size\n  of allocated TLABs or objects outside TLAB).\n\n  In lock profiling mode the top frame is the class of lock/monitor, and\n  the counter is number of nanoseconds it took to enter this lock/monitor.\n\n  Two special event types are supported on Linux: hardware breakpoints\n",
                    "rendered": {
                      "text": "  of the allocated object, and the counter is the heap pressure (the total size\n  of allocated TLABs or objects outside TLAB).\n\n  In lock profiling mode the top frame is the class of lock/monitor, and\n  the counter is number of nanoseconds it took to enter this lock/monitor.\n\n  Two special event types are supported on Linux: hardware breakpoints\n",
                      "markdown": "`  of the allocated object, and the counter is the heap pressure (the total size\n  of allocated TLABs or objects outside TLAB).\n\n  In lock profiling mode the top frame is the class of lock/monitor, and\n  the counter is number of nanoseconds it took to enter this lock/monitor.\n\n  Two special event types are supported on Linux: hardware breakpoints\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/README.md"
                },
                "region": {
                  "startLine": 322,
                  "startColumn": 34,
                  "endLine": 322,
                  "endColumn": 39,
                  "snippet": {
                    "text": "* `-e event` - the profiling event: `cpu`, `alloc`, `lock`, `cache-misses` etc.\n  Use `list` to see the complete list of available events.\n\n  In allocation profiling mode the top frame of every call trace is the class\n  of the allocated object, and the counter is the heap pressure (the total size\n  of allocated TLABs or objects outside TLAB).\n\n",
                    "rendered": {
                      "text": "* `-e event` - the profiling event: `cpu`, `alloc`, `lock`, `cache-misses` etc.\n  Use `list` to see the complete list of available events.\n\n  In allocation profiling mode the top frame of every call trace is the class\n  of the allocated object, and the counter is the heap pressure (the total size\n  of allocated TLABs or objects outside TLAB).\n\n",
                      "markdown": "`* `-e event` - the profiling event: `cpu`, `alloc`, `lock`, `cache-misses` etc.\n  Use `list` to see the complete list of available events.\n\n  In allocation profiling mode the top frame of every call trace is the class\n  of the allocated object, and the counter is the heap pressure (the total size\n  of allocated TLABs or objects outside TLAB).\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/README.md"
                },
                "region": {
                  "startLine": 316,
                  "startColumn": 4,
                  "endLine": 316,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n* `-d N` - the profiling duration, in seconds. If no `start`, `resume`, `stop`\n  or `status` option is given, the profiler will run for the specified period\n  of time and then automatically stop.  \n  Example: `asprof -d 30 8983`\n\n* `-e event` - the profiling event: `cpu`, `alloc`, `lock`, `cache-misses` etc.\n",
                    "rendered": {
                      "text": "\n* `-d N` - the profiling duration, in seconds. If no `start`, `resume`, `stop`\n  or `status` option is given, the profiler will run for the specified period\n  of time and then automatically stop.  \n  Example: `asprof -d 30 8983`\n\n* `-e event` - the profiling event: `cpu`, `alloc`, `lock`, `cache-misses` etc.\n",
                      "markdown": "`\n* `-d N` - the profiling duration, in seconds. If no `start`, `resume`, `stop`\n  or `status` option is given, the profiler will run for the specified period\n  of time and then automatically stop.  \n  Example: `asprof -d 30 8983`\n\n* `-e event` - the profiling event: `cpu`, `alloc`, `lock`, `cache-misses` etc.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/README.md"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 31,
                  "endLine": 217,
                  "snippet": {
                    "text": "\n... a lot of output omitted for brevity ...\n\n          ns  percent  samples  top\n  ----------  -------  -------  ---\n  6790000000   98.84%      679  Primes.isPrime\n    40000000    0.58%        4  __do_softirq\n\n",
                    "rendered": {
                      "text": "\n... a lot of output omitted for brevity ...\n\n          ns  percent  samples  top\n  ----------  -------  -------  ---\n  6790000000   98.84%      679  Primes.isPrime\n    40000000    0.58%        4  __do_softirq\n\n",
                      "markdown": "`\n... a lot of output omitted for brevity ...\n\n          ns  percent  samples  top\n  ----------  -------  -------  ---\n  6790000000   98.84%      679  Primes.isPrime\n    40000000    0.58%        4  __do_softirq\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/README.md"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 37,
                  "endLine": 193,
                  "endColumn": 43,
                  "snippet": {
                    "text": " - The application name as it appears in the `jps` output: e.g. `Computey`\n\nAlternatively, you may specify `-d` (duration) argument to profile\nthe application for a fixed period of time with a single command.\n\n```\n$ asprof -d 30 8983\n",
                    "rendered": {
                      "text": " - The application name as it appears in the `jps` output: e.g. `Computey`\n\nAlternatively, you may specify `-d` (duration) argument to profile\nthe application for a fixed period of time with a single command.\n\n```\n$ asprof -d 30 8983\n",
                      "markdown": "` - The application name as it appears in the `jps` output: e.g. `Computey`\n\nAlternatively, you may specify `-d` (duration) argument to profile\nthe application for a fixed period of time with a single command.\n\n```\n$ asprof -d 30 8983\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/README.md"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 9,
                  "endLine": 120,
                  "endColumn": 15,
                  "snippet": {
                    "text": "## Wall-clock profiling\n\n`-e wall` option tells async-profiler to sample all threads equally every given\nperiod of time regardless of thread status: Running, Sleeping or Blocked.\nFor instance, this can be helpful when profiling application start-up time.\n\nWall-clock profiler is most useful in per-thread mode: `-t`.\n",
                    "rendered": {
                      "text": "## Wall-clock profiling\n\n`-e wall` option tells async-profiler to sample all threads equally every given\nperiod of time regardless of thread status: Running, Sleeping or Blocked.\nFor instance, this can be helpful when profiling application start-up time.\n\nWall-clock profiler is most useful in per-thread mode: `-t`.\n",
                      "markdown": "`## Wall-clock profiling\n\n`-e wall` option tells async-profiler to sample all threads equally every given\nperiod of time regardless of thread status: Running, Sleeping or Blocked.\nFor instance, this can be helpful when profiling application start-up time.\n\nWall-clock profiler is most useful in per-thread mode: `-t`.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/README.md"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 1,
                  "endLine": 112,
                  "endColumn": 6,
                  "snippet": {
                    "text": "The `gdb` tool can be used to verify if debug symbols are properly installed for the `libjvm` library.\nFor example, on Linux:\n```\n$ gdb $JAVA_HOME/lib/server/libjvm.so -ex 'info address UseG1GC'\n```\nThis command's output will either contain `Symbol \"UseG1GC\" is at 0xxxxx`\nor `No symbol \"UseG1GC\" in current context`.\n",
                    "rendered": {
                      "text": "The `gdb` tool can be used to verify if debug symbols are properly installed for the `libjvm` library.\nFor example, on Linux:\n```\n$ gdb $JAVA_HOME/lib/server/libjvm.so -ex 'info address UseG1GC'\n```\nThis command's output will either contain `Symbol \"UseG1GC\" is at 0xxxxx`\nor `No symbol \"UseG1GC\" in current context`.\n",
                      "markdown": "`The `gdb` tool can be used to verify if debug symbols are properly installed for the `libjvm` library.\nFor example, on Linux:\n```\n$ gdb $JAVA_HOME/lib/server/libjvm.so -ex 'info address UseG1GC'\n```\nThis command's output will either contain `Symbol \"UseG1GC\" is at 0xxxxx`\nor `No symbol \"UseG1GC\" in current context`.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/README.md"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 1,
                  "endLine": 96,
                  "endColumn": 6,
                  "snippet": {
                    "text": "provide debug symbols in a separate package. For example, to install\nOpenJDK debug symbols on Debian / Ubuntu, run:\n```\n# apt install openjdk-17-dbg\n```\n(replace `17` with the desired version of JDK).\n\n",
                    "rendered": {
                      "text": "provide debug symbols in a separate package. For example, to install\nOpenJDK debug symbols on Debian / Ubuntu, run:\n```\n# apt install openjdk-17-dbg\n```\n(replace `17` with the desired version of JDK).\n\n",
                      "markdown": "`provide debug symbols in a separate package. For example, to install\nOpenJDK debug symbols on Debian / Ubuntu, run:\n```\n# apt install openjdk-17-dbg\n```\n(replace `17` with the desired version of JDK).\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/README.md"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 6,
                  "endLine": 67,
                  "endColumn": 12,
                  "snippet": {
                    "text": "* Does not produce large intermediate files (perf.data) for further processing in\n  user space scripts.\n\nIf you wish to resolve frames within `libjvm`, the [debug symbols](#installing-debug-symbols) are required.\n\n## ALLOCATION profiling\n\n",
                    "rendered": {
                      "text": "* Does not produce large intermediate files (perf.data) for further processing in\n  user space scripts.\n\nIf you wish to resolve frames within `libjvm`, the [debug symbols](#installing-debug-symbols) are required.\n\n## ALLOCATION profiling\n\n",
                      "markdown": "`* Does not produce large intermediate files (perf.data) for further processing in\n  user space scripts.\n\nIf you wish to resolve frames within `libjvm`, the [debug symbols](#installing-debug-symbols) are required.\n\n## ALLOCATION profiling\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/os_linux.cpp"
                },
                "region": {
                  "startLine": 346,
                  "startColumn": 25,
                  "endLine": 346,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        if (sscanf(buf + 4, \"%llu %llu %llu  %llu\", &user, &nice, &system, &idle) == 4) {\n            *utime = user + nice;\n            *stime = system;\n            real = user + nice + system + idle;\n        }\n    }\n\n",
                    "rendered": {
                      "text": "        if (sscanf(buf + 4, \"%llu %llu %llu  %llu\", &user, &nice, &system, &idle) == 4) {\n            *utime = user + nice;\n            *stime = system;\n            real = user + nice + system + idle;\n        }\n    }\n\n",
                      "markdown": "`        if (sscanf(buf + 4, \"%llu %llu %llu  %llu\", &user, &nice, &system, &idle) == 4) {\n            *utime = user + nice;\n            *stime = system;\n            real = user + nice + system + idle;\n        }\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/Makefile"
                },
                "region": {
                  "startLine": 185,
                  "endLine": 185,
                  "endColumn": 5,
                  "snippet": {
                    "text": "native:\n\tmkdir -p native/linux-x64 native/linux-arm64 native/macos\n\ttar xfO async-profiler-$(PROFILER_VERSION)-linux-x64.tar.gz */build/libasyncProfiler.so > native/linux-x64/libasyncProfiler.so\n\ttar xfO async-profiler-$(PROFILER_VERSION)-linux-arm64.tar.gz */build/libasyncProfiler.so > native/linux-arm64/libasyncProfiler.so\n\tunzip -p async-profiler-$(PROFILER_VERSION)-macos.zip */build/libasyncProfiler.dylib > native/macos/libasyncProfiler.dylib\n\nclean:\n",
                    "rendered": {
                      "text": "native:\n\tmkdir -p native/linux-x64 native/linux-arm64 native/macos\n\ttar xfO async-profiler-$(PROFILER_VERSION)-linux-x64.tar.gz */build/libasyncProfiler.so > native/linux-x64/libasyncProfiler.so\n\ttar xfO async-profiler-$(PROFILER_VERSION)-linux-arm64.tar.gz */build/libasyncProfiler.so > native/linux-arm64/libasyncProfiler.so\n\tunzip -p async-profiler-$(PROFILER_VERSION)-macos.zip */build/libasyncProfiler.dylib > native/macos/libasyncProfiler.dylib\n\nclean:\n",
                      "markdown": "`native:\n\tmkdir -p native/linux-x64 native/linux-arm64 native/macos\n\ttar xfO async-profiler-$(PROFILER_VERSION)-linux-x64.tar.gz */build/libasyncProfiler.so > native/linux-x64/libasyncProfiler.so\n\ttar xfO async-profiler-$(PROFILER_VERSION)-linux-arm64.tar.gz */build/libasyncProfiler.so > native/linux-arm64/libasyncProfiler.so\n\tunzip -p async-profiler-$(PROFILER_VERSION)-macos.zip */build/libasyncProfiler.dylib > native/macos/libasyncProfiler.dylib\n\nclean:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/Makefile"
                },
                "region": {
                  "startLine": 184,
                  "endLine": 184,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nnative:\n\tmkdir -p native/linux-x64 native/linux-arm64 native/macos\n\ttar xfO async-profiler-$(PROFILER_VERSION)-linux-x64.tar.gz */build/libasyncProfiler.so > native/linux-x64/libasyncProfiler.so\n\ttar xfO async-profiler-$(PROFILER_VERSION)-linux-arm64.tar.gz */build/libasyncProfiler.so > native/linux-arm64/libasyncProfiler.so\n\tunzip -p async-profiler-$(PROFILER_VERSION)-macos.zip */build/libasyncProfiler.dylib > native/macos/libasyncProfiler.dylib\n\n",
                    "rendered": {
                      "text": "\nnative:\n\tmkdir -p native/linux-x64 native/linux-arm64 native/macos\n\ttar xfO async-profiler-$(PROFILER_VERSION)-linux-x64.tar.gz */build/libasyncProfiler.so > native/linux-x64/libasyncProfiler.so\n\ttar xfO async-profiler-$(PROFILER_VERSION)-linux-arm64.tar.gz */build/libasyncProfiler.so > native/linux-arm64/libasyncProfiler.so\n\tunzip -p async-profiler-$(PROFILER_VERSION)-macos.zip */build/libasyncProfiler.dylib > native/macos/libasyncProfiler.dylib\n\n",
                      "markdown": "`\nnative:\n\tmkdir -p native/linux-x64 native/linux-arm64 native/macos\n\ttar xfO async-profiler-$(PROFILER_VERSION)-linux-x64.tar.gz */build/libasyncProfiler.so > native/linux-x64/libasyncProfiler.so\n\ttar xfO async-profiler-$(PROFILER_VERSION)-linux-arm64.tar.gz */build/libasyncProfiler.so > native/linux-arm64/libasyncProfiler.so\n\tunzip -p async-profiler-$(PROFILER_VERSION)-macos.zip */build/libasyncProfiler.dylib > native/macos/libasyncProfiler.dylib\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/Makefile"
                },
                "region": {
                  "startLine": 146,
                  "endLine": 146,
                  "endColumn": 5,
                  "snippet": {
                    "text": "build/$(JFRCONV): src/launcher/* build/$(CONVERTER_JAR)\n\t$(CC) $(CPPFLAGS) $(CFLAGS) $(DEFS) -o $@ src/launcher/*.cpp\n\t$(STRIP) $@\n\tcat build/$(CONVERTER_JAR) >> $@\n\nbuild/$(LIB_PROFILER): $(SOURCES) $(HEADERS) $(RESOURCES) $(JAVA_HELPER_CLASSES)\nifeq ($(MERGE),true)\n",
                    "rendered": {
                      "text": "build/$(JFRCONV): src/launcher/* build/$(CONVERTER_JAR)\n\t$(CC) $(CPPFLAGS) $(CFLAGS) $(DEFS) -o $@ src/launcher/*.cpp\n\t$(STRIP) $@\n\tcat build/$(CONVERTER_JAR) >> $@\n\nbuild/$(LIB_PROFILER): $(SOURCES) $(HEADERS) $(RESOURCES) $(JAVA_HELPER_CLASSES)\nifeq ($(MERGE),true)\n",
                      "markdown": "`build/$(JFRCONV): src/launcher/* build/$(CONVERTER_JAR)\n\t$(CC) $(CPPFLAGS) $(CFLAGS) $(DEFS) -o $@ src/launcher/*.cpp\n\t$(STRIP) $@\n\tcat build/$(CONVERTER_JAR) >> $@\n\nbuild/$(LIB_PROFILER): $(SOURCES) $(HEADERS) $(RESOURCES) $(JAVA_HELPER_CLASSES)\nifeq ($(MERGE),true)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/Makefile"
                },
                "region": {
                  "startLine": 134,
                  "endLine": 134,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\tmkdir -p $(PACKAGE_DIR)\n\tcp -RP build/bin build/lib LICENSE README.md $(PACKAGE_DIR)/\n\tchmod -R 755 $(PACKAGE_DIR)\n\tchmod 644 $(PACKAGE_DIR)/lib/* $(PACKAGE_DIR)/LICENSE $(PACKAGE_DIR)/README.md\n\nbuild/%:\n\tmkdir -p $@\n",
                    "rendered": {
                      "text": "\tmkdir -p $(PACKAGE_DIR)\n\tcp -RP build/bin build/lib LICENSE README.md $(PACKAGE_DIR)/\n\tchmod -R 755 $(PACKAGE_DIR)\n\tchmod 644 $(PACKAGE_DIR)/lib/* $(PACKAGE_DIR)/LICENSE $(PACKAGE_DIR)/README.md\n\nbuild/%:\n\tmkdir -p $@\n",
                      "markdown": "`\tmkdir -p $(PACKAGE_DIR)\n\tcp -RP build/bin build/lib LICENSE README.md $(PACKAGE_DIR)/\n\tchmod -R 755 $(PACKAGE_DIR)\n\tchmod 644 $(PACKAGE_DIR)/lib/* $(PACKAGE_DIR)/LICENSE $(PACKAGE_DIR)/README.md\n\nbuild/%:\n\tmkdir -p $@\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/Makefile"
                },
                "region": {
                  "startLine": 133,
                  "endLine": 133,
                  "endColumn": 7,
                  "snippet": {
                    "text": "$(PACKAGE_DIR): all LICENSE README.md\n\tmkdir -p $(PACKAGE_DIR)\n\tcp -RP build/bin build/lib LICENSE README.md $(PACKAGE_DIR)/\n\tchmod -R 755 $(PACKAGE_DIR)\n\tchmod 644 $(PACKAGE_DIR)/lib/* $(PACKAGE_DIR)/LICENSE $(PACKAGE_DIR)/README.md\n\nbuild/%:\n",
                    "rendered": {
                      "text": "$(PACKAGE_DIR): all LICENSE README.md\n\tmkdir -p $(PACKAGE_DIR)\n\tcp -RP build/bin build/lib LICENSE README.md $(PACKAGE_DIR)/\n\tchmod -R 755 $(PACKAGE_DIR)\n\tchmod 644 $(PACKAGE_DIR)/lib/* $(PACKAGE_DIR)/LICENSE $(PACKAGE_DIR)/README.md\n\nbuild/%:\n",
                      "markdown": "`$(PACKAGE_DIR): all LICENSE README.md\n\tmkdir -p $(PACKAGE_DIR)\n\tcp -RP build/bin build/lib LICENSE README.md $(PACKAGE_DIR)/\n\tchmod -R 755 $(PACKAGE_DIR)\n\tchmod 644 $(PACKAGE_DIR)/lib/* $(PACKAGE_DIR)/LICENSE $(PACKAGE_DIR)/README.md\n\nbuild/%:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/Makefile"
                },
                "region": {
                  "startLine": 132,
                  "endLine": 132,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\n$(PACKAGE_DIR): all LICENSE README.md\n\tmkdir -p $(PACKAGE_DIR)\n\tcp -RP build/bin build/lib LICENSE README.md $(PACKAGE_DIR)/\n\tchmod -R 755 $(PACKAGE_DIR)\n\tchmod 644 $(PACKAGE_DIR)/lib/* $(PACKAGE_DIR)/LICENSE $(PACKAGE_DIR)/README.md\n\n",
                    "rendered": {
                      "text": "\n$(PACKAGE_DIR): all LICENSE README.md\n\tmkdir -p $(PACKAGE_DIR)\n\tcp -RP build/bin build/lib LICENSE README.md $(PACKAGE_DIR)/\n\tchmod -R 755 $(PACKAGE_DIR)\n\tchmod 644 $(PACKAGE_DIR)/lib/* $(PACKAGE_DIR)/LICENSE $(PACKAGE_DIR)/README.md\n\n",
                      "markdown": "`\n$(PACKAGE_DIR): all LICENSE README.md\n\tmkdir -p $(PACKAGE_DIR)\n\tcp -RP build/bin build/lib LICENSE README.md $(PACKAGE_DIR)/\n\tchmod -R 755 $(PACKAGE_DIR)\n\tchmod 644 $(PACKAGE_DIR)/lib/* $(PACKAGE_DIR)/LICENSE $(PACKAGE_DIR)/README.md\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/Makefile"
                },
                "region": {
                  "startLine": 126,
                  "endLine": 126,
                  "endColumn": 5,
                  "snippet": {
                    "text": "$(PACKAGE_NAME).zip: $(PACKAGE_DIR)\n\ttruncate -cs -`stat -f \"%z\" build/$(CONVERTER_JAR)` $(PACKAGE_DIR)/$(JFRCONV)\n\tcodesign -s \"Developer ID\" -o runtime --timestamp -v $(PACKAGE_DIR)/$(ASPROF) $(PACKAGE_DIR)/$(JFRCONV) $(PACKAGE_DIR)/$(LIB_PROFILER)\n\tcat build/$(CONVERTER_JAR) >> $(PACKAGE_DIR)/$(JFRCONV)\n\tditto -c -k --keepParent $(PACKAGE_DIR) $@\n\trm -r $(PACKAGE_DIR)\n\n",
                    "rendered": {
                      "text": "$(PACKAGE_NAME).zip: $(PACKAGE_DIR)\n\ttruncate -cs -`stat -f \"%z\" build/$(CONVERTER_JAR)` $(PACKAGE_DIR)/$(JFRCONV)\n\tcodesign -s \"Developer ID\" -o runtime --timestamp -v $(PACKAGE_DIR)/$(ASPROF) $(PACKAGE_DIR)/$(JFRCONV) $(PACKAGE_DIR)/$(LIB_PROFILER)\n\tcat build/$(CONVERTER_JAR) >> $(PACKAGE_DIR)/$(JFRCONV)\n\tditto -c -k --keepParent $(PACKAGE_DIR) $@\n\trm -r $(PACKAGE_DIR)\n\n",
                      "markdown": "`$(PACKAGE_NAME).zip: $(PACKAGE_DIR)\n\ttruncate -cs -`stat -f \"%z\" build/$(CONVERTER_JAR)` $(PACKAGE_DIR)/$(JFRCONV)\n\tcodesign -s \"Developer ID\" -o runtime --timestamp -v $(PACKAGE_DIR)/$(ASPROF) $(PACKAGE_DIR)/$(JFRCONV) $(PACKAGE_DIR)/$(LIB_PROFILER)\n\tcat build/$(CONVERTER_JAR) >> $(PACKAGE_DIR)/$(JFRCONV)\n\tditto -c -k --keepParent $(PACKAGE_DIR) $@\n\trm -r $(PACKAGE_DIR)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/Makefile"
                },
                "region": {
                  "startLine": 120,
                  "endLine": 120,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\n$(PACKAGE_NAME).tar.gz: $(PACKAGE_DIR)\n\tpatchelf --remove-needed ld-linux-x86-64.so.2 --remove-needed ld-linux-aarch64.so.1 $(PACKAGE_DIR)/$(LIB_PROFILER)\n\ttar czf $@ -C $(PACKAGE_DIR)/.. $(PACKAGE_NAME)\n\trm -r $(PACKAGE_DIR)\n\n$(PACKAGE_NAME).zip: $(PACKAGE_DIR)\n",
                    "rendered": {
                      "text": "\n$(PACKAGE_NAME).tar.gz: $(PACKAGE_DIR)\n\tpatchelf --remove-needed ld-linux-x86-64.so.2 --remove-needed ld-linux-aarch64.so.1 $(PACKAGE_DIR)/$(LIB_PROFILER)\n\ttar czf $@ -C $(PACKAGE_DIR)/.. $(PACKAGE_NAME)\n\trm -r $(PACKAGE_DIR)\n\n$(PACKAGE_NAME).zip: $(PACKAGE_DIR)\n",
                      "markdown": "`\n$(PACKAGE_NAME).tar.gz: $(PACKAGE_DIR)\n\tpatchelf --remove-needed ld-linux-x86-64.so.2 --remove-needed ld-linux-aarch64.so.1 $(PACKAGE_DIR)/$(LIB_PROFILER)\n\ttar czf $@ -C $(PACKAGE_DIR)/.. $(PACKAGE_NAME)\n\trm -r $(PACKAGE_DIR)\n\n$(PACKAGE_NAME).zip: $(PACKAGE_DIR)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/Makefile"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 23,
                  "endLine": 46,
                  "endColumn": 29,
                  "snippet": {
                    "text": "JAVA_HELPER_CLASSES := $(wildcard src/helper/one/profiler/*.class)\nAPI_SOURCES := $(wildcard src/api/one/profiler/*.java)\nCONVERTER_SOURCES := $(shell find src/converter -name '*.java')\nTEST_SOURCES := $(shell find test -name '*.java')\nTESTS ?= $(notdir $(patsubst %/,%,$(wildcard test/test/*/)))\n\nifeq ($(JAVA_HOME),)\n",
                    "rendered": {
                      "text": "JAVA_HELPER_CLASSES := $(wildcard src/helper/one/profiler/*.class)\nAPI_SOURCES := $(wildcard src/api/one/profiler/*.java)\nCONVERTER_SOURCES := $(shell find src/converter -name '*.java')\nTEST_SOURCES := $(shell find test -name '*.java')\nTESTS ?= $(notdir $(patsubst %/,%,$(wildcard test/test/*/)))\n\nifeq ($(JAVA_HOME),)\n",
                      "markdown": "`JAVA_HELPER_CLASSES := $(wildcard src/helper/one/profiler/*.class)\nAPI_SOURCES := $(wildcard src/api/one/profiler/*.java)\nCONVERTER_SOURCES := $(shell find src/converter -name '*.java')\nTEST_SOURCES := $(shell find test -name '*.java')\nTESTS ?= $(notdir $(patsubst %/,%,$(wildcard test/test/*/)))\n\nifeq ($(JAVA_HOME),)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/Makefile"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 28,
                  "endLine": 45,
                  "endColumn": 34,
                  "snippet": {
                    "text": "RESOURCES := $(wildcard src/res/*)\nJAVA_HELPER_CLASSES := $(wildcard src/helper/one/profiler/*.class)\nAPI_SOURCES := $(wildcard src/api/one/profiler/*.java)\nCONVERTER_SOURCES := $(shell find src/converter -name '*.java')\nTEST_SOURCES := $(shell find test -name '*.java')\nTESTS ?= $(notdir $(patsubst %/,%,$(wildcard test/test/*/)))\n\n",
                    "rendered": {
                      "text": "RESOURCES := $(wildcard src/res/*)\nJAVA_HELPER_CLASSES := $(wildcard src/helper/one/profiler/*.class)\nAPI_SOURCES := $(wildcard src/api/one/profiler/*.java)\nCONVERTER_SOURCES := $(shell find src/converter -name '*.java')\nTEST_SOURCES := $(shell find test -name '*.java')\nTESTS ?= $(notdir $(patsubst %/,%,$(wildcard test/test/*/)))\n\n",
                      "markdown": "`RESOURCES := $(wildcard src/res/*)\nJAVA_HELPER_CLASSES := $(wildcard src/helper/one/profiler/*.class)\nAPI_SOURCES := $(wildcard src/api/one/profiler/*.java)\nCONVERTER_SOURCES := $(shell find src/converter -name '*.java')\nTEST_SOURCES := $(shell find test -name '*.java')\nTESTS ?= $(notdir $(patsubst %/,%,$(wildcard test/test/*/)))\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/Makefile"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 49,
                  "endLine": 4,
                  "endColumn": 54,
                  "snippet": {
                    "text": "PROFILER_VERSION ?= 3.0\n\nifeq ($(COMMIT_TAG),true)\n  PROFILER_VERSION := $(PROFILER_VERSION)-$(shell git rev-parse --short=8 HEAD)\nendif\n\nPACKAGE_NAME=async-profiler-$(PROFILER_VERSION)-$(OS_TAG)-$(ARCH_TAG)\n",
                    "rendered": {
                      "text": "PROFILER_VERSION ?= 3.0\n\nifeq ($(COMMIT_TAG),true)\n  PROFILER_VERSION := $(PROFILER_VERSION)-$(shell git rev-parse --short=8 HEAD)\nendif\n\nPACKAGE_NAME=async-profiler-$(PROFILER_VERSION)-$(OS_TAG)-$(ARCH_TAG)\n",
                      "markdown": "`PROFILER_VERSION ?= 3.0\n\nifeq ($(COMMIT_TAG),true)\n  PROFILER_VERSION := $(PROFILER_VERSION)-$(shell git rev-parse --short=8 HEAD)\nendif\n\nPACKAGE_NAME=async-profiler-$(PROFILER_VERSION)-$(OS_TAG)-$(ARCH_TAG)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 24,
                  "endLine": 26,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                    "rendered": {
                      "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                      "markdown": "`\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                    "rendered": {
                      "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                      "markdown": "`fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                    "rendered": {
                      "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                      "markdown": "`\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                    "rendered": {
                      "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                      "markdown": "`\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                    "rendered": {
                      "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                      "markdown": "`\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                    "rendered": {
                      "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                      "markdown": "`then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 2,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/pre-applypatch.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.git/hooks/pre-receive.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/test/test/recovery/Suppliers.java"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 43,
                  "endLine": 34,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\n    private static void loop(Supplier[] suppliers) {\n        for (int i = 0; i >= 0; i++) {\n            suppliers[i % suppliers.length].get();\n        }\n    }\n}",
                    "rendered": {
                      "text": "\n    private static void loop(Supplier[] suppliers) {\n        for (int i = 0; i >= 0; i++) {\n            suppliers[i % suppliers.length].get();\n        }\n    }\n}",
                      "markdown": "`\n    private static void loop(Supplier[] suppliers) {\n        for (int i = 0; i >= 0; i++) {\n            suppliers[i % suppliers.length].get();\n        }\n    }\n}`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/test/test/alloc/MapReader.java"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 25,
                  "endLine": 33,
                  "endColumn": 31,
                  "snippet": {
                    "text": "            int length = ThreadLocalRandom.current().nextInt(1, 9);\n            byte[] b = new byte[length];\n            ThreadLocalRandom.current().nextBytes(b);\n            String key = Base64.getEncoder().encodeToString(b);\n            long value = ThreadLocalRandom.current().nextLong(1000000);\n            out.write((key + \": \" + value + \"\\n\").getBytes(StandardCharsets.ISO_8859_1));\n        }\n",
                    "rendered": {
                      "text": "            int length = ThreadLocalRandom.current().nextInt(1, 9);\n            byte[] b = new byte[length];\n            ThreadLocalRandom.current().nextBytes(b);\n            String key = Base64.getEncoder().encodeToString(b);\n            long value = ThreadLocalRandom.current().nextLong(1000000);\n            out.write((key + \": \" + value + \"\\n\").getBytes(StandardCharsets.ISO_8859_1));\n        }\n",
                      "markdown": "`            int length = ThreadLocalRandom.current().nextInt(1, 9);\n            byte[] b = new byte[length];\n            ThreadLocalRandom.current().nextBytes(b);\n            String key = Base64.getEncoder().encodeToString(b);\n            long value = ThreadLocalRandom.current().nextLong(1000000);\n            out.write((key + \": \" + value + \"\\n\").getBytes(StandardCharsets.ISO_8859_1));\n        }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/test/test/alloc/MapReader.java"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 17,
                  "endLine": 15,
                  "endColumn": 23,
                  "snippet": {
                    "text": "import java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Base64;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.ThreadLocalRandom;\n",
                    "rendered": {
                      "text": "import java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Base64;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.ThreadLocalRandom;\n",
                      "markdown": "`import java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Base64;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.ThreadLocalRandom;\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/jfr/JfrReader.java"
                },
                "region": {
                  "startLine": 628,
                  "startColumn": 11,
                  "endLine": 628,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\n    public byte[] getBytes() {\n        byte[] bytes = new byte[getVarint()];\n        buf.get(bytes);\n        return bytes;\n    }\n\n",
                    "rendered": {
                      "text": "\n    public byte[] getBytes() {\n        byte[] bytes = new byte[getVarint()];\n        buf.get(bytes);\n        return bytes;\n    }\n\n",
                      "markdown": "`\n    public byte[] getBytes() {\n        byte[] bytes = new byte[getVarint()];\n        buf.get(bytes);\n        return bytes;\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/jfr/JfrReader.java"
                },
                "region": {
                  "startLine": 609,
                  "startColumn": 30,
                  "endLine": 609,
                  "endColumn": 35,
                  "snippet": {
                    "text": "            case 1:\n                return \"\";\n            case 2:\n                return strings.get(getVarlong());\n            case 3:\n                return new String(getBytes(), StandardCharsets.UTF_8);\n            case 4: {\n",
                    "rendered": {
                      "text": "            case 1:\n                return \"\";\n            case 2:\n                return strings.get(getVarlong());\n            case 3:\n                return new String(getBytes(), StandardCharsets.UTF_8);\n            case 4: {\n",
                      "markdown": "`            case 1:\n                return \"\";\n            case 2:\n                return strings.get(getVarlong());\n            case 3:\n                return new String(getBytes(), StandardCharsets.UTF_8);\n            case 4: {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/jfr/JfrReader.java"
                },
                "region": {
                  "startLine": 603,
                  "startColumn": 19,
                  "endLine": 603,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    }\n\n    public String getString() {\n        switch (buf.get()) {\n            case 0:\n                return null;\n            case 1:\n",
                    "rendered": {
                      "text": "    }\n\n    public String getString() {\n        switch (buf.get()) {\n            case 0:\n                return null;\n            case 1:\n",
                      "markdown": "`    }\n\n    public String getString() {\n        switch (buf.get()) {\n            case 0:\n                return null;\n            case 1:\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/jfr/JfrReader.java"
                },
                "region": {
                  "startLine": 591,
                  "startColumn": 28,
                  "endLine": 591,
                  "endColumn": 33,
                  "snippet": {
                    "text": "                return result;\n            }\n        }\n        return result | (buf.get() & 0xffL) << 56;\n    }\n\n    public float getFloat() {\n",
                    "rendered": {
                      "text": "                return result;\n            }\n        }\n        return result | (buf.get() & 0xffL) << 56;\n    }\n\n    public float getFloat() {\n",
                      "markdown": "`                return result;\n            }\n        }\n        return result | (buf.get() & 0xffL) << 56;\n    }\n\n    public float getFloat() {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/jfr/JfrReader.java"
                },
                "region": {
                  "startLine": 585,
                  "startColumn": 24,
                  "endLine": 585,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    public long getVarlong() {\n        long result = 0;\n        for (int shift = 0; shift < 56; shift += 7) {\n            byte b = buf.get();\n            result |= (b & 0x7fL) << shift;\n            if (b >= 0) {\n                return result;\n",
                    "rendered": {
                      "text": "    public long getVarlong() {\n        long result = 0;\n        for (int shift = 0; shift < 56; shift += 7) {\n            byte b = buf.get();\n            result |= (b & 0x7fL) << shift;\n            if (b >= 0) {\n                return result;\n",
                      "markdown": "`    public long getVarlong() {\n        long result = 0;\n        for (int shift = 0; shift < 56; shift += 7) {\n            byte b = buf.get();\n            result |= (b & 0x7fL) << shift;\n            if (b >= 0) {\n                return result;\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/jfr/JfrReader.java"
                },
                "region": {
                  "startLine": 574,
                  "startColumn": 24,
                  "endLine": 574,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    public int getVarint() {\n        int result = 0;\n        for (int shift = 0; ; shift += 7) {\n            byte b = buf.get();\n            result |= (b & 0x7f) << shift;\n            if (b >= 0) {\n                return result;\n",
                    "rendered": {
                      "text": "    public int getVarint() {\n        int result = 0;\n        for (int shift = 0; ; shift += 7) {\n            byte b = buf.get();\n            result |= (b & 0x7f) << shift;\n            if (b >= 0) {\n                return result;\n",
                      "markdown": "`    public int getVarint() {\n        int result = 0;\n        for (int shift = 0; ; shift += 7) {\n            byte b = buf.get();\n            result |= (b & 0x7f) << shift;\n            if (b >= 0) {\n                return result;\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/jfr/JfrReader.java"
                },
                "region": {
                  "startLine": 568,
                  "startColumn": 34,
                  "endLine": 568,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    }\n\n    public String getEnumValue(String typeName, int key) {\n        return enums.get(typeName).get(key);\n    }\n\n    public int getVarint() {\n",
                    "rendered": {
                      "text": "    }\n\n    public String getEnumValue(String typeName, int key) {\n        return enums.get(typeName).get(key);\n    }\n\n    public int getVarint() {\n",
                      "markdown": "`    }\n\n    public String getEnumValue(String typeName, int key) {\n        return enums.get(typeName).get(key);\n    }\n\n    public int getVarint() {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/jfr/JfrReader.java"
                },
                "region": {
                  "startLine": 568,
                  "startColumn": 20,
                  "endLine": 568,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    }\n\n    public String getEnumValue(String typeName, int key) {\n        return enums.get(typeName).get(key);\n    }\n\n    public int getVarint() {\n",
                    "rendered": {
                      "text": "    }\n\n    public String getEnumValue(String typeName, int key) {\n        return enums.get(typeName).get(key);\n    }\n\n    public int getVarint() {\n",
                      "markdown": "`    }\n\n    public String getEnumValue(String typeName, int key) {\n        return enums.get(typeName).get(key);\n    }\n\n    public int getVarint() {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/jfr/JfrReader.java"
                },
                "region": {
                  "startLine": 556,
                  "startColumn": 47,
                  "endLine": 556,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    }\n\n    public int getEnumKey(String typeName, String value) {\n        Map<Integer, String> enumValues = enums.get(typeName);\n        if (enumValues != null) {\n            for (Map.Entry<Integer, String> entry : enumValues.entrySet()) {\n                if (value.equals(entry.getValue())) {\n",
                    "rendered": {
                      "text": "    }\n\n    public int getEnumKey(String typeName, String value) {\n        Map<Integer, String> enumValues = enums.get(typeName);\n        if (enumValues != null) {\n            for (Map.Entry<Integer, String> entry : enumValues.entrySet()) {\n                if (value.equals(entry.getValue())) {\n",
                      "markdown": "`    }\n\n    public int getEnumKey(String typeName, String value) {\n        Map<Integer, String> enumValues = enums.get(typeName);\n        if (enumValues != null) {\n            for (Map.Entry<Integer, String> entry : enumValues.entrySet()) {\n                if (value.equals(entry.getValue())) {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/jfr/JfrReader.java"
                },
                "region": {
                  "startLine": 551,
                  "startColumn": 35,
                  "endLine": 551,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    }\n\n    private int getTypeId(String typeName) {\n        JfrClass type = typesByName.get(typeName);\n        return type != null ? type.id : -1;\n    }\n\n",
                    "rendered": {
                      "text": "    }\n\n    private int getTypeId(String typeName) {\n        JfrClass type = typesByName.get(typeName);\n        return type != null ? type.id : -1;\n    }\n\n",
                      "markdown": "`    }\n\n    private int getTypeId(String typeName) {\n        JfrClass type = typesByName.get(typeName);\n        return type != null ? type.id : -1;\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/jfr/JfrReader.java"
                },
                "region": {
                  "startLine": 505,
                  "startColumn": 31,
                  "endLine": 505,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n        boolean[] numeric = new boolean[fields.size()];\n        for (int i = 0; i < numeric.length; i++) {\n            JfrField f = fields.get(i);\n            numeric[i] = f.constantPool || f.type != stringType;\n        }\n\n",
                    "rendered": {
                      "text": "\n        boolean[] numeric = new boolean[fields.size()];\n        for (int i = 0; i < numeric.length; i++) {\n            JfrField f = fields.get(i);\n            numeric[i] = f.constantPool || f.type != stringType;\n        }\n\n",
                      "markdown": "`\n        boolean[] numeric = new boolean[fields.size()];\n        for (int i = 0; i < numeric.length; i++) {\n            JfrField f = fields.get(i);\n            numeric[i] = f.constantPool || f.type != stringType;\n        }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/jfr/JfrReader.java"
                },
                "region": {
                  "startLine": 484,
                  "startColumn": 19,
                  "endLine": 484,
                  "endColumn": 24,
                  "snippet": {
                    "text": "        int count = symbols.preallocate(getVarint());\n        for (int i = 0; i < count; i++) {\n            long id = getVarlong();\n            if (buf.get() != 3) {\n                throw new IllegalArgumentException(\"Invalid symbol encoding\");\n            }\n            symbols.put(id, getBytes());\n",
                    "rendered": {
                      "text": "        int count = symbols.preallocate(getVarint());\n        for (int i = 0; i < count; i++) {\n            long id = getVarlong();\n            if (buf.get() != 3) {\n                throw new IllegalArgumentException(\"Invalid symbol encoding\");\n            }\n            symbols.put(id, getBytes());\n",
                      "markdown": "`        int count = symbols.preallocate(getVarint());\n        for (int i = 0; i < count; i++) {\n            long id = getVarlong();\n            if (buf.get() != 3) {\n                throw new IllegalArgumentException(\"Invalid symbol encoding\");\n            }\n            symbols.put(id, getBytes());\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/jfr/JfrReader.java"
                },
                "region": {
                  "startLine": 468,
                  "startColumn": 26,
                  "endLine": 468,
                  "endColumn": 31,
                  "snippet": {
                    "text": "            int line = getVarint();\n            int bci = getVarint();\n            locations[i] = line << 16 | (bci & 0xffff);\n            types[i] = buf.get();\n        }\n        return new StackTrace(methods, types, locations);\n    }\n",
                    "rendered": {
                      "text": "            int line = getVarint();\n            int bci = getVarint();\n            locations[i] = line << 16 | (bci & 0xffff);\n            types[i] = buf.get();\n        }\n        return new StackTrace(methods, types, locations);\n    }\n",
                      "markdown": "`            int line = getVarint();\n            int bci = getVarint();\n            locations[i] = line << 16 | (bci & 0xffff);\n            types[i] = buf.get();\n        }\n        return new StackTrace(methods, types, locations);\n    }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/jfr/JfrReader.java"
                },
                "region": {
                  "startLine": 372,
                  "startColumn": 35,
                  "endLine": 372,
                  "endColumn": 40,
                  "snippet": {
                    "text": "            int poolCount = getVarint();\n            for (int i = 0; i < poolCount; i++) {\n                int type = getVarint();\n                readConstants(types.get(type));\n            }\n        } while (delta != 0 && (cpOffset += delta) > 0);\n    }\n",
                    "rendered": {
                      "text": "            int poolCount = getVarint();\n            for (int i = 0; i < poolCount; i++) {\n                int type = getVarint();\n                readConstants(types.get(type));\n            }\n        } while (delta != 0 && (cpOffset += delta) > 0);\n    }\n",
                      "markdown": "`            int poolCount = getVarint();\n            for (int i = 0; i < poolCount; i++) {\n                int type = getVarint();\n                readConstants(types.get(type));\n            }\n        } while (delta != 0 && (cpOffset += delta) > 0);\n    }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/jfr/JfrReader.java"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 41,
                  "endLine": 247,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    }\n\n    private void readActiveSetting() {\n        for (JfrField field : typesByName.get(\"jdk.ActiveSetting\").fields) {\n            getVarlong();\n            if (\"id\".equals(field.name)) {\n                break;\n",
                    "rendered": {
                      "text": "    }\n\n    private void readActiveSetting() {\n        for (JfrField field : typesByName.get(\"jdk.ActiveSetting\").fields) {\n            getVarlong();\n            if (\"id\".equals(field.name)) {\n                break;\n",
                      "markdown": "`    }\n\n    private void readActiveSetting() {\n        for (JfrField field : typesByName.get(\"jdk.ActiveSetting\").fields) {\n            getVarlong();\n            if (\"id\".equals(field.name)) {\n                break;\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/jfr/JfrReader.java"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 71,
                  "endLine": 186,
                  "endColumn": 76,
                  "snippet": {
                    "text": "            } else if (type == activeSetting) {\n                readActiveSetting();\n            } else {\n                Constructor<? extends Event> customEvent = customEvents.get(type);\n                if (customEvent != null && (cls == null || cls == customEvent.getDeclaringClass())) {\n                    try {\n                        return (E) customEvent.newInstance(this);\n",
                    "rendered": {
                      "text": "            } else if (type == activeSetting) {\n                readActiveSetting();\n            } else {\n                Constructor<? extends Event> customEvent = customEvents.get(type);\n                if (customEvent != null && (cls == null || cls == customEvent.getDeclaringClass())) {\n                    try {\n                        return (E) customEvent.newInstance(this);\n",
                      "markdown": "`            } else if (type == activeSetting) {\n                readActiveSetting();\n            } else {\n                Constructor<? extends Event> customEvent = customEvents.get(type);\n                if (customEvent != null && (cls == null || cls == customEvent.getDeclaringClass())) {\n                    try {\n                        return (E) customEvent.newInstance(this);\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/jfr/JfrReader.java"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 35,
                  "endLine": 120,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    }\n\n    public <E extends Event> void registerEvent(String name, Class<E> eventClass) {\n        JfrClass type = typesByName.get(name);\n        if (type != null) {\n            try {\n                customEvents.put(type.id, eventClass.getConstructor(JfrReader.class));\n",
                    "rendered": {
                      "text": "    }\n\n    public <E extends Event> void registerEvent(String name, Class<E> eventClass) {\n        JfrClass type = typesByName.get(name);\n        if (type != null) {\n            try {\n                customEvents.put(type.id, eventClass.getConstructor(JfrReader.class));\n",
                      "markdown": "`    }\n\n    public <E extends Event> void registerEvent(String name, Class<E> eventClass) {\n        JfrClass type = typesByName.get(name);\n        if (type != null) {\n            try {\n                customEvents.put(type.id, eventClass.getConstructor(JfrReader.class));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/jfr/JfrReader.java"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 40,
                  "endLine": 78,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    private int activeSetting;\n\n    public JfrReader(String fileName) throws IOException {\n        this.ch = FileChannel.open(Paths.get(fileName), StandardOpenOption.READ);\n        this.buf = ByteBuffer.allocateDirect(BUFFER_SIZE);\n        this.fileSize = ch.size();\n\n",
                    "rendered": {
                      "text": "    private int activeSetting;\n\n    public JfrReader(String fileName) throws IOException {\n        this.ch = FileChannel.open(Paths.get(fileName), StandardOpenOption.READ);\n        this.buf = ByteBuffer.allocateDirect(BUFFER_SIZE);\n        this.fileSize = ch.size();\n\n",
                      "markdown": "`    private int activeSetting;\n\n    public JfrReader(String fileName) throws IOException {\n        this.ch = FileChannel.open(Paths.get(fileName), StandardOpenOption.READ);\n        this.buf = ByteBuffer.allocateDirect(BUFFER_SIZE);\n        this.fileSize = ch.size();\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/jfr/JfrReader.java"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 12,
                  "endLine": 235,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    }\n\n    private ContendedLock readContendedLock(boolean hasTimeout) {\n        long time = getVarlong();\n        long duration = getVarlong();\n        int tid = getVarint();\n        int stackTraceId = getVarint();\n",
                    "rendered": {
                      "text": "    }\n\n    private ContendedLock readContendedLock(boolean hasTimeout) {\n        long time = getVarlong();\n        long duration = getVarlong();\n        int tid = getVarint();\n        int stackTraceId = getVarint();\n",
                      "markdown": "`    }\n\n    private ContendedLock readContendedLock(boolean hasTimeout) {\n        long time = getVarlong();\n        long duration = getVarlong();\n        int tid = getVarint();\n        int stackTraceId = getVarint();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/jfr/JfrReader.java"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 12,
                  "endLine": 225,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    }\n\n    private LiveObject readLiveObject() {\n        long time = getVarlong();\n        int tid = getVarint();\n        int stackTraceId = getVarint();\n        int classId = getVarint();\n",
                    "rendered": {
                      "text": "    }\n\n    private LiveObject readLiveObject() {\n        long time = getVarlong();\n        int tid = getVarint();\n        int stackTraceId = getVarint();\n        int classId = getVarint();\n",
                      "markdown": "`    }\n\n    private LiveObject readLiveObject() {\n        long time = getVarlong();\n        int tid = getVarint();\n        int stackTraceId = getVarint();\n        int classId = getVarint();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/jfr/JfrReader.java"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 12,
                  "endLine": 215,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    }\n\n    private AllocationSample readAllocationSample(boolean tlab) {\n        long time = getVarlong();\n        int tid = getVarint();\n        int stackTraceId = getVarint();\n        int classId = getVarint();\n",
                    "rendered": {
                      "text": "    }\n\n    private AllocationSample readAllocationSample(boolean tlab) {\n        long time = getVarlong();\n        int tid = getVarint();\n        int stackTraceId = getVarint();\n        int classId = getVarint();\n",
                      "markdown": "`    }\n\n    private AllocationSample readAllocationSample(boolean tlab) {\n        long time = getVarlong();\n        int tid = getVarint();\n        int stackTraceId = getVarint();\n        int classId = getVarint();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/jfr/JfrReader.java"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 12,
                  "endLine": 206,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    }\n\n    private ExecutionSample readExecutionSample(boolean hasSamples) {\n        long time = getVarlong();\n        int tid = getVarint();\n        int stackTraceId = getVarint();\n        int threadState = getVarint();\n",
                    "rendered": {
                      "text": "    }\n\n    private ExecutionSample readExecutionSample(boolean hasSamples) {\n        long time = getVarlong();\n        int tid = getVarint();\n        int stackTraceId = getVarint();\n        int threadState = getVarint();\n",
                      "markdown": "`    }\n\n    private ExecutionSample readExecutionSample(boolean hasSamples) {\n        long time = getVarlong();\n        int tid = getVarint();\n        int stackTraceId = getVarint();\n        int threadState = getVarint();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/jfr/JfrField.java"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 52,
                  "endLine": 18,
                  "endColumn": 57,
                  "snippet": {
                    "text": "    JfrField(Map<String, String> attributes) {\n        this.name = attributes.get(\"name\");\n        this.type = Integer.parseInt(attributes.get(\"class\"));\n        this.constantPool = \"true\".equals(attributes.get(\"constantPool\"));\n    }\n}\n",
                    "rendered": {
                      "text": "    JfrField(Map<String, String> attributes) {\n        this.name = attributes.get(\"name\");\n        this.type = Integer.parseInt(attributes.get(\"class\"));\n        this.constantPool = \"true\".equals(attributes.get(\"constantPool\"));\n    }\n}\n",
                      "markdown": "`    JfrField(Map<String, String> attributes) {\n        this.name = attributes.get(\"name\");\n        this.type = Integer.parseInt(attributes.get(\"class\"));\n        this.constantPool = \"true\".equals(attributes.get(\"constantPool\"));\n    }\n}\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/jfr/JfrField.java"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 47,
                  "endLine": 17,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n    JfrField(Map<String, String> attributes) {\n        this.name = attributes.get(\"name\");\n        this.type = Integer.parseInt(attributes.get(\"class\"));\n        this.constantPool = \"true\".equals(attributes.get(\"constantPool\"));\n    }\n}\n",
                    "rendered": {
                      "text": "\n    JfrField(Map<String, String> attributes) {\n        this.name = attributes.get(\"name\");\n        this.type = Integer.parseInt(attributes.get(\"class\"));\n        this.constantPool = \"true\".equals(attributes.get(\"constantPool\"));\n    }\n}\n",
                      "markdown": "`\n    JfrField(Map<String, String> attributes) {\n        this.name = attributes.get(\"name\");\n        this.type = Integer.parseInt(attributes.get(\"class\"));\n        this.constantPool = \"true\".equals(attributes.get(\"constantPool\"));\n    }\n}\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/jfr/JfrField.java"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 30,
                  "endLine": 16,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    final boolean constantPool;\n\n    JfrField(Map<String, String> attributes) {\n        this.name = attributes.get(\"name\");\n        this.type = Integer.parseInt(attributes.get(\"class\"));\n        this.constantPool = \"true\".equals(attributes.get(\"constantPool\"));\n    }\n",
                    "rendered": {
                      "text": "    final boolean constantPool;\n\n    JfrField(Map<String, String> attributes) {\n        this.name = attributes.get(\"name\");\n        this.type = Integer.parseInt(attributes.get(\"class\"));\n        this.constantPool = \"true\".equals(attributes.get(\"constantPool\"));\n    }\n",
                      "markdown": "`    final boolean constantPool;\n\n    JfrField(Map<String, String> attributes) {\n        this.name = attributes.get(\"name\");\n        this.type = Integer.parseInt(attributes.get(\"class\"));\n        this.constantPool = \"true\".equals(attributes.get(\"constantPool\"));\n    }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/convert/Index.java"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 29,
                  "endLine": 20,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    }\n\n    public int index(T key) {\n        Integer index = super.get(key);\n        if (index != null) {\n            return index;\n        } else {\n",
                    "rendered": {
                      "text": "    }\n\n    public int index(T key) {\n        Integer index = super.get(key);\n        if (index != null) {\n            return index;\n        } else {\n",
                      "markdown": "`    }\n\n    public int index(T key) {\n        Integer index = super.get(key);\n        if (index != null) {\n            return index;\n        } else {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/convert/JfrToFlame.java"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 55,
                  "endLine": 39,
                  "endColumn": 60,
                  "snippet": {
                    "text": "\n            @Override\n            public void visit(Event event, long value) {\n                StackTrace stackTrace = jfr.stackTraces.get(event.stackTraceId);\n                if (stackTrace != null) {\n                    Arguments args = JfrToFlame.this.args;\n                    long[] methods = stackTrace.methods;\n",
                    "rendered": {
                      "text": "\n            @Override\n            public void visit(Event event, long value) {\n                StackTrace stackTrace = jfr.stackTraces.get(event.stackTraceId);\n                if (stackTrace != null) {\n                    Arguments args = JfrToFlame.this.args;\n                    long[] methods = stackTrace.methods;\n",
                      "markdown": "`\n            @Override\n            public void visit(Event event, long value) {\n                StackTrace stackTrace = jfr.stackTraces.get(event.stackTraceId);\n                if (stackTrace != null) {\n                    Arguments args = JfrToFlame.this.args;\n                    long[] methods = stackTrace.methods;\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/convert/JfrToPprof.java"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 47,
                  "endLine": 90,
                  "endColumn": 52,
                  "snippet": {
                    "text": "            s.writeInt(locations.index((long) function << 16));\n        }\n\n        StackTrace stackTrace = jfr.stackTraces.get(event.stackTraceId);\n        if (stackTrace != null) {\n            long[] methods = stackTrace.methods;\n            byte[] types = stackTrace.types;\n",
                    "rendered": {
                      "text": "            s.writeInt(locations.index((long) function << 16));\n        }\n\n        StackTrace stackTrace = jfr.stackTraces.get(event.stackTraceId);\n        if (stackTrace != null) {\n            long[] methods = stackTrace.methods;\n            byte[] types = stackTrace.types;\n",
                      "markdown": "`            s.writeInt(locations.index((long) function << 16));\n        }\n\n        StackTrace stackTrace = jfr.stackTraces.get(event.stackTraceId);\n        if (stackTrace != null) {\n            long[] methods = stackTrace.methods;\n            byte[] types = stackTrace.types;\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/convert/JfrConverter.java"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 39,
                  "endLine": 165,
                  "endColumn": 44,
                  "snippet": {
                    "text": "    }\n\n    protected String getThreadName(int tid) {\n        String threadName = jfr.threads.get(tid);\n        return threadName == null ? \"[tid=\" + tid + ']' :\n                threadName.startsWith(\"[tid=\") ? threadName : '[' + threadName + \" tid=\" + tid + ']';\n    }\n",
                    "rendered": {
                      "text": "    }\n\n    protected String getThreadName(int tid) {\n        String threadName = jfr.threads.get(tid);\n        return threadName == null ? \"[tid=\" + tid + ']' :\n                threadName.startsWith(\"[tid=\") ? threadName : '[' + threadName + \" tid=\" + tid + ']';\n    }\n",
                      "markdown": "`    }\n\n    protected String getThreadName(int tid) {\n        String threadName = jfr.threads.get(tid);\n        return threadName == null ? \"[tid=\" + tid + ']' :\n                threadName.startsWith(\"[tid=\") ? threadName : '[' + threadName + \" tid=\" + tid + ']';\n    }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/convert/JfrConverter.java"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 38,
                  "endLine": 150,
                  "endColumn": 43,
                  "snippet": {
                    "text": "        if (cls == null) {\n            return \"null\";\n        }\n        byte[] className = jfr.symbols.get(cls.name);\n\n        int arrayDepth = 0;\n        while (className[arrayDepth] == '[') {\n",
                    "rendered": {
                      "text": "        if (cls == null) {\n            return \"null\";\n        }\n        byte[] className = jfr.symbols.get(cls.name);\n\n        int arrayDepth = 0;\n        while (className[arrayDepth] == '[') {\n",
                      "markdown": "`        if (cls == null) {\n            return \"null\";\n        }\n        byte[] className = jfr.symbols.get(cls.name);\n\n        int arrayDepth = 0;\n        while (className[arrayDepth] == '[') {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/convert/JfrConverter.java"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 34,
                  "endLine": 146,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    }\n\n    protected String getClassName(long classId) {\n        ClassRef cls = jfr.classes.get(classId);\n        if (cls == null) {\n            return \"null\";\n        }\n",
                    "rendered": {
                      "text": "    }\n\n    protected String getClassName(long classId) {\n        ClassRef cls = jfr.classes.get(classId);\n        if (cls == null) {\n            return \"null\";\n        }\n",
                      "markdown": "`    }\n\n    protected String getClassName(long classId) {\n        ClassRef cls = jfr.classes.get(classId);\n        if (cls == null) {\n            return \"null\";\n        }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/convert/JfrConverter.java"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 39,
                  "endLine": 131,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\n        ClassRef cls = jfr.classes.get(method.cls);\n        byte[] className = jfr.symbols.get(cls.name);\n        byte[] methodName = jfr.symbols.get(method.name);\n\n        if (className == null || className.length == 0 || isNativeFrame(methodType)) {\n            return new String(methodName, StandardCharsets.UTF_8);\n",
                    "rendered": {
                      "text": "\n        ClassRef cls = jfr.classes.get(method.cls);\n        byte[] className = jfr.symbols.get(cls.name);\n        byte[] methodName = jfr.symbols.get(method.name);\n\n        if (className == null || className.length == 0 || isNativeFrame(methodType)) {\n            return new String(methodName, StandardCharsets.UTF_8);\n",
                      "markdown": "`\n        ClassRef cls = jfr.classes.get(method.cls);\n        byte[] className = jfr.symbols.get(cls.name);\n        byte[] methodName = jfr.symbols.get(method.name);\n\n        if (className == null || className.length == 0 || isNativeFrame(methodType)) {\n            return new String(methodName, StandardCharsets.UTF_8);\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/convert/JfrConverter.java"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 38,
                  "endLine": 130,
                  "endColumn": 43,
                  "snippet": {
                    "text": "        }\n\n        ClassRef cls = jfr.classes.get(method.cls);\n        byte[] className = jfr.symbols.get(cls.name);\n        byte[] methodName = jfr.symbols.get(method.name);\n\n        if (className == null || className.length == 0 || isNativeFrame(methodType)) {\n",
                    "rendered": {
                      "text": "        }\n\n        ClassRef cls = jfr.classes.get(method.cls);\n        byte[] className = jfr.symbols.get(cls.name);\n        byte[] methodName = jfr.symbols.get(method.name);\n\n        if (className == null || className.length == 0 || isNativeFrame(methodType)) {\n",
                      "markdown": "`        }\n\n        ClassRef cls = jfr.classes.get(method.cls);\n        byte[] className = jfr.symbols.get(cls.name);\n        byte[] methodName = jfr.symbols.get(method.name);\n\n        if (className == null || className.length == 0 || isNativeFrame(methodType)) {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/convert/JfrConverter.java"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 34,
                  "endLine": 129,
                  "endColumn": 39,
                  "snippet": {
                    "text": "            return \"unknown\";\n        }\n\n        ClassRef cls = jfr.classes.get(method.cls);\n        byte[] className = jfr.symbols.get(cls.name);\n        byte[] methodName = jfr.symbols.get(method.name);\n\n",
                    "rendered": {
                      "text": "            return \"unknown\";\n        }\n\n        ClassRef cls = jfr.classes.get(method.cls);\n        byte[] className = jfr.symbols.get(cls.name);\n        byte[] methodName = jfr.symbols.get(method.name);\n\n",
                      "markdown": "`            return \"unknown\";\n        }\n\n        ClassRef cls = jfr.classes.get(method.cls);\n        byte[] className = jfr.symbols.get(cls.name);\n        byte[] methodName = jfr.symbols.get(method.name);\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/convert/JfrConverter.java"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 38,
                  "endLine": 124,
                  "endColumn": 43,
                  "snippet": {
                    "text": "    }\n\n    private String resolveMethodName(long methodId, byte methodType) {\n        MethodRef method = jfr.methods.get(methodId);\n        if (method == null) {\n            return \"unknown\";\n        }\n",
                    "rendered": {
                      "text": "    }\n\n    private String resolveMethodName(long methodId, byte methodType) {\n        MethodRef method = jfr.methods.get(methodId);\n        if (method == null) {\n            return \"unknown\";\n        }\n",
                      "markdown": "`    }\n\n    private String resolveMethodName(long methodId, byte methodType) {\n        MethodRef method = jfr.methods.get(methodId);\n        if (method == null) {\n            return \"unknown\";\n        }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/convert/JfrConverter.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 35,
                  "endLine": 116,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n    @Override\n    protected String getMethodName(long methodId, byte methodType) {\n        String result = methodNames.get(methodId);\n        if (result == null) {\n            methodNames.put(methodId, result = resolveMethodName(methodId, methodType));\n        }\n",
                    "rendered": {
                      "text": "\n    @Override\n    protected String getMethodName(long methodId, byte methodType) {\n        String result = methodNames.get(methodId);\n        if (result == null) {\n            methodNames.put(methodId, result = resolveMethodName(methodId, methodType));\n        }\n",
                      "markdown": "`\n    @Override\n    protected String getMethodName(long methodId, byte methodType) {\n        String result = methodNames.get(methodId);\n        if (result == null) {\n            methodNames.put(methodId, result = resolveMethodName(methodId, methodType));\n        }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/convert/JfrConverter.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 53,
                  "endLine": 94,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\n    protected BitSet getThreadStates(boolean cpu) {\n        BitSet set = new BitSet();\n        Map<Integer, String> threadStates = jfr.enums.get(\"jdk.types.ThreadState\");\n        if (threadStates != null) {\n            for (Map.Entry<Integer, String> entry : threadStates.entrySet()) {\n                set.set(entry.getKey(), \"STATE_DEFAULT\".equals(entry.getValue()) == cpu);\n",
                    "rendered": {
                      "text": "\n    protected BitSet getThreadStates(boolean cpu) {\n        BitSet set = new BitSet();\n        Map<Integer, String> threadStates = jfr.enums.get(\"jdk.types.ThreadState\");\n        if (threadStates != null) {\n            for (Map.Entry<Integer, String> entry : threadStates.entrySet()) {\n                set.set(entry.getKey(), \"STATE_DEFAULT\".equals(entry.getValue()) == cpu);\n",
                      "markdown": "`\n    protected BitSet getThreadStates(boolean cpu) {\n        BitSet set = new BitSet();\n        Map<Integer, String> threadStates = jfr.enums.get(\"jdk.types.ThreadState\");\n        if (threadStates != null) {\n            for (Map.Entry<Integer, String> entry : threadStates.entrySet()) {\n                set.set(entry.getKey(), \"STATE_DEFAULT\".equals(entry.getValue()) == cpu);\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/convert/JfrConverter.java"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 53,
                  "endLine": 81,
                  "endColumn": 58,
                  "snippet": {
                    "text": "    }\n\n    protected int toThreadState(String name) {\n        Map<Integer, String> threadStates = jfr.enums.get(\"jdk.types.ThreadState\");\n        if (threadStates != null) {\n            for (Map.Entry<Integer, String> entry : threadStates.entrySet()) {\n                if (entry.getValue().startsWith(name, 6)) {\n",
                    "rendered": {
                      "text": "    }\n\n    protected int toThreadState(String name) {\n        Map<Integer, String> threadStates = jfr.enums.get(\"jdk.types.ThreadState\");\n        if (threadStates != null) {\n            for (Map.Entry<Integer, String> entry : threadStates.entrySet()) {\n                if (entry.getValue().startsWith(name, 6)) {\n",
                      "markdown": "`    }\n\n    protected int toThreadState(String name) {\n        Map<Integer, String> threadStates = jfr.enums.get(\"jdk.types.ThreadState\");\n        if (threadStates != null) {\n            for (Map.Entry<Integer, String> entry : threadStates.entrySet()) {\n                if (entry.getValue().startsWith(name, 6)) {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/convert/JfrConverter.java"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 56,
                  "endLine": 67,
                  "endColumn": 61,
                  "snippet": {
                    "text": "\n        for (Event event; (event = jfr.readEvent(eventClass)) != null; ) {\n            if (event.time >= startTicks && event.time <= endTicks) {\n                if (threadStates == null || threadStates.get(((ExecutionSample) event).threadState)) {\n                    agg.collect(event);\n                }\n            }\n",
                    "rendered": {
                      "text": "\n        for (Event event; (event = jfr.readEvent(eventClass)) != null; ) {\n            if (event.time >= startTicks && event.time <= endTicks) {\n                if (threadStates == null || threadStates.get(((ExecutionSample) event).threadState)) {\n                    agg.collect(event);\n                }\n            }\n",
                      "markdown": "`\n        for (Event event; (event = jfr.readEvent(eventClass)) != null; ) {\n            if (event.time >= startTicks && event.time <= endTicks) {\n                if (threadStates == null || threadStates.get(((ExecutionSample) event).threadState)) {\n                    agg.collect(event);\n                }\n            }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/convert/FlameGraph.java"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 23,
                  "endLine": 218,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        for (int i = 1; i < strings.length; i++) {\n            int prefixLen = Math.min(getCommonPrefix(s, s = strings[i]), 95);\n            out.print(\",\\n'\" + escape((char) (prefixLen + ' ') + s.substring(prefixLen)) + \"'\");\n            order[cpool.get(s)] = i;\n        }\n\n        // cpool is not used beyond this point\n",
                    "rendered": {
                      "text": "        for (int i = 1; i < strings.length; i++) {\n            int prefixLen = Math.min(getCommonPrefix(s, s = strings[i]), 95);\n            out.print(\",\\n'\" + escape((char) (prefixLen + ' ') + s.substring(prefixLen)) + \"'\");\n            order[cpool.get(s)] = i;\n        }\n\n        // cpool is not used beyond this point\n",
                      "markdown": "`        for (int i = 1; i < strings.length; i++) {\n            int prefixLen = Math.min(getCommonPrefix(s, s = strings[i]), 95);\n            out.print(\",\\n'\" + escape((char) (prefixLen + ' ') + s.substring(prefixLen)) + \"'\");\n            order[cpool.get(s)] = i;\n        }\n\n        // cpool is not used beyond this point\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/convert/FlameGraph.java"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 7,
                  "endLine": 196,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        printFrame(out, root, 0, 0);\n        out.print(outbuf);\n\n        tail = printTill(out, tail, \"/*highlight:*/\");\n        out.print(args.highlight != null ? \"'\" + escape(args.highlight) + \"'\" : \"\");\n\n        out.print(tail);\n",
                    "rendered": {
                      "text": "        printFrame(out, root, 0, 0);\n        out.print(outbuf);\n\n        tail = printTill(out, tail, \"/*highlight:*/\");\n        out.print(args.highlight != null ? \"'\" + escape(args.highlight) + \"'\" : \"\");\n\n        out.print(tail);\n",
                      "markdown": "`        printFrame(out, root, 0, 0);\n        out.print(outbuf);\n\n        tail = printTill(out, tail, \"/*highlight:*/\");\n        out.print(args.highlight != null ? \"'\" + escape(args.highlight) + \"'\" : \"\");\n\n        out.print(tail);\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/convert/FlameGraph.java"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 7,
                  "endLine": 192,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        tail = printTill(out, tail, \"/*cpool:*/\");\n        printCpool(out);\n\n        tail = printTill(out, tail, \"/*frames:*/\");\n        printFrame(out, root, 0, 0);\n        out.print(outbuf);\n\n",
                    "rendered": {
                      "text": "        tail = printTill(out, tail, \"/*cpool:*/\");\n        printCpool(out);\n\n        tail = printTill(out, tail, \"/*frames:*/\");\n        printFrame(out, root, 0, 0);\n        out.print(outbuf);\n\n",
                      "markdown": "`        tail = printTill(out, tail, \"/*cpool:*/\");\n        printCpool(out);\n\n        tail = printTill(out, tail, \"/*frames:*/\");\n        printFrame(out, root, 0, 0);\n        out.print(outbuf);\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/convert/FlameGraph.java"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 7,
                  "endLine": 189,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        tail = printTill(out, tail, \"/*depth:*/0\");\n        out.print(depth);\n\n        tail = printTill(out, tail, \"/*cpool:*/\");\n        printCpool(out);\n\n        tail = printTill(out, tail, \"/*frames:*/\");\n",
                    "rendered": {
                      "text": "        tail = printTill(out, tail, \"/*depth:*/0\");\n        out.print(depth);\n\n        tail = printTill(out, tail, \"/*cpool:*/\");\n        printCpool(out);\n\n        tail = printTill(out, tail, \"/*frames:*/\");\n",
                      "markdown": "`        tail = printTill(out, tail, \"/*depth:*/0\");\n        out.print(depth);\n\n        tail = printTill(out, tail, \"/*cpool:*/\");\n        printCpool(out);\n\n        tail = printTill(out, tail, \"/*frames:*/\");\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/convert/FlameGraph.java"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 7,
                  "endLine": 186,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        tail = printTill(out, tail, \"/*reverse:*/false\");\n        out.print(args.reverse);\n\n        tail = printTill(out, tail, \"/*depth:*/0\");\n        out.print(depth);\n\n        tail = printTill(out, tail, \"/*cpool:*/\");\n",
                    "rendered": {
                      "text": "        tail = printTill(out, tail, \"/*reverse:*/false\");\n        out.print(args.reverse);\n\n        tail = printTill(out, tail, \"/*depth:*/0\");\n        out.print(depth);\n\n        tail = printTill(out, tail, \"/*cpool:*/\");\n",
                      "markdown": "`        tail = printTill(out, tail, \"/*reverse:*/false\");\n        out.print(args.reverse);\n\n        tail = printTill(out, tail, \"/*depth:*/0\");\n        out.print(depth);\n\n        tail = printTill(out, tail, \"/*cpool:*/\");\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/convert/FlameGraph.java"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 7,
                  "endLine": 183,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        tail = printTill(out, tail, \"/*title:*/\");\n        out.print(args.title);\n\n        tail = printTill(out, tail, \"/*reverse:*/false\");\n        out.print(args.reverse);\n\n        tail = printTill(out, tail, \"/*depth:*/0\");\n",
                    "rendered": {
                      "text": "        tail = printTill(out, tail, \"/*title:*/\");\n        out.print(args.title);\n\n        tail = printTill(out, tail, \"/*reverse:*/false\");\n        out.print(args.reverse);\n\n        tail = printTill(out, tail, \"/*depth:*/0\");\n",
                      "markdown": "`        tail = printTill(out, tail, \"/*title:*/\");\n        out.print(args.title);\n\n        tail = printTill(out, tail, \"/*reverse:*/false\");\n        out.print(args.reverse);\n\n        tail = printTill(out, tail, \"/*depth:*/0\");\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/convert/FlameGraph.java"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 7,
                  "endLine": 180,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        int depth = mintotal > 1 ? root.depth(mintotal) : this.depth + 1;\n        out.print(Math.min(depth * 16, 32767));\n\n        tail = printTill(out, tail, \"/*title:*/\");\n        out.print(args.title);\n\n        tail = printTill(out, tail, \"/*reverse:*/false\");\n",
                    "rendered": {
                      "text": "        int depth = mintotal > 1 ? root.depth(mintotal) : this.depth + 1;\n        out.print(Math.min(depth * 16, 32767));\n\n        tail = printTill(out, tail, \"/*title:*/\");\n        out.print(args.title);\n\n        tail = printTill(out, tail, \"/*reverse:*/false\");\n",
                      "markdown": "`        int depth = mintotal > 1 ? root.depth(mintotal) : this.depth + 1;\n        out.print(Math.min(depth * 16, 32767));\n\n        tail = printTill(out, tail, \"/*title:*/\");\n        out.print(args.title);\n\n        tail = printTill(out, tail, \"/*reverse:*/false\");\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/convert/FlameGraph.java"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 7,
                  "endLine": 176,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n        String tail = getResource(\"/flame.html\");\n\n        tail = printTill(out, tail, \"/*height:*/300\");\n        int depth = mintotal > 1 ? root.depth(mintotal) : this.depth + 1;\n        out.print(Math.min(depth * 16, 32767));\n\n",
                    "rendered": {
                      "text": "\n        String tail = getResource(\"/flame.html\");\n\n        tail = printTill(out, tail, \"/*height:*/300\");\n        int depth = mintotal > 1 ? root.depth(mintotal) : this.depth + 1;\n        out.print(Math.min(depth * 16, 32767));\n\n",
                      "markdown": "`\n        String tail = getResource(\"/flame.html\");\n\n        tail = printTill(out, tail, \"/*height:*/300\");\n        int depth = mintotal > 1 ? root.depth(mintotal) : this.depth + 1;\n        out.print(Math.min(depth * 16, 32767));\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/converter/one/convert/FlameGraph.java"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 14,
                  "endLine": 174,
                  "endColumn": 20,
                  "snippet": {
                    "text": "            return;\n        }\n\n        String tail = getResource(\"/flame.html\");\n\n        tail = printTill(out, tail, \"/*height:*/300\");\n        int depth = mintotal > 1 ? root.depth(mintotal) : this.depth + 1;\n",
                    "rendered": {
                      "text": "            return;\n        }\n\n        String tail = getResource(\"/flame.html\");\n\n        tail = printTill(out, tail, \"/*height:*/300\");\n        int depth = mintotal > 1 ? root.depth(mintotal) : this.depth + 1;\n",
                      "markdown": "`            return;\n        }\n\n        String tail = getResource(\"/flame.html\");\n\n        tail = printTill(out, tail, \"/*height:*/300\");\n        int depth = mintotal > 1 ? root.depth(mintotal) : this.depth + 1;\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/lockTracer.h"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 42,
                  "endLine": 40,
                  "endColumn": 67,
                  "snippet": {
                    "text": "    static jint JNICALL RegisterNativesHook(JNIEnv* env, jclass cls, const JNINativeMethod* methods, jint nMethods);\n\n    static UnsafeParkFunc _orig_unsafe_park;\n    static void JNICALL UnsafeParkHook(JNIEnv* env, jobject instance, jboolean isAbsolute, jlong time);\n\n    static jobject getParkBlocker(jvmtiEnv* jvmti, JNIEnv* env);\n    static char* getLockName(jvmtiEnv* jvmti, JNIEnv* env, jobject lock);\n",
                    "rendered": {
                      "text": "    static jint JNICALL RegisterNativesHook(JNIEnv* env, jclass cls, const JNINativeMethod* methods, jint nMethods);\n\n    static UnsafeParkFunc _orig_unsafe_park;\n    static void JNICALL UnsafeParkHook(JNIEnv* env, jobject instance, jboolean isAbsolute, jlong time);\n\n    static jobject getParkBlocker(jvmtiEnv* jvmti, JNIEnv* env);\n    static char* getLockName(jvmtiEnv* jvmti, JNIEnv* env, jobject lock);\n",
                      "markdown": "`    static jint JNICALL RegisterNativesHook(JNIEnv* env, jclass cls, const JNINativeMethod* methods, jint nMethods);\n\n    static UnsafeParkFunc _orig_unsafe_park;\n    static void JNICALL UnsafeParkHook(JNIEnv* env, jobject instance, jboolean isAbsolute, jlong time);\n\n    static jobject getParkBlocker(jvmtiEnv* jvmti, JNIEnv* env);\n    static char* getLockName(jvmtiEnv* jvmti, JNIEnv* env, jobject lock);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/lockTracer.h"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 38,
                  "endLine": 33,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\n    static Error initialize(jvmtiEnv* jvmti, JNIEnv* env);\n\n    static void setUnsafeParkEntry(JNIEnv* env, UnsafeParkFunc entry);\n    static void setEntry0(JNIEnv* env, jclass cls, jlong entry);\n\n    static RegisterNativesFunc _orig_register_natives;\n",
                    "rendered": {
                      "text": "\n    static Error initialize(jvmtiEnv* jvmti, JNIEnv* env);\n\n    static void setUnsafeParkEntry(JNIEnv* env, UnsafeParkFunc entry);\n    static void setEntry0(JNIEnv* env, jclass cls, jlong entry);\n\n    static RegisterNativesFunc _orig_register_natives;\n",
                      "markdown": "`\n    static Error initialize(jvmtiEnv* jvmti, JNIEnv* env);\n\n    static void setUnsafeParkEntry(JNIEnv* env, UnsafeParkFunc entry);\n    static void setEntry0(JNIEnv* env, jclass cls, jlong entry);\n\n    static RegisterNativesFunc _orig_register_natives;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/javaApi.cpp"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 30,
                  "endLine": 60,
                  "endColumn": 38,
                  "snippet": {
                    "text": "extern \"C\" DLLEXPORT jstring JNICALL\nJava_one_profiler_AsyncProfiler_execute0(JNIEnv* env, jobject unused, jstring command) {\n    Arguments args;\n    const char* command_str = env->GetStringUTFChars(command, NULL);\n    Error error = args.parse(command_str);\n    env->ReleaseStringUTFChars(command, command_str);\n\n",
                    "rendered": {
                      "text": "extern \"C\" DLLEXPORT jstring JNICALL\nJava_one_profiler_AsyncProfiler_execute0(JNIEnv* env, jobject unused, jstring command) {\n    Arguments args;\n    const char* command_str = env->GetStringUTFChars(command, NULL);\n    Error error = args.parse(command_str);\n    env->ReleaseStringUTFChars(command, command_str);\n\n",
                      "markdown": "`extern \"C\" DLLEXPORT jstring JNICALL\nJava_one_profiler_AsyncProfiler_execute0(JNIEnv* env, jobject unused, jstring command) {\n    Arguments args;\n    const char* command_str = env->GetStringUTFChars(command, NULL);\n    Error error = args.parse(command_str);\n    env->ReleaseStringUTFChars(command, command_str);\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/javaApi.cpp"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 28,
                  "endLine": 30,
                  "endColumn": 36,
                  "snippet": {
                    "text": "extern \"C\" DLLEXPORT void JNICALL\nJava_one_profiler_AsyncProfiler_start0(JNIEnv* env, jobject unused, jstring event, jlong interval, jboolean reset) {\n    Arguments args;\n    const char* event_str = env->GetStringUTFChars(event, NULL);\n    if (strcmp(event_str, EVENT_ALLOC) == 0) {\n        args._alloc = interval > 0 ? interval : 0;\n    } else if (strcmp(event_str, EVENT_LOCK) == 0) {\n",
                    "rendered": {
                      "text": "extern \"C\" DLLEXPORT void JNICALL\nJava_one_profiler_AsyncProfiler_start0(JNIEnv* env, jobject unused, jstring event, jlong interval, jboolean reset) {\n    Arguments args;\n    const char* event_str = env->GetStringUTFChars(event, NULL);\n    if (strcmp(event_str, EVENT_ALLOC) == 0) {\n        args._alloc = interval > 0 ? interval : 0;\n    } else if (strcmp(event_str, EVENT_LOCK) == 0) {\n",
                      "markdown": "`extern \"C\" DLLEXPORT void JNICALL\nJava_one_profiler_AsyncProfiler_start0(JNIEnv* env, jobject unused, jstring event, jlong interval, jboolean reset) {\n    Arguments args;\n    const char* event_str = env->GetStringUTFChars(event, NULL);\n    if (strcmp(event_str, EVENT_ALLOC) == 0) {\n        args._alloc = interval > 0 ? interval : 0;\n    } else if (strcmp(event_str, EVENT_LOCK) == 0) {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/vmStructs.cpp"
                },
                "region": {
                  "startLine": 567,
                  "startColumn": 8,
                  "endLine": 567,
                  "endColumn": 23,
                  "snippet": {
                    "text": "        (_tid = env->GetFieldID(thread_class, \"tid\", \"J\")) == NULL ||\n        (_eetop = env->GetFieldID(thread_class, \"eetop\", \"J\")) == NULL) {\n        // No such field - probably not a HotSpot JVM\n        env->ExceptionClear();\n\n        void* j9thread = J9Ext::j9thread_self();\n        if (j9thread != NULL) {\n",
                    "rendered": {
                      "text": "        (_tid = env->GetFieldID(thread_class, \"tid\", \"J\")) == NULL ||\n        (_eetop = env->GetFieldID(thread_class, \"eetop\", \"J\")) == NULL) {\n        // No such field - probably not a HotSpot JVM\n        env->ExceptionClear();\n\n        void* j9thread = J9Ext::j9thread_self();\n        if (j9thread != NULL) {\n",
                      "markdown": "`        (_tid = env->GetFieldID(thread_class, \"tid\", \"J\")) == NULL ||\n        (_eetop = env->GetFieldID(thread_class, \"eetop\", \"J\")) == NULL) {\n        // No such field - probably not a HotSpot JVM\n        env->ExceptionClear();\n\n        void* j9thread = J9Ext::j9thread_self();\n        if (j9thread != NULL) {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/vmStructs.cpp"
                },
                "region": {
                  "startLine": 565,
                  "startColumn": 18,
                  "endLine": 565,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    jclass thread_class = env->FindClass(\"java/lang/Thread\");\n    if (thread_class == NULL ||\n        (_tid = env->GetFieldID(thread_class, \"tid\", \"J\")) == NULL ||\n        (_eetop = env->GetFieldID(thread_class, \"eetop\", \"J\")) == NULL) {\n        // No such field - probably not a HotSpot JVM\n        env->ExceptionClear();\n\n",
                    "rendered": {
                      "text": "    jclass thread_class = env->FindClass(\"java/lang/Thread\");\n    if (thread_class == NULL ||\n        (_tid = env->GetFieldID(thread_class, \"tid\", \"J\")) == NULL ||\n        (_eetop = env->GetFieldID(thread_class, \"eetop\", \"J\")) == NULL) {\n        // No such field - probably not a HotSpot JVM\n        env->ExceptionClear();\n\n",
                      "markdown": "`    jclass thread_class = env->FindClass(\"java/lang/Thread\");\n    if (thread_class == NULL ||\n        (_tid = env->GetFieldID(thread_class, \"tid\", \"J\")) == NULL ||\n        (_eetop = env->GetFieldID(thread_class, \"eetop\", \"J\")) == NULL) {\n        // No such field - probably not a HotSpot JVM\n        env->ExceptionClear();\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/vmStructs.cpp"
                },
                "region": {
                  "startLine": 564,
                  "startColumn": 16,
                  "endLine": 564,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    // Get eetop field - a bridge from Java Thread to VMThread\n    jclass thread_class = env->FindClass(\"java/lang/Thread\");\n    if (thread_class == NULL ||\n        (_tid = env->GetFieldID(thread_class, \"tid\", \"J\")) == NULL ||\n        (_eetop = env->GetFieldID(thread_class, \"eetop\", \"J\")) == NULL) {\n        // No such field - probably not a HotSpot JVM\n        env->ExceptionClear();\n",
                    "rendered": {
                      "text": "    // Get eetop field - a bridge from Java Thread to VMThread\n    jclass thread_class = env->FindClass(\"java/lang/Thread\");\n    if (thread_class == NULL ||\n        (_tid = env->GetFieldID(thread_class, \"tid\", \"J\")) == NULL ||\n        (_eetop = env->GetFieldID(thread_class, \"eetop\", \"J\")) == NULL) {\n        // No such field - probably not a HotSpot JVM\n        env->ExceptionClear();\n",
                      "markdown": "`    // Get eetop field - a bridge from Java Thread to VMThread\n    jclass thread_class = env->FindClass(\"java/lang/Thread\");\n    if (thread_class == NULL ||\n        (_tid = env->GetFieldID(thread_class, \"tid\", \"J\")) == NULL ||\n        (_eetop = env->GetFieldID(thread_class, \"eetop\", \"J\")) == NULL) {\n        // No such field - probably not a HotSpot JVM\n        env->ExceptionClear();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/vmStructs.cpp"
                },
                "region": {
                  "startLine": 513,
                  "startColumn": 80,
                  "endLine": 513,
                  "endColumn": 88,
                  "snippet": {
                    "text": "}\n\nvoid VMStructs::initJvmFunctions() {\n    _get_stack_trace = (GetStackTraceFunc)_libjvm->findSymbolByPrefix(\"_ZN8JvmtiEnv13GetStackTraceEP10JavaThreadiiP\");\n\n    if (VM::hotspot_version() == 8) {\n        _lock_func = (LockFunc)_libjvm->findSymbol(\"_ZN7Monitor28lock_without_safepoint_checkEv\");\n",
                    "rendered": {
                      "text": "}\n\nvoid VMStructs::initJvmFunctions() {\n    _get_stack_trace = (GetStackTraceFunc)_libjvm->findSymbolByPrefix(\"_ZN8JvmtiEnv13GetStackTraceEP10JavaThreadiiP\");\n\n    if (VM::hotspot_version() == 8) {\n        _lock_func = (LockFunc)_libjvm->findSymbol(\"_ZN7Monitor28lock_without_safepoint_checkEv\");\n",
                      "markdown": "`}\n\nvoid VMStructs::initJvmFunctions() {\n    _get_stack_trace = (GetStackTraceFunc)_libjvm->findSymbolByPrefix(\"_ZN8JvmtiEnv13GetStackTraceEP10JavaThreadiiP\");\n\n    if (VM::hotspot_version() == 8) {\n        _lock_func = (LockFunc)_libjvm->findSymbol(\"_ZN7Monitor28lock_without_safepoint_checkEv\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/vmStructs.cpp"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 6,
                  "endLine": 126,
                  "endColumn": 10,
                  "snippet": {
                    "text": "    return *(uintptr_t*)symbol;\n}\n\n// Run at agent load time\nvoid VMStructs::init(CodeCache* libjvm) {\n    _libjvm = libjvm;\n\n",
                    "rendered": {
                      "text": "    return *(uintptr_t*)symbol;\n}\n\n// Run at agent load time\nvoid VMStructs::init(CodeCache* libjvm) {\n    _libjvm = libjvm;\n\n",
                      "markdown": "`    return *(uintptr_t*)symbol;\n}\n\n// Run at agent load time\nvoid VMStructs::init(CodeCache* libjvm) {\n    _libjvm = libjvm;\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/vmStructs.cpp"
                },
                "region": {
                  "startLine": 559,
                  "startColumn": 11,
                  "endLine": 559,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        return;\n    }\n\n    JNIEnv* env = VM::jni();\n\n    // Get eetop field - a bridge from Java Thread to VMThread\n    jclass thread_class = env->FindClass(\"java/lang/Thread\");\n",
                    "rendered": {
                      "text": "        return;\n    }\n\n    JNIEnv* env = VM::jni();\n\n    // Get eetop field - a bridge from Java Thread to VMThread\n    jclass thread_class = env->FindClass(\"java/lang/Thread\");\n",
                      "markdown": "`        return;\n    }\n\n    JNIEnv* env = VM::jni();\n\n    // Get eetop field - a bridge from Java Thread to VMThread\n    jclass thread_class = env->FindClass(\"java/lang/Thread\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/vmStructs.cpp"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 20,
                  "endLine": 127,
                  "snippet": {
                    "text": "    return *(uintptr_t*)symbol;\n}\n\n// Run at agent load time\nvoid VMStructs::init(CodeCache* libjvm) {\n    _libjvm = libjvm;\n\n    if (!VM::isOpenJ9() && !VM::isZing()) {\n",
                    "rendered": {
                      "text": "    return *(uintptr_t*)symbol;\n}\n\n// Run at agent load time\nvoid VMStructs::init(CodeCache* libjvm) {\n    _libjvm = libjvm;\n\n    if (!VM::isOpenJ9() && !VM::isZing()) {\n",
                      "markdown": "`    return *(uintptr_t*)symbol;\n}\n\n// Run at agent load time\nvoid VMStructs::init(CodeCache* libjvm) {\n    _libjvm = libjvm;\n\n    if (!VM::isOpenJ9() && !VM::isZing()) {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/symbols_linux.cpp"
                },
                "region": {
                  "startLine": 479,
                  "startColumn": 20,
                  "endLine": 479,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    const char* suffixes[] = {\"/\", \"debuginfod_client/\", \".cache/debuginfod_client/\"};\n\n    for (int i = 0; i < sizeof(env_vars) / sizeof(env_vars[0]); i++) {\n        const char* env_val = getenv(env_vars[i]);\n        if (!env_val || !env_val[0]) {\n            continue;\n        }\n",
                    "rendered": {
                      "text": "    const char* suffixes[] = {\"/\", \"debuginfod_client/\", \".cache/debuginfod_client/\"};\n\n    for (int i = 0; i < sizeof(env_vars) / sizeof(env_vars[0]); i++) {\n        const char* env_val = getenv(env_vars[i]);\n        if (!env_val || !env_val[0]) {\n            continue;\n        }\n",
                      "markdown": "`    const char* suffixes[] = {\"/\", \"debuginfod_client/\", \".cache/debuginfod_client/\"};\n\n    for (int i = 0; i < sizeof(env_vars) / sizeof(env_vars[0]); i++) {\n        const char* env_val = getenv(env_vars[i]);\n        if (!env_val || !env_val[0]) {\n            continue;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/symbols_linux.cpp"
                },
                "region": {
                  "startLine": 307,
                  "startColumn": 6,
                  "endLine": 307,
                  "endColumn": 12,
                  "snippet": {
                    "text": "}\n\nvoid ElfParser::calcVirtualLoadAddress() {\n    // Find a difference between the virtual load address (often zero) and the actual DSO base\n    const char* pheaders = (const char*)_header + _header->e_phoff;\n    for (int i = 0; i < _header->e_phnum; i++) {\n        ElfProgramHeader* pheader = (ElfProgramHeader*)(pheaders + i * _header->e_phentsize);\n",
                    "rendered": {
                      "text": "}\n\nvoid ElfParser::calcVirtualLoadAddress() {\n    // Find a difference between the virtual load address (often zero) and the actual DSO base\n    const char* pheaders = (const char*)_header + _header->e_phoff;\n    for (int i = 0; i < _header->e_phnum; i++) {\n        ElfProgramHeader* pheader = (ElfProgramHeader*)(pheaders + i * _header->e_phentsize);\n",
                      "markdown": "`}\n\nvoid ElfParser::calcVirtualLoadAddress() {\n    // Find a difference between the virtual load address (often zero) and the actual DSO base\n    const char* pheaders = (const char*)_header + _header->e_phoff;\n    for (int i = 0; i < _header->e_phnum; i++) {\n        ElfProgramHeader* pheader = (ElfProgramHeader*)(pheaders + i * _header->e_phentsize);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/symbols_linux.cpp"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 19,
                  "endLine": 37,
                  "endColumn": 28,
                  "snippet": {
                    "text": "static int poll_hook(struct pollfd* fds, nfds_t nfds, int timeout) {\n    if (timeout >= 0) {\n        struct timespec ts;\n        ts.tv_sec = timeout / 1000;\n        ts.tv_nsec = (timeout % 1000) * 1000000;\n        return ppoll(fds, nfds, &ts, NULL);\n    } else {\n",
                    "rendered": {
                      "text": "static int poll_hook(struct pollfd* fds, nfds_t nfds, int timeout) {\n    if (timeout >= 0) {\n        struct timespec ts;\n        ts.tv_sec = timeout / 1000;\n        ts.tv_nsec = (timeout % 1000) * 1000000;\n        return ppoll(fds, nfds, &ts, NULL);\n    } else {\n",
                      "markdown": "`static int poll_hook(struct pollfd* fds, nfds_t nfds, int timeout) {\n    if (timeout >= 0) {\n        struct timespec ts;\n        ts.tv_sec = timeout / 1000;\n        ts.tv_nsec = (timeout % 1000) * 1000000;\n        return ppoll(fds, nfds, &ts, NULL);\n    } else {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/vmStructs.h"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 15,
                  "endLine": 321,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    }\n\n    static jlong javaThreadId(JNIEnv* env, jthread thread) {\n        return env->GetLongField(thread, _tid);\n    }\n\n    static int nativeThreadId(JNIEnv* jni, jthread thread);\n",
                    "rendered": {
                      "text": "    }\n\n    static jlong javaThreadId(JNIEnv* env, jthread thread) {\n        return env->GetLongField(thread, _tid);\n    }\n\n    static int nativeThreadId(JNIEnv* jni, jthread thread);\n",
                      "markdown": "`    }\n\n    static jlong javaThreadId(JNIEnv* env, jthread thread) {\n        return env->GetLongField(thread, _tid);\n    }\n\n    static int nativeThreadId(JNIEnv* jni, jthread thread);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/vmStructs.h"
                },
                "region": {
                  "startLine": 313,
                  "startColumn": 37,
                  "endLine": 313,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    }\n\n    static VMThread* fromJavaThread(JNIEnv* env, jthread thread) {\n        return (VMThread*)(uintptr_t)env->GetLongField(thread, _eetop);\n    }\n\n    static VMThread* fromEnv(JNIEnv* env) {\n",
                    "rendered": {
                      "text": "    }\n\n    static VMThread* fromJavaThread(JNIEnv* env, jthread thread) {\n        return (VMThread*)(uintptr_t)env->GetLongField(thread, _eetop);\n    }\n\n    static VMThread* fromEnv(JNIEnv* env) {\n",
                      "markdown": "`    }\n\n    static VMThread* fromJavaThread(JNIEnv* env, jthread thread) {\n        return (VMThread*)(uintptr_t)env->GetLongField(thread, _eetop);\n    }\n\n    static VMThread* fromEnv(JNIEnv* env) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/vmStructs.h"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 40,
                  "endLine": 255,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        } else if (sizeof(VMKlass*) == 8) {\n            return (VMKlass*)(uintptr_t)env->GetLongField(cls, _klass);\n        } else {\n            return (VMKlass*)(uintptr_t)env->GetIntField(cls, _klass);\n        }\n    }\n\n",
                    "rendered": {
                      "text": "        } else if (sizeof(VMKlass*) == 8) {\n            return (VMKlass*)(uintptr_t)env->GetLongField(cls, _klass);\n        } else {\n            return (VMKlass*)(uintptr_t)env->GetIntField(cls, _klass);\n        }\n    }\n\n",
                      "markdown": "`        } else if (sizeof(VMKlass*) == 8) {\n            return (VMKlass*)(uintptr_t)env->GetLongField(cls, _klass);\n        } else {\n            return (VMKlass*)(uintptr_t)env->GetIntField(cls, _klass);\n        }\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/vmStructs.h"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 40,
                  "endLine": 253,
                  "endColumn": 48,
                  "snippet": {
                    "text": "            jobject klassOop = env->GetObjectField(cls, _klass);\n            return (VMKlass*)(*(uintptr_t**)klassOop + 2);\n        } else if (sizeof(VMKlass*) == 8) {\n            return (VMKlass*)(uintptr_t)env->GetLongField(cls, _klass);\n        } else {\n            return (VMKlass*)(uintptr_t)env->GetIntField(cls, _klass);\n        }\n",
                    "rendered": {
                      "text": "            jobject klassOop = env->GetObjectField(cls, _klass);\n            return (VMKlass*)(*(uintptr_t**)klassOop + 2);\n        } else if (sizeof(VMKlass*) == 8) {\n            return (VMKlass*)(uintptr_t)env->GetLongField(cls, _klass);\n        } else {\n            return (VMKlass*)(uintptr_t)env->GetIntField(cls, _klass);\n        }\n",
                      "markdown": "`            jobject klassOop = env->GetObjectField(cls, _klass);\n            return (VMKlass*)(*(uintptr_t**)klassOop + 2);\n        } else if (sizeof(VMKlass*) == 8) {\n            return (VMKlass*)(uintptr_t)env->GetLongField(cls, _klass);\n        } else {\n            return (VMKlass*)(uintptr_t)env->GetIntField(cls, _klass);\n        }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/vmStructs.h"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 31,
                  "endLine": 250,
                  "endColumn": 39,
                  "snippet": {
                    "text": "  public:\n    static VMKlass* fromJavaClass(JNIEnv* env, jclass cls) {\n        if (_has_perm_gen) {\n            jobject klassOop = env->GetObjectField(cls, _klass);\n            return (VMKlass*)(*(uintptr_t**)klassOop + 2);\n        } else if (sizeof(VMKlass*) == 8) {\n            return (VMKlass*)(uintptr_t)env->GetLongField(cls, _klass);\n",
                    "rendered": {
                      "text": "  public:\n    static VMKlass* fromJavaClass(JNIEnv* env, jclass cls) {\n        if (_has_perm_gen) {\n            jobject klassOop = env->GetObjectField(cls, _klass);\n            return (VMKlass*)(*(uintptr_t**)klassOop + 2);\n        } else if (sizeof(VMKlass*) == 8) {\n            return (VMKlass*)(uintptr_t)env->GetLongField(cls, _klass);\n",
                      "markdown": "`  public:\n    static VMKlass* fromJavaClass(JNIEnv* env, jclass cls) {\n        if (_has_perm_gen) {\n            jobject klassOop = env->GetObjectField(cls, _klass);\n            return (VMKlass*)(*(uintptr_t**)klassOop + 2);\n        } else if (sizeof(VMKlass*) == 8) {\n            return (VMKlass*)(uintptr_t)env->GetLongField(cls, _klass);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/vmStructs.h"
                },
                "region": {
                  "startLine": 360,
                  "startColumn": 19,
                  "endLine": 360,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    }\n\n    VMMethod* compiledMethod() {\n        const char* env = *(const char**) at(_comp_env_offset);\n        if (env != NULL) {\n            const char* task = *(const char**) (env + _comp_task_offset);\n            if (task != NULL) {\n",
                    "rendered": {
                      "text": "    }\n\n    VMMethod* compiledMethod() {\n        const char* env = *(const char**) at(_comp_env_offset);\n        if (env != NULL) {\n            const char* task = *(const char**) (env + _comp_task_offset);\n            if (task != NULL) {\n",
                      "markdown": "`    }\n\n    VMMethod* compiledMethod() {\n        const char* env = *(const char**) at(_comp_env_offset);\n        if (env != NULL) {\n            const char* task = *(const char**) (env + _comp_task_offset);\n            if (task != NULL) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/profiler.cpp"
                },
                "region": {
                  "startLine": 1585,
                  "startColumn": 7,
                  "endLine": 1585,
                  "endColumn": 11,
                  "snippet": {
                    "text": "    struct tm t;\n    localtime_r(&start, &t);\n\n    int hh = (timeout >> 16) & 0xff;\n    if (hh < 24) {\n        t.tm_hour = hh;\n    }\n",
                    "rendered": {
                      "text": "    struct tm t;\n    localtime_r(&start, &t);\n\n    int hh = (timeout >> 16) & 0xff;\n    if (hh < 24) {\n        t.tm_hour = hh;\n    }\n",
                      "markdown": "`    struct tm t;\n    localtime_r(&start, &t);\n\n    int hh = (timeout >> 16) & 0xff;\n    if (hh < 24) {\n        t.tm_hour = hh;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/profiler.cpp"
                },
                "region": {
                  "startLine": 1593,
                  "startColumn": 12,
                  "endLine": 1593,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    if (mm < 60) {\n        t.tm_min = mm;\n    }\n    int ss = timeout & 0xff;\n    if (ss < 60) {\n        t.tm_sec = ss;\n    }\n",
                    "rendered": {
                      "text": "    if (mm < 60) {\n        t.tm_min = mm;\n    }\n    int ss = timeout & 0xff;\n    if (ss < 60) {\n        t.tm_sec = ss;\n    }\n",
                      "markdown": "`    if (mm < 60) {\n        t.tm_min = mm;\n    }\n    int ss = timeout & 0xff;\n    if (ss < 60) {\n        t.tm_sec = ss;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/profiler.cpp"
                },
                "region": {
                  "startLine": 1551,
                  "startColumn": 12,
                  "endLine": 1551,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        }\n    }\n\n    // Print top methods\n    if (args._dump_flat > 0) {\n        std::map<std::string, MethodSample> histogram;\n        for (std::vector<CallTraceSample>::const_iterator it = samples.begin(); it != samples.end(); ++it) {\n",
                    "rendered": {
                      "text": "        }\n    }\n\n    // Print top methods\n    if (args._dump_flat > 0) {\n        std::map<std::string, MethodSample> histogram;\n        for (std::vector<CallTraceSample>::const_iterator it = samples.begin(); it != samples.end(); ++it) {\n",
                      "markdown": "`        }\n    }\n\n    // Print top methods\n    if (args._dump_flat > 0) {\n        std::map<std::string, MethodSample> histogram;\n        for (std::vector<CallTraceSample>::const_iterator it = samples.begin(); it != samples.end(); ++it) {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/profiler.cpp"
                },
                "region": {
                  "startLine": 1530,
                  "startColumn": 12,
                  "endLine": 1530,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    double cpercent = 100.0 / total_counter;\n    const char* units_str = activeEngine()->units();\n\n    // Print top call stacks\n    if (args._dump_traces > 0) {\n        std::sort(samples.begin(), samples.end());\n\n",
                    "rendered": {
                      "text": "    double cpercent = 100.0 / total_counter;\n    const char* units_str = activeEngine()->units();\n\n    // Print top call stacks\n    if (args._dump_traces > 0) {\n        std::sort(samples.begin(), samples.end());\n\n",
                      "markdown": "`    double cpercent = 100.0 / total_counter;\n    const char* units_str = activeEngine()->units();\n\n    // Print top call stacks\n    if (args._dump_traces > 0) {\n        std::sort(samples.begin(), samples.end());\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/profiler.cpp"
                },
                "region": {
                  "startLine": 1033,
                  "startColumn": 35,
                  "endLine": 1033,
                  "endColumn": 41,
                  "snippet": {
                    "text": "        }\n\n        if (VMThread::key() < 0) {\n            return Error(\"Could not find VMThread bridge. Unsupported JVM?\");\n        }\n\n        if (_dlopen_entry == NULL) {\n",
                    "rendered": {
                      "text": "        }\n\n        if (VMThread::key() < 0) {\n            return Error(\"Could not find VMThread bridge. Unsupported JVM?\");\n        }\n\n        if (_dlopen_entry == NULL) {\n",
                      "markdown": "`        }\n\n        if (VMThread::key() < 0) {\n            return Error(\"Could not find VMThread bridge. Unsupported JVM?\");\n        }\n\n        if (_dlopen_entry == NULL) {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/profiler.cpp"
                },
                "region": {
                  "startLine": 1029,
                  "startColumn": 35,
                  "endLine": 1029,
                  "endColumn": 41,
                  "snippet": {
                    "text": "Error Profiler::checkJvmCapabilities() {\n    if (VM::loaded()) {\n        if (!VMStructs::hasJavaThreadId()) {\n            return Error(\"Could not find Thread ID field. Unsupported JVM?\");\n        }\n\n        if (VMThread::key() < 0) {\n",
                    "rendered": {
                      "text": "Error Profiler::checkJvmCapabilities() {\n    if (VM::loaded()) {\n        if (!VMStructs::hasJavaThreadId()) {\n            return Error(\"Could not find Thread ID field. Unsupported JVM?\");\n        }\n\n        if (VMThread::key() < 0) {\n",
                      "markdown": "`Error Profiler::checkJvmCapabilities() {\n    if (VM::loaded()) {\n        if (!VMStructs::hasJavaThreadId()) {\n            return Error(\"Could not find Thread ID field. Unsupported JVM?\");\n        }\n\n        if (VMThread::key() < 0) {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/stackFrame_arm.cpp"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 21,
                  "endLine": 84,
                  "endColumn": 25,
                  "snippet": {
                    "text": "bool StackFrame::unwindCompiled(NMethod* nm, uintptr_t& pc, uintptr_t& sp, uintptr_t& fp) {\n    instruction_t* ip = (instruction_t*)pc;\n    instruction_t* entry = (instruction_t*)nm->entry();\n    if (ip > entry && ip <= entry + 4 && (*ip & 0xffffff00) == 0xe24dd000) {\n        //    push  {r11, lr}\n        //    mov   r11, sp (optional)\n        // -> sub   sp, sp, #offs\n",
                    "rendered": {
                      "text": "bool StackFrame::unwindCompiled(NMethod* nm, uintptr_t& pc, uintptr_t& sp, uintptr_t& fp) {\n    instruction_t* ip = (instruction_t*)pc;\n    instruction_t* entry = (instruction_t*)nm->entry();\n    if (ip > entry && ip <= entry + 4 && (*ip & 0xffffff00) == 0xe24dd000) {\n        //    push  {r11, lr}\n        //    mov   r11, sp (optional)\n        // -> sub   sp, sp, #offs\n",
                      "markdown": "`bool StackFrame::unwindCompiled(NMethod* nm, uintptr_t& pc, uintptr_t& sp, uintptr_t& fp) {\n    instruction_t* ip = (instruction_t*)pc;\n    instruction_t* entry = (instruction_t*)nm->entry();\n    if (ip > entry && ip <= entry + 4 && (*ip & 0xffffff00) == 0xe24dd000) {\n        //    push  {r11, lr}\n        //    mov   r11, sp (optional)\n        // -> sub   sp, sp, #offs\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/stackFrame_arm.cpp"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 18,
                  "endLine": 82,
                  "endColumn": 22,
                  "snippet": {
                    "text": "}\n\nbool StackFrame::unwindCompiled(NMethod* nm, uintptr_t& pc, uintptr_t& sp, uintptr_t& fp) {\n    instruction_t* ip = (instruction_t*)pc;\n    instruction_t* entry = (instruction_t*)nm->entry();\n    if (ip > entry && ip <= entry + 4 && (*ip & 0xffffff00) == 0xe24dd000) {\n        //    push  {r11, lr}\n",
                    "rendered": {
                      "text": "}\n\nbool StackFrame::unwindCompiled(NMethod* nm, uintptr_t& pc, uintptr_t& sp, uintptr_t& fp) {\n    instruction_t* ip = (instruction_t*)pc;\n    instruction_t* entry = (instruction_t*)nm->entry();\n    if (ip > entry && ip <= entry + 4 && (*ip & 0xffffff00) == 0xe24dd000) {\n        //    push  {r11, lr}\n",
                      "markdown": "`}\n\nbool StackFrame::unwindCompiled(NMethod* nm, uintptr_t& pc, uintptr_t& sp, uintptr_t& fp) {\n    instruction_t* ip = (instruction_t*)pc;\n    instruction_t* entry = (instruction_t*)nm->entry();\n    if (ip > entry && ip <= entry + 4 && (*ip & 0xffffff00) == 0xe24dd000) {\n        //    push  {r11, lr}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/stackFrame_arm.cpp"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 18,
                  "endLine": 69,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n\nbool StackFrame::unwindStub(instruction_t* entry, const char* name, uintptr_t& pc, uintptr_t& sp, uintptr_t& fp) {\n    instruction_t* ip = (instruction_t*)pc;\n    if (ip == entry || *ip == 0xe12fff1e\n        || strncmp(name, \"itable\", 6) == 0\n        || strncmp(name, \"vtable\", 6) == 0\n",
                    "rendered": {
                      "text": "\n\nbool StackFrame::unwindStub(instruction_t* entry, const char* name, uintptr_t& pc, uintptr_t& sp, uintptr_t& fp) {\n    instruction_t* ip = (instruction_t*)pc;\n    if (ip == entry || *ip == 0xe12fff1e\n        || strncmp(name, \"itable\", 6) == 0\n        || strncmp(name, \"vtable\", 6) == 0\n",
                      "markdown": "`\n\nbool StackFrame::unwindStub(instruction_t* entry, const char* name, uintptr_t& pc, uintptr_t& sp, uintptr_t& fp) {\n    instruction_t* ip = (instruction_t*)pc;\n    if (ip == entry || *ip == 0xe12fff1e\n        || strncmp(name, \"itable\", 6) == 0\n        || strncmp(name, \"vtable\", 6) == 0\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/linearAllocator.cpp"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 10,
                  "endLine": 102,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\n    // Expected case: a new chunk is already reserved\n    Chunk* tail = __sync_val_compare_and_swap(&_tail, current, reserve);\n    return tail == current ? reserve : tail;\n}\n",
                    "rendered": {
                      "text": "\n    // Expected case: a new chunk is already reserved\n    Chunk* tail = __sync_val_compare_and_swap(&_tail, current, reserve);\n    return tail == current ? reserve : tail;\n}\n",
                      "markdown": "`\n    // Expected case: a new chunk is already reserved\n    Chunk* tail = __sync_val_compare_and_swap(&_tail, current, reserve);\n    return tail == current ? reserve : tail;\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/linearAllocator.cpp"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 10,
                  "endLine": 101,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    }\n\n    // Expected case: a new chunk is already reserved\n    Chunk* tail = __sync_val_compare_and_swap(&_tail, current, reserve);\n    return tail == current ? reserve : tail;\n}\n",
                    "rendered": {
                      "text": "    }\n\n    // Expected case: a new chunk is already reserved\n    Chunk* tail = __sync_val_compare_and_swap(&_tail, current, reserve);\n    return tail == current ? reserve : tail;\n}\n",
                      "markdown": "`    }\n\n    // Expected case: a new chunk is already reserved\n    Chunk* tail = __sync_val_compare_and_swap(&_tail, current, reserve);\n    return tail == current ? reserve : tail;\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/vmEntry.cpp"
                },
                "region": {
                  "startLine": 338,
                  "startColumn": 46,
                  "endLine": 338,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    // Allow profiler server only at JVM startup\n    if (_global_args._server != NULL) {\n        if (JavaAPI::startHttpServer(jvmti, jni, _global_args._server)) {\n            Log::info(\"Profiler server started at %s\", _global_args._server);\n        } else {\n            Log::error(\"Failed to start profiler server\");\n        }\n",
                    "rendered": {
                      "text": "    // Allow profiler server only at JVM startup\n    if (_global_args._server != NULL) {\n        if (JavaAPI::startHttpServer(jvmti, jni, _global_args._server)) {\n            Log::info(\"Profiler server started at %s\", _global_args._server);\n        } else {\n            Log::error(\"Failed to start profiler server\");\n        }\n",
                      "markdown": "`    // Allow profiler server only at JVM startup\n    if (_global_args._server != NULL) {\n        if (JavaAPI::startHttpServer(jvmti, jni, _global_args._server)) {\n            Log::info(\"Profiler server started at %s\", _global_args._server);\n        } else {\n            Log::error(\"Failed to start profiler server\");\n        }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/vmEntry.cpp"
                },
                "region": {
                  "startLine": 378,
                  "startColumn": 15,
                  "endLine": 378,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n    if (result == 0) {\n        // jmethodIDs are invalidated after RetransformClasses\n        JNIEnv* env = jni();\n        for (int i = 0; i < class_count; i++) {\n            if (classes[i] != NULL) {\n                loadMethodIDs(jvmti, env, classes[i]);\n",
                    "rendered": {
                      "text": "\n    if (result == 0) {\n        // jmethodIDs are invalidated after RetransformClasses\n        JNIEnv* env = jni();\n        for (int i = 0; i < class_count; i++) {\n            if (classes[i] != NULL) {\n                loadMethodIDs(jvmti, env, classes[i]);\n",
                      "markdown": "`\n    if (result == 0) {\n        // jmethodIDs are invalidated after RetransformClasses\n        JNIEnv* env = jni();\n        for (int i = 0; i < class_count; i++) {\n            if (classes[i] != NULL) {\n                loadMethodIDs(jvmti, env, classes[i]);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/src/vmEntry.cpp"
                },
                "region": {
                  "startLine": 362,
                  "startColumn": 15,
                  "endLine": 362,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n    if (result == 0) {\n        // jmethodIDs are invalidated after RedefineClasses\n        JNIEnv* env = jni();\n        for (int i = 0; i < class_count; i++) {\n            if (class_definitions[i].klass != NULL) {\n                loadMethodIDs(jvmti, env, class_definitions[i].klass);\n",
                    "rendered": {
                      "text": "\n    if (result == 0) {\n        // jmethodIDs are invalidated after RedefineClasses\n        JNIEnv* env = jni();\n        for (int i = 0; i < class_count; i++) {\n            if (class_definitions[i].klass != NULL) {\n                loadMethodIDs(jvmti, env, class_definitions[i].klass);\n",
                      "markdown": "`\n    if (result == 0) {\n        // jmethodIDs are invalidated after RedefineClasses\n        JNIEnv* env = jni();\n        for (int i = 0; i < class_count; i++) {\n            if (class_definitions[i].klass != NULL) {\n                loadMethodIDs(jvmti, env, class_definitions[i].klass);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/.github/ISSUE_TEMPLATE/bug-report.yml"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 20,
                  "endLine": 20,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    attributes:\n      label: Expected vs. actual behavior\n      description: |\n        What did you expect to happen? What happened instead?\n    validations:\n      required: false\n  - type: textarea\n",
                    "rendered": {
                      "text": "    attributes:\n      label: Expected vs. actual behavior\n      description: |\n        What did you expect to happen? What happened instead?\n    validations:\n      required: false\n  - type: textarea\n",
                      "markdown": "`    attributes:\n      label: Expected vs. actual behavior\n      description: |\n        What did you expect to happen? What happened instead?\n    validations:\n      required: false\n  - type: textarea\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/Dockerfile"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 11,
                  "endLine": 30,
                  "endColumn": 19,
                  "snippet": {
                    "text": "FROM public.ecr.aws/lts/ubuntu:18.04\n\n# This line should be exactly the same as at stage 0 to benefit from caching\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    sudo patchelf make g++ g++-aarch64-linux-gnu openjdk-11-jdk-headless && \\\n    rm -rf /var/cache/apt /var/lib/apt/lists/*\n\n",
                    "rendered": {
                      "text": "FROM public.ecr.aws/lts/ubuntu:18.04\n\n# This line should be exactly the same as at stage 0 to benefit from caching\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    sudo patchelf make g++ g++-aarch64-linux-gnu openjdk-11-jdk-headless && \\\n    rm -rf /var/cache/apt /var/lib/apt/lists/*\n\n",
                      "markdown": "`FROM public.ecr.aws/lts/ubuntu:18.04\n\n# This line should be exactly the same as at stage 0 to benefit from caching\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    sudo patchelf make g++ g++-aarch64-linux-gnu openjdk-11-jdk-headless && \\\n    rm -rf /var/cache/apt /var/lib/apt/lists/*\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/Dockerfile"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 41,
                  "endLine": 29,
                  "endColumn": 45,
                  "snippet": {
                    "text": "# Stage 1: install build tools + copy musl toolchain from the previous step\nFROM public.ecr.aws/lts/ubuntu:18.04\n\n# This line should be exactly the same as at stage 0 to benefit from caching\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    sudo patchelf make g++ g++-aarch64-linux-gnu openjdk-11-jdk-headless && \\\n    rm -rf /var/cache/apt /var/lib/apt/lists/*\n",
                    "rendered": {
                      "text": "# Stage 1: install build tools + copy musl toolchain from the previous step\nFROM public.ecr.aws/lts/ubuntu:18.04\n\n# This line should be exactly the same as at stage 0 to benefit from caching\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    sudo patchelf make g++ g++-aarch64-linux-gnu openjdk-11-jdk-headless && \\\n    rm -rf /var/cache/apt /var/lib/apt/lists/*\n",
                      "markdown": "`# Stage 1: install build tools + copy musl toolchain from the previous step\nFROM public.ecr.aws/lts/ubuntu:18.04\n\n# This line should be exactly the same as at stage 0 to benefit from caching\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    sudo patchelf make g++ g++-aarch64-linux-gnu openjdk-11-jdk-headless && \\\n    rm -rf /var/cache/apt /var/lib/apt/lists/*\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/Dockerfile"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 11,
                  "endLine": 6,
                  "endColumn": 19,
                  "snippet": {
                    "text": "# Stage 0: download musl sources and build cross-toolchains for both architectures\nFROM public.ecr.aws/lts/ubuntu:18.04\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    sudo patchelf make g++ g++-aarch64-linux-gnu openjdk-11-jdk-headless && \\\n    rm -rf /var/cache/apt /var/lib/apt/lists/*\n\n",
                    "rendered": {
                      "text": "# Stage 0: download musl sources and build cross-toolchains for both architectures\nFROM public.ecr.aws/lts/ubuntu:18.04\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    sudo patchelf make g++ g++-aarch64-linux-gnu openjdk-11-jdk-headless && \\\n    rm -rf /var/cache/apt /var/lib/apt/lists/*\n\n",
                      "markdown": "`# Stage 0: download musl sources and build cross-toolchains for both architectures\nFROM public.ecr.aws/lts/ubuntu:18.04\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    sudo patchelf make g++ g++-aarch64-linux-gnu openjdk-11-jdk-headless && \\\n    rm -rf /var/cache/apt /var/lib/apt/lists/*\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/Dockerfile"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 21,
                  "endLine": 30,
                  "endColumn": 30,
                  "snippet": {
                    "text": "FROM public.ecr.aws/lts/ubuntu:18.04\n\n# This line should be exactly the same as at stage 0 to benefit from caching\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    sudo patchelf make g++ g++-aarch64-linux-gnu openjdk-11-jdk-headless && \\\n    rm -rf /var/cache/apt /var/lib/apt/lists/*\n\n",
                    "rendered": {
                      "text": "FROM public.ecr.aws/lts/ubuntu:18.04\n\n# This line should be exactly the same as at stage 0 to benefit from caching\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    sudo patchelf make g++ g++-aarch64-linux-gnu openjdk-11-jdk-headless && \\\n    rm -rf /var/cache/apt /var/lib/apt/lists/*\n\n",
                      "markdown": "`FROM public.ecr.aws/lts/ubuntu:18.04\n\n# This line should be exactly the same as at stage 0 to benefit from caching\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    sudo patchelf make g++ g++-aarch64-linux-gnu openjdk-11-jdk-headless && \\\n    rm -rf /var/cache/apt /var/lib/apt/lists/*\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/Dockerfile"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 3,
                  "endLine": 30,
                  "endColumn": 12,
                  "snippet": {
                    "text": "FROM public.ecr.aws/lts/ubuntu:18.04\n\n# This line should be exactly the same as at stage 0 to benefit from caching\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    sudo patchelf make g++ g++-aarch64-linux-gnu openjdk-11-jdk-headless && \\\n    rm -rf /var/cache/apt /var/lib/apt/lists/*\n\n",
                    "rendered": {
                      "text": "FROM public.ecr.aws/lts/ubuntu:18.04\n\n# This line should be exactly the same as at stage 0 to benefit from caching\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    sudo patchelf make g++ g++-aarch64-linux-gnu openjdk-11-jdk-headless && \\\n    rm -rf /var/cache/apt /var/lib/apt/lists/*\n\n",
                      "markdown": "`FROM public.ecr.aws/lts/ubuntu:18.04\n\n# This line should be exactly the same as at stage 0 to benefit from caching\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    sudo patchelf make g++ g++-aarch64-linux-gnu openjdk-11-jdk-headless && \\\n    rm -rf /var/cache/apt /var/lib/apt/lists/*\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/Dockerfile"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 3,
                  "endLine": 17,
                  "endColumn": 8,
                  "snippet": {
                    "text": "RUN echo ${musl_sha256} ${musl_src}.tar.gz | sha256sum -c\n\nRUN [\"/bin/bash\", \"-c\", \"\\\n    tar xfz ${musl_src}.tar.gz && \\\n    cd /${musl_src} && \\\n    ./configure --disable-shared --prefix=/usr/local/musl/x86_64 && \\\n    make -j`nproc` && make install && make clean && \\\n",
                    "rendered": {
                      "text": "RUN echo ${musl_sha256} ${musl_src}.tar.gz | sha256sum -c\n\nRUN [\"/bin/bash\", \"-c\", \"\\\n    tar xfz ${musl_src}.tar.gz && \\\n    cd /${musl_src} && \\\n    ./configure --disable-shared --prefix=/usr/local/musl/x86_64 && \\\n    make -j`nproc` && make install && make clean && \\\n",
                      "markdown": "`RUN echo ${musl_sha256} ${musl_src}.tar.gz | sha256sum -c\n\nRUN [\"/bin/bash\", \"-c\", \"\\\n    tar xfz ${musl_src}.tar.gz && \\\n    cd /${musl_src} && \\\n    ./configure --disable-shared --prefix=/usr/local/musl/x86_64 && \\\n    make -j`nproc` && make install && make clean && \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/Dockerfile"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 21,
                  "endLine": 6,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# Stage 0: download musl sources and build cross-toolchains for both architectures\nFROM public.ecr.aws/lts/ubuntu:18.04\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    sudo patchelf make g++ g++-aarch64-linux-gnu openjdk-11-jdk-headless && \\\n    rm -rf /var/cache/apt /var/lib/apt/lists/*\n\n",
                    "rendered": {
                      "text": "# Stage 0: download musl sources and build cross-toolchains for both architectures\nFROM public.ecr.aws/lts/ubuntu:18.04\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    sudo patchelf make g++ g++-aarch64-linux-gnu openjdk-11-jdk-headless && \\\n    rm -rf /var/cache/apt /var/lib/apt/lists/*\n\n",
                      "markdown": "`# Stage 0: download musl sources and build cross-toolchains for both architectures\nFROM public.ecr.aws/lts/ubuntu:18.04\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    sudo patchelf make g++ g++-aarch64-linux-gnu openjdk-11-jdk-headless && \\\n    rm -rf /var/cache/apt /var/lib/apt/lists/*\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/Dockerfile"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 3,
                  "endLine": 6,
                  "endColumn": 12,
                  "snippet": {
                    "text": "# Stage 0: download musl sources and build cross-toolchains for both architectures\nFROM public.ecr.aws/lts/ubuntu:18.04\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    sudo patchelf make g++ g++-aarch64-linux-gnu openjdk-11-jdk-headless && \\\n    rm -rf /var/cache/apt /var/lib/apt/lists/*\n\n",
                    "rendered": {
                      "text": "# Stage 0: download musl sources and build cross-toolchains for both architectures\nFROM public.ecr.aws/lts/ubuntu:18.04\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    sudo patchelf make g++ g++-aarch64-linux-gnu openjdk-11-jdk-headless && \\\n    rm -rf /var/cache/apt /var/lib/apt/lists/*\n\n",
                      "markdown": "`# Stage 0: download musl sources and build cross-toolchains for both architectures\nFROM public.ecr.aws/lts/ubuntu:18.04\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    sudo patchelf make g++ g++-aarch64-linux-gnu openjdk-11-jdk-headless && \\\n    rm -rf /var/cache/apt /var/lib/apt/lists/*\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 383,
                  "startColumn": 22,
                  "endLine": 383,
                  "endColumn": 26,
                  "snippet": {
                    "text": " - Individual thread profiles\n\n### Improvements\n - Profiler can engage at JVM start and automatically dump results on exit\n - `list` command-line option to list supported events\n - Automatically find target process ID with `jps` tool\n - An option to include counter value in `collapsed` output\n",
                    "rendered": {
                      "text": " - Individual thread profiles\n\n### Improvements\n - Profiler can engage at JVM start and automatically dump results on exit\n - `list` command-line option to list supported events\n - Automatically find target process ID with `jps` tool\n - An option to include counter value in `collapsed` output\n",
                      "markdown": "` - Individual thread profiles\n\n### Improvements\n - Profiler can engage at JVM start and automatically dump results on exit\n - `list` command-line option to list supported events\n - Automatically find target process ID with `jps` tool\n - An option to include counter value in `collapsed` output\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 292,
                  "startColumn": 26,
                  "endLine": 293,
                  "snippet": {
                    "text": " - C++ function names as events, e.g. `-e VMThread::execute`\n - `check` command to test event availability\n - Allow shading of AsyncProfiler API\n - Enable CPU profiling on WSL\n - Enable allocation profiling on Zing\n - Reduce the amount of `unknown_Java` samples\n\n## [1.6] - 2019-09-09\n",
                    "rendered": {
                      "text": " - C++ function names as events, e.g. `-e VMThread::execute`\n - `check` command to test event availability\n - Allow shading of AsyncProfiler API\n - Enable CPU profiling on WSL\n - Enable allocation profiling on Zing\n - Reduce the amount of `unknown_Java` samples\n\n## [1.6] - 2019-09-09\n",
                      "markdown": "` - C++ function names as events, e.g. `-e VMThread::execute`\n - `check` command to test event availability\n - Allow shading of AsyncProfiler API\n - Enable CPU profiling on WSL\n - Enable allocation profiling on Zing\n - Reduce the amount of `unknown_Java` samples\n\n## [1.6] - 2019-09-09\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 35,
                  "endLine": 259,
                  "endColumn": 41,
                  "snippet": {
                    "text": "   - Collapsed stacks -> HTML 5 Flame Graph \n\n### Improvements\n - `profiler.sh` no longer requires bash (contributed by @cfstras)\n - Fixed long attach time and slow class loading on JDK 8\n - Fixed deadlocks in wall-clock profiling mode\n - Per-thread reverse Flame Graph and Call Tree\n",
                    "rendered": {
                      "text": "   - Collapsed stacks -> HTML 5 Flame Graph \n\n### Improvements\n - `profiler.sh` no longer requires bash (contributed by @cfstras)\n - Fixed long attach time and slow class loading on JDK 8\n - Fixed deadlocks in wall-clock profiling mode\n - Per-thread reverse Flame Graph and Call Tree\n",
                      "markdown": "`   - Collapsed stacks -> HTML 5 Flame Graph \n\n### Improvements\n - `profiler.sh` no longer requires bash (contributed by @cfstras)\n - Fixed long attach time and slow class loading on JDK 8\n - Fixed deadlocks in wall-clock profiling mode\n - Per-thread reverse Flame Graph and Call Tree\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 38,
                  "endLine": 197,
                  "endColumn": 42,
                  "snippet": {
                    "text": " - HTML 5 Flame Graphs: faster rendering, smaller size\n - JFR v2 output format, compatible with FlightRecorder API\n - JFR to Flame Graph converter\n - Automatically turn profiling on/off at `--begin`/`--end` functions\n - Time-to-safepoint profiling: `--ttsp`\n\n### Improvements\n",
                    "rendered": {
                      "text": " - HTML 5 Flame Graphs: faster rendering, smaller size\n - JFR v2 output format, compatible with FlightRecorder API\n - JFR to Flame Graph converter\n - Automatically turn profiling on/off at `--begin`/`--end` functions\n - Time-to-safepoint profiling: `--ttsp`\n\n### Improvements\n",
                      "markdown": "` - HTML 5 Flame Graphs: faster rendering, smaller size\n - JFR v2 output format, compatible with FlightRecorder API\n - JFR to Flame Graph converter\n - Automatically turn profiling on/off at `--begin`/`--end` functions\n - Time-to-safepoint profiling: `--ttsp`\n\n### Improvements\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 385,
                  "startColumn": 16,
                  "endLine": 385,
                  "endColumn": 22,
                  "snippet": {
                    "text": "### Improvements\n - Profiler can engage at JVM start and automatically dump results on exit\n - `list` command-line option to list supported events\n - Automatically find target process ID with `jps` tool\n - An option to include counter value in `collapsed` output\n - Friendly class names in allocation profile\n - Split allocations in new TLAB vs. outside TLAB\n",
                    "rendered": {
                      "text": "### Improvements\n - Profiler can engage at JVM start and automatically dump results on exit\n - `list` command-line option to list supported events\n - Automatically find target process ID with `jps` tool\n - An option to include counter value in `collapsed` output\n - Friendly class names in allocation profile\n - Split allocations in new TLAB vs. outside TLAB\n",
                      "markdown": "`### Improvements\n - Profiler can engage at JVM start and automatically dump results on exit\n - `list` command-line option to list supported events\n - Automatically find target process ID with `jps` tool\n - An option to include counter value in `collapsed` output\n - Friendly class names in allocation profile\n - Split allocations in new TLAB vs. outside TLAB\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 260,
                  "startColumn": 20,
                  "endLine": 260,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n### Improvements\n - `profiler.sh` no longer requires bash (contributed by @cfstras)\n - Fixed long attach time and slow class loading on JDK 8\n - Fixed deadlocks in wall-clock profiling mode\n - Per-thread reverse Flame Graph and Call Tree\n - ARM build now works with ARM and THUMB flavors of JDK\n",
                    "rendered": {
                      "text": "\n### Improvements\n - `profiler.sh` no longer requires bash (contributed by @cfstras)\n - Fixed long attach time and slow class loading on JDK 8\n - Fixed deadlocks in wall-clock profiling mode\n - Per-thread reverse Flame Graph and Call Tree\n - ARM build now works with ARM and THUMB flavors of JDK\n",
                      "markdown": "`\n### Improvements\n - `profiler.sh` no longer requires bash (contributed by @cfstras)\n - Fixed long attach time and slow class loading on JDK 8\n - Fixed deadlocks in wall-clock profiling mode\n - Per-thread reverse Flame Graph and Call Tree\n - ARM build now works with ARM and THUMB flavors of JDK\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 35,
                  "endLine": 259,
                  "endColumn": 41,
                  "snippet": {
                    "text": "   - Collapsed stacks -> HTML 5 Flame Graph \n\n### Improvements\n - `profiler.sh` no longer requires bash (contributed by @cfstras)\n - Fixed long attach time and slow class loading on JDK 8\n - Fixed deadlocks in wall-clock profiling mode\n - Per-thread reverse Flame Graph and Call Tree\n",
                    "rendered": {
                      "text": "   - Collapsed stacks -> HTML 5 Flame Graph \n\n### Improvements\n - `profiler.sh` no longer requires bash (contributed by @cfstras)\n - Fixed long attach time and slow class loading on JDK 8\n - Fixed deadlocks in wall-clock profiling mode\n - Per-thread reverse Flame Graph and Call Tree\n",
                      "markdown": "`   - Collapsed stacks -> HTML 5 Flame Graph \n\n### Improvements\n - `profiler.sh` no longer requires bash (contributed by @cfstras)\n - Fixed long attach time and slow class loading on JDK 8\n - Fixed deadlocks in wall-clock profiling mode\n - Per-thread reverse Flame Graph and Call Tree\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 20,
                  "endLine": 247,
                  "endColumn": 26,
                  "snippet": {
                    "text": " - Possibility to specify application name instead of `pid` (contributed by @yuzawa-san)\n\n### Bug fixes\n - Fixed long attach time and slow class loading on JDK 8\n - `UnsatisfiedLinkError` during Java method profiling\n - Avoid reading `/proc/kallsyms` when `--all-user` is specified\n\n",
                    "rendered": {
                      "text": " - Possibility to specify application name instead of `pid` (contributed by @yuzawa-san)\n\n### Bug fixes\n - Fixed long attach time and slow class loading on JDK 8\n - `UnsatisfiedLinkError` during Java method profiling\n - Avoid reading `/proc/kallsyms` when `--all-user` is specified\n\n",
                      "markdown": "` - Possibility to specify application name instead of `pid` (contributed by @yuzawa-san)\n\n### Bug fixes\n - Fixed long attach time and slow class loading on JDK 8\n - `UnsatisfiedLinkError` during Java method profiling\n - Avoid reading `/proc/kallsyms` when `--all-user` is specified\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 7,
                  "endLine": 116,
                  "endColumn": 12,
                  "snippet": {
                    "text": "## [2.8] - 2022-05-09\n\n### Features\n - Mark top methods as interpreted, compiled (C1/C2), or inlined\n - JVM TI based allocation profiling for JDK 11+\n - Embedded HTTP management server\n\n",
                    "rendered": {
                      "text": "## [2.8] - 2022-05-09\n\n### Features\n - Mark top methods as interpreted, compiled (C1/C2), or inlined\n - JVM TI based allocation profiling for JDK 11+\n - Embedded HTTP management server\n\n",
                      "markdown": "`## [2.8] - 2022-05-09\n\n### Features\n - Mark top methods as interpreted, compiled (C1/C2), or inlined\n - JVM TI based allocation profiling for JDK 11+\n - Embedded HTTP management server\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 30,
                  "endLine": 102,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n### Improvements\n - JFR to pprof converter (contributed by @NeQuissimus)\n - JFR converter improvements: time range, collapsed output, pattern highlighting\n - `%n` pattern in file names; limit number of output files\n - `--lib` to customize profiler library path in a container\n - `profiler.sh list` command now works without PID\n",
                    "rendered": {
                      "text": "\n### Improvements\n - JFR to pprof converter (contributed by @NeQuissimus)\n - JFR converter improvements: time range, collapsed output, pattern highlighting\n - `%n` pattern in file names; limit number of output files\n - `--lib` to customize profiler library path in a container\n - `profiler.sh list` command now works without PID\n",
                      "markdown": "`\n### Improvements\n - JFR to pprof converter (contributed by @NeQuissimus)\n - JFR converter improvements: time range, collapsed output, pattern highlighting\n - `%n` pattern in file names; limit number of output files\n - `--lib` to customize profiler library path in a container\n - `profiler.sh list` command now works without PID\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 220,
                  "endLine": 48,
                  "endColumn": 224,
                  "snippet": {
                    "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/async-profiler/async-profiler/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                    "rendered": {
                      "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/async-profiler/async-profiler/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                      "markdown": "`\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/async-profiler/async-profiler/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 7,
                  "endLine": 48,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/async-profiler/async-profiler/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                    "rendered": {
                      "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/async-profiler/async-profiler/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                      "markdown": "`\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/async-profiler/async-profiler/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 38,
                  "endLine": 16,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\n## Reporting Bugs/Feature Requests\n\nWe welcome you to use the GitHub issue tracker to report bugs or suggest features.\n\nWhen filing an issue, please check [existing open](https://github.com/async-profiler/async-profiler/issues), or [recently closed](https://github.com/async-profiler/async-profiler/issues?q=is%3Aissue+is%3Aclosed), issues to make sure somebody else hasn't already\nreported the issue. Please try to include as much information as you can. Details like these are incredibly useful:\n",
                    "rendered": {
                      "text": "\n## Reporting Bugs/Feature Requests\n\nWe welcome you to use the GitHub issue tracker to report bugs or suggest features.\n\nWhen filing an issue, please check [existing open](https://github.com/async-profiler/async-profiler/issues), or [recently closed](https://github.com/async-profiler/async-profiler/issues?q=is%3Aissue+is%3Aclosed), issues to make sure somebody else hasn't already\nreported the issue. Please try to include as much information as you can. Details like these are incredibly useful:\n",
                      "markdown": "`\n## Reporting Bugs/Feature Requests\n\nWe welcome you to use the GitHub issue tracker to report bugs or suggest features.\n\nWhen filing an issue, please check [existing open](https://github.com/async-profiler/async-profiler/issues), or [recently closed](https://github.com/async-profiler/async-profiler/issues?q=is%3Aissue+is%3Aclosed), issues to make sure somebody else hasn't already\nreported the issue. Please try to include as much information as you can. Details like these are incredibly useful:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 48,
                  "endLine": 48,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/async-profiler/async-profiler/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                    "rendered": {
                      "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/async-profiler/async-profiler/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                      "markdown": "`\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/async-profiler/async-profiler/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/async-profiler.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 77,
                  "endLine": 32,
                  "endColumn": 83,
                  "snippet": {
                    "text": "\n1. You are working against the latest source on the *master* branch.\n2. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already.\n3. You open an issue to discuss any significant work - we would hate for your time to be wasted.\n\nTo send us a pull request, please:\n\n",
                    "rendered": {
                      "text": "\n1. You are working against the latest source on the *master* branch.\n2. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already.\n3. You open an issue to discuss any significant work - we would hate for your time to be wasted.\n\nTo send us a pull request, please:\n\n",
                      "markdown": "`\n1. You are working against the latest source on the *master* branch.\n2. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already.\n3. You open an issue to discuss any significant work - we would hate for your time to be wasted.\n\nTo send us a pull request, please:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}